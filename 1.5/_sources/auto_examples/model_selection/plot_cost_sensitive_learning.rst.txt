
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/model_selection/plot_cost_sensitive_learning.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_model_selection_plot_cost_sensitive_learning.py>`
        to download the full example code. or to run this example in your browser via JupyterLite or Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_model_selection_plot_cost_sensitive_learning.py:


==============================================================
Post-tuning the decision threshold for cost-sensitive learning
==============================================================

Once a classifier is trained, the output of the :term:`predict` method outputs class
label predictions corresponding to a thresholding of either the
:term:`decision_function` or the :term:`predict_proba` output. For a binary classifier,
the default threshold is defined as a posterior probability estimate of 0.5 or a
decision score of 0.0.

However, this default strategy is most likely not optimal for the task at hand.
Here, we use the "Statlog" German credit dataset [1]_ to illustrate a use case.
In this dataset, the task is to predict whether a person has a "good" or "bad" credit.
In addition, a cost-matrix is provided that specifies the cost of
misclassification. Specifically, misclassifying a "bad" credit as "good" is five
times more costly on average than misclassifying a "good" credit as "bad".

We use the :class:`~sklearn.model_selection.TunedThresholdClassifierCV` to select the
cut-off point of the decision function that minimizes the provided business
cost.

In the second part of the example, we further extend this approach by
considering the problem of fraud detection in credit card transactions: in this
case, the business metric depends on the amount of each individual transaction.

.. rubric :: References

.. [1] "Statlog (German Credit Data) Data Set", UCI Machine Learning Repository,
    `Link <https://archive.ics.uci.edu/ml/datasets/Statlog+%28German+Credit+Data%29>`_.

.. [2] `Charles Elkan, "The Foundations of Cost-Sensitive Learning",
    International joint conference on artificial intelligence.
    Vol. 17. No. 1. Lawrence Erlbaum Associates Ltd, 2001.
    <https://cseweb.ucsd.edu/~elkan/rescale.pdf>`_

.. GENERATED FROM PYTHON SOURCE LINES 39-52

Cost-sensitive learning with constant gains and costs
-----------------------------------------------------

In this first section, we illustrate the use of the
:class:`~sklearn.model_selection.TunedThresholdClassifierCV` in a setting of
cost-sensitive learning when the gains and costs associated to each entry of the
confusion matrix are constant. We use the problematic presented in [2]_ using the
"Statlog" German credit dataset [1]_.

"Statlog" German credit dataset
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

We fetch the German credit dataset from OpenML.

.. GENERATED FROM PYTHON SOURCE LINES 52-60

.. code-block:: Python

    import sklearn
    from sklearn.datasets import fetch_openml

    sklearn.set_config(transform_output="pandas")

    german_credit = fetch_openml(data_id=31, as_frame=True, parser="pandas")
    X, y = german_credit.data, german_credit.target








.. GENERATED FROM PYTHON SOURCE LINES 61-62

We check the feature types available in `X`.

.. GENERATED FROM PYTHON SOURCE LINES 62-64

.. code-block:: Python

    X.info()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    <class 'pandas.core.frame.DataFrame'>
    RangeIndex: 1000 entries, 0 to 999
    Data columns (total 20 columns):
     #   Column                  Non-Null Count  Dtype   
    ---  ------                  --------------  -----   
     0   checking_status         1000 non-null   category
     1   duration                1000 non-null   int64   
     2   credit_history          1000 non-null   category
     3   purpose                 1000 non-null   category
     4   credit_amount           1000 non-null   int64   
     5   savings_status          1000 non-null   category
     6   employment              1000 non-null   category
     7   installment_commitment  1000 non-null   int64   
     8   personal_status         1000 non-null   category
     9   other_parties           1000 non-null   category
     10  residence_since         1000 non-null   int64   
     11  property_magnitude      1000 non-null   category
     12  age                     1000 non-null   int64   
     13  other_payment_plans     1000 non-null   category
     14  housing                 1000 non-null   category
     15  existing_credits        1000 non-null   int64   
     16  job                     1000 non-null   category
     17  num_dependents          1000 non-null   int64   
     18  own_telephone           1000 non-null   category
     19  foreign_worker          1000 non-null   category
    dtypes: category(13), int64(7)
    memory usage: 69.9 KB




.. GENERATED FROM PYTHON SOURCE LINES 65-67

Many features are categorical and usually string-encoded. We need to encode
these categories when we develop our predictive model. Let's check the targets.

.. GENERATED FROM PYTHON SOURCE LINES 67-69

.. code-block:: Python

    y.value_counts()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    class
    good    700
    bad     300
    Name: count, dtype: int64



.. GENERATED FROM PYTHON SOURCE LINES 70-78

Another observation is that the dataset is imbalanced. We would need to be careful
when evaluating our predictive model and use a family of metrics that are adapted
to this setting.

In addition, we observe that the target is string-encoded. Some metrics
(e.g. precision and recall) require to provide the label of interest also called
the "positive label". Here, we define that our goal is to predict whether or not
a sample is a "bad" credit.

.. GENERATED FROM PYTHON SOURCE LINES 78-80

.. code-block:: Python

    pos_label, neg_label = "bad", "good"








.. GENERATED FROM PYTHON SOURCE LINES 81-82

To carry our analysis, we split our dataset using a single stratified split.

.. GENERATED FROM PYTHON SOURCE LINES 82-86

.. code-block:: Python

    from sklearn.model_selection import train_test_split

    X_train, X_test, y_train, y_test = train_test_split(X, y, stratify=y, random_state=0)








.. GENERATED FROM PYTHON SOURCE LINES 87-102

We are ready to design our predictive model and the associated evaluation strategy.

Evaluation metrics
^^^^^^^^^^^^^^^^^^

In this section, we define a set of metrics that we use later. To see
the effect of tuning the cut-off point, we evaluate the predictive model using
the Receiver Operating Characteristic (ROC) curve and the Precision-Recall curve.
The values reported on these plots are therefore the true positive rate (TPR),
also known as the recall or the sensitivity, and the false positive rate (FPR),
also known as the specificity, for the ROC curve and the precision and recall for
the Precision-Recall curve.

From these four metrics, scikit-learn does not provide a scorer for the FPR. We
therefore need to define a small custom function to compute it.

.. GENERATED FROM PYTHON SOURCE LINES 102-112

.. code-block:: Python

    from sklearn.metrics import confusion_matrix


    def fpr_score(y, y_pred, neg_label, pos_label):
        cm = confusion_matrix(y, y_pred, labels=[neg_label, pos_label])
        tn, fp, _, _ = cm.ravel()
        tnr = tn / (tn + fp)
        return 1 - tnr









.. GENERATED FROM PYTHON SOURCE LINES 113-121

As previously stated, the "positive label" is not defined as the value "1" and calling
some of the metrics with this non-standard value raise an error. We need to
provide the indication of the "positive label" to the metrics.

We therefore need to define a scikit-learn scorer using
:func:`~sklearn.metrics.make_scorer` where the information is passed. We store all
the custom scorers in a dictionary. To use them, we need to pass the fitted model,
the data and the target on which we want to evaluate the predictive model.

.. GENERATED FROM PYTHON SOURCE LINES 121-131

.. code-block:: Python

    from sklearn.metrics import make_scorer, precision_score, recall_score

    tpr_score = recall_score  # TPR and recall are the same metric
    scoring = {
        "precision": make_scorer(precision_score, pos_label=pos_label),
        "recall": make_scorer(recall_score, pos_label=pos_label),
        "fpr": make_scorer(fpr_score, neg_label=neg_label, pos_label=pos_label),
        "tpr": make_scorer(tpr_score, pos_label=pos_label),
    }








.. GENERATED FROM PYTHON SOURCE LINES 132-146

In addition, the original research [1]_ defines a custom business metric. We
call a "business metric" any metric function that aims at quantifying how the
predictions (correct or wrong) might impact the business value of deploying a
given machine learning model in a specific application context. For our
credit prediction task, the authors provide a custom cost-matrix which
encodes that classifying a a "bad" credit as "good" is 5 times more costly on
average than the opposite: it is less costly for the financing institution to
not grant a credit to a potential customer that will not default (and
therefore miss a good customer that would have otherwise both reimbursed the
credit and payed interests) than to grant a credit to a customer that will
default.

We define a python function that weight the confusion matrix and return the
overall cost.

.. GENERATED FROM PYTHON SOURCE LINES 146-178

.. code-block:: Python

    import numpy as np


    def credit_gain_score(y, y_pred, neg_label, pos_label):
        cm = confusion_matrix(y, y_pred, labels=[neg_label, pos_label])
        # The rows of the confusion matrix hold the counts of observed classes
        # while the columns hold counts of predicted classes. Recall that here we
        # consider "bad" as the positive class (second row and column).
        # Scikit-learn model selection tools expect that we follow a convention
        # that "higher" means "better", hence the following gain matrix assigns
        # negative gains (costs) to the two kinds of prediction errors:
        # - a gain of -1 for each false positive ("good" credit labeled as "bad"),
        # - a gain of -5 for each false negative ("bad" credit labeled as "good"),
        # The true positives and true negatives are assigned null gains in this
        # metric.
        #
        # Note that theoretically, given that our model is calibrated and our data
        # set representative and large enough, we do not need to tune the
        # threshold, but can safely set it to the cost ration 1/5, as stated by Eq.
        # (2) in Elkan paper [2]_.
        gain_matrix = np.array(
            [
                [0, -1],  # -1 gain for false positives
                [-5, 0],  # -5 gain for false negatives
            ]
        )
        return np.sum(cm * gain_matrix)


    scoring["cost_gain"] = make_scorer(
        credit_gain_score, neg_label=neg_label, pos_label=pos_label
    )







.. GENERATED FROM PYTHON SOURCE LINES 179-184

Vanilla predictive model
^^^^^^^^^^^^^^^^^^^^^^^^

We use :class:`~sklearn.ensemble.HistGradientBoostingClassifier` as a predictive model
that natively handles categorical features and missing values.

.. GENERATED FROM PYTHON SOURCE LINES 184-191

.. code-block:: Python

    from sklearn.ensemble import HistGradientBoostingClassifier

    model = HistGradientBoostingClassifier(
        categorical_features="from_dtype", random_state=0
    ).fit(X_train, y_train)
    model






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-container-id-56 {
      /* Definition of color scheme common for light and dark mode */
      --sklearn-color-text: black;
      --sklearn-color-line: gray;
      /* Definition of color scheme for unfitted estimators */
      --sklearn-color-unfitted-level-0: #fff5e6;
      --sklearn-color-unfitted-level-1: #f6e4d2;
      --sklearn-color-unfitted-level-2: #ffe0b3;
      --sklearn-color-unfitted-level-3: chocolate;
      /* Definition of color scheme for fitted estimators */
      --sklearn-color-fitted-level-0: #f0f8ff;
      --sklearn-color-fitted-level-1: #d4ebff;
      --sklearn-color-fitted-level-2: #b3dbfd;
      --sklearn-color-fitted-level-3: cornflowerblue;

      /* Specific color for light theme */
      --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));
      --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));
      --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));
      --sklearn-color-icon: #696969;

      @media (prefers-color-scheme: dark) {
        /* Redefinition of color scheme for dark theme */
        --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));
        --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));
        --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));
        --sklearn-color-icon: #878787;
      }
    }

    #sk-container-id-56 {
      color: var(--sklearn-color-text);
    }

    #sk-container-id-56 pre {
      padding: 0;
    }

    #sk-container-id-56 input.sk-hidden--visually {
      border: 0;
      clip: rect(1px 1px 1px 1px);
      clip: rect(1px, 1px, 1px, 1px);
      height: 1px;
      margin: -1px;
      overflow: hidden;
      padding: 0;
      position: absolute;
      width: 1px;
    }

    #sk-container-id-56 div.sk-dashed-wrapped {
      border: 1px dashed var(--sklearn-color-line);
      margin: 0 0.4em 0.5em 0.4em;
      box-sizing: border-box;
      padding-bottom: 0.4em;
      background-color: var(--sklearn-color-background);
    }

    #sk-container-id-56 div.sk-container {
      /* jupyter's `normalize.less` sets `[hidden] { display: none; }`
         but bootstrap.min.css set `[hidden] { display: none !important; }`
         so we also need the `!important` here to be able to override the
         default hidden behavior on the sphinx rendered scikit-learn.org.
         See: https://github.com/scikit-learn/scikit-learn/issues/21755 */
      display: inline-block !important;
      position: relative;
    }

    #sk-container-id-56 div.sk-text-repr-fallback {
      display: none;
    }

    div.sk-parallel-item,
    div.sk-serial,
    div.sk-item {
      /* draw centered vertical line to link estimators */
      background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));
      background-size: 2px 100%;
      background-repeat: no-repeat;
      background-position: center center;
    }

    /* Parallel-specific style estimator block */

    #sk-container-id-56 div.sk-parallel-item::after {
      content: "";
      width: 100%;
      border-bottom: 2px solid var(--sklearn-color-text-on-default-background);
      flex-grow: 1;
    }

    #sk-container-id-56 div.sk-parallel {
      display: flex;
      align-items: stretch;
      justify-content: center;
      background-color: var(--sklearn-color-background);
      position: relative;
    }

    #sk-container-id-56 div.sk-parallel-item {
      display: flex;
      flex-direction: column;
    }

    #sk-container-id-56 div.sk-parallel-item:first-child::after {
      align-self: flex-end;
      width: 50%;
    }

    #sk-container-id-56 div.sk-parallel-item:last-child::after {
      align-self: flex-start;
      width: 50%;
    }

    #sk-container-id-56 div.sk-parallel-item:only-child::after {
      width: 0;
    }

    /* Serial-specific style estimator block */

    #sk-container-id-56 div.sk-serial {
      display: flex;
      flex-direction: column;
      align-items: center;
      background-color: var(--sklearn-color-background);
      padding-right: 1em;
      padding-left: 1em;
    }


    /* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is
    clickable and can be expanded/collapsed.
    - Pipeline and ColumnTransformer use this feature and define the default style
    - Estimators will overwrite some part of the style using the `sk-estimator` class
    */

    /* Pipeline and ColumnTransformer style (default) */

    #sk-container-id-56 div.sk-toggleable {
      /* Default theme specific background. It is overwritten whether we have a
      specific estimator or a Pipeline/ColumnTransformer */
      background-color: var(--sklearn-color-background);
    }

    /* Toggleable label */
    #sk-container-id-56 label.sk-toggleable__label {
      cursor: pointer;
      display: block;
      width: 100%;
      margin-bottom: 0;
      padding: 0.5em;
      box-sizing: border-box;
      text-align: center;
    }

    #sk-container-id-56 label.sk-toggleable__label-arrow:before {
      /* Arrow on the left of the label */
      content: "▸";
      float: left;
      margin-right: 0.25em;
      color: var(--sklearn-color-icon);
    }

    #sk-container-id-56 label.sk-toggleable__label-arrow:hover:before {
      color: var(--sklearn-color-text);
    }

    /* Toggleable content - dropdown */

    #sk-container-id-56 div.sk-toggleable__content {
      max-height: 0;
      max-width: 0;
      overflow: hidden;
      text-align: left;
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-0);
    }

    #sk-container-id-56 div.sk-toggleable__content.fitted {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-0);
    }

    #sk-container-id-56 div.sk-toggleable__content pre {
      margin: 0.2em;
      border-radius: 0.25em;
      color: var(--sklearn-color-text);
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-0);
    }

    #sk-container-id-56 div.sk-toggleable__content.fitted pre {
      /* unfitted */
      background-color: var(--sklearn-color-fitted-level-0);
    }

    #sk-container-id-56 input.sk-toggleable__control:checked~div.sk-toggleable__content {
      /* Expand drop-down */
      max-height: 200px;
      max-width: 100%;
      overflow: auto;
    }

    #sk-container-id-56 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {
      content: "▾";
    }

    /* Pipeline/ColumnTransformer-specific style */

    #sk-container-id-56 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {
      color: var(--sklearn-color-text);
      background-color: var(--sklearn-color-unfitted-level-2);
    }

    #sk-container-id-56 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {
      background-color: var(--sklearn-color-fitted-level-2);
    }

    /* Estimator-specific style */

    /* Colorize estimator box */
    #sk-container-id-56 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-2);
    }

    #sk-container-id-56 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-2);
    }

    #sk-container-id-56 div.sk-label label.sk-toggleable__label,
    #sk-container-id-56 div.sk-label label {
      /* The background is the default theme color */
      color: var(--sklearn-color-text-on-default-background);
    }

    /* On hover, darken the color of the background */
    #sk-container-id-56 div.sk-label:hover label.sk-toggleable__label {
      color: var(--sklearn-color-text);
      background-color: var(--sklearn-color-unfitted-level-2);
    }

    /* Label box, darken color on hover, fitted */
    #sk-container-id-56 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {
      color: var(--sklearn-color-text);
      background-color: var(--sklearn-color-fitted-level-2);
    }

    /* Estimator label */

    #sk-container-id-56 div.sk-label label {
      font-family: monospace;
      font-weight: bold;
      display: inline-block;
      line-height: 1.2em;
    }

    #sk-container-id-56 div.sk-label-container {
      text-align: center;
    }

    /* Estimator-specific */
    #sk-container-id-56 div.sk-estimator {
      font-family: monospace;
      border: 1px dotted var(--sklearn-color-border-box);
      border-radius: 0.25em;
      box-sizing: border-box;
      margin-bottom: 0.5em;
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-0);
    }

    #sk-container-id-56 div.sk-estimator.fitted {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-0);
    }

    /* on hover */
    #sk-container-id-56 div.sk-estimator:hover {
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-2);
    }

    #sk-container-id-56 div.sk-estimator.fitted:hover {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-2);
    }

    /* Specification for estimator info (e.g. "i" and "?") */

    /* Common style for "i" and "?" */

    .sk-estimator-doc-link,
    a:link.sk-estimator-doc-link,
    a:visited.sk-estimator-doc-link {
      float: right;
      font-size: smaller;
      line-height: 1em;
      font-family: monospace;
      background-color: var(--sklearn-color-background);
      border-radius: 1em;
      height: 1em;
      width: 1em;
      text-decoration: none !important;
      margin-left: 1ex;
      /* unfitted */
      border: var(--sklearn-color-unfitted-level-1) 1pt solid;
      color: var(--sklearn-color-unfitted-level-1);
    }

    .sk-estimator-doc-link.fitted,
    a:link.sk-estimator-doc-link.fitted,
    a:visited.sk-estimator-doc-link.fitted {
      /* fitted */
      border: var(--sklearn-color-fitted-level-1) 1pt solid;
      color: var(--sklearn-color-fitted-level-1);
    }

    /* On hover */
    div.sk-estimator:hover .sk-estimator-doc-link:hover,
    .sk-estimator-doc-link:hover,
    div.sk-label-container:hover .sk-estimator-doc-link:hover,
    .sk-estimator-doc-link:hover {
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-3);
      color: var(--sklearn-color-background);
      text-decoration: none;
    }

    div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,
    .sk-estimator-doc-link.fitted:hover,
    div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,
    .sk-estimator-doc-link.fitted:hover {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-3);
      color: var(--sklearn-color-background);
      text-decoration: none;
    }

    /* Span, style for the box shown on hovering the info icon */
    .sk-estimator-doc-link span {
      display: none;
      z-index: 9999;
      position: relative;
      font-weight: normal;
      right: .2ex;
      padding: .5ex;
      margin: .5ex;
      width: min-content;
      min-width: 20ex;
      max-width: 50ex;
      color: var(--sklearn-color-text);
      box-shadow: 2pt 2pt 4pt #999;
      /* unfitted */
      background: var(--sklearn-color-unfitted-level-0);
      border: .5pt solid var(--sklearn-color-unfitted-level-3);
    }

    .sk-estimator-doc-link.fitted span {
      /* fitted */
      background: var(--sklearn-color-fitted-level-0);
      border: var(--sklearn-color-fitted-level-3);
    }

    .sk-estimator-doc-link:hover span {
      display: block;
    }

    /* "?"-specific style due to the `<a>` HTML tag */

    #sk-container-id-56 a.estimator_doc_link {
      float: right;
      font-size: 1rem;
      line-height: 1em;
      font-family: monospace;
      background-color: var(--sklearn-color-background);
      border-radius: 1rem;
      height: 1rem;
      width: 1rem;
      text-decoration: none;
      /* unfitted */
      color: var(--sklearn-color-unfitted-level-1);
      border: var(--sklearn-color-unfitted-level-1) 1pt solid;
    }

    #sk-container-id-56 a.estimator_doc_link.fitted {
      /* fitted */
      border: var(--sklearn-color-fitted-level-1) 1pt solid;
      color: var(--sklearn-color-fitted-level-1);
    }

    /* On hover */
    #sk-container-id-56 a.estimator_doc_link:hover {
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-3);
      color: var(--sklearn-color-background);
      text-decoration: none;
    }

    #sk-container-id-56 a.estimator_doc_link.fitted:hover {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-3);
    }
    </style><div id="sk-container-id-56" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>HistGradientBoostingClassifier(categorical_features=&#x27;from_dtype&#x27;,
                                   random_state=0)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden><div class="sk-item"><div class="sk-estimator fitted sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-230" type="checkbox" checked><label for="sk-estimator-id-230" class="sk-toggleable__label fitted sk-toggleable__label-arrow fitted">&nbsp;&nbsp;HistGradientBoostingClassifier<a class="sk-estimator-doc-link fitted" rel="noreferrer" target="_blank" href="https://scikit-learn.org/1.5/modules/generated/sklearn.ensemble.HistGradientBoostingClassifier.html">?<span>Documentation for HistGradientBoostingClassifier</span></a><span class="sk-estimator-doc-link fitted">i<span>Fitted</span></span></label><div class="sk-toggleable__content fitted"><pre>HistGradientBoostingClassifier(categorical_features=&#x27;from_dtype&#x27;,
                                   random_state=0)</pre></div> </div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 192-194

We evaluate the performance of our predictive model using the ROC and Precision-Recall
curves.

.. GENERATED FROM PYTHON SOURCE LINES 194-235

.. code-block:: Python

    import matplotlib.pyplot as plt

    from sklearn.metrics import PrecisionRecallDisplay, RocCurveDisplay

    fig, axs = plt.subplots(nrows=1, ncols=2, figsize=(14, 6))

    PrecisionRecallDisplay.from_estimator(
        model, X_test, y_test, pos_label=pos_label, ax=axs[0], name="GBDT"
    )
    axs[0].plot(
        scoring["recall"](model, X_test, y_test),
        scoring["precision"](model, X_test, y_test),
        marker="o",
        markersize=10,
        color="tab:blue",
        label="Default cut-off point at a probability of 0.5",
    )
    axs[0].set_title("Precision-Recall curve")
    axs[0].legend()

    RocCurveDisplay.from_estimator(
        model,
        X_test,
        y_test,
        pos_label=pos_label,
        ax=axs[1],
        name="GBDT",
        plot_chance_level=True,
    )
    axs[1].plot(
        scoring["fpr"](model, X_test, y_test),
        scoring["tpr"](model, X_test, y_test),
        marker="o",
        markersize=10,
        color="tab:blue",
        label="Default cut-off point at a probability of 0.5",
    )
    axs[1].set_title("ROC curve")
    axs[1].legend()
    _ = fig.suptitle("Evaluation of the vanilla GBDT model")




.. image-sg:: /auto_examples/model_selection/images/sphx_glr_plot_cost_sensitive_learning_001.png
   :alt: Evaluation of the vanilla GBDT model, Precision-Recall curve, ROC curve
   :srcset: /auto_examples/model_selection/images/sphx_glr_plot_cost_sensitive_learning_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 236-250

We recall that these curves give insights on the statistical performance of the
predictive model for different cut-off points. For the Precision-Recall curve, the
reported metrics are the precision and recall and for the ROC curve, the reported
metrics are the TPR (same as recall) and FPR.

Here, the different cut-off points correspond to different levels of posterior
probability estimates ranging between 0 and 1. By default, `model.predict` uses a
cut-off point at a probability estimate of 0.5. The metrics for such a cut-off point
are reported with the blue dot on the curves: it corresponds to the statistical
performance of the model when using `model.predict`.

However, we recall that the original aim was to minimize the cost (or maximize the
gain) as defined by the business metric. We can compute the value of the business
metric:

.. GENERATED FROM PYTHON SOURCE LINES 250-252

.. code-block:: Python

    print(f"Business defined metric: {scoring['cost_gain'](model, X_test, y_test)}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Business defined metric: -232




.. GENERATED FROM PYTHON SOURCE LINES 253-271

At this stage we don't know if any other cut-off can lead to a greater gain. To find
the optimal one, we need to compute the cost-gain using the business metric for all
possible cut-off points and choose the best. This strategy can be quite tedious to
implement by hand, but the
:class:`~sklearn.model_selection.TunedThresholdClassifierCV` class is here to help us.
It automatically computes the cost-gain for all possible cut-off points and optimizes
for the `scoring`.

.. _cost_sensitive_learning_example:

Tuning the cut-off point
^^^^^^^^^^^^^^^^^^^^^^^^

We use :class:`~sklearn.model_selection.TunedThresholdClassifierCV` to tune the
cut-off point. We need to provide the business metric to optimize as well as the
positive label. Internally, the optimum cut-off point is chosen such that it maximizes
the business metric via cross-validation. By default a 5-fold stratified
cross-validation is used.

.. GENERATED FROM PYTHON SOURCE LINES 271-281

.. code-block:: Python

    from sklearn.model_selection import TunedThresholdClassifierCV

    tuned_model = TunedThresholdClassifierCV(
        estimator=model,
        scoring=scoring["cost_gain"],
        store_cv_results=True,  # necessary to inspect all results
    )
    tuned_model.fit(X_train, y_train)
    print(f"{tuned_model.best_threshold_=:0.2f}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tuned_model.best_threshold_=0.02




.. GENERATED FROM PYTHON SOURCE LINES 282-285

We plot the ROC and Precision-Recall curves for the vanilla model and the tuned model.
Also we plot the cut-off points that would be used by each model. Because, we are
reusing the same code later, we define a function that generates the plots.

.. GENERATED FROM PYTHON SOURCE LINES 285-361

.. code-block:: Python



    def plot_roc_pr_curves(vanilla_model, tuned_model, *, title):
        fig, axs = plt.subplots(nrows=1, ncols=3, figsize=(21, 6))

        linestyles = ("dashed", "dotted")
        markerstyles = ("o", ">")
        colors = ("tab:blue", "tab:orange")
        names = ("Vanilla GBDT", "Tuned GBDT")
        for idx, (est, linestyle, marker, color, name) in enumerate(
            zip((vanilla_model, tuned_model), linestyles, markerstyles, colors, names)
        ):
            decision_threshold = getattr(est, "best_threshold_", 0.5)
            PrecisionRecallDisplay.from_estimator(
                est,
                X_test,
                y_test,
                pos_label=pos_label,
                linestyle=linestyle,
                color=color,
                ax=axs[0],
                name=name,
            )
            axs[0].plot(
                scoring["recall"](est, X_test, y_test),
                scoring["precision"](est, X_test, y_test),
                marker,
                markersize=10,
                color=color,
                label=f"Cut-off point at probability of {decision_threshold:.2f}",
            )
            RocCurveDisplay.from_estimator(
                est,
                X_test,
                y_test,
                pos_label=pos_label,
                linestyle=linestyle,
                color=color,
                ax=axs[1],
                name=name,
                plot_chance_level=idx == 1,
            )
            axs[1].plot(
                scoring["fpr"](est, X_test, y_test),
                scoring["tpr"](est, X_test, y_test),
                marker,
                markersize=10,
                color=color,
                label=f"Cut-off point at probability of {decision_threshold:.2f}",
            )

        axs[0].set_title("Precision-Recall curve")
        axs[0].legend()
        axs[1].set_title("ROC curve")
        axs[1].legend()

        axs[2].plot(
            tuned_model.cv_results_["thresholds"],
            tuned_model.cv_results_["scores"],
            color="tab:orange",
        )
        axs[2].plot(
            tuned_model.best_threshold_,
            tuned_model.best_score_,
            "o",
            markersize=10,
            color="tab:orange",
            label="Optimal cut-off point for the business metric",
        )
        axs[2].legend()
        axs[2].set_xlabel("Decision threshold (probability)")
        axs[2].set_ylabel("Objective score (using cost-matrix)")
        axs[2].set_title("Objective score as a function of the decision threshold")
        fig.suptitle(title)









.. GENERATED FROM PYTHON SOURCE LINES 362-365

.. code-block:: Python

    title = "Comparison of the cut-off point for the vanilla and tuned GBDT model"
    plot_roc_pr_curves(model, tuned_model, title=title)




.. image-sg:: /auto_examples/model_selection/images/sphx_glr_plot_cost_sensitive_learning_002.png
   :alt: Comparison of the cut-off point for the vanilla and tuned GBDT model, Precision-Recall curve, ROC curve, Objective score as a function of the decision threshold
   :srcset: /auto_examples/model_selection/images/sphx_glr_plot_cost_sensitive_learning_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 366-382

The first remark is that both classifiers have exactly the same ROC and
Precision-Recall curves. It is expected because by default, the classifier is fitted
on the same training data. In a later section, we discuss more in detail the
available options regarding model refitting and cross-validation.

The second remark is that the cut-off points of the vanilla and tuned model are
different. To understand why the tuned model has chosen this cut-off point, we can
look at the right-hand side plot that plots the objective score that is our exactly
the same as our business metric. We see that the optimum threshold corresponds to the
maximum of the objective score. This maximum is reached for a decision threshold
much lower than 0.5: the tuned model enjoys a much higher recall at the cost of
of significantly lower precision: the tuned model is much more eager to
predict the "bad" class label to larger fraction of individuals.

We can now check if choosing this cut-off point leads to a better score on the testing
set:

.. GENERATED FROM PYTHON SOURCE LINES 382-384

.. code-block:: Python

    print(f"Business defined metric: {scoring['cost_gain'](tuned_model, X_test, y_test)}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Business defined metric: -134




.. GENERATED FROM PYTHON SOURCE LINES 385-404

We observe that tuning the decision threshold almost improves our business gains
by factor of 2.

.. _TunedThresholdClassifierCV_no_cv:

Consideration regarding model refitting and cross-validation
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

In the above experiment, we used the default setting of the
:class:`~sklearn.model_selection.TunedThresholdClassifierCV`. In particular, the
cut-off point is tuned using a 5-fold stratified cross-validation. Also, the
underlying predictive model is refitted on the entire training data once the cut-off
point is chosen.

These two strategies can be changed by providing the `refit` and `cv` parameters.
For instance, one could provide a fitted `estimator` and set `cv="prefit"`, in which
case the cut-off point is found on the entire dataset provided at fitting time.
Also, the underlying classifier is not be refitted by setting `refit=False`. Here, we
can try to do such experiment.

.. GENERATED FROM PYTHON SOURCE LINES 404-409

.. code-block:: Python

    model.fit(X_train, y_train)
    tuned_model.set_params(cv="prefit", refit=False).fit(X_train, y_train)
    print(f"{tuned_model.best_threshold_=:0.2f}")






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tuned_model.best_threshold_=0.28




.. GENERATED FROM PYTHON SOURCE LINES 410-411

Then, we evaluate our model with the same approach as before:

.. GENERATED FROM PYTHON SOURCE LINES 411-414

.. code-block:: Python

    title = "Tuned GBDT model without refitting and using the entire dataset"
    plot_roc_pr_curves(model, tuned_model, title=title)




.. image-sg:: /auto_examples/model_selection/images/sphx_glr_plot_cost_sensitive_learning_003.png
   :alt: Tuned GBDT model without refitting and using the entire dataset, Precision-Recall curve, ROC curve, Objective score as a function of the decision threshold
   :srcset: /auto_examples/model_selection/images/sphx_glr_plot_cost_sensitive_learning_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 415-434

We observe the that the optimum cut-off point is different from the one found
in the previous experiment. If we look at the right-hand side plot, we
observe that the business gain has large plateau of near-optimal 0 gain for a
large span of decision thresholds. This behavior is symptomatic of an
overfitting. Because we disable cross-validation, we tuned the cut-off point
on the same set as the model was trained on, and this is the reason for the
observed overfitting.

This option should therefore be used with caution. One needs to make sure that the
data provided at fitting time to the
:class:`~sklearn.model_selection.TunedThresholdClassifierCV` is not the same as the
data used to train the underlying classifier. This could happen sometimes when the
idea is just to tune the predictive model on a completely new validation set without a
costly complete refit.

When cross-validation is too costly, a potential alternative is to use a
single train-test split by providing a floating number in range `[0, 1]` to the `cv`
parameter. It splits the data into a training and testing set. Let's explore this
option:

.. GENERATED FROM PYTHON SOURCE LINES 434-436

.. code-block:: Python

    tuned_model.set_params(cv=0.75).fit(X_train, y_train)






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-container-id-57 {
      /* Definition of color scheme common for light and dark mode */
      --sklearn-color-text: black;
      --sklearn-color-line: gray;
      /* Definition of color scheme for unfitted estimators */
      --sklearn-color-unfitted-level-0: #fff5e6;
      --sklearn-color-unfitted-level-1: #f6e4d2;
      --sklearn-color-unfitted-level-2: #ffe0b3;
      --sklearn-color-unfitted-level-3: chocolate;
      /* Definition of color scheme for fitted estimators */
      --sklearn-color-fitted-level-0: #f0f8ff;
      --sklearn-color-fitted-level-1: #d4ebff;
      --sklearn-color-fitted-level-2: #b3dbfd;
      --sklearn-color-fitted-level-3: cornflowerblue;

      /* Specific color for light theme */
      --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));
      --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));
      --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));
      --sklearn-color-icon: #696969;

      @media (prefers-color-scheme: dark) {
        /* Redefinition of color scheme for dark theme */
        --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));
        --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));
        --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));
        --sklearn-color-icon: #878787;
      }
    }

    #sk-container-id-57 {
      color: var(--sklearn-color-text);
    }

    #sk-container-id-57 pre {
      padding: 0;
    }

    #sk-container-id-57 input.sk-hidden--visually {
      border: 0;
      clip: rect(1px 1px 1px 1px);
      clip: rect(1px, 1px, 1px, 1px);
      height: 1px;
      margin: -1px;
      overflow: hidden;
      padding: 0;
      position: absolute;
      width: 1px;
    }

    #sk-container-id-57 div.sk-dashed-wrapped {
      border: 1px dashed var(--sklearn-color-line);
      margin: 0 0.4em 0.5em 0.4em;
      box-sizing: border-box;
      padding-bottom: 0.4em;
      background-color: var(--sklearn-color-background);
    }

    #sk-container-id-57 div.sk-container {
      /* jupyter's `normalize.less` sets `[hidden] { display: none; }`
         but bootstrap.min.css set `[hidden] { display: none !important; }`
         so we also need the `!important` here to be able to override the
         default hidden behavior on the sphinx rendered scikit-learn.org.
         See: https://github.com/scikit-learn/scikit-learn/issues/21755 */
      display: inline-block !important;
      position: relative;
    }

    #sk-container-id-57 div.sk-text-repr-fallback {
      display: none;
    }

    div.sk-parallel-item,
    div.sk-serial,
    div.sk-item {
      /* draw centered vertical line to link estimators */
      background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));
      background-size: 2px 100%;
      background-repeat: no-repeat;
      background-position: center center;
    }

    /* Parallel-specific style estimator block */

    #sk-container-id-57 div.sk-parallel-item::after {
      content: "";
      width: 100%;
      border-bottom: 2px solid var(--sklearn-color-text-on-default-background);
      flex-grow: 1;
    }

    #sk-container-id-57 div.sk-parallel {
      display: flex;
      align-items: stretch;
      justify-content: center;
      background-color: var(--sklearn-color-background);
      position: relative;
    }

    #sk-container-id-57 div.sk-parallel-item {
      display: flex;
      flex-direction: column;
    }

    #sk-container-id-57 div.sk-parallel-item:first-child::after {
      align-self: flex-end;
      width: 50%;
    }

    #sk-container-id-57 div.sk-parallel-item:last-child::after {
      align-self: flex-start;
      width: 50%;
    }

    #sk-container-id-57 div.sk-parallel-item:only-child::after {
      width: 0;
    }

    /* Serial-specific style estimator block */

    #sk-container-id-57 div.sk-serial {
      display: flex;
      flex-direction: column;
      align-items: center;
      background-color: var(--sklearn-color-background);
      padding-right: 1em;
      padding-left: 1em;
    }


    /* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is
    clickable and can be expanded/collapsed.
    - Pipeline and ColumnTransformer use this feature and define the default style
    - Estimators will overwrite some part of the style using the `sk-estimator` class
    */

    /* Pipeline and ColumnTransformer style (default) */

    #sk-container-id-57 div.sk-toggleable {
      /* Default theme specific background. It is overwritten whether we have a
      specific estimator or a Pipeline/ColumnTransformer */
      background-color: var(--sklearn-color-background);
    }

    /* Toggleable label */
    #sk-container-id-57 label.sk-toggleable__label {
      cursor: pointer;
      display: block;
      width: 100%;
      margin-bottom: 0;
      padding: 0.5em;
      box-sizing: border-box;
      text-align: center;
    }

    #sk-container-id-57 label.sk-toggleable__label-arrow:before {
      /* Arrow on the left of the label */
      content: "▸";
      float: left;
      margin-right: 0.25em;
      color: var(--sklearn-color-icon);
    }

    #sk-container-id-57 label.sk-toggleable__label-arrow:hover:before {
      color: var(--sklearn-color-text);
    }

    /* Toggleable content - dropdown */

    #sk-container-id-57 div.sk-toggleable__content {
      max-height: 0;
      max-width: 0;
      overflow: hidden;
      text-align: left;
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-0);
    }

    #sk-container-id-57 div.sk-toggleable__content.fitted {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-0);
    }

    #sk-container-id-57 div.sk-toggleable__content pre {
      margin: 0.2em;
      border-radius: 0.25em;
      color: var(--sklearn-color-text);
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-0);
    }

    #sk-container-id-57 div.sk-toggleable__content.fitted pre {
      /* unfitted */
      background-color: var(--sklearn-color-fitted-level-0);
    }

    #sk-container-id-57 input.sk-toggleable__control:checked~div.sk-toggleable__content {
      /* Expand drop-down */
      max-height: 200px;
      max-width: 100%;
      overflow: auto;
    }

    #sk-container-id-57 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {
      content: "▾";
    }

    /* Pipeline/ColumnTransformer-specific style */

    #sk-container-id-57 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {
      color: var(--sklearn-color-text);
      background-color: var(--sklearn-color-unfitted-level-2);
    }

    #sk-container-id-57 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {
      background-color: var(--sklearn-color-fitted-level-2);
    }

    /* Estimator-specific style */

    /* Colorize estimator box */
    #sk-container-id-57 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-2);
    }

    #sk-container-id-57 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-2);
    }

    #sk-container-id-57 div.sk-label label.sk-toggleable__label,
    #sk-container-id-57 div.sk-label label {
      /* The background is the default theme color */
      color: var(--sklearn-color-text-on-default-background);
    }

    /* On hover, darken the color of the background */
    #sk-container-id-57 div.sk-label:hover label.sk-toggleable__label {
      color: var(--sklearn-color-text);
      background-color: var(--sklearn-color-unfitted-level-2);
    }

    /* Label box, darken color on hover, fitted */
    #sk-container-id-57 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {
      color: var(--sklearn-color-text);
      background-color: var(--sklearn-color-fitted-level-2);
    }

    /* Estimator label */

    #sk-container-id-57 div.sk-label label {
      font-family: monospace;
      font-weight: bold;
      display: inline-block;
      line-height: 1.2em;
    }

    #sk-container-id-57 div.sk-label-container {
      text-align: center;
    }

    /* Estimator-specific */
    #sk-container-id-57 div.sk-estimator {
      font-family: monospace;
      border: 1px dotted var(--sklearn-color-border-box);
      border-radius: 0.25em;
      box-sizing: border-box;
      margin-bottom: 0.5em;
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-0);
    }

    #sk-container-id-57 div.sk-estimator.fitted {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-0);
    }

    /* on hover */
    #sk-container-id-57 div.sk-estimator:hover {
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-2);
    }

    #sk-container-id-57 div.sk-estimator.fitted:hover {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-2);
    }

    /* Specification for estimator info (e.g. "i" and "?") */

    /* Common style for "i" and "?" */

    .sk-estimator-doc-link,
    a:link.sk-estimator-doc-link,
    a:visited.sk-estimator-doc-link {
      float: right;
      font-size: smaller;
      line-height: 1em;
      font-family: monospace;
      background-color: var(--sklearn-color-background);
      border-radius: 1em;
      height: 1em;
      width: 1em;
      text-decoration: none !important;
      margin-left: 1ex;
      /* unfitted */
      border: var(--sklearn-color-unfitted-level-1) 1pt solid;
      color: var(--sklearn-color-unfitted-level-1);
    }

    .sk-estimator-doc-link.fitted,
    a:link.sk-estimator-doc-link.fitted,
    a:visited.sk-estimator-doc-link.fitted {
      /* fitted */
      border: var(--sklearn-color-fitted-level-1) 1pt solid;
      color: var(--sklearn-color-fitted-level-1);
    }

    /* On hover */
    div.sk-estimator:hover .sk-estimator-doc-link:hover,
    .sk-estimator-doc-link:hover,
    div.sk-label-container:hover .sk-estimator-doc-link:hover,
    .sk-estimator-doc-link:hover {
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-3);
      color: var(--sklearn-color-background);
      text-decoration: none;
    }

    div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,
    .sk-estimator-doc-link.fitted:hover,
    div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,
    .sk-estimator-doc-link.fitted:hover {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-3);
      color: var(--sklearn-color-background);
      text-decoration: none;
    }

    /* Span, style for the box shown on hovering the info icon */
    .sk-estimator-doc-link span {
      display: none;
      z-index: 9999;
      position: relative;
      font-weight: normal;
      right: .2ex;
      padding: .5ex;
      margin: .5ex;
      width: min-content;
      min-width: 20ex;
      max-width: 50ex;
      color: var(--sklearn-color-text);
      box-shadow: 2pt 2pt 4pt #999;
      /* unfitted */
      background: var(--sklearn-color-unfitted-level-0);
      border: .5pt solid var(--sklearn-color-unfitted-level-3);
    }

    .sk-estimator-doc-link.fitted span {
      /* fitted */
      background: var(--sklearn-color-fitted-level-0);
      border: var(--sklearn-color-fitted-level-3);
    }

    .sk-estimator-doc-link:hover span {
      display: block;
    }

    /* "?"-specific style due to the `<a>` HTML tag */

    #sk-container-id-57 a.estimator_doc_link {
      float: right;
      font-size: 1rem;
      line-height: 1em;
      font-family: monospace;
      background-color: var(--sklearn-color-background);
      border-radius: 1rem;
      height: 1rem;
      width: 1rem;
      text-decoration: none;
      /* unfitted */
      color: var(--sklearn-color-unfitted-level-1);
      border: var(--sklearn-color-unfitted-level-1) 1pt solid;
    }

    #sk-container-id-57 a.estimator_doc_link.fitted {
      /* fitted */
      border: var(--sklearn-color-fitted-level-1) 1pt solid;
      color: var(--sklearn-color-fitted-level-1);
    }

    /* On hover */
    #sk-container-id-57 a.estimator_doc_link:hover {
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-3);
      color: var(--sklearn-color-background);
      text-decoration: none;
    }

    #sk-container-id-57 a.estimator_doc_link.fitted:hover {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-3);
    }
    </style><div id="sk-container-id-57" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>TunedThresholdClassifierCV(cv=0.75,
                               estimator=HistGradientBoostingClassifier(categorical_features=&#x27;from_dtype&#x27;,
                                                                        random_state=0),
                               refit=False,
                               scoring=make_scorer(credit_gain_score, response_method=&#x27;predict&#x27;, neg_label=good, pos_label=bad),
                               store_cv_results=True)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label fitted sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-231" type="checkbox" ><label for="sk-estimator-id-231" class="sk-toggleable__label fitted sk-toggleable__label-arrow fitted">&nbsp;&nbsp;TunedThresholdClassifierCV<a class="sk-estimator-doc-link fitted" rel="noreferrer" target="_blank" href="https://scikit-learn.org/1.5/modules/generated/sklearn.model_selection.TunedThresholdClassifierCV.html">?<span>Documentation for TunedThresholdClassifierCV</span></a><span class="sk-estimator-doc-link fitted">i<span>Fitted</span></span></label><div class="sk-toggleable__content fitted"><pre>TunedThresholdClassifierCV(cv=0.75,
                               estimator=HistGradientBoostingClassifier(categorical_features=&#x27;from_dtype&#x27;,
                                                                        random_state=0),
                               refit=False,
                               scoring=make_scorer(credit_gain_score, response_method=&#x27;predict&#x27;, neg_label=good, pos_label=bad),
                               store_cv_results=True)</pre></div> </div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label fitted sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-232" type="checkbox" ><label for="sk-estimator-id-232" class="sk-toggleable__label fitted sk-toggleable__label-arrow fitted">estimator: HistGradientBoostingClassifier</label><div class="sk-toggleable__content fitted"><pre>HistGradientBoostingClassifier(categorical_features=&#x27;from_dtype&#x27;,
                                   random_state=0)</pre></div> </div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator fitted sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-233" type="checkbox" ><label for="sk-estimator-id-233" class="sk-toggleable__label fitted sk-toggleable__label-arrow fitted">&nbsp;HistGradientBoostingClassifier<a class="sk-estimator-doc-link fitted" rel="noreferrer" target="_blank" href="https://scikit-learn.org/1.5/modules/generated/sklearn.ensemble.HistGradientBoostingClassifier.html">?<span>Documentation for HistGradientBoostingClassifier</span></a></label><div class="sk-toggleable__content fitted"><pre>HistGradientBoostingClassifier(categorical_features=&#x27;from_dtype&#x27;,
                                   random_state=0)</pre></div> </div></div></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 437-440

.. code-block:: Python

    title = "Tuned GBDT model without refitting and using the entire dataset"
    plot_roc_pr_curves(model, tuned_model, title=title)




.. image-sg:: /auto_examples/model_selection/images/sphx_glr_plot_cost_sensitive_learning_004.png
   :alt: Tuned GBDT model without refitting and using the entire dataset, Precision-Recall curve, ROC curve, Objective score as a function of the decision threshold
   :srcset: /auto_examples/model_selection/images/sphx_glr_plot_cost_sensitive_learning_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 441-461

Regarding the cut-off point, we observe that the optimum is similar to the multiple
repeated cross-validation case. However, be aware that a single split does not account
for the variability of the fit/predict process and thus we are unable to know if there
is any variance in the cut-off point. The repeated cross-validation averages out
this effect.

Another observation concerns the ROC and Precision-Recall curves of the tuned model.
As expected, these curves differ from those of the vanilla model, given that we
trained the underlying classifier on a subset of the data provided during fitting and
reserved a validation set for tuning the cut-off point.

Cost-sensitive learning when gains and costs are not constant
-------------------------------------------------------------

As stated in [2]_, gains and costs are generally not constant in real-world problems.
In this section, we use a similar example as in [2]_ for the problem of
detecting fraud in credit card transaction records.

The credit card dataset
^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 461-464

.. code-block:: Python

    credit_card = fetch_openml(data_id=1597, as_frame=True, parser="pandas")
    credit_card.frame.info()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    <class 'pandas.core.frame.DataFrame'>
    RangeIndex: 284807 entries, 0 to 284806
    Data columns (total 30 columns):
     #   Column  Non-Null Count   Dtype   
    ---  ------  --------------   -----   
     0   V1      284807 non-null  float64 
     1   V2      284807 non-null  float64 
     2   V3      284807 non-null  float64 
     3   V4      284807 non-null  float64 
     4   V5      284807 non-null  float64 
     5   V6      284807 non-null  float64 
     6   V7      284807 non-null  float64 
     7   V8      284807 non-null  float64 
     8   V9      284807 non-null  float64 
     9   V10     284807 non-null  float64 
     10  V11     284807 non-null  float64 
     11  V12     284807 non-null  float64 
     12  V13     284807 non-null  float64 
     13  V14     284807 non-null  float64 
     14  V15     284807 non-null  float64 
     15  V16     284807 non-null  float64 
     16  V17     284807 non-null  float64 
     17  V18     284807 non-null  float64 
     18  V19     284807 non-null  float64 
     19  V20     284807 non-null  float64 
     20  V21     284807 non-null  float64 
     21  V22     284807 non-null  float64 
     22  V23     284807 non-null  float64 
     23  V24     284807 non-null  float64 
     24  V25     284807 non-null  float64 
     25  V26     284807 non-null  float64 
     26  V27     284807 non-null  float64 
     27  V28     284807 non-null  float64 
     28  Amount  284807 non-null  float64 
     29  Class   284807 non-null  category
    dtypes: category(1), float64(29)
    memory usage: 63.3 MB




.. GENERATED FROM PYTHON SOURCE LINES 465-468

The dataset contains information about credit card records from which some are
fraudulent and others are legitimate. The goal is therefore to predict whether or
not a credit card record is fraudulent.

.. GENERATED FROM PYTHON SOURCE LINES 468-472

.. code-block:: Python

    columns_to_drop = ["Class"]
    data = credit_card.frame.drop(columns=columns_to_drop)
    target = credit_card.frame["Class"].astype(int)








.. GENERATED FROM PYTHON SOURCE LINES 473-474

First, we check the class distribution of the datasets.

.. GENERATED FROM PYTHON SOURCE LINES 474-476

.. code-block:: Python

    target.value_counts(normalize=True)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Class
    0    0.998273
    1    0.001727
    Name: proportion, dtype: float64



.. GENERATED FROM PYTHON SOURCE LINES 477-480

The dataset is highly imbalanced with fraudulent transaction representing only 0.17%
of the data. Since we are interested in training a machine learning model, we should
also make sure that we have enough samples in the minority class to train the model.

.. GENERATED FROM PYTHON SOURCE LINES 480-482

.. code-block:: Python

    target.value_counts()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Class
    0    284315
    1       492
    Name: count, dtype: int64



.. GENERATED FROM PYTHON SOURCE LINES 483-487

We observe that we have around 500 samples that is on the low end of the number of
samples required to train a machine learning model. In addition of the target
distribution, we check the distribution of the amount of the
fraudulent transactions.

.. GENERATED FROM PYTHON SOURCE LINES 487-494

.. code-block:: Python

    fraud = target == 1
    amount_fraud = data["Amount"][fraud]
    _, ax = plt.subplots()
    ax.hist(amount_fraud, bins=100)
    ax.set_title("Amount of fraud transaction")
    _ = ax.set_xlabel("Amount (€)")




.. image-sg:: /auto_examples/model_selection/images/sphx_glr_plot_cost_sensitive_learning_005.png
   :alt: Amount of fraud transaction
   :srcset: /auto_examples/model_selection/images/sphx_glr_plot_cost_sensitive_learning_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 495-507

Addressing the problem with a business metric
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Now, we create the business metric that depends on the amount of each transaction. We
define the cost matrix similarly to [2]_. Accepting a legitimate transaction provides
a gain of 2% of the amount of the transaction. However, accepting a fraudulent
transaction result in a loss of the amount of the transaction. As stated in [2]_, the
gain and loss related to refusals (of fraudulent and legitimate transactions) are not
trivial to define. Here, we define that a refusal of a legitimate transaction is
estimated to a loss of 5€ while the refusal of a fraudulent transaction is estimated
to a gain of 50€ and the amount of the transaction. Therefore, we define the
following function to compute the total benefit of a given decision:

.. GENERATED FROM PYTHON SOURCE LINES 507-523

.. code-block:: Python



    def business_metric(y_true, y_pred, amount):
        mask_true_positive = (y_true == 1) & (y_pred == 1)
        mask_true_negative = (y_true == 0) & (y_pred == 0)
        mask_false_positive = (y_true == 0) & (y_pred == 1)
        mask_false_negative = (y_true == 1) & (y_pred == 0)
        fraudulent_refuse = (mask_true_positive.sum() * 50) + amount[
            mask_true_positive
        ].sum()
        fraudulent_accept = -amount[mask_false_negative].sum()
        legitimate_refuse = mask_false_positive.sum() * -5
        legitimate_accept = (amount[mask_true_negative] * 0.02).sum()
        return fraudulent_refuse + fraudulent_accept + legitimate_refuse + legitimate_accept









.. GENERATED FROM PYTHON SOURCE LINES 524-529

From this business metric, we create a scikit-learn scorer that given a fitted
classifier and a test set compute the business metric. In this regard, we use
the :func:`~sklearn.metrics.make_scorer` factory. The variable `amount` is an
additional metadata to be passed to the scorer and we need to use
:ref:`metadata routing <metadata_routing>` to take into account this information.

.. GENERATED FROM PYTHON SOURCE LINES 529-532

.. code-block:: Python

    sklearn.set_config(enable_metadata_routing=True)
    business_scorer = make_scorer(business_metric).set_score_request(amount=True)








.. GENERATED FROM PYTHON SOURCE LINES 533-540

So at this stage, we observe that the amount of the transaction is used twice: once
as a feature to train our predictive model and once as a metadata to compute the
the business metric and thus the statistical performance of our model. When used as a
feature, we are only required to have a column in `data` that contains the amount of
each transaction. To use this information as metadata, we need to have an external
variable that we can pass to the scorer or the model that internally routes this
metadata to the scorer. So let's create this variable.

.. GENERATED FROM PYTHON SOURCE LINES 540-542

.. code-block:: Python

    amount = credit_card.frame["Amount"].to_numpy()








.. GENERATED FROM PYTHON SOURCE LINES 543-544

We first start to train a dummy classifier to have some baseline results.

.. GENERATED FROM PYTHON SOURCE LINES 544-552

.. code-block:: Python

    from sklearn.model_selection import train_test_split

    data_train, data_test, target_train, target_test, amount_train, amount_test = (
        train_test_split(
            data, target, amount, stratify=target, test_size=0.5, random_state=42
        )
    )








.. GENERATED FROM PYTHON SOURCE LINES 553-562

.. code-block:: Python

    from sklearn.dummy import DummyClassifier

    easy_going_classifier = DummyClassifier(strategy="constant", constant=0)
    easy_going_classifier.fit(data_train, target_train)
    benefit_cost = business_scorer(
        easy_going_classifier, data_test, target_test, amount=amount_test
    )
    print(f"Benefit/cost of our easy-going classifier: {benefit_cost:,.2f}€")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Benefit/cost of our easy-going classifier: 221,445.07€




.. GENERATED FROM PYTHON SOURCE LINES 563-566

A classifier that predict all transactions as legitimate would create a profit of
around 220,000.€ We make the same evaluation for a classifier that predicts all
transactions as fraudulent.

.. GENERATED FROM PYTHON SOURCE LINES 566-573

.. code-block:: Python

    intolerant_classifier = DummyClassifier(strategy="constant", constant=1)
    intolerant_classifier.fit(data_train, target_train)
    benefit_cost = business_scorer(
        intolerant_classifier, data_test, target_test, amount=amount_test
    )
    print(f"Benefit/cost of our intolerant classifier: {benefit_cost:,.2f}€")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Benefit/cost of our intolerant classifier: -668,903.24€




.. GENERATED FROM PYTHON SOURCE LINES 574-577

Such a classifier create a loss of around 670,000.€ A predictive model should allow
us to make a profit larger than 220,000.€ It is interesting to compare this business
metric with another "standard" statistical metric such as the balanced accuracy.

.. GENERATED FROM PYTHON SOURCE LINES 577-589

.. code-block:: Python

    from sklearn.metrics import get_scorer

    balanced_accuracy_scorer = get_scorer("balanced_accuracy")
    print(
        "Balanced accuracy of our easy-going classifier: "
        f"{balanced_accuracy_scorer(easy_going_classifier, data_test, target_test):.3f}"
    )
    print(
        "Balanced accuracy of our intolerant classifier: "
        f"{balanced_accuracy_scorer(intolerant_classifier, data_test, target_test):.3f}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Balanced accuracy of our easy-going classifier: 0.500
    Balanced accuracy of our intolerant classifier: 0.500




.. GENERATED FROM PYTHON SOURCE LINES 590-597

This is not a surprise that the balanced accuracy is at 0.5 for both classifiers.
However, we need to be careful in the rest of the evaluation: we potentially can
obtain a model with a decent balanced accuracy that does not make any profit.
In this case, the model would be harmful for our business.

Let's now create a predictive model using a logistic regression without tuning the
decision threshold.

.. GENERATED FROM PYTHON SOURCE LINES 597-617

.. code-block:: Python

    from sklearn.linear_model import LogisticRegression
    from sklearn.model_selection import GridSearchCV
    from sklearn.pipeline import make_pipeline
    from sklearn.preprocessing import StandardScaler

    logistic_regression = make_pipeline(StandardScaler(), LogisticRegression())
    param_grid = {"logisticregression__C": np.logspace(-6, 6, 13)}
    model = GridSearchCV(logistic_regression, param_grid, scoring="neg_log_loss").fit(
        data_train, target_train
    )

    print(
        "Benefit/cost of our logistic regression: "
        f"{business_scorer(model, data_test, target_test, amount=amount_test):,.2f}€"
    )
    print(
        "Balanced accuracy of our logistic regression: "
        f"{balanced_accuracy_scorer(model, data_test, target_test):.3f}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Benefit/cost of our logistic regression: 260,787.21€
    Balanced accuracy of our logistic regression: 0.815




.. GENERATED FROM PYTHON SOURCE LINES 618-631

By observing the balanced accuracy, we see that our predictive model is learning
some associations between the features and the target. The business metric also shows
that our model is beating the baseline in terms of profit and it would be already
beneficial to use it instead of ignoring the fraud detection problem.

Tuning the decision threshold
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Now the question is: is our model optimum for the type of decision that we want to do?
Up to now, we did not optimize the decision threshold. We use the
:class:`~sklearn.model_selection.TunedThresholdClassifierCV` to optimize the decision
given our business scorer. To avoid a nested cross-validation, we will use the
best estimator found during the previous grid-search.

.. GENERATED FROM PYTHON SOURCE LINES 631-638

.. code-block:: Python

    tuned_model = TunedThresholdClassifierCV(
        estimator=model.best_estimator_,
        scoring=business_scorer,
        thresholds=100,
        n_jobs=2,
    )








.. GENERATED FROM PYTHON SOURCE LINES 639-643

Since our business scorer requires the amount of each transaction, we need to pass
this information in the `fit` method. The
:class:`~sklearn.model_selection.TunedThresholdClassifierCV` is in charge of
automatically dispatching this metadata to the underlying scorer.

.. GENERATED FROM PYTHON SOURCE LINES 643-645

.. code-block:: Python

    tuned_model.fit(data_train, target_train, amount=amount_train)






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-container-id-58 {
      /* Definition of color scheme common for light and dark mode */
      --sklearn-color-text: black;
      --sklearn-color-line: gray;
      /* Definition of color scheme for unfitted estimators */
      --sklearn-color-unfitted-level-0: #fff5e6;
      --sklearn-color-unfitted-level-1: #f6e4d2;
      --sklearn-color-unfitted-level-2: #ffe0b3;
      --sklearn-color-unfitted-level-3: chocolate;
      /* Definition of color scheme for fitted estimators */
      --sklearn-color-fitted-level-0: #f0f8ff;
      --sklearn-color-fitted-level-1: #d4ebff;
      --sklearn-color-fitted-level-2: #b3dbfd;
      --sklearn-color-fitted-level-3: cornflowerblue;

      /* Specific color for light theme */
      --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));
      --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));
      --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));
      --sklearn-color-icon: #696969;

      @media (prefers-color-scheme: dark) {
        /* Redefinition of color scheme for dark theme */
        --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));
        --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));
        --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));
        --sklearn-color-icon: #878787;
      }
    }

    #sk-container-id-58 {
      color: var(--sklearn-color-text);
    }

    #sk-container-id-58 pre {
      padding: 0;
    }

    #sk-container-id-58 input.sk-hidden--visually {
      border: 0;
      clip: rect(1px 1px 1px 1px);
      clip: rect(1px, 1px, 1px, 1px);
      height: 1px;
      margin: -1px;
      overflow: hidden;
      padding: 0;
      position: absolute;
      width: 1px;
    }

    #sk-container-id-58 div.sk-dashed-wrapped {
      border: 1px dashed var(--sklearn-color-line);
      margin: 0 0.4em 0.5em 0.4em;
      box-sizing: border-box;
      padding-bottom: 0.4em;
      background-color: var(--sklearn-color-background);
    }

    #sk-container-id-58 div.sk-container {
      /* jupyter's `normalize.less` sets `[hidden] { display: none; }`
         but bootstrap.min.css set `[hidden] { display: none !important; }`
         so we also need the `!important` here to be able to override the
         default hidden behavior on the sphinx rendered scikit-learn.org.
         See: https://github.com/scikit-learn/scikit-learn/issues/21755 */
      display: inline-block !important;
      position: relative;
    }

    #sk-container-id-58 div.sk-text-repr-fallback {
      display: none;
    }

    div.sk-parallel-item,
    div.sk-serial,
    div.sk-item {
      /* draw centered vertical line to link estimators */
      background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));
      background-size: 2px 100%;
      background-repeat: no-repeat;
      background-position: center center;
    }

    /* Parallel-specific style estimator block */

    #sk-container-id-58 div.sk-parallel-item::after {
      content: "";
      width: 100%;
      border-bottom: 2px solid var(--sklearn-color-text-on-default-background);
      flex-grow: 1;
    }

    #sk-container-id-58 div.sk-parallel {
      display: flex;
      align-items: stretch;
      justify-content: center;
      background-color: var(--sklearn-color-background);
      position: relative;
    }

    #sk-container-id-58 div.sk-parallel-item {
      display: flex;
      flex-direction: column;
    }

    #sk-container-id-58 div.sk-parallel-item:first-child::after {
      align-self: flex-end;
      width: 50%;
    }

    #sk-container-id-58 div.sk-parallel-item:last-child::after {
      align-self: flex-start;
      width: 50%;
    }

    #sk-container-id-58 div.sk-parallel-item:only-child::after {
      width: 0;
    }

    /* Serial-specific style estimator block */

    #sk-container-id-58 div.sk-serial {
      display: flex;
      flex-direction: column;
      align-items: center;
      background-color: var(--sklearn-color-background);
      padding-right: 1em;
      padding-left: 1em;
    }


    /* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is
    clickable and can be expanded/collapsed.
    - Pipeline and ColumnTransformer use this feature and define the default style
    - Estimators will overwrite some part of the style using the `sk-estimator` class
    */

    /* Pipeline and ColumnTransformer style (default) */

    #sk-container-id-58 div.sk-toggleable {
      /* Default theme specific background. It is overwritten whether we have a
      specific estimator or a Pipeline/ColumnTransformer */
      background-color: var(--sklearn-color-background);
    }

    /* Toggleable label */
    #sk-container-id-58 label.sk-toggleable__label {
      cursor: pointer;
      display: block;
      width: 100%;
      margin-bottom: 0;
      padding: 0.5em;
      box-sizing: border-box;
      text-align: center;
    }

    #sk-container-id-58 label.sk-toggleable__label-arrow:before {
      /* Arrow on the left of the label */
      content: "▸";
      float: left;
      margin-right: 0.25em;
      color: var(--sklearn-color-icon);
    }

    #sk-container-id-58 label.sk-toggleable__label-arrow:hover:before {
      color: var(--sklearn-color-text);
    }

    /* Toggleable content - dropdown */

    #sk-container-id-58 div.sk-toggleable__content {
      max-height: 0;
      max-width: 0;
      overflow: hidden;
      text-align: left;
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-0);
    }

    #sk-container-id-58 div.sk-toggleable__content.fitted {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-0);
    }

    #sk-container-id-58 div.sk-toggleable__content pre {
      margin: 0.2em;
      border-radius: 0.25em;
      color: var(--sklearn-color-text);
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-0);
    }

    #sk-container-id-58 div.sk-toggleable__content.fitted pre {
      /* unfitted */
      background-color: var(--sklearn-color-fitted-level-0);
    }

    #sk-container-id-58 input.sk-toggleable__control:checked~div.sk-toggleable__content {
      /* Expand drop-down */
      max-height: 200px;
      max-width: 100%;
      overflow: auto;
    }

    #sk-container-id-58 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {
      content: "▾";
    }

    /* Pipeline/ColumnTransformer-specific style */

    #sk-container-id-58 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {
      color: var(--sklearn-color-text);
      background-color: var(--sklearn-color-unfitted-level-2);
    }

    #sk-container-id-58 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {
      background-color: var(--sklearn-color-fitted-level-2);
    }

    /* Estimator-specific style */

    /* Colorize estimator box */
    #sk-container-id-58 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-2);
    }

    #sk-container-id-58 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-2);
    }

    #sk-container-id-58 div.sk-label label.sk-toggleable__label,
    #sk-container-id-58 div.sk-label label {
      /* The background is the default theme color */
      color: var(--sklearn-color-text-on-default-background);
    }

    /* On hover, darken the color of the background */
    #sk-container-id-58 div.sk-label:hover label.sk-toggleable__label {
      color: var(--sklearn-color-text);
      background-color: var(--sklearn-color-unfitted-level-2);
    }

    /* Label box, darken color on hover, fitted */
    #sk-container-id-58 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {
      color: var(--sklearn-color-text);
      background-color: var(--sklearn-color-fitted-level-2);
    }

    /* Estimator label */

    #sk-container-id-58 div.sk-label label {
      font-family: monospace;
      font-weight: bold;
      display: inline-block;
      line-height: 1.2em;
    }

    #sk-container-id-58 div.sk-label-container {
      text-align: center;
    }

    /* Estimator-specific */
    #sk-container-id-58 div.sk-estimator {
      font-family: monospace;
      border: 1px dotted var(--sklearn-color-border-box);
      border-radius: 0.25em;
      box-sizing: border-box;
      margin-bottom: 0.5em;
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-0);
    }

    #sk-container-id-58 div.sk-estimator.fitted {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-0);
    }

    /* on hover */
    #sk-container-id-58 div.sk-estimator:hover {
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-2);
    }

    #sk-container-id-58 div.sk-estimator.fitted:hover {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-2);
    }

    /* Specification for estimator info (e.g. "i" and "?") */

    /* Common style for "i" and "?" */

    .sk-estimator-doc-link,
    a:link.sk-estimator-doc-link,
    a:visited.sk-estimator-doc-link {
      float: right;
      font-size: smaller;
      line-height: 1em;
      font-family: monospace;
      background-color: var(--sklearn-color-background);
      border-radius: 1em;
      height: 1em;
      width: 1em;
      text-decoration: none !important;
      margin-left: 1ex;
      /* unfitted */
      border: var(--sklearn-color-unfitted-level-1) 1pt solid;
      color: var(--sklearn-color-unfitted-level-1);
    }

    .sk-estimator-doc-link.fitted,
    a:link.sk-estimator-doc-link.fitted,
    a:visited.sk-estimator-doc-link.fitted {
      /* fitted */
      border: var(--sklearn-color-fitted-level-1) 1pt solid;
      color: var(--sklearn-color-fitted-level-1);
    }

    /* On hover */
    div.sk-estimator:hover .sk-estimator-doc-link:hover,
    .sk-estimator-doc-link:hover,
    div.sk-label-container:hover .sk-estimator-doc-link:hover,
    .sk-estimator-doc-link:hover {
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-3);
      color: var(--sklearn-color-background);
      text-decoration: none;
    }

    div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,
    .sk-estimator-doc-link.fitted:hover,
    div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,
    .sk-estimator-doc-link.fitted:hover {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-3);
      color: var(--sklearn-color-background);
      text-decoration: none;
    }

    /* Span, style for the box shown on hovering the info icon */
    .sk-estimator-doc-link span {
      display: none;
      z-index: 9999;
      position: relative;
      font-weight: normal;
      right: .2ex;
      padding: .5ex;
      margin: .5ex;
      width: min-content;
      min-width: 20ex;
      max-width: 50ex;
      color: var(--sklearn-color-text);
      box-shadow: 2pt 2pt 4pt #999;
      /* unfitted */
      background: var(--sklearn-color-unfitted-level-0);
      border: .5pt solid var(--sklearn-color-unfitted-level-3);
    }

    .sk-estimator-doc-link.fitted span {
      /* fitted */
      background: var(--sklearn-color-fitted-level-0);
      border: var(--sklearn-color-fitted-level-3);
    }

    .sk-estimator-doc-link:hover span {
      display: block;
    }

    /* "?"-specific style due to the `<a>` HTML tag */

    #sk-container-id-58 a.estimator_doc_link {
      float: right;
      font-size: 1rem;
      line-height: 1em;
      font-family: monospace;
      background-color: var(--sklearn-color-background);
      border-radius: 1rem;
      height: 1rem;
      width: 1rem;
      text-decoration: none;
      /* unfitted */
      color: var(--sklearn-color-unfitted-level-1);
      border: var(--sklearn-color-unfitted-level-1) 1pt solid;
    }

    #sk-container-id-58 a.estimator_doc_link.fitted {
      /* fitted */
      border: var(--sklearn-color-fitted-level-1) 1pt solid;
      color: var(--sklearn-color-fitted-level-1);
    }

    /* On hover */
    #sk-container-id-58 a.estimator_doc_link:hover {
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-3);
      color: var(--sklearn-color-background);
      text-decoration: none;
    }

    #sk-container-id-58 a.estimator_doc_link.fitted:hover {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-3);
    }
    </style><div id="sk-container-id-58" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>TunedThresholdClassifierCV(estimator=Pipeline(steps=[(&#x27;standardscaler&#x27;,
                                                          StandardScaler()),
                                                         (&#x27;logisticregression&#x27;,
                                                          LogisticRegression(C=np.float64(100.0)))]),
                               n_jobs=2,
                               scoring=make_scorer(business_metric, response_method=&#x27;predict&#x27;))</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label fitted sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-234" type="checkbox" ><label for="sk-estimator-id-234" class="sk-toggleable__label fitted sk-toggleable__label-arrow fitted">&nbsp;&nbsp;TunedThresholdClassifierCV<a class="sk-estimator-doc-link fitted" rel="noreferrer" target="_blank" href="https://scikit-learn.org/1.5/modules/generated/sklearn.model_selection.TunedThresholdClassifierCV.html">?<span>Documentation for TunedThresholdClassifierCV</span></a><span class="sk-estimator-doc-link fitted">i<span>Fitted</span></span></label><div class="sk-toggleable__content fitted"><pre>TunedThresholdClassifierCV(estimator=Pipeline(steps=[(&#x27;standardscaler&#x27;,
                                                          StandardScaler()),
                                                         (&#x27;logisticregression&#x27;,
                                                          LogisticRegression(C=np.float64(100.0)))]),
                               n_jobs=2,
                               scoring=make_scorer(business_metric, response_method=&#x27;predict&#x27;))</pre></div> </div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label fitted sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-235" type="checkbox" ><label for="sk-estimator-id-235" class="sk-toggleable__label fitted sk-toggleable__label-arrow fitted">estimator: Pipeline</label><div class="sk-toggleable__content fitted"><pre>Pipeline(steps=[(&#x27;standardscaler&#x27;, StandardScaler()),
                    (&#x27;logisticregression&#x27;,
                     LogisticRegression(C=np.float64(100.0)))])</pre></div> </div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator fitted sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-236" type="checkbox" ><label for="sk-estimator-id-236" class="sk-toggleable__label fitted sk-toggleable__label-arrow fitted">&nbsp;StandardScaler<a class="sk-estimator-doc-link fitted" rel="noreferrer" target="_blank" href="https://scikit-learn.org/1.5/modules/generated/sklearn.preprocessing.StandardScaler.html">?<span>Documentation for StandardScaler</span></a></label><div class="sk-toggleable__content fitted"><pre>StandardScaler()</pre></div> </div></div><div class="sk-item"><div class="sk-estimator fitted sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-237" type="checkbox" ><label for="sk-estimator-id-237" class="sk-toggleable__label fitted sk-toggleable__label-arrow fitted">&nbsp;LogisticRegression<a class="sk-estimator-doc-link fitted" rel="noreferrer" target="_blank" href="https://scikit-learn.org/1.5/modules/generated/sklearn.linear_model.LogisticRegression.html">?<span>Documentation for LogisticRegression</span></a></label><div class="sk-toggleable__content fitted"><pre>LogisticRegression(C=np.float64(100.0))</pre></div> </div></div></div></div></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 646-655

.. code-block:: Python

    print(
        "Benefit/cost of our logistic regression: "
        f"{business_scorer(tuned_model, data_test, target_test, amount=amount_test):,.2f}€"
    )
    print(
        "Balanced accuracy of our logistic regression: "
        f"{balanced_accuracy_scorer(tuned_model, data_test, target_test):.3f}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Benefit/cost of our logistic regression: 268,847.31€
    Balanced accuracy of our logistic regression: 0.898




.. GENERATED FROM PYTHON SOURCE LINES 656-684

We observe that tuning the decision threshold increases the expected profit of
deploying our model as estimated by the business metric.
Eventually, the balanced accuracy also increased. Note that it might not always be
the case because the statistical metric is not necessarily a surrogate of the
business metric. It is therefore important, whenever possible, optimize the decision
threshold with respect to the business metric.

Finally, the estimate of the business metric itself can be unreliable, in
particular when the number of data points in the minority class is so small.
Any business impact estimated by cross-validation of a business metric on
historical data (offline evaluation) should ideally be confirmed by A/B testing
on live data (online evaluation). Note however that A/B testing models is
beyond the scope of the scikit-learn library itself.

Manually setting the decision threshold instead of tuning it
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

In the previous example, we used the
:class:`~sklearn.model_selection.TunedThresholdClassifierCV` to find the optimal
decision threshold. However, in some cases, we might have some prior knowledge about
the problem at hand and we might be happy to set the decision threshold manually.

The class :class:`~sklearn.model_selection.FixedThresholdClassifier` allows us to
manually set the decision threshold. At prediction time, it behave as the previous
tuned model but no search is performed during the fitting process.

Here, we will reuse the decision threshold found in the previous section to create a
new model and check that it gives the same results.

.. GENERATED FROM PYTHON SOURCE LINES 684-690

.. code-block:: Python

    from sklearn.model_selection import FixedThresholdClassifier

    model_fixed_threshold = FixedThresholdClassifier(
        estimator=model, threshold=tuned_model.best_threshold_
    ).fit(data_train, target_train)








.. GENERATED FROM PYTHON SOURCE LINES 691-700

.. code-block:: Python

    business_score = business_scorer(
        model_fixed_threshold, data_test, target_test, amount=amount_test
    )
    print(f"Benefit/cost of our logistic regression: {business_score:,.2f}€")
    print(
        "Balanced accuracy of our logistic regression: "
        f"{balanced_accuracy_scorer(model_fixed_threshold, data_test, target_test):.3f}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Benefit/cost of our logistic regression: 268,847.31€
    Balanced accuracy of our logistic regression: 0.898




.. GENERATED FROM PYTHON SOURCE LINES 701-703

We observe that we obtained the exact same results but the fitting process was much
faster since we did not perform any search.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 0.760 seconds)


.. _sphx_glr_download_auto_examples_model_selection_plot_cost_sensitive_learning.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/scikit-learn/scikit-learn/1.5.X?urlpath=lab/tree/notebooks/auto_examples/model_selection/plot_cost_sensitive_learning.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: lite-badge

      .. image:: images/jupyterlite_badge_logo.svg
        :target: ../../lite/lab/index.html?path=auto_examples/model_selection/plot_cost_sensitive_learning.ipynb
        :alt: Launch JupyterLite
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_cost_sensitive_learning.ipynb <plot_cost_sensitive_learning.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_cost_sensitive_learning.py <plot_cost_sensitive_learning.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_cost_sensitive_learning.zip <plot_cost_sensitive_learning.zip>`


.. include:: plot_cost_sensitive_learning.recommendations


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
