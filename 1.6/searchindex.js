Search.setIndex({"alltitles": {"(Generalized) linear models": [[210, "generalized-linear-models"]], "1-way partial dependence with different models": [[186, "way-partial-dependence-with-different-models"]], "20 newsgroups dataset": [[103, "newsgroups-dataset"]], "2D interaction plots": [[186, "d-interaction-plots"]], "3D representation": [[186, "d-representation"]], "A constant prediction baseline": [[210, "a-constant-prediction-baseline"]], "A demo of K-Means clustering on the handwritten digits data": [[92, null]], "A demo of structured Ward hierarchical clustering on an image of coins": [[82, null]], "A demo of the Spectral Biclustering algorithm": [[59, null]], "A demo of the Spectral Co-Clustering algorithm": [[60, null]], "A demo of the mean-shift clustering algorithm": [[97, null]], "A more flexible plotting API": [[320, "a-more-flexible-plotting-api"]], "A note on shuffling": [[411, "a-note-on-shuffling"]], "A qualitative look at the predictions": [[53, "a-qualitative-look-at-the-predictions"]], "A simple algorithmic trick: warm restarts": [[381, "a-simple-algorithmic-trick-warm-restarts"]], "A typical workflow for triaging issues": [[374, "a-typical-workflow-for-triaging-issues"]], "AIC and BIC criteria": [[1000, "aic-and-bic-criteria"]], "API Interface": [[398, "api-interface"]], "API Reference": [[2, null]], "API changes": [[1041, "api-changes"]], "API changes summary": [[1034, "api-changes-summary"], [1034, "id4"], [1034, "id7"], [1034, "id10"], [1035, "api-changes-summary"], [1036, "api-changes-summary"], [1037, "api-changes-summary"], [1038, "api-changes-summary"], [1039, "api-changes-summary"], [1040, "api-changes-summary"], [1040, "id6"], [1041, "api-changes-summary"]], "API compatibility checkers": [[42, "module-sklearn.utils.estimator_checks"]], "APIs of scikit-learn objects": [[377, "apis-of-scikit-learn-objects"]], "ARDRegression": [[647, null]], "ARFF parser": [[369, "arff-parser"]], "AWeber": [[1028, "id9"]], "Ability of Gaussian process regression (GPR) to estimate data noise-level": [[175, null]], "Ablation study": [[247, "ablation-study"]], "About the project": [[387, "about-the-project"]], "About us": [[0, null]], "Access pipeline steps": [[408, "access-pipeline-steps"]], "Access to nested parameters": [[408, "access-to-nested-parameters"]], "Accuracy of the Model": [[187, "accuracy-of-the-model"]], "Accuracy score": [[1004, "accuracy-score"]], "Accuracy vs alpha for training and testing sets": [[354, "accuracy-vs-alpha-for-training-and-testing-sets"]], "Active Core Contributors": [[0, "active-core-contributors"]], "AdaBoost": [[414, "adaboost"]], "AdaBoostClassifier": [[554, null]], "AdaBoostRegressor": [[555, null]], "Adapting predefined metrics via make_scorer": [[1004, "adapting-predefined-metrics-via-make-scorer"]], "Add support for monotonic constraints in tree-based models": [[324, "add-support-for-monotonic-constraints-in-tree-based-models"]], "Adding connectivity constraints": [[407, "adding-connectivity-constraints"]], "Additive Chi Squared Kernel": [[996, "additive-chi-squared-kernel"]], "AdditiveChi2Sampler": [[641, null]], "Addressing the problem with a business metric": [[262, "addressing-the-problem-with-a-business-metric"]], "Adjustment for chance in clustering performance evaluation": [[73, null]], "Advanced Plotting With Partial Dependence": [[248, null]], "Advantages:": [[407, null], [407, null], [407, null], [407, null], [407, null], [407, null], [407, null], [407, null]], "Affinity Propagation": [[407, "affinity-propagation"]], "AffinityPropagation": [[440, null]], "Agglomerative clustering with and without structure": [[75, null]], "Agglomerative clustering with different metrics": [[76, null]], "AgglomerativeClustering": [[441, null]], "Aggressive elimination of candidates": [[993, "aggressive-elimination-of-candidates"]], "Algorithms": [[1008, "algorithms"]], "Almost complete Metadata Routing support": [[326, "almost-complete-metadata-routing-support"]], "Alpine Linux": [[393, "alpine-linux"]], "Alternatives to brute force parameter search": [[993, "alternatives-to-brute-force-parameter-search"]], "Ames Housing dataset": [[247, "ames-housing-dataset"]], "An example custom estimator implementing a simple classifier": [[133, "an-example-custom-estimator-implementing-a-simple-classifier"]], "An example of K-Means++ initialization": [[93, null]], "Anaconda and Enthought Deployment Manager for all supported platforms": [[393, "anaconda-and-enthought-deployment-manager-for-all-supported-platforms"]], "Analysis": [[135, "analysis"]], "Analysis of a bag-of-words document classifier": [[350, "analysis-of-a-bag-of-words-document-classifier"]], "Analysis of the error metrics": [[147, "analysis-of-the-error-metrics"]], "Analysis of the plots": [[186, "analysis-of-the-plots"]], "Analysis of the results": [[65, "analysis-of-the-results"]], "Analyzing results with the cv_results_ attribute": [[993, "analyzing-results-with-the-cv-results-attribute"]], "Analyzing the Bike Sharing Demand dataset": [[53, "analyzing-the-bike-sharing-demand-dataset"]], "Applications and examples": [[415, "applications-and-examples"]], "Approximate nearest neighbors in TSNE": [[288, null]], "Arch Linux": [[393, "arch-linux"]], "Architectural / general goals": [[1024, "architectural-general-goals"]], "Array API support": [[326, "array-api-support"]], "Array API support (experimental)": [[403, null]], "Artwork": [[0, "artwork"]], "Attributes": [[389, "attributes"]], "Authors": [[1034, "authors"], [1034, "id20"]], "Automated Contributions Policy": [[375, "automated-contributions-policy"]], "Automatic Relevance Determination (ARD)": [[196, "automatic-relevance-determination-ard"]], "Automatic Relevance Determination - ARD": [[1000, "automatic-relevance-determination-ard"]], "Automatic parameter searches": [[388, "automatic-parameter-searches"]], "Auxiliary functions that operate on arrays": [[42, "module-sklearn.utils.arrayfuncs"]], "Available Plotting Utilities": [[1031, "available-plotting-utilities"]], "BIRCH": [[407, "birch"]], "BNP Paribas Cardif": [[1028, "id29"]], "Bagging meta-estimator": [[414, "bagging-meta-estimator"]], "BaggingClassifier": [[556, null]], "BaggingRegressor": [[557, null]], "Balance model complexity and cross-validated score": [[267, null]], "Balanced accuracy score": [[1004, "balanced-accuracy-score"]], "Ball Tree": [[1007, "ball-tree"]], "BallTree": [[847, null]], "BaseEstimator": [[421, null]], "Basic kernels": [[417, "basic-kernels"]], "Basic shrinkage": [[409, "basic-shrinkage"]], "Bayesian Regression": [[1000, "bayesian-regression"]], "Bayesian Ridge Regression": [[1000, "bayesian-ridge-regression"]], "Bayesian regressions with polynomial feature expansion": [[192, "bayesian-regressions-with-polynomial-feature-expansion"]], "Bayesian regressors": [[26, "bayesian-regressors"]], "BayesianGaussianMixture": [[800, null]], "BayesianRidge": [[648, null]], "Benchmark and plot helper functions": [[50, "benchmark-and-plot-helper-functions"]], "Benchmark bulk/atomic prediction speed for various regressors": [[50, "benchmark-bulk-atomic-prediction-speed-for-various-regressors"]], "Benchmark influence": [[47, "benchmark-influence"]], "Benchmark n_features influence on prediction speed": [[50, "benchmark-n-features-influence-on-prediction-speed"]], "Benchmark throughput": [[50, "benchmark-throughput"]], "Benchmarking classifiers": [[350, "benchmarking-classifiers"]], "Bernoulli Naive Bayes": [[1006, "bernoulli-naive-bayes"]], "Bernoulli Restricted Boltzmann machines": [[1009, "bernoulli-restricted-boltzmann-machines"]], "BernoulliNB": [[842, null]], "BernoulliRBM": [[863, null]], "Bestofmedia Group": [[1028, "id13"]], "BiclusterMixin": [[422, null]], "Biclustering": [[57, null], [182, "biclustering"], [371, "biclustering"], [404, null]], "Biclustering documents with the Spectral Co-clustering algorithm": [[58, null]], "Biclustering evaluation": [[404, "biclustering-evaluation"]], "Biclustering metrics": [[28, "biclustering-metrics"]], "Bike sharing dataset preprocessing": [[186, "bike-sharing-dataset-preprocessing"]], "Binarizer": [[870, null]], "Binary Case": [[1000, "binary-case"]], "Binary case": [[1004, "binary-case"]], "Binary classification": [[1004, "binary-classification"]], "Birch": [[442, null]], "Birchbox": [[1028, "id12"]], "Bisecting K-Means": [[407, "bisecting-k-means"]], "Bisecting K-Means and Regular K-Means Performance Comparison": [[79, null]], "BisectingKMeans": [[443, null]], "BisectingKMeans: divide and cluster": [[321, "bisectingkmeans-divide-and-cluster"]], "Blind source separation using FastICA": [[122, null]], "Boil down your script to something as small as possible": [[380, "boil-down-your-script-to-something-as-small-as-possible"]], "Booking.com": [[1028, "id8"]], "Breast cancer wisconsin (diagnostic) dataset": [[372, "breast-cancer-wisconsin-diagnostic-dataset"]], "Brier score loss": [[1004, "brier-score-loss"]], "Brute Force": [[1007, "brute-force"]], "Bug Tracker": [[1027, "bug-tracker"]], "Bug fixes": [[1037, "bug-fixes"], [1037, "id1"], [1037, "id3"], [1038, "bug-fixes"], [1038, "id3"], [1039, "bug-fixes"], [1039, "id3"], [1040, "bug-fixes"], [1040, "id5"], [1041, "bug-fixes"], [1041, "id4"]], "Bug triaging and issue curation": [[374, null]], "Build a pipeline": [[408, "build-a-pipeline"]], "Build dependencies": [[373, "build-dependencies"]], "Build lock files": [[375, "build-lock-files"]], "Build the dataset": [[174, "build-the-dataset"]], "Building a specific version from a tag": [[373, "building-a-specific-version-from-a-tag"]], "Building and testing for the ARM64 platform on a x86_64 machine": [[383, "building-and-testing-for-the-arm64-platform-on-a-x86-64-machine"]], "Building from source": [[373, "building-from-source"]], "Building the documentation": [[375, "building-the-documentation"]], "Bulk versus Atomic mode": [[362, "bulk-versus-atomic-mode"]], "Bunch": [[922, null]], "CCA": [[482, null]], "CCA (PLS mode B with symmetric deflation)": [[116, "cca-pls-mode-b-with-symmetric-deflation"]], "CV splitters": [[358, "cv-splitters"], [358, "id3"]], "Caching nearest neighbors": [[290, null]], "Caching transformers within a Pipeline": [[105, "caching-transformers-within-a-pipeline"]], "Caching transformers: avoid repeated computation": [[408, "caching-transformers-avoid-repeated-computation"]], "CalibratedClassifierCV": [[437, null]], "Calibrating a classifier": [[405, "calibrating-a-classifier"]], "Calibration": [[61, null], [182, "calibration"]], "Calibration curves": [[63, "calibration-curves"], [65, "calibration-curves"], [405, "calibration-curves"]], "Calibration of a pre-fitted classifier": [[167, "calibration-of-a-pre-fitted-classifier"]], "Calibration of the confidence interval": [[147, "calibration-of-the-confidence-interval"]], "CalibrationDisplay": [[438, null]], "California Housing dataset": [[370, "california-housing-dataset"]], "Calinski-Harabasz Index": [[407, "calinski-harabasz-index"]], "Callable scorers": [[1004, "callable-scorers"]], "Canonical (symmetric) PLS": [[116, "canonical-symmetric-pls"]], "Canonical Correlation Analysis": [[410, "canonical-correlation-analysis"]], "Cardiotocography dataset": [[247, "cardiotocography-dataset"]], "Categorical Feature Support in Gradient Boosting": [[144, null]], "Categorical Features Support": [[414, "categorical-features-support"]], "Categorical Naive Bayes": [[1006, "categorical-naive-bayes"]], "CategoricalNB": [[843, null]], "Centering kernel matrices": [[1014, "centering-kernel-matrices"]], "Chain of binary classifiers": [[287, "chain-of-binary-classifiers"]], "Change the default value of a parameter": [[375, "change-the-default-value-of-a-parameter"]], "Change.org": [[1028, "id14"]], "Changed displays": [[1050, "changed-displays"]], "Changed models": [[1041, "changed-models"], [1042, "changed-models"], [1042, "id9"], [1042, "id22"], [1043, "changed-models"], [1043, "id6"], [1044, "changed-models"], [1045, "changed-models"], [1045, "id3"], [1046, "changed-models"], [1047, "changed-models"], [1048, "changed-models"], [1048, "id6"], [1049, "changed-models"], [1049, "id7"], [1050, "changed-models"], [1050, "id4"], [1051, "changed-models"], [1051, "id1"], [1052, "changed-models"], [1053, "changed-models"]], "Changelog": [[1034, "changelog"], [1034, "id1"], [1034, "id3"], [1034, "id6"], [1034, "id9"], [1034, "id12"], [1034, "id14"], [1034, "id16"], [1034, "id18"], [1034, "id19"], [1035, "changelog"], [1035, "id2"], [1036, "changelog"], [1037, "changelog"], [1038, "changelog"], [1038, "id2"], [1039, "changelog"], [1039, "id2"], [1040, "changelog"], [1040, "id1"], [1040, "id3"], [1041, "changelog"], [1041, "id2"], [1042, "changelog"], [1042, "id1"], [1042, "id5"], [1042, "id10"], [1042, "id23"], [1043, "changelog"], [1043, "id1"], [1043, "id2"], [1043, "id7"], [1044, "changelog"], [1044, "id1"], [1044, "id4"], [1045, "changelog"], [1045, "id1"], [1045, "id4"], [1046, "changelog"], [1046, "id1"], [1046, "id4"], [1047, "changelog"], [1047, "id6"], [1048, "changelog"], [1048, "id1"], [1048, "id7"], [1049, "changelog"], [1049, "id1"], [1049, "id9"], [1050, "changelog"], [1050, "id1"], [1050, "id6"], [1051, "changelog"], [1051, "id3"], [1052, "changelog"], [1052, "id2"], [1052, "id6"]], "Changes impacting all modules": [[1049, "changes-impacting-all-modules"], [1049, "id8"], [1050, "changes-impacting-all-modules"], [1050, "id5"], [1051, "changes-impacting-all-modules"]], "Changes impacting many modules": [[1051, "changes-impacting-many-modules"], [1052, "changes-impacting-many-modules"], [1052, "id1"], [1052, "id5"], [1053, "changes-impacting-many-modules"], [1053, "id1"]], "Changes to estimator checks": [[1042, "changes-to-estimator-checks"], [1043, "changes-to-estimator-checks"], [1044, "changes-to-estimator-checks"]], "Checking out pull requests as remote-tracking branches": [[383, "checking-out-pull-requests-as-remote-tracking-branches"]], "Checking scikit-learn compatibility of an estimator": [[317, "checking-scikit-learn-compatibility-of-an-estimator"]], "Checking the variability of the coefficients": [[185, "checking-the-variability-of-the-coefficients"]], "Chi-squared kernel": [[1002, "chi-squared-kernel"]], "Choice of solver for Kernel PCA": [[412, "choice-of-solver-for-kernel-pca"]], "Choose parameters": [[47, "choose-parameters"]], "Choosing the right estimator": [[395, null]], "Citing scikit-learn": [[0, "citing-scikit-learn"]], "Class APIs and Estimator Types": [[389, "class-apis-and-estimator-types"]], "Class Likelihood Ratios to measure classification performance": [[271, null]], "Class likelihood ratios": [[1004, "class-likelihood-ratios"]], "ClassNamePrefixFeaturesOutMixin": [[423, null]], "Classical linear regressors": [[26, "classical-linear-regressors"]], "Classification": [[66, null], [69, "classification"], [177, "classification"], [182, "classification"], [1000, "classification"], [1007, "id4"], [1008, "classification"], [1018, "classification"], [1019, "classification"], [1020, "classification"]], "Classification and ROC analysis": [[278, "classification-and-roc-analysis"]], "Classification criteria": [[1020, "classification-criteria"]], "Classification metrics": [[28, "classification-metrics"], [1004, "classification-metrics"]], "Classification of text documents using sparse features": [[350, null]], "Classification pipeline": [[103, "classification-pipeline"]], "Classification report": [[1004, "classification-report"]], "Classifier Training": [[203, "classifier-training"]], "Classifier comparison": [[68, null]], "ClassifierChain": [[838, null], [1005, "classifierchain"]], "ClassifierMixin": [[424, null]], "ClassifierTags": [[923, null]], "Clear definition of the public API": [[1044, "clear-definition-of-the-public-api"]], "Cloning": [[377, "cloning"]], "Closing issues: a tough call": [[374, null]], "Cluster centers - MiniBatchKMeans": [[121, "cluster-centers-minibatchkmeans"]], "ClusterMixin": [[425, null]], "Clustering": [[72, null], [182, "clustering"], [407, null]], "Clustering evaluation summary": [[351, "clustering-evaluation-summary"]], "Clustering for dictionary learning": [[412, null]], "Clustering metrics": [[28, "module-sklearn.metrics.cluster"], [1004, "clustering-metrics"]], "Clustering performance evaluation": [[407, "clustering-performance-evaluation"]], "Clustering sparse data with k-means": [[351, "clustering-sparse-data-with-k-means"]], "Clustering text documents using k-means": [[351, null]], "Clustering using affinity propagation": [[52, "clustering-using-affinity-propagation"]], "Code Contributors": [[1038, "code-contributors"], [1039, "code-contributors"], [1040, "code-contributors"], [1040, "id7"]], "Code Review Guidelines": [[375, "code-review-guidelines"]], "Code and Documentation Contributors": [[1041, "code-and-documentation-contributors"], [1041, "id10"], [1042, "code-and-documentation-contributors"], [1042, "id8"], [1042, "id21"], [1042, "id41"]], "Coding Sprints": [[0, "coding-sprints"]], "Coding guidelines": [[377, "coding-guidelines"]], "Coefficients comparison": [[281, "coefficients-comparison"]], "Cohen\u2019s kappa": [[1004, "cohen-s-kappa"]], "Column Transformer with Heterogeneous Data Sources": [[103, null]], "Column Transformer with Mixed Types": [[104, null]], "ColumnTransformer": [[464, null]], "ColumnTransformer for heterogeneous data": [[408, "columntransformer-for-heterogeneous-data"]], "ColumnTransformer is subscriptable": [[325, "columntransformer-is-subscriptable"]], "Combine predictors using stacking": [[155, null]], "Combining the display objects into a single plot": [[238, "combining-the-display-objects-into-a-single-plot"]], "Commit message markers": [[375, "commit-message-markers"]], "Common Vectorizer usage": [[415, "common-vectorizer-usage"]], "Common estimator checks": [[403, "common-estimator-checks"]], "Common pitfalls and recommended practices": [[358, null]], "Common pitfalls and subtleties": [[358, "common-pitfalls-and-subtleties"]], "Common pitfalls in the interpretation of coefficients of linear models": [[185, null]], "Communication Team": [[0, "communication-team"]], "Compact text representation": [[239, "compact-text-representation"]], "Compare BIRCH and MiniBatchKMeans": [[78, null]], "Compare Stochastic learning strategies for MLPClassifier": [[304, null]], "Compare cross decomposition methods": [[116, null]], "Compare different approaches to setting the regularization parameter": [[110, "compare-different-approaches-to-setting-the-regularization-parameter"]], "Compare probabilities": [[64, "compare-probabilities"]], "Compare the effect of different scalers on data with outliers": [[308, null]], "Compare times of SVR and Kernel Ridge Regression": [[243, "compare-times-of-svr-and-kernel-ridge-regression"]], "Compare with SVMs": [[161, "compare-with-svms"]], "Comparing Linear Bayesian Regressors": [[192, null]], "Comparing Nearest Neighbors with and without Neighborhood Components Analysis": [[296, null]], "Comparing QuantileRegressor and LinearRegression": [[212, "comparing-quantileregressor-and-linearregression"]], "Comparing Random Forests and Histogram Gradient Boosting models": [[141, null]], "Comparing Target Encoder with Other Encoders": [[314, null]], "Comparing anomaly detection algorithms for outlier detection on toy datasets": [[237, null]], "Comparing different clustering algorithms on toy datasets": [[80, null]], "Comparing different hierarchical linkage methods on toy datasets": [[96, null]], "Comparing random forests and the multi-output meta estimator": [[154, null]], "Comparing randomized search and grid search for hyperparameter estimation": [[276, null]], "Comparing the results": [[190, "comparing-the-results"]], "Comparing the two Lasso implementations on Dense data": [[197, "comparing-the-two-lasso-implementations-on-dense-data"]], "Comparing the two Lasso implementations on Sparse data": [[197, "comparing-the-two-lasso-implementations-on-sparse-data"]], "Comparing two models: Bayesian approach": [[268, "comparing-two-models-bayesian-approach"]], "Comparing two models: frequentist approach": [[268, "comparing-two-models-frequentist-approach"]], "Comparing various online solvers": [[217, null]], "Comparison between grid search and successive halving": [[279, null]], "Comparison of Calibration of Classifiers": [[65, null]], "Comparison of F-test and mutual information": [[160, null]], "Comparison of LDA and PCA 2D projection of Iris dataset": [[129, null]], "Comparison of LDA and QDA": [[71, "comparison-of-lda-and-qda"]], "Comparison of Manifold Learning methods": [[230, null]], "Comparison of kernel ridge and Gaussian process regression": [[169, null]], "Comparison of kernel ridge regression and SVR": [[243, null]], "Comparison of results": [[112, "comparison-of-results"]], "Comparison of the K-Means and MiniBatchKMeans clustering algorithms": [[98, null]], "Comparison with special purpose text vectorizers": [[352, "comparison-with-special-purpose-text-vectorizers"]], "Comparison with the regularization parameter of SVM": [[1000, "comparison-with-the-regularization-parameter-of-svm"]], "Complement Naive Bayes": [[1006, "complement-naive-bayes"]], "ComplementNB": [[844, null]], "Complexity": [[1007, "complexity"], [1008, "complexity"], [1018, "complexity"], [1019, "complexity"], [1020, "complexity"]], "Complexity analysis": [[270, "complexity-analysis"]], "Composite estimators and parameter spaces": [[993, "composite-estimators-and-parameter-spaces"]], "CompoundKernel": [[615, null]], "Compression via vector quantization": [[87, "compression-via-vector-quantization"]], "Compressive sensing: tomography reconstruction with L1 prior (Lasso)": [[54, null]], "Computation methods": [[1011, "computation-methods"]], "Computation times": [[1025, null]], "Computational Performance": [[362, null]], "Compute Affinity Propagation": [[74, "compute-affinity-propagation"]], "Compute DBSCAN": [[83, "compute-dbscan"]], "Compute clustering": [[82, "compute-clustering"], [101, "compute-clustering"], [101, "id1"]], "Compute clustering with KMeans": [[98, "compute-clustering-with-kmeans"]], "Compute clustering with MeanShift": [[97, "compute-clustering-with-meanshift"]], "Compute clustering with MiniBatchKMeans": [[98, "compute-clustering-with-minibatchkmeans"]], "Compute paths": [[215, "compute-paths"]], "Compute regularization path": [[204, "compute-regularization-path"]], "Compute score and computation times": [[141, "compute-score-and-computation-times"]], "Compute the likelihood on test data": [[110, "compute-the-likelihood-on-test-data"]], "Computing Centrality scores": [[56, "computing-centrality-scores"]], "Computing Principal Singular Vector using Randomized SVD": [[56, "computing-principal-singular-vector-using-randomized-svd"]], "Computing cross-validated metrics": [[411, "computing-cross-validated-metrics"]], "Computing the Adjacency matrix": [[56, "computing-the-adjacency-matrix"]], "Computing with scikit-learn": [[361, null]], "Concatenating multiple feature extraction methods": [[107, null]], "Concentration Prior Type Analysis of Variation Bayesian Gaussian Mixture": [[253, null]], "Concluding remarks": [[44, "concluding-remarks"], [234, "concluding-remarks"]], "Conclusion": [[47, "conclusion"], [53, "conclusion"], [200, "conclusion"], [207, "conclusion"], [285, "conclusion"], [291, "conclusion"], [315, "conclusion"], [343, "conclusion"]], "Conclusions": [[196, "conclusions"]], "Configuration switches": [[363, "configuration-switches"]], "Configuring Scikit-learn for reduced validation overhead": [[362, "configuring-scikit-learn-for-reduced-validation-overhead"]], "Confusion matrix": [[261, null], [1004, "confusion-matrix"]], "ConfusionMatrixDisplay": [[700, null]], "Connectivity graph of an image": [[415, "connectivity-graph-of-an-image"]], "Consideration regarding model refitting and cross-validation": [[262, "consideration-regarding-model-refitting-and-cross-validation"]], "ConstantKernel": [[616, null]], "Construct the kernel-based regression models": [[243, "construct-the-kernel-based-regression-models"]], "Consuming Estimator": [[244, "consuming-estimator"]], "Consuming and routing Meta-Estimator": [[244, "consuming-and-routing-meta-estimator"]], "Contingency Matrix": [[407, "contingency-matrix"]], "Continuous Integration (CI)": [[375, "continuous-integration-ci"]], "Contributing": [[375, null], [387, "contributing"]], "Contributing code": [[375, "contributing-code"]], "Contributor Experience Team": [[0, "contributor-experience-team"]], "Contributors": [[390, "contributors"]], "Controlling randomness": [[358, "controlling-randomness"]], "Controlling the tree size": [[414, "controlling-the-tree-size"]], "Convergence of the AdaBoostClassifier": [[135, "convergence-of-the-adaboostclassifier"]], "ConvergenceWarning": [[572, null]], "Core Contributors": [[390, "core-contributors"]], "Cosine similarity": [[1002, "cosine-similarity"]], "Cost-sensitive learning when gains and costs are not constant": [[262, "cost-sensitive-learning-when-gains-and-costs-are-not-constant"]], "Cost-sensitive learning with constant gains and costs": [[262, "cost-sensitive-learning-with-constant-gains-and-costs"]], "CountVectorizer": [[590, null]], "Covariance estimation": [[109, null], [182, "covariance-estimation"], [409, null]], "Coverage error": [[1004, "coverage-error"]], "Crafting a minimal reproducer for scikit-learn": [[380, null]], "Create ConfusionMatrixDisplay": [[238, "create-confusionmatrixdisplay"]], "Create PrecisionRecallDisplay": [[238, "create-precisionrecalldisplay"]], "Create RocCurveDisplay": [[238, "create-roccurvedisplay"]], "Create Synthetic Dataset": [[315, "create-synthetic-dataset"]], "Create a random 1D dataset": [[356, "create-a-random-1d-dataset"]], "Create a random dataset": [[356, "create-a-random-dataset"]], "Create multi-label data, fit, and predict": [[275, "create-multi-label-data-fit-and-predict"]], "Create the data": [[128, "create-the-data"]], "Create the pipeline": [[342, "create-the-pipeline"]], "Creating a custom scorer object": [[1004, "creating-a-custom-scorer-object"]], "Creating a dataset": [[343, "creating-a-dataset"]], "Creating a non-noisy data set": [[214, "creating-a-non-noisy-data-set"]], "Creating the dataset": [[135, "creating-the-dataset"]], "Creating transformers": [[103, "creating-transformers"]], "Cross decomposition": [[115, null], [182, "cross-decomposition"], [410, null]], "Cross validation and model selection": [[411, "cross-validation-and-model-selection"]], "Cross validation iterators": [[411, "cross-validation-iterators"]], "Cross validation of time series data": [[411, "cross-validation-of-time-series-data"]], "Cross-validation iterators for grouped data": [[411, "cross-validation-iterators-for-grouped-data"]], "Cross-validation iterators for i.i.d. data": [[411, "cross-validation-iterators-for-i-i-d-data"]], "Cross-validation iterators with stratification based on class labels": [[411, "cross-validation-iterators-with-stratification-based-on-class-labels"]], "Cross-validation of likelihood ratios": [[271, "cross-validation-of-likelihood-ratios"]], "Cross-validation: evaluating estimator performance": [[411, null]], "Curve Fitting with Bayesian Ridge Regression": [[193, null]], "Custom Kernels": [[1019, "custom-kernels"]], "Custom imputation strategies for the SimpleImputer": [[325, "custom-imputation-strategies-for-the-simpleimputer"]], "Custom refit strategy of a grid search with cross-validation": [[266, null]], "Custom transformers": [[1014, "custom-transformers"]], "Customizing the vectorizer classes": [[415, "customizing-the-vectorizer-classes"]], "Cython Best Practices, Conventions and Knowledge": [[376, null]], "DBSCAN": [[407, "dbscan"], [444, null]], "DO NOT report your data unless it is extremely necessary": [[380, "do-not-report-your-data-unless-it-is-extremely-necessary"]], "Data": [[64, "data"]], "Data Loading and Feature Engineering": [[187, "data-loading-and-feature-engineering"]], "Data Loading and Preparation": [[207, "data-loading-and-preparation"]], "Data Preparation": [[145, "data-preparation"]], "Data Publica": [[1028, "id21"]], "Data and sample properties": [[389, "data-and-sample-properties"]], "Data exploration on the Bike Sharing Demand dataset": [[44, "data-exploration-on-the-bike-sharing-demand-dataset"]], "Data generation": [[71, "data-generation"], [83, "data-generation"], [91, "data-generation"], [151, "data-generation"], [164, "data-generation"], [175, "data-generation"], [258, "data-generation"], [328, "data-generation"], [346, "data-generation"]], "Data generation and model fitting": [[142, "data-generation-and-model-fitting"]], "Data leakage": [[358, "data-leakage"]], "Data leakage during pre-processing": [[358, "data-leakage-during-pre-processing"]], "Data loading": [[269, "data-loading"]], "Data preprocessing": [[148, "data-preprocessing"]], "DataConversionWarning": [[573, null]], "DataDimensionalityWarning": [[574, null]], "DataFrame Support": [[1051, "dataframe-support"]], "DataRobot": [[1028, "id18"]], "Dataiku": [[1028, "id25"]], "Dataset": [[63, "dataset"], [200, "dataset"], [274, "dataset"]], "Dataset Generation": [[203, "dataset-generation"]], "Dataset Versions": [[369, "dataset-versions"]], "Dataset and Gaussian process generation": [[178, "dataset-and-gaussian-process-generation"]], "Dataset and model": [[275, "dataset-and-model"]], "Dataset based latent variables model": [[116, "dataset-based-latent-variables-model"]], "Dataset examples": [[118, null], [182, "dataset-examples"]], "Dataset generation": [[176, "dataset-generation"], [212, "dataset-generation"]], "Dataset loading utilities": [[368, null], [380, "dataset-loading-utilities"]], "Dataset preparation": [[121, "dataset-preparation"], [230, "dataset-preparation"]], "Dataset preprocessing and model training": [[247, "dataset-preprocessing-and-model-training"]], "Dataset transformations": [[367, null]], "Datasets in svmlight / libsvm format": [[369, "datasets-in-svmlight-libsvm-format"]], "Davies-Bouldin Index": [[407, "davies-bouldin-index"]], "Dealing with multiclass target in classifiers": [[42, "module-sklearn.utils.multiclass"]], "Debian/Ubuntu": [[393, "debian-ubuntu"]], "Debugging CI issues": [[383, "debugging-ci-issues"]], "Debugging memory errors in Cython with valgrind": [[383, "debugging-memory-errors-in-cython-with-valgrind"]], "Decision Boundaries Visualization": [[203, "decision-boundaries-visualization"]], "Decision Boundaries of Multinomial and One-vs-Rest Logistic Regression": [[203, null]], "Decision Making Process": [[390, "decision-making-process"]], "Decision Surfaces of RBF Kernel SVM and Linear SVM": [[242, "decision-surfaces-of-rbf-kernel-svm-and-linear-svm"]], "Decision Tree Regression": [[356, null]], "Decision Tree Regression with AdaBoost": [[136, null]], "Decision Tree Regression with Multi-Output Targets": [[356, "decision-tree-regression-with-multi-output-targets"]], "Decision Tree on a 1D Regression Task": [[356, "decision-tree-on-a-1d-regression-task"]], "Decision Trees": [[182, "decision-trees"], [353, null], [1020, null]], "Decision boundary": [[291, "decision-boundary"]], "Decision boundary of semi-supervised classifiers versus SVM on the Iris dataset": [[333, null]], "Decision path": [[357, "decision-path"]], "DecisionBoundaryDisplay": [[634, null]], "DecisionTreeClassifier": [[915, null]], "DecisionTreeRegressor": [[916, null]], "Decoding text files": [[415, "decoding-text-files"]], "Decomposing signals in components (matrix factorization problems)": [[412, null]], "Decomposition": [[120, null], [121, "decomposition"], [182, "decomposition"]], "Decomposition: Dictionary learning": [[121, "decomposition-dictionary-learning"]], "Define a function to visualize cross-validation behavior": [[263, "define-a-function-to-visualize-cross-validation-behavior"]], "Define algorithms for the manifold learning": [[230, "define-algorithms-for-the-manifold-learning"]], "Define our evaluation benchmark": [[92, "define-our-evaluation-benchmark"]], "Define our grid-search strategy": [[266, "define-our-grid-search-strategy"]], "Define preprocessing functions": [[352, "define-preprocessing-functions"]], "Define structure of the data": [[82, "define-structure-of-the-data"]], "Define the classifiers": [[265, "define-the-classifiers"]], "Defining the list of metrics to evaluate": [[73, "defining-the-list-of-metrics-to-evaluate"]], "Demo of DBSCAN clustering algorithm": [[83, null]], "Demo of HDBSCAN clustering algorithm": [[89, null]], "Demo of OPTICS clustering algorithm": [[99, null]], "Demo of affinity propagation clustering algorithm": [[74, null]], "Demonstrating the different strategies of KBinsDiscretizer": [[311, null]], "Demonstration of k-means assumptions": [[91, null]], "Demonstration of multi-metric evaluation on cross_val_score and GridSearchCV": [[272, null]], "Density Estimation": [[413, null]], "Density Estimation for a Gaussian mixture": [[257, null]], "Density Estimation: Histograms": [[413, "density-estimation-histograms"]], "Density estimation, novelty detection": [[1019, "density-estimation-novelty-detection"]], "DensityMixin": [[426, null]], "Dependencies": [[373, "dependencies"]], "Deprecation": [[375, "deprecation"]], "Deprecation / Default Value Change": [[244, "deprecation-default-value-change"]], "Deprecations: using FutureWarning from now on": [[1044, "deprecations-using-futurewarning-from-now-on"]], "Description of the simulated data": [[184, "description-of-the-simulated-data"]], "Design the proper kernel": [[174, "design-the-proper-kernel"]], "DetCurveDisplay": [[701, null]], "Detection error tradeoff (DET)": [[1004, "detection-error-tradeoff-det"]], "Detection error tradeoff (DET) curve": [[265, null]], "Developer API for HTML representation": [[377, "developer-api-for-html-representation"]], "Developer API for check_is_fitted": [[377, "developer-api-for-check-is-fitted"]], "Developer API for set_output": [[377, "developer-api-for-set-output"]], "Developers\u2019 Tips and Tricks": [[383, null]], "Developer\u2019s Guide": [[378, null]], "Developing Estimators": [[132, null], [182, "developing-estimators"]], "Developing scikit-learn estimators": [[377, null]], "Developing with the Plotting API": [[382, null]], "Diabetes dataset": [[372, "diabetes-dataset"]], "DictVectorizer": [[352, "dictvectorizer"], [583, null]], "Dictionary Learning": [[412, "dictionary-learning"]], "Dictionary learning": [[121, "dictionary-learning"]], "Dictionary learning - positive code": [[121, "dictionary-learning-positive-code"]], "Dictionary learning - positive dictionary": [[121, "dictionary-learning-positive-dictionary"]], "Dictionary learning - positive dictionary & code": [[121, "dictionary-learning-positive-dictionary-code"]], "DictionaryLearning": [[532, null]], "Differences between solvers": [[1000, "differences-between-solvers"]], "Different label assignment strategies": [[407, "different-label-assignment-strategies"]], "Different linkage type: Ward, complete, average, and single linkage": [[407, "different-linkage-type-ward-complete-average-and-single-linkage"]], "Different objects": [[377, "different-objects"]], "Different scenario and useful concepts": [[1000, "different-scenario-and-useful-concepts"]], "Different scoring and fitting weights": [[398, "different-scoring-and-fitting-weights"]], "Digits dataset": [[69, "digits-dataset"]], "Dimensionality Reduction with Neighborhood Components Analysis": [[297, null]], "Dimensionality reduction": [[1007, "dimensionality-reduction"]], "Dimensionality reduction using Linear Discriminant Analysis": [[998, "dimensionality-reduction-using-linear-discriminant-analysis"]], "Discovering scikit-learn objects": [[42, "module-sklearn.utils.discovery"]], "Discretization": [[1014, "discretization"]], "Dispatching": [[385, null]], "Display Objects": [[1031, "display-objects"]], "Display code coverage in pull requests": [[383, "display-code-coverage-in-pull-requests"]], "Display results": [[215, "display-results"]], "Display the distorted image": [[124, "display-the-distorted-image"]], "Displaying Pipelines": [[249, null]], "Displaying a Complex Pipeline Chaining a Column Transformer": [[249, "displaying-a-complex-pipeline-chaining-a-column-transformer"]], "Displaying a Grid Search over a Pipeline with a Classifier": [[249, "displaying-a-grid-search-over-a-pipeline-with-a-classifier"]], "Displaying a Pipeline Chaining Multiple Preprocessing Steps & Classifier": [[249, "displaying-a-pipeline-chaining-multiple-preprocessing-steps-classifier"]], "Displaying a Pipeline and Dimensionality Reduction and Classifier": [[249, "displaying-a-pipeline-and-dimensionality-reduction-and-classifier"]], "Displaying a Pipeline with a Preprocessing Step and Classifier": [[249, "displaying-a-pipeline-with-a-preprocessing-step-and-classifier"]], "Displaying estimators and complex pipelines": [[239, null]], "Distance metrics": [[28, "distance-metrics"]], "DistanceMetric": [[702, null]], "Do you plan to implement transform for target y in a pipeline?": [[387, "do-you-plan-to-implement-transform-for-target-y-in-a-pipeline"]], "Do you support PyPy?": [[387, "do-you-support-pypy"]], "Documentation": [[375, "documentation"], [1034, "documentation"]], "Documentation Resources": [[1027, "documentation-resources"]], "Documentation Team": [[0, "documentation-team"]], "Documentation improvements": [[1037, "documentation-improvements"], [1038, "documentation-improvements"]], "Does scikit-learn work natively with various types of dataframes?": [[387, "does-scikit-learn-work-natively-with-various-types-of-dataframes"]], "Domain specific packages": [[1023, "domain-specific-packages"]], "Donating to the project": [[0, "donating-to-the-project"]], "Dot-Product kernel": [[417, "dot-product-kernel"]], "Dot-product kernel": [[178, "dot-product-kernel"]], "DotProduct": [[617, null]], "Download any dataset from the web": [[326, "download-any-dataset-from-the-web"]], "Download data, if not already on disk": [[56, "download-data-if-not-already-on-disk"]], "Download the data and make missing values sets": [[181, "download-the-data-and-make-missing-values-sets"]], "Download the dataset": [[155, "download-the-dataset"]], "Downloading datasets from the openml.org repository": [[369, "downloading-datasets-from-the-openml-org-repository"]], "Drawbacks:": [[407, null], [407, null], [407, null], [407, null], [407, null], [407, null], [407, null], [407, null]], "Dropping official support for PyPy": [[1053, "dropping-official-support-for-pypy"]], "Dropping support for building with setuptools": [[1053, "dropping-support-for-building-with-setuptools"]], "Dummy estimators": [[1004, "dummy-estimators"]], "DummyClassifier": [[552, null]], "DummyRegressor": [[553, null]], "D\u00b2 score": [[1004, "d2-score"]], "D\u00b2 score for classification": [[1004, "d2-score-for-classification"]], "Earlier versions": [[1034, "earlier-versions"]], "Early stopping in Gradient Boosting": [[145, null]], "Early stopping of Stochastic Gradient Descent": [[218, null]], "Effect of model regularization on training and test error": [[281, null]], "Effect of number of trees and early stopping": [[150, "effect-of-number-of-trees-and-early-stopping"]], "Effect of rescaling on a PCA dimensional reduction": [[313, "effect-of-rescaling-on-a-pca-dimensional-reduction"]], "Effect of rescaling on a k-neighbors models": [[313, "effect-of-rescaling-on-a-k-neighbors-models"]], "Effect of rescaling on model\u2019s performance": [[313, "effect-of-rescaling-on-model-s-performance"]], "Effect of transforming the targets in regression model": [[108, null]], "Effect of varying threshold for self-training": [[331, null]], "EfficiencyWarning": [[575, null]], "Efficient Linear Algebra & Array Operations": [[384, "efficient-linear-algebra-array-operations"]], "Efficient Random Sampling": [[384, "efficient-random-sampling"]], "Efficient Routines for Sparse Matrices": [[384, "efficient-routines-for-sparse-matrices"]], "Eigenfaces - PCA using randomized SVD": [[121, "eigenfaces-pca-using-randomized-svd"]], "Elastic-Net": [[1000, "elastic-net"]], "ElasticNet": [[196, "elasticnet"], [649, null]], "ElasticNetCV": [[650, null]], "EllipticEnvelope": [[469, null]], "Embedding in 2D space": [[52, "embedding-in-2d-space"]], "Embedding techniques comparison": [[231, "embedding-techniques-comparison"]], "Emeritus Communication Team": [[0, "emeritus-communication-team"]], "Emeritus Contributor Experience Team": [[0, "emeritus-contributor-experience-team"]], "Emeritus Core Contributors": [[0, "emeritus-core-contributors"]], "Emeritus Maintainers Team": [[0, "emeritus-maintainers-team"]], "Empirical covariance": [[409, "empirical-covariance"]], "Empirical evaluation of the impact of k-means initialization": [[95, null]], "Empirical validation": [[241, "empirical-validation"]], "EmpiricalCovariance": [[470, null]], "Encoding categorical features": [[1014, "encoding-categorical-features"]], "Encoding strategy": [[87, "encoding-strategy"]], "Enforcing keyword-only arguments": [[1045, "enforcing-keyword-only-arguments"], [1047, "enforcing-keyword-only-arguments"]], "Enhancement proposals (SLEPs)": [[390, "enhancement-proposals-sleps"]], "Enhancements": [[1037, "enhancements"], [1038, "enhancements"], [1039, "enhancements"], [1040, "enhancements"], [1040, "id4"], [1041, "enhancements"], [1041, "id3"]], "Enriched estimator displays": [[324, "enriched-estimator-displays"]], "Ensemble methods": [[134, null], [182, "ensemble-methods"]], "Ensembles: Gradient boosting, random forests, bagging, voting, stacking": [[414, null]], "Environment variables": [[363, "environment-variables"]], "Error Calculation": [[145, "error-calculation"]], "Error caused by file path length limit on Windows": [[393, "error-caused-by-file-path-length-limit-on-windows"]], "Errors and weights of the Weak Learners": [[135, "errors-and-weights-of-the-weak-learners"]], "Establishing a baseline model": [[190, "establishing-a-baseline-model"]], "Establishing parity between clusters": [[98, "establishing-parity-between-clusters"]], "Establishing the kernel approximation model": [[190, "establishing-the-kernel-approximation-model"]], "Establishing the kernelized SVM model": [[190, "establishing-the-kernelized-svm-model"]], "Estimate the covariance": [[114, "estimate-the-covariance"]], "Estimate the score": [[181, "estimate-the-score"]], "Estimated Attributes": [[377, "estimated-attributes"]], "Estimation algorithms": [[998, "estimation-algorithms"]], "Estimator Tags": [[377, "estimator-tags"]], "Estimator types": [[377, "estimator-types"]], "EstimatorCheckFailedWarning": [[576, null]], "Estimators": [[358, "estimators"], [358, "id2"], [377, "estimators"], [403, "estimators"]], "Estimators that handle NaN values": [[994, "estimators-that-handle-nan-values"]], "Evaluate the impact of the regularization parameter": [[281, "evaluate-the-impact-of-the-regularization-parameter"]], "Evaluation": [[113, "evaluation"], [306, "evaluation"]], "Evaluation metrics": [[262, "evaluation-metrics"]], "Evaluation of outlier detection estimators": [[247, null]], "Evaluation of the calibration of predictions": [[210, "evaluation-of-the-calibration-of-predictions"]], "Evaluation of the ranking power": [[210, "evaluation-of-the-ranking-power"]], "Evernote": [[1028, "id6"]], "Exact Kernel PCA": [[412, "exact-kernel-pca"]], "Exact PCA and probabilistic interpretation": [[412, "exact-pca-and-probabilistic-interpretation"]], "Example usage": [[403, "example-usage"]], "Example with noise-free target": [[176, "example-with-noise-free-target"]], "Example with noisy targets": [[176, "example-with-noisy-targets"]], "Examples": [[182, null], [364, "examples"], [406, "examples"], [1034, "examples"]], "Examples based on real world datasets": [[43, null], [182, "examples-based-on-real-world-datasets"]], "Examples of Using FrozenEstimator": [[167, null]], "Exhaustive Grid Search": [[993, "exhaustive-grid-search"]], "Exp-Sine-Squared kernel": [[178, "exp-sine-squared-kernel"], [417, "exp-sine-squared-kernel"]], "ExpSineSquared": [[618, null]], "Experimental / Under Development": [[1050, "experimental-under-development"]], "Experimental Array API support in LinearDiscriminantAnalysis": [[322, "experimental-array-api-support-in-lineardiscriminantanalysis"]], "Experimental Features": [[379, "experimental-features"]], "Explained variance score": [[1004, "explained-variance-score"]], "Explicit feature map approximation for RBF kernels": [[242, null]], "Exponentiation": [[619, null]], "Exporting": [[41, "exporting"]], "External Resources, Videos and Talks": [[1022, null]], "External Tutorials": [[1022, "external-tutorials"]], "External dependencies": [[1034, "external-dependencies"]], "ExtraTreeClassifier": [[917, null]], "ExtraTreeRegressor": [[918, null]], "ExtraTreesClassifier": [[558, null]], "ExtraTreesRegressor": [[559, null]], "Extract noisy patches and reconstruct them using the dictionary": [[124, "extract-noisy-patches-and-reconstruct-them-using-the-dictionary"]], "Extract reference patches": [[124, "extract-reference-patches"]], "Extracting features": [[364, "extracting-features"]], "Extremely Randomized Trees": [[414, "extremely-randomized-trees"]], "Face completion with a multi-output estimators": [[246, null]], "Faces dataset decompositions": [[121, null]], "Faces recognition example using eigenfaces and SVMs": [[46, null]], "Factor Analysis": [[412, "factor-analysis"]], "Factor Analysis (with rotation) to visualize patterns": [[131, null]], "Factor Analysis components - FA": [[121, "factor-analysis-components-fa"]], "FactorAnalysis": [[533, null]], "Failure of Machine Learning to infer causal effects": [[184, null]], "FastICA": [[534, null]], "FastICA on 2D point clouds": [[123, null]], "Faster parser in fetch_openml": [[322, "faster-parser-in-fetch-openml"]], "Feature Extraction Latency": [[362, "feature-extraction-latency"]], "Feature Extraction using TfidfVectorizer": [[351, "feature-extraction-using-tfidfvectorizer"]], "Feature Names Support": [[320, "feature-names-support"]], "Feature Selection": [[159, null], [182, "feature-selection"]], "Feature agglomeration": [[85, null], [1021, "feature-agglomeration"]], "Feature agglomeration vs. univariate selection": [[88, null]], "Feature binarization": [[1014, "feature-binarization"]], "Feature discretization": [[310, null]], "Feature extraction": [[415, null]], "Feature hashing": [[415, "feature-hashing"]], "Feature importance based on feature permutation": [[142, "feature-importance-based-on-feature-permutation"]], "Feature importance based on mean decrease in impurity": [[142, "feature-importance-based-on-mean-decrease-in-impurity"]], "Feature importance evaluation": [[414, "feature-importance-evaluation"]], "Feature importance from coefficients": [[165, "feature-importance-from-coefficients"]], "Feature importances with a forest of trees": [[142, null]], "Feature normalization": [[190, "feature-normalization"]], "Feature scaling": [[1021, null]], "Feature selection": [[416, null]], "Feature selection as part of a pipeline": [[416, "feature-selection-as-part-of-a-pipeline"]], "Feature selection using SelectFromModel": [[416, "feature-selection-using-selectfrommodel"]], "Feature selection with sparse data": [[416, null]], "Feature transformations with ensembles of trees": [[140, null]], "FeatureAgglomeration": [[407, null], [445, null]], "FeatureHasher": [[352, "featurehasher"], [584, null]], "FeatureHasher and DictVectorizer Comparison": [[352, null]], "FeatureUnion": [[866, null]], "FeatureUnion: composite feature spaces": [[408, "featureunion-composite-feature-spaces"]], "Features in Histogram Gradient Boosting Trees": [[150, null]], "Fedora": [[393, "fedora"]], "Final conclusion": [[169, "final-conclusion"]], "Final remarks": [[91, "final-remarks"]], "Finding the Nearest Neighbors": [[1007, "finding-the-nearest-neighbors"]], "First example": [[49, "first-example"]], "First experiment: fixed ground truth labels and growing number of clusters": [[73, "first-experiment-fixed-ground-truth-labels-and-growing-number-of-clusters"]], "Fit ICA and PCA models": [[122, "fit-ica-and-pca-models"]], "Fit by cubic polynomial": [[193, "fit-by-cubic-polynomial"]], "Fit models": [[205, "fit-models"], [287, "fit-models"]], "Fit models and plot results": [[91, "fit-models-and-plot-results"]], "Fit regression model": [[148, "fit-regression-model"], [300, "fit-regression-model"], [345, "fit-regression-model"], [356, "fit-regression-model"], [356, "id1"]], "Fit the model for outlier detection (default)": [[295, "fit-the-model-for-outlier-detection-default"]], "Fit the models": [[128, "fit-the-models"]], "Fit the regressors": [[192, "fit-the-regressors"], [192, "id2"]], "FitFailedWarning": [[577, null]], "Fitting": [[377, "fitting"]], "Fitting SpectralBiclustering": [[59, "fitting-spectralbiclustering"]], "Fitting a QuantileRegressor": [[212, "fitting-a-quantileregressor"]], "Fitting additional trees": [[414, "fitting-additional-trees"]], "Fitting additional weak-learners": [[414, "fitting-additional-weak-learners"]], "Fitting an Elastic Net with a precomputed Gram Matrix and Weighted Samples": [[194, null]], "Fitting an elliptic envelope": [[1010, "fitting-an-elliptic-envelope"]], "Fitting and calibration": [[64, "fitting-and-calibration"]], "Fitting and predicting: estimator basics": [[388, "fitting-and-predicting-estimator-basics"]], "Fitting non-linear quantile and least squares regressors": [[147, "fitting-non-linear-quantile-and-least-squares-regressors"]], "Fixed models": [[1047, "fixed-models"]], "FixedThresholdClassifier": [[802, null]], "FixedThresholdClassifier: Setting the decision threshold of a binary classifier": [[325, "fixedthresholdclassifier-setting-the-decision-threshold-of-a-binary-classifier"]], "Fixes": [[1034, "fixes"]], "Flexibility of IterativeImputer": [[994, "flexibility-of-iterativeimputer"]], "Folding and unfolding outdated diffs on pull requests": [[383, "folding-and-unfolding-outdated-diffs-on-pull-requests"]], "Forecasting of CO2 level on Mona Loa dataset using Gaussian process regression (GPR)": [[174, null]], "Forest covertypes": [[370, "forest-covertypes"]], "Forest covertypes dataset": [[247, "forest-covertypes-dataset"]], "Fowlkes-Mallows scores": [[407, "fowlkes-mallows-scores"]], "Free-threaded CPython 3.13 support": [[326, "free-threaded-cpython-3-13-support"], [1053, "free-threaded-cpython-3-13-support"]], "FreeBSD": [[373, "freebsd"]], "Frequency model \u2013 Poisson distribution": [[228, "frequency-model-poisson-distribution"]], "Frequently Asked Questions": [[387, null]], "From binary to multiclass and multilabel": [[1004, "from-binary-to-multiclass-and-multilabel"]], "From images": [[17, "module-sklearn.feature_extraction.image"]], "From text": [[17, "module-sklearn.feature_extraction.text"]], "Frozen Estimators": [[166, null], [182, "frozen-estimators"]], "FrozenEstimator": [[612, null]], "FrozenEstimator: Freezing an estimator": [[326, "frozenestimator-freezing-an-estimator"]], "Fruitful discussions": [[374, null]], "FunctionTransformer": [[871, null]], "Funding": [[0, "funding"]], "GMM Initialization Methods": [[256, null]], "GMM covariances": [[255, null]], "GPC examples": [[417, "gpc-examples"]], "Gallery examples": [[421, "gallery-examples"], [424, "gallery-examples"], [427, "gallery-examples"], [430, "gallery-examples"], [431, "gallery-examples"], [437, "gallery-examples"], [438, "gallery-examples"], [440, "gallery-examples"], [441, "gallery-examples"], [442, "gallery-examples"], [443, "gallery-examples"], [444, "gallery-examples"], [445, "gallery-examples"], [446, "gallery-examples"], [447, "gallery-examples"], [448, "gallery-examples"], [449, "gallery-examples"], [450, "gallery-examples"], [451, "gallery-examples"], [452, "gallery-examples"], [453, "gallery-examples"], [454, "gallery-examples"], [455, "gallery-examples"], [458, "gallery-examples"], [460, "gallery-examples"], [462, "gallery-examples"], [464, "gallery-examples"], [465, "gallery-examples"], [466, "gallery-examples"], [467, "gallery-examples"], [468, "gallery-examples"], [469, "gallery-examples"], [470, "gallery-examples"], [472, "gallery-examples"], [473, "gallery-examples"], [474, "gallery-examples"], [475, "gallery-examples"], [476, "gallery-examples"], [477, "gallery-examples"], [479, "gallery-examples"], [482, "gallery-examples"], [483, "gallery-examples"], [484, "gallery-examples"], [488, "gallery-examples"], [489, "gallery-examples"], [490, "gallery-examples"], [491, "gallery-examples"], [492, "gallery-examples"], [493, "gallery-examples"], [495, "gallery-examples"], [496, "gallery-examples"], [497, "gallery-examples"], [499, "gallery-examples"], [500, "gallery-examples"], [501, "gallery-examples"], [502, "gallery-examples"], [503, "gallery-examples"], [505, "gallery-examples"], [511, "gallery-examples"], [512, "gallery-examples"], [513, "gallery-examples"], [514, "gallery-examples"], [515, "gallery-examples"], [516, "gallery-examples"], [520, "gallery-examples"], [521, "gallery-examples"], [522, "gallery-examples"], [523, "gallery-examples"], [524, "gallery-examples"], [525, "gallery-examples"], [526, "gallery-examples"], [527, "gallery-examples"], [528, "gallery-examples"], [531, "gallery-examples"], [533, "gallery-examples"], [534, "gallery-examples"], [535, "gallery-examples"], [536, "gallery-examples"], [537, "gallery-examples"], [538, "gallery-examples"], [539, "gallery-examples"], [540, "gallery-examples"], [541, "gallery-examples"], [542, "gallery-examples"], [543, "gallery-examples"], [544, "gallery-examples"], [545, "gallery-examples"], [550, "gallery-examples"], [551, "gallery-examples"], [552, "gallery-examples"], [553, "gallery-examples"], [554, "gallery-examples"], [555, "gallery-examples"], [557, "gallery-examples"], [558, "gallery-examples"], [559, "gallery-examples"], [560, "gallery-examples"], [561, "gallery-examples"], [562, "gallery-examples"], [563, "gallery-examples"], [564, "gallery-examples"], [565, "gallery-examples"], [566, "gallery-examples"], [567, "gallery-examples"], [568, "gallery-examples"], [569, "gallery-examples"], [570, "gallery-examples"], [571, "gallery-examples"], [583, "gallery-examples"], [584, "gallery-examples"], [586, "gallery-examples"], [589, "gallery-examples"], [590, "gallery-examples"], [591, "gallery-examples"], [592, "gallery-examples"], [593, "gallery-examples"], [595, "gallery-examples"], [596, "gallery-examples"], [599, "gallery-examples"], [601, "gallery-examples"], [602, "gallery-examples"], [604, "gallery-examples"], [606, "gallery-examples"], [607, "gallery-examples"], [608, "gallery-examples"], [609, "gallery-examples"], [610, "gallery-examples"], [612, "gallery-examples"], [613, "gallery-examples"], [614, "gallery-examples"], [616, "gallery-examples"], [617, "gallery-examples"], [618, "gallery-examples"], [620, "gallery-examples"], [621, "gallery-examples"], [622, "gallery-examples"], [625, "gallery-examples"], [626, "gallery-examples"], [628, "gallery-examples"], [630, "gallery-examples"], [631, "gallery-examples"], [633, "gallery-examples"], [634, "gallery-examples"], [635, "gallery-examples"], [636, "gallery-examples"], [637, "gallery-examples"], [638, "gallery-examples"], [642, "gallery-examples"], [643, "gallery-examples"], [644, "gallery-examples"], [646, "gallery-examples"], [647, "gallery-examples"], [648, "gallery-examples"], [649, "gallery-examples"], [650, "gallery-examples"], [651, "gallery-examples"], [652, "gallery-examples"], [655, "gallery-examples"], [656, "gallery-examples"], [658, "gallery-examples"], [659, "gallery-examples"], [660, "gallery-examples"], [661, "gallery-examples"], [662, "gallery-examples"], [665, "gallery-examples"], [667, "gallery-examples"], [668, "gallery-examples"], [669, "gallery-examples"], [671, "gallery-examples"], [672, "gallery-examples"], [673, "gallery-examples"], [674, "gallery-examples"], [675, "gallery-examples"], [676, "gallery-examples"], [677, "gallery-examples"], [679, "gallery-examples"], [680, "gallery-examples"], [681, "gallery-examples"], [682, "gallery-examples"], [683, "gallery-examples"], [684, "gallery-examples"], [685, "gallery-examples"], [687, "gallery-examples"], [691, "gallery-examples"], [692, "gallery-examples"], [693, "gallery-examples"], [694, "gallery-examples"], [695, "gallery-examples"], [696, "gallery-examples"], [700, "gallery-examples"], [701, "gallery-examples"], [703, "gallery-examples"], [704, "gallery-examples"], [705, "gallery-examples"], [706, "gallery-examples"], [707, "gallery-examples"], [708, "gallery-examples"], [709, "gallery-examples"], [710, "gallery-examples"], [712, "gallery-examples"], [715, "gallery-examples"], [716, "gallery-examples"], [720, "gallery-examples"], [721, "gallery-examples"], [722, "gallery-examples"], [730, "gallery-examples"], [732, "gallery-examples"], [735, "gallery-examples"], [737, "gallery-examples"], [738, "gallery-examples"], [740, "gallery-examples"], [741, "gallery-examples"], [744, "gallery-examples"], [745, "gallery-examples"], [748, "gallery-examples"], [749, "gallery-examples"], [751, "gallery-examples"], [752, "gallery-examples"], [753, "gallery-examples"], [755, "gallery-examples"], [756, "gallery-examples"], [758, "gallery-examples"], [760, "gallery-examples"], [764, "gallery-examples"], [781, "gallery-examples"], [782, "gallery-examples"], [785, "gallery-examples"], [787, "gallery-examples"], [788, "gallery-examples"], [789, "gallery-examples"], [790, "gallery-examples"], [791, "gallery-examples"], [792, "gallery-examples"], [793, "gallery-examples"], [795, "gallery-examples"], [796, "gallery-examples"], [798, "gallery-examples"], [800, "gallery-examples"], [801, "gallery-examples"], [802, "gallery-examples"], [803, "gallery-examples"], [804, "gallery-examples"], [805, "gallery-examples"], [806, "gallery-examples"], [807, "gallery-examples"], [808, "gallery-examples"], [809, "gallery-examples"], [817, "gallery-examples"], [818, "gallery-examples"], [819, "gallery-examples"], [820, "gallery-examples"], [821, "gallery-examples"], [822, "gallery-examples"], [823, "gallery-examples"], [824, "gallery-examples"], [825, "gallery-examples"], [826, "gallery-examples"], [828, "gallery-examples"], [829, "gallery-examples"], [830, "gallery-examples"], [831, "gallery-examples"], [832, "gallery-examples"], [833, "gallery-examples"], [834, "gallery-examples"], [835, "gallery-examples"], [836, "gallery-examples"], [837, "gallery-examples"], [838, "gallery-examples"], [840, "gallery-examples"], [842, "gallery-examples"], [844, "gallery-examples"], [845, "gallery-examples"], [846, "gallery-examples"], [849, "gallery-examples"], [850, "gallery-examples"], [851, "gallery-examples"], [852, "gallery-examples"], [853, "gallery-examples"], [854, "gallery-examples"], [855, "gallery-examples"], [856, "gallery-examples"], [860, "gallery-examples"], [863, "gallery-examples"], [864, "gallery-examples"], [865, "gallery-examples"], [866, "gallery-examples"], [867, "gallery-examples"], [868, "gallery-examples"], [871, "gallery-examples"], [872, "gallery-examples"], [874, "gallery-examples"], [876, "gallery-examples"], [877, "gallery-examples"], [879, "gallery-examples"], [880, "gallery-examples"], [881, "gallery-examples"], [882, "gallery-examples"], [883, "gallery-examples"], [884, "gallery-examples"], [885, "gallery-examples"], [886, "gallery-examples"], [887, "gallery-examples"], [888, "gallery-examples"], [891, "gallery-examples"], [893, "gallery-examples"], [896, "gallery-examples"], [900, "gallery-examples"], [901, "gallery-examples"], [903, "gallery-examples"], [904, "gallery-examples"], [905, "gallery-examples"], [907, "gallery-examples"], [910, "gallery-examples"], [911, "gallery-examples"], [912, "gallery-examples"], [913, "gallery-examples"], [914, "gallery-examples"], [915, "gallery-examples"], [916, "gallery-examples"], [921, "gallery-examples"], [922, "gallery-examples"], [926, "gallery-examples"], [934, "gallery-examples"], [936, "gallery-examples"], [944, "gallery-examples"], [946, "gallery-examples"], [948, "gallery-examples"], [955, "gallery-examples"], [960, "gallery-examples"], [961, "gallery-examples"], [962, "gallery-examples"], [963, "gallery-examples"], [964, "gallery-examples"], [977, "gallery-examples"], [987, "gallery-examples"], [992, "gallery-examples"]], "Gamma loss for gradient boosting": [[323, "gamma-loss-for-gradient-boosting"]], "GammaRegressor": [[651, null]], "Gaussian Mixture": [[1003, "gaussian-mixture"]], "Gaussian Mixture Model Ellipsoids": [[254, null]], "Gaussian Mixture Model Selection": [[258, null]], "Gaussian Mixture Model Sine Curve": [[259, null]], "Gaussian Mixture Models": [[182, "gaussian-mixture-models"], [252, null]], "Gaussian Naive Bayes": [[63, "gaussian-naive-bayes"], [1006, "gaussian-naive-bayes"]], "Gaussian Naive-Bayes": [[62, "gaussian-naive-bayes"]], "Gaussian Process Classification (GPC)": [[417, "gaussian-process-classification-gpc"]], "Gaussian Process Regression (GPR)": [[417, "gaussian-process-regression-gpr"]], "Gaussian Process for Machine Learning": [[168, null], [182, "gaussian-process-for-machine-learning"]], "Gaussian Processes": [[417, null]], "Gaussian Processes regression: basic introductory example": [[176, null]], "Gaussian mixture models": [[1003, null]], "Gaussian process classification (GPC) on iris dataset": [[171, null], [417, "gaussian-process-classification-gpc-on-iris-dataset"]], "Gaussian process regression": [[169, "gaussian-process-regression"]], "Gaussian processes on discrete data structures": [[177, null]], "Gaussian random projection": [[1016, "gaussian-random-projection"]], "GaussianMixture": [[801, null]], "GaussianNB": [[845, null]], "GaussianProcessClassifier": [[613, null]], "GaussianProcessRegressor": [[614, null]], "GaussianRandomProjection": [[899, null]], "General Concepts": [[389, "general-concepts"]], "General recommendations": [[358, "general-recommendations"]], "Generalized Linear Models": [[182, "generalized-linear-models"], [191, null], [1000, "generalized-linear-models"]], "Generalized Linear Models, and Poisson loss for gradient boosting": [[318, "generalized-linear-models-and-poisson-loss-for-gradient-boosting"]], "Generalized linear models (GLM) for regression": [[26, "generalized-linear-models-glm-for-regression"]], "Generate data": [[82, "generate-data"], [101, "generate-data"], [112, "generate-data"], [205, "generate-data"], [306, "generate-data"]], "Generate data with outliers": [[295, "generate-data-with-outliers"]], "Generate distorted image": [[124, "generate-distorted-image"]], "Generate sample data": [[59, "generate-sample-data"], [74, "generate-sample-data"], [89, "generate-sample-data"], [97, "generate-sample-data"], [110, "generate-sample-data"], [122, "generate-sample-data"], [123, "generate-sample-data"], [161, "generate-sample-data"], [243, "generate-sample-data"], [281, "generate-sample-data"], [300, "generate-sample-data"], [345, "generate-sample-data"]], "Generate sinusoidal data with noise": [[193, "generate-sinusoidal-data-with-noise"]], "Generate synthetic data": [[265, "generate-synthetic-data"]], "Generate synthetic dataset": [[62, "generate-synthetic-dataset"], [192, "generate-synthetic-dataset"], [192, "id1"], [196, "generate-synthetic-dataset"]], "Generate the data": [[98, "generate-the-data"], [100, "generate-the-data"], [114, "generate-the-data"]], "Generated datasets": [[371, null]], "Generated documentation on GitHub Actions": [[375, "generated-documentation-on-github-actions"]], "Generating Polars-engineered lagged features": [[53, "generating-polars-engineered-lagged-features"]], "Generating a dataset": [[169, "generating-a-dataset"]], "Generating polynomial features": [[1014, "generating-polynomial-features"]], "Generators for classification and clustering": [[371, "generators-for-classification-and-clustering"]], "Generators for decomposition": [[371, "generators-for-decomposition"]], "Generators for manifold learning": [[371, "generators-for-manifold-learning"]], "Generators for regression": [[371, "generators-for-regression"]], "Generic dictionary learning": [[412, "generic-dictionary-learning"]], "GenericUnivariateSelect": [[594, null]], "Getting Started": [[388, null]], "Getting reproducible results across multiple executions": [[358, "getting-reproducible-results-across-multiple-executions"]], "Gitter": [[1027, "gitter"]], "Glossary of Common Terms and API Elements": [[389, null]], "Good practices": [[380, "good-practices"]], "Governance": [[0, "governance"]], "Governance Model Changes": [[390, "governance-model-changes"]], "Gradient Boosting": [[44, "gradient-boosting"]], "Gradient Boosting Out-of-Bag estimates": [[146, null]], "Gradient Boosting Regression Trees for Poisson regression": [[210, "gradient-boosting-regression-trees-for-poisson-regression"]], "Gradient Boosting regression": [[148, null]], "Gradient Boosting regularization": [[149, null]], "Gradient boosting": [[186, "gradient-boosting"]], "Gradient boosting estimator with dropped categorical features": [[144, "gradient-boosting-estimator-with-dropped-categorical-features"]], "Gradient boosting estimator with native categorical support": [[144, "gradient-boosting-estimator-with-native-categorical-support"]], "Gradient boosting estimator with one-hot encoding": [[144, "gradient-boosting-estimator-with-one-hot-encoding"]], "Gradient boosting estimator with ordinal encoding": [[144, "gradient-boosting-estimator-with-ordinal-encoding"]], "Gradient-boosted trees": [[414, "gradient-boosted-trees"]], "GradientBoostingClassifier": [[560, null]], "GradientBoostingClassifier and GradientBoostingRegressor": [[414, "gradientboostingclassifier-and-gradientboostingregressor"]], "GradientBoostingClassifier vs HistGradientBoostingClassifier": [[414, null]], "GradientBoostingRegressor": [[561, null]], "Graph Routines": [[384, "graph-routines"]], "Graphical model and parametrization": [[1009, "graphical-model-and-parametrization"]], "GraphicalLasso": [[471, null]], "GraphicalLassoCV": [[472, null]], "GridSearchCV": [[803, null]], "Group Shuffle Split": [[411, "group-shuffle-split"]], "Group k-fold": [[411, "group-k-fold"]], "GroupKFold": [[804, null]], "GroupShuffleSplit": [[805, null]], "Grouping infrequent categories in OneHotEncoder": [[321, "grouping-infrequent-categories-in-onehotencoder"]], "Grouping infrequent categories in OrdinalEncoder": [[323, "grouping-infrequent-categories-in-ordinalencoder"]], "HDBSCAN": [[407, "hdbscan"], [446, null]], "HDBSCAN: hierarchical density-based clustering": [[323, "hdbscan-hierarchical-density-based-clustering"]], "HalvingGridSearchCV": [[806, null]], "HalvingRandomSearchCV": [[807, null]], "Hamming loss": [[1004, "hamming-loss"]], "Handling Multicollinear Features": [[188, "handling-multicollinear-features"]], "Hash Functions": [[384, "hash-functions"]], "Hashing feature transformation using Totally Random Trees": [[153, null]], "HashingVectorizer": [[351, "hashingvectorizer"], [591, null]], "Helper Functions": [[384, "helper-functions"]], "Helper function": [[178, "helper-function"]], "Helper function to plot embedding": [[231, "helper-function-to-plot-embedding"]], "Hessian Eigenmapping": [[1001, "hessian-eigenmapping"]], "Hierarchical Clustering": [[407, "id11"]], "Hierarchical clustering": [[407, "hierarchical-clustering"]], "Hierarchical clustering: structured vs unstructured ward": [[101, null]], "Higher-level parallelism with joblib": [[363, "higher-level-parallelism-with-joblib"]], "Highlights": [[1034, "highlights"], [1037, "highlights"], [1038, "highlights"], [1041, "highlights"], [1042, "highlights"]], "Hinge loss": [[1004, "hinge-loss"]], "HistGradientBoosting Natively Supports Categorical DTypes in DataFrames": [[324, "histgradientboosting-natively-supports-categorical-dtypes-in-dataframes"]], "HistGradientBoostingClassifier": [[562, null]], "HistGradientBoostingRegressor": [[563, null]], "Histogram-Based Gradient Boosting": [[414, "histogram-based-gradient-boosting"]], "Histogram-based Gradient Boosting Models are now stable": [[320, "histogram-based-gradient-boosting-models-are-now-stable"]], "History": [[0, "history"]], "Homogeneity, completeness and V-measure": [[407, "homogeneity-completeness-and-v-measure"]], "How can I contribute to scikit-learn?": [[387, "how-can-i-contribute-to-scikit-learn"]], "How can I create a bunch object?": [[387, "how-can-i-create-a-bunch-object"]], "How can I load my own datasets into a format usable by scikit-learn?": [[387, "how-can-i-load-my-own-datasets-into-a-format-usable-by-scikit-learn"]], "How can I obtain permission to use the images in scikit-learn for my work?": [[387, "how-can-i-obtain-permission-to-use-the-images-in-scikit-learn-for-my-work"]], "How do I deal with string data (or trees, graphs\u2026)?": [[387, "how-do-i-deal-with-string-data-or-trees-graphs"]], "How do I set a random_state for an entire execution?": [[387, "how-do-i-set-a-random-state-for-an-entire-execution"]], "How do you pronounce the project name?": [[387, "how-do-you-pronounce-the-project-name"]], "How should I save, export or deploy estimators for production?": [[387, "how-should-i-save-export-or-deploy-estimators-for-production"]], "How to avoid data leakage": [[358, "how-to-avoid-data-leakage"]], "How to contribute": [[375, "how-to-contribute"]], "How to make a good bug report": [[375, "how-to-make-a-good-bug-report"]], "How to optimize for speed": [[381, null]], "HowAboutWe": [[1028, "id16"]], "Huber Regression": [[1000, "huber-regression"]], "HuberRegressor": [[652, null]], "HuberRegressor vs Ridge on dataset with strong outliers": [[195, null]], "Hugging Face": [[1028, "id5"]], "Hyper-parameter optimizers": [[30, "hyper-parameter-optimizers"]], "Hyperparameter": [[620, null]], "Hyperparameter Robustness": [[89, "hyperparameter-robustness"]], "Hyperplanes Visualization": [[203, "hyperplanes-visualization"]], "ICE vs. PDP": [[186, "ice-vs-pdp"]], "INFONEA": [[1028, "id24"]], "Illustration of GPC on the XOR dataset": [[417, "illustration-of-gpc-on-the-xor-dataset"]], "Illustration of Gaussian process classification (GPC) on the XOR dataset": [[173, null]], "Illustration of Pipeline and GridSearchCV": [[105, "illustration-of-pipeline-and-gridsearchcv"]], "Illustration of prior and posterior Gaussian process for different kernels": [[178, null]], "Image denoising using dictionary learning": [[124, null]], "Image denoising using kernel PCA": [[45, null]], "Image feature extraction": [[415, "image-feature-extraction"]], "Implementation": [[1007, "implementation"]], "Implementation decisions": [[387, "implementation-decisions"]], "Implementation details": [[1018, "implementation-details"], [1019, "implementation-details"]], "Importance of Feature Scaling": [[313, null]], "Important notes regarding the internal cross-validation": [[406, "important-notes-regarding-the-internal-cross-validation"]], "Improved efficiency of many estimators": [[322, "improved-efficiency-of-many-estimators"]], "Improved memory and runtime efficiency for PCA on sparse data": [[324, "improved-memory-and-runtime-efficiency-for-pca-on-sparse-data"]], "Improved performances of HistGradientBoosting estimators": [[319, "improved-performances-of-histgradientboosting-estimators"]], "Improvements to the developer API for third party libraries": [[326, "improvements-to-the-developer-api-for-third-party-libraries"]], "Improvements to the histogram-based Gradient Boosting estimators": [[318, "improvements-to-the-histogram-based-gradient-boosting-estimators"]], "Imputation of missing values": [[994, null], [1014, "imputation-of-missing-values"]], "Impute missing values with mean": [[181, "impute-missing-values-with-mean"]], "Impute the missing data and score": [[181, "impute-the-missing-data-and-score"]], "Imputing missing values before building an estimator": [[181, null]], "Imputing missing values with variants of IterativeImputer": [[180, null]], "In binary classification settings": [[275, "in-binary-classification-settings"]], "In multi-label settings": [[275, "in-multi-label-settings"]], "Income prediction with fully observed variables": [[184, "income-prediction-with-fully-observed-variables"]], "Income prediction with partial observations": [[184, "income-prediction-with-partial-observations"]], "Inconsistent preprocessing": [[358, "inconsistent-preprocessing"]], "InconsistentVersionWarning": [[578, null]], "Incremental PCA": [[125, null], [412, "incremental-pca"]], "Incremental learning": [[364, "incremental-learning"]], "IncrementalPCA": [[535, null]], "Independent component analysis (ICA)": [[412, "independent-component-analysis-ica"]], "Independent components - FastICA": [[121, "independent-components-fastica"]], "Individual Conditional Expectation plots": [[319, "individual-conditional-expectation-plots"]], "Individual conditional expectation (ICE) plot": [[1011, "individual-conditional-expectation-ice-plot"]], "Inductive Clustering": [[90, null]], "Influence of the Input Data Representation": [[362, "influence-of-the-input-data-representation"]], "Influence of the Model Complexity": [[362, "influence-of-the-model-complexity"]], "Influence of the Number of Features": [[362, "influence-of-the-number-of-features"]], "Information Criterion": [[993, "information-criterion"]], "Information-criteria based model selection": [[1000, "information-criteria-based-model-selection"]], "Infrastructure support": [[0, "infrastructure-support"]], "Infrequent categories": [[1014, "infrequent-categories"]], "Input and parameter validation": [[42, "module-sklearn.utils.validation"]], "Input data": [[407, null]], "Input validation": [[377, "input-validation"]], "InputTags": [[924, null]], "Inria": [[1028, "id3"]], "Inspection": [[182, "inspection"], [183, null], [392, null]], "Installing nightly builds": [[373, "installing-nightly-builds"]], "Installing scikit-learn": [[393, null]], "Installing the development version of scikit-learn": [[373, null]], "Installing the latest release": [[393, "installing-the-latest-release"]], "Instantiation": [[377, "instantiation"]], "Intel Extension for Scikit-learn": [[393, "intel-extension-for-scikit-learn"]], "Interaction constraints": [[414, "interaction-constraints"]], "Interaction constraints in Histogram-based Gradient Boosting Trees": [[322, "interaction-constraints-in-histogram-based-gradient-boosting-trees"]], "Interoperability and framework enhancements": [[1023, "interoperability-and-framework-enhancements"]], "Interpretation of kernel hyperparameters": [[174, "interpretation-of-kernel-hyperparameters"]], "Interpretation with feature importance": [[414, "interpretation-with-feature-importance"]], "Interpreting coefficients: being cautious about causality": [[185, "interpreting-coefficients-being-cautious-about-causality"]], "Interpreting coefficients: scale matters": [[185, "interpreting-coefficients-scale-matters"]], "Interpreting the plots": [[214, "interpreting-the-plots"]], "Introducing the set_output API": [[251, null]], "Introduction": [[1001, "introduction"]], "Invariance with respect to prevalence": [[271, "invariance-with-respect-to-prevalence"]], "Inverse Transform": [[1016, "inverse-transform"]], "Iris plants dataset": [[372, "iris-plants-dataset"]], "Iso-probability lines for Gaussian Processes classification (GPC)": [[172, null]], "Isolation Forest": [[1010, "isolation-forest"]], "IsolationForest": [[564, null]], "IsolationForest example": [[151, null]], "Isomap": [[691, null], [1001, "isomap"]], "Isomap Embedding": [[230, "isomap-embedding"]], "Isotonic": [[405, "isotonic"]], "Isotonic Regression": [[240, null]], "Isotonic regression": [[995, null]], "IsotonicRegression": [[638, null]], "Issue Tracker Tags": [[375, "issue-tracker-tags"]], "Issues for New Contributors": [[375, "issues-for-new-contributors"]], "Iterative imputation of the missing values": [[181, "iterative-imputation-of-the-missing-values"]], "IterativeImputer": [[630, null]], "J.P.Morgan": [[1028, "id1"]], "Jaccard similarity coefficient score": [[1004, "jaccard-similarity-coefficient-score"]], "Joint feature selection with multi-task Lasso": [[205, null]], "K-D Tree": [[1007, "k-d-tree"]], "K-bins discretization": [[1014, "k-bins-discretization"]], "K-fold": [[411, "k-fold"]], "K-means": [[407, "k-means"]], "K-means clustering on text features": [[351, "k-means-clustering-on-text-features"]], "K-nearest neighbors classifier": [[291, "k-nearest-neighbors-classifier"]], "KBinsDiscretizer": [[872, null]], "KDDCup99 - SA dataset": [[247, "kddcup99-sa-dataset"]], "KDTree": [[848, null]], "KDTree and BallTree Classes": [[1007, "kdtree-and-balltree-classes"]], "KFold": [[808, null]], "KMeans": [[447, null]], "KNN Based Imputation": [[317, "knn-based-imputation"]], "KNNImputer": [[631, null]], "KNeighborsClassifier": [[849, null]], "KNeighborsRegressor": [[850, null]], "KNeighborsTransformer": [[851, null]], "Kddcup 99 dataset": [[370, "kddcup-99-dataset"]], "Keeping the number of features constant": [[994, "keeping-the-number-of-features-constant"]], "Kernel": [[621, null]], "Kernel Approximation": [[182, "kernel-approximation"], [189, null], [996, null]], "Kernel Density Estimate of Species Distributions": [[301, null]], "Kernel Density Estimation": [[292, null], [413, "kernel-density-estimation"]], "Kernel PCA": [[126, null]], "Kernel Principal Component Analysis (kPCA)": [[412, "kernel-principal-component-analysis-kpca"]], "Kernel cookbook": [[178, "kernel-cookbook"]], "Kernel functions": [[1019, "kernel-functions"]], "Kernel methods: kernel ridge and Gaussian process": [[169, "kernel-methods-kernel-ridge-and-gaussian-process"]], "Kernel operators": [[417, "kernel-operators"]], "Kernel ridge": [[169, "kernel-ridge"]], "Kernel ridge regression": [[997, null]], "KernelCenterer": [[873, null]], "KernelDensity": [[852, null]], "KernelPCA": [[536, null]], "KernelRidge": [[646, null]], "Kernels": [[20, "module-sklearn.gaussian_process.kernels"]], "Kernels for Gaussian Processes": [[417, "kernels-for-gaussian-processes"]], "Keyword and positional arguments": [[320, "keyword-and-positional-arguments"]], "Known Major Bugs": [[1042, "known-major-bugs"], [1043, "known-major-bugs"]], "L1 Penalty and Sparsity in Logistic Regression": [[202, null]], "L1-based feature selection": [[416, "l1-based-feature-selection"]], "L1-based models for Sparse Signals": [[196, null]], "L1-penalty case": [[346, "l1-penalty-case"]], "L2-penalty case": [[346, "l2-penalty-case"]], "LARS Lasso": [[1000, "lars-lasso"]], "LDA": [[998, "lda"]], "Label Propagation": [[1017, "label-propagation"]], "Label Propagation digits active learning": [[329, null]], "Label Propagation digits: Demonstrating performance": [[328, null]], "Label Propagation learning a complex structure": [[330, null]], "Label binarization": [[1015, "label-binarization"]], "Label encoding": [[1015, "label-encoding"]], "Label ranking average precision": [[1004, "label-ranking-average-precision"]], "LabelBinarizer": [[874, null], [1015, "labelbinarizer"]], "LabelEncoder": [[875, null]], "LabelPropagation": [[902, null]], "LabelSpreading": [[903, null]], "Lagged features for time series forecasting": [[53, null]], "Laplacian kernel": [[1002, "laplacian-kernel"]], "Lars": [[653, null]], "LarsCV": [[654, null]], "Lasso": [[196, "lasso"], [655, null], [1000, "lasso"]], "Lasso model selection via information criteria": [[198, null]], "Lasso model selection: AIC-BIC / cross-validation": [[200, null]], "Lasso on dense and sparse data": [[197, null]], "Lasso via coordinate descent": [[200, "lasso-via-coordinate-descent"]], "Lasso via least angle regression": [[200, "lasso-via-least-angle-regression"]], "Lasso, Lasso-LARS, and Elastic Net paths": [[199, null]], "LassoCV": [[656, null]], "LassoLars": [[657, null]], "LassoLarsCV": [[658, null]], "LassoLarsIC": [[659, null]], "Latent Dirichlet Allocation (LDA)": [[412, "latent-dirichlet-allocation-lda"]], "LatentDirichletAllocation": [[537, null]], "Learn the PCA basis": [[45, "learn-the-pca-basis"]], "Learn the dictionary from reference patches": [[124, "learn-the-dictionary-from-reference-patches"]], "Learn the dictionary of images": [[84, "learn-the-dictionary-of-images"]], "Learning Curve": [[270, "learning-curve"]], "Learning Git": [[375, null]], "Learning a graph structure": [[52, "learning-a-graph-structure"]], "Learning an embedding": [[298, "learning-an-embedding"]], "Learning curve": [[999, "learning-curve"]], "LearningCurveDisplay": [[809, null]], "Least Angle Regression": [[1000, "least-angle-regression"]], "Leave One Group Out": [[411, "leave-one-group-out"]], "Leave One Out (LOO)": [[411, "leave-one-out-loo"]], "Leave P Groups Out": [[411, "leave-p-groups-out"]], "Leave P Out (LPO)": [[411, "leave-p-out-lpo"]], "LeaveOneGroupOut": [[810, null]], "LeaveOneOut": [[811, null]], "LeavePGroupsOut": [[812, null]], "LeavePOut": [[813, null]], "Ledoit-Wolf shrinkage": [[409, "ledoit-wolf-shrinkage"]], "Ledoit-Wolf vs OAS estimation": [[111, null]], "LedoitWolf": [[473, null]], "Lessons learned": [[184, "lessons-learned"], [185, "lessons-learned"]], "Limitations of a simple linear model": [[169, "limitations-of-a-simple-linear-model"]], "Limitations of the Bag of Words representation": [[415, "limitations-of-the-bag-of-words-representation"]], "Limiting Working Memory": [[362, "limiting-working-memory"]], "Limiting the number of splits": [[144, "limiting-the-number-of-splits"]], "Linear Models": [[1000, null]], "Linear algebra libraries": [[362, "linear-algebra-libraries"]], "Linear and Quadratic Discriminant Analysis": [[998, null]], "Linear and Quadratic Discriminant Analysis with covariance ellipsoid": [[71, null]], "Linear classifiers": [[26, "linear-classifiers"]], "Linear kernel": [[343, "linear-kernel"], [1002, "linear-kernel"]], "Linear models with regularization": [[185, "linear-models-with-regularization"]], "Linear models with sparse coefficients": [[185, "linear-models-with-sparse-coefficients"]], "Linear regression model": [[207, "linear-regression-model"]], "Linear support vector classifier": [[63, "linear-support-vector-classifier"]], "LinearDiscriminantAnalysis": [[550, null]], "LinearRegression": [[660, null]], "LinearSVC": [[907, null]], "LinearSVR": [[908, null]], "Link to R\u00b2 score, the coefficient of determination": [[1004, null]], "Links": [[362, "links"]], "Linnerrud dataset": [[372, "linnerrud-dataset"]], "Linux": [[373, "linux"]], "Linux compilers from conda-forge": [[373, "linux-compilers-from-conda-forge"]], "Linux compilers from the system": [[373, "linux-compilers-from-the-system"]], "Load Ames Housing dataset": [[144, "load-ames-housing-dataset"]], "Load Data": [[352, "load-data"]], "Load Data and Train a SVC": [[250, "load-data-and-train-a-svc"]], "Load Data and train model": [[238, "load-data-and-train-model"]], "Load and prepare data": [[277, "load-and-prepare-data"], [278, "load-and-prepare-data"], [313, "load-and-prepare-data"]], "Load and prepare data set": [[339, "load-and-prepare-data-set"]], "Load data": [[204, "load-data"]], "Load dataset": [[141, "load-dataset"]], "Load digits dataset": [[231, "load-digits-dataset"]], "Load some data to play with": [[342, "load-some-data-to-play-with"]], "Load the data": [[47, "load-the-data"], [84, "load-the-data"], [148, "load-the-data"], [291, "load-the-data"]], "Load the dataset": [[92, "load-the-dataset"]], "Load the dataset via OpenML": [[45, "load-the-dataset-via-openml"]], "Loaders": [[10, "loaders"]], "Loading Data from OpenML": [[314, "loading-data-from-openml"]], "Loading a dataset": [[287, "loading-a-dataset"]], "Loading and vectorizing the 20 newsgroups text dataset": [[350, "loading-and-vectorizing-the-20-newsgroups-text-dataset"]], "Loading datasets, basic feature extraction and target definitions": [[228, "loading-datasets-basic-feature-extraction-and-target-definitions"]], "Loading features from dicts": [[415, "loading-features-from-dicts"]], "Loading from external datasets": [[369, "loading-from-external-datasets"]], "Loading other datasets": [[369, null]], "Loading text data": [[351, "loading-text-data"]], "Loading the Iris dataset": [[127, "loading-the-iris-dataset"]], "Loading the data": [[165, "loading-the-data"]], "Loading the redirect files": [[56, "loading-the-redirect-files"]], "Local Outlier Factor": [[1010, "local-outlier-factor"]], "Local Tangent Space Alignment": [[1001, "local-tangent-space-alignment"]], "LocalOutlierFactor": [[853, null]], "Locally Linear Embedding": [[1001, "locally-linear-embedding"]], "Locally Linear Embeddings": [[230, "locally-linear-embeddings"]], "LocallyLinearEmbedding": [[692, null]], "Log loss": [[1004, "log-loss"]], "Logistic function": [[201, null]], "Logistic regression": [[1000, "logistic-regression"]], "LogisticRegression": [[661, null]], "LogisticRegression wrapped by OneVsRestClassifier": [[287, "logisticregression-wrapped-by-onevsrestclassifier"]], "LogisticRegressionCV": [[662, null]], "Look at the results": [[243, "look-at-the-results"], [345, "look-at-the-results"]], "Loss Functions": [[414, "loss-functions"]], "Lovely": [[1028, "id20"]], "Low-level parallelism": [[407, "low-level-parallelism"], [414, "low-level-parallelism"]], "Lower-level parallelism with OpenMP": [[363, "lower-level-parallelism-with-openmp"]], "MARS": [[1028, "id28"]], "MDS": [[693, null]], "MLPClassifier": [[864, null]], "MLPRegressor": [[865, null]], "MNIST classification using multinomial logistic + L1": [[226, null]], "MacPorts for Mac OSX": [[393, "macports-for-mac-osx"]], "Machinalis": [[1028, "id22"]], "Mailing Lists": [[1027, "mailing-lists"]], "Main": [[48, "main"]], "Main takeaways": [[210, "main-takeaways"]], "Maintainer Information": [[379, null]], "Maintainers Team": [[0, "maintainers-team"]], "Maintaining backwards compatibility": [[375, "maintaining-backwards-compatibility"]], "Majority Class Labels (Majority/Hard Voting)": [[414, "majority-class-labels-majority-hard-voting"]], "Make pipeline to preprocess the data": [[155, "make-pipeline-to-preprocess-the-data"]], "Making predictions": [[158, "making-predictions"]], "Manifold Learning methods on a severed sphere": [[232, null]], "Manifold learning": [[182, "manifold-learning"], [229, null], [1001, null]], "Manifold learning on handwritten digits: Locally Linear Embedding, Isomap\u2026": [[231, null]], "Manually setting the decision threshold": [[406, "manually-setting-the-decision-threshold"]], "Manually setting the decision threshold instead of tuning it": [[262, "manually-setting-the-decision-threshold-instead-of-tuning-it"]], "Map data to a normal distribution": [[312, null]], "Mapping to a Gaussian distribution": [[1014, "mapping-to-a-gaussian-distribution"]], "Mapping to a Uniform distribution": [[1014, "mapping-to-a-uniform-distribution"]], "Marking imputed values": [[994, "marking-imputed-values"]], "Matern": [[622, null]], "Mathematical Definition": [[1011, "mathematical-definition"]], "Mathematical Details": [[996, "mathematical-details"]], "Mathematical formulation": [[404, "mathematical-formulation"], [404, "id3"], [414, "mathematical-formulation"], [1007, "mathematical-formulation"], [1018, "mathematical-formulation"], [1019, "mathematical-formulation"], [1020, "mathematical-formulation"]], "Mathematical formulation of LDA dimensionality reduction": [[998, "mathematical-formulation-of-lda-dimensionality-reduction"]], "Mathematical formulation of the LDA and QDA classifiers": [[998, "mathematical-formulation-of-the-lda-and-qda-classifiers"]], "Matthews correlation coefficient": [[1004, "matthews-correlation-coefficient"]], "Mat\u00e9rn kernel": [[178, "matern-kernel"], [417, "matern-kernel"]], "Max error": [[1004, "max-error"]], "MaxAbsScaler": [[308, "maxabsscaler"], [876, null]], "Mean Poisson, Gamma, and Tweedie deviances": [[1004, "mean-poisson-gamma-and-tweedie-deviances"]], "Mean Shift": [[407, "mean-shift"]], "Mean absolute error": [[1004, "mean-absolute-error"]], "Mean absolute percentage error": [[1004, "mean-absolute-percentage-error"]], "Mean squared error": [[1004, "mean-squared-error"]], "Mean squared logarithmic error": [[1004, "mean-squared-logarithmic-error"]], "MeanShift": [[448, null]], "Measure and plot the results": [[155, "measure-and-plot-the-results"]], "Median absolute error": [[1004, "median-absolute-error"]], "Memory footprint": [[87, "memory-footprint"]], "Memory usage profiling": [[381, "memory-usage-profiling"]], "Merging Pull Requests": [[379, "merging-pull-requests"]], "Meta-estimators": [[42, "module-sklearn.utils.metaestimators"], [403, "meta-estimators"]], "MetaEstimatorMixin": [[427, null]], "Metadata Routing": [[244, null], [323, "metadata-routing"], [389, "metadata-routing"], [398, null], [1051, "metadata-routing"], [1051, "id2"], [1052, "metadata-routing"]], "Metadata Routing Support": [[324, "metadata-routing-support"]], "Metadata Routing Support Status": [[398, "metadata-routing-support-status"]], "Metadata routing": [[42, "module-sklearn.utils.metadata_routing"], [1053, "metadata-routing"]], "MetadataRequest": [[959, null]], "MetadataRouter": [[960, null]], "MethodMapping": [[961, null]], "Methods": [[389, "methods"]], "Metrics": [[403, "metrics"]], "Metrics and scoring: quantifying the quality of predictions": [[1004, null]], "MinCovDet": [[474, null]], "MinMaxScaler": [[308, "minmaxscaler"], [877, null]], "Mini Batch K-Means": [[407, "mini-batch-k-means"]], "Mini-batch Non Negative Matrix Factorization": [[412, "mini-batch-non-negative-matrix-factorization"]], "Mini-batch dictionary learning": [[412, "mini-batch-dictionary-learning"]], "MiniBatchDictionaryLearning": [[538, null]], "MiniBatchKMeans": [[449, null]], "MiniBatchNMF": [[539, null]], "MiniBatchNMF: an online version of NMF": [[321, "minibatchnmf-an-online-version-of-nmf"]], "MiniBatchSparsePCA": [[540, null]], "Minimal Cost-Complexity Pruning": [[1020, "minimal-cost-complexity-pruning"]], "Minimal dependencies": [[1047, "minimal-dependencies"], [1048, "minimal-dependencies"]], "Minimum Covariance Determinant": [[409, "minimum-covariance-determinant"]], "Minimum Covariance Determinant Estimator": [[113, "minimum-covariance-determinant-estimator"]], "Misc": [[1034, "misc"]], "Miscellaneous": [[26, "miscellaneous"], [182, "miscellaneous"], [236, null], [1042, "miscellaneous"], [1042, "id40"], [1043, "miscellaneous"], [1044, "miscellaneous"], [1045, "miscellaneous"], [1045, "id13"], [1046, "miscellaneous"], [1047, "miscellaneous"], [1050, "miscellaneous"]], "Misleading values on strongly correlated features": [[1012, "misleading-values-on-strongly-correlated-features"]], "Missing Value Imputation": [[179, null], [182, "missing-value-imputation"]], "Missing Values Support": [[1020, "missing-values-support"]], "Missing information": [[181, "missing-information"]], "Missing value support for Extra Trees": [[326, "missing-value-support-for-extra-trees"]], "Missing value support for Random Forest": [[324, "missing-value-support-for-random-forest"]], "Missing values support": [[414, "missing-values-support"]], "Missing values support in decision trees": [[323, "missing-values-support-in-decision-trees"]], "MissingIndicator": [[632, null]], "Model Complexity Influence": [[47, null]], "Model Compression": [[362, "model-compression"]], "Model Reshaping": [[362, "model-reshaping"]], "Model Selection": [[182, "model-selection"], [260, null]], "Model Selection Enhancements and API Changes": [[1040, "model-selection-enhancements-and-api-changes"]], "Model Training and Comparison": [[145, "model-training-and-comparison"]], "Model comparison": [[144, "model-comparison"]], "Model definition": [[281, "model-definition"]], "Model evaluation": [[207, "model-evaluation"], [388, "model-evaluation"]], "Model fitting and extrapolation": [[174, "model-fitting-and-extrapolation"]], "Model persistence": [[401, null]], "Model selection and evaluation": [[402, null]], "Model selection interface": [[28, "model-selection-interface"]], "Model selection with Probabilistic PCA and Factor Analysis (FA)": [[128, null]], "Model selection: development and evaluation": [[993, "model-selection-development-and-evaluation"]], "Model specific cross-validation": [[993, "model-specific-cross-validation"]], "Model training and selection": [[164, "model-training-and-selection"], [258, "model-training-and-selection"]], "Model validation": [[30, "model-validation"]], "Model with metadata stripping": [[350, "model-with-metadata-stripping"]], "Model without metadata stripping": [[350, "model-without-metadata-stripping"]], "Model-based and sequential feature selection": [[165, null]], "Modeling non-linear feature interactions with kernels": [[44, "modeling-non-linear-feature-interactions-with-kernels"]], "Modeling pairwise interactions with splines and polynomial features": [[44, "modeling-pairwise-interactions-with-splines-and-polynomial-features"]], "Modeling predictive uncertainty via quantile regression": [[53, "modeling-predictive-uncertainty-via-quantile-regression"]], "Models definition": [[306, "models-definition"]], "Models robustness to recover the ground truth weights": [[192, "models-robustness-to-recover-the-ground-truth-weights"]], "Modified Locally Linear Embedding": [[1001, "modified-locally-linear-embedding"]], "Monitoring performance": [[375, "monitoring-performance"]], "Monotonic Constraints": [[152, null], [414, "monotonic-constraints"]], "Monotonic constraints": [[150, "monotonic-constraints"]], "More control with warm_start": [[1008, "more-control-with-warm-start"]], "Multi-Scale Clustering": [[89, "multi-scale-clustering"]], "Multi-class AdaBoosted Decision Trees": [[135, null]], "Multi-class case": [[1004, "multi-class-case"]], "Multi-class classification": [[1019, "multi-class-classification"]], "Multi-core parallelism using joblib.Parallel": [[381, "multi-core-parallelism-using-joblib-parallel"]], "Multi-dimensional Scaling (MDS)": [[1001, "multi-dimensional-scaling-mds"]], "Multi-dimensional scaling": [[233, null]], "Multi-label case": [[1004, "multi-label-case"]], "Multi-label confusion matrix": [[1004, "multi-label-confusion-matrix"]], "Multi-layer Perceptron": [[1008, "multi-layer-perceptron"]], "Multi-layer perceptron": [[186, "multi-layer-perceptron"]], "Multi-output problems": [[1020, "multi-output-problems"]], "Multi-task Elastic-Net": [[1000, "multi-task-elastic-net"]], "Multi-task Lasso": [[1000, "multi-task-lasso"]], "Multi-task linear regressors with variable selection": [[26, "multi-task-linear-regressors-with-variable-selection"]], "MultiLabelBinarizer": [[878, null], [1015, "multilabelbinarizer"]], "MultiOutputClassifier": [[839, null], [1005, "multioutputclassifier"]], "MultiOutputRegressor": [[840, null], [1005, "multioutputregressor"]], "MultiTaskElasticNet": [[663, null]], "MultiTaskElasticNetCV": [[664, null]], "MultiTaskLasso": [[665, null]], "MultiTaskLassoCV": [[666, null]], "Multiclass Receiver Operating Characteristic (ROC)": [[277, null]], "Multiclass and multilabel classification": [[1004, "multiclass-and-multilabel-classification"]], "Multiclass and multilabel utility function": [[384, "multiclass-and-multilabel-utility-function"]], "Multiclass and multioutput algorithms": [[1005, null]], "Multiclass classification": [[1005, "multiclass-classification"]], "Multiclass methods": [[182, "multiclass-methods"], [284, null]], "Multiclass sparse logistic regression on 20newgroups": [[225, null]], "Multiclass support": [[405, "multiclass-support"]], "Multiclass support for LogisticRegression(solver=\"newton-cholesky\")": [[326, "multiclass-support-for-logisticregression-solver-newton-cholesky"]], "Multiclass-multioutput classification": [[1005, "multiclass-multioutput-classification"]], "Multidimensional scaling": [[230, "multidimensional-scaling"]], "Multilabel": [[371, "multilabel"]], "Multilabel classification": [[245, null], [1005, "multilabel-classification"]], "Multilabel classification using a classifier chain": [[287, null]], "Multilabel ranking metrics": [[28, "multilabel-ranking-metrics"], [1004, "multilabel-ranking-metrics"]], "Multinomial Case": [[1000, "multinomial-case"]], "Multinomial Naive Bayes": [[1006, "multinomial-naive-bayes"]], "MultinomialNB": [[846, null]], "Multioutput methods": [[182, "multioutput-methods"], [286, null]], "Multioutput regression": [[1005, "multioutput-regression"]], "Multiple modules": [[1042, "multiple-modules"], [1043, "multiple-modules"]], "Multiple vs. Single Imputation": [[994, "multiple-vs-single-imputation"]], "Multivariate feature imputation": [[994, "multivariate-feature-imputation"]], "Mutual Information based scores": [[407, "mutual-information-based-scores"]], "Mutual Reachability Graph": [[407, "mutual-reachability-graph"]], "NMF": [[541, null]], "NMF with a beta-divergence": [[412, "nmf-with-a-beta-divergence"]], "NMF with the Frobenius norm": [[412, "nmf-with-the-frobenius-norm"]], "Naive Bayes": [[1006, null]], "Naive evaluation of the next hour bike demand regression": [[53, "naive-evaluation-of-the-next-hour-bike-demand-regression"]], "Naive linear regression": [[44, "naive-linear-regression"]], "Native Categorical Feature Support": [[314, "native-categorical-feature-support"]], "Native support for categorical features in HistGradientBoosting estimators": [[319, "native-support-for-categorical-features-in-histgradientboosting-estimators"]], "Native support for missing values for gradient boosting": [[317, "native-support-for-missing-values-for-gradient-boosting"]], "Nearest Centroid Classification": [[299, null]], "Nearest Centroid Classifier": [[1007, "nearest-centroid-classifier"]], "Nearest Neighbor Algorithms": [[1007, "nearest-neighbor-algorithms"]], "Nearest Neighbors": [[182, "nearest-neighbors"], [289, null], [1007, null]], "Nearest Neighbors Classification": [[291, null], [1007, "nearest-neighbors-classification"]], "Nearest Neighbors Regression": [[1007, "nearest-neighbors-regression"]], "Nearest Neighbors Transformer": [[1007, "nearest-neighbors-transformer"]], "Nearest Neighbors regression": [[300, null]], "Nearest Shrunken Centroid": [[1007, "nearest-shrunken-centroid"]], "Nearest neighbors imputation": [[994, "nearest-neighbors-imputation"]], "NearestCentroid": [[854, null]], "NearestNeighbors": [[855, null]], "Neighborhood Components Analysis": [[1007, "neighborhood-components-analysis"]], "Neighborhood Components Analysis Illustration": [[298, null]], "NeighborhoodComponentsAnalysis": [[856, null]], "Nested versus non-nested cross-validation": [[273, null]], "NetBSD": [[393, "netbsd"]], "Neural Networks": [[182, "neural-networks"], [302, null]], "Neural network models (supervised)": [[1008, null]], "Neural network models (unsupervised)": [[1009, null]], "New Estimator Classes": [[1035, "new-estimator-classes"]], "New Poisson splitting criterion for DecisionTreeRegressor": [[319, "new-poisson-splitting-criterion-for-decisiontreeregressor"]], "New PolynomialCountSketch kernel approximation function": [[319, "new-polynomialcountsketch-kernel-approximation-function"]], "New SequentialFeatureSelector transformer": [[319, "new-sequentialfeatureselector-transformer"]], "New and enhanced displays": [[322, "new-and-enhanced-displays"]], "New classes": [[1034, "new-classes"]], "New display ValidationCurveDisplay": [[323, "new-display-validationcurvedisplay"]], "New documentation improvements": [[319, "new-documentation-improvements"], [320, "new-documentation-improvements"]], "New features": [[1037, "new-features"], [1038, "new-features"], [1039, "new-features"], [1040, "new-features"], [1041, "new-features"]], "New plotting API": [[317, "new-plotting-api"]], "New self-training meta-estimator": [[319, "new-self-training-meta-estimator"]], "New to Scientific Python?": [[1022, "new-to-scientific-python"]], "Next steps": [[388, "next-steps"]], "Non-Negative Least Squares": [[1000, "non-negative-least-squares"]], "Non-linear transformation": [[1014, "non-linear-transformation"]], "Non-negative components - NMF": [[121, "non-negative-components-nmf"]], "Non-negative least squares": [[206, null]], "Non-negative matrix factorization (NMF or NNMF)": [[412, "non-negative-matrix-factorization-nmf-or-nnmf"]], "Normal, Ledoit-Wolf and OAS Linear Discriminant Analysis for classification": [[70, null]], "Normalization": [[1014, "normalization"]], "Normalized Discounted Cumulative Gain": [[1004, "normalized-discounted-cumulative-gain"]], "Normalizer": [[308, "normalizer"], [879, null]], "NotFittedError": [[579, null]], "Note on MPS device support": [[403, "note-on-mps-device-support"]], "Note on device support for float64": [[403, "note-on-device-support-for-float64"]], "Notes": [[364, "notes"]], "Novelty Detection": [[1010, "novelty-detection"]], "Novelty and Outlier Detection": [[1010, null]], "Novelty detection with Local Outlier Factor": [[1010, "novelty-detection-with-local-outlier-factor"]], "Novelty detection with Local Outlier Factor (LOF)": [[294, null]], "NuSVC": [[909, null]], "NuSVR": [[910, null]], "NumPy": [[380, "numpy"]], "Number of candidates and amount of resource at each iteration": [[280, "number-of-candidates-and-amount-of-resource-at-each-iteration"]], "Numerical assertions in tests": [[377, "numerical-assertions-in-tests"]], "Nystroem": [[642, null]], "Nystroem Method for Kernel Approximation": [[996, "nystroem-method-for-kernel-approximation"]], "OAS": [[475, null]], "ONNX": [[401, "onnx"]], "OOB Errors for Random Forests": [[139, null]], "OPTICS": [[407, "optics"], [450, null]], "Obtaining predictions by cross-validation": [[411, "obtaining-predictions-by-cross-validation"]], "OkCupid": [[1028, "id19"]], "Older Versions": [[1034, null]], "One-Class SVM versus One-Class SVM using Stochastic Gradient Descent": [[224, null]], "One-class SVM with non-linear kernel (RBF)": [[338, null]], "One-vs-One multiclass ROC": [[277, "one-vs-one-multiclass-roc"]], "One-vs-Rest multiclass ROC": [[277, "one-vs-rest-multiclass-roc"]], "OneClassSVM": [[911, null]], "OneHotEncoder": [[880, null]], "OneToOneFeatureMixin": [[428, null]], "OneVsOneClassifier": [[835, null], [1005, "onevsoneclassifier"]], "OneVsRestClassifier": [[836, null], [1005, "onevsrestclassifier"]], "Online One-Class SVM": [[320, "online-one-class-svm"], [1018, "online-one-class-svm"]], "Online learning of a dictionary of parts of faces": [[84, null]], "Optical recognition of handwritten digits dataset": [[372, "optical-recognition-of-handwritten-digits-dataset"]], "Optimal mathematical operations": [[42, "module-sklearn.utils.extmath"]], "Optimisation of kernel hyperparameters in GPR": [[175, "optimisation-of-kernel-hyperparameters-in-gpr"]], "Options to tune the decision threshold": [[406, "options-to-tune-the-decision-threshold"]], "Oracle Approximating Shrinkage": [[409, "oracle-approximating-shrinkage"]], "OrdinalEncoder": [[881, null]], "Ordinary Least Squares": [[1000, "ordinary-least-squares"]], "Ordinary Least Squares Complexity": [[1000, "ordinary-least-squares-complexity"]], "Ordinary Least Squares Example": [[207, null]], "Ordinary Least Squares and Ridge Regression Variance": [[208, null]], "Original data": [[274, "original-data"], [308, "original-data"]], "Original image": [[87, "original-image"]], "Original points": [[298, "original-points"]], "Orthogonal Matching Pursuit": [[209, null]], "Orthogonal Matching Pursuit (OMP)": [[1000, "orthogonal-matching-pursuit-omp"]], "OrthogonalMatchingPursuit": [[667, null]], "OrthogonalMatchingPursuitCV": [[668, null]], "Other changes": [[1034, "other-changes"]], "Other estimators and tasks": [[1023, "other-estimators-and-tasks"]], "Otto Group": [[1028, "id26"]], "Our community, our values": [[375, null]], "Our vanilla classifier": [[282, "our-vanilla-classifier"]], "Out of Bag Estimates": [[993, "out-of-bag-estimates"]], "Out-of-core classification of text documents": [[48, null]], "Out-of-core naive Bayes model fitting": [[1006, "out-of-core-naive-bayes-model-fitting"]], "Outlier Detection": [[1010, "id1"]], "Outlier detection on a real data set": [[49, null]], "Outlier detection with Local Outlier Factor (LOF)": [[295, null]], "Outlier-robust regressors": [[26, "outlier-robust-regressors"]], "OutlierMixin": [[429, null]], "Outliers in the X direction": [[227, "outliers-in-the-x-direction"]], "Outliers only in the y direction": [[227, "outliers-only-in-the-y-direction"]], "Outline of the permutation importance algorithm": [[1012, "outline-of-the-permutation-importance-algorithm"]], "OutputCodeClassifier": [[837, null], [1005, "outputcodeclassifier"]], "Oversubscription: spawning too many threads": [[363, "oversubscription-spawning-too-many-threads"]], "Overview of clustering methods": [[407, "overview-of-clustering-methods"]], "Overview of multiclass training meta-estimators": [[285, null]], "Overview of outlier detection methods": [[1010, "overview-of-outlier-detection-methods"]], "PCA": [[542, null]], "PCA using randomized SVD": [[412, "pca-using-randomized-svd"]], "PCA: principal component analysis": [[1021, "pca-principal-component-analysis"]], "PHIMECA Engineering": [[1028, "id15"]], "PLS regression, with multivariate response, a.k.a. PLS2": [[116, "pls-regression-with-multivariate-response-a-k-a-pls2"]], "PLS regression, with univariate response, a.k.a. PLS1": [[116, "pls-regression-with-univariate-response-a-k-a-pls1"]], "PLSCanonical": [[410, "plscanonical"], [483, null]], "PLSRegression": [[410, "plsregression"], [484, null]], "PLSSVD": [[410, "plssvd"], [485, null]], "Packaging": [[1046, "packaging"]], "Pair Confusion Matrix": [[407, "pair-confusion-matrix"]], "Pairwise comparison of all models: Bayesian approach": [[268, "pairwise-comparison-of-all-models-bayesian-approach"]], "Pairwise comparison of all models: frequentist approach": [[268, "pairwise-comparison-of-all-models-frequentist-approach"]], "Pairwise distances with non-numeric arrays": [[325, "pairwise-distances-with-non-numeric-arrays"]], "Pairwise metrics": [[28, "module-sklearn.metrics.pairwise"]], "Pairwise metrics, Affinities and Kernels": [[1002, null]], "PairwiseKernel": [[623, null]], "Pandas": [[380, "pandas"]], "Pandas output with set_output API": [[322, "pandas-output-with-set-output-api"]], "Parallel": [[969, null]], "Parallel NumPy and SciPy routines from numerical libraries": [[363, "parallel-numpy-and-scipy-routines-from-numerical-libraries"]], "Parallel computing": [[42, "module-sklearn.utils.parallel"]], "Parallelism": [[363, "parallelism"], [993, "parallelism"]], "Parallelism, resource management, and configuration": [[363, null]], "Parallelization": [[414, "parallelization"]], "ParameterGrid": [[814, null]], "ParameterSampler": [[815, null]], "Parameters": [[389, "parameters"], [414, "parameters"]], "Parameters of the RBF Kernel": [[1019, "parameters-of-the-rbf-kernel"]], "Partial Dependence and Individual Conditional Expectation Plots": [[186, null]], "Partial Dependence and Individual Conditional Expectation plots": [[1011, null]], "Partial dependence plots": [[1011, "partial-dependence-plots"]], "PartialDependenceDisplay": [[635, null]], "Partitioning the data": [[190, "partitioning-the-data"]], "Passive Aggressive Algorithms": [[1000, "passive-aggressive-algorithms"]], "PassiveAggressiveClassifier": [[669, null]], "PassiveAggressiveRegressor": [[670, null]], "Past Sponsors": [[0, "past-sponsors"]], "Patch extraction": [[415, "patch-extraction"]], "PatchExtractor": [[585, null]], "PeerIndex": [[1028, "id17"]], "People": [[1034, "people"], [1034, "id2"], [1034, "id5"], [1034, "id8"], [1034, "id11"], [1034, "id13"], [1034, "id15"], [1034, "id17"], [1035, "people"], [1035, "id3"], [1036, "people"], [1037, "people"]], "Perceptron": [[671, null], [1000, "perceptron"]], "Performance improvements": [[321, "performance-improvements"]], "Performance improvements in PCA": [[325, "performance-improvements-in-pca"]], "Performing dimensionality reduction using LSA": [[351, "performing-dimensionality-reduction-using-lsa"]], "Periodic Splines": [[211, "periodic-splines"]], "Periodic spline features": [[44, "periodic-spline-features"]], "Permutation Importance vs Random Forest Feature Importance (MDI)": [[187, null]], "Permutation Importance with Multicollinear or Correlated Features": [[188, null]], "Permutation feature importance": [[1012, null]], "Permutation test score": [[274, "permutation-test-score"], [411, "permutation-test-score"]], "Permutation-based feature importance": [[317, "permutation-based-feature-importance"]], "Pinball loss": [[1004, "pinball-loss"]], "Pipeline": [[867, null]], "Pipeline ANOVA SVM": [[162, null]], "Pipeline with hyperparameter tuning": [[269, "pipeline-with-hyperparameter-tuning"]], "Pipeline: chaining estimators": [[408, "pipeline-chaining-estimators"]], "Pipelines and composite estimators": [[102, null], [182, "pipelines-and-composite-estimators"], [408, null]], "Pipelines: chaining pre-processors and estimators": [[388, "pipelines-chaining-pre-processors-and-estimators"]], "Pipelining": [[1021, null]], "Pipelining: chaining a PCA and a logistic regression": [[106, null]], "Platform-specific instructions": [[373, "platform-specific-instructions"]], "Plot Hierarchical Clustering Dendrogram": [[77, null]], "Plot Precision-Recall curve for each class and iso-f1 curves": [[275, "plot-precision-recall-curve-for-each-class-and-iso-f1-curves"]], "Plot ROC and DET curves": [[265, "plot-roc-and-det-curves"]], "Plot Ridge coefficients as a function of the regularization": [[215, null]], "Plot a PCA representation": [[127, "plot-a-pca-representation"]], "Plot accuracy, training and test time of each classifier": [[350, "plot-accuracy-training-and-test-time-of-each-classifier"]], "Plot all OvO ROC curves together": [[277, "plot-all-ovo-roc-curves-together"]], "Plot all OvR ROC curves together": [[277, "plot-all-ovr-roc-curves-together"]], "Plot and analysis of the results": [[196, "plot-and-analysis-of-the-results"]], "Plot and interpret results": [[247, "plot-and-interpret-results"]], "Plot class probabilities calculated by the VotingClassifier": [[157, null]], "Plot classification boundaries with different SVM Kernels": [[343, null]], "Plot classification probability": [[67, null]], "Plot data and the predicted probabilities": [[62, "plot-data-and-the-predicted-probabilities"]], "Plot different SVM classifiers in the iris dataset": [[336, null]], "Plot discrete decision boundary": [[151, "plot-discrete-decision-boundary"]], "Plot feature importance": [[148, "plot-feature-importance"]], "Plot individual and voting regression predictions": [[158, null]], "Plot multi-class SGD on the iris dataset": [[219, null]], "Plot number of features VS. cross-validation scores": [[164, "plot-number-of-features-vs-cross-validation-scores"]], "Plot of pairs of features of the Iris dataset": [[127, "plot-of-pairs-of-features-of-the-iris-dataset"]], "Plot path length decision boundary": [[151, "plot-path-length-decision-boundary"]], "Plot randomly generated multilabel dataset": [[119, null]], "Plot regularization path": [[204, "plot-regularization-path"]], "Plot result": [[74, "plot-result"], [97, "plot-result"], [101, "plot-result"], [101, "id2"]], "Plot results": [[48, "plot-results"], [83, "plot-results"], [110, "plot-results"], [122, "plot-results"], [123, "plot-results"], [141, "plot-results"], [287, "plot-results"], [295, "plot-results"]], "Plot support and time series": [[205, "plot-support-and-time-series"]], "Plot the BIC scores": [[258, "plot-the-bic-scores"]], "Plot the Precision-Recall curve": [[275, "plot-the-precision-recall-curve"]], "Plot the best model": [[258, "plot-the-best-model"]], "Plot the cross-validation score as a function of percentile of features": [[342, "plot-the-cross-validation-score-as-a-function-of-percentile-of-features"]], "Plot the decision boundaries of a VotingClassifier": [[156, null]], "Plot the decision surface of decision trees trained on the iris dataset": [[355, null]], "Plot the decision surfaces of ensembles of trees on the iris dataset": [[143, null]], "Plot the marginal log-likelihood": [[192, "plot-the-marginal-log-likelihood"]], "Plot the micro-averaged Precision-Recall curve": [[275, "plot-the-micro-averaged-precision-recall-curve"]], "Plot the most uncertain predictions": [[328, "plot-the-most-uncertain-predictions"]], "Plot the results": [[84, "plot-the-results"], [114, "plot-the-results"], [158, "plot-the-results"], [181, "plot-the-results"], [356, "plot-the-results"], [356, "id3"]], "Plot the results on an image": [[82, "plot-the-results-on-an-image"]], "Plot the support vectors in LinearSVC": [[337, null]], "Plot the true and estimated coefficients": [[192, "plot-the-true-and-estimated-coefficients"]], "Plot the true and predicted curves with log marginal likelihood (L)": [[193, "plot-the-true-and-predicted-curves-with-log-marginal-likelihood-l"]], "Plot training deviance": [[148, "plot-training-deviance"]], "Plotting": [[22, "plotting"], [28, "plotting"], [41, "plotting"], [306, "plotting"]], "Plotting API Overview": [[382, "plotting-api-overview"]], "Plotting Cross-Validated Predictions": [[264, null]], "Plotting Functions": [[71, "plotting-functions"]], "Plotting Learning Curves and Checking Models\u2019 Scalability": [[270, null]], "Plotting four circles": [[100, "plotting-four-circles"]], "Plotting partial dependence for one feature": [[248, "plotting-partial-dependence-for-one-feature"]], "Plotting partial dependence for two features": [[248, "plotting-partial-dependence-for-two-features"]], "Plotting partial dependence of the two models together": [[248, "plotting-partial-dependence-of-the-two-models-together"]], "Plotting polynomial regressions with std errors of the scores": [[192, "plotting-polynomial-regressions-with-std-errors-of-the-scores"]], "Plotting results": [[59, "plotting-results"]], "Plotting the ROC Curve": [[250, "plotting-the-roc-curve"]], "Plotting the Results": [[314, "plotting-the-results"]], "Plotting the result": [[272, "plotting-the-result"]], "Plotting the results": [[98, "plotting-the-results"], [136, "plotting-the-results"], [207, "plotting-the-results"]], "Plotting trained Coefficients and Mean Squared Errors": [[214, "plotting-trained-coefficients-and-mean-squared-errors"]], "Plotting two circles": [[100, "plotting-two-circles"]], "Plotting with Multiple Axes": [[382, "plotting-with-multiple-axes"]], "Poisson regression and non-normal loss": [[210, null]], "PoissonRegressor": [[672, null]], "Polars output in set_output": [[324, "polars-output-in-set-output"]], "Polynomial Kernel Approximation via Tensor Sketch": [[996, "polynomial-kernel-approximation-via-tensor-sketch"]], "Polynomial and Spline interpolation": [[211, null]], "Polynomial features": [[1014, "polynomial-features"]], "Polynomial kernel": [[343, "polynomial-kernel"], [1002, "polynomial-kernel"]], "Polynomial regression: extending linear models with basis functions": [[1000, "polynomial-regression-extending-linear-models-with-basis-functions"]], "PolynomialCountSketch": [[643, null]], "PolynomialFeatures": [[882, null]], "Possible solutions": [[91, "possible-solutions"]], "Post pruning decision trees with cost complexity pruning": [[354, null]], "Post-fit model tuning": [[30, "post-fit-model-tuning"]], "Post-hoc tuning the cut-off point of decision function": [[282, null]], "Post-tuning the decision threshold": [[406, "post-tuning-the-decision-threshold"]], "Post-tuning the decision threshold for cost-sensitive learning": [[262, null]], "PowerTransformer": [[308, "powertransformer"], [883, null]], "Pre-test vs. post-test analysis": [[271, "pre-test-vs-post-test-analysis"]], "Precision, recall and F-measures": [[1004, "precision-recall-and-f-measures"]], "Precision-Recall": [[275, null]], "PrecisionRecallDisplay": [[703, null]], "Precomputed sparse nearest neighbors graph": [[317, "precomputed-sparse-nearest-neighbors-graph"]], "Predefined fold-splits / Validation-sets": [[411, "predefined-fold-splits-validation-sets"]], "PredefinedSplit": [[816, null]], "Predict": [[356, "predict"], [356, "id2"]], "Prediction Intervals for Gradient Boosting Regression": [[147, null]], "Prediction Latency": [[50, null], [362, "prediction-latency"]], "Prediction Throughput": [[362, "prediction-throughput"]], "PredictionErrorDisplay": [[704, null]], "Preparing the data": [[136, "preparing-the-data"], [150, "preparing-the-data"], [190, "preparing-the-data"]], "Preprocessing": [[182, "preprocessing"], [307, null]], "Preprocessing data": [[1014, null]], "Preprocessing numerical variables": [[185, "preprocessing-numerical-variables"]], "Preprocessor for machine-learning models": [[186, "preprocessor-for-machine-learning-models"]], "Preprocessor for the gradient boosting model": [[186, "preprocessor-for-the-gradient-boosting-model"]], "Preprocessor for the neural network model": [[186, "preprocessor-for-the-neural-network-model"]], "Principal Component Analysis (PCA) on Iris Dataset": [[127, null]], "Principal Component Regression vs Partial Least Squares Regression": [[117, null]], "Principal component analysis (PCA)": [[412, "principal-component-analysis-pca"]], "Private Loss Function Module": [[1051, "private-loss-function-module"]], "Probabilistic predictions with GPC": [[417, "probabilistic-predictions-with-gpc"]], "Probabilistic predictions with Gaussian process classification (GPC)": [[170, null]], "Probability Calibration curves": [[63, null]], "Probability Calibration for 3-class classification": [[64, null]], "Probability calibration": [[405, null]], "Probability calibration of classifiers": [[62, null]], "Processing the dataset": [[185, "processing-the-dataset"]], "Product": [[624, null]], "Productivity and sanity-preserving tips": [[383, "productivity-and-sanity-preserving-tips"]], "Profiling Python code": [[381, "profiling-python-code"]], "Profiling compiled extensions": [[381, "profiling-compiled-extensions"]], "Project template:": [[377, null]], "Projecting data: PCA vs. KernelPCA": [[126, "projecting-data-pca-vs-kernelpca"]], "Projecting into the original feature space": [[126, "projecting-into-the-original-feature-space"]], "Projection on one component and predictive power": [[117, "projection-on-one-component-and-predictive-power"]], "Proper next hour forecasting evaluation": [[53, "proper-next-hour-forecasting-evaluation"]], "Provide a failing code example with minimal comments": [[380, "provide-a-failing-code-example-with-minimal-comments"]], "Pull request checklist": [[375, "pull-request-checklist"]], "Pure Premium Modeling via a Product Model vs single TweedieRegressor": [[228, "pure-premium-modeling-via-a-product-model-vs-single-tweedieregressor"]], "Purpose of this document": [[1024, "purpose-of-this-document"]], "Purpose of this example": [[214, "purpose-of-this-example"]], "PyTorch Support": [[403, "pytorch-support"]], "Python API": [[363, "python-api"]], "Python package and dataset imports, load dataset": [[242, "python-package-and-dataset-imports-load-dataset"]], "Python, Cython or C/C++?": [[381, "python-cython-or-c-c"]], "QDA": [[998, "qda"]], "QuadraticDiscriminantAnalysis": [[551, null]], "Qualitative analysis of the impact of features on linear model predictions": [[44, "qualitative-analysis-of-the-impact-of-features-on-linear-model-predictions"]], "Quantifying the quality of clustering results": [[351, "quantifying-the-quality-of-clustering-results"]], "Quantile Regression": [[1000, "quantile-regression"]], "Quantile Regressor": [[320, "quantile-regressor"]], "Quantile loss in HistGradientBoostingRegressor": [[321, "quantile-loss-in-histgradientboostingregressor"]], "Quantile regression": [[212, null]], "QuantileRegressor": [[673, null]], "QuantileTransformer": [[884, null]], "QuantileTransformer (Gaussian output)": [[308, "quantiletransformer-gaussian-output"]], "QuantileTransformer (uniform output)": [[308, "quantiletransformer-uniform-output"]], "RANSAC: RANdom SAmple Consensus": [[1000, "ransac-random-sample-consensus"]], "RANSACRegressor": [[674, null]], "RBF": [[625, null]], "RBF SVM parameters": [[339, null]], "RBF kernel": [[343, "rbf-kernel"], [1002, "rbf-kernel"]], "RBFSampler": [[644, null]], "RCV1 dataset": [[370, "rcv1-dataset"]], "RFE": [[595, null]], "RFECV": [[596, null]], "ROC AUC now supports multiclass classification": [[317, "roc-auc-now-supports-multiclass-classification"]], "ROC Curve with Visualization API": [[250, null]], "ROC curve showing a specific class": [[277, "roc-curve-showing-a-specific-class"]], "ROC curve using micro-averaged OvR": [[277, "roc-curve-using-micro-averaged-ovr"]], "ROC curve using the OvO macro-average": [[277, "roc-curve-using-the-ovo-macro-average"]], "ROC curve using the OvR macro-average": [[277, "roc-curve-using-the-ovr-macro-average"]], "Radial Basis Function Kernel": [[996, "radial-basis-function-kernel"]], "Radial Basis Function kernel": [[178, "radial-basis-function-kernel"]], "Radial basis function (RBF) kernel": [[417, "radial-basis-function-rbf-kernel"]], "RadiusNeighborsClassifier": [[857, null]], "RadiusNeighborsRegressor": [[858, null]], "RadiusNeighborsTransformer": [[859, null]], "Rand index": [[407, "rand-index"]], "Random Forest Feature Importance on Breast Cancer Data": [[188, "random-forest-feature-importance-on-breast-cancer-data"]], "Random Forests": [[414, "random-forests"]], "Random Numbers": [[377, "random-numbers"]], "Random Projection": [[1016, null]], "Random data": [[274, "random-data"]], "Random forests and other randomized tree ensembles": [[414, "random-forests-and-other-randomized-tree-ensembles"]], "Random permutations cross-validation a.k.a. Shuffle & Split": [[411, "random-permutations-cross-validation-a-k-a-shuffle-split"]], "Random projections": [[1021, "random-projections"]], "Random sampling": [[42, "module-sklearn.utils.random"]], "RandomForestClassifier": [[565, null]], "RandomForestRegressor": [[566, null]], "RandomTreesEmbedding": [[567, null]], "Randomized Parameter Optimization": [[993, "randomized-parameter-optimization"]], "RandomizedSearchCV": [[817, null]], "Rangespan": [[1028, "id11"]], "Ranking loss": [[1004, "ranking-loss"]], "Rational Quadratic kernel": [[178, "rational-quadratic-kernel"]], "Rational quadratic kernel": [[417, "rational-quadratic-kernel"]], "RationalQuadratic": [[626, null]], "Reading the existing code base": [[375, "reading-the-existing-code-base"]], "Real world datasets": [[370, null]], "Real-world data set": [[108, "real-world-data-set"]], "Receiver Operating Characteristic (ROC) with cross validation": [[278, null]], "Receiver operating characteristic (ROC)": [[1004, "receiver-operating-characteristic-roc"]], "Recently Deprecated": [[1, null]], "Recognizing hand-written digits": [[69, null]], "Recommendation Engine packages": [[1023, "recommendation-engine-packages"]], "Reconstruct and denoise test images": [[45, "reconstruct-and-denoise-test-images"]], "Recursive feature elimination": [[163, null], [416, "recursive-feature-elimination"]], "Recursive feature elimination with cross-validation": [[164, null]], "Reference Steps": [[379, "reference-steps"]], "References": [[51, "references"], [63, "references"], [65, "references"], [113, "references"], [138, "references"], [190, "references"], [196, "references"], [285, "references"], [301, "references"], [417, "references"], [994, "references"]], "Region of Practical Equivalence": [[268, "region-of-practical-equivalence"]], "Regression": [[177, "regression"], [1000, "regression"], [1008, "regression"], [1018, "regression"], [1019, "regression"], [1020, "regression"]], "Regression criteria": [[1020, "regression-criteria"]], "Regression metrics": [[28, "regression-metrics"], [1004, "regression-metrics"]], "RegressorChain": [[841, null], [1005, "regressorchain"]], "RegressorMixin": [[430, null]], "RegressorTags": [[925, null]], "Regressors with variable selection": [[26, "regressors-with-variable-selection"]], "Regularization": [[1008, "regularization"]], "Regularization path of L1- Logistic Regression": [[204, null]], "Related Projects": [[1023, null]], "Related changes": [[1041, "related-changes"]], "Relation to impurity-based importance in trees": [[1012, "relation-to-impurity-based-importance-in-trees"]], "Release Highlights": [[182, "release-highlights"], [316, null]], "Release Highlights for scikit-learn 0.22": [[317, null]], "Release Highlights for scikit-learn 0.23": [[318, null]], "Release Highlights for scikit-learn 0.24": [[319, null]], "Release Highlights for scikit-learn 1.0": [[320, null]], "Release Highlights for scikit-learn 1.1": [[321, null]], "Release Highlights for scikit-learn 1.2": [[322, null]], "Release Highlights for scikit-learn 1.3": [[323, null]], "Release Highlights for scikit-learn 1.4": [[324, null]], "Release Highlights for scikit-learn 1.5": [[325, null]], "Release Highlights for scikit-learn 1.6": [[326, null]], "Release History": [[1032, null]], "Releasing": [[379, "releasing"]], "Remarks": [[241, "remarks"]], "Removed modules": [[1034, "removed-modules"]], "Removing features with low variance": [[416, "removing-features-with-low-variance"]], "Repeated K-Fold": [[411, "repeated-k-fold"]], "RepeatedKFold": [[818, null]], "RepeatedStratifiedKFold": [[819, null]], "Replace missing values by 0": [[181, "replace-missing-values-by-0"]], "Replicating the training environment in production": [[401, "replicating-the-training-environment-in-production"]], "Resolve conflicts in lock files": [[375, "resolve-conflicts-in-lock-files"]], "Restricted Boltzmann Machine features for digit classification": [[306, null]], "Restricted Boltzmann machines": [[1009, "restricted-boltzmann-machines"]], "Results interpretation": [[287, "results-interpretation"]], "Retrieve dataframes from OpenML": [[317, "retrieve-dataframes-from-openml"]], "Retrieve the data from Internet": [[52, "retrieve-the-data-from-internet"]], "Reuters Dataset related routines": [[48, "reuters-dataset-related-routines"]], "Rich HTML representation": [[239, "rich-html-representation"]], "Rich visual representation of estimators": [[318, "rich-visual-representation-of-estimators"]], "Ridge": [[675, null]], "Ridge Complexity": [[1000, "ridge-complexity"]], "Ridge coefficients as a function of the L2 Regularization": [[214, null]], "Ridge regression and classification": [[1000, "ridge-regression-and-classification"]], "RidgeCV": [[676, null]], "RidgeClassifier": [[677, null]], "RidgeClassifierCV": [[678, null]], "Roadmap": [[1024, null]], "Robust Covariance Estimation": [[409, "robust-covariance-estimation"]], "Robust covariance estimation and Mahalanobis distances relevance": [[112, null]], "Robust linear estimator fitting": [[216, null]], "Robust linear model estimation using RANSAC": [[213, null]], "Robust vs Empirical covariance estimate": [[113, null]], "RobustScaler": [[308, "robustscaler"], [885, null]], "Robustness of cross-validation results": [[358, "robustness-of-cross-validation-results"]], "Robustness regression: outliers and modeling errors": [[1000, "robustness-regression-outliers-and-modeling-errors"]], "Robustness to failure": [[993, "robustness-to-failure"]], "RocCurveDisplay": [[705, null]], "Roles And Responsibilities": [[390, "roles-and-responsibilities"]], "Rolling your own estimator": [[377, "rolling-your-own-estimator"]], "Routing Meta-Estimator": [[244, "routing-meta-estimator"]], "Run the benchmark": [[92, "run-the-benchmark"]], "Run the code and plot the results": [[47, "run-the-code-and-plot-the-results"]], "Running GridSearchCV using multiple evaluation metrics": [[272, "running-gridsearchcv-using-multiple-evaluation-metrics"]], "Runtime dependencies": [[373, "runtime-dependencies"]], "R\u00b2 score, the coefficient of determination": [[1004, "r2-score-the-coefficient-of-determination"]], "SGD": [[1018, "id5"]], "SGD: Maximum margin separating hyperplane": [[222, null]], "SGD: Penalties": [[221, null]], "SGD: Weighted samples": [[223, null]], "SGD: convex loss functions": [[220, null]], "SGDClassifier": [[679, null]], "SGDOneClassSVM": [[680, null]], "SGDRegressor": [[681, null]], "SKLEARN_ASSUME_FINITE": [[363, "sklearn-assume-finite"]], "SKLEARN_BUILD_ENABLE_DEBUG_SYMBOLS": [[363, "sklearn-build-enable-debug-symbols"]], "SKLEARN_ENABLE_DEBUG_CYTHON_DIRECTIVES": [[363, "sklearn-enable-debug-cython-directives"]], "SKLEARN_PAIRWISE_DIST_CHUNK_SIZE": [[363, "sklearn-pairwise-dist-chunk-size"]], "SKLEARN_RUN_FLOAT32_TESTS": [[363, "sklearn-run-float32-tests"]], "SKLEARN_SEED": [[363, "sklearn-seed"]], "SKLEARN_SKIP_NETWORK_TESTS": [[363, "sklearn-skip-network-tests"]], "SKLEARN_TESTS_GLOBAL_RANDOM_SEED": [[363, "sklearn-tests-global-random-seed"]], "SKLEARN_WARNINGS_AS_ERRORS": [[363, "sklearn-warnings-as-errors"]], "SKLEARN_WORKING_MEMORY": [[363, "sklearn-working-memory"]], "SVC": [[912, null], [1019, "svc"]], "SVM Margins Example": [[344, null]], "SVM Tie Breaking Example": [[347, null]], "SVM with custom kernel": [[335, null]], "SVM-Anova: SVM with univariate feature selection": [[342, null]], "SVM: Maximum margin separating hyperplane": [[340, null]], "SVM: Separating hyperplane for unbalanced classes": [[341, null]], "SVM: Weighted samples": [[348, null]], "SVR": [[913, null], [1019, "svr"]], "Sample generators": [[10, "sample-generators"]], "Sample images": [[369, "sample-images"]], "Sample pipeline for text feature extraction and evaluation": [[269, null]], "Sample weight support": [[414, "sample-weight-support"]], "Sample-weight support for Lasso and ElasticNet": [[318, "sample-weight-support-for-lasso-and-elasticnet"]], "Scalability and stability improvements to KMeans": [[318, "scalability-and-stability-improvements-to-kmeans"]], "Scalable learning with polynomial kernel approximation": [[190, null]], "Scale Invariance": [[89, "scale-invariance"]], "Scaling data with outliers": [[1014, "scaling-data-with-outliers"]], "Scaling features to a range": [[1014, "scaling-features-to-a-range"]], "Scaling sparse data": [[1014, "scaling-sparse-data"]], "Scaling the regularization parameter for SVCs": [[346, null]], "Scaling up the One-Class SVM": [[1010, "scaling-up-the-one-class-svm"]], "Scaling with instances using out-of-core learning": [[364, "scaling-with-instances-using-out-of-core-learning"]], "Scatter plot of scores": [[116, "scatter-plot-of-scores"]], "Scikit-learn governance and decision-making": [[390, null]], "Scores and probabilities": [[1019, "scores-and-probabilities"]], "Scoring API overview": [[1004, "scoring-api-overview"]], "Searching for optimal parameters with successive halving": [[993, "searching-for-optimal-parameters-with-successive-halving"]], "Second example": [[49, "second-example"]], "Second experiment: varying number of classes and clusters": [[73, "second-experiment-varying-number-of-classes-and-clusters"]], "Security": [[1052, "security"]], "Security & Maintainability Limitations": [[401, "security-maintainability-limitations"]], "Segmenting the picture of greek coins in regions": [[81, null]], "SelectFdr": [[597, null]], "SelectFpr": [[598, null]], "SelectFromModel": [[599, null]], "SelectFwe": [[600, null]], "SelectKBest": [[601, null]], "SelectPercentile": [[602, null]], "Selecting Lasso via an information criterion": [[200, "selecting-lasso-via-an-information-criterion"]], "Selecting Lasso via cross-validation": [[200, "selecting-lasso-via-cross-validation"]], "Selecting dimensionality reduction with Pipeline and GridSearchCV": [[105, null]], "Selecting features based on importance": [[165, "selecting-features-based-on-importance"]], "Selecting features with Sequential Feature Selection": [[165, "selecting-features-with-sequential-feature-selection"]], "Selecting the number of clusters with silhouette analysis on KMeans clustering": [[94, null]], "SelectorMixin": [[603, null]], "Self Training": [[1017, "self-training"]], "SelfTrainingClassifier": [[904, null]], "Semi Supervised Classification": [[182, "semi-supervised-classification"], [327, null]], "Semi-supervised Classification on a Text Dataset": [[332, null]], "Semi-supervised learning": [[328, "semi-supervised-learning"], [1017, null]], "Sequence similarity matrix under the kernel": [[177, "sequence-similarity-matrix-under-the-kernel"]], "Sequential Feature Selection": [[416, "sequential-feature-selection"]], "SequentialFeatureSelector": [[604, null]], "Serving the model artifact": [[401, "serving-the-model-artifact"]], "Setting a decision threshold for a pre-fitted classifier": [[167, "setting-a-decision-threshold-for-a-pre-fitted-classifier"]], "Setting regularization parameter": [[1000, "setting-regularization-parameter"]], "Setting the regularization parameter: leave-one-out Cross-Validation": [[1000, "setting-the-regularization-parameter-leave-one-out-cross-validation"]], "Severity Model -  Gamma distribution": [[228, "severity-model-gamma-distribution"]], "Shrinkage and Covariance Estimator": [[998, "shrinkage-and-covariance-estimator"]], "Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood": [[110, null]], "Shrinkage via learning rate": [[414, "shrinkage-via-learning-rate"]], "Shrunk Covariance": [[409, "shrunk-covariance"]], "ShrunkCovariance": [[476, null]], "ShuffleSplit": [[820, null]], "Sigmoid": [[405, "sigmoid"]], "Sigmoid kernel": [[343, "sigmoid-kernel"], [1002, "sigmoid-kernel"]], "Silhouette Coefficient": [[407, "silhouette-coefficient"]], "Simple 1D Kernel Density Estimation": [[293, null]], "Simple Pipeline": [[244, "simple-pipeline"]], "SimpleImputer": [[633, null]], "Single estimator versus bagging: bias-variance decomposition": [[138, null]], "Single label": [[371, "single-label"]], "Skewed Chi Squared Kernel": [[996, "skewed-chi-squared-kernel"]], "SkewedChi2Sampler": [[645, null]], "Social Media": [[1027, "social-media"]], "Solvers": [[1000, "solvers"]], "Sparse coding with a precomputed dictionary": [[130, null], [412, "sparse-coding-with-a-precomputed-dictionary"]], "Sparse components - MiniBatchSparsePCA": [[121, "sparse-components-minibatchsparsepca"]], "Sparse input": [[1014, null]], "Sparse inverse covariance": [[409, "sparse-inverse-covariance"]], "Sparse inverse covariance estimation": [[114, null]], "Sparse principal components analysis (SparsePCA and MiniBatchSparsePCA)": [[412, "sparse-principal-components-analysis-sparsepca-and-minibatchsparsepca"]], "Sparse random projection": [[1016, "sparse-random-projection"]], "SparseCoder": [[543, null]], "SparsePCA": [[544, null]], "SparseRandomProjection": [[900, null]], "Sparsity": [[415, "sparsity"]], "Species distribution dataset": [[370, "species-distribution-dataset"]], "Species distribution modeling": [[51, null]], "Specifying an objective metric": [[993, "specifying-an-objective-metric"]], "Specifying multiple metrics for evaluation": [[993, "specifying-multiple-metrics-for-evaluation"]], "Spectral Biclustering": [[404, "spectral-biclustering"]], "Spectral Clustering Graphs": [[407, "spectral-clustering-graphs"]], "Spectral Co-Clustering": [[404, "spectral-co-clustering"]], "Spectral Embedding": [[1001, "spectral-embedding"]], "Spectral clustering": [[407, "spectral-clustering"]], "Spectral clustering for image segmentation": [[100, null]], "Spectral embedding for non-linear dimensionality reduction": [[230, "spectral-embedding-for-non-linear-dimensionality-reduction"]], "SpectralBiclustering": [[451, null]], "SpectralClustering": [[452, null]], "SpectralCoclustering": [[453, null]], "SpectralEmbedding": [[694, null]], "Sphinx version": [[375, null]], "Spline Transformers": [[320, "spline-transformers"]], "Spline transformer": [[1014, "spline-transformer"]], "SplineTransformer": [[886, null]], "Splitters": [[30, "splitters"]], "Spotify": [[1028, "id2"]], "Stack of predictors on a single data set": [[155, "stack-of-predictors-on-a-single-data-set"]], "Stacked generalization": [[414, "stacked-generalization"]], "Stacking Classifier and Regressor": [[317, "stacking-classifier-and-regressor"]], "StackingClassifier": [[568, null]], "StackingRegressor": [[569, null]], "Stalled and Unclaimed Issues": [[375, "stalled-and-unclaimed-issues"]], "Stalled pull requests": [[375, "stalled-pull-requests"]], "Standard replies for reviewing": [[383, "standard-replies-for-reviewing"]], "StandardScaler": [[308, "standardscaler"], [887, null]], "Standardization, or mean removal and variance scaling": [[1014, "standardization-or-mean-removal-and-variance-scaling"]], "Statement of purpose: Scikit-learn in 2018": [[1024, "statement-of-purpose-scikit-learn-in-2018"]], "Statistical comparison of models using grid search": [[268, null]], "Statistical learning with Python": [[1023, "statistical-learning-with-python"]], "Stochastic Gradient Descent": [[1018, null]], "Stochastic Gradient Descent - SGD": [[1000, "stochastic-gradient-descent-sgd"]], "Stochastic Gradient Descent for sparse data": [[1018, "stochastic-gradient-descent-for-sparse-data"]], "Stochastic Maximum Likelihood learning": [[1009, "stochastic-maximum-likelihood-learning"]], "Stopping criterion": [[1018, "stopping-criterion"]], "Strategies comparison": [[285, "strategies-comparison"]], "Strategies to scale computationally: bigger data": [[364, null]], "Stratified Shuffle Split": [[411, "stratified-shuffle-split"]], "Stratified k-fold": [[411, "stratified-k-fold"]], "StratifiedGroupKFold": [[411, "stratifiedgroupkfold"], [821, null]], "StratifiedKFold": [[822, null]], "StratifiedShuffleSplit": [[823, null]], "Streaming instances": [[364, "streaming-instances"]], "String name scorers": [[1004, "string-name-scorers"]], "Submitting a bug report or a feature request": [[375, "submitting-a-bug-report-or-a-feature-request"]], "Subsampling": [[414, "subsampling"]], "Successive Halving Iterations": [[280, null]], "Successive Halving estimators for tuning hyper-parameters": [[319, "successive-halving-estimators-for-tuning-hyper-parameters"]], "Sum": [[627, null]], "Summarizing the key points": [[401, "summarizing-the-key-points"]], "Summary": [[63, "summary"], [145, "summary"], [352, "summary"]], "Summary of cross-validation approach": [[200, "summary-of-cross-validation-approach"]], "Summary of model persistence methods": [[401, "id2"]], "Supervised learning": [[1026, null]], "Support": [[1027, null]], "Support Vector Machines": [[182, "support-vector-machines"], [334, null], [1019, null]], "Support Vector Regression (SVR) using linear and non-linear kernels": [[345, null]], "Support for Array API": [[1051, "support-for-array-api"], [1052, "support-for-array-api"], [1053, "support-for-array-api"]], "Support for Array API-compatible inputs": [[403, "support-for-array-api-compatible-inputs"]], "Support for SciPy sparse arrays": [[1051, "support-for-scipy-sparse-arrays"]], "Support for building with Meson": [[1052, "support-for-building-with-meson"]], "Support for missing values": [[150, "support-for-missing-values"]], "Support for quantile loss": [[150, "support-for-quantile-loss"]], "Swiss Roll": [[234, "swiss-roll"]], "Swiss Roll And Swiss-Hole Reduction": [[234, null]], "Swiss-Hole": [[234, "swiss-hole"]], "Synthetic dataset": [[380, "synthetic-dataset"]], "Synthetic example": [[108, "synthetic-example"]], "T-distributed Stochastic Neighbor Embedding": [[230, "t-distributed-stochastic-neighbor-embedding"]], "TSNE": [[695, null]], "Table of Contents": [[387, "table-of-contents"]], "Tags": [[926, null]], "Take-home messages": [[268, "take-home-messages"]], "Target Encoder": [[1014, "target-encoder"]], "Target Encoder\u2019s Internal Cross fitting": [[315, null]], "Target Types": [[389, "target-types"]], "Target format": [[1005, "target-format"], [1005, "id5"], [1005, "id8"], [1005, "id10"]], "TargetEncoder": [[888, null]], "TargetEncoder: a new category encoding strategy": [[323, "targetencoder-a-new-category-encoding-strategy"]], "TargetTags": [[927, null]], "Technical Committee": [[390, "technical-committee"]], "Test dependencies": [[373, "test-dependencies"]], "Test with permutations the significance of a classification score": [[274, null]], "Testing Functions": [[384, "testing-functions"]], "Testing and improving test coverage": [[375, "testing-and-improving-test-coverage"]], "Text feature extraction": [[415, "text-feature-extraction"]], "TfidfTransformer": [[592, null]], "TfidfVectorizer": [[352, "tfidfvectorizer"], [593, null]], "Tf\u2013idf term weighting": [[415, "tfidf-term-weighting"]], "The 20 newsgroups text dataset": [[370, "the-20-newsgroups-text-dataset"]], "The Bag of Words representation": [[415, "the-bag-of-words-representation"]], "The Dirichlet Process": [[1003, "the-dirichlet-process"]], "The French Motor Third-Party Liability Claims dataset": [[210, "the-french-motor-third-party-liability-claims-dataset"]], "The Johnson-Lindenstrauss bound for embedding with random projections": [[241, null]], "The Johnson-Lindenstrauss lemma": [[1016, "the-johnson-lindenstrauss-lemma"]], "The Labeled Faces in the Wild face recognition dataset": [[370, "the-labeled-faces-in-the-wild-face-recognition-dataset"]], "The Meson Build Backend": [[383, "the-meson-build-backend"]], "The Olivetti faces dataset": [[370, "the-olivetti-faces-dataset"]], "The Yeast UCI dataset": [[285, "the-yeast-uci-dataset"]], "The average precision score in multi-label settings": [[275, "the-average-precision-score-in-multi-label-settings"]], "The credit card dataset": [[262, "the-credit-card-dataset"]], "The cross_validate function and multiple metric evaluation": [[411, "the-cross-validate-function-and-multiple-metric-evaluation"]], "The data": [[117, "the-data"]], "The dataset": [[266, "the-dataset"]], "The dataset: simulated hourly wages": [[184, "the-dataset-simulated-hourly-wages"]], "The dataset: wages": [[185, "the-dataset-wages"]], "The diabetes dataset": [[282, "the-diabetes-dataset"]], "The importance of hyperparameters search": [[285, "the-importance-of-hyperparameters-search"]], "The machine-learning pipeline": [[185, "the-machine-learning-pipeline"]], "The people behind scikit-learn": [[0, "the-people-behind-scikit-learn"]], "The problem of correlated variables": [[185, "the-problem-of-correlated-variables"]], "The scikit-learn.org Website": [[379, "the-scikit-learn-org-website"]], "The scoring parameter: defining model evaluation rules": [[1004, "the-scoring-parameter-defining-model-evaluation-rules"]], "Theil-Sen Regression": [[227, null]], "Theil-Sen estimator: generalized-median-based estimator": [[1000, "theil-sen-estimator-generalized-median-based-estimator"]], "TheilSenRegressor": [[682, null]], "Theoretical bounds": [[241, "theoretical-bounds"]], "Third Party Development and scikit-learn Dependency": [[244, "third-party-development-and-scikit-learn-dependency"]], "Third party distributions of scikit-learn": [[393, "third-party-distributions-of-scikit-learn"]], "Time Series Split": [[411, "time-series-split"]], "Time-based cross-validation": [[44, "time-based-cross-validation"]], "Time-related feature engineering": [[44, null]], "Time-steps as categories": [[44, "time-steps-as-categories"]], "TimeSeriesSplit": [[824, null]], "Timing and accuracy plots": [[242, "timing-and-accuracy-plots"]], "Tips and Tricks": [[362, "tips-and-tricks"]], "Tips for developing with Cython in scikit-learn": [[376, "tips-for-developing-with-cython-in-scikit-learn"]], "Tips for parameter search": [[993, "tips-for-parameter-search"]], "Tips for performance": [[376, "tips-for-performance"]], "Tips on Practical Use": [[1008, "tips-on-practical-use"], [1018, "tips-on-practical-use"], [1019, "tips-on-practical-use"]], "Tips on practical use": [[1001, "tips-on-practical-use"], [1020, "tips-on-practical-use"]], "Tips to ease development": [[376, "tips-to-ease-development"]], "Tools": [[403, "tools"]], "Top terms per cluster": [[351, "top-terms-per-cluster"]], "Top-k accuracy score": [[1004, "top-k-accuracy-score"]], "Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation": [[55, null]], "Total impurity of leaves vs effective alphas of pruned tree": [[354, "total-impurity-of-leaves-vs-effective-alphas-of-pruned-tree"]], "Totally Random Trees Embedding": [[414, "totally-random-trees-embedding"]], "Toy datasets": [[372, null]], "Tracking feature names in a pipeline": [[408, "tracking-feature-names-in-a-pipeline"]], "Trade-offs: which estimator ?": [[1000, null]], "Train and Persist the Model": [[401, "train-and-persist-the-model"]], "Train classifiers": [[339, "train-classifiers"]], "Train models on the diabetes dataset": [[248, "train-models-on-the-diabetes-dataset"]], "Train tree classifier": [[357, "train-tree-classifier"]], "Training": [[306, "training"], [1007, "training"]], "Training SVC model and plotting decision boundaries": [[343, "training-svc-model-and-plotting-decision-boundaries"]], "Training a Random Forest and Plotting the ROC Curve": [[250, "training-a-random-forest-and-plotting-the-roc-curve"]], "Training a Ridge Regressor": [[315, "training-a-ridge-regressor"]], "Training and Evaluating Pipelines with Different Encoders": [[314, "training-and-evaluating-pipelines-with-different-encoders"]], "Training and prediction with DecisionTree and AdaBoost Regressors": [[136, "training-and-prediction-with-decisiontree-and-adaboost-regressors"]], "Training classifiers": [[158, "training-classifiers"]], "Training of the model": [[151, "training-of-the-model"]], "Training the AdaBoostClassifier": [[135, "training-the-adaboostclassifier"]], "Training the Ridge Regressor": [[214, "training-the-ridge-regressor"]], "Transform": [[1007, "transform"]], "Transform data": [[116, "transform-data"]], "TransformedTargetRegressor": [[465, null]], "TransformerMixin": [[431, null]], "TransformerTags": [[928, null]], "Transformers and pre-processors": [[388, "transformers-and-pre-processors"]], "Transforming data other than X in a Pipeline": [[326, "transforming-data-other-than-x-in-a-pipeline"]], "Transforming target in regression": [[408, "transforming-target-in-regression"]], "Transforming the prediction target (y)": [[1015, null]], "Translations of scikit-learn documentation": [[1023, "translations-of-scikit-learn-documentation"]], "Tree algorithms: ID3, C4.5, C5.0 and CART": [[1020, "tree-algorithms-id3-c4-5-c5-0-and-cart"]], "Tree pruning": [[317, "tree-pruning"]], "Tree structure": [[357, "tree-structure"]], "Tree-based feature selection": [[416, "tree-based-feature-selection"]], "Tree\u2019s Feature Importance from Mean Decrease in Impurity (MDI)": [[187, "tree-s-feature-importance-from-mean-decrease-in-impurity-mdi"]], "Triaging operations for members of the core and contributor experience teams": [[374, "triaging-operations-for-members-of-the-core-and-contributor-experience-teams"]], "Trigonometric features": [[44, "trigonometric-features"]], "Troubleshooting": [[393, "troubleshooting"]], "Truncated singular value decomposition and latent semantic analysis": [[412, "truncated-singular-value-decomposition-and-latent-semantic-analysis"]], "TruncatedSVD": [[545, null]], "TunedThresholdClassifierCV": [[825, null]], "TunedThresholdClassifierCV: Tuning the decision threshold of a binary classifier": [[325, "tunedthresholdclassifiercv-tuning-the-decision-threshold-of-a-binary-classifier"]], "Tuning hyper-parameters": [[266, "tuning-hyper-parameters"]], "Tuning the cut-off point": [[262, "tuning-the-cut-off-point"]], "Tuning the decision threshold": [[262, "tuning-the-decision-threshold"], [282, "tuning-the-decision-threshold"]], "Tuning the decision threshold for class prediction": [[406, null]], "Tuning the hyper-parameters of an estimator": [[993, null]], "Tuning the hyper-parameters of the quantile regressors": [[147, "tuning-the-hyper-parameters-of-the-quantile-regressors"]], "Tweedie regression on insurance claims": [[228, null]], "TweedieRegressor": [[683, null]], "Two-class AdaBoost": [[137, null]], "Type of return values and fitted attributes": [[403, "type-of-return-values-and-fitted-attributes"]], "Types": [[376, "types"]], "T\u00e9l\u00e9com ParisTech": [[1028, "id7"]], "Unbalanced problems": [[1019, "unbalanced-problems"]], "UndefinedMetricWarning": [[580, null]], "Under Development": [[1030, "under-development"]], "Underfitting vs. Overfitting": [[283, null]], "Understanding the decision tree structure": [[357, null]], "Univariate Feature Selection": [[161, null]], "Univariate feature imputation": [[994, "univariate-feature-imputation"]], "Univariate feature selection": [[161, "id1"], [416, "univariate-feature-selection"]], "Univariate vs. Multivariate Imputation": [[994, "univariate-vs-multivariate-imputation"]], "Universal attributes": [[377, "universal-attributes"]], "Unlabeled entries in y": [[1017, null]], "Unsupervised Nearest Neighbors": [[1007, "unsupervised-nearest-neighbors"]], "Unsupervised dimensionality reduction": [[1021, null]], "Unsupervised learning": [[1029, null]], "Unweighted feature selection": [[398, "unweighted-feature-selection"]], "Updating Authors List": [[379, "updating-authors-list"]], "Usage": [[405, "usage"], [408, "usage"], [408, "id1"], [414, "usage"], [414, "id24"], [414, "id25"], [414, "id27"], [414, "id35"], [1000, "usage"]], "Usage Examples": [[398, "usage-examples"]], "Use markdown formatting": [[380, "use-markdown-formatting"]], "Useful pytest aliases and flags": [[383, "useful-pytest-aliases-and-flags"]], "User Guide": [[1030, null]], "User Questions": [[1027, "user-questions"]], "Using Cython": [[381, "using-cython"]], "Using KBinsDiscretizer to discretize continuous features": [[309, null]], "Using None or RandomState instances, and repeated calls to fit and split": [[358, "using-none-or-randomstate-instances-and-repeated-calls-to-fit-and-split"]], "Using OpenMP": [[376, "using-openmp"]], "Using a debugger, gdb": [[381, "using-a-debugger-gdb"]], "Using a lock-file to get an environment close to the CI": [[383, "using-a-lock-file-to-get-an-environment-close-to-the-ci"]], "Using cross-validation": [[1000, "using-cross-validation"]], "Using cross-validation iterators to split train and test": [[411, "using-cross-validation-iterators-to-split-train-and-test"]], "Using feature names to specify monotonic constraints": [[152, "using-feature-names-to-specify-monotonic-constraints"]], "Using gprof": [[381, "using-gprof"]], "Using multiple metric evaluation": [[1004, "using-multiple-metric-evaluation"]], "Using negative tolerance values": [[165, "using-negative-tolerance-values"]], "Using scikit-learn": [[387, "using-scikit-learn"]], "Using stop words": [[415, "using-stop-words"]], "Using valgrind / callgrind / kcachegrind": [[381, "using-valgrind-callgrind-kcachegrind"]], "Using yep and gperftools": [[381, "using-yep-and-gperftools"]], "Utilities for Developers": [[384, null]], "Validation Tools": [[384, "validation-tools"]], "Validation curve": [[999, "validation-curve"]], "Validation curves: plotting scores to evaluate models": [[999, null]], "ValidationCurveDisplay": [[826, null]], "Vanilla predictive model": [[262, "vanilla-predictive-model"]], "VarianceThreshold": [[605, null]], "Variational Bayesian Gaussian Mixture": [[1003, "variational-bayesian-gaussian-mixture"]], "Various Agglomerative Clustering on a 2D embedding of digits": [[86, null]], "Varying regularization in Multi-layer Perceptron": [[303, null]], "Varying the metric": [[407, "varying-the-metric"]], "Vector Quantization Example": [[87, null]], "Vectorizing a large text corpus with the hashing trick": [[415, "vectorizing-a-large-text-corpus-with-the-hashing-trick"]], "Version 0.10": [[1034, "version-0-10"]], "Version 0.11": [[1034, "version-0-11"]], "Version 0.12": [[1034, "version-0-12"]], "Version 0.12.1": [[1034, "version-0-12-1"]], "Version 0.13": [[1035, null], [1035, "changes-0-13"]], "Version 0.13.1": [[1035, "version-0-13-1"]], "Version 0.14": [[1036, null], [1036, "changes-0-14"]], "Version 0.15": [[1037, null], [1037, "changes-0-15"]], "Version 0.15.1": [[1037, "version-0-15-1"]], "Version 0.15.2": [[1037, "version-0-15-2"]], "Version 0.16": [[1038, null], [1038, "changes-0-16"]], "Version 0.16.1": [[1038, "version-0-16-1"]], "Version 0.17": [[1039, null], [1039, "changes-0-17"]], "Version 0.17.1": [[1039, "version-0-17-1"]], "Version 0.18": [[1040, null], [1040, "changes-0-18"]], "Version 0.18.1": [[1040, "version-0-18-1"]], "Version 0.18.2": [[1040, "version-0-18-2"]], "Version 0.19": [[1041, null], [1041, "id1"]], "Version 0.19.1": [[1041, "version-0-19-1"]], "Version 0.19.2": [[1041, "version-0-19-2"]], "Version 0.20": [[1042, null]], "Version 0.20.0": [[1042, "version-0-20-0"]], "Version 0.20.1": [[1042, "version-0-20-1"]], "Version 0.20.2": [[1042, "version-0-20-2"]], "Version 0.20.3": [[1042, "version-0-20-3"]], "Version 0.20.4": [[1042, "version-0-20-4"]], "Version 0.21": [[1043, null]], "Version 0.21.0": [[1043, "version-0-21-0"]], "Version 0.21.1": [[1043, "version-0-21-1"]], "Version 0.21.2": [[1043, "version-0-21-2"]], "Version 0.21.3": [[1043, "version-0-21-3"]], "Version 0.22": [[1044, null]], "Version 0.22.0": [[1044, "version-0-22-0"]], "Version 0.22.1": [[1044, "version-0-22-1"]], "Version 0.22.2.post1": [[1044, "version-0-22-2-post1"]], "Version 0.23": [[1045, null]], "Version 0.23.0": [[1045, "version-0-23-0"]], "Version 0.23.1": [[1045, "version-0-23-1"]], "Version 0.23.2": [[1045, "version-0-23-2"]], "Version 0.24": [[1046, null]], "Version 0.24.0": [[1046, "version-0-24-0"]], "Version 0.24.1": [[1046, "version-0-24-1"]], "Version 0.24.2": [[1046, "version-0-24-2"]], "Version 0.4": [[1034, "version-0-4"]], "Version 0.5": [[1034, "version-0-5"]], "Version 0.6": [[1034, "version-0-6"]], "Version 0.7": [[1034, "version-0-7"]], "Version 0.8": [[1034, "version-0-8"]], "Version 0.9": [[1034, "version-0-9"]], "Version 1.0": [[1047, null]], "Version 1.0.0": [[1047, "version-1-0-0"]], "Version 1.0.1": [[1047, "version-1-0-1"]], "Version 1.0.2": [[1047, "version-1-0-2"]], "Version 1.1": [[1048, null]], "Version 1.1.0": [[1048, "version-1-1-0"]], "Version 1.1.1": [[1048, "version-1-1-1"]], "Version 1.1.2": [[1048, "version-1-1-2"]], "Version 1.1.3": [[1048, "version-1-1-3"]], "Version 1.2": [[1049, null]], "Version 1.2.0": [[1049, "version-1-2-0"]], "Version 1.2.1": [[1049, "version-1-2-1"]], "Version 1.2.2": [[1049, "version-1-2-2"]], "Version 1.3": [[1050, null]], "Version 1.3.0": [[1050, "version-1-3-0"]], "Version 1.3.1": [[1050, "version-1-3-1"]], "Version 1.3.2": [[1050, "version-1-3-2"]], "Version 1.4": [[1051, null]], "Version 1.4.0": [[1051, "version-1-4-0"]], "Version 1.4.1": [[1051, "version-1-4-1"]], "Version 1.4.2": [[1051, "version-1-4-2"]], "Version 1.5": [[1052, null]], "Version 1.5.0": [[1052, "version-1-5-0"]], "Version 1.5.1": [[1052, "version-1-5-1"]], "Version 1.5.2": [[1052, "version-1-5-2"]], "Version 1.6": [[1053, null]], "Version 1.6.0": [[1053, "version-1-6-0"]], "Version 1.6.1": [[1053, "version-1-6-1"]], "Video resources": [[375, "video-resources"]], "Videos": [[1022, "videos"]], "Visual evaluation of regression models": [[1004, "visual-evaluation-of-regression-models"]], "Visualization": [[5, "visualization"], [30, "visualization"], [52, "visualization"], [339, "visualization"]], "Visualization of MLP weights on MNIST": [[305, null]], "Visualization of cluster hierarchy": [[407, "visualization-of-cluster-hierarchy"]], "Visualizations": [[1031, null]], "Visualizations with Display Objects": [[238, null]], "Visualize Comparison": [[145, "visualize-comparison"]], "Visualize cross-validation indices for many CV objects": [[263, "visualize-cross-validation-indices-for-many-cv-objects"]], "Visualize our data": [[263, "visualize-our-data"]], "Visualize the learning curves": [[243, "visualize-the-learning-curves"]], "Visualize the results on PCA-reduced data": [[92, "visualize-the-results-on-pca-reduced-data"]], "Visualize training and prediction times": [[243, "visualize-training-and-prediction-times"]], "Visualizing Composite Estimators": [[408, "visualizing-composite-estimators"]], "Visualizing cross-validation behavior in scikit-learn": [[263, null]], "Visualizing the stock market structure": [[52, null]], "Voting Classifier": [[414, "voting-classifier"]], "Voting Regressor": [[414, "voting-regressor"]], "VotingClassifier": [[570, null]], "VotingRegressor": [[571, null]], "Warnings and Exceptions": [[384, "warnings-and-exceptions"]], "Ways to contribute": [[375, "ways-to-contribute"]], "We are defining k-Nearest Neighbors with 10 neighbors": [[101, "we-are-defining-k-nearest-neighbors-with-10-neighbors"]], "Website update": [[1044, "website-update"]], "Weight handling based on class labels": [[42, "module-sklearn.utils.class_weight"]], "Weighted Average Probabilities (Soft Voting)": [[414, "weighted-average-probabilities-soft-voting"]], "Weighted scoring and fitting": [[398, "weighted-scoring-and-fitting"]], "Weighted scoring and unweighted fitting": [[398, "weighted-scoring-and-unweighted-fitting"]], "What are the inclusion criteria for new algorithms?": [[387, "what-are-the-inclusion-criteria-for-new-algorithms"]], "What is the project name (a lot of people get it wrong)?": [[387, "what-is-the-project-name-a-lot-of-people-get-it-wrong"]], "What is the values array used here?": [[357, "what-is-the-values-array-used-here"]], "What\u2019s the best way to get help on scikit-learn usage?": [[387, "what-s-the-best-way-to-get-help-on-scikit-learn-usage"]], "Which scoring function should I use?": [[1004, "which-scoring-function-should-i-use"]], "WhiteKernel": [[628, null]], "Who is using scikit-learn?": [[1028, null]], "Why are there so many different estimators for linear models?": [[387, "why-are-there-so-many-different-estimators-for-linear-models"]], "Why are you so selective on what algorithms you include in scikit-learn?": [[387, "why-are-you-so-selective-on-what-algorithms-you-include-in-scikit-learn"]], "Why did you remove HMMs from scikit-learn?": [[387, "why-did-you-remove-hmms-from-scikit-learn"]], "Why do I sometimes get a crash/freeze with n_jobs > 1 under OSX or Linux?": [[387, "why-do-i-sometimes-get-a-crash-freeze-with-n-jobs-1-under-osx-or-linux"]], "Why do categorical variables need preprocessing in scikit-learn, compared to other tools?": [[387, "why-do-categorical-variables-need-preprocessing-in-scikit-learn-compared-to-other-tools"]], "Why does my job use more cores than specified with n_jobs?": [[387, "why-does-my-job-use-more-cores-than-specified-with-n-jobs"]], "Why is my pull request not getting any attention?": [[387, "why-is-my-pull-request-not-getting-any-attention"]], "Why is there no support for deep or reinforcement learning? Will there be such support in the future?": [[387, "why-is-there-no-support-for-deep-or-reinforcement-learning-will-there-be-such-support-in-the-future"]], "Why it\u2019s faster": [[414, "why-it-s-faster"]], "Why scikit?": [[387, "why-scikit"]], "Wikipedia principal eigenvector": [[56, null]], "Will you add GPU support?": [[387, "will-you-add-gpu-support"]], "Will you add graphical models or sequence prediction to scikit-learn?": [[387, "will-you-add-graphical-models-or-sequence-prediction-to-scikit-learn"]], "WinPython for Windows": [[393, "winpython-for-windows"]], "Windows": [[373, "windows"]], "Wine recognition dataset": [[372, "wine-recognition-dataset"]], "Workflow Overview": [[401, "workflow-overview"]], "Working on PRs to help review": [[374, "working-on-prs-to-help-review"]], "Working on issues to improve them": [[374, "working-on-issues-to-improve-them"]], "Working with graphs": [[42, "module-sklearn.utils.graph"]], "Working with sparse matrices and arrays": [[42, "module-sklearn.utils.sparsefuncs"]], "Working with text documents": [[182, "working-with-text-documents"], [349, null]], "Wrong causal interpretation": [[185, "wrong-causal-interpretation"]], "XOR dataset": [[343, "xor-dataset"]], "Yhat": [[1028, "id10"]], "Zero one loss": [[1004, "zero-one-loss"]], "Zopa": [[1028, "id27"]], "__sklearn_is_fitted__ as Developer API": [[133, null]], "_safe_indexing": [[929, null]], "accuracy_score": [[706, null]], "add_dummy_feature": [[889, null]], "additive_chi2_kernel": [[761, null]], "adjusted_mutual_info_score": [[707, null]], "adjusted_rand_score": [[708, null]], "affinity_propagation": [[454, null]], "all_displays": [[941, null]], "all_estimators": [[942, null]], "all_functions": [[943, null]], "as_float_array": [[931, null]], "assert_all_finite": [[932, null]], "auc": [[709, null]], "available_if": [[964, null]], "average_precision_score": [[710, null]], "balanced_accuracy_score": [[711, null]], "base.BaseEstimator and mixins:": [[377, null]], "betaworks": [[1028, "id4"]], "binarize": [[890, null]], "brier_score_loss": [[712, null]], "calibration_curve": [[439, null]], "calinski_harabasz_score": [[713, null]], "check_X_y": [[933, null]], "check_array": [[934, null]], "check_consistent_length": [[935, null]], "check_cv": [[827, null]], "check_estimator": [[944, null]], "check_increasing": [[639, null]], "check_is_fitted": [[987, null]], "check_memory": [[988, null]], "check_random_state": [[936, null]], "check_scalar": [[937, null]], "check_scoring": [[714, null]], "check_symmetric": [[989, null]], "chi2": [[606, null]], "chi2_kernel": [[762, null]], "class_likelihood_ratios": [[715, null]], "classification_report": [[716, null]], "clear_data_home": [[486, null]], "clone": [[432, null]], "cluster_optics_dbscan": [[455, null]], "cluster_optics_xi": [[456, null]], "cohen_kappa_score": [[719, null]], "column_or_1d": [[990, null]], "completeness_score": [[720, null]], "compute_class_weight": [[938, null]], "compute_optics_graph": [[457, null]], "compute_sample_weight": [[939, null]], "config_context": [[468, null]], "confusion_matrix": [[721, null]], "consensus_score": [[722, null]], "contingency_matrix": [[717, null]], "cosine_distances": [[763, null]], "cosine_similarity": [[764, null]], "coverage_error": [[723, null]], "cross_val_predict": [[828, null]], "cross_val_score": [[829, null]], "cross_validate": [[830, null]], "d2_absolute_error_score": [[724, null]], "d2_log_loss_score": [[725, null]], "d2_pinball_score": [[726, null]], "d2_tweedie_score": [[727, null]], "davies_bouldin_score": [[728, null]], "dbscan": [[418, null]], "dbscan_clustering": [[89, "dbscan-clustering"]], "dcg_score": [[729, null]], "delayed": [[970, null]], "density": [[948, null]], "deprecated": [[940, null]], "det_curve": [[730, null]], "dict_learning": [[546, null]], "dict_learning_online": [[547, null]], "distance_metrics": [[765, null]], "dump_svmlight_file": [[487, null]], "empirical_covariance": [[477, null]], "enable_halving_search_cv": [[581, null]], "enable_iterative_imputer": [[582, null]], "enet_path": [[684, null]], "estimate_bandwidth": [[458, null]], "estimator_checks_generator": [[945, null]], "estimator_html_repr": [[947, null]], "euclidean_distances": [[766, null]], "explained_variance_score": [[731, null]], "export_graphviz": [[919, null]], "export_text": [[920, null]], "extract_patches_2d": [[586, null]], "f1_score": [[732, null]], "f_classif": [[607, null]], "f_regression": [[608, null]], "fast_logdet": [[949, null]], "fastica": [[419, null]], "fbeta_score": [[733, null]], "fetch_20newsgroups": [[488, null]], "fetch_20newsgroups_vectorized": [[489, null]], "fetch_california_housing": [[490, null]], "fetch_covtype": [[491, null]], "fetch_file": [[492, null]], "fetch_kddcup99": [[493, null]], "fetch_lfw_pairs": [[494, null]], "fetch_lfw_people": [[495, null]], "fetch_olivetti_faces": [[496, null]], "fetch_openml": [[497, null]], "fetch_rcv1": [[498, null]], "fetch_species_distributions": [[499, null]], "fowlkes_mallows_score": [[734, null]], "gen_batches": [[954, null]], "gen_even_slices": [[955, null]], "get_config": [[629, null]], "get_data_home": [[500, null]], "get_feature_names_out Available in all Transformers": [[321, "get-feature-names-out-available-in-all-transformers"]], "get_params and set_params": [[377, "get-params-and-set-params"]], "get_routing_for_object": [[962, null]], "get_scorer": [[735, null]], "get_scorer_names": [[736, null]], "get_tags": [[956, null]], "graphical_lasso": [[478, null]], "grid_to_graph": [[587, null]], "hamming_loss": [[737, null]], "has_fit_parameter": [[991, null]], "haversine_distances": [[767, null]], "hinge_loss": [[738, null]], "homogeneity_completeness_v_measure": [[739, null]], "homogeneity_score": [[740, null]], "img_to_graph": [[588, null]], "incr_mean_variance_axis": [[978, null]], "indexable": [[958, null]], "inplace_column_scale": [[979, null]], "inplace_csr_column_scale": [[980, null]], "inplace_csr_row_normalize_l1": [[985, null]], "inplace_csr_row_normalize_l2": [[986, null]], "inplace_row_scale": [[981, null]], "inplace_swap_column": [[982, null]], "inplace_swap_row": [[983, null]], "is_classifier": [[433, null]], "is_clusterer": [[434, null]], "is_multilabel": [[965, null]], "is_outlier_detector": [[435, null]], "is_regressor": [[436, null]], "isotonic_regression": [[640, null]], "jaccard_score": [[741, null]], "johnson_lindenstrauss_min_dim": [[901, null]], "kNN-imputation of the missing values": [[181, "knn-imputation-of-the-missing-values"]], "k_means": [[459, null]], "kcachegrind": [[381, "kcachegrind"]], "kernel_metrics": [[768, null]], "kmeans_plusplus": [[460, null]], "kneighbors_graph": [[860, null]], "l1_min_c": [[914, null]], "label_binarize": [[891, null]], "label_ranking_average_precision_score": [[742, null]], "label_ranking_loss": [[743, null]], "laplacian_kernel": [[769, null]], "lars_path": [[685, null]], "lars_path_gram": [[686, null]], "lasso_path": [[687, null]], "learning_curve": [[831, null]], "ledoit_wolf": [[479, null]], "ledoit_wolf_shrinkage": [[480, null]], "linear_kernel": [[770, null]], "load_breast_cancer": [[501, null]], "load_diabetes": [[502, null]], "load_digits": [[503, null]], "load_files": [[504, null]], "load_iris": [[505, null]], "load_linnerud": [[506, null]], "load_sample_image": [[507, null]], "load_sample_images": [[508, null]], "load_svmlight_file": [[509, null]], "load_svmlight_files": [[510, null]], "load_wine": [[511, null]], "locally_linear_embedding": [[696, null]], "log_loss": [[744, null]], "macOS": [[373, "macos"]], "macOS compilers from Homebrew": [[373, "macos-compilers-from-homebrew"]], "macOS compilers from conda-forge": [[373, "macos-compilers-from-conda-forge"]], "make_biclusters": [[512, null]], "make_blobs": [[380, "make-blobs"], [513, null]], "make_checkerboard": [[514, null]], "make_circles": [[515, null]], "make_classification": [[380, "make-classification"], [516, null]], "make_column_selector": [[466, null]], "make_column_transformer": [[467, null]], "make_friedman1": [[517, null]], "make_friedman2": [[518, null]], "make_friedman3": [[519, null]], "make_gaussian_quantiles": [[520, null]], "make_hastie_10_2": [[521, null]], "make_low_rank_matrix": [[522, null]], "make_moons": [[523, null]], "make_multilabel_classification": [[524, null]], "make_pipeline": [[868, null]], "make_regression": [[380, "make-regression"], [525, null]], "make_s_curve": [[526, null]], "make_scorer": [[745, null]], "make_sparse_coded_signal": [[527, null]], "make_sparse_spd_matrix": [[528, null]], "make_sparse_uncorrelated": [[529, null]], "make_spd_matrix": [[530, null]], "make_swiss_roll": [[531, null]], "make_union": [[869, null]], "manhattan_distances": [[771, null]], "matthews_corrcoef": [[746, null]], "max_error": [[747, null]], "maxabs_scale": [[892, null]], "mean_absolute_error": [[748, null]], "mean_absolute_percentage_error": [[749, null]], "mean_gamma_deviance": [[750, null]], "mean_pinball_loss": [[751, null]], "mean_poisson_deviance": [[752, null]], "mean_shift": [[461, null]], "mean_squared_error": [[753, null]], "mean_squared_log_error": [[754, null]], "mean_tweedie_deviance": [[755, null]], "mean_variance_axis": [[984, null]], "median_absolute_error": [[756, null]], "min_cluster_size": [[89, "min-cluster-size"]], "min_pos": [[930, null]], "min_samples": [[89, "min-samples"]], "minmax_scale": [[893, null]], "multilabel_confusion_matrix": [[757, null]], "murmurhash3_32": [[968, null]], "mutual_info_classif": [[609, null]], "mutual_info_regression": [[610, null]], "mutual_info_score": [[758, null]], "nan_euclidean_distances": [[772, null]], "ndcg_score": [[759, null]], "non_negative_factorization": [[548, null]], "normalize": [[894, null]], "normalized_mutual_info_score": [[760, null]], "oas": [[420, null]], "orthogonal_mp": [[688, null]], "orthogonal_mp_gram": [[689, null]], "pair_confusion_matrix": [[718, null]], "paired_cosine_distances": [[773, null]], "paired_distances": [[774, null]], "paired_euclidean_distances": [[775, null]], "paired_manhattan_distances": [[776, null]], "pairwise_distances": [[781, null]], "pairwise_distances_argmin": [[782, null]], "pairwise_distances_argmin_min": [[783, null]], "pairwise_distances_chunked": [[784, null]], "pairwise_kernels": [[777, null]], "parallel_backend": [[971, null]], "parametrize_with_checks": [[946, null]], "partial_dependence": [[636, null]], "permutation_importance": [[637, null]], "permutation_test_score": [[832, null]], "pickle, joblib, and cloudpickle": [[401, "pickle-joblib-and-cloudpickle"]], "plot_tree": [[921, null]], "polynomial_kernel": [[778, null]], "power_transform": [[895, null]], "precision_recall_curve": [[785, null]], "precision_recall_fscore_support": [[786, null]], "precision_score": [[787, null]], "process_routing": [[963, null]], "quantile_transform": [[896, null]], "r2_score": [[788, null]], "r_regression": [[611, null]], "radius_neighbors_graph": [[861, null]], "rand_score": [[789, null]], "randomized_range_finder": [[950, null]], "randomized_svd": [[951, null]], "rbf_kernel": [[779, null]], "recall_score": [[790, null]], "reconstruct_from_patches_2d": [[589, null]], "register_parallel_backend": [[973, null]], "resample": [[974, null]], "ridge_regression": [[690, null]], "robust_scale": [[897, null]], "roc_auc_score": [[791, null]], "roc_curve": [[792, null]], "root_mean_squared_error": [[793, null]], "root_mean_squared_log_error": [[794, null]], "safe_mask": [[975, null]], "safe_sparse_dot": [[952, null]], "safe_sqr": [[976, null]], "sample_without_replacement": [[972, null]], "scale": [[898, null]], "set_config": [[905, null]], "show_versions": [[906, null]], "shrunk_covariance": [[481, null]], "shuffle": [[977, null]], "sigmoid_kernel": [[780, null]], "silhouette_samples": [[795, null]], "silhouette_score": [[796, null]], "single_source_shortest_path_length": [[957, null]], "sklearn": [[3, null], [1050, "sklearn"]], "sklearn.base": [[4, null], [1043, "sklearn-base"], [1044, "sklearn-base"], [1046, "sklearn-base"], [1047, "sklearn-base"], [1048, "sklearn-base"], [1049, "sklearn-base"], [1049, "id2"], [1049, "id10"], [1050, "sklearn-base"], [1051, "sklearn-base"], [1053, "sklearn-base"]], "sklearn.calibration": [[5, null], [1043, "sklearn-calibration"], [1044, "sklearn-calibration"], [1046, "sklearn-calibration"], [1047, "sklearn-calibration"], [1047, "id7"], [1048, "sklearn-calibration"], [1049, "sklearn-calibration"], [1049, "id11"], [1050, "sklearn-calibration"], [1050, "id7"], [1051, "sklearn-calibration"], [1051, "id4"], [1052, "sklearn-calibration"], [1052, "id7"], [1053, "sklearn-calibration"]], "sklearn.cluster": [[6, null], [1042, "sklearn-cluster"], [1042, "id2"], [1042, "id11"], [1042, "id24"], [1043, "sklearn-cluster"], [1043, "id8"], [1044, "sklearn-cluster"], [1044, "id5"], [1045, "sklearn-cluster"], [1045, "id2"], [1045, "id5"], [1046, "sklearn-cluster"], [1047, "sklearn-cluster"], [1047, "id1"], [1047, "id8"], [1048, "sklearn-cluster"], [1048, "id8"], [1049, "sklearn-cluster"], [1049, "id12"], [1050, "sklearn-cluster"], [1050, "id8"], [1051, "sklearn-cluster"], [1051, "id5"], [1052, "sklearn-cluster"], [1053, "sklearn-cluster"]], "sklearn.compose": [[7, null], [1042, "sklearn-compose"], [1042, "id3"], [1042, "id6"], [1042, "id12"], [1042, "id25"], [1043, "sklearn-compose"], [1043, "id9"], [1044, "sklearn-compose"], [1045, "sklearn-compose"], [1046, "sklearn-compose"], [1046, "id5"], [1047, "sklearn-compose"], [1048, "sklearn-compose"], [1049, "sklearn-compose"], [1050, "sklearn-compose"], [1051, "sklearn-compose"], [1051, "id6"], [1052, "sklearn-compose"], [1052, "id3"], [1052, "id8"], [1053, "sklearn-compose"]], "sklearn.covariance": [[8, null], [1042, "sklearn-covariance"], [1042, "id26"], [1046, "sklearn-covariance"], [1047, "sklearn-covariance"], [1048, "sklearn-covariance"], [1050, "sklearn-covariance"], [1051, "sklearn-covariance"], [1053, "sklearn-covariance"]], "sklearn.cross_decomposition": [[9, null], [1044, "sklearn-cross-decomposition"], [1046, "sklearn-cross-decomposition"], [1046, "id6"], [1048, "sklearn-cross-decomposition"], [1050, "sklearn-cross-decomposition"], [1052, "sklearn-cross-decomposition"], [1053, "sklearn-cross-decomposition"]], "sklearn.datasets": [[10, null], [1042, "sklearn-datasets"], [1042, "id13"], [1042, "id27"], [1043, "sklearn-datasets"], [1043, "id10"], [1044, "sklearn-datasets"], [1045, "sklearn-datasets"], [1046, "sklearn-datasets"], [1047, "sklearn-datasets"], [1047, "id9"], [1048, "sklearn-datasets"], [1048, "id9"], [1049, "sklearn-datasets"], [1049, "id13"], [1050, "sklearn-datasets"], [1050, "id9"], [1051, "sklearn-datasets"], [1052, "sklearn-datasets"], [1053, "sklearn-datasets"]], "sklearn.decomposition": [[11, null], [1042, "sklearn-decomposition"], [1042, "id4"], [1042, "id14"], [1042, "id28"], [1043, "sklearn-decomposition"], [1043, "id11"], [1044, "sklearn-decomposition"], [1045, "sklearn-decomposition"], [1045, "id6"], [1046, "sklearn-decomposition"], [1046, "id7"], [1047, "sklearn-decomposition"], [1047, "id10"], [1048, "sklearn-decomposition"], [1048, "id10"], [1049, "sklearn-decomposition"], [1049, "id14"], [1050, "sklearn-decomposition"], [1050, "id10"], [1051, "sklearn-decomposition"], [1052, "sklearn-decomposition"], [1052, "id9"], [1053, "sklearn-decomposition"]], "sklearn.discriminant_analysis": [[12, null], [1042, "sklearn-discriminant-analysis"], [1043, "sklearn-discriminant-analysis"], [1046, "sklearn-discriminant-analysis"], [1048, "sklearn-discriminant-analysis"], [1049, "sklearn-discriminant-analysis"], [1050, "sklearn-discriminant-analysis"], [1053, "sklearn-discriminant-analysis"]], "sklearn.dummy": [[13, null], [1042, "sklearn-dummy"], [1043, "sklearn-dummy"], [1044, "sklearn-dummy"], [1047, "sklearn-dummy"], [1048, "sklearn-dummy"], [1052, "sklearn-dummy"]], "sklearn.ensemble": [[14, null], [1042, "sklearn-ensemble"], [1042, "id29"], [1043, "sklearn-ensemble"], [1043, "id12"], [1044, "sklearn-ensemble"], [1045, "sklearn-ensemble"], [1045, "id7"], [1046, "sklearn-ensemble"], [1046, "id8"], [1047, "sklearn-ensemble"], [1047, "id2"], [1047, "id11"], [1048, "sklearn-ensemble"], [1049, "sklearn-ensemble"], [1049, "id3"], [1049, "id15"], [1050, "sklearn-ensemble"], [1050, "id11"], [1051, "sklearn-ensemble"], [1051, "id7"], [1052, "sklearn-ensemble"], [1053, "sklearn-ensemble"]], "sklearn.exceptions": [[15, null], [1046, "sklearn-exceptions"], [1050, "sklearn-exceptions"]], "sklearn.experimental": [[16, null]], "sklearn.externals": [[1043, "sklearn-externals"]], "sklearn.feature_extraction": [[17, null], [1042, "sklearn-feature-extraction"], [1042, "id15"], [1042, "id30"], [1043, "sklearn-feature-extraction"], [1044, "sklearn-feature-extraction"], [1045, "sklearn-feature-extraction"], [1045, "id8"], [1046, "sklearn-feature-extraction"], [1046, "id9"], [1047, "sklearn-feature-extraction"], [1047, "id12"], [1048, "sklearn-feature-extraction"], [1049, "sklearn-feature-extraction"], [1050, "sklearn-feature-extraction"], [1051, "sklearn-feature-extraction"], [1052, "sklearn-feature-extraction"], [1053, "sklearn-feature-extraction"]], "sklearn.feature_selection": [[18, null], [1042, "sklearn-feature-selection"], [1044, "sklearn-feature-selection"], [1045, "sklearn-feature-selection"], [1046, "sklearn-feature-selection"], [1047, "sklearn-feature-selection"], [1047, "id13"], [1048, "sklearn-feature-selection"], [1048, "id2"], [1048, "id11"], [1049, "sklearn-feature-selection"], [1049, "id16"], [1050, "sklearn-feature-selection"], [1050, "id12"], [1051, "sklearn-feature-selection"], [1052, "sklearn-feature-selection"]], "sklearn.frozen": [[19, null], [1053, "sklearn-frozen"]], "sklearn.gaussian_process": [[20, null], [1042, "sklearn-gaussian-process"], [1044, "sklearn-gaussian-process"], [1045, "sklearn-gaussian-process"], [1046, "sklearn-gaussian-process"], [1046, "id10"], [1047, "sklearn-gaussian-process"], [1048, "sklearn-gaussian-process"], [1049, "sklearn-gaussian-process"], [1050, "sklearn-gaussian-process"]], "sklearn.impute": [[21, null], [1042, "sklearn-impute"], [1042, "id31"], [1043, "sklearn-impute"], [1043, "id13"], [1044, "sklearn-impute"], [1044, "id6"], [1045, "sklearn-impute"], [1046, "sklearn-impute"], [1047, "sklearn-impute"], [1048, "sklearn-impute"], [1048, "id12"], [1049, "sklearn-impute"], [1050, "sklearn-impute"], [1050, "id13"], [1051, "sklearn-impute"], [1052, "sklearn-impute"], [1053, "sklearn-impute"]], "sklearn.inspection": [[22, null], [1043, "sklearn-inspection"], [1043, "id3"], [1043, "id14"], [1044, "sklearn-inspection"], [1044, "id7"], [1045, "sklearn-inspection"], [1045, "id11"], [1046, "sklearn-inspection"], [1047, "sklearn-inspection"], [1048, "sklearn-inspection"], [1049, "sklearn-inspection"], [1049, "id17"], [1050, "sklearn-inspection"], [1051, "sklearn-inspection"], [1051, "id8"], [1052, "sklearn-inspection"]], "sklearn.isotonic": [[23, null], [1042, "sklearn-isotonic"], [1043, "sklearn-isotonic"], [1044, "sklearn-isotonic"], [1046, "sklearn-isotonic"], [1048, "sklearn-isotonic"], [1049, "sklearn-isotonic"]], "sklearn.kernel_approximation": [[24, null], [1044, "sklearn-kernel-approximation"], [1046, "sklearn-kernel-approximation"], [1047, "sklearn-kernel-approximation"], [1048, "sklearn-kernel-approximation"], [1049, "sklearn-kernel-approximation"], [1050, "sklearn-kernel-approximation"]], "sklearn.kernel_ridge": [[25, null], [1051, "sklearn-kernel-ridge"]], "sklearn.linear_model": [[26, null], [1042, "sklearn-linear-model"], [1042, "id16"], [1042, "id32"], [1043, "sklearn-linear-model"], [1043, "id15"], [1044, "sklearn-linear-model"], [1045, "sklearn-linear-model"], [1045, "id9"], [1046, "sklearn-linear-model"], [1046, "id11"], [1047, "sklearn-linear-model"], [1047, "id3"], [1047, "id14"], [1048, "sklearn-linear-model"], [1048, "id13"], [1049, "sklearn-linear-model"], [1049, "id18"], [1050, "sklearn-linear-model"], [1051, "sklearn-linear-model"], [1051, "id9"], [1052, "sklearn-linear-model"], [1053, "sklearn-linear-model"]], "sklearn.manifold": [[27, null], [1042, "sklearn-manifold"], [1043, "sklearn-manifold"], [1044, "sklearn-manifold"], [1045, "sklearn-manifold"], [1046, "sklearn-manifold"], [1047, "sklearn-manifold"], [1047, "id15"], [1048, "sklearn-manifold"], [1048, "id14"], [1049, "sklearn-manifold"], [1049, "id19"], [1050, "sklearn-manifold"], [1052, "sklearn-manifold"], [1053, "sklearn-manifold"]], "sklearn.metrics": [[28, null], [1042, "sklearn-metrics"], [1042, "id17"], [1042, "id33"], [1043, "sklearn-metrics"], [1043, "id4"], [1043, "id16"], [1044, "sklearn-metrics"], [1044, "id2"], [1044, "id8"], [1045, "sklearn-metrics"], [1045, "id10"], [1046, "sklearn-metrics"], [1046, "id2"], [1046, "id12"], [1047, "sklearn-metrics"], [1047, "id16"], [1048, "sklearn-metrics"], [1048, "id3"], [1048, "id15"], [1049, "sklearn-metrics"], [1050, "sklearn-metrics"], [1050, "id2"], [1050, "id14"], [1051, "sklearn-metrics"], [1052, "sklearn-metrics"], [1052, "id4"], [1052, "id10"], [1053, "sklearn-metrics"], [1053, "id2"]], "sklearn.mixture": [[29, null], [1042, "sklearn-mixture"], [1042, "id34"], [1043, "sklearn-mixture"], [1047, "sklearn-mixture"], [1048, "sklearn-mixture"], [1050, "sklearn-mixture"], [1050, "id15"], [1052, "sklearn-mixture"]], "sklearn.model_selection": [[30, null], [1042, "sklearn-model-selection"], [1042, "id35"], [1043, "sklearn-model-selection"], [1044, "sklearn-model-selection"], [1044, "id9"], [1044, "id13"], [1045, "sklearn-model-selection"], [1046, "sklearn-model-selection"], [1046, "id13"], [1047, "sklearn-model-selection"], [1048, "sklearn-model-selection"], [1049, "sklearn-model-selection"], [1049, "id20"], [1050, "sklearn-model-selection"], [1051, "sklearn-model-selection"], [1052, "sklearn-model-selection"], [1052, "id11"], [1053, "sklearn-model-selection"], [1053, "id3"]], "sklearn.multiclass": [[31, null], [1043, "sklearn-multiclass"], [1046, "sklearn-multiclass"], [1047, "sklearn-multiclass"], [1048, "sklearn-multiclass"]], "sklearn.multioutput": [[32, null], [1042, "sklearn-multioutput"], [1043, "sklearn-multioutput"], [1044, "sklearn-multioutput"], [1045, "sklearn-multioutput"], [1046, "sklearn-multioutput"], [1046, "id14"], [1049, "sklearn-multioutput"], [1050, "sklearn-multioutput"], [1051, "sklearn-multioutput"], [1052, "sklearn-multioutput"]], "sklearn.naive_bayes": [[33, null], [1042, "sklearn-naive-bayes"], [1044, "sklearn-naive-bayes"], [1044, "id10"], [1045, "sklearn-naive-bayes"], [1046, "sklearn-naive-bayes"], [1047, "sklearn-naive-bayes"], [1049, "sklearn-naive-bayes"], [1050, "sklearn-naive-bayes"]], "sklearn.neighbors": [[34, null], [1042, "sklearn-neighbors"], [1042, "id7"], [1042, "id18"], [1042, "id36"], [1043, "sklearn-neighbors"], [1043, "id5"], [1043, "id17"], [1044, "sklearn-neighbors"], [1044, "id11"], [1046, "sklearn-neighbors"], [1047, "sklearn-neighbors"], [1047, "id4"], [1047, "id17"], [1048, "sklearn-neighbors"], [1049, "sklearn-neighbors"], [1050, "sklearn-neighbors"], [1050, "id16"], [1051, "sklearn-neighbors"], [1052, "sklearn-neighbors"], [1053, "sklearn-neighbors"]], "sklearn.neural_network": [[35, null], [1042, "sklearn-neural-network"], [1043, "sklearn-neural-network"], [1044, "sklearn-neural-network"], [1045, "sklearn-neural-network"], [1046, "sklearn-neural-network"], [1047, "sklearn-neural-network"], [1048, "sklearn-neural-network"], [1049, "sklearn-neural-network"], [1049, "id21"], [1050, "sklearn-neural-network"], [1053, "sklearn-neural-network"]], "sklearn.pipeline": [[36, null], [1042, "sklearn-pipeline"], [1043, "sklearn-pipeline"], [1044, "sklearn-pipeline"], [1045, "sklearn-pipeline"], [1046, "sklearn-pipeline"], [1047, "sklearn-pipeline"], [1047, "id18"], [1048, "sklearn-pipeline"], [1049, "sklearn-pipeline"], [1050, "sklearn-pipeline"], [1052, "sklearn-pipeline"], [1053, "sklearn-pipeline"]], "sklearn.preprocessing": [[37, null], [1042, "sklearn-preprocessing"], [1042, "id19"], [1042, "id37"], [1043, "sklearn-preprocessing"], [1043, "id18"], [1044, "sklearn-preprocessing"], [1044, "id12"], [1045, "sklearn-preprocessing"], [1046, "sklearn-preprocessing"], [1046, "id15"], [1047, "sklearn-preprocessing"], [1047, "id19"], [1048, "sklearn-preprocessing"], [1048, "id4"], [1048, "id16"], [1049, "sklearn-preprocessing"], [1049, "id4"], [1049, "id22"], [1050, "sklearn-preprocessing"], [1050, "id17"], [1051, "sklearn-preprocessing"], [1051, "id10"], [1052, "sklearn-preprocessing"], [1053, "sklearn-preprocessing"]], "sklearn.random_projection": [[38, null], [1048, "sklearn-random-projection"]], "sklearn.semi_supervised": [[39, null], [1044, "sklearn-semi-supervised"], [1045, "sklearn-semi-supervised"], [1046, "sklearn-semi-supervised"], [1046, "id3"], [1046, "id16"], [1050, "sklearn-semi-supervised"], [1053, "sklearn-semi-supervised"]], "sklearn.svm": [[40, null], [1042, "sklearn-svm"], [1042, "id38"], [1043, "sklearn-svm"], [1044, "sklearn-svm"], [1045, "sklearn-svm"], [1046, "sklearn-svm"], [1047, "sklearn-svm"], [1047, "id20"], [1048, "sklearn-svm"], [1049, "sklearn-svm"], [1050, "sklearn-svm"], [1052, "sklearn-svm"]], "sklearn.tree": [[41, null], [1042, "sklearn-tree"], [1043, "sklearn-tree"], [1043, "id19"], [1044, "sklearn-tree"], [1045, "sklearn-tree"], [1046, "sklearn-tree"], [1046, "id17"], [1047, "sklearn-tree"], [1047, "id21"], [1048, "sklearn-tree"], [1048, "id5"], [1048, "id17"], [1049, "sklearn-tree"], [1049, "id5"], [1049, "id23"], [1050, "sklearn-tree"], [1050, "id3"], [1050, "id18"], [1051, "sklearn-tree"], [1051, "id11"], [1052, "sklearn-tree"], [1052, "id12"], [1053, "sklearn-tree"], [1053, "id4"]], "sklearn.utils": [[42, null], [1042, "sklearn-utils"], [1042, "id20"], [1042, "id39"], [1043, "sklearn-utils"], [1044, "sklearn-utils"], [1044, "id14"], [1045, "sklearn-utils"], [1045, "id12"], [1046, "sklearn-utils"], [1046, "id18"], [1047, "sklearn-utils"], [1047, "id5"], [1047, "id22"], [1048, "sklearn-utils"], [1048, "id18"], [1049, "sklearn-utils"], [1049, "id6"], [1049, "id24"], [1050, "sklearn-utils"], [1051, "sklearn-utils"], [1051, "id12"], [1052, "sklearn-utils"], [1052, "id13"], [1053, "sklearn-utils"], [1053, "id5"]], "sklearn.utils.sparsefuncs": [[1043, "sklearn-utils-sparsefuncs"]], "skops.io": [[401, "skops-io"]], "smacof": [[697, null]], "solido": [[1028, "id23"]], "sort_graph_by_row_values": [[862, null]], "sparse_encode": [[549, null]], "spectral_clustering": [[462, null]], "spectral_embedding": [[698, null]], "t-SNE: The effect of various perplexity values on the shape": [[235, null]], "t-distributed Stochastic Neighbor Embedding (t-SNE)": [[1001, "t-distributed-stochastic-neighbor-embedding-t-sne"]], "top_k_accuracy_score": [[797, null]], "train_test_split": [[833, null]], "trustworthiness": [[699, null]], "type_of_target": [[966, null]], "unique_labels": [[967, null]], "v_measure_score": [[798, null]], "validate_data": [[992, null]], "validation_curve": [[834, null]], "ward_tree": [[463, null]], "weighted_mode": [[953, null]], "zero_one_loss": [[799, null]], "\u201cStatlog\u201d German credit dataset": [[262, "statlog-german-credit-dataset"]]}, "docnames": ["about", "api/deprecated", "api/index", "api/sklearn", "api/sklearn.base", "api/sklearn.calibration", "api/sklearn.cluster", "api/sklearn.compose", "api/sklearn.covariance", "api/sklearn.cross_decomposition", "api/sklearn.datasets", "api/sklearn.decomposition", "api/sklearn.discriminant_analysis", "api/sklearn.dummy", "api/sklearn.ensemble", "api/sklearn.exceptions", "api/sklearn.experimental", "api/sklearn.feature_extraction", "api/sklearn.feature_selection", "api/sklearn.frozen", "api/sklearn.gaussian_process", "api/sklearn.impute", "api/sklearn.inspection", "api/sklearn.isotonic", "api/sklearn.kernel_approximation", "api/sklearn.kernel_ridge", "api/sklearn.linear_model", "api/sklearn.manifold", "api/sklearn.metrics", "api/sklearn.mixture", "api/sklearn.model_selection", "api/sklearn.multiclass", "api/sklearn.multioutput", "api/sklearn.naive_bayes", "api/sklearn.neighbors", "api/sklearn.neural_network", "api/sklearn.pipeline", "api/sklearn.preprocessing", "api/sklearn.random_projection", "api/sklearn.semi_supervised", "api/sklearn.svm", "api/sklearn.tree", "api/sklearn.utils", "auto_examples/applications/index", "auto_examples/applications/plot_cyclical_feature_engineering", "auto_examples/applications/plot_digits_denoising", "auto_examples/applications/plot_face_recognition", "auto_examples/applications/plot_model_complexity_influence", "auto_examples/applications/plot_out_of_core_classification", "auto_examples/applications/plot_outlier_detection_wine", "auto_examples/applications/plot_prediction_latency", "auto_examples/applications/plot_species_distribution_modeling", "auto_examples/applications/plot_stock_market", "auto_examples/applications/plot_time_series_lagged_features", "auto_examples/applications/plot_tomography_l1_reconstruction", "auto_examples/applications/plot_topics_extraction_with_nmf_lda", "auto_examples/applications/wikipedia_principal_eigenvector", "auto_examples/bicluster/index", "auto_examples/bicluster/plot_bicluster_newsgroups", "auto_examples/bicluster/plot_spectral_biclustering", "auto_examples/bicluster/plot_spectral_coclustering", "auto_examples/calibration/index", "auto_examples/calibration/plot_calibration", "auto_examples/calibration/plot_calibration_curve", "auto_examples/calibration/plot_calibration_multiclass", "auto_examples/calibration/plot_compare_calibration", "auto_examples/classification/index", "auto_examples/classification/plot_classification_probability", "auto_examples/classification/plot_classifier_comparison", "auto_examples/classification/plot_digits_classification", "auto_examples/classification/plot_lda", "auto_examples/classification/plot_lda_qda", "auto_examples/cluster/index", "auto_examples/cluster/plot_adjusted_for_chance_measures", "auto_examples/cluster/plot_affinity_propagation", "auto_examples/cluster/plot_agglomerative_clustering", "auto_examples/cluster/plot_agglomerative_clustering_metrics", "auto_examples/cluster/plot_agglomerative_dendrogram", "auto_examples/cluster/plot_birch_vs_minibatchkmeans", "auto_examples/cluster/plot_bisect_kmeans", "auto_examples/cluster/plot_cluster_comparison", "auto_examples/cluster/plot_coin_segmentation", "auto_examples/cluster/plot_coin_ward_segmentation", "auto_examples/cluster/plot_dbscan", "auto_examples/cluster/plot_dict_face_patches", "auto_examples/cluster/plot_digits_agglomeration", "auto_examples/cluster/plot_digits_linkage", "auto_examples/cluster/plot_face_compress", "auto_examples/cluster/plot_feature_agglomeration_vs_univariate_selection", "auto_examples/cluster/plot_hdbscan", "auto_examples/cluster/plot_inductive_clustering", "auto_examples/cluster/plot_kmeans_assumptions", "auto_examples/cluster/plot_kmeans_digits", "auto_examples/cluster/plot_kmeans_plusplus", "auto_examples/cluster/plot_kmeans_silhouette_analysis", "auto_examples/cluster/plot_kmeans_stability_low_dim_dense", "auto_examples/cluster/plot_linkage_comparison", "auto_examples/cluster/plot_mean_shift", "auto_examples/cluster/plot_mini_batch_kmeans", "auto_examples/cluster/plot_optics", "auto_examples/cluster/plot_segmentation_toy", "auto_examples/cluster/plot_ward_structured_vs_unstructured", "auto_examples/compose/index", "auto_examples/compose/plot_column_transformer", "auto_examples/compose/plot_column_transformer_mixed_types", "auto_examples/compose/plot_compare_reduction", "auto_examples/compose/plot_digits_pipe", "auto_examples/compose/plot_feature_union", "auto_examples/compose/plot_transformed_target", "auto_examples/covariance/index", "auto_examples/covariance/plot_covariance_estimation", "auto_examples/covariance/plot_lw_vs_oas", "auto_examples/covariance/plot_mahalanobis_distances", "auto_examples/covariance/plot_robust_vs_empirical_covariance", "auto_examples/covariance/plot_sparse_cov", "auto_examples/cross_decomposition/index", "auto_examples/cross_decomposition/plot_compare_cross_decomposition", "auto_examples/cross_decomposition/plot_pcr_vs_pls", "auto_examples/datasets/index", "auto_examples/datasets/plot_random_multilabel_dataset", "auto_examples/decomposition/index", "auto_examples/decomposition/plot_faces_decomposition", "auto_examples/decomposition/plot_ica_blind_source_separation", "auto_examples/decomposition/plot_ica_vs_pca", "auto_examples/decomposition/plot_image_denoising", "auto_examples/decomposition/plot_incremental_pca", "auto_examples/decomposition/plot_kernel_pca", "auto_examples/decomposition/plot_pca_iris", "auto_examples/decomposition/plot_pca_vs_fa_model_selection", "auto_examples/decomposition/plot_pca_vs_lda", "auto_examples/decomposition/plot_sparse_coding", "auto_examples/decomposition/plot_varimax_fa", "auto_examples/developing_estimators/index", "auto_examples/developing_estimators/sklearn_is_fitted", "auto_examples/ensemble/index", "auto_examples/ensemble/plot_adaboost_multiclass", "auto_examples/ensemble/plot_adaboost_regression", "auto_examples/ensemble/plot_adaboost_twoclass", "auto_examples/ensemble/plot_bias_variance", "auto_examples/ensemble/plot_ensemble_oob", "auto_examples/ensemble/plot_feature_transformation", "auto_examples/ensemble/plot_forest_hist_grad_boosting_comparison", "auto_examples/ensemble/plot_forest_importances", "auto_examples/ensemble/plot_forest_iris", "auto_examples/ensemble/plot_gradient_boosting_categorical", "auto_examples/ensemble/plot_gradient_boosting_early_stopping", "auto_examples/ensemble/plot_gradient_boosting_oob", "auto_examples/ensemble/plot_gradient_boosting_quantile", "auto_examples/ensemble/plot_gradient_boosting_regression", "auto_examples/ensemble/plot_gradient_boosting_regularization", "auto_examples/ensemble/plot_hgbt_regression", "auto_examples/ensemble/plot_isolation_forest", "auto_examples/ensemble/plot_monotonic_constraints", "auto_examples/ensemble/plot_random_forest_embedding", "auto_examples/ensemble/plot_random_forest_regression_multioutput", "auto_examples/ensemble/plot_stack_predictors", "auto_examples/ensemble/plot_voting_decision_regions", "auto_examples/ensemble/plot_voting_probas", "auto_examples/ensemble/plot_voting_regressor", "auto_examples/feature_selection/index", "auto_examples/feature_selection/plot_f_test_vs_mi", "auto_examples/feature_selection/plot_feature_selection", "auto_examples/feature_selection/plot_feature_selection_pipeline", "auto_examples/feature_selection/plot_rfe_digits", "auto_examples/feature_selection/plot_rfe_with_cross_validation", "auto_examples/feature_selection/plot_select_from_model_diabetes", "auto_examples/frozen/index", "auto_examples/frozen/plot_frozen_examples", "auto_examples/gaussian_process/index", "auto_examples/gaussian_process/plot_compare_gpr_krr", "auto_examples/gaussian_process/plot_gpc", "auto_examples/gaussian_process/plot_gpc_iris", "auto_examples/gaussian_process/plot_gpc_isoprobability", "auto_examples/gaussian_process/plot_gpc_xor", "auto_examples/gaussian_process/plot_gpr_co2", "auto_examples/gaussian_process/plot_gpr_noisy", "auto_examples/gaussian_process/plot_gpr_noisy_targets", "auto_examples/gaussian_process/plot_gpr_on_structured_data", "auto_examples/gaussian_process/plot_gpr_prior_posterior", "auto_examples/impute/index", "auto_examples/impute/plot_iterative_imputer_variants_comparison", "auto_examples/impute/plot_missing_values", "auto_examples/index", "auto_examples/inspection/index", "auto_examples/inspection/plot_causal_interpretation", "auto_examples/inspection/plot_linear_model_coefficient_interpretation", "auto_examples/inspection/plot_partial_dependence", "auto_examples/inspection/plot_permutation_importance", "auto_examples/inspection/plot_permutation_importance_multicollinear", "auto_examples/kernel_approximation/index", "auto_examples/kernel_approximation/plot_scalable_poly_kernels", "auto_examples/linear_model/index", "auto_examples/linear_model/plot_ard", "auto_examples/linear_model/plot_bayesian_ridge_curvefit", "auto_examples/linear_model/plot_elastic_net_precomputed_gram_matrix_with_weighted_samples", "auto_examples/linear_model/plot_huber_vs_ridge", "auto_examples/linear_model/plot_lasso_and_elasticnet", "auto_examples/linear_model/plot_lasso_dense_vs_sparse_data", "auto_examples/linear_model/plot_lasso_lars_ic", "auto_examples/linear_model/plot_lasso_lasso_lars_elasticnet_path", "auto_examples/linear_model/plot_lasso_model_selection", "auto_examples/linear_model/plot_logistic", "auto_examples/linear_model/plot_logistic_l1_l2_sparsity", "auto_examples/linear_model/plot_logistic_multinomial", "auto_examples/linear_model/plot_logistic_path", "auto_examples/linear_model/plot_multi_task_lasso_support", "auto_examples/linear_model/plot_nnls", "auto_examples/linear_model/plot_ols", "auto_examples/linear_model/plot_ols_ridge_variance", "auto_examples/linear_model/plot_omp", "auto_examples/linear_model/plot_poisson_regression_non_normal_loss", "auto_examples/linear_model/plot_polynomial_interpolation", "auto_examples/linear_model/plot_quantile_regression", "auto_examples/linear_model/plot_ransac", "auto_examples/linear_model/plot_ridge_coeffs", "auto_examples/linear_model/plot_ridge_path", "auto_examples/linear_model/plot_robust_fit", "auto_examples/linear_model/plot_sgd_comparison", "auto_examples/linear_model/plot_sgd_early_stopping", "auto_examples/linear_model/plot_sgd_iris", "auto_examples/linear_model/plot_sgd_loss_functions", "auto_examples/linear_model/plot_sgd_penalties", "auto_examples/linear_model/plot_sgd_separating_hyperplane", "auto_examples/linear_model/plot_sgd_weighted_samples", "auto_examples/linear_model/plot_sgdocsvm_vs_ocsvm", "auto_examples/linear_model/plot_sparse_logistic_regression_20newsgroups", "auto_examples/linear_model/plot_sparse_logistic_regression_mnist", "auto_examples/linear_model/plot_theilsen", "auto_examples/linear_model/plot_tweedie_regression_insurance_claims", "auto_examples/manifold/index", "auto_examples/manifold/plot_compare_methods", "auto_examples/manifold/plot_lle_digits", "auto_examples/manifold/plot_manifold_sphere", "auto_examples/manifold/plot_mds", "auto_examples/manifold/plot_swissroll", "auto_examples/manifold/plot_t_sne_perplexity", "auto_examples/miscellaneous/index", "auto_examples/miscellaneous/plot_anomaly_comparison", "auto_examples/miscellaneous/plot_display_object_visualization", "auto_examples/miscellaneous/plot_estimator_representation", "auto_examples/miscellaneous/plot_isotonic_regression", "auto_examples/miscellaneous/plot_johnson_lindenstrauss_bound", "auto_examples/miscellaneous/plot_kernel_approximation", "auto_examples/miscellaneous/plot_kernel_ridge_regression", "auto_examples/miscellaneous/plot_metadata_routing", "auto_examples/miscellaneous/plot_multilabel", "auto_examples/miscellaneous/plot_multioutput_face_completion", "auto_examples/miscellaneous/plot_outlier_detection_bench", "auto_examples/miscellaneous/plot_partial_dependence_visualization_api", "auto_examples/miscellaneous/plot_pipeline_display", "auto_examples/miscellaneous/plot_roc_curve_visualization_api", "auto_examples/miscellaneous/plot_set_output", "auto_examples/mixture/index", "auto_examples/mixture/plot_concentration_prior", "auto_examples/mixture/plot_gmm", "auto_examples/mixture/plot_gmm_covariances", "auto_examples/mixture/plot_gmm_init", "auto_examples/mixture/plot_gmm_pdf", "auto_examples/mixture/plot_gmm_selection", "auto_examples/mixture/plot_gmm_sin", "auto_examples/model_selection/index", "auto_examples/model_selection/plot_confusion_matrix", "auto_examples/model_selection/plot_cost_sensitive_learning", "auto_examples/model_selection/plot_cv_indices", "auto_examples/model_selection/plot_cv_predict", "auto_examples/model_selection/plot_det", "auto_examples/model_selection/plot_grid_search_digits", "auto_examples/model_selection/plot_grid_search_refit_callable", "auto_examples/model_selection/plot_grid_search_stats", "auto_examples/model_selection/plot_grid_search_text_feature_extraction", "auto_examples/model_selection/plot_learning_curve", "auto_examples/model_selection/plot_likelihood_ratios", "auto_examples/model_selection/plot_multi_metric_evaluation", "auto_examples/model_selection/plot_nested_cross_validation_iris", "auto_examples/model_selection/plot_permutation_tests_for_classification", "auto_examples/model_selection/plot_precision_recall", "auto_examples/model_selection/plot_randomized_search", "auto_examples/model_selection/plot_roc", "auto_examples/model_selection/plot_roc_crossval", "auto_examples/model_selection/plot_successive_halving_heatmap", "auto_examples/model_selection/plot_successive_halving_iterations", "auto_examples/model_selection/plot_train_error_vs_test_error", "auto_examples/model_selection/plot_tuned_decision_threshold", "auto_examples/model_selection/plot_underfitting_overfitting", "auto_examples/multiclass/index", "auto_examples/multiclass/plot_multiclass_overview", "auto_examples/multioutput/index", "auto_examples/multioutput/plot_classifier_chain_yeast", "auto_examples/neighbors/approximate_nearest_neighbors", "auto_examples/neighbors/index", "auto_examples/neighbors/plot_caching_nearest_neighbors", "auto_examples/neighbors/plot_classification", "auto_examples/neighbors/plot_digits_kde_sampling", "auto_examples/neighbors/plot_kde_1d", "auto_examples/neighbors/plot_lof_novelty_detection", "auto_examples/neighbors/plot_lof_outlier_detection", "auto_examples/neighbors/plot_nca_classification", "auto_examples/neighbors/plot_nca_dim_reduction", "auto_examples/neighbors/plot_nca_illustration", "auto_examples/neighbors/plot_nearest_centroid", "auto_examples/neighbors/plot_regression", "auto_examples/neighbors/plot_species_kde", "auto_examples/neural_networks/index", "auto_examples/neural_networks/plot_mlp_alpha", "auto_examples/neural_networks/plot_mlp_training_curves", "auto_examples/neural_networks/plot_mnist_filters", "auto_examples/neural_networks/plot_rbm_logistic_classification", "auto_examples/preprocessing/index", "auto_examples/preprocessing/plot_all_scaling", "auto_examples/preprocessing/plot_discretization", "auto_examples/preprocessing/plot_discretization_classification", "auto_examples/preprocessing/plot_discretization_strategies", "auto_examples/preprocessing/plot_map_data_to_normal", "auto_examples/preprocessing/plot_scaling_importance", "auto_examples/preprocessing/plot_target_encoder", "auto_examples/preprocessing/plot_target_encoder_cross_val", "auto_examples/release_highlights/index", "auto_examples/release_highlights/plot_release_highlights_0_22_0", "auto_examples/release_highlights/plot_release_highlights_0_23_0", "auto_examples/release_highlights/plot_release_highlights_0_24_0", "auto_examples/release_highlights/plot_release_highlights_1_0_0", "auto_examples/release_highlights/plot_release_highlights_1_1_0", "auto_examples/release_highlights/plot_release_highlights_1_2_0", "auto_examples/release_highlights/plot_release_highlights_1_3_0", "auto_examples/release_highlights/plot_release_highlights_1_4_0", "auto_examples/release_highlights/plot_release_highlights_1_5_0", "auto_examples/release_highlights/plot_release_highlights_1_6_0", "auto_examples/semi_supervised/index", "auto_examples/semi_supervised/plot_label_propagation_digits", "auto_examples/semi_supervised/plot_label_propagation_digits_active_learning", "auto_examples/semi_supervised/plot_label_propagation_structure", "auto_examples/semi_supervised/plot_self_training_varying_threshold", "auto_examples/semi_supervised/plot_semi_supervised_newsgroups", "auto_examples/semi_supervised/plot_semi_supervised_versus_svm_iris", "auto_examples/svm/index", "auto_examples/svm/plot_custom_kernel", "auto_examples/svm/plot_iris_svc", "auto_examples/svm/plot_linearsvc_support_vectors", "auto_examples/svm/plot_oneclass", "auto_examples/svm/plot_rbf_parameters", "auto_examples/svm/plot_separating_hyperplane", "auto_examples/svm/plot_separating_hyperplane_unbalanced", "auto_examples/svm/plot_svm_anova", "auto_examples/svm/plot_svm_kernels", "auto_examples/svm/plot_svm_margin", "auto_examples/svm/plot_svm_regression", "auto_examples/svm/plot_svm_scale_c", "auto_examples/svm/plot_svm_tie_breaking", "auto_examples/svm/plot_weighted_samples", "auto_examples/text/index", "auto_examples/text/plot_document_classification_20newsgroups", "auto_examples/text/plot_document_clustering", "auto_examples/text/plot_hashing_vs_dict_vectorizer", "auto_examples/tree/index", "auto_examples/tree/plot_cost_complexity_pruning", "auto_examples/tree/plot_iris_dtc", "auto_examples/tree/plot_tree_regression", "auto_examples/tree/plot_unveil_tree_structure", "common_pitfalls", "communication_team", "communication_team_emeritus", "computing", "computing/computational_performance", "computing/parallelism", "computing/scaling_strategies", "contributor_experience_team", "contributor_experience_team_emeritus", "data_transforms", "datasets", "datasets/loading_other_datasets", "datasets/real_world", "datasets/sample_generators", "datasets/toy_dataset", "developers/advanced_installation", "developers/bug_triaging", "developers/contributing", "developers/cython", "developers/develop", "developers/index", "developers/maintainer", "developers/minimal_reproducer", "developers/performance", "developers/plotting", "developers/tips", "developers/utilities", "dispatching", "documentation_team", "faq", "getting_started", "glossary", "governance", "index", "inspection", "install", "install_instructions_conda", "machine_learning_map", "maintainers", "maintainers_emeritus", "metadata_routing", "min_dependency_substitutions", "min_dependency_table", "model_persistence", "model_selection", "modules/array_api", "modules/biclustering", "modules/calibration", "modules/classification_threshold", "modules/clustering", "modules/compose", "modules/covariance", "modules/cross_decomposition", "modules/cross_validation", "modules/decomposition", "modules/density", "modules/ensemble", "modules/feature_extraction", "modules/feature_selection", "modules/gaussian_process", "modules/generated/dbscan-function", "modules/generated/fastica-function", "modules/generated/oas-function", "modules/generated/sklearn.base.BaseEstimator", "modules/generated/sklearn.base.BiclusterMixin", "modules/generated/sklearn.base.ClassNamePrefixFeaturesOutMixin", "modules/generated/sklearn.base.ClassifierMixin", "modules/generated/sklearn.base.ClusterMixin", "modules/generated/sklearn.base.DensityMixin", "modules/generated/sklearn.base.MetaEstimatorMixin", "modules/generated/sklearn.base.OneToOneFeatureMixin", "modules/generated/sklearn.base.OutlierMixin", "modules/generated/sklearn.base.RegressorMixin", "modules/generated/sklearn.base.TransformerMixin", "modules/generated/sklearn.base.clone", "modules/generated/sklearn.base.is_classifier", "modules/generated/sklearn.base.is_clusterer", "modules/generated/sklearn.base.is_outlier_detector", "modules/generated/sklearn.base.is_regressor", "modules/generated/sklearn.calibration.CalibratedClassifierCV", "modules/generated/sklearn.calibration.CalibrationDisplay", "modules/generated/sklearn.calibration.calibration_curve", "modules/generated/sklearn.cluster.AffinityPropagation", "modules/generated/sklearn.cluster.AgglomerativeClustering", "modules/generated/sklearn.cluster.Birch", "modules/generated/sklearn.cluster.BisectingKMeans", "modules/generated/sklearn.cluster.DBSCAN", "modules/generated/sklearn.cluster.FeatureAgglomeration", "modules/generated/sklearn.cluster.HDBSCAN", "modules/generated/sklearn.cluster.KMeans", "modules/generated/sklearn.cluster.MeanShift", "modules/generated/sklearn.cluster.MiniBatchKMeans", "modules/generated/sklearn.cluster.OPTICS", "modules/generated/sklearn.cluster.SpectralBiclustering", "modules/generated/sklearn.cluster.SpectralClustering", "modules/generated/sklearn.cluster.SpectralCoclustering", "modules/generated/sklearn.cluster.affinity_propagation", "modules/generated/sklearn.cluster.cluster_optics_dbscan", "modules/generated/sklearn.cluster.cluster_optics_xi", "modules/generated/sklearn.cluster.compute_optics_graph", "modules/generated/sklearn.cluster.estimate_bandwidth", "modules/generated/sklearn.cluster.k_means", "modules/generated/sklearn.cluster.kmeans_plusplus", "modules/generated/sklearn.cluster.mean_shift", "modules/generated/sklearn.cluster.spectral_clustering", "modules/generated/sklearn.cluster.ward_tree", "modules/generated/sklearn.compose.ColumnTransformer", "modules/generated/sklearn.compose.TransformedTargetRegressor", "modules/generated/sklearn.compose.make_column_selector", "modules/generated/sklearn.compose.make_column_transformer", "modules/generated/sklearn.config_context", "modules/generated/sklearn.covariance.EllipticEnvelope", "modules/generated/sklearn.covariance.EmpiricalCovariance", "modules/generated/sklearn.covariance.GraphicalLasso", "modules/generated/sklearn.covariance.GraphicalLassoCV", "modules/generated/sklearn.covariance.LedoitWolf", "modules/generated/sklearn.covariance.MinCovDet", "modules/generated/sklearn.covariance.OAS", "modules/generated/sklearn.covariance.ShrunkCovariance", "modules/generated/sklearn.covariance.empirical_covariance", "modules/generated/sklearn.covariance.graphical_lasso", "modules/generated/sklearn.covariance.ledoit_wolf", "modules/generated/sklearn.covariance.ledoit_wolf_shrinkage", "modules/generated/sklearn.covariance.shrunk_covariance", "modules/generated/sklearn.cross_decomposition.CCA", "modules/generated/sklearn.cross_decomposition.PLSCanonical", "modules/generated/sklearn.cross_decomposition.PLSRegression", "modules/generated/sklearn.cross_decomposition.PLSSVD", "modules/generated/sklearn.datasets.clear_data_home", "modules/generated/sklearn.datasets.dump_svmlight_file", "modules/generated/sklearn.datasets.fetch_20newsgroups", "modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized", "modules/generated/sklearn.datasets.fetch_california_housing", "modules/generated/sklearn.datasets.fetch_covtype", "modules/generated/sklearn.datasets.fetch_file", "modules/generated/sklearn.datasets.fetch_kddcup99", "modules/generated/sklearn.datasets.fetch_lfw_pairs", "modules/generated/sklearn.datasets.fetch_lfw_people", "modules/generated/sklearn.datasets.fetch_olivetti_faces", "modules/generated/sklearn.datasets.fetch_openml", "modules/generated/sklearn.datasets.fetch_rcv1", "modules/generated/sklearn.datasets.fetch_species_distributions", "modules/generated/sklearn.datasets.get_data_home", "modules/generated/sklearn.datasets.load_breast_cancer", "modules/generated/sklearn.datasets.load_diabetes", "modules/generated/sklearn.datasets.load_digits", "modules/generated/sklearn.datasets.load_files", "modules/generated/sklearn.datasets.load_iris", "modules/generated/sklearn.datasets.load_linnerud", "modules/generated/sklearn.datasets.load_sample_image", "modules/generated/sklearn.datasets.load_sample_images", "modules/generated/sklearn.datasets.load_svmlight_file", "modules/generated/sklearn.datasets.load_svmlight_files", "modules/generated/sklearn.datasets.load_wine", "modules/generated/sklearn.datasets.make_biclusters", "modules/generated/sklearn.datasets.make_blobs", "modules/generated/sklearn.datasets.make_checkerboard", "modules/generated/sklearn.datasets.make_circles", "modules/generated/sklearn.datasets.make_classification", "modules/generated/sklearn.datasets.make_friedman1", "modules/generated/sklearn.datasets.make_friedman2", "modules/generated/sklearn.datasets.make_friedman3", "modules/generated/sklearn.datasets.make_gaussian_quantiles", "modules/generated/sklearn.datasets.make_hastie_10_2", "modules/generated/sklearn.datasets.make_low_rank_matrix", "modules/generated/sklearn.datasets.make_moons", "modules/generated/sklearn.datasets.make_multilabel_classification", "modules/generated/sklearn.datasets.make_regression", "modules/generated/sklearn.datasets.make_s_curve", "modules/generated/sklearn.datasets.make_sparse_coded_signal", "modules/generated/sklearn.datasets.make_sparse_spd_matrix", "modules/generated/sklearn.datasets.make_sparse_uncorrelated", "modules/generated/sklearn.datasets.make_spd_matrix", "modules/generated/sklearn.datasets.make_swiss_roll", "modules/generated/sklearn.decomposition.DictionaryLearning", "modules/generated/sklearn.decomposition.FactorAnalysis", "modules/generated/sklearn.decomposition.FastICA", "modules/generated/sklearn.decomposition.IncrementalPCA", "modules/generated/sklearn.decomposition.KernelPCA", "modules/generated/sklearn.decomposition.LatentDirichletAllocation", "modules/generated/sklearn.decomposition.MiniBatchDictionaryLearning", "modules/generated/sklearn.decomposition.MiniBatchNMF", "modules/generated/sklearn.decomposition.MiniBatchSparsePCA", "modules/generated/sklearn.decomposition.NMF", "modules/generated/sklearn.decomposition.PCA", "modules/generated/sklearn.decomposition.SparseCoder", "modules/generated/sklearn.decomposition.SparsePCA", "modules/generated/sklearn.decomposition.TruncatedSVD", "modules/generated/sklearn.decomposition.dict_learning", "modules/generated/sklearn.decomposition.dict_learning_online", "modules/generated/sklearn.decomposition.non_negative_factorization", "modules/generated/sklearn.decomposition.sparse_encode", "modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis", "modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis", "modules/generated/sklearn.dummy.DummyClassifier", "modules/generated/sklearn.dummy.DummyRegressor", "modules/generated/sklearn.ensemble.AdaBoostClassifier", "modules/generated/sklearn.ensemble.AdaBoostRegressor", "modules/generated/sklearn.ensemble.BaggingClassifier", "modules/generated/sklearn.ensemble.BaggingRegressor", "modules/generated/sklearn.ensemble.ExtraTreesClassifier", "modules/generated/sklearn.ensemble.ExtraTreesRegressor", "modules/generated/sklearn.ensemble.GradientBoostingClassifier", "modules/generated/sklearn.ensemble.GradientBoostingRegressor", "modules/generated/sklearn.ensemble.HistGradientBoostingClassifier", "modules/generated/sklearn.ensemble.HistGradientBoostingRegressor", "modules/generated/sklearn.ensemble.IsolationForest", "modules/generated/sklearn.ensemble.RandomForestClassifier", "modules/generated/sklearn.ensemble.RandomForestRegressor", "modules/generated/sklearn.ensemble.RandomTreesEmbedding", "modules/generated/sklearn.ensemble.StackingClassifier", "modules/generated/sklearn.ensemble.StackingRegressor", "modules/generated/sklearn.ensemble.VotingClassifier", "modules/generated/sklearn.ensemble.VotingRegressor", "modules/generated/sklearn.exceptions.ConvergenceWarning", "modules/generated/sklearn.exceptions.DataConversionWarning", "modules/generated/sklearn.exceptions.DataDimensionalityWarning", "modules/generated/sklearn.exceptions.EfficiencyWarning", "modules/generated/sklearn.exceptions.EstimatorCheckFailedWarning", "modules/generated/sklearn.exceptions.FitFailedWarning", "modules/generated/sklearn.exceptions.InconsistentVersionWarning", "modules/generated/sklearn.exceptions.NotFittedError", "modules/generated/sklearn.exceptions.UndefinedMetricWarning", "modules/generated/sklearn.experimental.enable_halving_search_cv", "modules/generated/sklearn.experimental.enable_iterative_imputer", "modules/generated/sklearn.feature_extraction.DictVectorizer", "modules/generated/sklearn.feature_extraction.FeatureHasher", "modules/generated/sklearn.feature_extraction.image.PatchExtractor", "modules/generated/sklearn.feature_extraction.image.extract_patches_2d", "modules/generated/sklearn.feature_extraction.image.grid_to_graph", "modules/generated/sklearn.feature_extraction.image.img_to_graph", "modules/generated/sklearn.feature_extraction.image.reconstruct_from_patches_2d", "modules/generated/sklearn.feature_extraction.text.CountVectorizer", "modules/generated/sklearn.feature_extraction.text.HashingVectorizer", "modules/generated/sklearn.feature_extraction.text.TfidfTransformer", "modules/generated/sklearn.feature_extraction.text.TfidfVectorizer", "modules/generated/sklearn.feature_selection.GenericUnivariateSelect", "modules/generated/sklearn.feature_selection.RFE", "modules/generated/sklearn.feature_selection.RFECV", "modules/generated/sklearn.feature_selection.SelectFdr", "modules/generated/sklearn.feature_selection.SelectFpr", "modules/generated/sklearn.feature_selection.SelectFromModel", "modules/generated/sklearn.feature_selection.SelectFwe", "modules/generated/sklearn.feature_selection.SelectKBest", "modules/generated/sklearn.feature_selection.SelectPercentile", "modules/generated/sklearn.feature_selection.SelectorMixin", "modules/generated/sklearn.feature_selection.SequentialFeatureSelector", "modules/generated/sklearn.feature_selection.VarianceThreshold", "modules/generated/sklearn.feature_selection.chi2", "modules/generated/sklearn.feature_selection.f_classif", "modules/generated/sklearn.feature_selection.f_regression", "modules/generated/sklearn.feature_selection.mutual_info_classif", "modules/generated/sklearn.feature_selection.mutual_info_regression", "modules/generated/sklearn.feature_selection.r_regression", "modules/generated/sklearn.frozen.FrozenEstimator", "modules/generated/sklearn.gaussian_process.GaussianProcessClassifier", "modules/generated/sklearn.gaussian_process.GaussianProcessRegressor", "modules/generated/sklearn.gaussian_process.kernels.CompoundKernel", "modules/generated/sklearn.gaussian_process.kernels.ConstantKernel", "modules/generated/sklearn.gaussian_process.kernels.DotProduct", "modules/generated/sklearn.gaussian_process.kernels.ExpSineSquared", "modules/generated/sklearn.gaussian_process.kernels.Exponentiation", "modules/generated/sklearn.gaussian_process.kernels.Hyperparameter", "modules/generated/sklearn.gaussian_process.kernels.Kernel", "modules/generated/sklearn.gaussian_process.kernels.Matern", "modules/generated/sklearn.gaussian_process.kernels.PairwiseKernel", "modules/generated/sklearn.gaussian_process.kernels.Product", "modules/generated/sklearn.gaussian_process.kernels.RBF", "modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic", "modules/generated/sklearn.gaussian_process.kernels.Sum", "modules/generated/sklearn.gaussian_process.kernels.WhiteKernel", "modules/generated/sklearn.get_config", "modules/generated/sklearn.impute.IterativeImputer", "modules/generated/sklearn.impute.KNNImputer", "modules/generated/sklearn.impute.MissingIndicator", "modules/generated/sklearn.impute.SimpleImputer", "modules/generated/sklearn.inspection.DecisionBoundaryDisplay", "modules/generated/sklearn.inspection.PartialDependenceDisplay", "modules/generated/sklearn.inspection.partial_dependence", "modules/generated/sklearn.inspection.permutation_importance", "modules/generated/sklearn.isotonic.IsotonicRegression", "modules/generated/sklearn.isotonic.check_increasing", "modules/generated/sklearn.isotonic.isotonic_regression", "modules/generated/sklearn.kernel_approximation.AdditiveChi2Sampler", "modules/generated/sklearn.kernel_approximation.Nystroem", "modules/generated/sklearn.kernel_approximation.PolynomialCountSketch", "modules/generated/sklearn.kernel_approximation.RBFSampler", "modules/generated/sklearn.kernel_approximation.SkewedChi2Sampler", "modules/generated/sklearn.kernel_ridge.KernelRidge", "modules/generated/sklearn.linear_model.ARDRegression", "modules/generated/sklearn.linear_model.BayesianRidge", "modules/generated/sklearn.linear_model.ElasticNet", "modules/generated/sklearn.linear_model.ElasticNetCV", "modules/generated/sklearn.linear_model.GammaRegressor", "modules/generated/sklearn.linear_model.HuberRegressor", "modules/generated/sklearn.linear_model.Lars", "modules/generated/sklearn.linear_model.LarsCV", "modules/generated/sklearn.linear_model.Lasso", "modules/generated/sklearn.linear_model.LassoCV", "modules/generated/sklearn.linear_model.LassoLars", "modules/generated/sklearn.linear_model.LassoLarsCV", "modules/generated/sklearn.linear_model.LassoLarsIC", "modules/generated/sklearn.linear_model.LinearRegression", "modules/generated/sklearn.linear_model.LogisticRegression", "modules/generated/sklearn.linear_model.LogisticRegressionCV", "modules/generated/sklearn.linear_model.MultiTaskElasticNet", "modules/generated/sklearn.linear_model.MultiTaskElasticNetCV", "modules/generated/sklearn.linear_model.MultiTaskLasso", "modules/generated/sklearn.linear_model.MultiTaskLassoCV", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuit", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuitCV", "modules/generated/sklearn.linear_model.PassiveAggressiveClassifier", "modules/generated/sklearn.linear_model.PassiveAggressiveRegressor", "modules/generated/sklearn.linear_model.Perceptron", "modules/generated/sklearn.linear_model.PoissonRegressor", "modules/generated/sklearn.linear_model.QuantileRegressor", "modules/generated/sklearn.linear_model.RANSACRegressor", "modules/generated/sklearn.linear_model.Ridge", "modules/generated/sklearn.linear_model.RidgeCV", "modules/generated/sklearn.linear_model.RidgeClassifier", "modules/generated/sklearn.linear_model.RidgeClassifierCV", "modules/generated/sklearn.linear_model.SGDClassifier", "modules/generated/sklearn.linear_model.SGDOneClassSVM", "modules/generated/sklearn.linear_model.SGDRegressor", "modules/generated/sklearn.linear_model.TheilSenRegressor", "modules/generated/sklearn.linear_model.TweedieRegressor", "modules/generated/sklearn.linear_model.enet_path", "modules/generated/sklearn.linear_model.lars_path", "modules/generated/sklearn.linear_model.lars_path_gram", "modules/generated/sklearn.linear_model.lasso_path", "modules/generated/sklearn.linear_model.orthogonal_mp", "modules/generated/sklearn.linear_model.orthogonal_mp_gram", "modules/generated/sklearn.linear_model.ridge_regression", "modules/generated/sklearn.manifold.Isomap", "modules/generated/sklearn.manifold.LocallyLinearEmbedding", "modules/generated/sklearn.manifold.MDS", "modules/generated/sklearn.manifold.SpectralEmbedding", "modules/generated/sklearn.manifold.TSNE", "modules/generated/sklearn.manifold.locally_linear_embedding", "modules/generated/sklearn.manifold.smacof", "modules/generated/sklearn.manifold.spectral_embedding", "modules/generated/sklearn.manifold.trustworthiness", "modules/generated/sklearn.metrics.ConfusionMatrixDisplay", "modules/generated/sklearn.metrics.DetCurveDisplay", "modules/generated/sklearn.metrics.DistanceMetric", "modules/generated/sklearn.metrics.PrecisionRecallDisplay", "modules/generated/sklearn.metrics.PredictionErrorDisplay", "modules/generated/sklearn.metrics.RocCurveDisplay", "modules/generated/sklearn.metrics.accuracy_score", "modules/generated/sklearn.metrics.adjusted_mutual_info_score", "modules/generated/sklearn.metrics.adjusted_rand_score", "modules/generated/sklearn.metrics.auc", "modules/generated/sklearn.metrics.average_precision_score", "modules/generated/sklearn.metrics.balanced_accuracy_score", "modules/generated/sklearn.metrics.brier_score_loss", "modules/generated/sklearn.metrics.calinski_harabasz_score", "modules/generated/sklearn.metrics.check_scoring", "modules/generated/sklearn.metrics.class_likelihood_ratios", "modules/generated/sklearn.metrics.classification_report", "modules/generated/sklearn.metrics.cluster.contingency_matrix", "modules/generated/sklearn.metrics.cluster.pair_confusion_matrix", "modules/generated/sklearn.metrics.cohen_kappa_score", "modules/generated/sklearn.metrics.completeness_score", "modules/generated/sklearn.metrics.confusion_matrix", "modules/generated/sklearn.metrics.consensus_score", "modules/generated/sklearn.metrics.coverage_error", "modules/generated/sklearn.metrics.d2_absolute_error_score", "modules/generated/sklearn.metrics.d2_log_loss_score", "modules/generated/sklearn.metrics.d2_pinball_score", "modules/generated/sklearn.metrics.d2_tweedie_score", "modules/generated/sklearn.metrics.davies_bouldin_score", "modules/generated/sklearn.metrics.dcg_score", "modules/generated/sklearn.metrics.det_curve", "modules/generated/sklearn.metrics.explained_variance_score", "modules/generated/sklearn.metrics.f1_score", "modules/generated/sklearn.metrics.fbeta_score", "modules/generated/sklearn.metrics.fowlkes_mallows_score", "modules/generated/sklearn.metrics.get_scorer", "modules/generated/sklearn.metrics.get_scorer_names", "modules/generated/sklearn.metrics.hamming_loss", "modules/generated/sklearn.metrics.hinge_loss", "modules/generated/sklearn.metrics.homogeneity_completeness_v_measure", "modules/generated/sklearn.metrics.homogeneity_score", "modules/generated/sklearn.metrics.jaccard_score", "modules/generated/sklearn.metrics.label_ranking_average_precision_score", "modules/generated/sklearn.metrics.label_ranking_loss", "modules/generated/sklearn.metrics.log_loss", "modules/generated/sklearn.metrics.make_scorer", "modules/generated/sklearn.metrics.matthews_corrcoef", "modules/generated/sklearn.metrics.max_error", "modules/generated/sklearn.metrics.mean_absolute_error", "modules/generated/sklearn.metrics.mean_absolute_percentage_error", "modules/generated/sklearn.metrics.mean_gamma_deviance", "modules/generated/sklearn.metrics.mean_pinball_loss", "modules/generated/sklearn.metrics.mean_poisson_deviance", "modules/generated/sklearn.metrics.mean_squared_error", "modules/generated/sklearn.metrics.mean_squared_log_error", "modules/generated/sklearn.metrics.mean_tweedie_deviance", "modules/generated/sklearn.metrics.median_absolute_error", "modules/generated/sklearn.metrics.multilabel_confusion_matrix", "modules/generated/sklearn.metrics.mutual_info_score", "modules/generated/sklearn.metrics.ndcg_score", "modules/generated/sklearn.metrics.normalized_mutual_info_score", "modules/generated/sklearn.metrics.pairwise.additive_chi2_kernel", "modules/generated/sklearn.metrics.pairwise.chi2_kernel", "modules/generated/sklearn.metrics.pairwise.cosine_distances", "modules/generated/sklearn.metrics.pairwise.cosine_similarity", "modules/generated/sklearn.metrics.pairwise.distance_metrics", "modules/generated/sklearn.metrics.pairwise.euclidean_distances", "modules/generated/sklearn.metrics.pairwise.haversine_distances", "modules/generated/sklearn.metrics.pairwise.kernel_metrics", "modules/generated/sklearn.metrics.pairwise.laplacian_kernel", "modules/generated/sklearn.metrics.pairwise.linear_kernel", "modules/generated/sklearn.metrics.pairwise.manhattan_distances", "modules/generated/sklearn.metrics.pairwise.nan_euclidean_distances", "modules/generated/sklearn.metrics.pairwise.paired_cosine_distances", "modules/generated/sklearn.metrics.pairwise.paired_distances", "modules/generated/sklearn.metrics.pairwise.paired_euclidean_distances", "modules/generated/sklearn.metrics.pairwise.paired_manhattan_distances", "modules/generated/sklearn.metrics.pairwise.pairwise_kernels", "modules/generated/sklearn.metrics.pairwise.polynomial_kernel", "modules/generated/sklearn.metrics.pairwise.rbf_kernel", "modules/generated/sklearn.metrics.pairwise.sigmoid_kernel", "modules/generated/sklearn.metrics.pairwise_distances", "modules/generated/sklearn.metrics.pairwise_distances_argmin", "modules/generated/sklearn.metrics.pairwise_distances_argmin_min", "modules/generated/sklearn.metrics.pairwise_distances_chunked", "modules/generated/sklearn.metrics.precision_recall_curve", "modules/generated/sklearn.metrics.precision_recall_fscore_support", "modules/generated/sklearn.metrics.precision_score", "modules/generated/sklearn.metrics.r2_score", "modules/generated/sklearn.metrics.rand_score", "modules/generated/sklearn.metrics.recall_score", "modules/generated/sklearn.metrics.roc_auc_score", "modules/generated/sklearn.metrics.roc_curve", "modules/generated/sklearn.metrics.root_mean_squared_error", "modules/generated/sklearn.metrics.root_mean_squared_log_error", "modules/generated/sklearn.metrics.silhouette_samples", "modules/generated/sklearn.metrics.silhouette_score", "modules/generated/sklearn.metrics.top_k_accuracy_score", "modules/generated/sklearn.metrics.v_measure_score", "modules/generated/sklearn.metrics.zero_one_loss", "modules/generated/sklearn.mixture.BayesianGaussianMixture", "modules/generated/sklearn.mixture.GaussianMixture", "modules/generated/sklearn.model_selection.FixedThresholdClassifier", "modules/generated/sklearn.model_selection.GridSearchCV", "modules/generated/sklearn.model_selection.GroupKFold", "modules/generated/sklearn.model_selection.GroupShuffleSplit", "modules/generated/sklearn.model_selection.HalvingGridSearchCV", "modules/generated/sklearn.model_selection.HalvingRandomSearchCV", "modules/generated/sklearn.model_selection.KFold", "modules/generated/sklearn.model_selection.LearningCurveDisplay", "modules/generated/sklearn.model_selection.LeaveOneGroupOut", "modules/generated/sklearn.model_selection.LeaveOneOut", "modules/generated/sklearn.model_selection.LeavePGroupsOut", "modules/generated/sklearn.model_selection.LeavePOut", "modules/generated/sklearn.model_selection.ParameterGrid", "modules/generated/sklearn.model_selection.ParameterSampler", "modules/generated/sklearn.model_selection.PredefinedSplit", "modules/generated/sklearn.model_selection.RandomizedSearchCV", "modules/generated/sklearn.model_selection.RepeatedKFold", "modules/generated/sklearn.model_selection.RepeatedStratifiedKFold", "modules/generated/sklearn.model_selection.ShuffleSplit", "modules/generated/sklearn.model_selection.StratifiedGroupKFold", "modules/generated/sklearn.model_selection.StratifiedKFold", "modules/generated/sklearn.model_selection.StratifiedShuffleSplit", "modules/generated/sklearn.model_selection.TimeSeriesSplit", "modules/generated/sklearn.model_selection.TunedThresholdClassifierCV", "modules/generated/sklearn.model_selection.ValidationCurveDisplay", "modules/generated/sklearn.model_selection.check_cv", "modules/generated/sklearn.model_selection.cross_val_predict", "modules/generated/sklearn.model_selection.cross_val_score", "modules/generated/sklearn.model_selection.cross_validate", "modules/generated/sklearn.model_selection.learning_curve", "modules/generated/sklearn.model_selection.permutation_test_score", "modules/generated/sklearn.model_selection.train_test_split", "modules/generated/sklearn.model_selection.validation_curve", "modules/generated/sklearn.multiclass.OneVsOneClassifier", "modules/generated/sklearn.multiclass.OneVsRestClassifier", "modules/generated/sklearn.multiclass.OutputCodeClassifier", "modules/generated/sklearn.multioutput.ClassifierChain", "modules/generated/sklearn.multioutput.MultiOutputClassifier", "modules/generated/sklearn.multioutput.MultiOutputRegressor", "modules/generated/sklearn.multioutput.RegressorChain", "modules/generated/sklearn.naive_bayes.BernoulliNB", "modules/generated/sklearn.naive_bayes.CategoricalNB", "modules/generated/sklearn.naive_bayes.ComplementNB", "modules/generated/sklearn.naive_bayes.GaussianNB", "modules/generated/sklearn.naive_bayes.MultinomialNB", "modules/generated/sklearn.neighbors.BallTree", "modules/generated/sklearn.neighbors.KDTree", "modules/generated/sklearn.neighbors.KNeighborsClassifier", "modules/generated/sklearn.neighbors.KNeighborsRegressor", "modules/generated/sklearn.neighbors.KNeighborsTransformer", "modules/generated/sklearn.neighbors.KernelDensity", "modules/generated/sklearn.neighbors.LocalOutlierFactor", "modules/generated/sklearn.neighbors.NearestCentroid", "modules/generated/sklearn.neighbors.NearestNeighbors", "modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis", "modules/generated/sklearn.neighbors.RadiusNeighborsClassifier", "modules/generated/sklearn.neighbors.RadiusNeighborsRegressor", "modules/generated/sklearn.neighbors.RadiusNeighborsTransformer", "modules/generated/sklearn.neighbors.kneighbors_graph", "modules/generated/sklearn.neighbors.radius_neighbors_graph", "modules/generated/sklearn.neighbors.sort_graph_by_row_values", "modules/generated/sklearn.neural_network.BernoulliRBM", "modules/generated/sklearn.neural_network.MLPClassifier", "modules/generated/sklearn.neural_network.MLPRegressor", "modules/generated/sklearn.pipeline.FeatureUnion", "modules/generated/sklearn.pipeline.Pipeline", "modules/generated/sklearn.pipeline.make_pipeline", "modules/generated/sklearn.pipeline.make_union", "modules/generated/sklearn.preprocessing.Binarizer", "modules/generated/sklearn.preprocessing.FunctionTransformer", "modules/generated/sklearn.preprocessing.KBinsDiscretizer", "modules/generated/sklearn.preprocessing.KernelCenterer", "modules/generated/sklearn.preprocessing.LabelBinarizer", "modules/generated/sklearn.preprocessing.LabelEncoder", "modules/generated/sklearn.preprocessing.MaxAbsScaler", "modules/generated/sklearn.preprocessing.MinMaxScaler", "modules/generated/sklearn.preprocessing.MultiLabelBinarizer", "modules/generated/sklearn.preprocessing.Normalizer", "modules/generated/sklearn.preprocessing.OneHotEncoder", "modules/generated/sklearn.preprocessing.OrdinalEncoder", "modules/generated/sklearn.preprocessing.PolynomialFeatures", "modules/generated/sklearn.preprocessing.PowerTransformer", "modules/generated/sklearn.preprocessing.QuantileTransformer", "modules/generated/sklearn.preprocessing.RobustScaler", "modules/generated/sklearn.preprocessing.SplineTransformer", "modules/generated/sklearn.preprocessing.StandardScaler", "modules/generated/sklearn.preprocessing.TargetEncoder", "modules/generated/sklearn.preprocessing.add_dummy_feature", "modules/generated/sklearn.preprocessing.binarize", "modules/generated/sklearn.preprocessing.label_binarize", "modules/generated/sklearn.preprocessing.maxabs_scale", "modules/generated/sklearn.preprocessing.minmax_scale", "modules/generated/sklearn.preprocessing.normalize", "modules/generated/sklearn.preprocessing.power_transform", "modules/generated/sklearn.preprocessing.quantile_transform", "modules/generated/sklearn.preprocessing.robust_scale", "modules/generated/sklearn.preprocessing.scale", "modules/generated/sklearn.random_projection.GaussianRandomProjection", "modules/generated/sklearn.random_projection.SparseRandomProjection", "modules/generated/sklearn.random_projection.johnson_lindenstrauss_min_dim", "modules/generated/sklearn.semi_supervised.LabelPropagation", "modules/generated/sklearn.semi_supervised.LabelSpreading", "modules/generated/sklearn.semi_supervised.SelfTrainingClassifier", "modules/generated/sklearn.set_config", "modules/generated/sklearn.show_versions", "modules/generated/sklearn.svm.LinearSVC", "modules/generated/sklearn.svm.LinearSVR", "modules/generated/sklearn.svm.NuSVC", "modules/generated/sklearn.svm.NuSVR", "modules/generated/sklearn.svm.OneClassSVM", "modules/generated/sklearn.svm.SVC", "modules/generated/sklearn.svm.SVR", "modules/generated/sklearn.svm.l1_min_c", "modules/generated/sklearn.tree.DecisionTreeClassifier", "modules/generated/sklearn.tree.DecisionTreeRegressor", "modules/generated/sklearn.tree.ExtraTreeClassifier", "modules/generated/sklearn.tree.ExtraTreeRegressor", "modules/generated/sklearn.tree.export_graphviz", "modules/generated/sklearn.tree.export_text", "modules/generated/sklearn.tree.plot_tree", "modules/generated/sklearn.utils.Bunch", "modules/generated/sklearn.utils.ClassifierTags", "modules/generated/sklearn.utils.InputTags", "modules/generated/sklearn.utils.RegressorTags", "modules/generated/sklearn.utils.Tags", "modules/generated/sklearn.utils.TargetTags", "modules/generated/sklearn.utils.TransformerTags", "modules/generated/sklearn.utils._safe_indexing", "modules/generated/sklearn.utils.arrayfuncs.min_pos", "modules/generated/sklearn.utils.as_float_array", "modules/generated/sklearn.utils.assert_all_finite", "modules/generated/sklearn.utils.check_X_y", "modules/generated/sklearn.utils.check_array", "modules/generated/sklearn.utils.check_consistent_length", "modules/generated/sklearn.utils.check_random_state", "modules/generated/sklearn.utils.check_scalar", "modules/generated/sklearn.utils.class_weight.compute_class_weight", "modules/generated/sklearn.utils.class_weight.compute_sample_weight", "modules/generated/sklearn.utils.deprecated", "modules/generated/sklearn.utils.discovery.all_displays", "modules/generated/sklearn.utils.discovery.all_estimators", "modules/generated/sklearn.utils.discovery.all_functions", "modules/generated/sklearn.utils.estimator_checks.check_estimator", "modules/generated/sklearn.utils.estimator_checks.estimator_checks_generator", "modules/generated/sklearn.utils.estimator_checks.parametrize_with_checks", "modules/generated/sklearn.utils.estimator_html_repr", "modules/generated/sklearn.utils.extmath.density", "modules/generated/sklearn.utils.extmath.fast_logdet", "modules/generated/sklearn.utils.extmath.randomized_range_finder", "modules/generated/sklearn.utils.extmath.randomized_svd", "modules/generated/sklearn.utils.extmath.safe_sparse_dot", "modules/generated/sklearn.utils.extmath.weighted_mode", "modules/generated/sklearn.utils.gen_batches", "modules/generated/sklearn.utils.gen_even_slices", "modules/generated/sklearn.utils.get_tags", "modules/generated/sklearn.utils.graph.single_source_shortest_path_length", "modules/generated/sklearn.utils.indexable", "modules/generated/sklearn.utils.metadata_routing.MetadataRequest", "modules/generated/sklearn.utils.metadata_routing.MetadataRouter", "modules/generated/sklearn.utils.metadata_routing.MethodMapping", "modules/generated/sklearn.utils.metadata_routing.get_routing_for_object", "modules/generated/sklearn.utils.metadata_routing.process_routing", "modules/generated/sklearn.utils.metaestimators.available_if", "modules/generated/sklearn.utils.multiclass.is_multilabel", "modules/generated/sklearn.utils.multiclass.type_of_target", "modules/generated/sklearn.utils.multiclass.unique_labels", "modules/generated/sklearn.utils.murmurhash3_32", "modules/generated/sklearn.utils.parallel.Parallel", "modules/generated/sklearn.utils.parallel.delayed", "modules/generated/sklearn.utils.parallel_backend", "modules/generated/sklearn.utils.random.sample_without_replacement", "modules/generated/sklearn.utils.register_parallel_backend", "modules/generated/sklearn.utils.resample", "modules/generated/sklearn.utils.safe_mask", "modules/generated/sklearn.utils.safe_sqr", "modules/generated/sklearn.utils.shuffle", "modules/generated/sklearn.utils.sparsefuncs.incr_mean_variance_axis", "modules/generated/sklearn.utils.sparsefuncs.inplace_column_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_csr_column_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_row_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_column", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_row", "modules/generated/sklearn.utils.sparsefuncs.mean_variance_axis", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2", "modules/generated/sklearn.utils.validation.check_is_fitted", "modules/generated/sklearn.utils.validation.check_memory", "modules/generated/sklearn.utils.validation.check_symmetric", "modules/generated/sklearn.utils.validation.column_or_1d", "modules/generated/sklearn.utils.validation.has_fit_parameter", "modules/generated/sklearn.utils.validation.validate_data", "modules/grid_search", "modules/impute", "modules/isotonic", "modules/kernel_approximation", "modules/kernel_ridge", "modules/lda_qda", "modules/learning_curve", "modules/linear_model", "modules/manifold", "modules/metrics", "modules/mixture", "modules/model_evaluation", "modules/multiclass", "modules/naive_bayes", "modules/neighbors", "modules/neural_networks_supervised", "modules/neural_networks_unsupervised", "modules/outlier_detection", "modules/partial_dependence", "modules/permutation_importance", "modules/pipeline", "modules/preprocessing", "modules/preprocessing_targets", "modules/random_projection", "modules/semi_supervised", "modules/sgd", "modules/svm", "modules/tree", "modules/unsupervised_reduction", "presentations", "related_projects", "roadmap", "sg_execution_times", "supervised_learning", "support", "testimonials/testimonials", "unsupervised_learning", "user_guide", "visualizations", "whats_new", "whats_new/_contributors", "whats_new/older_versions", "whats_new/v0.13", "whats_new/v0.14", "whats_new/v0.15", "whats_new/v0.16", "whats_new/v0.17", "whats_new/v0.18", "whats_new/v0.19", "whats_new/v0.20", "whats_new/v0.21", "whats_new/v0.22", "whats_new/v0.23", "whats_new/v0.24", "whats_new/v1.0", "whats_new/v1.1", "whats_new/v1.2", "whats_new/v1.3", "whats_new/v1.4", "whats_new/v1.5", "whats_new/v1.6"], "envversion": {"sphinx": 62, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1}, "filenames": ["about.rst", "api/deprecated.rst", "api/index.rst", "api/sklearn.rst", "api/sklearn.base.rst", "api/sklearn.calibration.rst", "api/sklearn.cluster.rst", "api/sklearn.compose.rst", "api/sklearn.covariance.rst", "api/sklearn.cross_decomposition.rst", "api/sklearn.datasets.rst", "api/sklearn.decomposition.rst", "api/sklearn.discriminant_analysis.rst", "api/sklearn.dummy.rst", "api/sklearn.ensemble.rst", "api/sklearn.exceptions.rst", "api/sklearn.experimental.rst", "api/sklearn.feature_extraction.rst", "api/sklearn.feature_selection.rst", "api/sklearn.frozen.rst", "api/sklearn.gaussian_process.rst", "api/sklearn.impute.rst", "api/sklearn.inspection.rst", "api/sklearn.isotonic.rst", "api/sklearn.kernel_approximation.rst", "api/sklearn.kernel_ridge.rst", "api/sklearn.linear_model.rst", "api/sklearn.manifold.rst", "api/sklearn.metrics.rst", "api/sklearn.mixture.rst", "api/sklearn.model_selection.rst", "api/sklearn.multiclass.rst", "api/sklearn.multioutput.rst", "api/sklearn.naive_bayes.rst", "api/sklearn.neighbors.rst", "api/sklearn.neural_network.rst", "api/sklearn.pipeline.rst", "api/sklearn.preprocessing.rst", "api/sklearn.random_projection.rst", "api/sklearn.semi_supervised.rst", "api/sklearn.svm.rst", "api/sklearn.tree.rst", "api/sklearn.utils.rst", "auto_examples/applications/index.rst", "auto_examples/applications/plot_cyclical_feature_engineering.rst", "auto_examples/applications/plot_digits_denoising.rst", "auto_examples/applications/plot_face_recognition.rst", "auto_examples/applications/plot_model_complexity_influence.rst", "auto_examples/applications/plot_out_of_core_classification.rst", "auto_examples/applications/plot_outlier_detection_wine.rst", "auto_examples/applications/plot_prediction_latency.rst", "auto_examples/applications/plot_species_distribution_modeling.rst", "auto_examples/applications/plot_stock_market.rst", "auto_examples/applications/plot_time_series_lagged_features.rst", "auto_examples/applications/plot_tomography_l1_reconstruction.rst", "auto_examples/applications/plot_topics_extraction_with_nmf_lda.rst", "auto_examples/applications/wikipedia_principal_eigenvector.rst", "auto_examples/bicluster/index.rst", "auto_examples/bicluster/plot_bicluster_newsgroups.rst", "auto_examples/bicluster/plot_spectral_biclustering.rst", "auto_examples/bicluster/plot_spectral_coclustering.rst", "auto_examples/calibration/index.rst", "auto_examples/calibration/plot_calibration.rst", "auto_examples/calibration/plot_calibration_curve.rst", "auto_examples/calibration/plot_calibration_multiclass.rst", "auto_examples/calibration/plot_compare_calibration.rst", "auto_examples/classification/index.rst", "auto_examples/classification/plot_classification_probability.rst", "auto_examples/classification/plot_classifier_comparison.rst", "auto_examples/classification/plot_digits_classification.rst", "auto_examples/classification/plot_lda.rst", "auto_examples/classification/plot_lda_qda.rst", "auto_examples/cluster/index.rst", "auto_examples/cluster/plot_adjusted_for_chance_measures.rst", "auto_examples/cluster/plot_affinity_propagation.rst", "auto_examples/cluster/plot_agglomerative_clustering.rst", "auto_examples/cluster/plot_agglomerative_clustering_metrics.rst", "auto_examples/cluster/plot_agglomerative_dendrogram.rst", "auto_examples/cluster/plot_birch_vs_minibatchkmeans.rst", "auto_examples/cluster/plot_bisect_kmeans.rst", "auto_examples/cluster/plot_cluster_comparison.rst", "auto_examples/cluster/plot_coin_segmentation.rst", "auto_examples/cluster/plot_coin_ward_segmentation.rst", "auto_examples/cluster/plot_dbscan.rst", "auto_examples/cluster/plot_dict_face_patches.rst", "auto_examples/cluster/plot_digits_agglomeration.rst", "auto_examples/cluster/plot_digits_linkage.rst", "auto_examples/cluster/plot_face_compress.rst", "auto_examples/cluster/plot_feature_agglomeration_vs_univariate_selection.rst", "auto_examples/cluster/plot_hdbscan.rst", "auto_examples/cluster/plot_inductive_clustering.rst", "auto_examples/cluster/plot_kmeans_assumptions.rst", "auto_examples/cluster/plot_kmeans_digits.rst", "auto_examples/cluster/plot_kmeans_plusplus.rst", "auto_examples/cluster/plot_kmeans_silhouette_analysis.rst", "auto_examples/cluster/plot_kmeans_stability_low_dim_dense.rst", "auto_examples/cluster/plot_linkage_comparison.rst", "auto_examples/cluster/plot_mean_shift.rst", "auto_examples/cluster/plot_mini_batch_kmeans.rst", "auto_examples/cluster/plot_optics.rst", "auto_examples/cluster/plot_segmentation_toy.rst", "auto_examples/cluster/plot_ward_structured_vs_unstructured.rst", "auto_examples/compose/index.rst", "auto_examples/compose/plot_column_transformer.rst", "auto_examples/compose/plot_column_transformer_mixed_types.rst", "auto_examples/compose/plot_compare_reduction.rst", "auto_examples/compose/plot_digits_pipe.rst", "auto_examples/compose/plot_feature_union.rst", "auto_examples/compose/plot_transformed_target.rst", "auto_examples/covariance/index.rst", "auto_examples/covariance/plot_covariance_estimation.rst", "auto_examples/covariance/plot_lw_vs_oas.rst", "auto_examples/covariance/plot_mahalanobis_distances.rst", "auto_examples/covariance/plot_robust_vs_empirical_covariance.rst", "auto_examples/covariance/plot_sparse_cov.rst", "auto_examples/cross_decomposition/index.rst", "auto_examples/cross_decomposition/plot_compare_cross_decomposition.rst", "auto_examples/cross_decomposition/plot_pcr_vs_pls.rst", "auto_examples/datasets/index.rst", "auto_examples/datasets/plot_random_multilabel_dataset.rst", "auto_examples/decomposition/index.rst", "auto_examples/decomposition/plot_faces_decomposition.rst", "auto_examples/decomposition/plot_ica_blind_source_separation.rst", "auto_examples/decomposition/plot_ica_vs_pca.rst", "auto_examples/decomposition/plot_image_denoising.rst", "auto_examples/decomposition/plot_incremental_pca.rst", "auto_examples/decomposition/plot_kernel_pca.rst", "auto_examples/decomposition/plot_pca_iris.rst", "auto_examples/decomposition/plot_pca_vs_fa_model_selection.rst", "auto_examples/decomposition/plot_pca_vs_lda.rst", "auto_examples/decomposition/plot_sparse_coding.rst", "auto_examples/decomposition/plot_varimax_fa.rst", "auto_examples/developing_estimators/index.rst", "auto_examples/developing_estimators/sklearn_is_fitted.rst", "auto_examples/ensemble/index.rst", "auto_examples/ensemble/plot_adaboost_multiclass.rst", "auto_examples/ensemble/plot_adaboost_regression.rst", "auto_examples/ensemble/plot_adaboost_twoclass.rst", "auto_examples/ensemble/plot_bias_variance.rst", "auto_examples/ensemble/plot_ensemble_oob.rst", "auto_examples/ensemble/plot_feature_transformation.rst", "auto_examples/ensemble/plot_forest_hist_grad_boosting_comparison.rst", "auto_examples/ensemble/plot_forest_importances.rst", "auto_examples/ensemble/plot_forest_iris.rst", "auto_examples/ensemble/plot_gradient_boosting_categorical.rst", "auto_examples/ensemble/plot_gradient_boosting_early_stopping.rst", "auto_examples/ensemble/plot_gradient_boosting_oob.rst", "auto_examples/ensemble/plot_gradient_boosting_quantile.rst", "auto_examples/ensemble/plot_gradient_boosting_regression.rst", "auto_examples/ensemble/plot_gradient_boosting_regularization.rst", "auto_examples/ensemble/plot_hgbt_regression.rst", "auto_examples/ensemble/plot_isolation_forest.rst", "auto_examples/ensemble/plot_monotonic_constraints.rst", "auto_examples/ensemble/plot_random_forest_embedding.rst", "auto_examples/ensemble/plot_random_forest_regression_multioutput.rst", "auto_examples/ensemble/plot_stack_predictors.rst", "auto_examples/ensemble/plot_voting_decision_regions.rst", "auto_examples/ensemble/plot_voting_probas.rst", "auto_examples/ensemble/plot_voting_regressor.rst", "auto_examples/feature_selection/index.rst", "auto_examples/feature_selection/plot_f_test_vs_mi.rst", "auto_examples/feature_selection/plot_feature_selection.rst", "auto_examples/feature_selection/plot_feature_selection_pipeline.rst", "auto_examples/feature_selection/plot_rfe_digits.rst", "auto_examples/feature_selection/plot_rfe_with_cross_validation.rst", "auto_examples/feature_selection/plot_select_from_model_diabetes.rst", "auto_examples/frozen/index.rst", "auto_examples/frozen/plot_frozen_examples.rst", "auto_examples/gaussian_process/index.rst", "auto_examples/gaussian_process/plot_compare_gpr_krr.rst", "auto_examples/gaussian_process/plot_gpc.rst", "auto_examples/gaussian_process/plot_gpc_iris.rst", "auto_examples/gaussian_process/plot_gpc_isoprobability.rst", "auto_examples/gaussian_process/plot_gpc_xor.rst", "auto_examples/gaussian_process/plot_gpr_co2.rst", "auto_examples/gaussian_process/plot_gpr_noisy.rst", "auto_examples/gaussian_process/plot_gpr_noisy_targets.rst", "auto_examples/gaussian_process/plot_gpr_on_structured_data.rst", "auto_examples/gaussian_process/plot_gpr_prior_posterior.rst", "auto_examples/impute/index.rst", "auto_examples/impute/plot_iterative_imputer_variants_comparison.rst", "auto_examples/impute/plot_missing_values.rst", "auto_examples/index.rst", "auto_examples/inspection/index.rst", "auto_examples/inspection/plot_causal_interpretation.rst", "auto_examples/inspection/plot_linear_model_coefficient_interpretation.rst", "auto_examples/inspection/plot_partial_dependence.rst", "auto_examples/inspection/plot_permutation_importance.rst", "auto_examples/inspection/plot_permutation_importance_multicollinear.rst", "auto_examples/kernel_approximation/index.rst", "auto_examples/kernel_approximation/plot_scalable_poly_kernels.rst", "auto_examples/linear_model/index.rst", "auto_examples/linear_model/plot_ard.rst", "auto_examples/linear_model/plot_bayesian_ridge_curvefit.rst", "auto_examples/linear_model/plot_elastic_net_precomputed_gram_matrix_with_weighted_samples.rst", "auto_examples/linear_model/plot_huber_vs_ridge.rst", "auto_examples/linear_model/plot_lasso_and_elasticnet.rst", "auto_examples/linear_model/plot_lasso_dense_vs_sparse_data.rst", "auto_examples/linear_model/plot_lasso_lars_ic.rst", "auto_examples/linear_model/plot_lasso_lasso_lars_elasticnet_path.rst", "auto_examples/linear_model/plot_lasso_model_selection.rst", "auto_examples/linear_model/plot_logistic.rst", "auto_examples/linear_model/plot_logistic_l1_l2_sparsity.rst", "auto_examples/linear_model/plot_logistic_multinomial.rst", "auto_examples/linear_model/plot_logistic_path.rst", "auto_examples/linear_model/plot_multi_task_lasso_support.rst", "auto_examples/linear_model/plot_nnls.rst", "auto_examples/linear_model/plot_ols.rst", "auto_examples/linear_model/plot_ols_ridge_variance.rst", "auto_examples/linear_model/plot_omp.rst", "auto_examples/linear_model/plot_poisson_regression_non_normal_loss.rst", "auto_examples/linear_model/plot_polynomial_interpolation.rst", "auto_examples/linear_model/plot_quantile_regression.rst", "auto_examples/linear_model/plot_ransac.rst", "auto_examples/linear_model/plot_ridge_coeffs.rst", "auto_examples/linear_model/plot_ridge_path.rst", "auto_examples/linear_model/plot_robust_fit.rst", "auto_examples/linear_model/plot_sgd_comparison.rst", "auto_examples/linear_model/plot_sgd_early_stopping.rst", "auto_examples/linear_model/plot_sgd_iris.rst", "auto_examples/linear_model/plot_sgd_loss_functions.rst", "auto_examples/linear_model/plot_sgd_penalties.rst", "auto_examples/linear_model/plot_sgd_separating_hyperplane.rst", "auto_examples/linear_model/plot_sgd_weighted_samples.rst", "auto_examples/linear_model/plot_sgdocsvm_vs_ocsvm.rst", "auto_examples/linear_model/plot_sparse_logistic_regression_20newsgroups.rst", "auto_examples/linear_model/plot_sparse_logistic_regression_mnist.rst", "auto_examples/linear_model/plot_theilsen.rst", "auto_examples/linear_model/plot_tweedie_regression_insurance_claims.rst", "auto_examples/manifold/index.rst", "auto_examples/manifold/plot_compare_methods.rst", "auto_examples/manifold/plot_lle_digits.rst", "auto_examples/manifold/plot_manifold_sphere.rst", "auto_examples/manifold/plot_mds.rst", "auto_examples/manifold/plot_swissroll.rst", "auto_examples/manifold/plot_t_sne_perplexity.rst", "auto_examples/miscellaneous/index.rst", "auto_examples/miscellaneous/plot_anomaly_comparison.rst", "auto_examples/miscellaneous/plot_display_object_visualization.rst", "auto_examples/miscellaneous/plot_estimator_representation.rst", "auto_examples/miscellaneous/plot_isotonic_regression.rst", "auto_examples/miscellaneous/plot_johnson_lindenstrauss_bound.rst", "auto_examples/miscellaneous/plot_kernel_approximation.rst", "auto_examples/miscellaneous/plot_kernel_ridge_regression.rst", "auto_examples/miscellaneous/plot_metadata_routing.rst", "auto_examples/miscellaneous/plot_multilabel.rst", "auto_examples/miscellaneous/plot_multioutput_face_completion.rst", "auto_examples/miscellaneous/plot_outlier_detection_bench.rst", "auto_examples/miscellaneous/plot_partial_dependence_visualization_api.rst", "auto_examples/miscellaneous/plot_pipeline_display.rst", "auto_examples/miscellaneous/plot_roc_curve_visualization_api.rst", "auto_examples/miscellaneous/plot_set_output.rst", "auto_examples/mixture/index.rst", "auto_examples/mixture/plot_concentration_prior.rst", "auto_examples/mixture/plot_gmm.rst", "auto_examples/mixture/plot_gmm_covariances.rst", "auto_examples/mixture/plot_gmm_init.rst", "auto_examples/mixture/plot_gmm_pdf.rst", "auto_examples/mixture/plot_gmm_selection.rst", "auto_examples/mixture/plot_gmm_sin.rst", "auto_examples/model_selection/index.rst", "auto_examples/model_selection/plot_confusion_matrix.rst", "auto_examples/model_selection/plot_cost_sensitive_learning.rst", "auto_examples/model_selection/plot_cv_indices.rst", "auto_examples/model_selection/plot_cv_predict.rst", "auto_examples/model_selection/plot_det.rst", "auto_examples/model_selection/plot_grid_search_digits.rst", "auto_examples/model_selection/plot_grid_search_refit_callable.rst", "auto_examples/model_selection/plot_grid_search_stats.rst", "auto_examples/model_selection/plot_grid_search_text_feature_extraction.rst", "auto_examples/model_selection/plot_learning_curve.rst", "auto_examples/model_selection/plot_likelihood_ratios.rst", "auto_examples/model_selection/plot_multi_metric_evaluation.rst", "auto_examples/model_selection/plot_nested_cross_validation_iris.rst", "auto_examples/model_selection/plot_permutation_tests_for_classification.rst", "auto_examples/model_selection/plot_precision_recall.rst", "auto_examples/model_selection/plot_randomized_search.rst", "auto_examples/model_selection/plot_roc.rst", "auto_examples/model_selection/plot_roc_crossval.rst", "auto_examples/model_selection/plot_successive_halving_heatmap.rst", "auto_examples/model_selection/plot_successive_halving_iterations.rst", "auto_examples/model_selection/plot_train_error_vs_test_error.rst", "auto_examples/model_selection/plot_tuned_decision_threshold.rst", "auto_examples/model_selection/plot_underfitting_overfitting.rst", "auto_examples/multiclass/index.rst", "auto_examples/multiclass/plot_multiclass_overview.rst", "auto_examples/multioutput/index.rst", "auto_examples/multioutput/plot_classifier_chain_yeast.rst", "auto_examples/neighbors/approximate_nearest_neighbors.rst", "auto_examples/neighbors/index.rst", "auto_examples/neighbors/plot_caching_nearest_neighbors.rst", "auto_examples/neighbors/plot_classification.rst", "auto_examples/neighbors/plot_digits_kde_sampling.rst", "auto_examples/neighbors/plot_kde_1d.rst", "auto_examples/neighbors/plot_lof_novelty_detection.rst", "auto_examples/neighbors/plot_lof_outlier_detection.rst", "auto_examples/neighbors/plot_nca_classification.rst", "auto_examples/neighbors/plot_nca_dim_reduction.rst", "auto_examples/neighbors/plot_nca_illustration.rst", "auto_examples/neighbors/plot_nearest_centroid.rst", "auto_examples/neighbors/plot_regression.rst", "auto_examples/neighbors/plot_species_kde.rst", "auto_examples/neural_networks/index.rst", "auto_examples/neural_networks/plot_mlp_alpha.rst", "auto_examples/neural_networks/plot_mlp_training_curves.rst", "auto_examples/neural_networks/plot_mnist_filters.rst", "auto_examples/neural_networks/plot_rbm_logistic_classification.rst", "auto_examples/preprocessing/index.rst", "auto_examples/preprocessing/plot_all_scaling.rst", "auto_examples/preprocessing/plot_discretization.rst", "auto_examples/preprocessing/plot_discretization_classification.rst", "auto_examples/preprocessing/plot_discretization_strategies.rst", "auto_examples/preprocessing/plot_map_data_to_normal.rst", "auto_examples/preprocessing/plot_scaling_importance.rst", "auto_examples/preprocessing/plot_target_encoder.rst", "auto_examples/preprocessing/plot_target_encoder_cross_val.rst", "auto_examples/release_highlights/index.rst", "auto_examples/release_highlights/plot_release_highlights_0_22_0.rst", "auto_examples/release_highlights/plot_release_highlights_0_23_0.rst", "auto_examples/release_highlights/plot_release_highlights_0_24_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_0_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_1_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_2_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_3_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_4_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_5_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_6_0.rst", "auto_examples/semi_supervised/index.rst", "auto_examples/semi_supervised/plot_label_propagation_digits.rst", "auto_examples/semi_supervised/plot_label_propagation_digits_active_learning.rst", "auto_examples/semi_supervised/plot_label_propagation_structure.rst", "auto_examples/semi_supervised/plot_self_training_varying_threshold.rst", "auto_examples/semi_supervised/plot_semi_supervised_newsgroups.rst", "auto_examples/semi_supervised/plot_semi_supervised_versus_svm_iris.rst", "auto_examples/svm/index.rst", "auto_examples/svm/plot_custom_kernel.rst", "auto_examples/svm/plot_iris_svc.rst", "auto_examples/svm/plot_linearsvc_support_vectors.rst", "auto_examples/svm/plot_oneclass.rst", "auto_examples/svm/plot_rbf_parameters.rst", "auto_examples/svm/plot_separating_hyperplane.rst", "auto_examples/svm/plot_separating_hyperplane_unbalanced.rst", "auto_examples/svm/plot_svm_anova.rst", "auto_examples/svm/plot_svm_kernels.rst", "auto_examples/svm/plot_svm_margin.rst", "auto_examples/svm/plot_svm_regression.rst", "auto_examples/svm/plot_svm_scale_c.rst", "auto_examples/svm/plot_svm_tie_breaking.rst", "auto_examples/svm/plot_weighted_samples.rst", "auto_examples/text/index.rst", "auto_examples/text/plot_document_classification_20newsgroups.rst", "auto_examples/text/plot_document_clustering.rst", "auto_examples/text/plot_hashing_vs_dict_vectorizer.rst", "auto_examples/tree/index.rst", "auto_examples/tree/plot_cost_complexity_pruning.rst", "auto_examples/tree/plot_iris_dtc.rst", "auto_examples/tree/plot_tree_regression.rst", "auto_examples/tree/plot_unveil_tree_structure.rst", "common_pitfalls.rst", "communication_team.rst", "communication_team_emeritus.rst", "computing.rst", "computing/computational_performance.rst", "computing/parallelism.rst", "computing/scaling_strategies.rst", "contributor_experience_team.rst", "contributor_experience_team_emeritus.rst", "data_transforms.rst", "datasets.rst", "datasets/loading_other_datasets.rst", "datasets/real_world.rst", "datasets/sample_generators.rst", "datasets/toy_dataset.rst", "developers/advanced_installation.rst", "developers/bug_triaging.rst", "developers/contributing.rst", "developers/cython.rst", "developers/develop.rst", "developers/index.rst", "developers/maintainer.rst", "developers/minimal_reproducer.rst", "developers/performance.rst", "developers/plotting.rst", "developers/tips.rst", "developers/utilities.rst", "dispatching.rst", "documentation_team.rst", "faq.rst", "getting_started.rst", "glossary.rst", "governance.rst", "index.rst", "inspection.rst", "install.rst", "install_instructions_conda.rst", "machine_learning_map.rst", "maintainers.rst", "maintainers_emeritus.rst", "metadata_routing.rst", "min_dependency_substitutions.rst", "min_dependency_table.rst", "model_persistence.rst", "model_selection.rst", "modules/array_api.rst", "modules/biclustering.rst", "modules/calibration.rst", "modules/classification_threshold.rst", "modules/clustering.rst", "modules/compose.rst", "modules/covariance.rst", "modules/cross_decomposition.rst", "modules/cross_validation.rst", "modules/decomposition.rst", "modules/density.rst", "modules/ensemble.rst", "modules/feature_extraction.rst", "modules/feature_selection.rst", "modules/gaussian_process.rst", "modules/generated/dbscan-function.rst", "modules/generated/fastica-function.rst", "modules/generated/oas-function.rst", "modules/generated/sklearn.base.BaseEstimator.rst", "modules/generated/sklearn.base.BiclusterMixin.rst", "modules/generated/sklearn.base.ClassNamePrefixFeaturesOutMixin.rst", "modules/generated/sklearn.base.ClassifierMixin.rst", "modules/generated/sklearn.base.ClusterMixin.rst", "modules/generated/sklearn.base.DensityMixin.rst", "modules/generated/sklearn.base.MetaEstimatorMixin.rst", "modules/generated/sklearn.base.OneToOneFeatureMixin.rst", "modules/generated/sklearn.base.OutlierMixin.rst", "modules/generated/sklearn.base.RegressorMixin.rst", "modules/generated/sklearn.base.TransformerMixin.rst", "modules/generated/sklearn.base.clone.rst", "modules/generated/sklearn.base.is_classifier.rst", "modules/generated/sklearn.base.is_clusterer.rst", "modules/generated/sklearn.base.is_outlier_detector.rst", "modules/generated/sklearn.base.is_regressor.rst", "modules/generated/sklearn.calibration.CalibratedClassifierCV.rst", "modules/generated/sklearn.calibration.CalibrationDisplay.rst", "modules/generated/sklearn.calibration.calibration_curve.rst", "modules/generated/sklearn.cluster.AffinityPropagation.rst", "modules/generated/sklearn.cluster.AgglomerativeClustering.rst", "modules/generated/sklearn.cluster.Birch.rst", "modules/generated/sklearn.cluster.BisectingKMeans.rst", "modules/generated/sklearn.cluster.DBSCAN.rst", "modules/generated/sklearn.cluster.FeatureAgglomeration.rst", "modules/generated/sklearn.cluster.HDBSCAN.rst", "modules/generated/sklearn.cluster.KMeans.rst", "modules/generated/sklearn.cluster.MeanShift.rst", "modules/generated/sklearn.cluster.MiniBatchKMeans.rst", "modules/generated/sklearn.cluster.OPTICS.rst", "modules/generated/sklearn.cluster.SpectralBiclustering.rst", "modules/generated/sklearn.cluster.SpectralClustering.rst", "modules/generated/sklearn.cluster.SpectralCoclustering.rst", "modules/generated/sklearn.cluster.affinity_propagation.rst", "modules/generated/sklearn.cluster.cluster_optics_dbscan.rst", "modules/generated/sklearn.cluster.cluster_optics_xi.rst", "modules/generated/sklearn.cluster.compute_optics_graph.rst", "modules/generated/sklearn.cluster.estimate_bandwidth.rst", "modules/generated/sklearn.cluster.k_means.rst", "modules/generated/sklearn.cluster.kmeans_plusplus.rst", "modules/generated/sklearn.cluster.mean_shift.rst", "modules/generated/sklearn.cluster.spectral_clustering.rst", "modules/generated/sklearn.cluster.ward_tree.rst", "modules/generated/sklearn.compose.ColumnTransformer.rst", "modules/generated/sklearn.compose.TransformedTargetRegressor.rst", "modules/generated/sklearn.compose.make_column_selector.rst", "modules/generated/sklearn.compose.make_column_transformer.rst", "modules/generated/sklearn.config_context.rst", "modules/generated/sklearn.covariance.EllipticEnvelope.rst", "modules/generated/sklearn.covariance.EmpiricalCovariance.rst", "modules/generated/sklearn.covariance.GraphicalLasso.rst", "modules/generated/sklearn.covariance.GraphicalLassoCV.rst", "modules/generated/sklearn.covariance.LedoitWolf.rst", "modules/generated/sklearn.covariance.MinCovDet.rst", "modules/generated/sklearn.covariance.OAS.rst", "modules/generated/sklearn.covariance.ShrunkCovariance.rst", "modules/generated/sklearn.covariance.empirical_covariance.rst", "modules/generated/sklearn.covariance.graphical_lasso.rst", "modules/generated/sklearn.covariance.ledoit_wolf.rst", "modules/generated/sklearn.covariance.ledoit_wolf_shrinkage.rst", "modules/generated/sklearn.covariance.shrunk_covariance.rst", "modules/generated/sklearn.cross_decomposition.CCA.rst", "modules/generated/sklearn.cross_decomposition.PLSCanonical.rst", "modules/generated/sklearn.cross_decomposition.PLSRegression.rst", "modules/generated/sklearn.cross_decomposition.PLSSVD.rst", "modules/generated/sklearn.datasets.clear_data_home.rst", "modules/generated/sklearn.datasets.dump_svmlight_file.rst", "modules/generated/sklearn.datasets.fetch_20newsgroups.rst", "modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized.rst", "modules/generated/sklearn.datasets.fetch_california_housing.rst", "modules/generated/sklearn.datasets.fetch_covtype.rst", "modules/generated/sklearn.datasets.fetch_file.rst", "modules/generated/sklearn.datasets.fetch_kddcup99.rst", "modules/generated/sklearn.datasets.fetch_lfw_pairs.rst", "modules/generated/sklearn.datasets.fetch_lfw_people.rst", "modules/generated/sklearn.datasets.fetch_olivetti_faces.rst", "modules/generated/sklearn.datasets.fetch_openml.rst", "modules/generated/sklearn.datasets.fetch_rcv1.rst", "modules/generated/sklearn.datasets.fetch_species_distributions.rst", "modules/generated/sklearn.datasets.get_data_home.rst", "modules/generated/sklearn.datasets.load_breast_cancer.rst", "modules/generated/sklearn.datasets.load_diabetes.rst", "modules/generated/sklearn.datasets.load_digits.rst", "modules/generated/sklearn.datasets.load_files.rst", "modules/generated/sklearn.datasets.load_iris.rst", "modules/generated/sklearn.datasets.load_linnerud.rst", "modules/generated/sklearn.datasets.load_sample_image.rst", "modules/generated/sklearn.datasets.load_sample_images.rst", "modules/generated/sklearn.datasets.load_svmlight_file.rst", "modules/generated/sklearn.datasets.load_svmlight_files.rst", "modules/generated/sklearn.datasets.load_wine.rst", "modules/generated/sklearn.datasets.make_biclusters.rst", "modules/generated/sklearn.datasets.make_blobs.rst", "modules/generated/sklearn.datasets.make_checkerboard.rst", "modules/generated/sklearn.datasets.make_circles.rst", "modules/generated/sklearn.datasets.make_classification.rst", "modules/generated/sklearn.datasets.make_friedman1.rst", "modules/generated/sklearn.datasets.make_friedman2.rst", "modules/generated/sklearn.datasets.make_friedman3.rst", "modules/generated/sklearn.datasets.make_gaussian_quantiles.rst", "modules/generated/sklearn.datasets.make_hastie_10_2.rst", "modules/generated/sklearn.datasets.make_low_rank_matrix.rst", "modules/generated/sklearn.datasets.make_moons.rst", "modules/generated/sklearn.datasets.make_multilabel_classification.rst", "modules/generated/sklearn.datasets.make_regression.rst", "modules/generated/sklearn.datasets.make_s_curve.rst", "modules/generated/sklearn.datasets.make_sparse_coded_signal.rst", "modules/generated/sklearn.datasets.make_sparse_spd_matrix.rst", "modules/generated/sklearn.datasets.make_sparse_uncorrelated.rst", "modules/generated/sklearn.datasets.make_spd_matrix.rst", "modules/generated/sklearn.datasets.make_swiss_roll.rst", "modules/generated/sklearn.decomposition.DictionaryLearning.rst", "modules/generated/sklearn.decomposition.FactorAnalysis.rst", "modules/generated/sklearn.decomposition.FastICA.rst", "modules/generated/sklearn.decomposition.IncrementalPCA.rst", "modules/generated/sklearn.decomposition.KernelPCA.rst", "modules/generated/sklearn.decomposition.LatentDirichletAllocation.rst", "modules/generated/sklearn.decomposition.MiniBatchDictionaryLearning.rst", "modules/generated/sklearn.decomposition.MiniBatchNMF.rst", "modules/generated/sklearn.decomposition.MiniBatchSparsePCA.rst", "modules/generated/sklearn.decomposition.NMF.rst", "modules/generated/sklearn.decomposition.PCA.rst", "modules/generated/sklearn.decomposition.SparseCoder.rst", "modules/generated/sklearn.decomposition.SparsePCA.rst", "modules/generated/sklearn.decomposition.TruncatedSVD.rst", "modules/generated/sklearn.decomposition.dict_learning.rst", "modules/generated/sklearn.decomposition.dict_learning_online.rst", "modules/generated/sklearn.decomposition.non_negative_factorization.rst", "modules/generated/sklearn.decomposition.sparse_encode.rst", "modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis.rst", "modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.rst", "modules/generated/sklearn.dummy.DummyClassifier.rst", "modules/generated/sklearn.dummy.DummyRegressor.rst", "modules/generated/sklearn.ensemble.AdaBoostClassifier.rst", "modules/generated/sklearn.ensemble.AdaBoostRegressor.rst", "modules/generated/sklearn.ensemble.BaggingClassifier.rst", "modules/generated/sklearn.ensemble.BaggingRegressor.rst", "modules/generated/sklearn.ensemble.ExtraTreesClassifier.rst", "modules/generated/sklearn.ensemble.ExtraTreesRegressor.rst", "modules/generated/sklearn.ensemble.GradientBoostingClassifier.rst", "modules/generated/sklearn.ensemble.GradientBoostingRegressor.rst", "modules/generated/sklearn.ensemble.HistGradientBoostingClassifier.rst", "modules/generated/sklearn.ensemble.HistGradientBoostingRegressor.rst", "modules/generated/sklearn.ensemble.IsolationForest.rst", "modules/generated/sklearn.ensemble.RandomForestClassifier.rst", "modules/generated/sklearn.ensemble.RandomForestRegressor.rst", "modules/generated/sklearn.ensemble.RandomTreesEmbedding.rst", "modules/generated/sklearn.ensemble.StackingClassifier.rst", "modules/generated/sklearn.ensemble.StackingRegressor.rst", "modules/generated/sklearn.ensemble.VotingClassifier.rst", "modules/generated/sklearn.ensemble.VotingRegressor.rst", "modules/generated/sklearn.exceptions.ConvergenceWarning.rst", "modules/generated/sklearn.exceptions.DataConversionWarning.rst", "modules/generated/sklearn.exceptions.DataDimensionalityWarning.rst", "modules/generated/sklearn.exceptions.EfficiencyWarning.rst", "modules/generated/sklearn.exceptions.EstimatorCheckFailedWarning.rst", "modules/generated/sklearn.exceptions.FitFailedWarning.rst", "modules/generated/sklearn.exceptions.InconsistentVersionWarning.rst", "modules/generated/sklearn.exceptions.NotFittedError.rst", "modules/generated/sklearn.exceptions.UndefinedMetricWarning.rst", "modules/generated/sklearn.experimental.enable_halving_search_cv.rst", "modules/generated/sklearn.experimental.enable_iterative_imputer.rst", "modules/generated/sklearn.feature_extraction.DictVectorizer.rst", "modules/generated/sklearn.feature_extraction.FeatureHasher.rst", "modules/generated/sklearn.feature_extraction.image.PatchExtractor.rst", "modules/generated/sklearn.feature_extraction.image.extract_patches_2d.rst", "modules/generated/sklearn.feature_extraction.image.grid_to_graph.rst", "modules/generated/sklearn.feature_extraction.image.img_to_graph.rst", "modules/generated/sklearn.feature_extraction.image.reconstruct_from_patches_2d.rst", "modules/generated/sklearn.feature_extraction.text.CountVectorizer.rst", "modules/generated/sklearn.feature_extraction.text.HashingVectorizer.rst", "modules/generated/sklearn.feature_extraction.text.TfidfTransformer.rst", "modules/generated/sklearn.feature_extraction.text.TfidfVectorizer.rst", "modules/generated/sklearn.feature_selection.GenericUnivariateSelect.rst", "modules/generated/sklearn.feature_selection.RFE.rst", "modules/generated/sklearn.feature_selection.RFECV.rst", "modules/generated/sklearn.feature_selection.SelectFdr.rst", "modules/generated/sklearn.feature_selection.SelectFpr.rst", "modules/generated/sklearn.feature_selection.SelectFromModel.rst", "modules/generated/sklearn.feature_selection.SelectFwe.rst", "modules/generated/sklearn.feature_selection.SelectKBest.rst", "modules/generated/sklearn.feature_selection.SelectPercentile.rst", "modules/generated/sklearn.feature_selection.SelectorMixin.rst", "modules/generated/sklearn.feature_selection.SequentialFeatureSelector.rst", "modules/generated/sklearn.feature_selection.VarianceThreshold.rst", "modules/generated/sklearn.feature_selection.chi2.rst", "modules/generated/sklearn.feature_selection.f_classif.rst", "modules/generated/sklearn.feature_selection.f_regression.rst", "modules/generated/sklearn.feature_selection.mutual_info_classif.rst", "modules/generated/sklearn.feature_selection.mutual_info_regression.rst", "modules/generated/sklearn.feature_selection.r_regression.rst", "modules/generated/sklearn.frozen.FrozenEstimator.rst", "modules/generated/sklearn.gaussian_process.GaussianProcessClassifier.rst", "modules/generated/sklearn.gaussian_process.GaussianProcessRegressor.rst", "modules/generated/sklearn.gaussian_process.kernels.CompoundKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.ConstantKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.DotProduct.rst", "modules/generated/sklearn.gaussian_process.kernels.ExpSineSquared.rst", "modules/generated/sklearn.gaussian_process.kernels.Exponentiation.rst", "modules/generated/sklearn.gaussian_process.kernels.Hyperparameter.rst", "modules/generated/sklearn.gaussian_process.kernels.Kernel.rst", "modules/generated/sklearn.gaussian_process.kernels.Matern.rst", "modules/generated/sklearn.gaussian_process.kernels.PairwiseKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.Product.rst", "modules/generated/sklearn.gaussian_process.kernels.RBF.rst", "modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic.rst", "modules/generated/sklearn.gaussian_process.kernels.Sum.rst", "modules/generated/sklearn.gaussian_process.kernels.WhiteKernel.rst", "modules/generated/sklearn.get_config.rst", "modules/generated/sklearn.impute.IterativeImputer.rst", "modules/generated/sklearn.impute.KNNImputer.rst", "modules/generated/sklearn.impute.MissingIndicator.rst", "modules/generated/sklearn.impute.SimpleImputer.rst", "modules/generated/sklearn.inspection.DecisionBoundaryDisplay.rst", "modules/generated/sklearn.inspection.PartialDependenceDisplay.rst", "modules/generated/sklearn.inspection.partial_dependence.rst", "modules/generated/sklearn.inspection.permutation_importance.rst", "modules/generated/sklearn.isotonic.IsotonicRegression.rst", "modules/generated/sklearn.isotonic.check_increasing.rst", "modules/generated/sklearn.isotonic.isotonic_regression.rst", "modules/generated/sklearn.kernel_approximation.AdditiveChi2Sampler.rst", "modules/generated/sklearn.kernel_approximation.Nystroem.rst", "modules/generated/sklearn.kernel_approximation.PolynomialCountSketch.rst", "modules/generated/sklearn.kernel_approximation.RBFSampler.rst", "modules/generated/sklearn.kernel_approximation.SkewedChi2Sampler.rst", "modules/generated/sklearn.kernel_ridge.KernelRidge.rst", "modules/generated/sklearn.linear_model.ARDRegression.rst", "modules/generated/sklearn.linear_model.BayesianRidge.rst", "modules/generated/sklearn.linear_model.ElasticNet.rst", "modules/generated/sklearn.linear_model.ElasticNetCV.rst", "modules/generated/sklearn.linear_model.GammaRegressor.rst", "modules/generated/sklearn.linear_model.HuberRegressor.rst", "modules/generated/sklearn.linear_model.Lars.rst", "modules/generated/sklearn.linear_model.LarsCV.rst", "modules/generated/sklearn.linear_model.Lasso.rst", "modules/generated/sklearn.linear_model.LassoCV.rst", "modules/generated/sklearn.linear_model.LassoLars.rst", "modules/generated/sklearn.linear_model.LassoLarsCV.rst", "modules/generated/sklearn.linear_model.LassoLarsIC.rst", "modules/generated/sklearn.linear_model.LinearRegression.rst", "modules/generated/sklearn.linear_model.LogisticRegression.rst", "modules/generated/sklearn.linear_model.LogisticRegressionCV.rst", "modules/generated/sklearn.linear_model.MultiTaskElasticNet.rst", "modules/generated/sklearn.linear_model.MultiTaskElasticNetCV.rst", "modules/generated/sklearn.linear_model.MultiTaskLasso.rst", "modules/generated/sklearn.linear_model.MultiTaskLassoCV.rst", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuit.rst", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuitCV.rst", "modules/generated/sklearn.linear_model.PassiveAggressiveClassifier.rst", "modules/generated/sklearn.linear_model.PassiveAggressiveRegressor.rst", "modules/generated/sklearn.linear_model.Perceptron.rst", "modules/generated/sklearn.linear_model.PoissonRegressor.rst", "modules/generated/sklearn.linear_model.QuantileRegressor.rst", "modules/generated/sklearn.linear_model.RANSACRegressor.rst", "modules/generated/sklearn.linear_model.Ridge.rst", "modules/generated/sklearn.linear_model.RidgeCV.rst", "modules/generated/sklearn.linear_model.RidgeClassifier.rst", "modules/generated/sklearn.linear_model.RidgeClassifierCV.rst", "modules/generated/sklearn.linear_model.SGDClassifier.rst", "modules/generated/sklearn.linear_model.SGDOneClassSVM.rst", "modules/generated/sklearn.linear_model.SGDRegressor.rst", "modules/generated/sklearn.linear_model.TheilSenRegressor.rst", "modules/generated/sklearn.linear_model.TweedieRegressor.rst", "modules/generated/sklearn.linear_model.enet_path.rst", "modules/generated/sklearn.linear_model.lars_path.rst", "modules/generated/sklearn.linear_model.lars_path_gram.rst", "modules/generated/sklearn.linear_model.lasso_path.rst", "modules/generated/sklearn.linear_model.orthogonal_mp.rst", "modules/generated/sklearn.linear_model.orthogonal_mp_gram.rst", "modules/generated/sklearn.linear_model.ridge_regression.rst", "modules/generated/sklearn.manifold.Isomap.rst", "modules/generated/sklearn.manifold.LocallyLinearEmbedding.rst", "modules/generated/sklearn.manifold.MDS.rst", "modules/generated/sklearn.manifold.SpectralEmbedding.rst", "modules/generated/sklearn.manifold.TSNE.rst", "modules/generated/sklearn.manifold.locally_linear_embedding.rst", "modules/generated/sklearn.manifold.smacof.rst", "modules/generated/sklearn.manifold.spectral_embedding.rst", "modules/generated/sklearn.manifold.trustworthiness.rst", "modules/generated/sklearn.metrics.ConfusionMatrixDisplay.rst", "modules/generated/sklearn.metrics.DetCurveDisplay.rst", "modules/generated/sklearn.metrics.DistanceMetric.rst", "modules/generated/sklearn.metrics.PrecisionRecallDisplay.rst", "modules/generated/sklearn.metrics.PredictionErrorDisplay.rst", "modules/generated/sklearn.metrics.RocCurveDisplay.rst", "modules/generated/sklearn.metrics.accuracy_score.rst", "modules/generated/sklearn.metrics.adjusted_mutual_info_score.rst", "modules/generated/sklearn.metrics.adjusted_rand_score.rst", "modules/generated/sklearn.metrics.auc.rst", "modules/generated/sklearn.metrics.average_precision_score.rst", "modules/generated/sklearn.metrics.balanced_accuracy_score.rst", "modules/generated/sklearn.metrics.brier_score_loss.rst", "modules/generated/sklearn.metrics.calinski_harabasz_score.rst", "modules/generated/sklearn.metrics.check_scoring.rst", "modules/generated/sklearn.metrics.class_likelihood_ratios.rst", "modules/generated/sklearn.metrics.classification_report.rst", "modules/generated/sklearn.metrics.cluster.contingency_matrix.rst", "modules/generated/sklearn.metrics.cluster.pair_confusion_matrix.rst", "modules/generated/sklearn.metrics.cohen_kappa_score.rst", "modules/generated/sklearn.metrics.completeness_score.rst", "modules/generated/sklearn.metrics.confusion_matrix.rst", "modules/generated/sklearn.metrics.consensus_score.rst", "modules/generated/sklearn.metrics.coverage_error.rst", "modules/generated/sklearn.metrics.d2_absolute_error_score.rst", "modules/generated/sklearn.metrics.d2_log_loss_score.rst", "modules/generated/sklearn.metrics.d2_pinball_score.rst", "modules/generated/sklearn.metrics.d2_tweedie_score.rst", "modules/generated/sklearn.metrics.davies_bouldin_score.rst", "modules/generated/sklearn.metrics.dcg_score.rst", "modules/generated/sklearn.metrics.det_curve.rst", "modules/generated/sklearn.metrics.explained_variance_score.rst", "modules/generated/sklearn.metrics.f1_score.rst", "modules/generated/sklearn.metrics.fbeta_score.rst", "modules/generated/sklearn.metrics.fowlkes_mallows_score.rst", "modules/generated/sklearn.metrics.get_scorer.rst", "modules/generated/sklearn.metrics.get_scorer_names.rst", "modules/generated/sklearn.metrics.hamming_loss.rst", "modules/generated/sklearn.metrics.hinge_loss.rst", "modules/generated/sklearn.metrics.homogeneity_completeness_v_measure.rst", "modules/generated/sklearn.metrics.homogeneity_score.rst", "modules/generated/sklearn.metrics.jaccard_score.rst", "modules/generated/sklearn.metrics.label_ranking_average_precision_score.rst", "modules/generated/sklearn.metrics.label_ranking_loss.rst", "modules/generated/sklearn.metrics.log_loss.rst", "modules/generated/sklearn.metrics.make_scorer.rst", "modules/generated/sklearn.metrics.matthews_corrcoef.rst", "modules/generated/sklearn.metrics.max_error.rst", "modules/generated/sklearn.metrics.mean_absolute_error.rst", "modules/generated/sklearn.metrics.mean_absolute_percentage_error.rst", "modules/generated/sklearn.metrics.mean_gamma_deviance.rst", "modules/generated/sklearn.metrics.mean_pinball_loss.rst", "modules/generated/sklearn.metrics.mean_poisson_deviance.rst", "modules/generated/sklearn.metrics.mean_squared_error.rst", "modules/generated/sklearn.metrics.mean_squared_log_error.rst", "modules/generated/sklearn.metrics.mean_tweedie_deviance.rst", "modules/generated/sklearn.metrics.median_absolute_error.rst", "modules/generated/sklearn.metrics.multilabel_confusion_matrix.rst", "modules/generated/sklearn.metrics.mutual_info_score.rst", "modules/generated/sklearn.metrics.ndcg_score.rst", "modules/generated/sklearn.metrics.normalized_mutual_info_score.rst", "modules/generated/sklearn.metrics.pairwise.additive_chi2_kernel.rst", "modules/generated/sklearn.metrics.pairwise.chi2_kernel.rst", "modules/generated/sklearn.metrics.pairwise.cosine_distances.rst", "modules/generated/sklearn.metrics.pairwise.cosine_similarity.rst", "modules/generated/sklearn.metrics.pairwise.distance_metrics.rst", "modules/generated/sklearn.metrics.pairwise.euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.haversine_distances.rst", "modules/generated/sklearn.metrics.pairwise.kernel_metrics.rst", "modules/generated/sklearn.metrics.pairwise.laplacian_kernel.rst", "modules/generated/sklearn.metrics.pairwise.linear_kernel.rst", "modules/generated/sklearn.metrics.pairwise.manhattan_distances.rst", "modules/generated/sklearn.metrics.pairwise.nan_euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_cosine_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_manhattan_distances.rst", "modules/generated/sklearn.metrics.pairwise.pairwise_kernels.rst", "modules/generated/sklearn.metrics.pairwise.polynomial_kernel.rst", "modules/generated/sklearn.metrics.pairwise.rbf_kernel.rst", "modules/generated/sklearn.metrics.pairwise.sigmoid_kernel.rst", "modules/generated/sklearn.metrics.pairwise_distances.rst", "modules/generated/sklearn.metrics.pairwise_distances_argmin.rst", "modules/generated/sklearn.metrics.pairwise_distances_argmin_min.rst", "modules/generated/sklearn.metrics.pairwise_distances_chunked.rst", "modules/generated/sklearn.metrics.precision_recall_curve.rst", "modules/generated/sklearn.metrics.precision_recall_fscore_support.rst", "modules/generated/sklearn.metrics.precision_score.rst", "modules/generated/sklearn.metrics.r2_score.rst", "modules/generated/sklearn.metrics.rand_score.rst", "modules/generated/sklearn.metrics.recall_score.rst", "modules/generated/sklearn.metrics.roc_auc_score.rst", "modules/generated/sklearn.metrics.roc_curve.rst", "modules/generated/sklearn.metrics.root_mean_squared_error.rst", "modules/generated/sklearn.metrics.root_mean_squared_log_error.rst", "modules/generated/sklearn.metrics.silhouette_samples.rst", "modules/generated/sklearn.metrics.silhouette_score.rst", "modules/generated/sklearn.metrics.top_k_accuracy_score.rst", "modules/generated/sklearn.metrics.v_measure_score.rst", "modules/generated/sklearn.metrics.zero_one_loss.rst", "modules/generated/sklearn.mixture.BayesianGaussianMixture.rst", "modules/generated/sklearn.mixture.GaussianMixture.rst", "modules/generated/sklearn.model_selection.FixedThresholdClassifier.rst", "modules/generated/sklearn.model_selection.GridSearchCV.rst", "modules/generated/sklearn.model_selection.GroupKFold.rst", "modules/generated/sklearn.model_selection.GroupShuffleSplit.rst", "modules/generated/sklearn.model_selection.HalvingGridSearchCV.rst", "modules/generated/sklearn.model_selection.HalvingRandomSearchCV.rst", "modules/generated/sklearn.model_selection.KFold.rst", "modules/generated/sklearn.model_selection.LearningCurveDisplay.rst", "modules/generated/sklearn.model_selection.LeaveOneGroupOut.rst", "modules/generated/sklearn.model_selection.LeaveOneOut.rst", "modules/generated/sklearn.model_selection.LeavePGroupsOut.rst", "modules/generated/sklearn.model_selection.LeavePOut.rst", "modules/generated/sklearn.model_selection.ParameterGrid.rst", "modules/generated/sklearn.model_selection.ParameterSampler.rst", "modules/generated/sklearn.model_selection.PredefinedSplit.rst", "modules/generated/sklearn.model_selection.RandomizedSearchCV.rst", "modules/generated/sklearn.model_selection.RepeatedKFold.rst", "modules/generated/sklearn.model_selection.RepeatedStratifiedKFold.rst", "modules/generated/sklearn.model_selection.ShuffleSplit.rst", "modules/generated/sklearn.model_selection.StratifiedGroupKFold.rst", "modules/generated/sklearn.model_selection.StratifiedKFold.rst", "modules/generated/sklearn.model_selection.StratifiedShuffleSplit.rst", "modules/generated/sklearn.model_selection.TimeSeriesSplit.rst", "modules/generated/sklearn.model_selection.TunedThresholdClassifierCV.rst", "modules/generated/sklearn.model_selection.ValidationCurveDisplay.rst", "modules/generated/sklearn.model_selection.check_cv.rst", "modules/generated/sklearn.model_selection.cross_val_predict.rst", "modules/generated/sklearn.model_selection.cross_val_score.rst", "modules/generated/sklearn.model_selection.cross_validate.rst", "modules/generated/sklearn.model_selection.learning_curve.rst", "modules/generated/sklearn.model_selection.permutation_test_score.rst", "modules/generated/sklearn.model_selection.train_test_split.rst", "modules/generated/sklearn.model_selection.validation_curve.rst", "modules/generated/sklearn.multiclass.OneVsOneClassifier.rst", "modules/generated/sklearn.multiclass.OneVsRestClassifier.rst", "modules/generated/sklearn.multiclass.OutputCodeClassifier.rst", "modules/generated/sklearn.multioutput.ClassifierChain.rst", "modules/generated/sklearn.multioutput.MultiOutputClassifier.rst", "modules/generated/sklearn.multioutput.MultiOutputRegressor.rst", "modules/generated/sklearn.multioutput.RegressorChain.rst", "modules/generated/sklearn.naive_bayes.BernoulliNB.rst", "modules/generated/sklearn.naive_bayes.CategoricalNB.rst", "modules/generated/sklearn.naive_bayes.ComplementNB.rst", "modules/generated/sklearn.naive_bayes.GaussianNB.rst", "modules/generated/sklearn.naive_bayes.MultinomialNB.rst", "modules/generated/sklearn.neighbors.BallTree.rst", "modules/generated/sklearn.neighbors.KDTree.rst", "modules/generated/sklearn.neighbors.KNeighborsClassifier.rst", "modules/generated/sklearn.neighbors.KNeighborsRegressor.rst", "modules/generated/sklearn.neighbors.KNeighborsTransformer.rst", "modules/generated/sklearn.neighbors.KernelDensity.rst", "modules/generated/sklearn.neighbors.LocalOutlierFactor.rst", "modules/generated/sklearn.neighbors.NearestCentroid.rst", "modules/generated/sklearn.neighbors.NearestNeighbors.rst", "modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsClassifier.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsRegressor.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsTransformer.rst", "modules/generated/sklearn.neighbors.kneighbors_graph.rst", "modules/generated/sklearn.neighbors.radius_neighbors_graph.rst", "modules/generated/sklearn.neighbors.sort_graph_by_row_values.rst", "modules/generated/sklearn.neural_network.BernoulliRBM.rst", "modules/generated/sklearn.neural_network.MLPClassifier.rst", "modules/generated/sklearn.neural_network.MLPRegressor.rst", "modules/generated/sklearn.pipeline.FeatureUnion.rst", "modules/generated/sklearn.pipeline.Pipeline.rst", "modules/generated/sklearn.pipeline.make_pipeline.rst", "modules/generated/sklearn.pipeline.make_union.rst", "modules/generated/sklearn.preprocessing.Binarizer.rst", "modules/generated/sklearn.preprocessing.FunctionTransformer.rst", "modules/generated/sklearn.preprocessing.KBinsDiscretizer.rst", "modules/generated/sklearn.preprocessing.KernelCenterer.rst", "modules/generated/sklearn.preprocessing.LabelBinarizer.rst", "modules/generated/sklearn.preprocessing.LabelEncoder.rst", "modules/generated/sklearn.preprocessing.MaxAbsScaler.rst", "modules/generated/sklearn.preprocessing.MinMaxScaler.rst", "modules/generated/sklearn.preprocessing.MultiLabelBinarizer.rst", "modules/generated/sklearn.preprocessing.Normalizer.rst", "modules/generated/sklearn.preprocessing.OneHotEncoder.rst", "modules/generated/sklearn.preprocessing.OrdinalEncoder.rst", "modules/generated/sklearn.preprocessing.PolynomialFeatures.rst", "modules/generated/sklearn.preprocessing.PowerTransformer.rst", "modules/generated/sklearn.preprocessing.QuantileTransformer.rst", "modules/generated/sklearn.preprocessing.RobustScaler.rst", "modules/generated/sklearn.preprocessing.SplineTransformer.rst", "modules/generated/sklearn.preprocessing.StandardScaler.rst", "modules/generated/sklearn.preprocessing.TargetEncoder.rst", "modules/generated/sklearn.preprocessing.add_dummy_feature.rst", "modules/generated/sklearn.preprocessing.binarize.rst", "modules/generated/sklearn.preprocessing.label_binarize.rst", "modules/generated/sklearn.preprocessing.maxabs_scale.rst", "modules/generated/sklearn.preprocessing.minmax_scale.rst", "modules/generated/sklearn.preprocessing.normalize.rst", "modules/generated/sklearn.preprocessing.power_transform.rst", "modules/generated/sklearn.preprocessing.quantile_transform.rst", "modules/generated/sklearn.preprocessing.robust_scale.rst", "modules/generated/sklearn.preprocessing.scale.rst", "modules/generated/sklearn.random_projection.GaussianRandomProjection.rst", "modules/generated/sklearn.random_projection.SparseRandomProjection.rst", "modules/generated/sklearn.random_projection.johnson_lindenstrauss_min_dim.rst", "modules/generated/sklearn.semi_supervised.LabelPropagation.rst", "modules/generated/sklearn.semi_supervised.LabelSpreading.rst", "modules/generated/sklearn.semi_supervised.SelfTrainingClassifier.rst", "modules/generated/sklearn.set_config.rst", "modules/generated/sklearn.show_versions.rst", "modules/generated/sklearn.svm.LinearSVC.rst", "modules/generated/sklearn.svm.LinearSVR.rst", "modules/generated/sklearn.svm.NuSVC.rst", "modules/generated/sklearn.svm.NuSVR.rst", "modules/generated/sklearn.svm.OneClassSVM.rst", "modules/generated/sklearn.svm.SVC.rst", "modules/generated/sklearn.svm.SVR.rst", "modules/generated/sklearn.svm.l1_min_c.rst", "modules/generated/sklearn.tree.DecisionTreeClassifier.rst", "modules/generated/sklearn.tree.DecisionTreeRegressor.rst", "modules/generated/sklearn.tree.ExtraTreeClassifier.rst", "modules/generated/sklearn.tree.ExtraTreeRegressor.rst", "modules/generated/sklearn.tree.export_graphviz.rst", "modules/generated/sklearn.tree.export_text.rst", "modules/generated/sklearn.tree.plot_tree.rst", "modules/generated/sklearn.utils.Bunch.rst", "modules/generated/sklearn.utils.ClassifierTags.rst", "modules/generated/sklearn.utils.InputTags.rst", "modules/generated/sklearn.utils.RegressorTags.rst", "modules/generated/sklearn.utils.Tags.rst", "modules/generated/sklearn.utils.TargetTags.rst", "modules/generated/sklearn.utils.TransformerTags.rst", "modules/generated/sklearn.utils._safe_indexing.rst", "modules/generated/sklearn.utils.arrayfuncs.min_pos.rst", "modules/generated/sklearn.utils.as_float_array.rst", "modules/generated/sklearn.utils.assert_all_finite.rst", "modules/generated/sklearn.utils.check_X_y.rst", "modules/generated/sklearn.utils.check_array.rst", "modules/generated/sklearn.utils.check_consistent_length.rst", "modules/generated/sklearn.utils.check_random_state.rst", "modules/generated/sklearn.utils.check_scalar.rst", "modules/generated/sklearn.utils.class_weight.compute_class_weight.rst", "modules/generated/sklearn.utils.class_weight.compute_sample_weight.rst", "modules/generated/sklearn.utils.deprecated.rst", "modules/generated/sklearn.utils.discovery.all_displays.rst", "modules/generated/sklearn.utils.discovery.all_estimators.rst", "modules/generated/sklearn.utils.discovery.all_functions.rst", "modules/generated/sklearn.utils.estimator_checks.check_estimator.rst", "modules/generated/sklearn.utils.estimator_checks.estimator_checks_generator.rst", "modules/generated/sklearn.utils.estimator_checks.parametrize_with_checks.rst", "modules/generated/sklearn.utils.estimator_html_repr.rst", "modules/generated/sklearn.utils.extmath.density.rst", "modules/generated/sklearn.utils.extmath.fast_logdet.rst", "modules/generated/sklearn.utils.extmath.randomized_range_finder.rst", "modules/generated/sklearn.utils.extmath.randomized_svd.rst", "modules/generated/sklearn.utils.extmath.safe_sparse_dot.rst", "modules/generated/sklearn.utils.extmath.weighted_mode.rst", "modules/generated/sklearn.utils.gen_batches.rst", "modules/generated/sklearn.utils.gen_even_slices.rst", "modules/generated/sklearn.utils.get_tags.rst", "modules/generated/sklearn.utils.graph.single_source_shortest_path_length.rst", "modules/generated/sklearn.utils.indexable.rst", "modules/generated/sklearn.utils.metadata_routing.MetadataRequest.rst", "modules/generated/sklearn.utils.metadata_routing.MetadataRouter.rst", "modules/generated/sklearn.utils.metadata_routing.MethodMapping.rst", "modules/generated/sklearn.utils.metadata_routing.get_routing_for_object.rst", "modules/generated/sklearn.utils.metadata_routing.process_routing.rst", "modules/generated/sklearn.utils.metaestimators.available_if.rst", "modules/generated/sklearn.utils.multiclass.is_multilabel.rst", "modules/generated/sklearn.utils.multiclass.type_of_target.rst", "modules/generated/sklearn.utils.multiclass.unique_labels.rst", "modules/generated/sklearn.utils.murmurhash3_32.rst", "modules/generated/sklearn.utils.parallel.Parallel.rst", "modules/generated/sklearn.utils.parallel.delayed.rst", "modules/generated/sklearn.utils.parallel_backend.rst", "modules/generated/sklearn.utils.random.sample_without_replacement.rst", "modules/generated/sklearn.utils.register_parallel_backend.rst", "modules/generated/sklearn.utils.resample.rst", "modules/generated/sklearn.utils.safe_mask.rst", "modules/generated/sklearn.utils.safe_sqr.rst", "modules/generated/sklearn.utils.shuffle.rst", "modules/generated/sklearn.utils.sparsefuncs.incr_mean_variance_axis.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_column_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_csr_column_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_row_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_column.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_row.rst", "modules/generated/sklearn.utils.sparsefuncs.mean_variance_axis.rst", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1.rst", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2.rst", "modules/generated/sklearn.utils.validation.check_is_fitted.rst", "modules/generated/sklearn.utils.validation.check_memory.rst", "modules/generated/sklearn.utils.validation.check_symmetric.rst", "modules/generated/sklearn.utils.validation.column_or_1d.rst", "modules/generated/sklearn.utils.validation.has_fit_parameter.rst", "modules/generated/sklearn.utils.validation.validate_data.rst", "modules/grid_search.rst", "modules/impute.rst", "modules/isotonic.rst", "modules/kernel_approximation.rst", "modules/kernel_ridge.rst", "modules/lda_qda.rst", "modules/learning_curve.rst", "modules/linear_model.rst", "modules/manifold.rst", "modules/metrics.rst", "modules/mixture.rst", "modules/model_evaluation.rst", "modules/multiclass.rst", "modules/naive_bayes.rst", "modules/neighbors.rst", "modules/neural_networks_supervised.rst", "modules/neural_networks_unsupervised.rst", "modules/outlier_detection.rst", "modules/partial_dependence.rst", "modules/permutation_importance.rst", "modules/pipeline.rst", "modules/preprocessing.rst", "modules/preprocessing_targets.rst", "modules/random_projection.rst", "modules/semi_supervised.rst", "modules/sgd.rst", "modules/svm.rst", "modules/tree.rst", "modules/unsupervised_reduction.rst", "presentations.rst", "related_projects.rst", "roadmap.rst", "sg_execution_times.rst", "supervised_learning.rst", "support.rst", "testimonials/testimonials.rst", "unsupervised_learning.rst", "user_guide.rst", "visualizations.rst", "whats_new.rst", "whats_new/_contributors.rst", "whats_new/older_versions.rst", "whats_new/v0.13.rst", "whats_new/v0.14.rst", "whats_new/v0.15.rst", "whats_new/v0.16.rst", "whats_new/v0.17.rst", "whats_new/v0.18.rst", "whats_new/v0.19.rst", "whats_new/v0.20.rst", "whats_new/v0.21.rst", "whats_new/v0.22.rst", "whats_new/v0.23.rst", "whats_new/v0.24.rst", "whats_new/v1.0.rst", "whats_new/v1.1.rst", "whats_new/v1.2.rst", "whats_new/v1.3.rst", "whats_new/v1.4.rst", "whats_new/v1.5.rst", "whats_new/v1.6.rst"], "indexentries": {"1d": [[389, "term-1d", true]], "1d array": [[389, "term-1d-array", true]], "2d": [[389, "term-2d", true]], "2d array": [[389, "term-2d-array", true]], "__call__() (sklearn.compose.make_column_selector method)": [[466, "sklearn.compose.make_column_selector.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.compoundkernel method)": [[615, "sklearn.gaussian_process.kernels.CompoundKernel.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.constantkernel method)": [[616, "sklearn.gaussian_process.kernels.ConstantKernel.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.dotproduct method)": [[617, "sklearn.gaussian_process.kernels.DotProduct.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.exponentiation method)": [[619, "sklearn.gaussian_process.kernels.Exponentiation.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.expsinesquared method)": [[618, "sklearn.gaussian_process.kernels.ExpSineSquared.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.kernel method)": [[621, "sklearn.gaussian_process.kernels.Kernel.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.matern method)": [[622, "sklearn.gaussian_process.kernels.Matern.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[623, "sklearn.gaussian_process.kernels.PairwiseKernel.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.product method)": [[624, "sklearn.gaussian_process.kernels.Product.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[626, "sklearn.gaussian_process.kernels.RationalQuadratic.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.rbf method)": [[625, "sklearn.gaussian_process.kernels.RBF.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.sum method)": [[627, "sklearn.gaussian_process.kernels.Sum.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.whitekernel method)": [[628, "sklearn.gaussian_process.kernels.WhiteKernel.__call__", false]], "__call__() (sklearn.utils.deprecated method)": [[940, "sklearn.utils.deprecated.__call__", false]], "__call__() (sklearn.utils.parallel.parallel method)": [[969, "sklearn.utils.parallel.Parallel.__call__", false]], "_safe_indexing() (in module sklearn.utils)": [[929, "sklearn.utils._safe_indexing", false]], "accuracy_score() (in module sklearn.metrics)": [[706, "sklearn.metrics.accuracy_score", false]], "adaboostclassifier (class in sklearn.ensemble)": [[554, "sklearn.ensemble.AdaBoostClassifier", false]], "adaboostregressor (class in sklearn.ensemble)": [[555, "sklearn.ensemble.AdaBoostRegressor", false]], "add() (sklearn.utils.metadata_routing.metadatarouter method)": [[960, "sklearn.utils.metadata_routing.MetadataRouter.add", false]], "add() (sklearn.utils.metadata_routing.methodmapping method)": [[961, "sklearn.utils.metadata_routing.MethodMapping.add", false]], "add_dummy_feature() (in module sklearn.preprocessing)": [[889, "sklearn.preprocessing.add_dummy_feature", false]], "add_self_request() (sklearn.utils.metadata_routing.metadatarouter method)": [[960, "sklearn.utils.metadata_routing.MetadataRouter.add_self_request", false]], "additive_chi2_kernel() (in module sklearn.metrics.pairwise)": [[761, "sklearn.metrics.pairwise.additive_chi2_kernel", false]], "additivechi2sampler (class in sklearn.kernel_approximation)": [[641, "sklearn.kernel_approximation.AdditiveChi2Sampler", false]], "adjusted_mutual_info_score() (in module sklearn.metrics)": [[707, "sklearn.metrics.adjusted_mutual_info_score", false]], "adjusted_rand_score() (in module sklearn.metrics)": [[708, "sklearn.metrics.adjusted_rand_score", false]], "affinity_propagation() (in module sklearn.cluster)": [[454, "sklearn.cluster.affinity_propagation", false]], "affinitypropagation (class in sklearn.cluster)": [[440, "sklearn.cluster.AffinityPropagation", false]], "agglomerativeclustering (class in sklearn.cluster)": [[441, "sklearn.cluster.AgglomerativeClustering", false]], "aic() (sklearn.mixture.gaussianmixture method)": [[801, "sklearn.mixture.GaussianMixture.aic", false]], "all_displays() (in module sklearn.utils.discovery)": [[941, "sklearn.utils.discovery.all_displays", false]], "all_estimators() (in module sklearn.utils.discovery)": [[942, "sklearn.utils.discovery.all_estimators", false]], "all_functions() (in module sklearn.utils.discovery)": [[943, "sklearn.utils.discovery.all_functions", false]], "api": [[389, "term-API", true]], "apply() (sklearn.ensemble.extratreesclassifier method)": [[558, "sklearn.ensemble.ExtraTreesClassifier.apply", false]], "apply() (sklearn.ensemble.extratreesregressor method)": [[559, "sklearn.ensemble.ExtraTreesRegressor.apply", false]], "apply() (sklearn.ensemble.gradientboostingclassifier method)": [[560, "sklearn.ensemble.GradientBoostingClassifier.apply", false]], "apply() (sklearn.ensemble.gradientboostingregressor method)": [[561, "sklearn.ensemble.GradientBoostingRegressor.apply", false]], "apply() (sklearn.ensemble.randomforestclassifier method)": [[565, "sklearn.ensemble.RandomForestClassifier.apply", false]], "apply() (sklearn.ensemble.randomforestregressor method)": [[566, "sklearn.ensemble.RandomForestRegressor.apply", false]], "apply() (sklearn.ensemble.randomtreesembedding method)": [[567, "sklearn.ensemble.RandomTreesEmbedding.apply", false]], "apply() (sklearn.tree.decisiontreeclassifier method)": [[915, "sklearn.tree.DecisionTreeClassifier.apply", false]], "apply() (sklearn.tree.decisiontreeregressor method)": [[916, "sklearn.tree.DecisionTreeRegressor.apply", false]], "apply() (sklearn.tree.extratreeclassifier method)": [[917, "sklearn.tree.ExtraTreeClassifier.apply", false]], "apply() (sklearn.tree.extratreeregressor method)": [[918, "sklearn.tree.ExtraTreeRegressor.apply", false]], "ardregression (class in sklearn.linear_model)": [[647, "sklearn.linear_model.ARDRegression", false]], "array-like": [[389, "term-array-like", true]], "as_float_array() (in module sklearn.utils)": [[931, "sklearn.utils.as_float_array", false]], "assert_all_finite() (in module sklearn.utils)": [[932, "sklearn.utils.assert_all_finite", false]], "attribute": [[389, "term-attribute", true]], "attributes": [[389, "term-attributes", true]], "auc() (in module sklearn.metrics)": [[709, "sklearn.metrics.auc", false]], "available_if() (in module sklearn.utils.metaestimators)": [[964, "sklearn.utils.metaestimators.available_if", false]], "average_precision_score() (in module sklearn.metrics)": [[710, "sklearn.metrics.average_precision_score", false]], "backwards compatibility": [[389, "term-backwards-compatibility", true]], "baggingclassifier (class in sklearn.ensemble)": [[556, "sklearn.ensemble.BaggingClassifier", false]], "baggingregressor (class in sklearn.ensemble)": [[557, "sklearn.ensemble.BaggingRegressor", false]], "balanced_accuracy_score() (in module sklearn.metrics)": [[711, "sklearn.metrics.balanced_accuracy_score", false]], "balltree (class in sklearn.neighbors)": [[847, "sklearn.neighbors.BallTree", false]], "baseestimator (class in sklearn.base)": [[421, "sklearn.base.BaseEstimator", false]], "bayesiangaussianmixture (class in sklearn.mixture)": [[800, "sklearn.mixture.BayesianGaussianMixture", false]], "bayesianridge (class in sklearn.linear_model)": [[648, "sklearn.linear_model.BayesianRidge", false]], "bernoullinb (class in sklearn.naive_bayes)": [[842, "sklearn.naive_bayes.BernoulliNB", false]], "bernoullirbm (class in sklearn.neural_network)": [[863, "sklearn.neural_network.BernoulliRBM", false]], "bic() (sklearn.mixture.gaussianmixture method)": [[801, "sklearn.mixture.GaussianMixture.bic", false]], "biclustermixin (class in sklearn.base)": [[422, "sklearn.base.BiclusterMixin", false]], "biclusters_ (sklearn.base.biclustermixin property)": [[422, "sklearn.base.BiclusterMixin.biclusters_", false]], "biclusters_ (sklearn.cluster.spectralbiclustering property)": [[451, "sklearn.cluster.SpectralBiclustering.biclusters_", false]], "biclusters_ (sklearn.cluster.spectralcoclustering property)": [[453, "sklearn.cluster.SpectralCoclustering.biclusters_", false]], "binarize() (in module sklearn.preprocessing)": [[890, "sklearn.preprocessing.binarize", false]], "binarizer (class in sklearn.preprocessing)": [[870, "sklearn.preprocessing.Binarizer", false]], "binary": [[389, "term-binary", true]], "birch (class in sklearn.cluster)": [[442, "sklearn.cluster.Birch", false]], "bisectingkmeans (class in sklearn.cluster)": [[443, "sklearn.cluster.BisectingKMeans", false]], "bounds (sklearn.gaussian_process.kernels.compoundkernel property)": [[615, "sklearn.gaussian_process.kernels.CompoundKernel.bounds", false]], "bounds (sklearn.gaussian_process.kernels.constantkernel property)": [[616, "sklearn.gaussian_process.kernels.ConstantKernel.bounds", false]], "bounds (sklearn.gaussian_process.kernels.dotproduct property)": [[617, "sklearn.gaussian_process.kernels.DotProduct.bounds", false]], "bounds (sklearn.gaussian_process.kernels.exponentiation property)": [[619, "sklearn.gaussian_process.kernels.Exponentiation.bounds", false]], "bounds (sklearn.gaussian_process.kernels.expsinesquared property)": [[618, "sklearn.gaussian_process.kernels.ExpSineSquared.bounds", false]], "bounds (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[620, "sklearn.gaussian_process.kernels.Hyperparameter.bounds", false]], "bounds (sklearn.gaussian_process.kernels.kernel property)": [[621, "sklearn.gaussian_process.kernels.Kernel.bounds", false]], "bounds (sklearn.gaussian_process.kernels.matern property)": [[622, "sklearn.gaussian_process.kernels.Matern.bounds", false]], "bounds (sklearn.gaussian_process.kernels.pairwisekernel property)": [[623, "sklearn.gaussian_process.kernels.PairwiseKernel.bounds", false]], "bounds (sklearn.gaussian_process.kernels.product property)": [[624, "sklearn.gaussian_process.kernels.Product.bounds", false]], "bounds (sklearn.gaussian_process.kernels.rationalquadratic property)": [[626, "sklearn.gaussian_process.kernels.RationalQuadratic.bounds", false]], "bounds (sklearn.gaussian_process.kernels.rbf property)": [[625, "sklearn.gaussian_process.kernels.RBF.bounds", false]], "bounds (sklearn.gaussian_process.kernels.sum property)": [[627, "sklearn.gaussian_process.kernels.Sum.bounds", false]], "bounds (sklearn.gaussian_process.kernels.whitekernel property)": [[628, "sklearn.gaussian_process.kernels.WhiteKernel.bounds", false]], "brier_score_loss() (in module sklearn.metrics)": [[712, "sklearn.metrics.brier_score_loss", false]], "build_analyzer() (sklearn.feature_extraction.text.countvectorizer method)": [[590, "sklearn.feature_extraction.text.CountVectorizer.build_analyzer", false]], "build_analyzer() (sklearn.feature_extraction.text.hashingvectorizer method)": [[591, "sklearn.feature_extraction.text.HashingVectorizer.build_analyzer", false]], "build_analyzer() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[593, "sklearn.feature_extraction.text.TfidfVectorizer.build_analyzer", false]], "build_preprocessor() (sklearn.feature_extraction.text.countvectorizer method)": [[590, "sklearn.feature_extraction.text.CountVectorizer.build_preprocessor", false]], "build_preprocessor() (sklearn.feature_extraction.text.hashingvectorizer method)": [[591, "sklearn.feature_extraction.text.HashingVectorizer.build_preprocessor", false]], "build_preprocessor() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[593, "sklearn.feature_extraction.text.TfidfVectorizer.build_preprocessor", false]], "build_tokenizer() (sklearn.feature_extraction.text.countvectorizer method)": [[590, "sklearn.feature_extraction.text.CountVectorizer.build_tokenizer", false]], "build_tokenizer() (sklearn.feature_extraction.text.hashingvectorizer method)": [[591, "sklearn.feature_extraction.text.HashingVectorizer.build_tokenizer", false]], "build_tokenizer() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[593, "sklearn.feature_extraction.text.TfidfVectorizer.build_tokenizer", false]], "bunch (class in sklearn.utils)": [[922, "sklearn.utils.Bunch", false]], "calibratedclassifiercv (class in sklearn.calibration)": [[437, "sklearn.calibration.CalibratedClassifierCV", false]], "calibration_curve() (in module sklearn.calibration)": [[439, "sklearn.calibration.calibration_curve", false]], "calibrationdisplay (class in sklearn.calibration)": [[438, "sklearn.calibration.CalibrationDisplay", false]], "calinski_harabasz_score() (in module sklearn.metrics)": [[713, "sklearn.metrics.calinski_harabasz_score", false]], "callable": [[389, "term-callable", true]], "categorical feature": [[389, "term-categorical-feature", true]], "categoricalnb (class in sklearn.naive_bayes)": [[843, "sklearn.naive_bayes.CategoricalNB", false]], "cca (class in sklearn.cross_decomposition)": [[482, "sklearn.cross_decomposition.CCA", false]], "check_array() (in module sklearn.utils)": [[934, "sklearn.utils.check_array", false]], "check_consistent_length() (in module sklearn.utils)": [[935, "sklearn.utils.check_consistent_length", false]], "check_cv() (in module sklearn.model_selection)": [[827, "sklearn.model_selection.check_cv", false]], "check_estimator() (in module sklearn.utils.estimator_checks)": [[944, "sklearn.utils.estimator_checks.check_estimator", false]], "check_increasing() (in module sklearn.isotonic)": [[639, "sklearn.isotonic.check_increasing", false]], "check_is_fitted() (in module sklearn.utils.validation)": [[987, "sklearn.utils.validation.check_is_fitted", false]], "check_memory() (in module sklearn.utils.validation)": [[988, "sklearn.utils.validation.check_memory", false]], "check_random_state() (in module sklearn.utils)": [[936, "sklearn.utils.check_random_state", false]], "check_scalar() (in module sklearn.utils)": [[937, "sklearn.utils.check_scalar", false]], "check_scoring() (in module sklearn.metrics)": [[714, "sklearn.metrics.check_scoring", false]], "check_symmetric() (in module sklearn.utils.validation)": [[989, "sklearn.utils.validation.check_symmetric", false]], "check_x_y() (in module sklearn.utils)": [[933, "sklearn.utils.check_X_y", false]], "chi2() (in module sklearn.feature_selection)": [[606, "sklearn.feature_selection.chi2", false]], "chi2_kernel() (in module sklearn.metrics.pairwise)": [[762, "sklearn.metrics.pairwise.chi2_kernel", false]], "class_likelihood_ratios() (in module sklearn.metrics)": [[715, "sklearn.metrics.class_likelihood_ratios", false]], "class_weight": [[389, "term-class_weight", true]], "classes_": [[389, "term-classes_", true]], "classes_ (sklearn.feature_selection.rfe property)": [[595, "sklearn.feature_selection.RFE.classes_", false]], "classes_ (sklearn.feature_selection.rfecv property)": [[596, "sklearn.feature_selection.RFECV.classes_", false]], "classes_ (sklearn.linear_model.ridgeclassifier property)": [[677, "sklearn.linear_model.RidgeClassifier.classes_", false]], "classes_ (sklearn.linear_model.ridgeclassifiercv property)": [[678, "sklearn.linear_model.RidgeClassifierCV.classes_", false]], "classes_ (sklearn.model_selection.fixedthresholdclassifier property)": [[802, "sklearn.model_selection.FixedThresholdClassifier.classes_", false]], "classes_ (sklearn.model_selection.gridsearchcv property)": [[803, "sklearn.model_selection.GridSearchCV.classes_", false]], "classes_ (sklearn.model_selection.halvinggridsearchcv property)": [[806, "sklearn.model_selection.HalvingGridSearchCV.classes_", false]], "classes_ (sklearn.model_selection.halvingrandomsearchcv property)": [[807, "sklearn.model_selection.HalvingRandomSearchCV.classes_", false]], "classes_ (sklearn.model_selection.randomizedsearchcv property)": [[817, "sklearn.model_selection.RandomizedSearchCV.classes_", false]], "classes_ (sklearn.model_selection.tunedthresholdclassifiercv property)": [[825, "sklearn.model_selection.TunedThresholdClassifierCV.classes_", false]], "classes_ (sklearn.pipeline.pipeline property)": [[867, "sklearn.pipeline.Pipeline.classes_", false]], "classification_report() (in module sklearn.metrics)": [[716, "sklearn.metrics.classification_report", false]], "classifier": [[389, "term-classifier", true]], "classifierchain (class in sklearn.multioutput)": [[838, "sklearn.multioutput.ClassifierChain", false]], "classifiermixin (class in sklearn.base)": [[424, "sklearn.base.ClassifierMixin", false]], "classifiers": [[389, "term-classifiers", true]], "classifiertags (class in sklearn.utils)": [[923, "sklearn.utils.ClassifierTags", false]], "classnameprefixfeaturesoutmixin (class in sklearn.base)": [[423, "sklearn.base.ClassNamePrefixFeaturesOutMixin", false]], "clear() (sklearn.utils.bunch method)": [[922, "sklearn.utils.Bunch.clear", false]], "clear_data_home() (in module sklearn.datasets)": [[486, "sklearn.datasets.clear_data_home", false]], "clone": [[389, "term-clone", true]], "clone() (in module sklearn.base)": [[432, "sklearn.base.clone", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.compoundkernel method)": [[615, "sklearn.gaussian_process.kernels.CompoundKernel.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.constantkernel method)": [[616, "sklearn.gaussian_process.kernels.ConstantKernel.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.dotproduct method)": [[617, "sklearn.gaussian_process.kernels.DotProduct.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.exponentiation method)": [[619, "sklearn.gaussian_process.kernels.Exponentiation.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.expsinesquared method)": [[618, "sklearn.gaussian_process.kernels.ExpSineSquared.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.kernel method)": [[621, "sklearn.gaussian_process.kernels.Kernel.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.matern method)": [[622, "sklearn.gaussian_process.kernels.Matern.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[623, "sklearn.gaussian_process.kernels.PairwiseKernel.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.product method)": [[624, "sklearn.gaussian_process.kernels.Product.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[626, "sklearn.gaussian_process.kernels.RationalQuadratic.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.rbf method)": [[625, "sklearn.gaussian_process.kernels.RBF.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.sum method)": [[627, "sklearn.gaussian_process.kernels.Sum.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.whitekernel method)": [[628, "sklearn.gaussian_process.kernels.WhiteKernel.clone_with_theta", false]], "cloned": [[389, "term-cloned", true]], "cluster_optics_dbscan() (in module sklearn.cluster)": [[455, "sklearn.cluster.cluster_optics_dbscan", false]], "cluster_optics_xi() (in module sklearn.cluster)": [[456, "sklearn.cluster.cluster_optics_xi", false]], "clusterer": [[389, "term-clusterer", true]], "clusterers": [[389, "term-clusterers", true]], "clustermixin (class in sklearn.base)": [[425, "sklearn.base.ClusterMixin", false]], "coef_": [[389, "term-coef_", true]], "coef_ (sklearn.svm.nusvc property)": [[909, "sklearn.svm.NuSVC.coef_", false]], "coef_ (sklearn.svm.nusvr property)": [[910, "sklearn.svm.NuSVR.coef_", false]], "coef_ (sklearn.svm.oneclasssvm property)": [[911, "sklearn.svm.OneClassSVM.coef_", false]], "coef_ (sklearn.svm.svc property)": [[912, "sklearn.svm.SVC.coef_", false]], "coef_ (sklearn.svm.svr property)": [[913, "sklearn.svm.SVR.coef_", false]], "cohen_kappa_score() (in module sklearn.metrics)": [[719, "sklearn.metrics.cohen_kappa_score", false]], "column_or_1d() (in module sklearn.utils.validation)": [[990, "sklearn.utils.validation.column_or_1d", false]], "columntransformer (class in sklearn.compose)": [[464, "sklearn.compose.ColumnTransformer", false]], "common tests": [[389, "term-common-tests", true]], "complementnb (class in sklearn.naive_bayes)": [[844, "sklearn.naive_bayes.ComplementNB", false]], "completeness_score() (in module sklearn.metrics)": [[720, "sklearn.metrics.completeness_score", false]], "components_": [[389, "term-components_", true]], "compoundkernel (class in sklearn.gaussian_process.kernels)": [[615, "sklearn.gaussian_process.kernels.CompoundKernel", false]], "compute_class_weight() (in module sklearn.utils.class_weight)": [[938, "sklearn.utils.class_weight.compute_class_weight", false]], "compute_optics_graph() (in module sklearn.cluster)": [[457, "sklearn.cluster.compute_optics_graph", false]], "compute_sample_weight() (in module sklearn.utils.class_weight)": [[939, "sklearn.utils.class_weight.compute_sample_weight", false]], "config_context() (in module sklearn)": [[468, "sklearn.config_context", false]], "confusion_matrix() (in module sklearn.metrics)": [[721, "sklearn.metrics.confusion_matrix", false]], "confusionmatrixdisplay (class in sklearn.metrics)": [[700, "sklearn.metrics.ConfusionMatrixDisplay", false]], "consensus_score() (in module sklearn.metrics)": [[722, "sklearn.metrics.consensus_score", false]], "constantkernel (class in sklearn.gaussian_process.kernels)": [[616, "sklearn.gaussian_process.kernels.ConstantKernel", false]], "consumer": [[389, "term-consumer", true]], "consumes() (sklearn.utils.metadata_routing.metadatarequest method)": [[959, "sklearn.utils.metadata_routing.MetadataRequest.consumes", false]], "consumes() (sklearn.utils.metadata_routing.metadatarouter method)": [[960, "sklearn.utils.metadata_routing.MetadataRouter.consumes", false]], "contingency_matrix() (in module sklearn.metrics.cluster)": [[717, "sklearn.metrics.cluster.contingency_matrix", false]], "continuous": [[389, "term-continuous", true]], "continuous multi-output": [[389, "term-continuous-multi-output", true]], "continuous multioutput": [[389, "term-continuous-multioutput", true]], "convergencewarning": [[572, "sklearn.exceptions.ConvergenceWarning", false]], "copy() (sklearn.utils.bunch method)": [[922, "sklearn.utils.Bunch.copy", false]], "correct_covariance() (sklearn.covariance.ellipticenvelope method)": [[469, "sklearn.covariance.EllipticEnvelope.correct_covariance", false]], "correct_covariance() (sklearn.covariance.mincovdet method)": [[474, "sklearn.covariance.MinCovDet.correct_covariance", false]], "cosine_distances() (in module sklearn.metrics.pairwise)": [[763, "sklearn.metrics.pairwise.cosine_distances", false]], "cosine_similarity() (in module sklearn.metrics.pairwise)": [[764, "sklearn.metrics.pairwise.cosine_similarity", false]], "cost_complexity_pruning_path() (sklearn.tree.decisiontreeclassifier method)": [[915, "sklearn.tree.DecisionTreeClassifier.cost_complexity_pruning_path", false]], "cost_complexity_pruning_path() (sklearn.tree.decisiontreeregressor method)": [[916, "sklearn.tree.DecisionTreeRegressor.cost_complexity_pruning_path", false]], "cost_complexity_pruning_path() (sklearn.tree.extratreeclassifier method)": [[917, "sklearn.tree.ExtraTreeClassifier.cost_complexity_pruning_path", false]], "cost_complexity_pruning_path() (sklearn.tree.extratreeregressor method)": [[918, "sklearn.tree.ExtraTreeRegressor.cost_complexity_pruning_path", false]], "count() (sklearn.gaussian_process.kernels.hyperparameter method)": [[620, "sklearn.gaussian_process.kernels.Hyperparameter.count", false]], "countvectorizer (class in sklearn.feature_extraction.text)": [[590, "sklearn.feature_extraction.text.CountVectorizer", false]], "coverage_error() (in module sklearn.metrics)": [[723, "sklearn.metrics.coverage_error", false]], "cross fitting": [[389, "term-0", true]], "cross validation": [[389, "term-1", true]], "cross-fitting": [[389, "term-cross-fitting", true]], "cross-validation": [[389, "term-cross-validation", true]], "cross-validation estimator": [[389, "term-cross-validation-estimator", true]], "cross-validation generator": [[389, "term-cross-validation-generator", true]], "cross-validation splitter": [[389, "term-cross-validation-splitter", true]], "cross_val_predict() (in module sklearn.model_selection)": [[828, "sklearn.model_selection.cross_val_predict", false]], "cross_val_score() (in module sklearn.model_selection)": [[829, "sklearn.model_selection.cross_val_score", false]], "cross_validate() (in module sklearn.model_selection)": [[830, "sklearn.model_selection.cross_validate", false]], "cv": [[389, "term-cv", true]], "cv splitter": [[389, "term-CV-splitter", true]], "d2_absolute_error_score() (in module sklearn.metrics)": [[724, "sklearn.metrics.d2_absolute_error_score", false]], "d2_log_loss_score() (in module sklearn.metrics)": [[725, "sklearn.metrics.d2_log_loss_score", false]], "d2_pinball_score() (in module sklearn.metrics)": [[726, "sklearn.metrics.d2_pinball_score", false]], "d2_tweedie_score() (in module sklearn.metrics)": [[727, "sklearn.metrics.d2_tweedie_score", false]], "data leakage": [[389, "term-data-leakage", true]], "data type": [[389, "term-data-type", true]], "dataconversionwarning": [[573, "sklearn.exceptions.DataConversionWarning", false]], "datadimensionalitywarning": [[574, "sklearn.exceptions.DataDimensionalityWarning", false]], "davies_bouldin_score() (in module sklearn.metrics)": [[728, "sklearn.metrics.davies_bouldin_score", false]], "dbscan (class in sklearn.cluster)": [[444, "sklearn.cluster.DBSCAN", false]], "dbscan() (in module sklearn.cluster)": [[418, "sklearn.cluster.dbscan", false]], "dbscan_clustering() (sklearn.cluster.hdbscan method)": [[446, "sklearn.cluster.HDBSCAN.dbscan_clustering", false]], "dcg_score() (in module sklearn.metrics)": [[729, "sklearn.metrics.dcg_score", false]], "decision_function": [[389, "term-decision_function", true]], "decision_function() (sklearn.covariance.ellipticenvelope method)": [[469, "sklearn.covariance.EllipticEnvelope.decision_function", false]], "decision_function() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[550, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.decision_function", false]], "decision_function() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[551, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.decision_function", false]], "decision_function() (sklearn.ensemble.adaboostclassifier method)": [[554, "sklearn.ensemble.AdaBoostClassifier.decision_function", false]], "decision_function() (sklearn.ensemble.baggingclassifier method)": [[556, "sklearn.ensemble.BaggingClassifier.decision_function", false]], "decision_function() (sklearn.ensemble.gradientboostingclassifier method)": [[560, "sklearn.ensemble.GradientBoostingClassifier.decision_function", false]], "decision_function() (sklearn.ensemble.histgradientboostingclassifier method)": [[562, "sklearn.ensemble.HistGradientBoostingClassifier.decision_function", false]], "decision_function() (sklearn.ensemble.isolationforest method)": [[564, "sklearn.ensemble.IsolationForest.decision_function", false]], "decision_function() (sklearn.ensemble.stackingclassifier method)": [[568, "sklearn.ensemble.StackingClassifier.decision_function", false]], "decision_function() (sklearn.feature_selection.rfe method)": [[595, "sklearn.feature_selection.RFE.decision_function", false]], "decision_function() (sklearn.feature_selection.rfecv method)": [[596, "sklearn.feature_selection.RFECV.decision_function", false]], "decision_function() (sklearn.linear_model.logisticregression method)": [[661, "sklearn.linear_model.LogisticRegression.decision_function", false]], "decision_function() (sklearn.linear_model.logisticregressioncv method)": [[662, "sklearn.linear_model.LogisticRegressionCV.decision_function", false]], "decision_function() (sklearn.linear_model.passiveaggressiveclassifier method)": [[669, "sklearn.linear_model.PassiveAggressiveClassifier.decision_function", false]], "decision_function() (sklearn.linear_model.perceptron method)": [[671, "sklearn.linear_model.Perceptron.decision_function", false]], "decision_function() (sklearn.linear_model.ridgeclassifier method)": [[677, "sklearn.linear_model.RidgeClassifier.decision_function", false]], "decision_function() (sklearn.linear_model.ridgeclassifiercv method)": [[678, "sklearn.linear_model.RidgeClassifierCV.decision_function", false]], "decision_function() (sklearn.linear_model.sgdclassifier method)": [[679, "sklearn.linear_model.SGDClassifier.decision_function", false]], "decision_function() (sklearn.linear_model.sgdoneclasssvm method)": [[680, "sklearn.linear_model.SGDOneClassSVM.decision_function", false]], "decision_function() (sklearn.model_selection.fixedthresholdclassifier method)": [[802, "sklearn.model_selection.FixedThresholdClassifier.decision_function", false]], "decision_function() (sklearn.model_selection.gridsearchcv method)": [[803, "sklearn.model_selection.GridSearchCV.decision_function", false]], "decision_function() (sklearn.model_selection.halvinggridsearchcv method)": [[806, "sklearn.model_selection.HalvingGridSearchCV.decision_function", false]], "decision_function() (sklearn.model_selection.halvingrandomsearchcv method)": [[807, "sklearn.model_selection.HalvingRandomSearchCV.decision_function", false]], "decision_function() (sklearn.model_selection.randomizedsearchcv method)": [[817, "sklearn.model_selection.RandomizedSearchCV.decision_function", false]], "decision_function() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[825, "sklearn.model_selection.TunedThresholdClassifierCV.decision_function", false]], "decision_function() (sklearn.multiclass.onevsoneclassifier method)": [[835, "sklearn.multiclass.OneVsOneClassifier.decision_function", false]], "decision_function() (sklearn.multiclass.onevsrestclassifier method)": [[836, "sklearn.multiclass.OneVsRestClassifier.decision_function", false]], "decision_function() (sklearn.multioutput.classifierchain method)": [[838, "sklearn.multioutput.ClassifierChain.decision_function", false]], "decision_function() (sklearn.neighbors.localoutlierfactor method)": [[853, "sklearn.neighbors.LocalOutlierFactor.decision_function", false]], "decision_function() (sklearn.neighbors.nearestcentroid method)": [[854, "sklearn.neighbors.NearestCentroid.decision_function", false]], "decision_function() (sklearn.pipeline.pipeline method)": [[867, "sklearn.pipeline.Pipeline.decision_function", false]], "decision_function() (sklearn.semi_supervised.selftrainingclassifier method)": [[904, "sklearn.semi_supervised.SelfTrainingClassifier.decision_function", false]], "decision_function() (sklearn.svm.linearsvc method)": [[907, "sklearn.svm.LinearSVC.decision_function", false]], "decision_function() (sklearn.svm.nusvc method)": [[909, "sklearn.svm.NuSVC.decision_function", false]], "decision_function() (sklearn.svm.oneclasssvm method)": [[911, "sklearn.svm.OneClassSVM.decision_function", false]], "decision_function() (sklearn.svm.svc method)": [[912, "sklearn.svm.SVC.decision_function", false]], "decision_path() (sklearn.ensemble.extratreesclassifier method)": [[558, "sklearn.ensemble.ExtraTreesClassifier.decision_path", false]], "decision_path() (sklearn.ensemble.extratreesregressor method)": [[559, "sklearn.ensemble.ExtraTreesRegressor.decision_path", false]], "decision_path() (sklearn.ensemble.randomforestclassifier method)": [[565, "sklearn.ensemble.RandomForestClassifier.decision_path", false]], "decision_path() (sklearn.ensemble.randomforestregressor method)": [[566, "sklearn.ensemble.RandomForestRegressor.decision_path", false]], "decision_path() (sklearn.ensemble.randomtreesembedding method)": [[567, "sklearn.ensemble.RandomTreesEmbedding.decision_path", false]], "decision_path() (sklearn.tree.decisiontreeclassifier method)": [[915, "sklearn.tree.DecisionTreeClassifier.decision_path", false]], "decision_path() (sklearn.tree.decisiontreeregressor method)": [[916, "sklearn.tree.DecisionTreeRegressor.decision_path", false]], "decision_path() (sklearn.tree.extratreeclassifier method)": [[917, "sklearn.tree.ExtraTreeClassifier.decision_path", false]], "decision_path() (sklearn.tree.extratreeregressor method)": [[918, "sklearn.tree.ExtraTreeRegressor.decision_path", false]], "decisionboundarydisplay (class in sklearn.inspection)": [[634, "sklearn.inspection.DecisionBoundaryDisplay", false]], "decisiontreeclassifier (class in sklearn.tree)": [[915, "sklearn.tree.DecisionTreeClassifier", false]], "decisiontreeregressor (class in sklearn.tree)": [[916, "sklearn.tree.DecisionTreeRegressor", false]], "decode() (sklearn.feature_extraction.text.countvectorizer method)": [[590, "sklearn.feature_extraction.text.CountVectorizer.decode", false]], "decode() (sklearn.feature_extraction.text.hashingvectorizer method)": [[591, "sklearn.feature_extraction.text.HashingVectorizer.decode", false]], "decode() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[593, "sklearn.feature_extraction.text.TfidfVectorizer.decode", false]], "delayed() (in module sklearn.utils.parallel)": [[970, "sklearn.utils.parallel.delayed", false]], "densify() (sklearn.linear_model.logisticregression method)": [[661, "sklearn.linear_model.LogisticRegression.densify", false]], "densify() (sklearn.linear_model.logisticregressioncv method)": [[662, "sklearn.linear_model.LogisticRegressionCV.densify", false]], "densify() (sklearn.linear_model.passiveaggressiveclassifier method)": [[669, "sklearn.linear_model.PassiveAggressiveClassifier.densify", false]], "densify() (sklearn.linear_model.passiveaggressiveregressor method)": [[670, "sklearn.linear_model.PassiveAggressiveRegressor.densify", false]], "densify() (sklearn.linear_model.perceptron method)": [[671, "sklearn.linear_model.Perceptron.densify", false]], "densify() (sklearn.linear_model.sgdclassifier method)": [[679, "sklearn.linear_model.SGDClassifier.densify", false]], "densify() (sklearn.linear_model.sgdoneclasssvm method)": [[680, "sklearn.linear_model.SGDOneClassSVM.densify", false]], "densify() (sklearn.linear_model.sgdregressor method)": [[681, "sklearn.linear_model.SGDRegressor.densify", false]], "densify() (sklearn.svm.linearsvc method)": [[907, "sklearn.svm.LinearSVC.densify", false]], "density estimator": [[389, "term-density-estimator", true]], "density() (in module sklearn.utils.extmath)": [[948, "sklearn.utils.extmath.density", false]], "densitymixin (class in sklearn.base)": [[426, "sklearn.base.DensityMixin", false]], "deprecated (class in sklearn.utils)": [[940, "sklearn.utils.deprecated", false]], "deprecation": [[389, "term-deprecation", true]], "det_curve() (in module sklearn.metrics)": [[730, "sklearn.metrics.det_curve", false]], "detcurvedisplay (class in sklearn.metrics)": [[701, "sklearn.metrics.DetCurveDisplay", false]], "diag() (sklearn.gaussian_process.kernels.compoundkernel method)": [[615, "sklearn.gaussian_process.kernels.CompoundKernel.diag", false]], "diag() (sklearn.gaussian_process.kernels.constantkernel method)": [[616, "sklearn.gaussian_process.kernels.ConstantKernel.diag", false]], "diag() (sklearn.gaussian_process.kernels.dotproduct method)": [[617, "sklearn.gaussian_process.kernels.DotProduct.diag", false]], "diag() (sklearn.gaussian_process.kernels.exponentiation method)": [[619, "sklearn.gaussian_process.kernels.Exponentiation.diag", false]], "diag() (sklearn.gaussian_process.kernels.expsinesquared method)": [[618, "sklearn.gaussian_process.kernels.ExpSineSquared.diag", false]], "diag() (sklearn.gaussian_process.kernels.kernel method)": [[621, "sklearn.gaussian_process.kernels.Kernel.diag", false]], "diag() (sklearn.gaussian_process.kernels.matern method)": [[622, "sklearn.gaussian_process.kernels.Matern.diag", false]], "diag() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[623, "sklearn.gaussian_process.kernels.PairwiseKernel.diag", false]], "diag() (sklearn.gaussian_process.kernels.product method)": [[624, "sklearn.gaussian_process.kernels.Product.diag", false]], "diag() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[626, "sklearn.gaussian_process.kernels.RationalQuadratic.diag", false]], "diag() (sklearn.gaussian_process.kernels.rbf method)": [[625, "sklearn.gaussian_process.kernels.RBF.diag", false]], "diag() (sklearn.gaussian_process.kernels.sum method)": [[627, "sklearn.gaussian_process.kernels.Sum.diag", false]], "diag() (sklearn.gaussian_process.kernels.whitekernel method)": [[628, "sklearn.gaussian_process.kernels.WhiteKernel.diag", false]], "dict_learning() (in module sklearn.decomposition)": [[546, "sklearn.decomposition.dict_learning", false]], "dict_learning_online() (in module sklearn.decomposition)": [[547, "sklearn.decomposition.dict_learning_online", false]], "dictionarylearning (class in sklearn.decomposition)": [[532, "sklearn.decomposition.DictionaryLearning", false]], "dictvectorizer (class in sklearn.feature_extraction)": [[583, "sklearn.feature_extraction.DictVectorizer", false]], "dimensionality": [[389, "term-dimensionality", true]], "dispatch_next() (sklearn.utils.parallel.parallel method)": [[969, "sklearn.utils.parallel.Parallel.dispatch_next", false]], "dispatch_one_batch() (sklearn.utils.parallel.parallel method)": [[969, "sklearn.utils.parallel.Parallel.dispatch_one_batch", false]], "distance_metrics() (in module sklearn.metrics.pairwise)": [[765, "sklearn.metrics.pairwise.distance_metrics", false]], "distancemetric (class in sklearn.metrics)": [[702, "sklearn.metrics.DistanceMetric", false]], "docstring": [[389, "term-docstring", true]], "dotproduct (class in sklearn.gaussian_process.kernels)": [[617, "sklearn.gaussian_process.kernels.DotProduct", false]], "double underscore": [[389, "term-double-underscore", true]], "double underscore notation": [[389, "term-double-underscore-notation", true]], "dtype": [[389, "term-dtype", true]], "duck typing": [[389, "term-duck-typing", true]], "dummyclassifier (class in sklearn.dummy)": [[552, "sklearn.dummy.DummyClassifier", false]], "dummyregressor (class in sklearn.dummy)": [[553, "sklearn.dummy.DummyRegressor", false]], "dump_svmlight_file() (in module sklearn.datasets)": [[487, "sklearn.datasets.dump_svmlight_file", false]], "early stopping": [[389, "term-early-stopping", true]], "efficiencywarning": [[575, "sklearn.exceptions.EfficiencyWarning", false]], "elasticnet (class in sklearn.linear_model)": [[649, "sklearn.linear_model.ElasticNet", false]], "elasticnetcv (class in sklearn.linear_model)": [[650, "sklearn.linear_model.ElasticNetCV", false]], "ellipticenvelope (class in sklearn.covariance)": [[469, "sklearn.covariance.EllipticEnvelope", false]], "embedding_": [[389, "term-embedding_", true]], "empirical_covariance() (in module sklearn.covariance)": [[477, "sklearn.covariance.empirical_covariance", false]], "empiricalcovariance (class in sklearn.covariance)": [[470, "sklearn.covariance.EmpiricalCovariance", false]], "enet_path() (in module sklearn.linear_model)": [[684, "sklearn.linear_model.enet_path", false]], "error_norm() (sklearn.covariance.ellipticenvelope method)": [[469, "sklearn.covariance.EllipticEnvelope.error_norm", false]], "error_norm() (sklearn.covariance.empiricalcovariance method)": [[470, "sklearn.covariance.EmpiricalCovariance.error_norm", false]], "error_norm() (sklearn.covariance.graphicallasso method)": [[471, "sklearn.covariance.GraphicalLasso.error_norm", false]], "error_norm() (sklearn.covariance.graphicallassocv method)": [[472, "sklearn.covariance.GraphicalLassoCV.error_norm", false]], "error_norm() (sklearn.covariance.ledoitwolf method)": [[473, "sklearn.covariance.LedoitWolf.error_norm", false]], "error_norm() (sklearn.covariance.mincovdet method)": [[474, "sklearn.covariance.MinCovDet.error_norm", false]], "error_norm() (sklearn.covariance.oas method)": [[475, "sklearn.covariance.OAS.error_norm", false]], "error_norm() (sklearn.covariance.shrunkcovariance method)": [[476, "sklearn.covariance.ShrunkCovariance.error_norm", false]], "estimate_bandwidth() (in module sklearn.cluster)": [[458, "sklearn.cluster.estimate_bandwidth", false]], "estimator": [[389, "term-estimator", true]], "estimator instance": [[389, "term-estimator-instance", true]], "estimator tags": [[389, "term-estimator-tags", true]], "estimator_checks_generator() (in module sklearn.utils.estimator_checks)": [[945, "sklearn.utils.estimator_checks.estimator_checks_generator", false]], "estimator_html_repr() (in module sklearn.utils)": [[947, "sklearn.utils.estimator_html_repr", false]], "estimatorcheckfailedwarning": [[576, "sklearn.exceptions.EstimatorCheckFailedWarning", false]], "estimators": [[389, "term-estimators", true]], "estimators_samples_ (sklearn.ensemble.baggingclassifier property)": [[556, "sklearn.ensemble.BaggingClassifier.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.baggingregressor property)": [[557, "sklearn.ensemble.BaggingRegressor.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.extratreesclassifier property)": [[558, "sklearn.ensemble.ExtraTreesClassifier.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.extratreesregressor property)": [[559, "sklearn.ensemble.ExtraTreesRegressor.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.isolationforest property)": [[564, "sklearn.ensemble.IsolationForest.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.randomforestclassifier property)": [[565, "sklearn.ensemble.RandomForestClassifier.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.randomforestregressor property)": [[566, "sklearn.ensemble.RandomForestRegressor.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.randomtreesembedding property)": [[567, "sklearn.ensemble.RandomTreesEmbedding.estimators_samples_", false]], "euclidean_distances() (in module sklearn.metrics.pairwise)": [[766, "sklearn.metrics.pairwise.euclidean_distances", false]], "evaluation metric": [[389, "term-evaluation-metric", true]], "evaluation metrics": [[389, "term-evaluation-metrics", true]], "examples": [[389, "term-examples", true]], "experimental": [[389, "term-experimental", true]], "explained_variance_score() (in module sklearn.metrics)": [[731, "sklearn.metrics.explained_variance_score", false]], "exponentiation (class in sklearn.gaussian_process.kernels)": [[619, "sklearn.gaussian_process.kernels.Exponentiation", false]], "export_graphviz() (in module sklearn.tree)": [[919, "sklearn.tree.export_graphviz", false]], "export_text() (in module sklearn.tree)": [[920, "sklearn.tree.export_text", false]], "expsinesquared (class in sklearn.gaussian_process.kernels)": [[618, "sklearn.gaussian_process.kernels.ExpSineSquared", false]], "extract_patches_2d() (in module sklearn.feature_extraction.image)": [[586, "sklearn.feature_extraction.image.extract_patches_2d", false]], "extratreeclassifier (class in sklearn.tree)": [[917, "sklearn.tree.ExtraTreeClassifier", false]], "extratreeregressor (class in sklearn.tree)": [[918, "sklearn.tree.ExtraTreeRegressor", false]], "extratreesclassifier (class in sklearn.ensemble)": [[558, "sklearn.ensemble.ExtraTreesClassifier", false]], "extratreesregressor (class in sklearn.ensemble)": [[559, "sklearn.ensemble.ExtraTreesRegressor", false]], "f1_score() (in module sklearn.metrics)": [[732, "sklearn.metrics.f1_score", false]], "f_classif() (in module sklearn.feature_selection)": [[607, "sklearn.feature_selection.f_classif", false]], "f_regression() (in module sklearn.feature_selection)": [[608, "sklearn.feature_selection.f_regression", false]], "factoranalysis (class in sklearn.decomposition)": [[533, "sklearn.decomposition.FactorAnalysis", false]], "fast_logdet() (in module sklearn.utils.extmath)": [[949, "sklearn.utils.extmath.fast_logdet", false]], "fastica (class in sklearn.decomposition)": [[534, "sklearn.decomposition.FastICA", false]], "fastica() (in module sklearn.decomposition)": [[419, "sklearn.decomposition.fastica", false]], "fbeta_score() (in module sklearn.metrics)": [[733, "sklearn.metrics.fbeta_score", false]], "feature": [[389, "term-feature", true]], "feature extractor": [[389, "term-feature-extractor", true]], "feature extractors": [[389, "term-feature-extractors", true]], "feature vector": [[389, "term-feature-vector", true]], "feature_importances_": [[389, "term-feature_importances_", true]], "feature_importances_ (sklearn.ensemble.adaboostclassifier property)": [[554, "sklearn.ensemble.AdaBoostClassifier.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.adaboostregressor property)": [[555, "sklearn.ensemble.AdaBoostRegressor.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.extratreesclassifier property)": [[558, "sklearn.ensemble.ExtraTreesClassifier.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.extratreesregressor property)": [[559, "sklearn.ensemble.ExtraTreesRegressor.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.gradientboostingclassifier property)": [[560, "sklearn.ensemble.GradientBoostingClassifier.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.gradientboostingregressor property)": [[561, "sklearn.ensemble.GradientBoostingRegressor.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.randomforestclassifier property)": [[565, "sklearn.ensemble.RandomForestClassifier.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.randomforestregressor property)": [[566, "sklearn.ensemble.RandomForestRegressor.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.randomtreesembedding property)": [[567, "sklearn.ensemble.RandomTreesEmbedding.feature_importances_", false]], "feature_importances_ (sklearn.tree.decisiontreeclassifier property)": [[915, "sklearn.tree.DecisionTreeClassifier.feature_importances_", false]], "feature_importances_ (sklearn.tree.decisiontreeregressor property)": [[916, "sklearn.tree.DecisionTreeRegressor.feature_importances_", false]], "feature_importances_ (sklearn.tree.extratreeclassifier property)": [[917, "sklearn.tree.ExtraTreeClassifier.feature_importances_", false]], "feature_importances_ (sklearn.tree.extratreeregressor property)": [[918, "sklearn.tree.ExtraTreeRegressor.feature_importances_", false]], "feature_names_in_ (sklearn.pipeline.featureunion property)": [[866, "sklearn.pipeline.FeatureUnion.feature_names_in_", false]], "feature_names_in_ (sklearn.pipeline.pipeline property)": [[867, "sklearn.pipeline.Pipeline.feature_names_in_", false]], "featureagglomeration (class in sklearn.cluster)": [[445, "sklearn.cluster.FeatureAgglomeration", false]], "featurehasher (class in sklearn.feature_extraction)": [[584, "sklearn.feature_extraction.FeatureHasher", false]], "features": [[389, "term-features", true]], "featureunion (class in sklearn.pipeline)": [[866, "sklearn.pipeline.FeatureUnion", false]], "fetch_20newsgroups() (in module sklearn.datasets)": [[488, "sklearn.datasets.fetch_20newsgroups", false]], "fetch_20newsgroups_vectorized() (in module sklearn.datasets)": [[489, "sklearn.datasets.fetch_20newsgroups_vectorized", false]], "fetch_california_housing() (in module sklearn.datasets)": [[490, "sklearn.datasets.fetch_california_housing", false]], "fetch_covtype() (in module sklearn.datasets)": [[491, "sklearn.datasets.fetch_covtype", false]], "fetch_file() (in module sklearn.datasets)": [[492, "sklearn.datasets.fetch_file", false]], "fetch_kddcup99() (in module sklearn.datasets)": [[493, "sklearn.datasets.fetch_kddcup99", false]], "fetch_lfw_pairs() (in module sklearn.datasets)": [[494, "sklearn.datasets.fetch_lfw_pairs", false]], "fetch_lfw_people() (in module sklearn.datasets)": [[495, "sklearn.datasets.fetch_lfw_people", false]], "fetch_olivetti_faces() (in module sklearn.datasets)": [[496, "sklearn.datasets.fetch_olivetti_faces", false]], "fetch_openml() (in module sklearn.datasets)": [[497, "sklearn.datasets.fetch_openml", false]], "fetch_rcv1() (in module sklearn.datasets)": [[498, "sklearn.datasets.fetch_rcv1", false]], "fetch_species_distributions() (in module sklearn.datasets)": [[499, "sklearn.datasets.fetch_species_distributions", false]], "fit": [[389, "term-fit", true]], "fit() (sklearn.calibration.calibratedclassifiercv method)": [[437, "sklearn.calibration.CalibratedClassifierCV.fit", false]], "fit() (sklearn.cluster.affinitypropagation method)": [[440, "sklearn.cluster.AffinityPropagation.fit", false]], "fit() (sklearn.cluster.agglomerativeclustering method)": [[441, "sklearn.cluster.AgglomerativeClustering.fit", false]], "fit() (sklearn.cluster.birch method)": [[442, "sklearn.cluster.Birch.fit", false]], "fit() (sklearn.cluster.bisectingkmeans method)": [[443, "sklearn.cluster.BisectingKMeans.fit", false]], "fit() (sklearn.cluster.dbscan method)": [[444, "sklearn.cluster.DBSCAN.fit", false]], "fit() (sklearn.cluster.featureagglomeration method)": [[445, "sklearn.cluster.FeatureAgglomeration.fit", false]], "fit() (sklearn.cluster.hdbscan method)": [[446, "sklearn.cluster.HDBSCAN.fit", false]], "fit() (sklearn.cluster.kmeans method)": [[447, "sklearn.cluster.KMeans.fit", false]], "fit() (sklearn.cluster.meanshift method)": [[448, "sklearn.cluster.MeanShift.fit", false]], "fit() (sklearn.cluster.minibatchkmeans method)": [[449, "sklearn.cluster.MiniBatchKMeans.fit", false]], "fit() (sklearn.cluster.optics method)": [[450, "sklearn.cluster.OPTICS.fit", false]], "fit() (sklearn.cluster.spectralbiclustering method)": [[451, "sklearn.cluster.SpectralBiclustering.fit", false]], "fit() (sklearn.cluster.spectralclustering method)": [[452, "sklearn.cluster.SpectralClustering.fit", false]], "fit() (sklearn.cluster.spectralcoclustering method)": [[453, "sklearn.cluster.SpectralCoclustering.fit", false]], "fit() (sklearn.compose.columntransformer method)": [[464, "sklearn.compose.ColumnTransformer.fit", false]], "fit() (sklearn.compose.transformedtargetregressor method)": [[465, "sklearn.compose.TransformedTargetRegressor.fit", false]], "fit() (sklearn.covariance.ellipticenvelope method)": [[469, "sklearn.covariance.EllipticEnvelope.fit", false]], "fit() (sklearn.covariance.empiricalcovariance method)": [[470, "sklearn.covariance.EmpiricalCovariance.fit", false]], "fit() (sklearn.covariance.graphicallasso method)": [[471, "sklearn.covariance.GraphicalLasso.fit", false]], "fit() (sklearn.covariance.graphicallassocv method)": [[472, "sklearn.covariance.GraphicalLassoCV.fit", false]], "fit() (sklearn.covariance.ledoitwolf method)": [[473, "sklearn.covariance.LedoitWolf.fit", false]], "fit() (sklearn.covariance.mincovdet method)": [[474, "sklearn.covariance.MinCovDet.fit", false]], "fit() (sklearn.covariance.oas method)": [[475, "sklearn.covariance.OAS.fit", false]], "fit() (sklearn.covariance.shrunkcovariance method)": [[476, "sklearn.covariance.ShrunkCovariance.fit", false]], "fit() (sklearn.cross_decomposition.cca method)": [[482, "sklearn.cross_decomposition.CCA.fit", false]], "fit() (sklearn.cross_decomposition.plscanonical method)": [[483, "sklearn.cross_decomposition.PLSCanonical.fit", false]], "fit() (sklearn.cross_decomposition.plsregression method)": [[484, "sklearn.cross_decomposition.PLSRegression.fit", false]], "fit() (sklearn.cross_decomposition.plssvd method)": [[485, "sklearn.cross_decomposition.PLSSVD.fit", false]], "fit() (sklearn.decomposition.dictionarylearning method)": [[532, "sklearn.decomposition.DictionaryLearning.fit", false]], "fit() (sklearn.decomposition.factoranalysis method)": [[533, "sklearn.decomposition.FactorAnalysis.fit", false]], "fit() (sklearn.decomposition.fastica method)": [[534, "sklearn.decomposition.FastICA.fit", false]], "fit() (sklearn.decomposition.incrementalpca method)": [[535, "sklearn.decomposition.IncrementalPCA.fit", false]], "fit() (sklearn.decomposition.kernelpca method)": [[536, "sklearn.decomposition.KernelPCA.fit", false]], "fit() (sklearn.decomposition.latentdirichletallocation method)": [[537, "sklearn.decomposition.LatentDirichletAllocation.fit", false]], "fit() (sklearn.decomposition.minibatchdictionarylearning method)": [[538, "sklearn.decomposition.MiniBatchDictionaryLearning.fit", false]], "fit() (sklearn.decomposition.minibatchnmf method)": [[539, "sklearn.decomposition.MiniBatchNMF.fit", false]], "fit() (sklearn.decomposition.minibatchsparsepca method)": [[540, "sklearn.decomposition.MiniBatchSparsePCA.fit", false]], "fit() (sklearn.decomposition.nmf method)": [[541, "sklearn.decomposition.NMF.fit", false]], "fit() (sklearn.decomposition.pca method)": [[542, "sklearn.decomposition.PCA.fit", false]], "fit() (sklearn.decomposition.sparsecoder method)": [[543, "sklearn.decomposition.SparseCoder.fit", false]], "fit() (sklearn.decomposition.sparsepca method)": [[544, "sklearn.decomposition.SparsePCA.fit", false]], "fit() (sklearn.decomposition.truncatedsvd method)": [[545, "sklearn.decomposition.TruncatedSVD.fit", false]], "fit() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[550, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit", false]], "fit() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[551, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.fit", false]], "fit() (sklearn.dummy.dummyclassifier method)": [[552, "sklearn.dummy.DummyClassifier.fit", false]], "fit() (sklearn.dummy.dummyregressor method)": [[553, "sklearn.dummy.DummyRegressor.fit", false]], "fit() (sklearn.ensemble.adaboostclassifier method)": [[554, "sklearn.ensemble.AdaBoostClassifier.fit", false]], "fit() (sklearn.ensemble.adaboostregressor method)": [[555, "sklearn.ensemble.AdaBoostRegressor.fit", false]], "fit() (sklearn.ensemble.baggingclassifier method)": [[556, "sklearn.ensemble.BaggingClassifier.fit", false]], "fit() (sklearn.ensemble.baggingregressor method)": [[557, "sklearn.ensemble.BaggingRegressor.fit", false]], "fit() (sklearn.ensemble.extratreesclassifier method)": [[558, "sklearn.ensemble.ExtraTreesClassifier.fit", false]], "fit() (sklearn.ensemble.extratreesregressor method)": [[559, "sklearn.ensemble.ExtraTreesRegressor.fit", false]], "fit() (sklearn.ensemble.gradientboostingclassifier method)": [[560, "sklearn.ensemble.GradientBoostingClassifier.fit", false]], "fit() (sklearn.ensemble.gradientboostingregressor method)": [[561, "sklearn.ensemble.GradientBoostingRegressor.fit", false]], "fit() (sklearn.ensemble.histgradientboostingclassifier method)": [[562, "sklearn.ensemble.HistGradientBoostingClassifier.fit", false]], "fit() (sklearn.ensemble.histgradientboostingregressor method)": [[563, "sklearn.ensemble.HistGradientBoostingRegressor.fit", false]], "fit() (sklearn.ensemble.isolationforest method)": [[564, "sklearn.ensemble.IsolationForest.fit", false]], "fit() (sklearn.ensemble.randomforestclassifier method)": [[565, "sklearn.ensemble.RandomForestClassifier.fit", false]], "fit() (sklearn.ensemble.randomforestregressor method)": [[566, "sklearn.ensemble.RandomForestRegressor.fit", false]], "fit() (sklearn.ensemble.randomtreesembedding method)": [[567, "sklearn.ensemble.RandomTreesEmbedding.fit", false]], "fit() (sklearn.ensemble.stackingclassifier method)": [[568, "sklearn.ensemble.StackingClassifier.fit", false]], "fit() (sklearn.ensemble.stackingregressor method)": [[569, "sklearn.ensemble.StackingRegressor.fit", false]], "fit() (sklearn.ensemble.votingclassifier method)": [[570, "sklearn.ensemble.VotingClassifier.fit", false]], "fit() (sklearn.ensemble.votingregressor method)": [[571, "sklearn.ensemble.VotingRegressor.fit", false]], "fit() (sklearn.feature_extraction.dictvectorizer method)": [[583, "sklearn.feature_extraction.DictVectorizer.fit", false]], "fit() (sklearn.feature_extraction.featurehasher method)": [[584, "sklearn.feature_extraction.FeatureHasher.fit", false]], "fit() (sklearn.feature_extraction.image.patchextractor method)": [[585, "sklearn.feature_extraction.image.PatchExtractor.fit", false]], "fit() (sklearn.feature_extraction.text.countvectorizer method)": [[590, "sklearn.feature_extraction.text.CountVectorizer.fit", false]], "fit() (sklearn.feature_extraction.text.hashingvectorizer method)": [[591, "sklearn.feature_extraction.text.HashingVectorizer.fit", false]], "fit() (sklearn.feature_extraction.text.tfidftransformer method)": [[592, "sklearn.feature_extraction.text.TfidfTransformer.fit", false]], "fit() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[593, "sklearn.feature_extraction.text.TfidfVectorizer.fit", false]], "fit() (sklearn.feature_selection.genericunivariateselect method)": [[594, "sklearn.feature_selection.GenericUnivariateSelect.fit", false]], "fit() (sklearn.feature_selection.rfe method)": [[595, "sklearn.feature_selection.RFE.fit", false]], "fit() (sklearn.feature_selection.rfecv method)": [[596, "sklearn.feature_selection.RFECV.fit", false]], "fit() (sklearn.feature_selection.selectfdr method)": [[597, "sklearn.feature_selection.SelectFdr.fit", false]], "fit() (sklearn.feature_selection.selectfpr method)": [[598, "sklearn.feature_selection.SelectFpr.fit", false]], "fit() (sklearn.feature_selection.selectfrommodel method)": [[599, "sklearn.feature_selection.SelectFromModel.fit", false]], "fit() (sklearn.feature_selection.selectfwe method)": [[600, "sklearn.feature_selection.SelectFwe.fit", false]], "fit() (sklearn.feature_selection.selectkbest method)": [[601, "sklearn.feature_selection.SelectKBest.fit", false]], "fit() (sklearn.feature_selection.selectpercentile method)": [[602, "sklearn.feature_selection.SelectPercentile.fit", false]], "fit() (sklearn.feature_selection.sequentialfeatureselector method)": [[604, "sklearn.feature_selection.SequentialFeatureSelector.fit", false]], "fit() (sklearn.feature_selection.variancethreshold method)": [[605, "sklearn.feature_selection.VarianceThreshold.fit", false]], "fit() (sklearn.frozen.frozenestimator method)": [[612, "sklearn.frozen.FrozenEstimator.fit", false]], "fit() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[613, "sklearn.gaussian_process.GaussianProcessClassifier.fit", false]], "fit() (sklearn.gaussian_process.gaussianprocessregressor method)": [[614, "sklearn.gaussian_process.GaussianProcessRegressor.fit", false]], "fit() (sklearn.impute.iterativeimputer method)": [[630, "sklearn.impute.IterativeImputer.fit", false]], "fit() (sklearn.impute.knnimputer method)": [[631, "sklearn.impute.KNNImputer.fit", false]], "fit() (sklearn.impute.missingindicator method)": [[632, "sklearn.impute.MissingIndicator.fit", false]], "fit() (sklearn.impute.simpleimputer method)": [[633, "sklearn.impute.SimpleImputer.fit", false]], "fit() (sklearn.isotonic.isotonicregression method)": [[638, "sklearn.isotonic.IsotonicRegression.fit", false]], "fit() (sklearn.kernel_approximation.additivechi2sampler method)": [[641, "sklearn.kernel_approximation.AdditiveChi2Sampler.fit", false]], "fit() (sklearn.kernel_approximation.nystroem method)": [[642, "sklearn.kernel_approximation.Nystroem.fit", false]], "fit() (sklearn.kernel_approximation.polynomialcountsketch method)": [[643, "sklearn.kernel_approximation.PolynomialCountSketch.fit", false]], "fit() (sklearn.kernel_approximation.rbfsampler method)": [[644, "sklearn.kernel_approximation.RBFSampler.fit", false]], "fit() (sklearn.kernel_approximation.skewedchi2sampler method)": [[645, "sklearn.kernel_approximation.SkewedChi2Sampler.fit", false]], "fit() (sklearn.kernel_ridge.kernelridge method)": [[646, "sklearn.kernel_ridge.KernelRidge.fit", false]], "fit() (sklearn.linear_model.ardregression method)": [[647, "sklearn.linear_model.ARDRegression.fit", false]], "fit() (sklearn.linear_model.bayesianridge method)": [[648, "sklearn.linear_model.BayesianRidge.fit", false]], "fit() (sklearn.linear_model.elasticnet method)": [[649, "sklearn.linear_model.ElasticNet.fit", false]], "fit() (sklearn.linear_model.elasticnetcv method)": [[650, "sklearn.linear_model.ElasticNetCV.fit", false]], "fit() (sklearn.linear_model.gammaregressor method)": [[651, "sklearn.linear_model.GammaRegressor.fit", false]], "fit() (sklearn.linear_model.huberregressor method)": [[652, "sklearn.linear_model.HuberRegressor.fit", false]], "fit() (sklearn.linear_model.lars method)": [[653, "sklearn.linear_model.Lars.fit", false]], "fit() (sklearn.linear_model.larscv method)": [[654, "sklearn.linear_model.LarsCV.fit", false]], "fit() (sklearn.linear_model.lasso method)": [[655, "sklearn.linear_model.Lasso.fit", false]], "fit() (sklearn.linear_model.lassocv method)": [[656, "sklearn.linear_model.LassoCV.fit", false]], "fit() (sklearn.linear_model.lassolars method)": [[657, "sklearn.linear_model.LassoLars.fit", false]], "fit() (sklearn.linear_model.lassolarscv method)": [[658, "sklearn.linear_model.LassoLarsCV.fit", false]], "fit() (sklearn.linear_model.lassolarsic method)": [[659, "sklearn.linear_model.LassoLarsIC.fit", false]], "fit() (sklearn.linear_model.linearregression method)": [[660, "sklearn.linear_model.LinearRegression.fit", false]], "fit() (sklearn.linear_model.logisticregression method)": [[661, "sklearn.linear_model.LogisticRegression.fit", false]], "fit() (sklearn.linear_model.logisticregressioncv method)": [[662, "sklearn.linear_model.LogisticRegressionCV.fit", false]], "fit() (sklearn.linear_model.multitaskelasticnet method)": [[663, "sklearn.linear_model.MultiTaskElasticNet.fit", false]], "fit() (sklearn.linear_model.multitaskelasticnetcv method)": [[664, "sklearn.linear_model.MultiTaskElasticNetCV.fit", false]], "fit() (sklearn.linear_model.multitasklasso method)": [[665, "sklearn.linear_model.MultiTaskLasso.fit", false]], "fit() (sklearn.linear_model.multitasklassocv method)": [[666, "sklearn.linear_model.MultiTaskLassoCV.fit", false]], "fit() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[667, "sklearn.linear_model.OrthogonalMatchingPursuit.fit", false]], "fit() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[668, "sklearn.linear_model.OrthogonalMatchingPursuitCV.fit", false]], "fit() (sklearn.linear_model.passiveaggressiveclassifier method)": [[669, "sklearn.linear_model.PassiveAggressiveClassifier.fit", false]], "fit() (sklearn.linear_model.passiveaggressiveregressor method)": [[670, "sklearn.linear_model.PassiveAggressiveRegressor.fit", false]], "fit() (sklearn.linear_model.perceptron method)": [[671, "sklearn.linear_model.Perceptron.fit", false]], "fit() (sklearn.linear_model.poissonregressor method)": [[672, "sklearn.linear_model.PoissonRegressor.fit", false]], "fit() (sklearn.linear_model.quantileregressor method)": [[673, "sklearn.linear_model.QuantileRegressor.fit", false]], "fit() (sklearn.linear_model.ransacregressor method)": [[674, "sklearn.linear_model.RANSACRegressor.fit", false]], "fit() (sklearn.linear_model.ridge method)": [[675, "sklearn.linear_model.Ridge.fit", false]], "fit() (sklearn.linear_model.ridgeclassifier method)": [[677, "sklearn.linear_model.RidgeClassifier.fit", false]], "fit() (sklearn.linear_model.ridgeclassifiercv method)": [[678, "sklearn.linear_model.RidgeClassifierCV.fit", false]], "fit() (sklearn.linear_model.ridgecv method)": [[676, "sklearn.linear_model.RidgeCV.fit", false]], "fit() (sklearn.linear_model.sgdclassifier method)": [[679, "sklearn.linear_model.SGDClassifier.fit", false]], "fit() (sklearn.linear_model.sgdoneclasssvm method)": [[680, "sklearn.linear_model.SGDOneClassSVM.fit", false]], "fit() (sklearn.linear_model.sgdregressor method)": [[681, "sklearn.linear_model.SGDRegressor.fit", false]], "fit() (sklearn.linear_model.theilsenregressor method)": [[682, "sklearn.linear_model.TheilSenRegressor.fit", false]], "fit() (sklearn.linear_model.tweedieregressor method)": [[683, "sklearn.linear_model.TweedieRegressor.fit", false]], "fit() (sklearn.manifold.isomap method)": [[691, "sklearn.manifold.Isomap.fit", false]], "fit() (sklearn.manifold.locallylinearembedding method)": [[692, "sklearn.manifold.LocallyLinearEmbedding.fit", false]], "fit() (sklearn.manifold.mds method)": [[693, "sklearn.manifold.MDS.fit", false]], "fit() (sklearn.manifold.spectralembedding method)": [[694, "sklearn.manifold.SpectralEmbedding.fit", false]], "fit() (sklearn.manifold.tsne method)": [[695, "sklearn.manifold.TSNE.fit", false]], "fit() (sklearn.mixture.bayesiangaussianmixture method)": [[800, "sklearn.mixture.BayesianGaussianMixture.fit", false]], "fit() (sklearn.mixture.gaussianmixture method)": [[801, "sklearn.mixture.GaussianMixture.fit", false]], "fit() (sklearn.model_selection.fixedthresholdclassifier method)": [[802, "sklearn.model_selection.FixedThresholdClassifier.fit", false]], "fit() (sklearn.model_selection.gridsearchcv method)": [[803, "sklearn.model_selection.GridSearchCV.fit", false]], "fit() (sklearn.model_selection.halvinggridsearchcv method)": [[806, "sklearn.model_selection.HalvingGridSearchCV.fit", false]], "fit() (sklearn.model_selection.halvingrandomsearchcv method)": [[807, "sklearn.model_selection.HalvingRandomSearchCV.fit", false]], "fit() (sklearn.model_selection.randomizedsearchcv method)": [[817, "sklearn.model_selection.RandomizedSearchCV.fit", false]], "fit() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[825, "sklearn.model_selection.TunedThresholdClassifierCV.fit", false]], "fit() (sklearn.multiclass.onevsoneclassifier method)": [[835, "sklearn.multiclass.OneVsOneClassifier.fit", false]], "fit() (sklearn.multiclass.onevsrestclassifier method)": [[836, "sklearn.multiclass.OneVsRestClassifier.fit", false]], "fit() (sklearn.multiclass.outputcodeclassifier method)": [[837, "sklearn.multiclass.OutputCodeClassifier.fit", false]], "fit() (sklearn.multioutput.classifierchain method)": [[838, "sklearn.multioutput.ClassifierChain.fit", false]], "fit() (sklearn.multioutput.multioutputclassifier method)": [[839, "sklearn.multioutput.MultiOutputClassifier.fit", false]], "fit() (sklearn.multioutput.multioutputregressor method)": [[840, "sklearn.multioutput.MultiOutputRegressor.fit", false]], "fit() (sklearn.multioutput.regressorchain method)": [[841, "sklearn.multioutput.RegressorChain.fit", false]], "fit() (sklearn.naive_bayes.bernoullinb method)": [[842, "sklearn.naive_bayes.BernoulliNB.fit", false]], "fit() (sklearn.naive_bayes.categoricalnb method)": [[843, "sklearn.naive_bayes.CategoricalNB.fit", false]], "fit() (sklearn.naive_bayes.complementnb method)": [[844, "sklearn.naive_bayes.ComplementNB.fit", false]], "fit() (sklearn.naive_bayes.gaussiannb method)": [[845, "sklearn.naive_bayes.GaussianNB.fit", false]], "fit() (sklearn.naive_bayes.multinomialnb method)": [[846, "sklearn.naive_bayes.MultinomialNB.fit", false]], "fit() (sklearn.neighbors.kerneldensity method)": [[852, "sklearn.neighbors.KernelDensity.fit", false]], "fit() (sklearn.neighbors.kneighborsclassifier method)": [[849, "sklearn.neighbors.KNeighborsClassifier.fit", false]], "fit() (sklearn.neighbors.kneighborsregressor method)": [[850, "sklearn.neighbors.KNeighborsRegressor.fit", false]], "fit() (sklearn.neighbors.kneighborstransformer method)": [[851, "sklearn.neighbors.KNeighborsTransformer.fit", false]], "fit() (sklearn.neighbors.localoutlierfactor method)": [[853, "sklearn.neighbors.LocalOutlierFactor.fit", false]], "fit() (sklearn.neighbors.nearestcentroid method)": [[854, "sklearn.neighbors.NearestCentroid.fit", false]], "fit() (sklearn.neighbors.nearestneighbors method)": [[855, "sklearn.neighbors.NearestNeighbors.fit", false]], "fit() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[856, "sklearn.neighbors.NeighborhoodComponentsAnalysis.fit", false]], "fit() (sklearn.neighbors.radiusneighborsclassifier method)": [[857, "sklearn.neighbors.RadiusNeighborsClassifier.fit", false]], "fit() (sklearn.neighbors.radiusneighborsregressor method)": [[858, "sklearn.neighbors.RadiusNeighborsRegressor.fit", false]], "fit() (sklearn.neighbors.radiusneighborstransformer method)": [[859, "sklearn.neighbors.RadiusNeighborsTransformer.fit", false]], "fit() (sklearn.neural_network.bernoullirbm method)": [[863, "sklearn.neural_network.BernoulliRBM.fit", false]], "fit() (sklearn.neural_network.mlpclassifier method)": [[864, "sklearn.neural_network.MLPClassifier.fit", false]], "fit() (sklearn.neural_network.mlpregressor method)": [[865, "sklearn.neural_network.MLPRegressor.fit", false]], "fit() (sklearn.pipeline.featureunion method)": [[866, "sklearn.pipeline.FeatureUnion.fit", false]], "fit() (sklearn.pipeline.pipeline method)": [[867, "sklearn.pipeline.Pipeline.fit", false]], "fit() (sklearn.preprocessing.binarizer method)": [[870, "sklearn.preprocessing.Binarizer.fit", false]], "fit() (sklearn.preprocessing.functiontransformer method)": [[871, "sklearn.preprocessing.FunctionTransformer.fit", false]], "fit() (sklearn.preprocessing.kbinsdiscretizer method)": [[872, "sklearn.preprocessing.KBinsDiscretizer.fit", false]], "fit() (sklearn.preprocessing.kernelcenterer method)": [[873, "sklearn.preprocessing.KernelCenterer.fit", false]], "fit() (sklearn.preprocessing.labelbinarizer method)": [[874, "sklearn.preprocessing.LabelBinarizer.fit", false]], "fit() (sklearn.preprocessing.labelencoder method)": [[875, "sklearn.preprocessing.LabelEncoder.fit", false]], "fit() (sklearn.preprocessing.maxabsscaler method)": [[876, "sklearn.preprocessing.MaxAbsScaler.fit", false]], "fit() (sklearn.preprocessing.minmaxscaler method)": [[877, "sklearn.preprocessing.MinMaxScaler.fit", false]], "fit() (sklearn.preprocessing.multilabelbinarizer method)": [[878, "sklearn.preprocessing.MultiLabelBinarizer.fit", false]], "fit() (sklearn.preprocessing.normalizer method)": [[879, "sklearn.preprocessing.Normalizer.fit", false]], "fit() (sklearn.preprocessing.onehotencoder method)": [[880, "sklearn.preprocessing.OneHotEncoder.fit", false]], "fit() (sklearn.preprocessing.ordinalencoder method)": [[881, "sklearn.preprocessing.OrdinalEncoder.fit", false]], "fit() (sklearn.preprocessing.polynomialfeatures method)": [[882, "sklearn.preprocessing.PolynomialFeatures.fit", false]], "fit() (sklearn.preprocessing.powertransformer method)": [[883, "sklearn.preprocessing.PowerTransformer.fit", false]], "fit() (sklearn.preprocessing.quantiletransformer method)": [[884, "sklearn.preprocessing.QuantileTransformer.fit", false]], "fit() (sklearn.preprocessing.robustscaler method)": [[885, "sklearn.preprocessing.RobustScaler.fit", false]], "fit() (sklearn.preprocessing.splinetransformer method)": [[886, "sklearn.preprocessing.SplineTransformer.fit", false]], "fit() (sklearn.preprocessing.standardscaler method)": [[887, "sklearn.preprocessing.StandardScaler.fit", false]], "fit() (sklearn.preprocessing.targetencoder method)": [[888, "sklearn.preprocessing.TargetEncoder.fit", false]], "fit() (sklearn.random_projection.gaussianrandomprojection method)": [[899, "sklearn.random_projection.GaussianRandomProjection.fit", false]], "fit() (sklearn.random_projection.sparserandomprojection method)": [[900, "sklearn.random_projection.SparseRandomProjection.fit", false]], "fit() (sklearn.semi_supervised.labelpropagation method)": [[902, "sklearn.semi_supervised.LabelPropagation.fit", false]], "fit() (sklearn.semi_supervised.labelspreading method)": [[903, "sklearn.semi_supervised.LabelSpreading.fit", false]], "fit() (sklearn.semi_supervised.selftrainingclassifier method)": [[904, "sklearn.semi_supervised.SelfTrainingClassifier.fit", false]], "fit() (sklearn.svm.linearsvc method)": [[907, "sklearn.svm.LinearSVC.fit", false]], "fit() (sklearn.svm.linearsvr method)": [[908, "sklearn.svm.LinearSVR.fit", false]], "fit() (sklearn.svm.nusvc method)": [[909, "sklearn.svm.NuSVC.fit", false]], "fit() (sklearn.svm.nusvr method)": [[910, "sklearn.svm.NuSVR.fit", false]], "fit() (sklearn.svm.oneclasssvm method)": [[911, "sklearn.svm.OneClassSVM.fit", false]], "fit() (sklearn.svm.svc method)": [[912, "sklearn.svm.SVC.fit", false]], "fit() (sklearn.svm.svr method)": [[913, "sklearn.svm.SVR.fit", false]], "fit() (sklearn.tree.decisiontreeclassifier method)": [[915, "sklearn.tree.DecisionTreeClassifier.fit", false]], "fit() (sklearn.tree.decisiontreeregressor method)": [[916, "sklearn.tree.DecisionTreeRegressor.fit", false]], "fit() (sklearn.tree.extratreeclassifier method)": [[917, "sklearn.tree.ExtraTreeClassifier.fit", false]], "fit() (sklearn.tree.extratreeregressor method)": [[918, "sklearn.tree.ExtraTreeRegressor.fit", false]], "fit_predict": [[389, "term-fit_predict", true]], "fit_predict (sklearn.cluster.featureagglomeration property)": [[445, "sklearn.cluster.FeatureAgglomeration.fit_predict", false]], "fit_predict() (sklearn.base.clustermixin method)": [[425, "sklearn.base.ClusterMixin.fit_predict", false]], "fit_predict() (sklearn.base.outliermixin method)": [[429, "sklearn.base.OutlierMixin.fit_predict", false]], "fit_predict() (sklearn.cluster.affinitypropagation method)": [[440, "sklearn.cluster.AffinityPropagation.fit_predict", false]], "fit_predict() (sklearn.cluster.agglomerativeclustering method)": [[441, "sklearn.cluster.AgglomerativeClustering.fit_predict", false]], "fit_predict() (sklearn.cluster.birch method)": [[442, "sklearn.cluster.Birch.fit_predict", false]], "fit_predict() (sklearn.cluster.bisectingkmeans method)": [[443, "sklearn.cluster.BisectingKMeans.fit_predict", false]], "fit_predict() (sklearn.cluster.dbscan method)": [[444, "sklearn.cluster.DBSCAN.fit_predict", false]], "fit_predict() (sklearn.cluster.hdbscan method)": [[446, "sklearn.cluster.HDBSCAN.fit_predict", false]], "fit_predict() (sklearn.cluster.kmeans method)": [[447, "sklearn.cluster.KMeans.fit_predict", false]], "fit_predict() (sklearn.cluster.meanshift method)": [[448, "sklearn.cluster.MeanShift.fit_predict", false]], "fit_predict() (sklearn.cluster.minibatchkmeans method)": [[449, "sklearn.cluster.MiniBatchKMeans.fit_predict", false]], "fit_predict() (sklearn.cluster.optics method)": [[450, "sklearn.cluster.OPTICS.fit_predict", false]], "fit_predict() (sklearn.cluster.spectralclustering method)": [[452, "sklearn.cluster.SpectralClustering.fit_predict", false]], "fit_predict() (sklearn.covariance.ellipticenvelope method)": [[469, "sklearn.covariance.EllipticEnvelope.fit_predict", false]], "fit_predict() (sklearn.ensemble.isolationforest method)": [[564, "sklearn.ensemble.IsolationForest.fit_predict", false]], "fit_predict() (sklearn.linear_model.sgdoneclasssvm method)": [[680, "sklearn.linear_model.SGDOneClassSVM.fit_predict", false]], "fit_predict() (sklearn.mixture.bayesiangaussianmixture method)": [[800, "sklearn.mixture.BayesianGaussianMixture.fit_predict", false]], "fit_predict() (sklearn.mixture.gaussianmixture method)": [[801, "sklearn.mixture.GaussianMixture.fit_predict", false]], "fit_predict() (sklearn.neighbors.localoutlierfactor method)": [[853, "sklearn.neighbors.LocalOutlierFactor.fit_predict", false]], "fit_predict() (sklearn.pipeline.pipeline method)": [[867, "sklearn.pipeline.Pipeline.fit_predict", false]], "fit_predict() (sklearn.svm.oneclasssvm method)": [[911, "sklearn.svm.OneClassSVM.fit_predict", false]], "fit_transform": [[389, "term-fit_transform", true]], "fit_transform() (sklearn.base.transformermixin method)": [[431, "sklearn.base.TransformerMixin.fit_transform", false]], "fit_transform() (sklearn.cluster.birch method)": [[442, "sklearn.cluster.Birch.fit_transform", false]], "fit_transform() (sklearn.cluster.bisectingkmeans method)": [[443, "sklearn.cluster.BisectingKMeans.fit_transform", false]], "fit_transform() (sklearn.cluster.featureagglomeration method)": [[445, "sklearn.cluster.FeatureAgglomeration.fit_transform", false]], "fit_transform() (sklearn.cluster.kmeans method)": [[447, "sklearn.cluster.KMeans.fit_transform", false]], "fit_transform() (sklearn.cluster.minibatchkmeans method)": [[449, "sklearn.cluster.MiniBatchKMeans.fit_transform", false]], "fit_transform() (sklearn.compose.columntransformer method)": [[464, "sklearn.compose.ColumnTransformer.fit_transform", false]], "fit_transform() (sklearn.cross_decomposition.cca method)": [[482, "sklearn.cross_decomposition.CCA.fit_transform", false]], "fit_transform() (sklearn.cross_decomposition.plscanonical method)": [[483, "sklearn.cross_decomposition.PLSCanonical.fit_transform", false]], "fit_transform() (sklearn.cross_decomposition.plsregression method)": [[484, "sklearn.cross_decomposition.PLSRegression.fit_transform", false]], "fit_transform() (sklearn.cross_decomposition.plssvd method)": [[485, "sklearn.cross_decomposition.PLSSVD.fit_transform", false]], "fit_transform() (sklearn.decomposition.dictionarylearning method)": [[532, "sklearn.decomposition.DictionaryLearning.fit_transform", false]], "fit_transform() (sklearn.decomposition.factoranalysis method)": [[533, "sklearn.decomposition.FactorAnalysis.fit_transform", false]], "fit_transform() (sklearn.decomposition.fastica method)": [[534, "sklearn.decomposition.FastICA.fit_transform", false]], "fit_transform() (sklearn.decomposition.incrementalpca method)": [[535, "sklearn.decomposition.IncrementalPCA.fit_transform", false]], "fit_transform() (sklearn.decomposition.kernelpca method)": [[536, "sklearn.decomposition.KernelPCA.fit_transform", false]], "fit_transform() (sklearn.decomposition.latentdirichletallocation method)": [[537, "sklearn.decomposition.LatentDirichletAllocation.fit_transform", false]], "fit_transform() (sklearn.decomposition.minibatchdictionarylearning method)": [[538, "sklearn.decomposition.MiniBatchDictionaryLearning.fit_transform", false]], "fit_transform() (sklearn.decomposition.minibatchnmf method)": [[539, "sklearn.decomposition.MiniBatchNMF.fit_transform", false]], "fit_transform() (sklearn.decomposition.minibatchsparsepca method)": [[540, "sklearn.decomposition.MiniBatchSparsePCA.fit_transform", false]], "fit_transform() (sklearn.decomposition.nmf method)": [[541, "sklearn.decomposition.NMF.fit_transform", false]], "fit_transform() (sklearn.decomposition.pca method)": [[542, "sklearn.decomposition.PCA.fit_transform", false]], "fit_transform() (sklearn.decomposition.sparsecoder method)": [[543, "sklearn.decomposition.SparseCoder.fit_transform", false]], "fit_transform() (sklearn.decomposition.sparsepca method)": [[544, "sklearn.decomposition.SparsePCA.fit_transform", false]], "fit_transform() (sklearn.decomposition.truncatedsvd method)": [[545, "sklearn.decomposition.TruncatedSVD.fit_transform", false]], "fit_transform() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[550, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit_transform", false]], "fit_transform() (sklearn.ensemble.randomtreesembedding method)": [[567, "sklearn.ensemble.RandomTreesEmbedding.fit_transform", false]], "fit_transform() (sklearn.ensemble.stackingclassifier method)": [[568, "sklearn.ensemble.StackingClassifier.fit_transform", false]], "fit_transform() (sklearn.ensemble.stackingregressor method)": [[569, "sklearn.ensemble.StackingRegressor.fit_transform", false]], "fit_transform() (sklearn.ensemble.votingclassifier method)": [[570, "sklearn.ensemble.VotingClassifier.fit_transform", false]], "fit_transform() (sklearn.ensemble.votingregressor method)": [[571, "sklearn.ensemble.VotingRegressor.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.dictvectorizer method)": [[583, "sklearn.feature_extraction.DictVectorizer.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.featurehasher method)": [[584, "sklearn.feature_extraction.FeatureHasher.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.image.patchextractor method)": [[585, "sklearn.feature_extraction.image.PatchExtractor.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.text.countvectorizer method)": [[590, "sklearn.feature_extraction.text.CountVectorizer.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.text.hashingvectorizer method)": [[591, "sklearn.feature_extraction.text.HashingVectorizer.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.text.tfidftransformer method)": [[592, "sklearn.feature_extraction.text.TfidfTransformer.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[593, "sklearn.feature_extraction.text.TfidfVectorizer.fit_transform", false]], "fit_transform() (sklearn.feature_selection.genericunivariateselect method)": [[594, "sklearn.feature_selection.GenericUnivariateSelect.fit_transform", false]], "fit_transform() (sklearn.feature_selection.rfe method)": [[595, "sklearn.feature_selection.RFE.fit_transform", false]], "fit_transform() (sklearn.feature_selection.rfecv method)": [[596, "sklearn.feature_selection.RFECV.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectfdr method)": [[597, "sklearn.feature_selection.SelectFdr.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectfpr method)": [[598, "sklearn.feature_selection.SelectFpr.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectfrommodel method)": [[599, "sklearn.feature_selection.SelectFromModel.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectfwe method)": [[600, "sklearn.feature_selection.SelectFwe.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectkbest method)": [[601, "sklearn.feature_selection.SelectKBest.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectormixin method)": [[603, "sklearn.feature_selection.SelectorMixin.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectpercentile method)": [[602, "sklearn.feature_selection.SelectPercentile.fit_transform", false]], "fit_transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[604, "sklearn.feature_selection.SequentialFeatureSelector.fit_transform", false]], "fit_transform() (sklearn.feature_selection.variancethreshold method)": [[605, "sklearn.feature_selection.VarianceThreshold.fit_transform", false]], "fit_transform() (sklearn.impute.iterativeimputer method)": [[630, "sklearn.impute.IterativeImputer.fit_transform", false]], "fit_transform() (sklearn.impute.knnimputer method)": [[631, "sklearn.impute.KNNImputer.fit_transform", false]], "fit_transform() (sklearn.impute.missingindicator method)": [[632, "sklearn.impute.MissingIndicator.fit_transform", false]], "fit_transform() (sklearn.impute.simpleimputer method)": [[633, "sklearn.impute.SimpleImputer.fit_transform", false]], "fit_transform() (sklearn.isotonic.isotonicregression method)": [[638, "sklearn.isotonic.IsotonicRegression.fit_transform", false]], "fit_transform() (sklearn.kernel_approximation.additivechi2sampler method)": [[641, "sklearn.kernel_approximation.AdditiveChi2Sampler.fit_transform", false]], "fit_transform() (sklearn.kernel_approximation.nystroem method)": [[642, "sklearn.kernel_approximation.Nystroem.fit_transform", false]], "fit_transform() (sklearn.kernel_approximation.polynomialcountsketch method)": [[643, "sklearn.kernel_approximation.PolynomialCountSketch.fit_transform", false]], "fit_transform() (sklearn.kernel_approximation.rbfsampler method)": [[644, "sklearn.kernel_approximation.RBFSampler.fit_transform", false]], "fit_transform() (sklearn.kernel_approximation.skewedchi2sampler method)": [[645, "sklearn.kernel_approximation.SkewedChi2Sampler.fit_transform", false]], "fit_transform() (sklearn.manifold.isomap method)": [[691, "sklearn.manifold.Isomap.fit_transform", false]], "fit_transform() (sklearn.manifold.locallylinearembedding method)": [[692, "sklearn.manifold.LocallyLinearEmbedding.fit_transform", false]], "fit_transform() (sklearn.manifold.mds method)": [[693, "sklearn.manifold.MDS.fit_transform", false]], "fit_transform() (sklearn.manifold.spectralembedding method)": [[694, "sklearn.manifold.SpectralEmbedding.fit_transform", false]], "fit_transform() (sklearn.manifold.tsne method)": [[695, "sklearn.manifold.TSNE.fit_transform", false]], "fit_transform() (sklearn.neighbors.kneighborstransformer method)": [[851, "sklearn.neighbors.KNeighborsTransformer.fit_transform", false]], "fit_transform() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[856, "sklearn.neighbors.NeighborhoodComponentsAnalysis.fit_transform", false]], "fit_transform() (sklearn.neighbors.radiusneighborstransformer method)": [[859, "sklearn.neighbors.RadiusNeighborsTransformer.fit_transform", false]], "fit_transform() (sklearn.neural_network.bernoullirbm method)": [[863, "sklearn.neural_network.BernoulliRBM.fit_transform", false]], "fit_transform() (sklearn.pipeline.featureunion method)": [[866, "sklearn.pipeline.FeatureUnion.fit_transform", false]], "fit_transform() (sklearn.pipeline.pipeline method)": [[867, "sklearn.pipeline.Pipeline.fit_transform", false]], "fit_transform() (sklearn.preprocessing.binarizer method)": [[870, "sklearn.preprocessing.Binarizer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.functiontransformer method)": [[871, "sklearn.preprocessing.FunctionTransformer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[872, "sklearn.preprocessing.KBinsDiscretizer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.kernelcenterer method)": [[873, "sklearn.preprocessing.KernelCenterer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.labelbinarizer method)": [[874, "sklearn.preprocessing.LabelBinarizer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.labelencoder method)": [[875, "sklearn.preprocessing.LabelEncoder.fit_transform", false]], "fit_transform() (sklearn.preprocessing.maxabsscaler method)": [[876, "sklearn.preprocessing.MaxAbsScaler.fit_transform", false]], "fit_transform() (sklearn.preprocessing.minmaxscaler method)": [[877, "sklearn.preprocessing.MinMaxScaler.fit_transform", false]], "fit_transform() (sklearn.preprocessing.multilabelbinarizer method)": [[878, "sklearn.preprocessing.MultiLabelBinarizer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.normalizer method)": [[879, "sklearn.preprocessing.Normalizer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.onehotencoder method)": [[880, "sklearn.preprocessing.OneHotEncoder.fit_transform", false]], "fit_transform() (sklearn.preprocessing.ordinalencoder method)": [[881, "sklearn.preprocessing.OrdinalEncoder.fit_transform", false]], "fit_transform() (sklearn.preprocessing.polynomialfeatures method)": [[882, "sklearn.preprocessing.PolynomialFeatures.fit_transform", false]], "fit_transform() (sklearn.preprocessing.powertransformer method)": [[883, "sklearn.preprocessing.PowerTransformer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.quantiletransformer method)": [[884, "sklearn.preprocessing.QuantileTransformer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.robustscaler method)": [[885, "sklearn.preprocessing.RobustScaler.fit_transform", false]], "fit_transform() (sklearn.preprocessing.splinetransformer method)": [[886, "sklearn.preprocessing.SplineTransformer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.standardscaler method)": [[887, "sklearn.preprocessing.StandardScaler.fit_transform", false]], "fit_transform() (sklearn.preprocessing.targetencoder method)": [[888, "sklearn.preprocessing.TargetEncoder.fit_transform", false]], "fit_transform() (sklearn.random_projection.gaussianrandomprojection method)": [[899, "sklearn.random_projection.GaussianRandomProjection.fit_transform", false]], "fit_transform() (sklearn.random_projection.sparserandomprojection method)": [[900, "sklearn.random_projection.SparseRandomProjection.fit_transform", false]], "fitfailedwarning": [[577, "sklearn.exceptions.FitFailedWarning", false]], "fitted": [[389, "term-fitted", true]], "fitting": [[389, "term-fitting", true]], "fixed (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[620, "sklearn.gaussian_process.kernels.Hyperparameter.fixed", false]], "fixedthresholdclassifier (class in sklearn.model_selection)": [[802, "sklearn.model_selection.FixedThresholdClassifier", false]], "format() (sklearn.utils.parallel.parallel method)": [[969, "sklearn.utils.parallel.Parallel.format", false]], "fowlkes_mallows_score() (in module sklearn.metrics)": [[734, "sklearn.metrics.fowlkes_mallows_score", false]], "from_estimator() (sklearn.calibration.calibrationdisplay class method)": [[438, "sklearn.calibration.CalibrationDisplay.from_estimator", false]], "from_estimator() (sklearn.inspection.decisionboundarydisplay class method)": [[634, "sklearn.inspection.DecisionBoundaryDisplay.from_estimator", false]], "from_estimator() (sklearn.inspection.partialdependencedisplay class method)": [[635, "sklearn.inspection.PartialDependenceDisplay.from_estimator", false]], "from_estimator() (sklearn.metrics.confusionmatrixdisplay class method)": [[700, "sklearn.metrics.ConfusionMatrixDisplay.from_estimator", false]], "from_estimator() (sklearn.metrics.detcurvedisplay class method)": [[701, "sklearn.metrics.DetCurveDisplay.from_estimator", false]], "from_estimator() (sklearn.metrics.precisionrecalldisplay class method)": [[703, "sklearn.metrics.PrecisionRecallDisplay.from_estimator", false]], "from_estimator() (sklearn.metrics.predictionerrordisplay class method)": [[704, "sklearn.metrics.PredictionErrorDisplay.from_estimator", false]], "from_estimator() (sklearn.metrics.roccurvedisplay class method)": [[705, "sklearn.metrics.RocCurveDisplay.from_estimator", false]], "from_estimator() (sklearn.model_selection.learningcurvedisplay class method)": [[809, "sklearn.model_selection.LearningCurveDisplay.from_estimator", false]], "from_estimator() (sklearn.model_selection.validationcurvedisplay class method)": [[826, "sklearn.model_selection.ValidationCurveDisplay.from_estimator", false]], "from_predictions() (sklearn.calibration.calibrationdisplay class method)": [[438, "sklearn.calibration.CalibrationDisplay.from_predictions", false]], "from_predictions() (sklearn.metrics.confusionmatrixdisplay class method)": [[700, "sklearn.metrics.ConfusionMatrixDisplay.from_predictions", false]], "from_predictions() (sklearn.metrics.detcurvedisplay class method)": [[701, "sklearn.metrics.DetCurveDisplay.from_predictions", false]], "from_predictions() (sklearn.metrics.precisionrecalldisplay class method)": [[703, "sklearn.metrics.PrecisionRecallDisplay.from_predictions", false]], "from_predictions() (sklearn.metrics.predictionerrordisplay class method)": [[704, "sklearn.metrics.PredictionErrorDisplay.from_predictions", false]], "from_predictions() (sklearn.metrics.roccurvedisplay class method)": [[705, "sklearn.metrics.RocCurveDisplay.from_predictions", false]], "fromkeys() (sklearn.utils.bunch method)": [[922, "sklearn.utils.Bunch.fromkeys", false]], "frozenestimator (class in sklearn.frozen)": [[612, "sklearn.frozen.FrozenEstimator", false]], "function": [[389, "term-function", true]], "functiontransformer (class in sklearn.preprocessing)": [[871, "sklearn.preprocessing.FunctionTransformer", false]], "gallery": [[389, "term-gallery", true]], "gammaregressor (class in sklearn.linear_model)": [[651, "sklearn.linear_model.GammaRegressor", false]], "gaussianmixture (class in sklearn.mixture)": [[801, "sklearn.mixture.GaussianMixture", false]], "gaussiannb (class in sklearn.naive_bayes)": [[845, "sklearn.naive_bayes.GaussianNB", false]], "gaussianprocessclassifier (class in sklearn.gaussian_process)": [[613, "sklearn.gaussian_process.GaussianProcessClassifier", false]], "gaussianprocessregressor (class in sklearn.gaussian_process)": [[614, "sklearn.gaussian_process.GaussianProcessRegressor", false]], "gaussianrandomprojection (class in sklearn.random_projection)": [[899, "sklearn.random_projection.GaussianRandomProjection", false]], "gen_batches() (in module sklearn.utils)": [[954, "sklearn.utils.gen_batches", false]], "gen_even_slices() (in module sklearn.utils)": [[955, "sklearn.utils.gen_even_slices", false]], "genericunivariateselect (class in sklearn.feature_selection)": [[594, "sklearn.feature_selection.GenericUnivariateSelect", false]], "get() (sklearn.utils.bunch method)": [[922, "sklearn.utils.Bunch.get", false]], "get_arrays() (sklearn.neighbors.balltree method)": [[847, "sklearn.neighbors.BallTree.get_arrays", false]], "get_arrays() (sklearn.neighbors.kdtree method)": [[848, "sklearn.neighbors.KDTree.get_arrays", false]], "get_config() (in module sklearn)": [[629, "sklearn.get_config", false]], "get_covariance() (sklearn.decomposition.factoranalysis method)": [[533, "sklearn.decomposition.FactorAnalysis.get_covariance", false]], "get_covariance() (sklearn.decomposition.incrementalpca method)": [[535, "sklearn.decomposition.IncrementalPCA.get_covariance", false]], "get_covariance() (sklearn.decomposition.pca method)": [[542, "sklearn.decomposition.PCA.get_covariance", false]], "get_data_home() (in module sklearn.datasets)": [[500, "sklearn.datasets.get_data_home", false]], "get_depth() (sklearn.tree.decisiontreeclassifier method)": [[915, "sklearn.tree.DecisionTreeClassifier.get_depth", false]], "get_depth() (sklearn.tree.decisiontreeregressor method)": [[916, "sklearn.tree.DecisionTreeRegressor.get_depth", false]], "get_depth() (sklearn.tree.extratreeclassifier method)": [[917, "sklearn.tree.ExtraTreeClassifier.get_depth", false]], "get_depth() (sklearn.tree.extratreeregressor method)": [[918, "sklearn.tree.ExtraTreeRegressor.get_depth", false]], "get_feature_names_out": [[389, "term-get_feature_names_out", true]], "get_feature_names_out() (sklearn.base.classnameprefixfeaturesoutmixin method)": [[423, "sklearn.base.ClassNamePrefixFeaturesOutMixin.get_feature_names_out", false]], "get_feature_names_out() (sklearn.base.onetoonefeaturemixin method)": [[428, "sklearn.base.OneToOneFeatureMixin.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cluster.birch method)": [[442, "sklearn.cluster.Birch.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cluster.bisectingkmeans method)": [[443, "sklearn.cluster.BisectingKMeans.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cluster.featureagglomeration method)": [[445, "sklearn.cluster.FeatureAgglomeration.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cluster.kmeans method)": [[447, "sklearn.cluster.KMeans.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cluster.minibatchkmeans method)": [[449, "sklearn.cluster.MiniBatchKMeans.get_feature_names_out", false]], "get_feature_names_out() (sklearn.compose.columntransformer method)": [[464, "sklearn.compose.ColumnTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cross_decomposition.cca method)": [[482, "sklearn.cross_decomposition.CCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cross_decomposition.plscanonical method)": [[483, "sklearn.cross_decomposition.PLSCanonical.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cross_decomposition.plsregression method)": [[484, "sklearn.cross_decomposition.PLSRegression.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cross_decomposition.plssvd method)": [[485, "sklearn.cross_decomposition.PLSSVD.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.dictionarylearning method)": [[532, "sklearn.decomposition.DictionaryLearning.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.factoranalysis method)": [[533, "sklearn.decomposition.FactorAnalysis.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.fastica method)": [[534, "sklearn.decomposition.FastICA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.incrementalpca method)": [[535, "sklearn.decomposition.IncrementalPCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.kernelpca method)": [[536, "sklearn.decomposition.KernelPCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.latentdirichletallocation method)": [[537, "sklearn.decomposition.LatentDirichletAllocation.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.minibatchdictionarylearning method)": [[538, "sklearn.decomposition.MiniBatchDictionaryLearning.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.minibatchnmf method)": [[539, "sklearn.decomposition.MiniBatchNMF.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.minibatchsparsepca method)": [[540, "sklearn.decomposition.MiniBatchSparsePCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.nmf method)": [[541, "sklearn.decomposition.NMF.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.pca method)": [[542, "sklearn.decomposition.PCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.sparsecoder method)": [[543, "sklearn.decomposition.SparseCoder.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.sparsepca method)": [[544, "sklearn.decomposition.SparsePCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.truncatedsvd method)": [[545, "sklearn.decomposition.TruncatedSVD.get_feature_names_out", false]], "get_feature_names_out() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[550, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_feature_names_out", false]], "get_feature_names_out() (sklearn.ensemble.randomtreesembedding method)": [[567, "sklearn.ensemble.RandomTreesEmbedding.get_feature_names_out", false]], "get_feature_names_out() (sklearn.ensemble.stackingclassifier method)": [[568, "sklearn.ensemble.StackingClassifier.get_feature_names_out", false]], "get_feature_names_out() (sklearn.ensemble.stackingregressor method)": [[569, "sklearn.ensemble.StackingRegressor.get_feature_names_out", false]], "get_feature_names_out() (sklearn.ensemble.votingclassifier method)": [[570, "sklearn.ensemble.VotingClassifier.get_feature_names_out", false]], "get_feature_names_out() (sklearn.ensemble.votingregressor method)": [[571, "sklearn.ensemble.VotingRegressor.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_extraction.dictvectorizer method)": [[583, "sklearn.feature_extraction.DictVectorizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_extraction.text.countvectorizer method)": [[590, "sklearn.feature_extraction.text.CountVectorizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_extraction.text.tfidftransformer method)": [[592, "sklearn.feature_extraction.text.TfidfTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[593, "sklearn.feature_extraction.text.TfidfVectorizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.genericunivariateselect method)": [[594, "sklearn.feature_selection.GenericUnivariateSelect.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.rfe method)": [[595, "sklearn.feature_selection.RFE.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.rfecv method)": [[596, "sklearn.feature_selection.RFECV.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectfdr method)": [[597, "sklearn.feature_selection.SelectFdr.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectfpr method)": [[598, "sklearn.feature_selection.SelectFpr.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectfrommodel method)": [[599, "sklearn.feature_selection.SelectFromModel.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectfwe method)": [[600, "sklearn.feature_selection.SelectFwe.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectkbest method)": [[601, "sklearn.feature_selection.SelectKBest.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectormixin method)": [[603, "sklearn.feature_selection.SelectorMixin.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectpercentile method)": [[602, "sklearn.feature_selection.SelectPercentile.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.sequentialfeatureselector method)": [[604, "sklearn.feature_selection.SequentialFeatureSelector.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.variancethreshold method)": [[605, "sklearn.feature_selection.VarianceThreshold.get_feature_names_out", false]], "get_feature_names_out() (sklearn.impute.iterativeimputer method)": [[630, "sklearn.impute.IterativeImputer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.impute.knnimputer method)": [[631, "sklearn.impute.KNNImputer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.impute.missingindicator method)": [[632, "sklearn.impute.MissingIndicator.get_feature_names_out", false]], "get_feature_names_out() (sklearn.impute.simpleimputer method)": [[633, "sklearn.impute.SimpleImputer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.isotonic.isotonicregression method)": [[638, "sklearn.isotonic.IsotonicRegression.get_feature_names_out", false]], "get_feature_names_out() (sklearn.kernel_approximation.additivechi2sampler method)": [[641, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.kernel_approximation.nystroem method)": [[642, "sklearn.kernel_approximation.Nystroem.get_feature_names_out", false]], "get_feature_names_out() (sklearn.kernel_approximation.polynomialcountsketch method)": [[643, "sklearn.kernel_approximation.PolynomialCountSketch.get_feature_names_out", false]], "get_feature_names_out() (sklearn.kernel_approximation.rbfsampler method)": [[644, "sklearn.kernel_approximation.RBFSampler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.kernel_approximation.skewedchi2sampler method)": [[645, "sklearn.kernel_approximation.SkewedChi2Sampler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.manifold.isomap method)": [[691, "sklearn.manifold.Isomap.get_feature_names_out", false]], "get_feature_names_out() (sklearn.manifold.locallylinearembedding method)": [[692, "sklearn.manifold.LocallyLinearEmbedding.get_feature_names_out", false]], "get_feature_names_out() (sklearn.manifold.tsne method)": [[695, "sklearn.manifold.TSNE.get_feature_names_out", false]], "get_feature_names_out() (sklearn.neighbors.kneighborstransformer method)": [[851, "sklearn.neighbors.KNeighborsTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[856, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_feature_names_out", false]], "get_feature_names_out() (sklearn.neighbors.radiusneighborstransformer method)": [[859, "sklearn.neighbors.RadiusNeighborsTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.neural_network.bernoullirbm method)": [[863, "sklearn.neural_network.BernoulliRBM.get_feature_names_out", false]], "get_feature_names_out() (sklearn.pipeline.featureunion method)": [[866, "sklearn.pipeline.FeatureUnion.get_feature_names_out", false]], "get_feature_names_out() (sklearn.pipeline.pipeline method)": [[867, "sklearn.pipeline.Pipeline.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.binarizer method)": [[870, "sklearn.preprocessing.Binarizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.functiontransformer method)": [[871, "sklearn.preprocessing.FunctionTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.kbinsdiscretizer method)": [[872, "sklearn.preprocessing.KBinsDiscretizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.kernelcenterer method)": [[873, "sklearn.preprocessing.KernelCenterer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.maxabsscaler method)": [[876, "sklearn.preprocessing.MaxAbsScaler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.minmaxscaler method)": [[877, "sklearn.preprocessing.MinMaxScaler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.normalizer method)": [[879, "sklearn.preprocessing.Normalizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.onehotencoder method)": [[880, "sklearn.preprocessing.OneHotEncoder.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.ordinalencoder method)": [[881, "sklearn.preprocessing.OrdinalEncoder.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.polynomialfeatures method)": [[882, "sklearn.preprocessing.PolynomialFeatures.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.powertransformer method)": [[883, "sklearn.preprocessing.PowerTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.quantiletransformer method)": [[884, "sklearn.preprocessing.QuantileTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.robustscaler method)": [[885, "sklearn.preprocessing.RobustScaler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.splinetransformer method)": [[886, "sklearn.preprocessing.SplineTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.standardscaler method)": [[887, "sklearn.preprocessing.StandardScaler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.targetencoder method)": [[888, "sklearn.preprocessing.TargetEncoder.get_feature_names_out", false]], "get_feature_names_out() (sklearn.random_projection.gaussianrandomprojection method)": [[899, "sklearn.random_projection.GaussianRandomProjection.get_feature_names_out", false]], "get_feature_names_out() (sklearn.random_projection.sparserandomprojection method)": [[900, "sklearn.random_projection.SparseRandomProjection.get_feature_names_out", false]], "get_indices() (sklearn.base.biclustermixin method)": [[422, "sklearn.base.BiclusterMixin.get_indices", false]], "get_indices() (sklearn.cluster.spectralbiclustering method)": [[451, "sklearn.cluster.SpectralBiclustering.get_indices", false]], "get_indices() (sklearn.cluster.spectralcoclustering method)": [[453, "sklearn.cluster.SpectralCoclustering.get_indices", false]], "get_metadata_routing() (sklearn.base.baseestimator method)": [[421, "sklearn.base.BaseEstimator.get_metadata_routing", false]], "get_metadata_routing() (sklearn.calibration.calibratedclassifiercv method)": [[437, "sklearn.calibration.CalibratedClassifierCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.affinitypropagation method)": [[440, "sklearn.cluster.AffinityPropagation.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.agglomerativeclustering method)": [[441, "sklearn.cluster.AgglomerativeClustering.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.birch method)": [[442, "sklearn.cluster.Birch.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.bisectingkmeans method)": [[443, "sklearn.cluster.BisectingKMeans.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.dbscan method)": [[444, "sklearn.cluster.DBSCAN.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.featureagglomeration method)": [[445, "sklearn.cluster.FeatureAgglomeration.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.hdbscan method)": [[446, "sklearn.cluster.HDBSCAN.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.kmeans method)": [[447, "sklearn.cluster.KMeans.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.meanshift method)": [[448, "sklearn.cluster.MeanShift.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.minibatchkmeans method)": [[449, "sklearn.cluster.MiniBatchKMeans.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.optics method)": [[450, "sklearn.cluster.OPTICS.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.spectralbiclustering method)": [[451, "sklearn.cluster.SpectralBiclustering.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.spectralclustering method)": [[452, "sklearn.cluster.SpectralClustering.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.spectralcoclustering method)": [[453, "sklearn.cluster.SpectralCoclustering.get_metadata_routing", false]], "get_metadata_routing() (sklearn.compose.columntransformer method)": [[464, "sklearn.compose.ColumnTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.compose.transformedtargetregressor method)": [[465, "sklearn.compose.TransformedTargetRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.ellipticenvelope method)": [[469, "sklearn.covariance.EllipticEnvelope.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.empiricalcovariance method)": [[470, "sklearn.covariance.EmpiricalCovariance.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.graphicallasso method)": [[471, "sklearn.covariance.GraphicalLasso.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.graphicallassocv method)": [[472, "sklearn.covariance.GraphicalLassoCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.ledoitwolf method)": [[473, "sklearn.covariance.LedoitWolf.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.mincovdet method)": [[474, "sklearn.covariance.MinCovDet.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.oas method)": [[475, "sklearn.covariance.OAS.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.shrunkcovariance method)": [[476, "sklearn.covariance.ShrunkCovariance.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cross_decomposition.cca method)": [[482, "sklearn.cross_decomposition.CCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cross_decomposition.plscanonical method)": [[483, "sklearn.cross_decomposition.PLSCanonical.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cross_decomposition.plsregression method)": [[484, "sklearn.cross_decomposition.PLSRegression.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cross_decomposition.plssvd method)": [[485, "sklearn.cross_decomposition.PLSSVD.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.dictionarylearning method)": [[532, "sklearn.decomposition.DictionaryLearning.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.factoranalysis method)": [[533, "sklearn.decomposition.FactorAnalysis.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.fastica method)": [[534, "sklearn.decomposition.FastICA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.incrementalpca method)": [[535, "sklearn.decomposition.IncrementalPCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.kernelpca method)": [[536, "sklearn.decomposition.KernelPCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.latentdirichletallocation method)": [[537, "sklearn.decomposition.LatentDirichletAllocation.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.minibatchdictionarylearning method)": [[538, "sklearn.decomposition.MiniBatchDictionaryLearning.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.minibatchnmf method)": [[539, "sklearn.decomposition.MiniBatchNMF.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.minibatchsparsepca method)": [[540, "sklearn.decomposition.MiniBatchSparsePCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.nmf method)": [[541, "sklearn.decomposition.NMF.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.pca method)": [[542, "sklearn.decomposition.PCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.sparsecoder method)": [[543, "sklearn.decomposition.SparseCoder.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.sparsepca method)": [[544, "sklearn.decomposition.SparsePCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.truncatedsvd method)": [[545, "sklearn.decomposition.TruncatedSVD.get_metadata_routing", false]], "get_metadata_routing() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[550, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_metadata_routing", false]], "get_metadata_routing() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[551, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.get_metadata_routing", false]], "get_metadata_routing() (sklearn.dummy.dummyclassifier method)": [[552, "sklearn.dummy.DummyClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.dummy.dummyregressor method)": [[553, "sklearn.dummy.DummyRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.adaboostclassifier method)": [[554, "sklearn.ensemble.AdaBoostClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.adaboostregressor method)": [[555, "sklearn.ensemble.AdaBoostRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.baggingclassifier method)": [[556, "sklearn.ensemble.BaggingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.baggingregressor method)": [[557, "sklearn.ensemble.BaggingRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.extratreesclassifier method)": [[558, "sklearn.ensemble.ExtraTreesClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.extratreesregressor method)": [[559, "sklearn.ensemble.ExtraTreesRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.gradientboostingclassifier method)": [[560, "sklearn.ensemble.GradientBoostingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.gradientboostingregressor method)": [[561, "sklearn.ensemble.GradientBoostingRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.histgradientboostingclassifier method)": [[562, "sklearn.ensemble.HistGradientBoostingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.histgradientboostingregressor method)": [[563, "sklearn.ensemble.HistGradientBoostingRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.isolationforest method)": [[564, "sklearn.ensemble.IsolationForest.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.randomforestclassifier method)": [[565, "sklearn.ensemble.RandomForestClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.randomforestregressor method)": [[566, "sklearn.ensemble.RandomForestRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.randomtreesembedding method)": [[567, "sklearn.ensemble.RandomTreesEmbedding.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.stackingclassifier method)": [[568, "sklearn.ensemble.StackingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.stackingregressor method)": [[569, "sklearn.ensemble.StackingRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.votingclassifier method)": [[570, "sklearn.ensemble.VotingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.votingregressor method)": [[571, "sklearn.ensemble.VotingRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.dictvectorizer method)": [[583, "sklearn.feature_extraction.DictVectorizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.featurehasher method)": [[584, "sklearn.feature_extraction.FeatureHasher.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.image.patchextractor method)": [[585, "sklearn.feature_extraction.image.PatchExtractor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.text.countvectorizer method)": [[590, "sklearn.feature_extraction.text.CountVectorizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.text.hashingvectorizer method)": [[591, "sklearn.feature_extraction.text.HashingVectorizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.text.tfidftransformer method)": [[592, "sklearn.feature_extraction.text.TfidfTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[593, "sklearn.feature_extraction.text.TfidfVectorizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.genericunivariateselect method)": [[594, "sklearn.feature_selection.GenericUnivariateSelect.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.rfe method)": [[595, "sklearn.feature_selection.RFE.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.rfecv method)": [[596, "sklearn.feature_selection.RFECV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectfdr method)": [[597, "sklearn.feature_selection.SelectFdr.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectfpr method)": [[598, "sklearn.feature_selection.SelectFpr.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectfrommodel method)": [[599, "sklearn.feature_selection.SelectFromModel.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectfwe method)": [[600, "sklearn.feature_selection.SelectFwe.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectkbest method)": [[601, "sklearn.feature_selection.SelectKBest.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectpercentile method)": [[602, "sklearn.feature_selection.SelectPercentile.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.sequentialfeatureselector method)": [[604, "sklearn.feature_selection.SequentialFeatureSelector.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.variancethreshold method)": [[605, "sklearn.feature_selection.VarianceThreshold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.frozen.frozenestimator method)": [[612, "sklearn.frozen.FrozenEstimator.get_metadata_routing", false]], "get_metadata_routing() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[613, "sklearn.gaussian_process.GaussianProcessClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.gaussian_process.gaussianprocessregressor method)": [[614, "sklearn.gaussian_process.GaussianProcessRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.impute.iterativeimputer method)": [[630, "sklearn.impute.IterativeImputer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.impute.knnimputer method)": [[631, "sklearn.impute.KNNImputer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.impute.missingindicator method)": [[632, "sklearn.impute.MissingIndicator.get_metadata_routing", false]], "get_metadata_routing() (sklearn.impute.simpleimputer method)": [[633, "sklearn.impute.SimpleImputer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.isotonic.isotonicregression method)": [[638, "sklearn.isotonic.IsotonicRegression.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_approximation.additivechi2sampler method)": [[641, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_approximation.nystroem method)": [[642, "sklearn.kernel_approximation.Nystroem.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_approximation.polynomialcountsketch method)": [[643, "sklearn.kernel_approximation.PolynomialCountSketch.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_approximation.rbfsampler method)": [[644, "sklearn.kernel_approximation.RBFSampler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_approximation.skewedchi2sampler method)": [[645, "sklearn.kernel_approximation.SkewedChi2Sampler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_ridge.kernelridge method)": [[646, "sklearn.kernel_ridge.KernelRidge.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ardregression method)": [[647, "sklearn.linear_model.ARDRegression.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.bayesianridge method)": [[648, "sklearn.linear_model.BayesianRidge.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.elasticnet method)": [[649, "sklearn.linear_model.ElasticNet.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.elasticnetcv method)": [[650, "sklearn.linear_model.ElasticNetCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.gammaregressor method)": [[651, "sklearn.linear_model.GammaRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.huberregressor method)": [[652, "sklearn.linear_model.HuberRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lars method)": [[653, "sklearn.linear_model.Lars.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.larscv method)": [[654, "sklearn.linear_model.LarsCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lasso method)": [[655, "sklearn.linear_model.Lasso.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lassocv method)": [[656, "sklearn.linear_model.LassoCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lassolars method)": [[657, "sklearn.linear_model.LassoLars.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lassolarscv method)": [[658, "sklearn.linear_model.LassoLarsCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lassolarsic method)": [[659, "sklearn.linear_model.LassoLarsIC.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.linearregression method)": [[660, "sklearn.linear_model.LinearRegression.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.logisticregression method)": [[661, "sklearn.linear_model.LogisticRegression.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.logisticregressioncv method)": [[662, "sklearn.linear_model.LogisticRegressionCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.multitaskelasticnet method)": [[663, "sklearn.linear_model.MultiTaskElasticNet.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.multitaskelasticnetcv method)": [[664, "sklearn.linear_model.MultiTaskElasticNetCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.multitasklasso method)": [[665, "sklearn.linear_model.MultiTaskLasso.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.multitasklassocv method)": [[666, "sklearn.linear_model.MultiTaskLassoCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[667, "sklearn.linear_model.OrthogonalMatchingPursuit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[668, "sklearn.linear_model.OrthogonalMatchingPursuitCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.passiveaggressiveclassifier method)": [[669, "sklearn.linear_model.PassiveAggressiveClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.passiveaggressiveregressor method)": [[670, "sklearn.linear_model.PassiveAggressiveRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.perceptron method)": [[671, "sklearn.linear_model.Perceptron.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.poissonregressor method)": [[672, "sklearn.linear_model.PoissonRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.quantileregressor method)": [[673, "sklearn.linear_model.QuantileRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ransacregressor method)": [[674, "sklearn.linear_model.RANSACRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ridge method)": [[675, "sklearn.linear_model.Ridge.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ridgeclassifier method)": [[677, "sklearn.linear_model.RidgeClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ridgeclassifiercv method)": [[678, "sklearn.linear_model.RidgeClassifierCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ridgecv method)": [[676, "sklearn.linear_model.RidgeCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.sgdclassifier method)": [[679, "sklearn.linear_model.SGDClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.sgdoneclasssvm method)": [[680, "sklearn.linear_model.SGDOneClassSVM.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.sgdregressor method)": [[681, "sklearn.linear_model.SGDRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.theilsenregressor method)": [[682, "sklearn.linear_model.TheilSenRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.tweedieregressor method)": [[683, "sklearn.linear_model.TweedieRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.manifold.isomap method)": [[691, "sklearn.manifold.Isomap.get_metadata_routing", false]], "get_metadata_routing() (sklearn.manifold.locallylinearembedding method)": [[692, "sklearn.manifold.LocallyLinearEmbedding.get_metadata_routing", false]], "get_metadata_routing() (sklearn.manifold.mds method)": [[693, "sklearn.manifold.MDS.get_metadata_routing", false]], "get_metadata_routing() (sklearn.manifold.spectralembedding method)": [[694, "sklearn.manifold.SpectralEmbedding.get_metadata_routing", false]], "get_metadata_routing() (sklearn.manifold.tsne method)": [[695, "sklearn.manifold.TSNE.get_metadata_routing", false]], "get_metadata_routing() (sklearn.mixture.bayesiangaussianmixture method)": [[800, "sklearn.mixture.BayesianGaussianMixture.get_metadata_routing", false]], "get_metadata_routing() (sklearn.mixture.gaussianmixture method)": [[801, "sklearn.mixture.GaussianMixture.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.fixedthresholdclassifier method)": [[802, "sklearn.model_selection.FixedThresholdClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.gridsearchcv method)": [[803, "sklearn.model_selection.GridSearchCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.groupkfold method)": [[804, "sklearn.model_selection.GroupKFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.groupshufflesplit method)": [[805, "sklearn.model_selection.GroupShuffleSplit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.halvinggridsearchcv method)": [[806, "sklearn.model_selection.HalvingGridSearchCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.halvingrandomsearchcv method)": [[807, "sklearn.model_selection.HalvingRandomSearchCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.kfold method)": [[808, "sklearn.model_selection.KFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.leaveonegroupout method)": [[810, "sklearn.model_selection.LeaveOneGroupOut.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.leaveoneout method)": [[811, "sklearn.model_selection.LeaveOneOut.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.leavepgroupsout method)": [[812, "sklearn.model_selection.LeavePGroupsOut.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.leavepout method)": [[813, "sklearn.model_selection.LeavePOut.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.predefinedsplit method)": [[816, "sklearn.model_selection.PredefinedSplit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.randomizedsearchcv method)": [[817, "sklearn.model_selection.RandomizedSearchCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.repeatedkfold method)": [[818, "sklearn.model_selection.RepeatedKFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.repeatedstratifiedkfold method)": [[819, "sklearn.model_selection.RepeatedStratifiedKFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.shufflesplit method)": [[820, "sklearn.model_selection.ShuffleSplit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.stratifiedgroupkfold method)": [[821, "sklearn.model_selection.StratifiedGroupKFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.stratifiedkfold method)": [[822, "sklearn.model_selection.StratifiedKFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.stratifiedshufflesplit method)": [[823, "sklearn.model_selection.StratifiedShuffleSplit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.timeseriessplit method)": [[824, "sklearn.model_selection.TimeSeriesSplit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[825, "sklearn.model_selection.TunedThresholdClassifierCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multiclass.onevsoneclassifier method)": [[835, "sklearn.multiclass.OneVsOneClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multiclass.onevsrestclassifier method)": [[836, "sklearn.multiclass.OneVsRestClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multiclass.outputcodeclassifier method)": [[837, "sklearn.multiclass.OutputCodeClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multioutput.classifierchain method)": [[838, "sklearn.multioutput.ClassifierChain.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multioutput.multioutputclassifier method)": [[839, "sklearn.multioutput.MultiOutputClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multioutput.multioutputregressor method)": [[840, "sklearn.multioutput.MultiOutputRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multioutput.regressorchain method)": [[841, "sklearn.multioutput.RegressorChain.get_metadata_routing", false]], "get_metadata_routing() (sklearn.naive_bayes.bernoullinb method)": [[842, "sklearn.naive_bayes.BernoulliNB.get_metadata_routing", false]], "get_metadata_routing() (sklearn.naive_bayes.categoricalnb method)": [[843, "sklearn.naive_bayes.CategoricalNB.get_metadata_routing", false]], "get_metadata_routing() (sklearn.naive_bayes.complementnb method)": [[844, "sklearn.naive_bayes.ComplementNB.get_metadata_routing", false]], "get_metadata_routing() (sklearn.naive_bayes.gaussiannb method)": [[845, "sklearn.naive_bayes.GaussianNB.get_metadata_routing", false]], "get_metadata_routing() (sklearn.naive_bayes.multinomialnb method)": [[846, "sklearn.naive_bayes.MultinomialNB.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.kerneldensity method)": [[852, "sklearn.neighbors.KernelDensity.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.kneighborsclassifier method)": [[849, "sklearn.neighbors.KNeighborsClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.kneighborsregressor method)": [[850, "sklearn.neighbors.KNeighborsRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.kneighborstransformer method)": [[851, "sklearn.neighbors.KNeighborsTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.localoutlierfactor method)": [[853, "sklearn.neighbors.LocalOutlierFactor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.nearestcentroid method)": [[854, "sklearn.neighbors.NearestCentroid.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.nearestneighbors method)": [[855, "sklearn.neighbors.NearestNeighbors.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[856, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.radiusneighborsclassifier method)": [[857, "sklearn.neighbors.RadiusNeighborsClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.radiusneighborsregressor method)": [[858, "sklearn.neighbors.RadiusNeighborsRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.radiusneighborstransformer method)": [[859, "sklearn.neighbors.RadiusNeighborsTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neural_network.bernoullirbm method)": [[863, "sklearn.neural_network.BernoulliRBM.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neural_network.mlpclassifier method)": [[864, "sklearn.neural_network.MLPClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neural_network.mlpregressor method)": [[865, "sklearn.neural_network.MLPRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.pipeline.featureunion method)": [[866, "sklearn.pipeline.FeatureUnion.get_metadata_routing", false]], "get_metadata_routing() (sklearn.pipeline.pipeline method)": [[867, "sklearn.pipeline.Pipeline.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.binarizer method)": [[870, "sklearn.preprocessing.Binarizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.functiontransformer method)": [[871, "sklearn.preprocessing.FunctionTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.kbinsdiscretizer method)": [[872, "sklearn.preprocessing.KBinsDiscretizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.kernelcenterer method)": [[873, "sklearn.preprocessing.KernelCenterer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.labelbinarizer method)": [[874, "sklearn.preprocessing.LabelBinarizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.labelencoder method)": [[875, "sklearn.preprocessing.LabelEncoder.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.maxabsscaler method)": [[876, "sklearn.preprocessing.MaxAbsScaler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.minmaxscaler method)": [[877, "sklearn.preprocessing.MinMaxScaler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.multilabelbinarizer method)": [[878, "sklearn.preprocessing.MultiLabelBinarizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.normalizer method)": [[879, "sklearn.preprocessing.Normalizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.onehotencoder method)": [[880, "sklearn.preprocessing.OneHotEncoder.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.ordinalencoder method)": [[881, "sklearn.preprocessing.OrdinalEncoder.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.polynomialfeatures method)": [[882, "sklearn.preprocessing.PolynomialFeatures.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.powertransformer method)": [[883, "sklearn.preprocessing.PowerTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.quantiletransformer method)": [[884, "sklearn.preprocessing.QuantileTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.robustscaler method)": [[885, "sklearn.preprocessing.RobustScaler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.splinetransformer method)": [[886, "sklearn.preprocessing.SplineTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.standardscaler method)": [[887, "sklearn.preprocessing.StandardScaler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.targetencoder method)": [[888, "sklearn.preprocessing.TargetEncoder.get_metadata_routing", false]], "get_metadata_routing() (sklearn.random_projection.gaussianrandomprojection method)": [[899, "sklearn.random_projection.GaussianRandomProjection.get_metadata_routing", false]], "get_metadata_routing() (sklearn.random_projection.sparserandomprojection method)": [[900, "sklearn.random_projection.SparseRandomProjection.get_metadata_routing", false]], "get_metadata_routing() (sklearn.semi_supervised.labelpropagation method)": [[902, "sklearn.semi_supervised.LabelPropagation.get_metadata_routing", false]], "get_metadata_routing() (sklearn.semi_supervised.labelspreading method)": [[903, "sklearn.semi_supervised.LabelSpreading.get_metadata_routing", false]], "get_metadata_routing() (sklearn.semi_supervised.selftrainingclassifier method)": [[904, "sklearn.semi_supervised.SelfTrainingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.linearsvc method)": [[907, "sklearn.svm.LinearSVC.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.linearsvr method)": [[908, "sklearn.svm.LinearSVR.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.nusvc method)": [[909, "sklearn.svm.NuSVC.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.nusvr method)": [[910, "sklearn.svm.NuSVR.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.oneclasssvm method)": [[911, "sklearn.svm.OneClassSVM.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.svc method)": [[912, "sklearn.svm.SVC.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.svr method)": [[913, "sklearn.svm.SVR.get_metadata_routing", false]], "get_metadata_routing() (sklearn.tree.decisiontreeclassifier method)": [[915, "sklearn.tree.DecisionTreeClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.tree.decisiontreeregressor method)": [[916, "sklearn.tree.DecisionTreeRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.tree.extratreeclassifier method)": [[917, "sklearn.tree.ExtraTreeClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.tree.extratreeregressor method)": [[918, "sklearn.tree.ExtraTreeRegressor.get_metadata_routing", false]], "get_metric() (sklearn.metrics.distancemetric class method)": [[702, "sklearn.metrics.DistanceMetric.get_metric", false]], "get_n_calls() (sklearn.neighbors.balltree method)": [[847, "sklearn.neighbors.BallTree.get_n_calls", false]], "get_n_calls() (sklearn.neighbors.kdtree method)": [[848, "sklearn.neighbors.KDTree.get_n_calls", false]], "get_n_leaves() (sklearn.tree.decisiontreeclassifier method)": [[915, "sklearn.tree.DecisionTreeClassifier.get_n_leaves", false]], "get_n_leaves() (sklearn.tree.decisiontreeregressor method)": [[916, "sklearn.tree.DecisionTreeRegressor.get_n_leaves", false]], "get_n_leaves() (sklearn.tree.extratreeclassifier method)": [[917, "sklearn.tree.ExtraTreeClassifier.get_n_leaves", false]], "get_n_leaves() (sklearn.tree.extratreeregressor method)": [[918, "sklearn.tree.ExtraTreeRegressor.get_n_leaves", false]], "get_n_splits": [[389, "term-get_n_splits", true]], "get_n_splits() (sklearn.model_selection.groupkfold method)": [[804, "sklearn.model_selection.GroupKFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.groupshufflesplit method)": [[805, "sklearn.model_selection.GroupShuffleSplit.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.kfold method)": [[808, "sklearn.model_selection.KFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.leaveonegroupout method)": [[810, "sklearn.model_selection.LeaveOneGroupOut.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.leaveoneout method)": [[811, "sklearn.model_selection.LeaveOneOut.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.leavepgroupsout method)": [[812, "sklearn.model_selection.LeavePGroupsOut.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.leavepout method)": [[813, "sklearn.model_selection.LeavePOut.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.predefinedsplit method)": [[816, "sklearn.model_selection.PredefinedSplit.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.repeatedkfold method)": [[818, "sklearn.model_selection.RepeatedKFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.repeatedstratifiedkfold method)": [[819, "sklearn.model_selection.RepeatedStratifiedKFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.shufflesplit method)": [[820, "sklearn.model_selection.ShuffleSplit.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.stratifiedgroupkfold method)": [[821, "sklearn.model_selection.StratifiedGroupKFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.stratifiedkfold method)": [[822, "sklearn.model_selection.StratifiedKFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.stratifiedshufflesplit method)": [[823, "sklearn.model_selection.StratifiedShuffleSplit.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.timeseriessplit method)": [[824, "sklearn.model_selection.TimeSeriesSplit.get_n_splits", false]], "get_params": [[389, "term-get_params", true]], "get_params() (sklearn.base.baseestimator method)": [[421, "sklearn.base.BaseEstimator.get_params", false]], "get_params() (sklearn.calibration.calibratedclassifiercv method)": [[437, "sklearn.calibration.CalibratedClassifierCV.get_params", false]], "get_params() (sklearn.cluster.affinitypropagation method)": [[440, "sklearn.cluster.AffinityPropagation.get_params", false]], "get_params() (sklearn.cluster.agglomerativeclustering method)": [[441, "sklearn.cluster.AgglomerativeClustering.get_params", false]], "get_params() (sklearn.cluster.birch method)": [[442, "sklearn.cluster.Birch.get_params", false]], "get_params() (sklearn.cluster.bisectingkmeans method)": [[443, "sklearn.cluster.BisectingKMeans.get_params", false]], "get_params() (sklearn.cluster.dbscan method)": [[444, "sklearn.cluster.DBSCAN.get_params", false]], "get_params() (sklearn.cluster.featureagglomeration method)": [[445, "sklearn.cluster.FeatureAgglomeration.get_params", false]], "get_params() (sklearn.cluster.hdbscan method)": [[446, "sklearn.cluster.HDBSCAN.get_params", false]], "get_params() (sklearn.cluster.kmeans method)": [[447, "sklearn.cluster.KMeans.get_params", false]], "get_params() (sklearn.cluster.meanshift method)": [[448, "sklearn.cluster.MeanShift.get_params", false]], "get_params() (sklearn.cluster.minibatchkmeans method)": [[449, "sklearn.cluster.MiniBatchKMeans.get_params", false]], "get_params() (sklearn.cluster.optics method)": [[450, "sklearn.cluster.OPTICS.get_params", false]], "get_params() (sklearn.cluster.spectralbiclustering method)": [[451, "sklearn.cluster.SpectralBiclustering.get_params", false]], "get_params() (sklearn.cluster.spectralclustering method)": [[452, "sklearn.cluster.SpectralClustering.get_params", false]], "get_params() (sklearn.cluster.spectralcoclustering method)": [[453, "sklearn.cluster.SpectralCoclustering.get_params", false]], "get_params() (sklearn.compose.columntransformer method)": [[464, "sklearn.compose.ColumnTransformer.get_params", false]], "get_params() (sklearn.compose.transformedtargetregressor method)": [[465, "sklearn.compose.TransformedTargetRegressor.get_params", false]], "get_params() (sklearn.covariance.ellipticenvelope method)": [[469, "sklearn.covariance.EllipticEnvelope.get_params", false]], "get_params() (sklearn.covariance.empiricalcovariance method)": [[470, "sklearn.covariance.EmpiricalCovariance.get_params", false]], "get_params() (sklearn.covariance.graphicallasso method)": [[471, "sklearn.covariance.GraphicalLasso.get_params", false]], "get_params() (sklearn.covariance.graphicallassocv method)": [[472, "sklearn.covariance.GraphicalLassoCV.get_params", false]], "get_params() (sklearn.covariance.ledoitwolf method)": [[473, "sklearn.covariance.LedoitWolf.get_params", false]], "get_params() (sklearn.covariance.mincovdet method)": [[474, "sklearn.covariance.MinCovDet.get_params", false]], "get_params() (sklearn.covariance.oas method)": [[475, "sklearn.covariance.OAS.get_params", false]], "get_params() (sklearn.covariance.shrunkcovariance method)": [[476, "sklearn.covariance.ShrunkCovariance.get_params", false]], "get_params() (sklearn.cross_decomposition.cca method)": [[482, "sklearn.cross_decomposition.CCA.get_params", false]], "get_params() (sklearn.cross_decomposition.plscanonical method)": [[483, "sklearn.cross_decomposition.PLSCanonical.get_params", false]], "get_params() (sklearn.cross_decomposition.plsregression method)": [[484, "sklearn.cross_decomposition.PLSRegression.get_params", false]], "get_params() (sklearn.cross_decomposition.plssvd method)": [[485, "sklearn.cross_decomposition.PLSSVD.get_params", false]], "get_params() (sklearn.decomposition.dictionarylearning method)": [[532, "sklearn.decomposition.DictionaryLearning.get_params", false]], "get_params() (sklearn.decomposition.factoranalysis method)": [[533, "sklearn.decomposition.FactorAnalysis.get_params", false]], "get_params() (sklearn.decomposition.fastica method)": [[534, "sklearn.decomposition.FastICA.get_params", false]], "get_params() (sklearn.decomposition.incrementalpca method)": [[535, "sklearn.decomposition.IncrementalPCA.get_params", false]], "get_params() (sklearn.decomposition.kernelpca method)": [[536, "sklearn.decomposition.KernelPCA.get_params", false]], "get_params() (sklearn.decomposition.latentdirichletallocation method)": [[537, "sklearn.decomposition.LatentDirichletAllocation.get_params", false]], "get_params() (sklearn.decomposition.minibatchdictionarylearning method)": [[538, "sklearn.decomposition.MiniBatchDictionaryLearning.get_params", false]], "get_params() (sklearn.decomposition.minibatchnmf method)": [[539, "sklearn.decomposition.MiniBatchNMF.get_params", false]], "get_params() (sklearn.decomposition.minibatchsparsepca method)": [[540, "sklearn.decomposition.MiniBatchSparsePCA.get_params", false]], "get_params() (sklearn.decomposition.nmf method)": [[541, "sklearn.decomposition.NMF.get_params", false]], "get_params() (sklearn.decomposition.pca method)": [[542, "sklearn.decomposition.PCA.get_params", false]], "get_params() (sklearn.decomposition.sparsecoder method)": [[543, "sklearn.decomposition.SparseCoder.get_params", false]], "get_params() (sklearn.decomposition.sparsepca method)": [[544, "sklearn.decomposition.SparsePCA.get_params", false]], "get_params() (sklearn.decomposition.truncatedsvd method)": [[545, "sklearn.decomposition.TruncatedSVD.get_params", false]], "get_params() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[550, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_params", false]], "get_params() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[551, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.get_params", false]], "get_params() (sklearn.dummy.dummyclassifier method)": [[552, "sklearn.dummy.DummyClassifier.get_params", false]], "get_params() (sklearn.dummy.dummyregressor method)": [[553, "sklearn.dummy.DummyRegressor.get_params", false]], "get_params() (sklearn.ensemble.adaboostclassifier method)": [[554, "sklearn.ensemble.AdaBoostClassifier.get_params", false]], "get_params() (sklearn.ensemble.adaboostregressor method)": [[555, "sklearn.ensemble.AdaBoostRegressor.get_params", false]], "get_params() (sklearn.ensemble.baggingclassifier method)": [[556, "sklearn.ensemble.BaggingClassifier.get_params", false]], "get_params() (sklearn.ensemble.baggingregressor method)": [[557, "sklearn.ensemble.BaggingRegressor.get_params", false]], "get_params() (sklearn.ensemble.extratreesclassifier method)": [[558, "sklearn.ensemble.ExtraTreesClassifier.get_params", false]], "get_params() (sklearn.ensemble.extratreesregressor method)": [[559, "sklearn.ensemble.ExtraTreesRegressor.get_params", false]], "get_params() (sklearn.ensemble.gradientboostingclassifier method)": [[560, "sklearn.ensemble.GradientBoostingClassifier.get_params", false]], "get_params() (sklearn.ensemble.gradientboostingregressor method)": [[561, "sklearn.ensemble.GradientBoostingRegressor.get_params", false]], "get_params() (sklearn.ensemble.histgradientboostingclassifier method)": [[562, "sklearn.ensemble.HistGradientBoostingClassifier.get_params", false]], "get_params() (sklearn.ensemble.histgradientboostingregressor method)": [[563, "sklearn.ensemble.HistGradientBoostingRegressor.get_params", false]], "get_params() (sklearn.ensemble.isolationforest method)": [[564, "sklearn.ensemble.IsolationForest.get_params", false]], "get_params() (sklearn.ensemble.randomforestclassifier method)": [[565, "sklearn.ensemble.RandomForestClassifier.get_params", false]], "get_params() (sklearn.ensemble.randomforestregressor method)": [[566, "sklearn.ensemble.RandomForestRegressor.get_params", false]], "get_params() (sklearn.ensemble.randomtreesembedding method)": [[567, "sklearn.ensemble.RandomTreesEmbedding.get_params", false]], "get_params() (sklearn.ensemble.stackingclassifier method)": [[568, "sklearn.ensemble.StackingClassifier.get_params", false]], "get_params() (sklearn.ensemble.stackingregressor method)": [[569, "sklearn.ensemble.StackingRegressor.get_params", false]], "get_params() (sklearn.ensemble.votingclassifier method)": [[570, "sklearn.ensemble.VotingClassifier.get_params", false]], "get_params() (sklearn.ensemble.votingregressor method)": [[571, "sklearn.ensemble.VotingRegressor.get_params", false]], "get_params() (sklearn.feature_extraction.dictvectorizer method)": [[583, "sklearn.feature_extraction.DictVectorizer.get_params", false]], "get_params() (sklearn.feature_extraction.featurehasher method)": [[584, "sklearn.feature_extraction.FeatureHasher.get_params", false]], "get_params() (sklearn.feature_extraction.image.patchextractor method)": [[585, "sklearn.feature_extraction.image.PatchExtractor.get_params", false]], "get_params() (sklearn.feature_extraction.text.countvectorizer method)": [[590, "sklearn.feature_extraction.text.CountVectorizer.get_params", false]], "get_params() (sklearn.feature_extraction.text.hashingvectorizer method)": [[591, "sklearn.feature_extraction.text.HashingVectorizer.get_params", false]], "get_params() (sklearn.feature_extraction.text.tfidftransformer method)": [[592, "sklearn.feature_extraction.text.TfidfTransformer.get_params", false]], "get_params() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[593, "sklearn.feature_extraction.text.TfidfVectorizer.get_params", false]], "get_params() (sklearn.feature_selection.genericunivariateselect method)": [[594, "sklearn.feature_selection.GenericUnivariateSelect.get_params", false]], "get_params() (sklearn.feature_selection.rfe method)": [[595, "sklearn.feature_selection.RFE.get_params", false]], "get_params() (sklearn.feature_selection.rfecv method)": [[596, "sklearn.feature_selection.RFECV.get_params", false]], "get_params() (sklearn.feature_selection.selectfdr method)": [[597, "sklearn.feature_selection.SelectFdr.get_params", false]], "get_params() (sklearn.feature_selection.selectfpr method)": [[598, "sklearn.feature_selection.SelectFpr.get_params", false]], "get_params() (sklearn.feature_selection.selectfrommodel method)": [[599, "sklearn.feature_selection.SelectFromModel.get_params", false]], "get_params() (sklearn.feature_selection.selectfwe method)": [[600, "sklearn.feature_selection.SelectFwe.get_params", false]], "get_params() (sklearn.feature_selection.selectkbest method)": [[601, "sklearn.feature_selection.SelectKBest.get_params", false]], "get_params() (sklearn.feature_selection.selectpercentile method)": [[602, "sklearn.feature_selection.SelectPercentile.get_params", false]], "get_params() (sklearn.feature_selection.sequentialfeatureselector method)": [[604, "sklearn.feature_selection.SequentialFeatureSelector.get_params", false]], "get_params() (sklearn.feature_selection.variancethreshold method)": [[605, "sklearn.feature_selection.VarianceThreshold.get_params", false]], "get_params() (sklearn.frozen.frozenestimator method)": [[612, "sklearn.frozen.FrozenEstimator.get_params", false]], "get_params() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[613, "sklearn.gaussian_process.GaussianProcessClassifier.get_params", false]], "get_params() (sklearn.gaussian_process.gaussianprocessregressor method)": [[614, "sklearn.gaussian_process.GaussianProcessRegressor.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.compoundkernel method)": [[615, "sklearn.gaussian_process.kernels.CompoundKernel.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.constantkernel method)": [[616, "sklearn.gaussian_process.kernels.ConstantKernel.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.dotproduct method)": [[617, "sklearn.gaussian_process.kernels.DotProduct.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.exponentiation method)": [[619, "sklearn.gaussian_process.kernels.Exponentiation.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.expsinesquared method)": [[618, "sklearn.gaussian_process.kernels.ExpSineSquared.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.kernel method)": [[621, "sklearn.gaussian_process.kernels.Kernel.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.matern method)": [[622, "sklearn.gaussian_process.kernels.Matern.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[623, "sklearn.gaussian_process.kernels.PairwiseKernel.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.product method)": [[624, "sklearn.gaussian_process.kernels.Product.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[626, "sklearn.gaussian_process.kernels.RationalQuadratic.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.rbf method)": [[625, "sklearn.gaussian_process.kernels.RBF.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.sum method)": [[627, "sklearn.gaussian_process.kernels.Sum.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.whitekernel method)": [[628, "sklearn.gaussian_process.kernels.WhiteKernel.get_params", false]], "get_params() (sklearn.impute.iterativeimputer method)": [[630, "sklearn.impute.IterativeImputer.get_params", false]], "get_params() (sklearn.impute.knnimputer method)": [[631, "sklearn.impute.KNNImputer.get_params", false]], "get_params() (sklearn.impute.missingindicator method)": [[632, "sklearn.impute.MissingIndicator.get_params", false]], "get_params() (sklearn.impute.simpleimputer method)": [[633, "sklearn.impute.SimpleImputer.get_params", false]], "get_params() (sklearn.isotonic.isotonicregression method)": [[638, "sklearn.isotonic.IsotonicRegression.get_params", false]], "get_params() (sklearn.kernel_approximation.additivechi2sampler method)": [[641, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_params", false]], "get_params() (sklearn.kernel_approximation.nystroem method)": [[642, "sklearn.kernel_approximation.Nystroem.get_params", false]], "get_params() (sklearn.kernel_approximation.polynomialcountsketch method)": [[643, "sklearn.kernel_approximation.PolynomialCountSketch.get_params", false]], "get_params() (sklearn.kernel_approximation.rbfsampler method)": [[644, "sklearn.kernel_approximation.RBFSampler.get_params", false]], "get_params() (sklearn.kernel_approximation.skewedchi2sampler method)": [[645, "sklearn.kernel_approximation.SkewedChi2Sampler.get_params", false]], "get_params() (sklearn.kernel_ridge.kernelridge method)": [[646, "sklearn.kernel_ridge.KernelRidge.get_params", false]], "get_params() (sklearn.linear_model.ardregression method)": [[647, "sklearn.linear_model.ARDRegression.get_params", false]], "get_params() (sklearn.linear_model.bayesianridge method)": [[648, "sklearn.linear_model.BayesianRidge.get_params", false]], "get_params() (sklearn.linear_model.elasticnet method)": [[649, "sklearn.linear_model.ElasticNet.get_params", false]], "get_params() (sklearn.linear_model.elasticnetcv method)": [[650, "sklearn.linear_model.ElasticNetCV.get_params", false]], "get_params() (sklearn.linear_model.gammaregressor method)": [[651, "sklearn.linear_model.GammaRegressor.get_params", false]], "get_params() (sklearn.linear_model.huberregressor method)": [[652, "sklearn.linear_model.HuberRegressor.get_params", false]], "get_params() (sklearn.linear_model.lars method)": [[653, "sklearn.linear_model.Lars.get_params", false]], "get_params() (sklearn.linear_model.larscv method)": [[654, "sklearn.linear_model.LarsCV.get_params", false]], "get_params() (sklearn.linear_model.lasso method)": [[655, "sklearn.linear_model.Lasso.get_params", false]], "get_params() (sklearn.linear_model.lassocv method)": [[656, "sklearn.linear_model.LassoCV.get_params", false]], "get_params() (sklearn.linear_model.lassolars method)": [[657, "sklearn.linear_model.LassoLars.get_params", false]], "get_params() (sklearn.linear_model.lassolarscv method)": [[658, "sklearn.linear_model.LassoLarsCV.get_params", false]], "get_params() (sklearn.linear_model.lassolarsic method)": [[659, "sklearn.linear_model.LassoLarsIC.get_params", false]], "get_params() (sklearn.linear_model.linearregression method)": [[660, "sklearn.linear_model.LinearRegression.get_params", false]], "get_params() (sklearn.linear_model.logisticregression method)": [[661, "sklearn.linear_model.LogisticRegression.get_params", false]], "get_params() (sklearn.linear_model.logisticregressioncv method)": [[662, "sklearn.linear_model.LogisticRegressionCV.get_params", false]], "get_params() (sklearn.linear_model.multitaskelasticnet method)": [[663, "sklearn.linear_model.MultiTaskElasticNet.get_params", false]], "get_params() (sklearn.linear_model.multitaskelasticnetcv method)": [[664, "sklearn.linear_model.MultiTaskElasticNetCV.get_params", false]], "get_params() (sklearn.linear_model.multitasklasso method)": [[665, "sklearn.linear_model.MultiTaskLasso.get_params", false]], "get_params() (sklearn.linear_model.multitasklassocv method)": [[666, "sklearn.linear_model.MultiTaskLassoCV.get_params", false]], "get_params() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[667, "sklearn.linear_model.OrthogonalMatchingPursuit.get_params", false]], "get_params() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[668, "sklearn.linear_model.OrthogonalMatchingPursuitCV.get_params", false]], "get_params() (sklearn.linear_model.passiveaggressiveclassifier method)": [[669, "sklearn.linear_model.PassiveAggressiveClassifier.get_params", false]], "get_params() (sklearn.linear_model.passiveaggressiveregressor method)": [[670, "sklearn.linear_model.PassiveAggressiveRegressor.get_params", false]], "get_params() (sklearn.linear_model.perceptron method)": [[671, "sklearn.linear_model.Perceptron.get_params", false]], "get_params() (sklearn.linear_model.poissonregressor method)": [[672, "sklearn.linear_model.PoissonRegressor.get_params", false]], "get_params() (sklearn.linear_model.quantileregressor method)": [[673, "sklearn.linear_model.QuantileRegressor.get_params", false]], "get_params() (sklearn.linear_model.ransacregressor method)": [[674, "sklearn.linear_model.RANSACRegressor.get_params", false]], "get_params() (sklearn.linear_model.ridge method)": [[675, "sklearn.linear_model.Ridge.get_params", false]], "get_params() (sklearn.linear_model.ridgeclassifier method)": [[677, "sklearn.linear_model.RidgeClassifier.get_params", false]], "get_params() (sklearn.linear_model.ridgeclassifiercv method)": [[678, "sklearn.linear_model.RidgeClassifierCV.get_params", false]], "get_params() (sklearn.linear_model.ridgecv method)": [[676, "sklearn.linear_model.RidgeCV.get_params", false]], "get_params() (sklearn.linear_model.sgdclassifier method)": [[679, "sklearn.linear_model.SGDClassifier.get_params", false]], "get_params() (sklearn.linear_model.sgdoneclasssvm method)": [[680, "sklearn.linear_model.SGDOneClassSVM.get_params", false]], "get_params() (sklearn.linear_model.sgdregressor method)": [[681, "sklearn.linear_model.SGDRegressor.get_params", false]], "get_params() (sklearn.linear_model.theilsenregressor method)": [[682, "sklearn.linear_model.TheilSenRegressor.get_params", false]], "get_params() (sklearn.linear_model.tweedieregressor method)": [[683, "sklearn.linear_model.TweedieRegressor.get_params", false]], "get_params() (sklearn.manifold.isomap method)": [[691, "sklearn.manifold.Isomap.get_params", false]], "get_params() (sklearn.manifold.locallylinearembedding method)": [[692, "sklearn.manifold.LocallyLinearEmbedding.get_params", false]], "get_params() (sklearn.manifold.mds method)": [[693, "sklearn.manifold.MDS.get_params", false]], "get_params() (sklearn.manifold.spectralembedding method)": [[694, "sklearn.manifold.SpectralEmbedding.get_params", false]], "get_params() (sklearn.manifold.tsne method)": [[695, "sklearn.manifold.TSNE.get_params", false]], "get_params() (sklearn.mixture.bayesiangaussianmixture method)": [[800, "sklearn.mixture.BayesianGaussianMixture.get_params", false]], "get_params() (sklearn.mixture.gaussianmixture method)": [[801, "sklearn.mixture.GaussianMixture.get_params", false]], "get_params() (sklearn.model_selection.fixedthresholdclassifier method)": [[802, "sklearn.model_selection.FixedThresholdClassifier.get_params", false]], "get_params() (sklearn.model_selection.gridsearchcv method)": [[803, "sklearn.model_selection.GridSearchCV.get_params", false]], "get_params() (sklearn.model_selection.halvinggridsearchcv method)": [[806, "sklearn.model_selection.HalvingGridSearchCV.get_params", false]], "get_params() (sklearn.model_selection.halvingrandomsearchcv method)": [[807, "sklearn.model_selection.HalvingRandomSearchCV.get_params", false]], "get_params() (sklearn.model_selection.randomizedsearchcv method)": [[817, "sklearn.model_selection.RandomizedSearchCV.get_params", false]], "get_params() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[825, "sklearn.model_selection.TunedThresholdClassifierCV.get_params", false]], "get_params() (sklearn.multiclass.onevsoneclassifier method)": [[835, "sklearn.multiclass.OneVsOneClassifier.get_params", false]], "get_params() (sklearn.multiclass.onevsrestclassifier method)": [[836, "sklearn.multiclass.OneVsRestClassifier.get_params", false]], "get_params() (sklearn.multiclass.outputcodeclassifier method)": [[837, "sklearn.multiclass.OutputCodeClassifier.get_params", false]], "get_params() (sklearn.multioutput.classifierchain method)": [[838, "sklearn.multioutput.ClassifierChain.get_params", false]], "get_params() (sklearn.multioutput.multioutputclassifier method)": [[839, "sklearn.multioutput.MultiOutputClassifier.get_params", false]], "get_params() (sklearn.multioutput.multioutputregressor method)": [[840, "sklearn.multioutput.MultiOutputRegressor.get_params", false]], "get_params() (sklearn.multioutput.regressorchain method)": [[841, "sklearn.multioutput.RegressorChain.get_params", false]], "get_params() (sklearn.naive_bayes.bernoullinb method)": [[842, "sklearn.naive_bayes.BernoulliNB.get_params", false]], "get_params() (sklearn.naive_bayes.categoricalnb method)": [[843, "sklearn.naive_bayes.CategoricalNB.get_params", false]], "get_params() (sklearn.naive_bayes.complementnb method)": [[844, "sklearn.naive_bayes.ComplementNB.get_params", false]], "get_params() (sklearn.naive_bayes.gaussiannb method)": [[845, "sklearn.naive_bayes.GaussianNB.get_params", false]], "get_params() (sklearn.naive_bayes.multinomialnb method)": [[846, "sklearn.naive_bayes.MultinomialNB.get_params", false]], "get_params() (sklearn.neighbors.kerneldensity method)": [[852, "sklearn.neighbors.KernelDensity.get_params", false]], "get_params() (sklearn.neighbors.kneighborsclassifier method)": [[849, "sklearn.neighbors.KNeighborsClassifier.get_params", false]], "get_params() (sklearn.neighbors.kneighborsregressor method)": [[850, "sklearn.neighbors.KNeighborsRegressor.get_params", false]], "get_params() (sklearn.neighbors.kneighborstransformer method)": [[851, "sklearn.neighbors.KNeighborsTransformer.get_params", false]], "get_params() (sklearn.neighbors.localoutlierfactor method)": [[853, "sklearn.neighbors.LocalOutlierFactor.get_params", false]], "get_params() (sklearn.neighbors.nearestcentroid method)": [[854, "sklearn.neighbors.NearestCentroid.get_params", false]], "get_params() (sklearn.neighbors.nearestneighbors method)": [[855, "sklearn.neighbors.NearestNeighbors.get_params", false]], "get_params() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[856, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_params", false]], "get_params() (sklearn.neighbors.radiusneighborsclassifier method)": [[857, "sklearn.neighbors.RadiusNeighborsClassifier.get_params", false]], "get_params() (sklearn.neighbors.radiusneighborsregressor method)": [[858, "sklearn.neighbors.RadiusNeighborsRegressor.get_params", false]], "get_params() (sklearn.neighbors.radiusneighborstransformer method)": [[859, "sklearn.neighbors.RadiusNeighborsTransformer.get_params", false]], "get_params() (sklearn.neural_network.bernoullirbm method)": [[863, "sklearn.neural_network.BernoulliRBM.get_params", false]], "get_params() (sklearn.neural_network.mlpclassifier method)": [[864, "sklearn.neural_network.MLPClassifier.get_params", false]], "get_params() (sklearn.neural_network.mlpregressor method)": [[865, "sklearn.neural_network.MLPRegressor.get_params", false]], "get_params() (sklearn.pipeline.featureunion method)": [[866, "sklearn.pipeline.FeatureUnion.get_params", false]], "get_params() (sklearn.pipeline.pipeline method)": [[867, "sklearn.pipeline.Pipeline.get_params", false]], "get_params() (sklearn.preprocessing.binarizer method)": [[870, "sklearn.preprocessing.Binarizer.get_params", false]], "get_params() (sklearn.preprocessing.functiontransformer method)": [[871, "sklearn.preprocessing.FunctionTransformer.get_params", false]], "get_params() (sklearn.preprocessing.kbinsdiscretizer method)": [[872, "sklearn.preprocessing.KBinsDiscretizer.get_params", false]], "get_params() (sklearn.preprocessing.kernelcenterer method)": [[873, "sklearn.preprocessing.KernelCenterer.get_params", false]], "get_params() (sklearn.preprocessing.labelbinarizer method)": [[874, "sklearn.preprocessing.LabelBinarizer.get_params", false]], "get_params() (sklearn.preprocessing.labelencoder method)": [[875, "sklearn.preprocessing.LabelEncoder.get_params", false]], "get_params() (sklearn.preprocessing.maxabsscaler method)": [[876, "sklearn.preprocessing.MaxAbsScaler.get_params", false]], "get_params() (sklearn.preprocessing.minmaxscaler method)": [[877, "sklearn.preprocessing.MinMaxScaler.get_params", false]], "get_params() (sklearn.preprocessing.multilabelbinarizer method)": [[878, "sklearn.preprocessing.MultiLabelBinarizer.get_params", false]], "get_params() (sklearn.preprocessing.normalizer method)": [[879, "sklearn.preprocessing.Normalizer.get_params", false]], "get_params() (sklearn.preprocessing.onehotencoder method)": [[880, "sklearn.preprocessing.OneHotEncoder.get_params", false]], "get_params() (sklearn.preprocessing.ordinalencoder method)": [[881, "sklearn.preprocessing.OrdinalEncoder.get_params", false]], "get_params() (sklearn.preprocessing.polynomialfeatures method)": [[882, "sklearn.preprocessing.PolynomialFeatures.get_params", false]], "get_params() (sklearn.preprocessing.powertransformer method)": [[883, "sklearn.preprocessing.PowerTransformer.get_params", false]], "get_params() (sklearn.preprocessing.quantiletransformer method)": [[884, "sklearn.preprocessing.QuantileTransformer.get_params", false]], "get_params() (sklearn.preprocessing.robustscaler method)": [[885, "sklearn.preprocessing.RobustScaler.get_params", false]], "get_params() (sklearn.preprocessing.splinetransformer method)": [[886, "sklearn.preprocessing.SplineTransformer.get_params", false]], "get_params() (sklearn.preprocessing.standardscaler method)": [[887, "sklearn.preprocessing.StandardScaler.get_params", false]], "get_params() (sklearn.preprocessing.targetencoder method)": [[888, "sklearn.preprocessing.TargetEncoder.get_params", false]], "get_params() (sklearn.random_projection.gaussianrandomprojection method)": [[899, "sklearn.random_projection.GaussianRandomProjection.get_params", false]], "get_params() (sklearn.random_projection.sparserandomprojection method)": [[900, "sklearn.random_projection.SparseRandomProjection.get_params", false]], "get_params() (sklearn.semi_supervised.labelpropagation method)": [[902, "sklearn.semi_supervised.LabelPropagation.get_params", false]], "get_params() (sklearn.semi_supervised.labelspreading method)": [[903, "sklearn.semi_supervised.LabelSpreading.get_params", false]], "get_params() (sklearn.semi_supervised.selftrainingclassifier method)": [[904, "sklearn.semi_supervised.SelfTrainingClassifier.get_params", false]], "get_params() (sklearn.svm.linearsvc method)": [[907, "sklearn.svm.LinearSVC.get_params", false]], "get_params() (sklearn.svm.linearsvr method)": [[908, "sklearn.svm.LinearSVR.get_params", false]], "get_params() (sklearn.svm.nusvc method)": [[909, "sklearn.svm.NuSVC.get_params", false]], "get_params() (sklearn.svm.nusvr method)": [[910, "sklearn.svm.NuSVR.get_params", false]], "get_params() (sklearn.svm.oneclasssvm method)": [[911, "sklearn.svm.OneClassSVM.get_params", false]], "get_params() (sklearn.svm.svc method)": [[912, "sklearn.svm.SVC.get_params", false]], "get_params() (sklearn.svm.svr method)": [[913, "sklearn.svm.SVR.get_params", false]], "get_params() (sklearn.tree.decisiontreeclassifier method)": [[915, "sklearn.tree.DecisionTreeClassifier.get_params", false]], "get_params() (sklearn.tree.decisiontreeregressor method)": [[916, "sklearn.tree.DecisionTreeRegressor.get_params", false]], "get_params() (sklearn.tree.extratreeclassifier method)": [[917, "sklearn.tree.ExtraTreeClassifier.get_params", false]], "get_params() (sklearn.tree.extratreeregressor method)": [[918, "sklearn.tree.ExtraTreeRegressor.get_params", false]], "get_precision() (sklearn.covariance.ellipticenvelope method)": [[469, "sklearn.covariance.EllipticEnvelope.get_precision", false]], "get_precision() (sklearn.covariance.empiricalcovariance method)": [[470, "sklearn.covariance.EmpiricalCovariance.get_precision", false]], "get_precision() (sklearn.covariance.graphicallasso method)": [[471, "sklearn.covariance.GraphicalLasso.get_precision", false]], "get_precision() (sklearn.covariance.graphicallassocv method)": [[472, "sklearn.covariance.GraphicalLassoCV.get_precision", false]], "get_precision() (sklearn.covariance.ledoitwolf method)": [[473, "sklearn.covariance.LedoitWolf.get_precision", false]], "get_precision() (sklearn.covariance.mincovdet method)": [[474, "sklearn.covariance.MinCovDet.get_precision", false]], "get_precision() (sklearn.covariance.oas method)": [[475, "sklearn.covariance.OAS.get_precision", false]], "get_precision() (sklearn.covariance.shrunkcovariance method)": [[476, "sklearn.covariance.ShrunkCovariance.get_precision", false]], "get_precision() (sklearn.decomposition.factoranalysis method)": [[533, "sklearn.decomposition.FactorAnalysis.get_precision", false]], "get_precision() (sklearn.decomposition.incrementalpca method)": [[535, "sklearn.decomposition.IncrementalPCA.get_precision", false]], "get_precision() (sklearn.decomposition.pca method)": [[542, "sklearn.decomposition.PCA.get_precision", false]], "get_routing_for_object() (in module sklearn.utils.metadata_routing)": [[962, "sklearn.utils.metadata_routing.get_routing_for_object", false]], "get_scorer() (in module sklearn.metrics)": [[735, "sklearn.metrics.get_scorer", false]], "get_scorer_names() (in module sklearn.metrics)": [[736, "sklearn.metrics.get_scorer_names", false]], "get_shape() (sklearn.base.biclustermixin method)": [[422, "sklearn.base.BiclusterMixin.get_shape", false]], "get_shape() (sklearn.cluster.spectralbiclustering method)": [[451, "sklearn.cluster.SpectralBiclustering.get_shape", false]], "get_shape() (sklearn.cluster.spectralcoclustering method)": [[453, "sklearn.cluster.SpectralCoclustering.get_shape", false]], "get_stop_words() (sklearn.feature_extraction.text.countvectorizer method)": [[590, "sklearn.feature_extraction.text.CountVectorizer.get_stop_words", false]], "get_stop_words() (sklearn.feature_extraction.text.hashingvectorizer method)": [[591, "sklearn.feature_extraction.text.HashingVectorizer.get_stop_words", false]], "get_stop_words() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[593, "sklearn.feature_extraction.text.TfidfVectorizer.get_stop_words", false]], "get_submatrix() (sklearn.base.biclustermixin method)": [[422, "sklearn.base.BiclusterMixin.get_submatrix", false]], "get_submatrix() (sklearn.cluster.spectralbiclustering method)": [[451, "sklearn.cluster.SpectralBiclustering.get_submatrix", false]], "get_submatrix() (sklearn.cluster.spectralcoclustering method)": [[453, "sklearn.cluster.SpectralCoclustering.get_submatrix", false]], "get_support() (sklearn.feature_selection.genericunivariateselect method)": [[594, "sklearn.feature_selection.GenericUnivariateSelect.get_support", false]], "get_support() (sklearn.feature_selection.rfe method)": [[595, "sklearn.feature_selection.RFE.get_support", false]], "get_support() (sklearn.feature_selection.rfecv method)": [[596, "sklearn.feature_selection.RFECV.get_support", false]], "get_support() (sklearn.feature_selection.selectfdr method)": [[597, "sklearn.feature_selection.SelectFdr.get_support", false]], "get_support() (sklearn.feature_selection.selectfpr method)": [[598, "sklearn.feature_selection.SelectFpr.get_support", false]], "get_support() (sklearn.feature_selection.selectfrommodel method)": [[599, "sklearn.feature_selection.SelectFromModel.get_support", false]], "get_support() (sklearn.feature_selection.selectfwe method)": [[600, "sklearn.feature_selection.SelectFwe.get_support", false]], "get_support() (sklearn.feature_selection.selectkbest method)": [[601, "sklearn.feature_selection.SelectKBest.get_support", false]], "get_support() (sklearn.feature_selection.selectormixin method)": [[603, "sklearn.feature_selection.SelectorMixin.get_support", false]], "get_support() (sklearn.feature_selection.selectpercentile method)": [[602, "sklearn.feature_selection.SelectPercentile.get_support", false]], "get_support() (sklearn.feature_selection.sequentialfeatureselector method)": [[604, "sklearn.feature_selection.SequentialFeatureSelector.get_support", false]], "get_support() (sklearn.feature_selection.variancethreshold method)": [[605, "sklearn.feature_selection.VarianceThreshold.get_support", false]], "get_tags() (in module sklearn.utils)": [[956, "sklearn.utils.get_tags", false]], "get_tree_stats() (sklearn.neighbors.balltree method)": [[847, "sklearn.neighbors.BallTree.get_tree_stats", false]], "get_tree_stats() (sklearn.neighbors.kdtree method)": [[848, "sklearn.neighbors.KDTree.get_tree_stats", false]], "gibbs() (sklearn.neural_network.bernoullirbm method)": [[863, "sklearn.neural_network.BernoulliRBM.gibbs", false]], "gradientboostingclassifier (class in sklearn.ensemble)": [[560, "sklearn.ensemble.GradientBoostingClassifier", false]], "gradientboostingregressor (class in sklearn.ensemble)": [[561, "sklearn.ensemble.GradientBoostingRegressor", false]], "graphical_lasso() (in module sklearn.covariance)": [[478, "sklearn.covariance.graphical_lasso", false]], "graphicallasso (class in sklearn.covariance)": [[471, "sklearn.covariance.GraphicalLasso", false]], "graphicallassocv (class in sklearn.covariance)": [[472, "sklearn.covariance.GraphicalLassoCV", false]], "grid_to_graph() (in module sklearn.feature_extraction.image)": [[587, "sklearn.feature_extraction.image.grid_to_graph", false]], "gridsearchcv (class in sklearn.model_selection)": [[803, "sklearn.model_selection.GridSearchCV", false]], "groupkfold (class in sklearn.model_selection)": [[804, "sklearn.model_selection.GroupKFold", false]], "groups": [[389, "term-groups", true]], "groupshufflesplit (class in sklearn.model_selection)": [[805, "sklearn.model_selection.GroupShuffleSplit", false]], "halvinggridsearchcv (class in sklearn.model_selection)": [[806, "sklearn.model_selection.HalvingGridSearchCV", false]], "halvingrandomsearchcv (class in sklearn.model_selection)": [[807, "sklearn.model_selection.HalvingRandomSearchCV", false]], "hamming_loss() (in module sklearn.metrics)": [[737, "sklearn.metrics.hamming_loss", false]], "has_fit_parameter() (in module sklearn.utils.validation)": [[991, "sklearn.utils.validation.has_fit_parameter", false]], "hashingvectorizer (class in sklearn.feature_extraction.text)": [[591, "sklearn.feature_extraction.text.HashingVectorizer", false]], "haversine_distances() (in module sklearn.metrics.pairwise)": [[767, "sklearn.metrics.pairwise.haversine_distances", false]], "hdbscan (class in sklearn.cluster)": [[446, "sklearn.cluster.HDBSCAN", false]], "hinge_loss() (in module sklearn.metrics)": [[738, "sklearn.metrics.hinge_loss", false]], "histgradientboostingclassifier (class in sklearn.ensemble)": [[562, "sklearn.ensemble.HistGradientBoostingClassifier", false]], "histgradientboostingregressor (class in sklearn.ensemble)": [[563, "sklearn.ensemble.HistGradientBoostingRegressor", false]], "homogeneity_completeness_v_measure() (in module sklearn.metrics)": [[739, "sklearn.metrics.homogeneity_completeness_v_measure", false]], "homogeneity_score() (in module sklearn.metrics)": [[740, "sklearn.metrics.homogeneity_score", false]], "huberregressor (class in sklearn.linear_model)": [[652, "sklearn.linear_model.HuberRegressor", false]], "hyper-parameter": [[389, "term-hyper-parameter", true]], "hyperparameter": [[389, "term-hyperparameter", true]], "hyperparameter (class in sklearn.gaussian_process.kernels)": [[620, "sklearn.gaussian_process.kernels.Hyperparameter", false]], "hyperparameter_length_scale (sklearn.gaussian_process.kernels.expsinesquared property)": [[618, "sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameter_length_scale", false]], "hyperparameters (sklearn.gaussian_process.kernels.compoundkernel property)": [[615, "sklearn.gaussian_process.kernels.CompoundKernel.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.constantkernel property)": [[616, "sklearn.gaussian_process.kernels.ConstantKernel.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.dotproduct property)": [[617, "sklearn.gaussian_process.kernels.DotProduct.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.exponentiation property)": [[619, "sklearn.gaussian_process.kernels.Exponentiation.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.expsinesquared property)": [[618, "sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.kernel property)": [[621, "sklearn.gaussian_process.kernels.Kernel.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.matern property)": [[622, "sklearn.gaussian_process.kernels.Matern.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.pairwisekernel property)": [[623, "sklearn.gaussian_process.kernels.PairwiseKernel.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.product property)": [[624, "sklearn.gaussian_process.kernels.Product.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.rationalquadratic property)": [[626, "sklearn.gaussian_process.kernels.RationalQuadratic.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.rbf property)": [[625, "sklearn.gaussian_process.kernels.RBF.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.sum property)": [[627, "sklearn.gaussian_process.kernels.Sum.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.whitekernel property)": [[628, "sklearn.gaussian_process.kernels.WhiteKernel.hyperparameters", false]], "idf_ (sklearn.feature_extraction.text.tfidfvectorizer property)": [[593, "sklearn.feature_extraction.text.TfidfVectorizer.idf_", false]], "img_to_graph() (in module sklearn.feature_extraction.image)": [[588, "sklearn.feature_extraction.image.img_to_graph", false]], "imputation": [[389, "term-imputation", true]], "impute": [[389, "term-impute", true]], "inconsistentversionwarning": [[578, "sklearn.exceptions.InconsistentVersionWarning", false]], "incr_mean_variance_axis() (in module sklearn.utils.sparsefuncs)": [[978, "sklearn.utils.sparsefuncs.incr_mean_variance_axis", false]], "incrementalpca (class in sklearn.decomposition)": [[535, "sklearn.decomposition.IncrementalPCA", false]], "index() (sklearn.gaussian_process.kernels.hyperparameter method)": [[620, "sklearn.gaussian_process.kernels.Hyperparameter.index", false]], "indexable": [[389, "term-indexable", true]], "indexable() (in module sklearn.utils)": [[958, "sklearn.utils.indexable", false]], "induction": [[389, "term-induction", true]], "inductive": [[389, "term-inductive", true]], "infrequent_categories_ (sklearn.preprocessing.onehotencoder property)": [[880, "sklearn.preprocessing.OneHotEncoder.infrequent_categories_", false]], "infrequent_categories_ (sklearn.preprocessing.ordinalencoder property)": [[881, "sklearn.preprocessing.OrdinalEncoder.infrequent_categories_", false]], "infrequent_categories_ (sklearn.preprocessing.targetencoder property)": [[888, "sklearn.preprocessing.TargetEncoder.infrequent_categories_", false]], "inplace_column_scale() (in module sklearn.utils.sparsefuncs)": [[979, "sklearn.utils.sparsefuncs.inplace_column_scale", false]], "inplace_csr_column_scale() (in module sklearn.utils.sparsefuncs)": [[980, "sklearn.utils.sparsefuncs.inplace_csr_column_scale", false]], "inplace_csr_row_normalize_l1() (in module sklearn.utils.sparsefuncs_fast)": [[985, "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1", false]], "inplace_csr_row_normalize_l2() (in module sklearn.utils.sparsefuncs_fast)": [[986, "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2", false]], "inplace_row_scale() (in module sklearn.utils.sparsefuncs)": [[981, "sklearn.utils.sparsefuncs.inplace_row_scale", false]], "inplace_swap_column() (in module sklearn.utils.sparsefuncs)": [[982, "sklearn.utils.sparsefuncs.inplace_swap_column", false]], "inplace_swap_row() (in module sklearn.utils.sparsefuncs)": [[983, "sklearn.utils.sparsefuncs.inplace_swap_row", false]], "inputtags (class in sklearn.utils)": [[924, "sklearn.utils.InputTags", false]], "inverse_transform() (sklearn.cluster.featureagglomeration method)": [[445, "sklearn.cluster.FeatureAgglomeration.inverse_transform", false]], "inverse_transform() (sklearn.cross_decomposition.cca method)": [[482, "sklearn.cross_decomposition.CCA.inverse_transform", false]], "inverse_transform() (sklearn.cross_decomposition.plscanonical method)": [[483, "sklearn.cross_decomposition.PLSCanonical.inverse_transform", false]], "inverse_transform() (sklearn.cross_decomposition.plsregression method)": [[484, "sklearn.cross_decomposition.PLSRegression.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.fastica method)": [[534, "sklearn.decomposition.FastICA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.incrementalpca method)": [[535, "sklearn.decomposition.IncrementalPCA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.kernelpca method)": [[536, "sklearn.decomposition.KernelPCA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.minibatchnmf method)": [[539, "sklearn.decomposition.MiniBatchNMF.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.minibatchsparsepca method)": [[540, "sklearn.decomposition.MiniBatchSparsePCA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.nmf method)": [[541, "sklearn.decomposition.NMF.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.pca method)": [[542, "sklearn.decomposition.PCA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.sparsepca method)": [[544, "sklearn.decomposition.SparsePCA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.truncatedsvd method)": [[545, "sklearn.decomposition.TruncatedSVD.inverse_transform", false]], "inverse_transform() (sklearn.feature_extraction.dictvectorizer method)": [[583, "sklearn.feature_extraction.DictVectorizer.inverse_transform", false]], "inverse_transform() (sklearn.feature_extraction.text.countvectorizer method)": [[590, "sklearn.feature_extraction.text.CountVectorizer.inverse_transform", false]], "inverse_transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[593, "sklearn.feature_extraction.text.TfidfVectorizer.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.genericunivariateselect method)": [[594, "sklearn.feature_selection.GenericUnivariateSelect.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.rfe method)": [[595, "sklearn.feature_selection.RFE.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.rfecv method)": [[596, "sklearn.feature_selection.RFECV.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectfdr method)": [[597, "sklearn.feature_selection.SelectFdr.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectfpr method)": [[598, "sklearn.feature_selection.SelectFpr.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectfrommodel method)": [[599, "sklearn.feature_selection.SelectFromModel.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectfwe method)": [[600, "sklearn.feature_selection.SelectFwe.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectkbest method)": [[601, "sklearn.feature_selection.SelectKBest.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectormixin method)": [[603, "sklearn.feature_selection.SelectorMixin.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectpercentile method)": [[602, "sklearn.feature_selection.SelectPercentile.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[604, "sklearn.feature_selection.SequentialFeatureSelector.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.variancethreshold method)": [[605, "sklearn.feature_selection.VarianceThreshold.inverse_transform", false]], "inverse_transform() (sklearn.impute.simpleimputer method)": [[633, "sklearn.impute.SimpleImputer.inverse_transform", false]], "inverse_transform() (sklearn.model_selection.gridsearchcv method)": [[803, "sklearn.model_selection.GridSearchCV.inverse_transform", false]], "inverse_transform() (sklearn.model_selection.halvinggridsearchcv method)": [[806, "sklearn.model_selection.HalvingGridSearchCV.inverse_transform", false]], "inverse_transform() (sklearn.model_selection.halvingrandomsearchcv method)": [[807, "sklearn.model_selection.HalvingRandomSearchCV.inverse_transform", false]], "inverse_transform() (sklearn.model_selection.randomizedsearchcv method)": [[817, "sklearn.model_selection.RandomizedSearchCV.inverse_transform", false]], "inverse_transform() (sklearn.pipeline.pipeline method)": [[867, "sklearn.pipeline.Pipeline.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.functiontransformer method)": [[871, "sklearn.preprocessing.FunctionTransformer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[872, "sklearn.preprocessing.KBinsDiscretizer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.labelbinarizer method)": [[874, "sklearn.preprocessing.LabelBinarizer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.labelencoder method)": [[875, "sklearn.preprocessing.LabelEncoder.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.maxabsscaler method)": [[876, "sklearn.preprocessing.MaxAbsScaler.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.minmaxscaler method)": [[877, "sklearn.preprocessing.MinMaxScaler.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.multilabelbinarizer method)": [[878, "sklearn.preprocessing.MultiLabelBinarizer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.onehotencoder method)": [[880, "sklearn.preprocessing.OneHotEncoder.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.ordinalencoder method)": [[881, "sklearn.preprocessing.OrdinalEncoder.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.powertransformer method)": [[883, "sklearn.preprocessing.PowerTransformer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.quantiletransformer method)": [[884, "sklearn.preprocessing.QuantileTransformer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.robustscaler method)": [[885, "sklearn.preprocessing.RobustScaler.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.standardscaler method)": [[887, "sklearn.preprocessing.StandardScaler.inverse_transform", false]], "inverse_transform() (sklearn.random_projection.gaussianrandomprojection method)": [[899, "sklearn.random_projection.GaussianRandomProjection.inverse_transform", false]], "inverse_transform() (sklearn.random_projection.sparserandomprojection method)": [[900, "sklearn.random_projection.SparseRandomProjection.inverse_transform", false]], "is_classifier() (in module sklearn.base)": [[433, "sklearn.base.is_classifier", false]], "is_clusterer() (in module sklearn.base)": [[434, "sklearn.base.is_clusterer", false]], "is_multilabel() (in module sklearn.utils.multiclass)": [[965, "sklearn.utils.multiclass.is_multilabel", false]], "is_outlier_detector() (in module sklearn.base)": [[435, "sklearn.base.is_outlier_detector", false]], "is_regressor() (in module sklearn.base)": [[436, "sklearn.base.is_regressor", false]], "is_stationary() (sklearn.gaussian_process.kernels.compoundkernel method)": [[615, "sklearn.gaussian_process.kernels.CompoundKernel.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.constantkernel method)": [[616, "sklearn.gaussian_process.kernels.ConstantKernel.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.dotproduct method)": [[617, "sklearn.gaussian_process.kernels.DotProduct.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.exponentiation method)": [[619, "sklearn.gaussian_process.kernels.Exponentiation.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.expsinesquared method)": [[618, "sklearn.gaussian_process.kernels.ExpSineSquared.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.kernel method)": [[621, "sklearn.gaussian_process.kernels.Kernel.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.matern method)": [[622, "sklearn.gaussian_process.kernels.Matern.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[623, "sklearn.gaussian_process.kernels.PairwiseKernel.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.product method)": [[624, "sklearn.gaussian_process.kernels.Product.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[626, "sklearn.gaussian_process.kernels.RationalQuadratic.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.rbf method)": [[625, "sklearn.gaussian_process.kernels.RBF.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.sum method)": [[627, "sklearn.gaussian_process.kernels.Sum.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.whitekernel method)": [[628, "sklearn.gaussian_process.kernels.WhiteKernel.is_stationary", false]], "isolationforest (class in sklearn.ensemble)": [[564, "sklearn.ensemble.IsolationForest", false]], "isomap (class in sklearn.manifold)": [[691, "sklearn.manifold.Isomap", false]], "isotonic_regression() (in module sklearn.isotonic)": [[640, "sklearn.isotonic.isotonic_regression", false]], "isotonicregression (class in sklearn.isotonic)": [[638, "sklearn.isotonic.IsotonicRegression", false]], "items() (sklearn.utils.bunch method)": [[922, "sklearn.utils.Bunch.items", false]], "iterativeimputer (class in sklearn.impute)": [[630, "sklearn.impute.IterativeImputer", false]], "jaccard_score() (in module sklearn.metrics)": [[741, "sklearn.metrics.jaccard_score", false]], "joblib": [[389, "term-joblib", true]], "johnson_lindenstrauss_min_dim() (in module sklearn.random_projection)": [[901, "sklearn.random_projection.johnson_lindenstrauss_min_dim", false]], "k_means() (in module sklearn.cluster)": [[459, "sklearn.cluster.k_means", false]], "kbinsdiscretizer (class in sklearn.preprocessing)": [[872, "sklearn.preprocessing.KBinsDiscretizer", false]], "kdtree (class in sklearn.neighbors)": [[848, "sklearn.neighbors.KDTree", false]], "kernel": [[389, "term-kernel", true]], "kernel (class in sklearn.gaussian_process.kernels)": [[621, "sklearn.gaussian_process.kernels.Kernel", false]], "kernel_ (sklearn.gaussian_process.gaussianprocessclassifier property)": [[613, "sklearn.gaussian_process.GaussianProcessClassifier.kernel_", false]], "kernel_density() (sklearn.neighbors.balltree method)": [[847, "sklearn.neighbors.BallTree.kernel_density", false]], "kernel_density() (sklearn.neighbors.kdtree method)": [[848, "sklearn.neighbors.KDTree.kernel_density", false]], "kernel_metrics() (in module sklearn.metrics.pairwise)": [[768, "sklearn.metrics.pairwise.kernel_metrics", false]], "kernelcenterer (class in sklearn.preprocessing)": [[873, "sklearn.preprocessing.KernelCenterer", false]], "kerneldensity (class in sklearn.neighbors)": [[852, "sklearn.neighbors.KernelDensity", false]], "kernelpca (class in sklearn.decomposition)": [[536, "sklearn.decomposition.KernelPCA", false]], "kernelridge (class in sklearn.kernel_ridge)": [[646, "sklearn.kernel_ridge.KernelRidge", false]], "keys() (sklearn.utils.bunch method)": [[922, "sklearn.utils.Bunch.keys", false]], "kfold (class in sklearn.model_selection)": [[808, "sklearn.model_selection.KFold", false]], "kmeans (class in sklearn.cluster)": [[447, "sklearn.cluster.KMeans", false]], "kmeans_plusplus() (in module sklearn.cluster)": [[460, "sklearn.cluster.kmeans_plusplus", false]], "kneighbors() (sklearn.neighbors.kneighborsclassifier method)": [[849, "sklearn.neighbors.KNeighborsClassifier.kneighbors", false]], "kneighbors() (sklearn.neighbors.kneighborsregressor method)": [[850, "sklearn.neighbors.KNeighborsRegressor.kneighbors", false]], "kneighbors() (sklearn.neighbors.kneighborstransformer method)": [[851, "sklearn.neighbors.KNeighborsTransformer.kneighbors", false]], "kneighbors() (sklearn.neighbors.localoutlierfactor method)": [[853, "sklearn.neighbors.LocalOutlierFactor.kneighbors", false]], "kneighbors() (sklearn.neighbors.nearestneighbors method)": [[855, "sklearn.neighbors.NearestNeighbors.kneighbors", false]], "kneighbors_graph() (in module sklearn.neighbors)": [[860, "sklearn.neighbors.kneighbors_graph", false]], "kneighbors_graph() (sklearn.neighbors.kneighborsclassifier method)": [[849, "sklearn.neighbors.KNeighborsClassifier.kneighbors_graph", false]], "kneighbors_graph() (sklearn.neighbors.kneighborsregressor method)": [[850, "sklearn.neighbors.KNeighborsRegressor.kneighbors_graph", false]], "kneighbors_graph() (sklearn.neighbors.kneighborstransformer method)": [[851, "sklearn.neighbors.KNeighborsTransformer.kneighbors_graph", false]], "kneighbors_graph() (sklearn.neighbors.localoutlierfactor method)": [[853, "sklearn.neighbors.LocalOutlierFactor.kneighbors_graph", false]], "kneighbors_graph() (sklearn.neighbors.nearestneighbors method)": [[855, "sklearn.neighbors.NearestNeighbors.kneighbors_graph", false]], "kneighborsclassifier (class in sklearn.neighbors)": [[849, "sklearn.neighbors.KNeighborsClassifier", false]], "kneighborsregressor (class in sklearn.neighbors)": [[850, "sklearn.neighbors.KNeighborsRegressor", false]], "kneighborstransformer (class in sklearn.neighbors)": [[851, "sklearn.neighbors.KNeighborsTransformer", false]], "knnimputer (class in sklearn.impute)": [[631, "sklearn.impute.KNNImputer", false]], "l1_min_c() (in module sklearn.svm)": [[914, "sklearn.svm.l1_min_c", false]], "label indicator matrix": [[389, "term-label-indicator-matrix", true]], "label_binarize() (in module sklearn.preprocessing)": [[891, "sklearn.preprocessing.label_binarize", false]], "label_ranking_average_precision_score() (in module sklearn.metrics)": [[742, "sklearn.metrics.label_ranking_average_precision_score", false]], "label_ranking_loss() (in module sklearn.metrics)": [[743, "sklearn.metrics.label_ranking_loss", false]], "labelbinarizer (class in sklearn.preprocessing)": [[874, "sklearn.preprocessing.LabelBinarizer", false]], "labelencoder (class in sklearn.preprocessing)": [[875, "sklearn.preprocessing.LabelEncoder", false]], "labelpropagation (class in sklearn.semi_supervised)": [[902, "sklearn.semi_supervised.LabelPropagation", false]], "labels_": [[389, "term-labels_", true]], "labelspreading (class in sklearn.semi_supervised)": [[903, "sklearn.semi_supervised.LabelSpreading", false]], "laplacian_kernel() (in module sklearn.metrics.pairwise)": [[769, "sklearn.metrics.pairwise.laplacian_kernel", false]], "lars (class in sklearn.linear_model)": [[653, "sklearn.linear_model.Lars", false]], "lars_path() (in module sklearn.linear_model)": [[685, "sklearn.linear_model.lars_path", false]], "lars_path_gram() (in module sklearn.linear_model)": [[686, "sklearn.linear_model.lars_path_gram", false]], "larscv (class in sklearn.linear_model)": [[654, "sklearn.linear_model.LarsCV", false]], "lasso (class in sklearn.linear_model)": [[655, "sklearn.linear_model.Lasso", false]], "lasso_path() (in module sklearn.linear_model)": [[687, "sklearn.linear_model.lasso_path", false]], "lassocv (class in sklearn.linear_model)": [[656, "sklearn.linear_model.LassoCV", false]], "lassolars (class in sklearn.linear_model)": [[657, "sklearn.linear_model.LassoLars", false]], "lassolarscv (class in sklearn.linear_model)": [[658, "sklearn.linear_model.LassoLarsCV", false]], "lassolarsic (class in sklearn.linear_model)": [[659, "sklearn.linear_model.LassoLarsIC", false]], "latentdirichletallocation (class in sklearn.decomposition)": [[537, "sklearn.decomposition.LatentDirichletAllocation", false]], "leakage": [[389, "term-leakage", true]], "learning_curve() (in module sklearn.model_selection)": [[831, "sklearn.model_selection.learning_curve", false]], "learningcurvedisplay (class in sklearn.model_selection)": [[809, "sklearn.model_selection.LearningCurveDisplay", false]], "leaveonegroupout (class in sklearn.model_selection)": [[810, "sklearn.model_selection.LeaveOneGroupOut", false]], "leaveoneout (class in sklearn.model_selection)": [[811, "sklearn.model_selection.LeaveOneOut", false]], "leavepgroupsout (class in sklearn.model_selection)": [[812, "sklearn.model_selection.LeavePGroupsOut", false]], "leavepout (class in sklearn.model_selection)": [[813, "sklearn.model_selection.LeavePOut", false]], "ledoit_wolf() (in module sklearn.covariance)": [[479, "sklearn.covariance.ledoit_wolf", false]], "ledoit_wolf_shrinkage() (in module sklearn.covariance)": [[480, "sklearn.covariance.ledoit_wolf_shrinkage", false]], "ledoitwolf (class in sklearn.covariance)": [[473, "sklearn.covariance.LedoitWolf", false]], "linear_kernel() (in module sklearn.metrics.pairwise)": [[770, "sklearn.metrics.pairwise.linear_kernel", false]], "lineardiscriminantanalysis (class in sklearn.discriminant_analysis)": [[550, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis", false]], "linearregression (class in sklearn.linear_model)": [[660, "sklearn.linear_model.LinearRegression", false]], "linearsvc (class in sklearn.svm)": [[907, "sklearn.svm.LinearSVC", false]], "linearsvr (class in sklearn.svm)": [[908, "sklearn.svm.LinearSVR", false]], "load_breast_cancer() (in module sklearn.datasets)": [[501, "sklearn.datasets.load_breast_cancer", false]], "load_diabetes() (in module sklearn.datasets)": [[502, "sklearn.datasets.load_diabetes", false]], "load_digits() (in module sklearn.datasets)": [[503, "sklearn.datasets.load_digits", false]], "load_files() (in module sklearn.datasets)": [[504, "sklearn.datasets.load_files", false]], "load_iris() (in module sklearn.datasets)": [[505, "sklearn.datasets.load_iris", false]], "load_linnerud() (in module sklearn.datasets)": [[506, "sklearn.datasets.load_linnerud", false]], "load_sample_image() (in module sklearn.datasets)": [[507, "sklearn.datasets.load_sample_image", false]], "load_sample_images() (in module sklearn.datasets)": [[508, "sklearn.datasets.load_sample_images", false]], "load_svmlight_file() (in module sklearn.datasets)": [[509, "sklearn.datasets.load_svmlight_file", false]], "load_svmlight_files() (in module sklearn.datasets)": [[510, "sklearn.datasets.load_svmlight_files", false]], "load_wine() (in module sklearn.datasets)": [[511, "sklearn.datasets.load_wine", false]], "locally_linear_embedding() (in module sklearn.manifold)": [[696, "sklearn.manifold.locally_linear_embedding", false]], "locallylinearembedding (class in sklearn.manifold)": [[692, "sklearn.manifold.LocallyLinearEmbedding", false]], "localoutlierfactor (class in sklearn.neighbors)": [[853, "sklearn.neighbors.LocalOutlierFactor", false]], "log_loss() (in module sklearn.metrics)": [[744, "sklearn.metrics.log_loss", false]], "log_marginal_likelihood() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[613, "sklearn.gaussian_process.GaussianProcessClassifier.log_marginal_likelihood", false]], "log_marginal_likelihood() (sklearn.gaussian_process.gaussianprocessregressor method)": [[614, "sklearn.gaussian_process.GaussianProcessRegressor.log_marginal_likelihood", false]], "logisticregression (class in sklearn.linear_model)": [[661, "sklearn.linear_model.LogisticRegression", false]], "logisticregressioncv (class in sklearn.linear_model)": [[662, "sklearn.linear_model.LogisticRegressionCV", false]], "mahalanobis() (sklearn.covariance.ellipticenvelope method)": [[469, "sklearn.covariance.EllipticEnvelope.mahalanobis", false]], "mahalanobis() (sklearn.covariance.empiricalcovariance method)": [[470, "sklearn.covariance.EmpiricalCovariance.mahalanobis", false]], "mahalanobis() (sklearn.covariance.graphicallasso method)": [[471, "sklearn.covariance.GraphicalLasso.mahalanobis", false]], "mahalanobis() (sklearn.covariance.graphicallassocv method)": [[472, "sklearn.covariance.GraphicalLassoCV.mahalanobis", false]], "mahalanobis() (sklearn.covariance.ledoitwolf method)": [[473, "sklearn.covariance.LedoitWolf.mahalanobis", false]], "mahalanobis() (sklearn.covariance.mincovdet method)": [[474, "sklearn.covariance.MinCovDet.mahalanobis", false]], "mahalanobis() (sklearn.covariance.oas method)": [[475, "sklearn.covariance.OAS.mahalanobis", false]], "mahalanobis() (sklearn.covariance.shrunkcovariance method)": [[476, "sklearn.covariance.ShrunkCovariance.mahalanobis", false]], "make_biclusters() (in module sklearn.datasets)": [[512, "sklearn.datasets.make_biclusters", false]], "make_blobs() (in module sklearn.datasets)": [[513, "sklearn.datasets.make_blobs", false]], "make_checkerboard() (in module sklearn.datasets)": [[514, "sklearn.datasets.make_checkerboard", false]], "make_circles() (in module sklearn.datasets)": [[515, "sklearn.datasets.make_circles", false]], "make_classification() (in module sklearn.datasets)": [[516, "sklearn.datasets.make_classification", false]], "make_column_selector (class in sklearn.compose)": [[466, "sklearn.compose.make_column_selector", false]], "make_column_transformer() (in module sklearn.compose)": [[467, "sklearn.compose.make_column_transformer", false]], "make_friedman1() (in module sklearn.datasets)": [[517, "sklearn.datasets.make_friedman1", false]], "make_friedman2() (in module sklearn.datasets)": [[518, "sklearn.datasets.make_friedman2", false]], "make_friedman3() (in module sklearn.datasets)": [[519, "sklearn.datasets.make_friedman3", false]], "make_gaussian_quantiles() (in module sklearn.datasets)": [[520, "sklearn.datasets.make_gaussian_quantiles", false]], "make_hastie_10_2() (in module sklearn.datasets)": [[521, "sklearn.datasets.make_hastie_10_2", false]], "make_low_rank_matrix() (in module sklearn.datasets)": [[522, "sklearn.datasets.make_low_rank_matrix", false]], "make_moons() (in module sklearn.datasets)": [[523, "sklearn.datasets.make_moons", false]], "make_multilabel_classification() (in module sklearn.datasets)": [[524, "sklearn.datasets.make_multilabel_classification", false]], "make_pipeline() (in module sklearn.pipeline)": [[868, "sklearn.pipeline.make_pipeline", false]], "make_regression() (in module sklearn.datasets)": [[525, "sklearn.datasets.make_regression", false]], "make_s_curve() (in module sklearn.datasets)": [[526, "sklearn.datasets.make_s_curve", false]], "make_scorer() (in module sklearn.metrics)": [[745, "sklearn.metrics.make_scorer", false]], "make_sparse_coded_signal() (in module sklearn.datasets)": [[527, "sklearn.datasets.make_sparse_coded_signal", false]], "make_sparse_spd_matrix() (in module sklearn.datasets)": [[528, "sklearn.datasets.make_sparse_spd_matrix", false]], "make_sparse_uncorrelated() (in module sklearn.datasets)": [[529, "sklearn.datasets.make_sparse_uncorrelated", false]], "make_spd_matrix() (in module sklearn.datasets)": [[530, "sklearn.datasets.make_spd_matrix", false]], "make_swiss_roll() (in module sklearn.datasets)": [[531, "sklearn.datasets.make_swiss_roll", false]], "make_union() (in module sklearn.pipeline)": [[869, "sklearn.pipeline.make_union", false]], "manhattan_distances() (in module sklearn.metrics.pairwise)": [[771, "sklearn.metrics.pairwise.manhattan_distances", false]], "matern (class in sklearn.gaussian_process.kernels)": [[622, "sklearn.gaussian_process.kernels.Matern", false]], "matthews_corrcoef() (in module sklearn.metrics)": [[746, "sklearn.metrics.matthews_corrcoef", false]], "max_error() (in module sklearn.metrics)": [[747, "sklearn.metrics.max_error", false]], "max_iter": [[389, "term-max_iter", true]], "maxabs_scale() (in module sklearn.preprocessing)": [[892, "sklearn.preprocessing.maxabs_scale", false]], "maxabsscaler (class in sklearn.preprocessing)": [[876, "sklearn.preprocessing.MaxAbsScaler", false]], "mds (class in sklearn.manifold)": [[693, "sklearn.manifold.MDS", false]], "mean_absolute_error() (in module sklearn.metrics)": [[748, "sklearn.metrics.mean_absolute_error", false]], "mean_absolute_percentage_error() (in module sklearn.metrics)": [[749, "sklearn.metrics.mean_absolute_percentage_error", false]], "mean_gamma_deviance() (in module sklearn.metrics)": [[750, "sklearn.metrics.mean_gamma_deviance", false]], "mean_pinball_loss() (in module sklearn.metrics)": [[751, "sklearn.metrics.mean_pinball_loss", false]], "mean_poisson_deviance() (in module sklearn.metrics)": [[752, "sklearn.metrics.mean_poisson_deviance", false]], "mean_shift() (in module sklearn.cluster)": [[461, "sklearn.cluster.mean_shift", false]], "mean_squared_error() (in module sklearn.metrics)": [[753, "sklearn.metrics.mean_squared_error", false]], "mean_squared_log_error() (in module sklearn.metrics)": [[754, "sklearn.metrics.mean_squared_log_error", false]], "mean_tweedie_deviance() (in module sklearn.metrics)": [[755, "sklearn.metrics.mean_tweedie_deviance", false]], "mean_variance_axis() (in module sklearn.utils.sparsefuncs)": [[984, "sklearn.utils.sparsefuncs.mean_variance_axis", false]], "meanshift (class in sklearn.cluster)": [[448, "sklearn.cluster.MeanShift", false]], "median_absolute_error() (in module sklearn.metrics)": [[756, "sklearn.metrics.median_absolute_error", false]], "memmapping": [[389, "term-memmapping", true]], "memory": [[389, "term-memory", true]], "memory map": [[389, "term-memory-map", true]], "memory mapping": [[389, "term-memory-mapping", true]], "meta-estimator": [[389, "term-meta-estimator", true]], "meta-estimators": [[389, "term-meta-estimators", true]], "metadata": [[389, "term-metadata", true]], "metadatarequest (class in sklearn.utils.metadata_routing)": [[959, "sklearn.utils.metadata_routing.MetadataRequest", false]], "metadatarouter (class in sklearn.utils.metadata_routing)": [[960, "sklearn.utils.metadata_routing.MetadataRouter", false]], "metaestimator": [[389, "term-metaestimator", true]], "metaestimatormixin (class in sklearn.base)": [[427, "sklearn.base.MetaEstimatorMixin", false]], "metaestimators": [[389, "term-metaestimators", true]], "methodmapping (class in sklearn.utils.metadata_routing)": [[961, "sklearn.utils.metadata_routing.MethodMapping", false]], "metric": [[389, "term-metric", true]], "min_pos() (in module sklearn.utils.arrayfuncs)": [[930, "sklearn.utils.arrayfuncs.min_pos", false]], "mincovdet (class in sklearn.covariance)": [[474, "sklearn.covariance.MinCovDet", false]], "minibatchdictionarylearning (class in sklearn.decomposition)": [[538, "sklearn.decomposition.MiniBatchDictionaryLearning", false]], "minibatchkmeans (class in sklearn.cluster)": [[449, "sklearn.cluster.MiniBatchKMeans", false]], "minibatchnmf (class in sklearn.decomposition)": [[539, "sklearn.decomposition.MiniBatchNMF", false]], "minibatchsparsepca (class in sklearn.decomposition)": [[540, "sklearn.decomposition.MiniBatchSparsePCA", false]], "minmax_scale() (in module sklearn.preprocessing)": [[893, "sklearn.preprocessing.minmax_scale", false]], "minmaxscaler (class in sklearn.preprocessing)": [[877, "sklearn.preprocessing.MinMaxScaler", false]], "missing values": [[389, "term-missing-values", true]], "missingindicator (class in sklearn.impute)": [[632, "sklearn.impute.MissingIndicator", false]], "mlpclassifier (class in sklearn.neural_network)": [[864, "sklearn.neural_network.MLPClassifier", false]], "mlpregressor (class in sklearn.neural_network)": [[865, "sklearn.neural_network.MLPRegressor", false]], "module": [[3, "module-sklearn", false], [4, "module-sklearn.base", false], [5, "module-sklearn.calibration", false], [6, "module-sklearn.cluster", false], [7, "module-sklearn.compose", false], [8, "module-sklearn.covariance", false], [9, "module-sklearn.cross_decomposition", false], [10, "module-sklearn.datasets", false], [11, "module-sklearn.decomposition", false], [12, "module-sklearn.discriminant_analysis", false], [13, "module-sklearn.dummy", false], [14, "module-sklearn.ensemble", false], [15, "module-sklearn.exceptions", false], [16, "module-sklearn.experimental", false], [17, "module-sklearn.feature_extraction", false], [17, "module-sklearn.feature_extraction.image", false], [17, "module-sklearn.feature_extraction.text", false], [18, "module-sklearn.feature_selection", false], [19, "module-sklearn.frozen", false], [20, "module-sklearn.gaussian_process", false], [20, "module-sklearn.gaussian_process.kernels", false], [21, "module-sklearn.impute", false], [22, "module-sklearn.inspection", false], [23, "module-sklearn.isotonic", false], [24, "module-sklearn.kernel_approximation", false], [25, "module-sklearn.kernel_ridge", false], [26, "module-sklearn.linear_model", false], [27, "module-sklearn.manifold", false], [28, "module-sklearn.metrics", false], [28, "module-sklearn.metrics.cluster", false], [28, "module-sklearn.metrics.pairwise", false], [29, "module-sklearn.mixture", false], [30, "module-sklearn.model_selection", false], [31, "module-sklearn.multiclass", false], [32, "module-sklearn.multioutput", false], [33, "module-sklearn.naive_bayes", false], [34, "module-sklearn.neighbors", false], [35, "module-sklearn.neural_network", false], [36, "module-sklearn.pipeline", false], [37, "module-sklearn.preprocessing", false], [38, "module-sklearn.random_projection", false], [39, "module-sklearn.semi_supervised", false], [40, "module-sklearn.svm", false], [41, "module-sklearn.tree", false], [42, "module-sklearn.utils", false], [42, "module-sklearn.utils.arrayfuncs", false], [42, "module-sklearn.utils.class_weight", false], [42, "module-sklearn.utils.discovery", false], [42, "module-sklearn.utils.estimator_checks", false], [42, "module-sklearn.utils.extmath", false], [42, "module-sklearn.utils.graph", false], [42, "module-sklearn.utils.metadata_routing", false], [42, "module-sklearn.utils.metaestimators", false], [42, "module-sklearn.utils.multiclass", false], [42, "module-sklearn.utils.parallel", false], [42, "module-sklearn.utils.random", false], [42, "module-sklearn.utils.sparsefuncs", false], [42, "module-sklearn.utils.sparsefuncs_fast", false], [42, "module-sklearn.utils.validation", false], [581, "module-sklearn.experimental.enable_halving_search_cv", false], [582, "module-sklearn.experimental.enable_iterative_imputer", false]], "multi-class": [[389, "term-multi-class", true]], "multi-class multi-output": [[389, "term-multi-class-multi-output", true]], "multi-label": [[389, "term-multi-label", true]], "multi-output": [[389, "term-multi-output", true]], "multi-output continuous": [[389, "term-multi-output-continuous", true]], "multi-output multi-class": [[389, "term-multi-output-multi-class", true]], "multiclass": [[389, "term-multiclass", true]], "multiclass multioutput": [[389, "term-multiclass-multioutput", true]], "multilabel": [[389, "term-multilabel", true]], "multilabel indicator matrices": [[389, "term-multilabel-indicator-matrices", true]], "multilabel indicator matrix": [[389, "term-multilabel-indicator-matrix", true]], "multilabel_ (sklearn.multiclass.onevsrestclassifier property)": [[836, "sklearn.multiclass.OneVsRestClassifier.multilabel_", false]], "multilabel_confusion_matrix() (in module sklearn.metrics)": [[757, "sklearn.metrics.multilabel_confusion_matrix", false]], "multilabelbinarizer (class in sklearn.preprocessing)": [[878, "sklearn.preprocessing.MultiLabelBinarizer", false]], "multinomialnb (class in sklearn.naive_bayes)": [[846, "sklearn.naive_bayes.MultinomialNB", false]], "multioutput": [[389, "term-multioutput", true]], "multioutput continuous": [[389, "term-multioutput-continuous", true]], "multioutput multiclass": [[389, "term-multioutput-multiclass", true]], "multioutputclassifier (class in sklearn.multioutput)": [[839, "sklearn.multioutput.MultiOutputClassifier", false]], "multioutputregressor (class in sklearn.multioutput)": [[840, "sklearn.multioutput.MultiOutputRegressor", false]], "multitaskelasticnet (class in sklearn.linear_model)": [[663, "sklearn.linear_model.MultiTaskElasticNet", false]], "multitaskelasticnetcv (class in sklearn.linear_model)": [[664, "sklearn.linear_model.MultiTaskElasticNetCV", false]], "multitasklasso (class in sklearn.linear_model)": [[665, "sklearn.linear_model.MultiTaskLasso", false]], "multitasklassocv (class in sklearn.linear_model)": [[666, "sklearn.linear_model.MultiTaskLassoCV", false]], "murmurhash3_32() (in module sklearn.utils)": [[968, "sklearn.utils.murmurhash3_32", false]], "mutual_info_classif() (in module sklearn.feature_selection)": [[609, "sklearn.feature_selection.mutual_info_classif", false]], "mutual_info_regression() (in module sklearn.feature_selection)": [[610, "sklearn.feature_selection.mutual_info_regression", false]], "mutual_info_score() (in module sklearn.metrics)": [[758, "sklearn.metrics.mutual_info_score", false]], "n_classes_ (sklearn.multiclass.onevsoneclassifier property)": [[835, "sklearn.multiclass.OneVsOneClassifier.n_classes_", false]], "n_classes_ (sklearn.multiclass.onevsrestclassifier property)": [[836, "sklearn.multiclass.OneVsRestClassifier.n_classes_", false]], "n_components": [[389, "term-n_components", true]], "n_components_ (sklearn.decomposition.sparsecoder property)": [[543, "sklearn.decomposition.SparseCoder.n_components_", false]], "n_dims (sklearn.gaussian_process.kernels.compoundkernel property)": [[615, "sklearn.gaussian_process.kernels.CompoundKernel.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.constantkernel property)": [[616, "sklearn.gaussian_process.kernels.ConstantKernel.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.dotproduct property)": [[617, "sklearn.gaussian_process.kernels.DotProduct.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.exponentiation property)": [[619, "sklearn.gaussian_process.kernels.Exponentiation.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.expsinesquared property)": [[618, "sklearn.gaussian_process.kernels.ExpSineSquared.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.kernel property)": [[621, "sklearn.gaussian_process.kernels.Kernel.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.matern property)": [[622, "sklearn.gaussian_process.kernels.Matern.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.pairwisekernel property)": [[623, "sklearn.gaussian_process.kernels.PairwiseKernel.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.product property)": [[624, "sklearn.gaussian_process.kernels.Product.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.rationalquadratic property)": [[626, "sklearn.gaussian_process.kernels.RationalQuadratic.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.rbf property)": [[625, "sklearn.gaussian_process.kernels.RBF.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.sum property)": [[627, "sklearn.gaussian_process.kernels.Sum.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.whitekernel property)": [[628, "sklearn.gaussian_process.kernels.WhiteKernel.n_dims", false]], "n_elements (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[620, "sklearn.gaussian_process.kernels.Hyperparameter.n_elements", false]], "n_features": [[389, "term-n_features", true]], "n_features_in_ (sklearn.compose.transformedtargetregressor property)": [[465, "sklearn.compose.TransformedTargetRegressor.n_features_in_", false]], "n_features_in_ (sklearn.decomposition.sparsecoder property)": [[543, "sklearn.decomposition.SparseCoder.n_features_in_", false]], "n_features_in_ (sklearn.ensemble.stackingclassifier property)": [[568, "sklearn.ensemble.StackingClassifier.n_features_in_", false]], "n_features_in_ (sklearn.ensemble.stackingregressor property)": [[569, "sklearn.ensemble.StackingRegressor.n_features_in_", false]], "n_features_in_ (sklearn.ensemble.votingclassifier property)": [[570, "sklearn.ensemble.VotingClassifier.n_features_in_", false]], "n_features_in_ (sklearn.ensemble.votingregressor property)": [[571, "sklearn.ensemble.VotingRegressor.n_features_in_", false]], "n_features_in_ (sklearn.feature_selection.selectfrommodel property)": [[599, "sklearn.feature_selection.SelectFromModel.n_features_in_", false]], "n_features_in_ (sklearn.model_selection.gridsearchcv property)": [[803, "sklearn.model_selection.GridSearchCV.n_features_in_", false]], "n_features_in_ (sklearn.model_selection.halvinggridsearchcv property)": [[806, "sklearn.model_selection.HalvingGridSearchCV.n_features_in_", false]], "n_features_in_ (sklearn.model_selection.halvingrandomsearchcv property)": [[807, "sklearn.model_selection.HalvingRandomSearchCV.n_features_in_", false]], "n_features_in_ (sklearn.model_selection.randomizedsearchcv property)": [[817, "sklearn.model_selection.RandomizedSearchCV.n_features_in_", false]], "n_features_in_ (sklearn.pipeline.featureunion property)": [[866, "sklearn.pipeline.FeatureUnion.n_features_in_", false]], "n_features_in_ (sklearn.pipeline.pipeline property)": [[867, "sklearn.pipeline.Pipeline.n_features_in_", false]], "n_iter_": [[389, "term-n_iter_", true]], "n_iter_ (sklearn.ensemble.histgradientboostingclassifier property)": [[562, "sklearn.ensemble.HistGradientBoostingClassifier.n_iter_", false]], "n_iter_ (sklearn.ensemble.histgradientboostingregressor property)": [[563, "sklearn.ensemble.HistGradientBoostingRegressor.n_iter_", false]], "n_iter_no_change": [[389, "term-n_iter_no_change", true]], "n_jobs": [[389, "term-n_jobs", true]], "n_outputs": [[389, "term-n_outputs", true]], "n_samples": [[389, "term-n_samples", true]], "n_support_ (sklearn.svm.nusvc property)": [[909, "sklearn.svm.NuSVC.n_support_", false]], "n_support_ (sklearn.svm.nusvr property)": [[910, "sklearn.svm.NuSVR.n_support_", false]], "n_support_ (sklearn.svm.oneclasssvm property)": [[911, "sklearn.svm.OneClassSVM.n_support_", false]], "n_support_ (sklearn.svm.svc property)": [[912, "sklearn.svm.SVC.n_support_", false]], "n_support_ (sklearn.svm.svr property)": [[913, "sklearn.svm.SVR.n_support_", false]], "n_targets": [[389, "term-n_targets", true]], "name (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[620, "sklearn.gaussian_process.kernels.Hyperparameter.name", false]], "named_estimators (sklearn.ensemble.stackingclassifier property)": [[568, "sklearn.ensemble.StackingClassifier.named_estimators", false]], "named_estimators (sklearn.ensemble.stackingregressor property)": [[569, "sklearn.ensemble.StackingRegressor.named_estimators", false]], "named_estimators (sklearn.ensemble.votingclassifier property)": [[570, "sklearn.ensemble.VotingClassifier.named_estimators", false]], "named_estimators (sklearn.ensemble.votingregressor property)": [[571, "sklearn.ensemble.VotingRegressor.named_estimators", false]], "named_steps (sklearn.pipeline.pipeline property)": [[867, "sklearn.pipeline.Pipeline.named_steps", false]], "named_transformers_ (sklearn.compose.columntransformer property)": [[464, "sklearn.compose.ColumnTransformer.named_transformers_", false]], "nan_euclidean_distances() (in module sklearn.metrics.pairwise)": [[772, "sklearn.metrics.pairwise.nan_euclidean_distances", false]], "narrative docs": [[389, "term-narrative-docs", true]], "narrative documentation": [[389, "term-narrative-documentation", true]], "ndcg_score() (in module sklearn.metrics)": [[759, "sklearn.metrics.ndcg_score", false]], "nearestcentroid (class in sklearn.neighbors)": [[854, "sklearn.neighbors.NearestCentroid", false]], "nearestneighbors (class in sklearn.neighbors)": [[855, "sklearn.neighbors.NearestNeighbors", false]], "neighborhoodcomponentsanalysis (class in sklearn.neighbors)": [[856, "sklearn.neighbors.NeighborhoodComponentsAnalysis", false]], "nmf (class in sklearn.decomposition)": [[541, "sklearn.decomposition.NMF", false]], "non_negative_factorization() (in module sklearn.decomposition)": [[548, "sklearn.decomposition.non_negative_factorization", false]], "normalize() (in module sklearn.preprocessing)": [[894, "sklearn.preprocessing.normalize", false]], "normalized_mutual_info_score() (in module sklearn.metrics)": [[760, "sklearn.metrics.normalized_mutual_info_score", false]], "normalizer (class in sklearn.preprocessing)": [[879, "sklearn.preprocessing.Normalizer", false]], "notfittederror": [[579, "sklearn.exceptions.NotFittedError", false]], "np": [[389, "term-np", true]], "nusvc (class in sklearn.svm)": [[909, "sklearn.svm.NuSVC", false]], "nusvr (class in sklearn.svm)": [[910, "sklearn.svm.NuSVR", false]], "nystroem (class in sklearn.kernel_approximation)": [[642, "sklearn.kernel_approximation.Nystroem", false]], "oas (class in sklearn.covariance)": [[475, "sklearn.covariance.OAS", false]], "oas() (in module sklearn.covariance)": [[420, "sklearn.covariance.oas", false]], "oneclasssvm (class in sklearn.svm)": [[911, "sklearn.svm.OneClassSVM", false]], "onehotencoder (class in sklearn.preprocessing)": [[880, "sklearn.preprocessing.OneHotEncoder", false]], "onetoonefeaturemixin (class in sklearn.base)": [[428, "sklearn.base.OneToOneFeatureMixin", false]], "onevsoneclassifier (class in sklearn.multiclass)": [[835, "sklearn.multiclass.OneVsOneClassifier", false]], "onevsrestclassifier (class in sklearn.multiclass)": [[836, "sklearn.multiclass.OneVsRestClassifier", false]], "online learning": [[389, "term-online-learning", true]], "optics (class in sklearn.cluster)": [[450, "sklearn.cluster.OPTICS", false]], "ordinalencoder (class in sklearn.preprocessing)": [[881, "sklearn.preprocessing.OrdinalEncoder", false]], "orthogonal_mp() (in module sklearn.linear_model)": [[688, "sklearn.linear_model.orthogonal_mp", false]], "orthogonal_mp_gram() (in module sklearn.linear_model)": [[689, "sklearn.linear_model.orthogonal_mp_gram", false]], "orthogonalmatchingpursuit (class in sklearn.linear_model)": [[667, "sklearn.linear_model.OrthogonalMatchingPursuit", false]], "orthogonalmatchingpursuitcv (class in sklearn.linear_model)": [[668, "sklearn.linear_model.OrthogonalMatchingPursuitCV", false]], "out-of-core": [[389, "term-out-of-core", true]], "outlier detector": [[389, "term-outlier-detector", true]], "outlier detectors": [[389, "term-outlier-detectors", true]], "outliermixin (class in sklearn.base)": [[429, "sklearn.base.OutlierMixin", false]], "outputcodeclassifier (class in sklearn.multiclass)": [[837, "sklearn.multiclass.OutputCodeClassifier", false]], "outputs": [[389, "term-outputs", true]], "pair": [[389, "term-pair", true]], "pair_confusion_matrix() (in module sklearn.metrics.cluster)": [[718, "sklearn.metrics.cluster.pair_confusion_matrix", false]], "paired_cosine_distances() (in module sklearn.metrics.pairwise)": [[773, "sklearn.metrics.pairwise.paired_cosine_distances", false]], "paired_distances() (in module sklearn.metrics.pairwise)": [[774, "sklearn.metrics.pairwise.paired_distances", false]], "paired_euclidean_distances() (in module sklearn.metrics.pairwise)": [[775, "sklearn.metrics.pairwise.paired_euclidean_distances", false]], "paired_manhattan_distances() (in module sklearn.metrics.pairwise)": [[776, "sklearn.metrics.pairwise.paired_manhattan_distances", false]], "pairwise metric": [[389, "term-pairwise-metric", true]], "pairwise metrics": [[389, "term-pairwise-metrics", true]], "pairwise_distances() (in module sklearn.metrics)": [[781, "sklearn.metrics.pairwise_distances", false]], "pairwise_distances_argmin() (in module sklearn.metrics)": [[782, "sklearn.metrics.pairwise_distances_argmin", false]], "pairwise_distances_argmin_min() (in module sklearn.metrics)": [[783, "sklearn.metrics.pairwise_distances_argmin_min", false]], "pairwise_distances_chunked() (in module sklearn.metrics)": [[784, "sklearn.metrics.pairwise_distances_chunked", false]], "pairwise_kernels() (in module sklearn.metrics.pairwise)": [[777, "sklearn.metrics.pairwise.pairwise_kernels", false]], "pairwisekernel (class in sklearn.gaussian_process.kernels)": [[623, "sklearn.gaussian_process.kernels.PairwiseKernel", false]], "parallel (class in sklearn.utils.parallel)": [[969, "sklearn.utils.parallel.Parallel", false]], "parallel_backend (class in sklearn.utils)": [[971, "sklearn.utils.parallel_backend", false]], "param": [[389, "term-param", true]], "parameter": [[389, "term-parameter", true]], "parametergrid (class in sklearn.model_selection)": [[814, "sklearn.model_selection.ParameterGrid", false]], "parameters": [[389, "term-parameters", true]], "parametersampler (class in sklearn.model_selection)": [[815, "sklearn.model_selection.ParameterSampler", false]], "parametrize_with_checks() (in module sklearn.utils.estimator_checks)": [[946, "sklearn.utils.estimator_checks.parametrize_with_checks", false]], "params": [[389, "term-params", true]], "partial_dependence() (in module sklearn.inspection)": [[636, "sklearn.inspection.partial_dependence", false]], "partial_fit": [[389, "term-partial_fit", true]], "partial_fit() (sklearn.cluster.birch method)": [[442, "sklearn.cluster.Birch.partial_fit", false]], "partial_fit() (sklearn.cluster.minibatchkmeans method)": [[449, "sklearn.cluster.MiniBatchKMeans.partial_fit", false]], "partial_fit() (sklearn.decomposition.incrementalpca method)": [[535, "sklearn.decomposition.IncrementalPCA.partial_fit", false]], "partial_fit() (sklearn.decomposition.latentdirichletallocation method)": [[537, "sklearn.decomposition.LatentDirichletAllocation.partial_fit", false]], "partial_fit() (sklearn.decomposition.minibatchdictionarylearning method)": [[538, "sklearn.decomposition.MiniBatchDictionaryLearning.partial_fit", false]], "partial_fit() (sklearn.decomposition.minibatchnmf method)": [[539, "sklearn.decomposition.MiniBatchNMF.partial_fit", false]], "partial_fit() (sklearn.feature_extraction.text.hashingvectorizer method)": [[591, "sklearn.feature_extraction.text.HashingVectorizer.partial_fit", false]], "partial_fit() (sklearn.feature_selection.selectfrommodel method)": [[599, "sklearn.feature_selection.SelectFromModel.partial_fit", false]], "partial_fit() (sklearn.linear_model.passiveaggressiveclassifier method)": [[669, "sklearn.linear_model.PassiveAggressiveClassifier.partial_fit", false]], "partial_fit() (sklearn.linear_model.passiveaggressiveregressor method)": [[670, "sklearn.linear_model.PassiveAggressiveRegressor.partial_fit", false]], "partial_fit() (sklearn.linear_model.perceptron method)": [[671, "sklearn.linear_model.Perceptron.partial_fit", false]], "partial_fit() (sklearn.linear_model.sgdclassifier method)": [[679, "sklearn.linear_model.SGDClassifier.partial_fit", false]], "partial_fit() (sklearn.linear_model.sgdoneclasssvm method)": [[680, "sklearn.linear_model.SGDOneClassSVM.partial_fit", false]], "partial_fit() (sklearn.linear_model.sgdregressor method)": [[681, "sklearn.linear_model.SGDRegressor.partial_fit", false]], "partial_fit() (sklearn.multiclass.onevsoneclassifier method)": [[835, "sklearn.multiclass.OneVsOneClassifier.partial_fit", false]], "partial_fit() (sklearn.multiclass.onevsrestclassifier method)": [[836, "sklearn.multiclass.OneVsRestClassifier.partial_fit", false]], "partial_fit() (sklearn.multioutput.multioutputclassifier method)": [[839, "sklearn.multioutput.MultiOutputClassifier.partial_fit", false]], "partial_fit() (sklearn.multioutput.multioutputregressor method)": [[840, "sklearn.multioutput.MultiOutputRegressor.partial_fit", false]], "partial_fit() (sklearn.naive_bayes.bernoullinb method)": [[842, "sklearn.naive_bayes.BernoulliNB.partial_fit", false]], "partial_fit() (sklearn.naive_bayes.categoricalnb method)": [[843, "sklearn.naive_bayes.CategoricalNB.partial_fit", false]], "partial_fit() (sklearn.naive_bayes.complementnb method)": [[844, "sklearn.naive_bayes.ComplementNB.partial_fit", false]], "partial_fit() (sklearn.naive_bayes.gaussiannb method)": [[845, "sklearn.naive_bayes.GaussianNB.partial_fit", false]], "partial_fit() (sklearn.naive_bayes.multinomialnb method)": [[846, "sklearn.naive_bayes.MultinomialNB.partial_fit", false]], "partial_fit() (sklearn.neural_network.bernoullirbm method)": [[863, "sklearn.neural_network.BernoulliRBM.partial_fit", false]], "partial_fit() (sklearn.neural_network.mlpclassifier method)": [[864, "sklearn.neural_network.MLPClassifier.partial_fit", false]], "partial_fit() (sklearn.neural_network.mlpregressor method)": [[865, "sklearn.neural_network.MLPRegressor.partial_fit", false]], "partial_fit() (sklearn.preprocessing.maxabsscaler method)": [[876, "sklearn.preprocessing.MaxAbsScaler.partial_fit", false]], "partial_fit() (sklearn.preprocessing.minmaxscaler method)": [[877, "sklearn.preprocessing.MinMaxScaler.partial_fit", false]], "partial_fit() (sklearn.preprocessing.standardscaler method)": [[887, "sklearn.preprocessing.StandardScaler.partial_fit", false]], "partialdependencedisplay (class in sklearn.inspection)": [[635, "sklearn.inspection.PartialDependenceDisplay", false]], "passiveaggressiveclassifier (class in sklearn.linear_model)": [[669, "sklearn.linear_model.PassiveAggressiveClassifier", false]], "passiveaggressiveregressor (class in sklearn.linear_model)": [[670, "sklearn.linear_model.PassiveAggressiveRegressor", false]], "patchextractor (class in sklearn.feature_extraction.image)": [[585, "sklearn.feature_extraction.image.PatchExtractor", false]], "path() (sklearn.linear_model.elasticnet static method)": [[649, "sklearn.linear_model.ElasticNet.path", false]], "path() (sklearn.linear_model.elasticnetcv static method)": [[650, "sklearn.linear_model.ElasticNetCV.path", false]], "path() (sklearn.linear_model.lasso static method)": [[655, "sklearn.linear_model.Lasso.path", false]], "path() (sklearn.linear_model.lassocv static method)": [[656, "sklearn.linear_model.LassoCV.path", false]], "path() (sklearn.linear_model.multitaskelasticnet static method)": [[663, "sklearn.linear_model.MultiTaskElasticNet.path", false]], "path() (sklearn.linear_model.multitaskelasticnetcv static method)": [[664, "sklearn.linear_model.MultiTaskElasticNetCV.path", false]], "path() (sklearn.linear_model.multitasklasso static method)": [[665, "sklearn.linear_model.MultiTaskLasso.path", false]], "path() (sklearn.linear_model.multitasklassocv static method)": [[666, "sklearn.linear_model.MultiTaskLassoCV.path", false]], "pca (class in sklearn.decomposition)": [[542, "sklearn.decomposition.PCA", false]], "pd": [[389, "term-pd", true]], "perceptron (class in sklearn.linear_model)": [[671, "sklearn.linear_model.Perceptron", false]], "permutation_importance() (in module sklearn.inspection)": [[637, "sklearn.inspection.permutation_importance", false]], "permutation_test_score() (in module sklearn.model_selection)": [[832, "sklearn.model_selection.permutation_test_score", false]], "perplexity() (sklearn.decomposition.latentdirichletallocation method)": [[537, "sklearn.decomposition.LatentDirichletAllocation.perplexity", false]], "pipeline (class in sklearn.pipeline)": [[867, "sklearn.pipeline.Pipeline", false]], "plot() (sklearn.calibration.calibrationdisplay method)": [[438, "sklearn.calibration.CalibrationDisplay.plot", false]], "plot() (sklearn.inspection.decisionboundarydisplay method)": [[634, "sklearn.inspection.DecisionBoundaryDisplay.plot", false]], "plot() (sklearn.inspection.partialdependencedisplay method)": [[635, "sklearn.inspection.PartialDependenceDisplay.plot", false]], "plot() (sklearn.metrics.confusionmatrixdisplay method)": [[700, "sklearn.metrics.ConfusionMatrixDisplay.plot", false]], "plot() (sklearn.metrics.detcurvedisplay method)": [[701, "sklearn.metrics.DetCurveDisplay.plot", false]], "plot() (sklearn.metrics.precisionrecalldisplay method)": [[703, "sklearn.metrics.PrecisionRecallDisplay.plot", false]], "plot() (sklearn.metrics.predictionerrordisplay method)": [[704, "sklearn.metrics.PredictionErrorDisplay.plot", false]], "plot() (sklearn.metrics.roccurvedisplay method)": [[705, "sklearn.metrics.RocCurveDisplay.plot", false]], "plot() (sklearn.model_selection.learningcurvedisplay method)": [[809, "sklearn.model_selection.LearningCurveDisplay.plot", false]], "plot() (sklearn.model_selection.validationcurvedisplay method)": [[826, "sklearn.model_selection.ValidationCurveDisplay.plot", false]], "plot_tree() (in module sklearn.tree)": [[921, "sklearn.tree.plot_tree", false]], "plscanonical (class in sklearn.cross_decomposition)": [[483, "sklearn.cross_decomposition.PLSCanonical", false]], "plsregression (class in sklearn.cross_decomposition)": [[484, "sklearn.cross_decomposition.PLSRegression", false]], "plssvd (class in sklearn.cross_decomposition)": [[485, "sklearn.cross_decomposition.PLSSVD", false]], "poissonregressor (class in sklearn.linear_model)": [[672, "sklearn.linear_model.PoissonRegressor", false]], "polynomial_kernel() (in module sklearn.metrics.pairwise)": [[778, "sklearn.metrics.pairwise.polynomial_kernel", false]], "polynomialcountsketch (class in sklearn.kernel_approximation)": [[643, "sklearn.kernel_approximation.PolynomialCountSketch", false]], "polynomialfeatures (class in sklearn.preprocessing)": [[882, "sklearn.preprocessing.PolynomialFeatures", false]], "pop() (sklearn.utils.bunch method)": [[922, "sklearn.utils.Bunch.pop", false]], "popitem() (sklearn.utils.bunch method)": [[922, "sklearn.utils.Bunch.popitem", false]], "pos_label": [[389, "term-pos_label", true]], "power_transform() (in module sklearn.preprocessing)": [[895, "sklearn.preprocessing.power_transform", false]], "powers_ (sklearn.preprocessing.polynomialfeatures property)": [[882, "sklearn.preprocessing.PolynomialFeatures.powers_", false]], "powertransformer (class in sklearn.preprocessing)": [[883, "sklearn.preprocessing.PowerTransformer", false]], "precision_recall_curve() (in module sklearn.metrics)": [[785, "sklearn.metrics.precision_recall_curve", false]], "precision_recall_fscore_support() (in module sklearn.metrics)": [[786, "sklearn.metrics.precision_recall_fscore_support", false]], "precision_score() (in module sklearn.metrics)": [[787, "sklearn.metrics.precision_score", false]], "precisionrecalldisplay (class in sklearn.metrics)": [[703, "sklearn.metrics.PrecisionRecallDisplay", false]], "precomputed": [[389, "term-precomputed", true]], "predefinedsplit (class in sklearn.model_selection)": [[816, "sklearn.model_selection.PredefinedSplit", false]], "predict": [[389, "term-predict", true]], "predict() (sklearn.calibration.calibratedclassifiercv method)": [[437, "sklearn.calibration.CalibratedClassifierCV.predict", false]], "predict() (sklearn.cluster.affinitypropagation method)": [[440, "sklearn.cluster.AffinityPropagation.predict", false]], "predict() (sklearn.cluster.birch method)": [[442, "sklearn.cluster.Birch.predict", false]], "predict() (sklearn.cluster.bisectingkmeans method)": [[443, "sklearn.cluster.BisectingKMeans.predict", false]], "predict() (sklearn.cluster.kmeans method)": [[447, "sklearn.cluster.KMeans.predict", false]], "predict() (sklearn.cluster.meanshift method)": [[448, "sklearn.cluster.MeanShift.predict", false]], "predict() (sklearn.cluster.minibatchkmeans method)": [[449, "sklearn.cluster.MiniBatchKMeans.predict", false]], "predict() (sklearn.compose.transformedtargetregressor method)": [[465, "sklearn.compose.TransformedTargetRegressor.predict", false]], "predict() (sklearn.covariance.ellipticenvelope method)": [[469, "sklearn.covariance.EllipticEnvelope.predict", false]], "predict() (sklearn.cross_decomposition.cca method)": [[482, "sklearn.cross_decomposition.CCA.predict", false]], "predict() (sklearn.cross_decomposition.plscanonical method)": [[483, "sklearn.cross_decomposition.PLSCanonical.predict", false]], "predict() (sklearn.cross_decomposition.plsregression method)": [[484, "sklearn.cross_decomposition.PLSRegression.predict", false]], "predict() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[550, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict", false]], "predict() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[551, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict", false]], "predict() (sklearn.dummy.dummyclassifier method)": [[552, "sklearn.dummy.DummyClassifier.predict", false]], "predict() (sklearn.dummy.dummyregressor method)": [[553, "sklearn.dummy.DummyRegressor.predict", false]], "predict() (sklearn.ensemble.adaboostclassifier method)": [[554, "sklearn.ensemble.AdaBoostClassifier.predict", false]], "predict() (sklearn.ensemble.adaboostregressor method)": [[555, "sklearn.ensemble.AdaBoostRegressor.predict", false]], "predict() (sklearn.ensemble.baggingclassifier method)": [[556, "sklearn.ensemble.BaggingClassifier.predict", false]], "predict() (sklearn.ensemble.baggingregressor method)": [[557, "sklearn.ensemble.BaggingRegressor.predict", false]], "predict() (sklearn.ensemble.extratreesclassifier method)": [[558, "sklearn.ensemble.ExtraTreesClassifier.predict", false]], "predict() (sklearn.ensemble.extratreesregressor method)": [[559, "sklearn.ensemble.ExtraTreesRegressor.predict", false]], "predict() (sklearn.ensemble.gradientboostingclassifier method)": [[560, "sklearn.ensemble.GradientBoostingClassifier.predict", false]], "predict() (sklearn.ensemble.gradientboostingregressor method)": [[561, "sklearn.ensemble.GradientBoostingRegressor.predict", false]], "predict() (sklearn.ensemble.histgradientboostingclassifier method)": [[562, "sklearn.ensemble.HistGradientBoostingClassifier.predict", false]], "predict() (sklearn.ensemble.histgradientboostingregressor method)": [[563, "sklearn.ensemble.HistGradientBoostingRegressor.predict", false]], "predict() (sklearn.ensemble.isolationforest method)": [[564, "sklearn.ensemble.IsolationForest.predict", false]], "predict() (sklearn.ensemble.randomforestclassifier method)": [[565, "sklearn.ensemble.RandomForestClassifier.predict", false]], "predict() (sklearn.ensemble.randomforestregressor method)": [[566, "sklearn.ensemble.RandomForestRegressor.predict", false]], "predict() (sklearn.ensemble.stackingclassifier method)": [[568, "sklearn.ensemble.StackingClassifier.predict", false]], "predict() (sklearn.ensemble.stackingregressor method)": [[569, "sklearn.ensemble.StackingRegressor.predict", false]], "predict() (sklearn.ensemble.votingclassifier method)": [[570, "sklearn.ensemble.VotingClassifier.predict", false]], "predict() (sklearn.ensemble.votingregressor method)": [[571, "sklearn.ensemble.VotingRegressor.predict", false]], "predict() (sklearn.feature_selection.rfe method)": [[595, "sklearn.feature_selection.RFE.predict", false]], "predict() (sklearn.feature_selection.rfecv method)": [[596, "sklearn.feature_selection.RFECV.predict", false]], "predict() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[613, "sklearn.gaussian_process.GaussianProcessClassifier.predict", false]], "predict() (sklearn.gaussian_process.gaussianprocessregressor method)": [[614, "sklearn.gaussian_process.GaussianProcessRegressor.predict", false]], "predict() (sklearn.isotonic.isotonicregression method)": [[638, "sklearn.isotonic.IsotonicRegression.predict", false]], "predict() (sklearn.kernel_ridge.kernelridge method)": [[646, "sklearn.kernel_ridge.KernelRidge.predict", false]], "predict() (sklearn.linear_model.ardregression method)": [[647, "sklearn.linear_model.ARDRegression.predict", false]], "predict() (sklearn.linear_model.bayesianridge method)": [[648, "sklearn.linear_model.BayesianRidge.predict", false]], "predict() (sklearn.linear_model.elasticnet method)": [[649, "sklearn.linear_model.ElasticNet.predict", false]], "predict() (sklearn.linear_model.elasticnetcv method)": [[650, "sklearn.linear_model.ElasticNetCV.predict", false]], "predict() (sklearn.linear_model.gammaregressor method)": [[651, "sklearn.linear_model.GammaRegressor.predict", false]], "predict() (sklearn.linear_model.huberregressor method)": [[652, "sklearn.linear_model.HuberRegressor.predict", false]], "predict() (sklearn.linear_model.lars method)": [[653, "sklearn.linear_model.Lars.predict", false]], "predict() (sklearn.linear_model.larscv method)": [[654, "sklearn.linear_model.LarsCV.predict", false]], "predict() (sklearn.linear_model.lasso method)": [[655, "sklearn.linear_model.Lasso.predict", false]], "predict() (sklearn.linear_model.lassocv method)": [[656, "sklearn.linear_model.LassoCV.predict", false]], "predict() (sklearn.linear_model.lassolars method)": [[657, "sklearn.linear_model.LassoLars.predict", false]], "predict() (sklearn.linear_model.lassolarscv method)": [[658, "sklearn.linear_model.LassoLarsCV.predict", false]], "predict() (sklearn.linear_model.lassolarsic method)": [[659, "sklearn.linear_model.LassoLarsIC.predict", false]], "predict() (sklearn.linear_model.linearregression method)": [[660, "sklearn.linear_model.LinearRegression.predict", false]], "predict() (sklearn.linear_model.logisticregression method)": [[661, "sklearn.linear_model.LogisticRegression.predict", false]], "predict() (sklearn.linear_model.logisticregressioncv method)": [[662, "sklearn.linear_model.LogisticRegressionCV.predict", false]], "predict() (sklearn.linear_model.multitaskelasticnet method)": [[663, "sklearn.linear_model.MultiTaskElasticNet.predict", false]], "predict() (sklearn.linear_model.multitaskelasticnetcv method)": [[664, "sklearn.linear_model.MultiTaskElasticNetCV.predict", false]], "predict() (sklearn.linear_model.multitasklasso method)": [[665, "sklearn.linear_model.MultiTaskLasso.predict", false]], "predict() (sklearn.linear_model.multitasklassocv method)": [[666, "sklearn.linear_model.MultiTaskLassoCV.predict", false]], "predict() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[667, "sklearn.linear_model.OrthogonalMatchingPursuit.predict", false]], "predict() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[668, "sklearn.linear_model.OrthogonalMatchingPursuitCV.predict", false]], "predict() (sklearn.linear_model.passiveaggressiveclassifier method)": [[669, "sklearn.linear_model.PassiveAggressiveClassifier.predict", false]], "predict() (sklearn.linear_model.passiveaggressiveregressor method)": [[670, "sklearn.linear_model.PassiveAggressiveRegressor.predict", false]], "predict() (sklearn.linear_model.perceptron method)": [[671, "sklearn.linear_model.Perceptron.predict", false]], "predict() (sklearn.linear_model.poissonregressor method)": [[672, "sklearn.linear_model.PoissonRegressor.predict", false]], "predict() (sklearn.linear_model.quantileregressor method)": [[673, "sklearn.linear_model.QuantileRegressor.predict", false]], "predict() (sklearn.linear_model.ransacregressor method)": [[674, "sklearn.linear_model.RANSACRegressor.predict", false]], "predict() (sklearn.linear_model.ridge method)": [[675, "sklearn.linear_model.Ridge.predict", false]], "predict() (sklearn.linear_model.ridgeclassifier method)": [[677, "sklearn.linear_model.RidgeClassifier.predict", false]], "predict() (sklearn.linear_model.ridgeclassifiercv method)": [[678, "sklearn.linear_model.RidgeClassifierCV.predict", false]], "predict() (sklearn.linear_model.ridgecv method)": [[676, "sklearn.linear_model.RidgeCV.predict", false]], "predict() (sklearn.linear_model.sgdclassifier method)": [[679, "sklearn.linear_model.SGDClassifier.predict", false]], "predict() (sklearn.linear_model.sgdoneclasssvm method)": [[680, "sklearn.linear_model.SGDOneClassSVM.predict", false]], "predict() (sklearn.linear_model.sgdregressor method)": [[681, "sklearn.linear_model.SGDRegressor.predict", false]], "predict() (sklearn.linear_model.theilsenregressor method)": [[682, "sklearn.linear_model.TheilSenRegressor.predict", false]], "predict() (sklearn.linear_model.tweedieregressor method)": [[683, "sklearn.linear_model.TweedieRegressor.predict", false]], "predict() (sklearn.mixture.bayesiangaussianmixture method)": [[800, "sklearn.mixture.BayesianGaussianMixture.predict", false]], "predict() (sklearn.mixture.gaussianmixture method)": [[801, "sklearn.mixture.GaussianMixture.predict", false]], "predict() (sklearn.model_selection.fixedthresholdclassifier method)": [[802, "sklearn.model_selection.FixedThresholdClassifier.predict", false]], "predict() (sklearn.model_selection.gridsearchcv method)": [[803, "sklearn.model_selection.GridSearchCV.predict", false]], "predict() (sklearn.model_selection.halvinggridsearchcv method)": [[806, "sklearn.model_selection.HalvingGridSearchCV.predict", false]], "predict() (sklearn.model_selection.halvingrandomsearchcv method)": [[807, "sklearn.model_selection.HalvingRandomSearchCV.predict", false]], "predict() (sklearn.model_selection.randomizedsearchcv method)": [[817, "sklearn.model_selection.RandomizedSearchCV.predict", false]], "predict() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[825, "sklearn.model_selection.TunedThresholdClassifierCV.predict", false]], "predict() (sklearn.multiclass.onevsoneclassifier method)": [[835, "sklearn.multiclass.OneVsOneClassifier.predict", false]], "predict() (sklearn.multiclass.onevsrestclassifier method)": [[836, "sklearn.multiclass.OneVsRestClassifier.predict", false]], "predict() (sklearn.multiclass.outputcodeclassifier method)": [[837, "sklearn.multiclass.OutputCodeClassifier.predict", false]], "predict() (sklearn.multioutput.classifierchain method)": [[838, "sklearn.multioutput.ClassifierChain.predict", false]], "predict() (sklearn.multioutput.multioutputclassifier method)": [[839, "sklearn.multioutput.MultiOutputClassifier.predict", false]], "predict() (sklearn.multioutput.multioutputregressor method)": [[840, "sklearn.multioutput.MultiOutputRegressor.predict", false]], "predict() (sklearn.multioutput.regressorchain method)": [[841, "sklearn.multioutput.RegressorChain.predict", false]], "predict() (sklearn.naive_bayes.bernoullinb method)": [[842, "sklearn.naive_bayes.BernoulliNB.predict", false]], "predict() (sklearn.naive_bayes.categoricalnb method)": [[843, "sklearn.naive_bayes.CategoricalNB.predict", false]], "predict() (sklearn.naive_bayes.complementnb method)": [[844, "sklearn.naive_bayes.ComplementNB.predict", false]], "predict() (sklearn.naive_bayes.gaussiannb method)": [[845, "sklearn.naive_bayes.GaussianNB.predict", false]], "predict() (sklearn.naive_bayes.multinomialnb method)": [[846, "sklearn.naive_bayes.MultinomialNB.predict", false]], "predict() (sklearn.neighbors.kneighborsclassifier method)": [[849, "sklearn.neighbors.KNeighborsClassifier.predict", false]], "predict() (sklearn.neighbors.kneighborsregressor method)": [[850, "sklearn.neighbors.KNeighborsRegressor.predict", false]], "predict() (sklearn.neighbors.localoutlierfactor method)": [[853, "sklearn.neighbors.LocalOutlierFactor.predict", false]], "predict() (sklearn.neighbors.nearestcentroid method)": [[854, "sklearn.neighbors.NearestCentroid.predict", false]], "predict() (sklearn.neighbors.radiusneighborsclassifier method)": [[857, "sklearn.neighbors.RadiusNeighborsClassifier.predict", false]], "predict() (sklearn.neighbors.radiusneighborsregressor method)": [[858, "sklearn.neighbors.RadiusNeighborsRegressor.predict", false]], "predict() (sklearn.neural_network.mlpclassifier method)": [[864, "sklearn.neural_network.MLPClassifier.predict", false]], "predict() (sklearn.neural_network.mlpregressor method)": [[865, "sklearn.neural_network.MLPRegressor.predict", false]], "predict() (sklearn.pipeline.pipeline method)": [[867, "sklearn.pipeline.Pipeline.predict", false]], "predict() (sklearn.semi_supervised.labelpropagation method)": [[902, "sklearn.semi_supervised.LabelPropagation.predict", false]], "predict() (sklearn.semi_supervised.labelspreading method)": [[903, "sklearn.semi_supervised.LabelSpreading.predict", false]], "predict() (sklearn.semi_supervised.selftrainingclassifier method)": [[904, "sklearn.semi_supervised.SelfTrainingClassifier.predict", false]], "predict() (sklearn.svm.linearsvc method)": [[907, "sklearn.svm.LinearSVC.predict", false]], "predict() (sklearn.svm.linearsvr method)": [[908, "sklearn.svm.LinearSVR.predict", false]], "predict() (sklearn.svm.nusvc method)": [[909, "sklearn.svm.NuSVC.predict", false]], "predict() (sklearn.svm.nusvr method)": [[910, "sklearn.svm.NuSVR.predict", false]], "predict() (sklearn.svm.oneclasssvm method)": [[911, "sklearn.svm.OneClassSVM.predict", false]], "predict() (sklearn.svm.svc method)": [[912, "sklearn.svm.SVC.predict", false]], "predict() (sklearn.svm.svr method)": [[913, "sklearn.svm.SVR.predict", false]], "predict() (sklearn.tree.decisiontreeclassifier method)": [[915, "sklearn.tree.DecisionTreeClassifier.predict", false]], "predict() (sklearn.tree.decisiontreeregressor method)": [[916, "sklearn.tree.DecisionTreeRegressor.predict", false]], "predict() (sklearn.tree.extratreeclassifier method)": [[917, "sklearn.tree.ExtraTreeClassifier.predict", false]], "predict() (sklearn.tree.extratreeregressor method)": [[918, "sklearn.tree.ExtraTreeRegressor.predict", false]], "predict_joint_log_proba() (sklearn.naive_bayes.bernoullinb method)": [[842, "sklearn.naive_bayes.BernoulliNB.predict_joint_log_proba", false]], "predict_joint_log_proba() (sklearn.naive_bayes.categoricalnb method)": [[843, "sklearn.naive_bayes.CategoricalNB.predict_joint_log_proba", false]], "predict_joint_log_proba() (sklearn.naive_bayes.complementnb method)": [[844, "sklearn.naive_bayes.ComplementNB.predict_joint_log_proba", false]], "predict_joint_log_proba() (sklearn.naive_bayes.gaussiannb method)": [[845, "sklearn.naive_bayes.GaussianNB.predict_joint_log_proba", false]], "predict_joint_log_proba() (sklearn.naive_bayes.multinomialnb method)": [[846, "sklearn.naive_bayes.MultinomialNB.predict_joint_log_proba", false]], "predict_log_proba": [[389, "term-predict_log_proba", true]], "predict_log_proba() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[550, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_log_proba", false]], "predict_log_proba() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[551, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_log_proba", false]], "predict_log_proba() (sklearn.dummy.dummyclassifier method)": [[552, "sklearn.dummy.DummyClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.ensemble.adaboostclassifier method)": [[554, "sklearn.ensemble.AdaBoostClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.ensemble.baggingclassifier method)": [[556, "sklearn.ensemble.BaggingClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.ensemble.extratreesclassifier method)": [[558, "sklearn.ensemble.ExtraTreesClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[560, "sklearn.ensemble.GradientBoostingClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.ensemble.randomforestclassifier method)": [[565, "sklearn.ensemble.RandomForestClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.feature_selection.rfe method)": [[595, "sklearn.feature_selection.RFE.predict_log_proba", false]], "predict_log_proba() (sklearn.feature_selection.rfecv method)": [[596, "sklearn.feature_selection.RFECV.predict_log_proba", false]], "predict_log_proba() (sklearn.linear_model.logisticregression method)": [[661, "sklearn.linear_model.LogisticRegression.predict_log_proba", false]], "predict_log_proba() (sklearn.linear_model.logisticregressioncv method)": [[662, "sklearn.linear_model.LogisticRegressionCV.predict_log_proba", false]], "predict_log_proba() (sklearn.linear_model.sgdclassifier method)": [[679, "sklearn.linear_model.SGDClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.fixedthresholdclassifier method)": [[802, "sklearn.model_selection.FixedThresholdClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.gridsearchcv method)": [[803, "sklearn.model_selection.GridSearchCV.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.halvinggridsearchcv method)": [[806, "sklearn.model_selection.HalvingGridSearchCV.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.halvingrandomsearchcv method)": [[807, "sklearn.model_selection.HalvingRandomSearchCV.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.randomizedsearchcv method)": [[817, "sklearn.model_selection.RandomizedSearchCV.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[825, "sklearn.model_selection.TunedThresholdClassifierCV.predict_log_proba", false]], "predict_log_proba() (sklearn.multioutput.classifierchain method)": [[838, "sklearn.multioutput.ClassifierChain.predict_log_proba", false]], "predict_log_proba() (sklearn.naive_bayes.bernoullinb method)": [[842, "sklearn.naive_bayes.BernoulliNB.predict_log_proba", false]], "predict_log_proba() (sklearn.naive_bayes.categoricalnb method)": [[843, "sklearn.naive_bayes.CategoricalNB.predict_log_proba", false]], "predict_log_proba() (sklearn.naive_bayes.complementnb method)": [[844, "sklearn.naive_bayes.ComplementNB.predict_log_proba", false]], "predict_log_proba() (sklearn.naive_bayes.gaussiannb method)": [[845, "sklearn.naive_bayes.GaussianNB.predict_log_proba", false]], "predict_log_proba() (sklearn.naive_bayes.multinomialnb method)": [[846, "sklearn.naive_bayes.MultinomialNB.predict_log_proba", false]], "predict_log_proba() (sklearn.neighbors.nearestcentroid method)": [[854, "sklearn.neighbors.NearestCentroid.predict_log_proba", false]], "predict_log_proba() (sklearn.neural_network.mlpclassifier method)": [[864, "sklearn.neural_network.MLPClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.pipeline.pipeline method)": [[867, "sklearn.pipeline.Pipeline.predict_log_proba", false]], "predict_log_proba() (sklearn.semi_supervised.selftrainingclassifier method)": [[904, "sklearn.semi_supervised.SelfTrainingClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.svm.nusvc method)": [[909, "sklearn.svm.NuSVC.predict_log_proba", false]], "predict_log_proba() (sklearn.svm.svc method)": [[912, "sklearn.svm.SVC.predict_log_proba", false]], "predict_log_proba() (sklearn.tree.decisiontreeclassifier method)": [[915, "sklearn.tree.DecisionTreeClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.tree.extratreeclassifier method)": [[917, "sklearn.tree.ExtraTreeClassifier.predict_log_proba", false]], "predict_proba": [[389, "term-predict_proba", true]], "predict_proba() (sklearn.calibration.calibratedclassifiercv method)": [[437, "sklearn.calibration.CalibratedClassifierCV.predict_proba", false]], "predict_proba() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[550, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_proba", false]], "predict_proba() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[551, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_proba", false]], "predict_proba() (sklearn.dummy.dummyclassifier method)": [[552, "sklearn.dummy.DummyClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.adaboostclassifier method)": [[554, "sklearn.ensemble.AdaBoostClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.baggingclassifier method)": [[556, "sklearn.ensemble.BaggingClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.extratreesclassifier method)": [[558, "sklearn.ensemble.ExtraTreesClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[560, "sklearn.ensemble.GradientBoostingClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.histgradientboostingclassifier method)": [[562, "sklearn.ensemble.HistGradientBoostingClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.randomforestclassifier method)": [[565, "sklearn.ensemble.RandomForestClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.stackingclassifier method)": [[568, "sklearn.ensemble.StackingClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.votingclassifier method)": [[570, "sklearn.ensemble.VotingClassifier.predict_proba", false]], "predict_proba() (sklearn.feature_selection.rfe method)": [[595, "sklearn.feature_selection.RFE.predict_proba", false]], "predict_proba() (sklearn.feature_selection.rfecv method)": [[596, "sklearn.feature_selection.RFECV.predict_proba", false]], "predict_proba() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[613, "sklearn.gaussian_process.GaussianProcessClassifier.predict_proba", false]], "predict_proba() (sklearn.linear_model.logisticregression method)": [[661, "sklearn.linear_model.LogisticRegression.predict_proba", false]], "predict_proba() (sklearn.linear_model.logisticregressioncv method)": [[662, "sklearn.linear_model.LogisticRegressionCV.predict_proba", false]], "predict_proba() (sklearn.linear_model.sgdclassifier method)": [[679, "sklearn.linear_model.SGDClassifier.predict_proba", false]], "predict_proba() (sklearn.mixture.bayesiangaussianmixture method)": [[800, "sklearn.mixture.BayesianGaussianMixture.predict_proba", false]], "predict_proba() (sklearn.mixture.gaussianmixture method)": [[801, "sklearn.mixture.GaussianMixture.predict_proba", false]], "predict_proba() (sklearn.model_selection.fixedthresholdclassifier method)": [[802, "sklearn.model_selection.FixedThresholdClassifier.predict_proba", false]], "predict_proba() (sklearn.model_selection.gridsearchcv method)": [[803, "sklearn.model_selection.GridSearchCV.predict_proba", false]], "predict_proba() (sklearn.model_selection.halvinggridsearchcv method)": [[806, "sklearn.model_selection.HalvingGridSearchCV.predict_proba", false]], "predict_proba() (sklearn.model_selection.halvingrandomsearchcv method)": [[807, "sklearn.model_selection.HalvingRandomSearchCV.predict_proba", false]], "predict_proba() (sklearn.model_selection.randomizedsearchcv method)": [[817, "sklearn.model_selection.RandomizedSearchCV.predict_proba", false]], "predict_proba() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[825, "sklearn.model_selection.TunedThresholdClassifierCV.predict_proba", false]], "predict_proba() (sklearn.multiclass.onevsrestclassifier method)": [[836, "sklearn.multiclass.OneVsRestClassifier.predict_proba", false]], "predict_proba() (sklearn.multioutput.classifierchain method)": [[838, "sklearn.multioutput.ClassifierChain.predict_proba", false]], "predict_proba() (sklearn.multioutput.multioutputclassifier method)": [[839, "sklearn.multioutput.MultiOutputClassifier.predict_proba", false]], "predict_proba() (sklearn.naive_bayes.bernoullinb method)": [[842, "sklearn.naive_bayes.BernoulliNB.predict_proba", false]], "predict_proba() (sklearn.naive_bayes.categoricalnb method)": [[843, "sklearn.naive_bayes.CategoricalNB.predict_proba", false]], "predict_proba() (sklearn.naive_bayes.complementnb method)": [[844, "sklearn.naive_bayes.ComplementNB.predict_proba", false]], "predict_proba() (sklearn.naive_bayes.gaussiannb method)": [[845, "sklearn.naive_bayes.GaussianNB.predict_proba", false]], "predict_proba() (sklearn.naive_bayes.multinomialnb method)": [[846, "sklearn.naive_bayes.MultinomialNB.predict_proba", false]], "predict_proba() (sklearn.neighbors.kneighborsclassifier method)": [[849, "sklearn.neighbors.KNeighborsClassifier.predict_proba", false]], "predict_proba() (sklearn.neighbors.nearestcentroid method)": [[854, "sklearn.neighbors.NearestCentroid.predict_proba", false]], "predict_proba() (sklearn.neighbors.radiusneighborsclassifier method)": [[857, "sklearn.neighbors.RadiusNeighborsClassifier.predict_proba", false]], "predict_proba() (sklearn.neural_network.mlpclassifier method)": [[864, "sklearn.neural_network.MLPClassifier.predict_proba", false]], "predict_proba() (sklearn.pipeline.pipeline method)": [[867, "sklearn.pipeline.Pipeline.predict_proba", false]], "predict_proba() (sklearn.semi_supervised.labelpropagation method)": [[902, "sklearn.semi_supervised.LabelPropagation.predict_proba", false]], "predict_proba() (sklearn.semi_supervised.labelspreading method)": [[903, "sklearn.semi_supervised.LabelSpreading.predict_proba", false]], "predict_proba() (sklearn.semi_supervised.selftrainingclassifier method)": [[904, "sklearn.semi_supervised.SelfTrainingClassifier.predict_proba", false]], "predict_proba() (sklearn.svm.nusvc method)": [[909, "sklearn.svm.NuSVC.predict_proba", false]], "predict_proba() (sklearn.svm.svc method)": [[912, "sklearn.svm.SVC.predict_proba", false]], "predict_proba() (sklearn.tree.decisiontreeclassifier method)": [[915, "sklearn.tree.DecisionTreeClassifier.predict_proba", false]], "predict_proba() (sklearn.tree.extratreeclassifier method)": [[917, "sklearn.tree.ExtraTreeClassifier.predict_proba", false]], "predictionerrordisplay (class in sklearn.metrics)": [[704, "sklearn.metrics.PredictionErrorDisplay", false]], "predictor": [[389, "term-predictor", true]], "predictors": [[389, "term-predictors", true]], "print_progress() (sklearn.utils.parallel.parallel method)": [[969, "sklearn.utils.parallel.Parallel.print_progress", false]], "proba_ (sklearn.svm.nusvc property)": [[909, "sklearn.svm.NuSVC.probA_", false]], "proba_ (sklearn.svm.svc property)": [[912, "sklearn.svm.SVC.probA_", false]], "probb_ (sklearn.svm.nusvc property)": [[909, "sklearn.svm.NuSVC.probB_", false]], "probb_ (sklearn.svm.svc property)": [[912, "sklearn.svm.SVC.probB_", false]], "process_routing() (in module sklearn.utils.metadata_routing)": [[963, "sklearn.utils.metadata_routing.process_routing", false]], "product (class in sklearn.gaussian_process.kernels)": [[624, "sklearn.gaussian_process.kernels.Product", false]], "quadraticdiscriminantanalysis (class in sklearn.discriminant_analysis)": [[551, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis", false]], "quantile_transform() (in module sklearn.preprocessing)": [[896, "sklearn.preprocessing.quantile_transform", false]], "quantileregressor (class in sklearn.linear_model)": [[673, "sklearn.linear_model.QuantileRegressor", false]], "quantiletransformer (class in sklearn.preprocessing)": [[884, "sklearn.preprocessing.QuantileTransformer", false]], "query() (sklearn.neighbors.balltree method)": [[847, "sklearn.neighbors.BallTree.query", false]], "query() (sklearn.neighbors.kdtree method)": [[848, "sklearn.neighbors.KDTree.query", false]], "query_radius() (sklearn.neighbors.balltree method)": [[847, "sklearn.neighbors.BallTree.query_radius", false]], "query_radius() (sklearn.neighbors.kdtree method)": [[848, "sklearn.neighbors.KDTree.query_radius", false]], "r2_score() (in module sklearn.metrics)": [[788, "sklearn.metrics.r2_score", false]], "r_regression() (in module sklearn.feature_selection)": [[611, "sklearn.feature_selection.r_regression", false]], "radius_neighbors() (sklearn.neighbors.nearestneighbors method)": [[855, "sklearn.neighbors.NearestNeighbors.radius_neighbors", false]], "radius_neighbors() (sklearn.neighbors.radiusneighborsclassifier method)": [[857, "sklearn.neighbors.RadiusNeighborsClassifier.radius_neighbors", false]], "radius_neighbors() (sklearn.neighbors.radiusneighborsregressor method)": [[858, "sklearn.neighbors.RadiusNeighborsRegressor.radius_neighbors", false]], "radius_neighbors() (sklearn.neighbors.radiusneighborstransformer method)": [[859, "sklearn.neighbors.RadiusNeighborsTransformer.radius_neighbors", false]], "radius_neighbors_graph() (in module sklearn.neighbors)": [[861, "sklearn.neighbors.radius_neighbors_graph", false]], "radius_neighbors_graph() (sklearn.neighbors.nearestneighbors method)": [[855, "sklearn.neighbors.NearestNeighbors.radius_neighbors_graph", false]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborsclassifier method)": [[857, "sklearn.neighbors.RadiusNeighborsClassifier.radius_neighbors_graph", false]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborsregressor method)": [[858, "sklearn.neighbors.RadiusNeighborsRegressor.radius_neighbors_graph", false]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborstransformer method)": [[859, "sklearn.neighbors.RadiusNeighborsTransformer.radius_neighbors_graph", false]], "radiusneighborsclassifier (class in sklearn.neighbors)": [[857, "sklearn.neighbors.RadiusNeighborsClassifier", false]], "radiusneighborsregressor (class in sklearn.neighbors)": [[858, "sklearn.neighbors.RadiusNeighborsRegressor", false]], "radiusneighborstransformer (class in sklearn.neighbors)": [[859, "sklearn.neighbors.RadiusNeighborsTransformer", false]], "rand_score() (in module sklearn.metrics)": [[789, "sklearn.metrics.rand_score", false]], "random_state": [[389, "term-random_state", true]], "randomforestclassifier (class in sklearn.ensemble)": [[565, "sklearn.ensemble.RandomForestClassifier", false]], "randomforestregressor (class in sklearn.ensemble)": [[566, "sklearn.ensemble.RandomForestRegressor", false]], "randomized_range_finder() (in module sklearn.utils.extmath)": [[950, "sklearn.utils.extmath.randomized_range_finder", false]], "randomized_svd() (in module sklearn.utils.extmath)": [[951, "sklearn.utils.extmath.randomized_svd", false]], "randomizedsearchcv (class in sklearn.model_selection)": [[817, "sklearn.model_selection.RandomizedSearchCV", false]], "randomtreesembedding (class in sklearn.ensemble)": [[567, "sklearn.ensemble.RandomTreesEmbedding", false]], "ransacregressor (class in sklearn.linear_model)": [[674, "sklearn.linear_model.RANSACRegressor", false]], "rationalquadratic (class in sklearn.gaussian_process.kernels)": [[626, "sklearn.gaussian_process.kernels.RationalQuadratic", false]], "rbf (class in sklearn.gaussian_process.kernels)": [[625, "sklearn.gaussian_process.kernels.RBF", false]], "rbf_kernel() (in module sklearn.metrics.pairwise)": [[779, "sklearn.metrics.pairwise.rbf_kernel", false]], "rbfsampler (class in sklearn.kernel_approximation)": [[644, "sklearn.kernel_approximation.RBFSampler", false]], "recall_score() (in module sklearn.metrics)": [[790, "sklearn.metrics.recall_score", false]], "reconstruct_from_patches_2d() (in module sklearn.feature_extraction.image)": [[589, "sklearn.feature_extraction.image.reconstruct_from_patches_2d", false]], "reconstruction_error() (sklearn.manifold.isomap method)": [[691, "sklearn.manifold.Isomap.reconstruction_error", false]], "rectangular": [[389, "term-rectangular", true]], "register_parallel_backend() (in module sklearn.utils)": [[973, "sklearn.utils.register_parallel_backend", false]], "regressor": [[389, "term-regressor", true]], "regressorchain (class in sklearn.multioutput)": [[841, "sklearn.multioutput.RegressorChain", false]], "regressormixin (class in sklearn.base)": [[430, "sklearn.base.RegressorMixin", false]], "regressors": [[389, "term-regressors", true]], "regressortags (class in sklearn.utils)": [[925, "sklearn.utils.RegressorTags", false]], "repeatedkfold (class in sklearn.model_selection)": [[818, "sklearn.model_selection.RepeatedKFold", false]], "repeatedstratifiedkfold (class in sklearn.model_selection)": [[819, "sklearn.model_selection.RepeatedStratifiedKFold", false]], "requires_vector_input (sklearn.gaussian_process.kernels.compoundkernel property)": [[615, "sklearn.gaussian_process.kernels.CompoundKernel.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.constantkernel property)": [[616, "sklearn.gaussian_process.kernels.ConstantKernel.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.dotproduct property)": [[617, "sklearn.gaussian_process.kernels.DotProduct.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.exponentiation property)": [[619, "sklearn.gaussian_process.kernels.Exponentiation.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.expsinesquared property)": [[618, "sklearn.gaussian_process.kernels.ExpSineSquared.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.kernel property)": [[621, "sklearn.gaussian_process.kernels.Kernel.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.matern property)": [[622, "sklearn.gaussian_process.kernels.Matern.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.pairwisekernel property)": [[623, "sklearn.gaussian_process.kernels.PairwiseKernel.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.product property)": [[624, "sklearn.gaussian_process.kernels.Product.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.rationalquadratic property)": [[626, "sklearn.gaussian_process.kernels.RationalQuadratic.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.rbf property)": [[625, "sklearn.gaussian_process.kernels.RBF.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.sum property)": [[627, "sklearn.gaussian_process.kernels.Sum.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.whitekernel property)": [[628, "sklearn.gaussian_process.kernels.WhiteKernel.requires_vector_input", false]], "resample() (in module sklearn.utils)": [[974, "sklearn.utils.resample", false]], "reset_n_calls() (sklearn.neighbors.balltree method)": [[847, "sklearn.neighbors.BallTree.reset_n_calls", false]], "reset_n_calls() (sklearn.neighbors.kdtree method)": [[848, "sklearn.neighbors.KDTree.reset_n_calls", false]], "restrict() (sklearn.feature_extraction.dictvectorizer method)": [[583, "sklearn.feature_extraction.DictVectorizer.restrict", false]], "reweight_covariance() (sklearn.covariance.ellipticenvelope method)": [[469, "sklearn.covariance.EllipticEnvelope.reweight_covariance", false]], "reweight_covariance() (sklearn.covariance.mincovdet method)": [[474, "sklearn.covariance.MinCovDet.reweight_covariance", false]], "rfe (class in sklearn.feature_selection)": [[595, "sklearn.feature_selection.RFE", false]], "rfecv (class in sklearn.feature_selection)": [[596, "sklearn.feature_selection.RFECV", false]], "ridge (class in sklearn.linear_model)": [[675, "sklearn.linear_model.Ridge", false]], "ridge_regression() (in module sklearn.linear_model)": [[690, "sklearn.linear_model.ridge_regression", false]], "ridgeclassifier (class in sklearn.linear_model)": [[677, "sklearn.linear_model.RidgeClassifier", false]], "ridgeclassifiercv (class in sklearn.linear_model)": [[678, "sklearn.linear_model.RidgeClassifierCV", false]], "ridgecv (class in sklearn.linear_model)": [[676, "sklearn.linear_model.RidgeCV", false]], "robust_scale() (in module sklearn.preprocessing)": [[897, "sklearn.preprocessing.robust_scale", false]], "robustscaler (class in sklearn.preprocessing)": [[885, "sklearn.preprocessing.RobustScaler", false]], "roc_auc_score() (in module sklearn.metrics)": [[791, "sklearn.metrics.roc_auc_score", false]], "roc_curve() (in module sklearn.metrics)": [[792, "sklearn.metrics.roc_curve", false]], "roccurvedisplay (class in sklearn.metrics)": [[705, "sklearn.metrics.RocCurveDisplay", false]], "root_mean_squared_error() (in module sklearn.metrics)": [[793, "sklearn.metrics.root_mean_squared_error", false]], "root_mean_squared_log_error() (in module sklearn.metrics)": [[794, "sklearn.metrics.root_mean_squared_log_error", false]], "route_params() (sklearn.utils.metadata_routing.metadatarouter method)": [[960, "sklearn.utils.metadata_routing.MetadataRouter.route_params", false]], "router": [[389, "term-router", true]], "safe_mask() (in module sklearn.utils)": [[975, "sklearn.utils.safe_mask", false]], "safe_sparse_dot() (in module sklearn.utils.extmath)": [[952, "sklearn.utils.extmath.safe_sparse_dot", false]], "safe_sqr() (in module sklearn.utils)": [[976, "sklearn.utils.safe_sqr", false]], "sample": [[389, "term-sample", true]], "sample properties": [[389, "term-sample-properties", true]], "sample property": [[389, "term-sample-property", true]], "sample() (sklearn.mixture.bayesiangaussianmixture method)": [[800, "sklearn.mixture.BayesianGaussianMixture.sample", false]], "sample() (sklearn.mixture.gaussianmixture method)": [[801, "sklearn.mixture.GaussianMixture.sample", false]], "sample() (sklearn.neighbors.kerneldensity method)": [[852, "sklearn.neighbors.KernelDensity.sample", false]], "sample_weight": [[389, "term-sample_weight", true]], "sample_without_replacement() (in module sklearn.utils.random)": [[972, "sklearn.utils.random.sample_without_replacement", false]], "sample_y() (sklearn.gaussian_process.gaussianprocessregressor method)": [[614, "sklearn.gaussian_process.GaussianProcessRegressor.sample_y", false]], "samples": [[389, "term-samples", true]], "scale() (in module sklearn.preprocessing)": [[898, "sklearn.preprocessing.scale", false]], "scikit-learn enhancement proposals": [[389, "term-scikit-learn-enhancement-proposals", true]], "scikit-learn-contrib": [[389, "term-scikit-learn-contrib", true]], "score": [[389, "term-score", true]], "score() (sklearn.base.classifiermixin method)": [[424, "sklearn.base.ClassifierMixin.score", false]], "score() (sklearn.base.densitymixin method)": [[426, "sklearn.base.DensityMixin.score", false]], "score() (sklearn.base.regressormixin method)": [[430, "sklearn.base.RegressorMixin.score", false]], "score() (sklearn.calibration.calibratedclassifiercv method)": [[437, "sklearn.calibration.CalibratedClassifierCV.score", false]], "score() (sklearn.cluster.bisectingkmeans method)": [[443, "sklearn.cluster.BisectingKMeans.score", false]], "score() (sklearn.cluster.kmeans method)": [[447, "sklearn.cluster.KMeans.score", false]], "score() (sklearn.cluster.minibatchkmeans method)": [[449, "sklearn.cluster.MiniBatchKMeans.score", false]], "score() (sklearn.compose.transformedtargetregressor method)": [[465, "sklearn.compose.TransformedTargetRegressor.score", false]], "score() (sklearn.covariance.ellipticenvelope method)": [[469, "sklearn.covariance.EllipticEnvelope.score", false]], "score() (sklearn.covariance.empiricalcovariance method)": [[470, "sklearn.covariance.EmpiricalCovariance.score", false]], "score() (sklearn.covariance.graphicallasso method)": [[471, "sklearn.covariance.GraphicalLasso.score", false]], "score() (sklearn.covariance.graphicallassocv method)": [[472, "sklearn.covariance.GraphicalLassoCV.score", false]], "score() (sklearn.covariance.ledoitwolf method)": [[473, "sklearn.covariance.LedoitWolf.score", false]], "score() (sklearn.covariance.mincovdet method)": [[474, "sklearn.covariance.MinCovDet.score", false]], "score() (sklearn.covariance.oas method)": [[475, "sklearn.covariance.OAS.score", false]], "score() (sklearn.covariance.shrunkcovariance method)": [[476, "sklearn.covariance.ShrunkCovariance.score", false]], "score() (sklearn.cross_decomposition.cca method)": [[482, "sklearn.cross_decomposition.CCA.score", false]], "score() (sklearn.cross_decomposition.plscanonical method)": [[483, "sklearn.cross_decomposition.PLSCanonical.score", false]], "score() (sklearn.cross_decomposition.plsregression method)": [[484, "sklearn.cross_decomposition.PLSRegression.score", false]], "score() (sklearn.decomposition.factoranalysis method)": [[533, "sklearn.decomposition.FactorAnalysis.score", false]], "score() (sklearn.decomposition.latentdirichletallocation method)": [[537, "sklearn.decomposition.LatentDirichletAllocation.score", false]], "score() (sklearn.decomposition.pca method)": [[542, "sklearn.decomposition.PCA.score", false]], "score() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[550, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.score", false]], "score() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[551, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.score", false]], "score() (sklearn.dummy.dummyclassifier method)": [[552, "sklearn.dummy.DummyClassifier.score", false]], "score() (sklearn.dummy.dummyregressor method)": [[553, "sklearn.dummy.DummyRegressor.score", false]], "score() (sklearn.ensemble.adaboostclassifier method)": [[554, "sklearn.ensemble.AdaBoostClassifier.score", false]], "score() (sklearn.ensemble.adaboostregressor method)": [[555, "sklearn.ensemble.AdaBoostRegressor.score", false]], "score() (sklearn.ensemble.baggingclassifier method)": [[556, "sklearn.ensemble.BaggingClassifier.score", false]], "score() (sklearn.ensemble.baggingregressor method)": [[557, "sklearn.ensemble.BaggingRegressor.score", false]], "score() (sklearn.ensemble.extratreesclassifier method)": [[558, "sklearn.ensemble.ExtraTreesClassifier.score", false]], "score() (sklearn.ensemble.extratreesregressor method)": [[559, "sklearn.ensemble.ExtraTreesRegressor.score", false]], "score() (sklearn.ensemble.gradientboostingclassifier method)": [[560, "sklearn.ensemble.GradientBoostingClassifier.score", false]], "score() (sklearn.ensemble.gradientboostingregressor method)": [[561, "sklearn.ensemble.GradientBoostingRegressor.score", false]], "score() (sklearn.ensemble.histgradientboostingclassifier method)": [[562, "sklearn.ensemble.HistGradientBoostingClassifier.score", false]], "score() (sklearn.ensemble.histgradientboostingregressor method)": [[563, "sklearn.ensemble.HistGradientBoostingRegressor.score", false]], "score() (sklearn.ensemble.randomforestclassifier method)": [[565, "sklearn.ensemble.RandomForestClassifier.score", false]], "score() (sklearn.ensemble.randomforestregressor method)": [[566, "sklearn.ensemble.RandomForestRegressor.score", false]], "score() (sklearn.ensemble.stackingclassifier method)": [[568, "sklearn.ensemble.StackingClassifier.score", false]], "score() (sklearn.ensemble.stackingregressor method)": [[569, "sklearn.ensemble.StackingRegressor.score", false]], "score() (sklearn.ensemble.votingclassifier method)": [[570, "sklearn.ensemble.VotingClassifier.score", false]], "score() (sklearn.ensemble.votingregressor method)": [[571, "sklearn.ensemble.VotingRegressor.score", false]], "score() (sklearn.feature_selection.rfe method)": [[595, "sklearn.feature_selection.RFE.score", false]], "score() (sklearn.feature_selection.rfecv method)": [[596, "sklearn.feature_selection.RFECV.score", false]], "score() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[613, "sklearn.gaussian_process.GaussianProcessClassifier.score", false]], "score() (sklearn.gaussian_process.gaussianprocessregressor method)": [[614, "sklearn.gaussian_process.GaussianProcessRegressor.score", false]], "score() (sklearn.isotonic.isotonicregression method)": [[638, "sklearn.isotonic.IsotonicRegression.score", false]], "score() (sklearn.kernel_ridge.kernelridge method)": [[646, "sklearn.kernel_ridge.KernelRidge.score", false]], "score() (sklearn.linear_model.ardregression method)": [[647, "sklearn.linear_model.ARDRegression.score", false]], "score() (sklearn.linear_model.bayesianridge method)": [[648, "sklearn.linear_model.BayesianRidge.score", false]], "score() (sklearn.linear_model.elasticnet method)": [[649, "sklearn.linear_model.ElasticNet.score", false]], "score() (sklearn.linear_model.elasticnetcv method)": [[650, "sklearn.linear_model.ElasticNetCV.score", false]], "score() (sklearn.linear_model.gammaregressor method)": [[651, "sklearn.linear_model.GammaRegressor.score", false]], "score() (sklearn.linear_model.huberregressor method)": [[652, "sklearn.linear_model.HuberRegressor.score", false]], "score() (sklearn.linear_model.lars method)": [[653, "sklearn.linear_model.Lars.score", false]], "score() (sklearn.linear_model.larscv method)": [[654, "sklearn.linear_model.LarsCV.score", false]], "score() (sklearn.linear_model.lasso method)": [[655, "sklearn.linear_model.Lasso.score", false]], "score() (sklearn.linear_model.lassocv method)": [[656, "sklearn.linear_model.LassoCV.score", false]], "score() (sklearn.linear_model.lassolars method)": [[657, "sklearn.linear_model.LassoLars.score", false]], "score() (sklearn.linear_model.lassolarscv method)": [[658, "sklearn.linear_model.LassoLarsCV.score", false]], "score() (sklearn.linear_model.lassolarsic method)": [[659, "sklearn.linear_model.LassoLarsIC.score", false]], "score() (sklearn.linear_model.linearregression method)": [[660, "sklearn.linear_model.LinearRegression.score", false]], "score() (sklearn.linear_model.logisticregression method)": [[661, "sklearn.linear_model.LogisticRegression.score", false]], "score() (sklearn.linear_model.logisticregressioncv method)": [[662, "sklearn.linear_model.LogisticRegressionCV.score", false]], "score() (sklearn.linear_model.multitaskelasticnet method)": [[663, "sklearn.linear_model.MultiTaskElasticNet.score", false]], "score() (sklearn.linear_model.multitaskelasticnetcv method)": [[664, "sklearn.linear_model.MultiTaskElasticNetCV.score", false]], "score() (sklearn.linear_model.multitasklasso method)": [[665, "sklearn.linear_model.MultiTaskLasso.score", false]], "score() (sklearn.linear_model.multitasklassocv method)": [[666, "sklearn.linear_model.MultiTaskLassoCV.score", false]], "score() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[667, "sklearn.linear_model.OrthogonalMatchingPursuit.score", false]], "score() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[668, "sklearn.linear_model.OrthogonalMatchingPursuitCV.score", false]], "score() (sklearn.linear_model.passiveaggressiveclassifier method)": [[669, "sklearn.linear_model.PassiveAggressiveClassifier.score", false]], "score() (sklearn.linear_model.passiveaggressiveregressor method)": [[670, "sklearn.linear_model.PassiveAggressiveRegressor.score", false]], "score() (sklearn.linear_model.perceptron method)": [[671, "sklearn.linear_model.Perceptron.score", false]], "score() (sklearn.linear_model.poissonregressor method)": [[672, "sklearn.linear_model.PoissonRegressor.score", false]], "score() (sklearn.linear_model.quantileregressor method)": [[673, "sklearn.linear_model.QuantileRegressor.score", false]], "score() (sklearn.linear_model.ransacregressor method)": [[674, "sklearn.linear_model.RANSACRegressor.score", false]], "score() (sklearn.linear_model.ridge method)": [[675, "sklearn.linear_model.Ridge.score", false]], "score() (sklearn.linear_model.ridgeclassifier method)": [[677, "sklearn.linear_model.RidgeClassifier.score", false]], "score() (sklearn.linear_model.ridgeclassifiercv method)": [[678, "sklearn.linear_model.RidgeClassifierCV.score", false]], "score() (sklearn.linear_model.ridgecv method)": [[676, "sklearn.linear_model.RidgeCV.score", false]], "score() (sklearn.linear_model.sgdclassifier method)": [[679, "sklearn.linear_model.SGDClassifier.score", false]], "score() (sklearn.linear_model.sgdregressor method)": [[681, "sklearn.linear_model.SGDRegressor.score", false]], "score() (sklearn.linear_model.theilsenregressor method)": [[682, "sklearn.linear_model.TheilSenRegressor.score", false]], "score() (sklearn.linear_model.tweedieregressor method)": [[683, "sklearn.linear_model.TweedieRegressor.score", false]], "score() (sklearn.mixture.bayesiangaussianmixture method)": [[800, "sklearn.mixture.BayesianGaussianMixture.score", false]], "score() (sklearn.mixture.gaussianmixture method)": [[801, "sklearn.mixture.GaussianMixture.score", false]], "score() (sklearn.model_selection.fixedthresholdclassifier method)": [[802, "sklearn.model_selection.FixedThresholdClassifier.score", false]], "score() (sklearn.model_selection.gridsearchcv method)": [[803, "sklearn.model_selection.GridSearchCV.score", false]], "score() (sklearn.model_selection.halvinggridsearchcv method)": [[806, "sklearn.model_selection.HalvingGridSearchCV.score", false]], "score() (sklearn.model_selection.halvingrandomsearchcv method)": [[807, "sklearn.model_selection.HalvingRandomSearchCV.score", false]], "score() (sklearn.model_selection.randomizedsearchcv method)": [[817, "sklearn.model_selection.RandomizedSearchCV.score", false]], "score() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[825, "sklearn.model_selection.TunedThresholdClassifierCV.score", false]], "score() (sklearn.multiclass.onevsoneclassifier method)": [[835, "sklearn.multiclass.OneVsOneClassifier.score", false]], "score() (sklearn.multiclass.onevsrestclassifier method)": [[836, "sklearn.multiclass.OneVsRestClassifier.score", false]], "score() (sklearn.multiclass.outputcodeclassifier method)": [[837, "sklearn.multiclass.OutputCodeClassifier.score", false]], "score() (sklearn.multioutput.classifierchain method)": [[838, "sklearn.multioutput.ClassifierChain.score", false]], "score() (sklearn.multioutput.multioutputclassifier method)": [[839, "sklearn.multioutput.MultiOutputClassifier.score", false]], "score() (sklearn.multioutput.multioutputregressor method)": [[840, "sklearn.multioutput.MultiOutputRegressor.score", false]], "score() (sklearn.multioutput.regressorchain method)": [[841, "sklearn.multioutput.RegressorChain.score", false]], "score() (sklearn.naive_bayes.bernoullinb method)": [[842, "sklearn.naive_bayes.BernoulliNB.score", false]], "score() (sklearn.naive_bayes.categoricalnb method)": [[843, "sklearn.naive_bayes.CategoricalNB.score", false]], "score() (sklearn.naive_bayes.complementnb method)": [[844, "sklearn.naive_bayes.ComplementNB.score", false]], "score() (sklearn.naive_bayes.gaussiannb method)": [[845, "sklearn.naive_bayes.GaussianNB.score", false]], "score() (sklearn.naive_bayes.multinomialnb method)": [[846, "sklearn.naive_bayes.MultinomialNB.score", false]], "score() (sklearn.neighbors.kerneldensity method)": [[852, "sklearn.neighbors.KernelDensity.score", false]], "score() (sklearn.neighbors.kneighborsclassifier method)": [[849, "sklearn.neighbors.KNeighborsClassifier.score", false]], "score() (sklearn.neighbors.kneighborsregressor method)": [[850, "sklearn.neighbors.KNeighborsRegressor.score", false]], "score() (sklearn.neighbors.nearestcentroid method)": [[854, "sklearn.neighbors.NearestCentroid.score", false]], "score() (sklearn.neighbors.radiusneighborsclassifier method)": [[857, "sklearn.neighbors.RadiusNeighborsClassifier.score", false]], "score() (sklearn.neighbors.radiusneighborsregressor method)": [[858, "sklearn.neighbors.RadiusNeighborsRegressor.score", false]], "score() (sklearn.neural_network.mlpclassifier method)": [[864, "sklearn.neural_network.MLPClassifier.score", false]], "score() (sklearn.neural_network.mlpregressor method)": [[865, "sklearn.neural_network.MLPRegressor.score", false]], "score() (sklearn.pipeline.pipeline method)": [[867, "sklearn.pipeline.Pipeline.score", false]], "score() (sklearn.semi_supervised.labelpropagation method)": [[902, "sklearn.semi_supervised.LabelPropagation.score", false]], "score() (sklearn.semi_supervised.labelspreading method)": [[903, "sklearn.semi_supervised.LabelSpreading.score", false]], "score() (sklearn.semi_supervised.selftrainingclassifier method)": [[904, "sklearn.semi_supervised.SelfTrainingClassifier.score", false]], "score() (sklearn.svm.linearsvc method)": [[907, "sklearn.svm.LinearSVC.score", false]], "score() (sklearn.svm.linearsvr method)": [[908, "sklearn.svm.LinearSVR.score", false]], "score() (sklearn.svm.nusvc method)": [[909, "sklearn.svm.NuSVC.score", false]], "score() (sklearn.svm.nusvr method)": [[910, "sklearn.svm.NuSVR.score", false]], "score() (sklearn.svm.svc method)": [[912, "sklearn.svm.SVC.score", false]], "score() (sklearn.svm.svr method)": [[913, "sklearn.svm.SVR.score", false]], "score() (sklearn.tree.decisiontreeclassifier method)": [[915, "sklearn.tree.DecisionTreeClassifier.score", false]], "score() (sklearn.tree.decisiontreeregressor method)": [[916, "sklearn.tree.DecisionTreeRegressor.score", false]], "score() (sklearn.tree.extratreeclassifier method)": [[917, "sklearn.tree.ExtraTreeClassifier.score", false]], "score() (sklearn.tree.extratreeregressor method)": [[918, "sklearn.tree.ExtraTreeRegressor.score", false]], "score_samples": [[389, "term-score_samples", true]], "score_samples() (sklearn.covariance.ellipticenvelope method)": [[469, "sklearn.covariance.EllipticEnvelope.score_samples", false]], "score_samples() (sklearn.decomposition.factoranalysis method)": [[533, "sklearn.decomposition.FactorAnalysis.score_samples", false]], "score_samples() (sklearn.decomposition.pca method)": [[542, "sklearn.decomposition.PCA.score_samples", false]], "score_samples() (sklearn.ensemble.isolationforest method)": [[564, "sklearn.ensemble.IsolationForest.score_samples", false]], "score_samples() (sklearn.linear_model.sgdoneclasssvm method)": [[680, "sklearn.linear_model.SGDOneClassSVM.score_samples", false]], "score_samples() (sklearn.mixture.bayesiangaussianmixture method)": [[800, "sklearn.mixture.BayesianGaussianMixture.score_samples", false]], "score_samples() (sklearn.mixture.gaussianmixture method)": [[801, "sklearn.mixture.GaussianMixture.score_samples", false]], "score_samples() (sklearn.model_selection.gridsearchcv method)": [[803, "sklearn.model_selection.GridSearchCV.score_samples", false]], "score_samples() (sklearn.model_selection.halvinggridsearchcv method)": [[806, "sklearn.model_selection.HalvingGridSearchCV.score_samples", false]], "score_samples() (sklearn.model_selection.halvingrandomsearchcv method)": [[807, "sklearn.model_selection.HalvingRandomSearchCV.score_samples", false]], "score_samples() (sklearn.model_selection.randomizedsearchcv method)": [[817, "sklearn.model_selection.RandomizedSearchCV.score_samples", false]], "score_samples() (sklearn.neighbors.kerneldensity method)": [[852, "sklearn.neighbors.KernelDensity.score_samples", false]], "score_samples() (sklearn.neighbors.localoutlierfactor method)": [[853, "sklearn.neighbors.LocalOutlierFactor.score_samples", false]], "score_samples() (sklearn.neural_network.bernoullirbm method)": [[863, "sklearn.neural_network.BernoulliRBM.score_samples", false]], "score_samples() (sklearn.pipeline.pipeline method)": [[867, "sklearn.pipeline.Pipeline.score_samples", false]], "score_samples() (sklearn.svm.oneclasssvm method)": [[911, "sklearn.svm.OneClassSVM.score_samples", false]], "scorer": [[389, "term-scorer", true]], "scoring": [[389, "term-scoring", true]], "selectfdr (class in sklearn.feature_selection)": [[597, "sklearn.feature_selection.SelectFdr", false]], "selectfpr (class in sklearn.feature_selection)": [[598, "sklearn.feature_selection.SelectFpr", false]], "selectfrommodel (class in sklearn.feature_selection)": [[599, "sklearn.feature_selection.SelectFromModel", false]], "selectfwe (class in sklearn.feature_selection)": [[600, "sklearn.feature_selection.SelectFwe", false]], "selectkbest (class in sklearn.feature_selection)": [[601, "sklearn.feature_selection.SelectKBest", false]], "selectormixin (class in sklearn.feature_selection)": [[603, "sklearn.feature_selection.SelectorMixin", false]], "selectpercentile (class in sklearn.feature_selection)": [[602, "sklearn.feature_selection.SelectPercentile", false]], "selftrainingclassifier (class in sklearn.semi_supervised)": [[904, "sklearn.semi_supervised.SelfTrainingClassifier", false]], "semi-supervised": [[389, "term-semi-supervised", true]], "semi-supervised learning": [[389, "term-semi-supervised-learning", true]], "semisupervised": [[389, "term-semisupervised", true]], "sequentialfeatureselector (class in sklearn.feature_selection)": [[604, "sklearn.feature_selection.SequentialFeatureSelector", false]], "set_config() (in module sklearn)": [[905, "sklearn.set_config", false]], "set_fit_request() (sklearn.calibration.calibratedclassifiercv method)": [[437, "sklearn.calibration.CalibratedClassifierCV.set_fit_request", false]], "set_fit_request() (sklearn.cluster.bisectingkmeans method)": [[443, "sklearn.cluster.BisectingKMeans.set_fit_request", false]], "set_fit_request() (sklearn.cluster.dbscan method)": [[444, "sklearn.cluster.DBSCAN.set_fit_request", false]], "set_fit_request() (sklearn.cluster.kmeans method)": [[447, "sklearn.cluster.KMeans.set_fit_request", false]], "set_fit_request() (sklearn.cluster.minibatchkmeans method)": [[449, "sklearn.cluster.MiniBatchKMeans.set_fit_request", false]], "set_fit_request() (sklearn.dummy.dummyclassifier method)": [[552, "sklearn.dummy.DummyClassifier.set_fit_request", false]], "set_fit_request() (sklearn.dummy.dummyregressor method)": [[553, "sklearn.dummy.DummyRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.adaboostclassifier method)": [[554, "sklearn.ensemble.AdaBoostClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.adaboostregressor method)": [[555, "sklearn.ensemble.AdaBoostRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.baggingclassifier method)": [[556, "sklearn.ensemble.BaggingClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.baggingregressor method)": [[557, "sklearn.ensemble.BaggingRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.extratreesclassifier method)": [[558, "sklearn.ensemble.ExtraTreesClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.extratreesregressor method)": [[559, "sklearn.ensemble.ExtraTreesRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.gradientboostingclassifier method)": [[560, "sklearn.ensemble.GradientBoostingClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.gradientboostingregressor method)": [[561, "sklearn.ensemble.GradientBoostingRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.histgradientboostingclassifier method)": [[562, "sklearn.ensemble.HistGradientBoostingClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.histgradientboostingregressor method)": [[563, "sklearn.ensemble.HistGradientBoostingRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.isolationforest method)": [[564, "sklearn.ensemble.IsolationForest.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.randomforestclassifier method)": [[565, "sklearn.ensemble.RandomForestClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.randomforestregressor method)": [[566, "sklearn.ensemble.RandomForestRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.randomtreesembedding method)": [[567, "sklearn.ensemble.RandomTreesEmbedding.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.stackingclassifier method)": [[568, "sklearn.ensemble.StackingClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.stackingregressor method)": [[569, "sklearn.ensemble.StackingRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.votingclassifier method)": [[570, "sklearn.ensemble.VotingClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.votingregressor method)": [[571, "sklearn.ensemble.VotingRegressor.set_fit_request", false]], "set_fit_request() (sklearn.isotonic.isotonicregression method)": [[638, "sklearn.isotonic.IsotonicRegression.set_fit_request", false]], "set_fit_request() (sklearn.kernel_ridge.kernelridge method)": [[646, "sklearn.kernel_ridge.KernelRidge.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.bayesianridge method)": [[648, "sklearn.linear_model.BayesianRidge.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.elasticnet method)": [[649, "sklearn.linear_model.ElasticNet.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.elasticnetcv method)": [[650, "sklearn.linear_model.ElasticNetCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.gammaregressor method)": [[651, "sklearn.linear_model.GammaRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.huberregressor method)": [[652, "sklearn.linear_model.HuberRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lars method)": [[653, "sklearn.linear_model.Lars.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.larscv method)": [[654, "sklearn.linear_model.LarsCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lasso method)": [[655, "sklearn.linear_model.Lasso.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lassocv method)": [[656, "sklearn.linear_model.LassoCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lassolars method)": [[657, "sklearn.linear_model.LassoLars.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lassolarscv method)": [[658, "sklearn.linear_model.LassoLarsCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lassolarsic method)": [[659, "sklearn.linear_model.LassoLarsIC.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.linearregression method)": [[660, "sklearn.linear_model.LinearRegression.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.logisticregression method)": [[661, "sklearn.linear_model.LogisticRegression.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.logisticregressioncv method)": [[662, "sklearn.linear_model.LogisticRegressionCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.multitaskelasticnet method)": [[663, "sklearn.linear_model.MultiTaskElasticNet.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.multitaskelasticnetcv method)": [[664, "sklearn.linear_model.MultiTaskElasticNetCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.multitasklasso method)": [[665, "sklearn.linear_model.MultiTaskLasso.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.multitasklassocv method)": [[666, "sklearn.linear_model.MultiTaskLassoCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.passiveaggressiveclassifier method)": [[669, "sklearn.linear_model.PassiveAggressiveClassifier.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.passiveaggressiveregressor method)": [[670, "sklearn.linear_model.PassiveAggressiveRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.perceptron method)": [[671, "sklearn.linear_model.Perceptron.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.poissonregressor method)": [[672, "sklearn.linear_model.PoissonRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.quantileregressor method)": [[673, "sklearn.linear_model.QuantileRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.ransacregressor method)": [[674, "sklearn.linear_model.RANSACRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.ridge method)": [[675, "sklearn.linear_model.Ridge.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.ridgeclassifier method)": [[677, "sklearn.linear_model.RidgeClassifier.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.ridgeclassifiercv method)": [[678, "sklearn.linear_model.RidgeClassifierCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.ridgecv method)": [[676, "sklearn.linear_model.RidgeCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.sgdclassifier method)": [[679, "sklearn.linear_model.SGDClassifier.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.sgdoneclasssvm method)": [[680, "sklearn.linear_model.SGDOneClassSVM.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.sgdregressor method)": [[681, "sklearn.linear_model.SGDRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.tweedieregressor method)": [[683, "sklearn.linear_model.TweedieRegressor.set_fit_request", false]], "set_fit_request() (sklearn.manifold.mds method)": [[693, "sklearn.manifold.MDS.set_fit_request", false]], "set_fit_request() (sklearn.multioutput.multioutputclassifier method)": [[839, "sklearn.multioutput.MultiOutputClassifier.set_fit_request", false]], "set_fit_request() (sklearn.multioutput.multioutputregressor method)": [[840, "sklearn.multioutput.MultiOutputRegressor.set_fit_request", false]], "set_fit_request() (sklearn.naive_bayes.bernoullinb method)": [[842, "sklearn.naive_bayes.BernoulliNB.set_fit_request", false]], "set_fit_request() (sklearn.naive_bayes.categoricalnb method)": [[843, "sklearn.naive_bayes.CategoricalNB.set_fit_request", false]], "set_fit_request() (sklearn.naive_bayes.complementnb method)": [[844, "sklearn.naive_bayes.ComplementNB.set_fit_request", false]], "set_fit_request() (sklearn.naive_bayes.gaussiannb method)": [[845, "sklearn.naive_bayes.GaussianNB.set_fit_request", false]], "set_fit_request() (sklearn.naive_bayes.multinomialnb method)": [[846, "sklearn.naive_bayes.MultinomialNB.set_fit_request", false]], "set_fit_request() (sklearn.neighbors.kerneldensity method)": [[852, "sklearn.neighbors.KernelDensity.set_fit_request", false]], "set_fit_request() (sklearn.preprocessing.kbinsdiscretizer method)": [[872, "sklearn.preprocessing.KBinsDiscretizer.set_fit_request", false]], "set_fit_request() (sklearn.preprocessing.splinetransformer method)": [[886, "sklearn.preprocessing.SplineTransformer.set_fit_request", false]], "set_fit_request() (sklearn.preprocessing.standardscaler method)": [[887, "sklearn.preprocessing.StandardScaler.set_fit_request", false]], "set_fit_request() (sklearn.svm.linearsvc method)": [[907, "sklearn.svm.LinearSVC.set_fit_request", false]], "set_fit_request() (sklearn.svm.linearsvr method)": [[908, "sklearn.svm.LinearSVR.set_fit_request", false]], "set_fit_request() (sklearn.svm.nusvc method)": [[909, "sklearn.svm.NuSVC.set_fit_request", false]], "set_fit_request() (sklearn.svm.nusvr method)": [[910, "sklearn.svm.NuSVR.set_fit_request", false]], "set_fit_request() (sklearn.svm.oneclasssvm method)": [[911, "sklearn.svm.OneClassSVM.set_fit_request", false]], "set_fit_request() (sklearn.svm.svc method)": [[912, "sklearn.svm.SVC.set_fit_request", false]], "set_fit_request() (sklearn.svm.svr method)": [[913, "sklearn.svm.SVR.set_fit_request", false]], "set_fit_request() (sklearn.tree.decisiontreeclassifier method)": [[915, "sklearn.tree.DecisionTreeClassifier.set_fit_request", false]], "set_fit_request() (sklearn.tree.decisiontreeregressor method)": [[916, "sklearn.tree.DecisionTreeRegressor.set_fit_request", false]], "set_fit_request() (sklearn.tree.extratreeclassifier method)": [[917, "sklearn.tree.ExtraTreeClassifier.set_fit_request", false]], "set_fit_request() (sklearn.tree.extratreeregressor method)": [[918, "sklearn.tree.ExtraTreeRegressor.set_fit_request", false]], "set_inverse_transform_request() (sklearn.decomposition.fastica method)": [[534, "sklearn.decomposition.FastICA.set_inverse_transform_request", false]], "set_inverse_transform_request() (sklearn.preprocessing.labelbinarizer method)": [[874, "sklearn.preprocessing.LabelBinarizer.set_inverse_transform_request", false]], "set_inverse_transform_request() (sklearn.preprocessing.standardscaler method)": [[887, "sklearn.preprocessing.StandardScaler.set_inverse_transform_request", false]], "set_output() (sklearn.base.transformermixin method)": [[431, "sklearn.base.TransformerMixin.set_output", false]], "set_output() (sklearn.cluster.birch method)": [[442, "sklearn.cluster.Birch.set_output", false]], "set_output() (sklearn.cluster.bisectingkmeans method)": [[443, "sklearn.cluster.BisectingKMeans.set_output", false]], "set_output() (sklearn.cluster.featureagglomeration method)": [[445, "sklearn.cluster.FeatureAgglomeration.set_output", false]], "set_output() (sklearn.cluster.kmeans method)": [[447, "sklearn.cluster.KMeans.set_output", false]], "set_output() (sklearn.cluster.minibatchkmeans method)": [[449, "sklearn.cluster.MiniBatchKMeans.set_output", false]], "set_output() (sklearn.compose.columntransformer method)": [[464, "sklearn.compose.ColumnTransformer.set_output", false]], "set_output() (sklearn.cross_decomposition.cca method)": [[482, "sklearn.cross_decomposition.CCA.set_output", false]], "set_output() (sklearn.cross_decomposition.plscanonical method)": [[483, "sklearn.cross_decomposition.PLSCanonical.set_output", false]], "set_output() (sklearn.cross_decomposition.plsregression method)": [[484, "sklearn.cross_decomposition.PLSRegression.set_output", false]], "set_output() (sklearn.cross_decomposition.plssvd method)": [[485, "sklearn.cross_decomposition.PLSSVD.set_output", false]], "set_output() (sklearn.decomposition.dictionarylearning method)": [[532, "sklearn.decomposition.DictionaryLearning.set_output", false]], "set_output() (sklearn.decomposition.factoranalysis method)": [[533, "sklearn.decomposition.FactorAnalysis.set_output", false]], "set_output() (sklearn.decomposition.fastica method)": [[534, "sklearn.decomposition.FastICA.set_output", false]], "set_output() (sklearn.decomposition.incrementalpca method)": [[535, "sklearn.decomposition.IncrementalPCA.set_output", false]], "set_output() (sklearn.decomposition.kernelpca method)": [[536, "sklearn.decomposition.KernelPCA.set_output", false]], "set_output() (sklearn.decomposition.latentdirichletallocation method)": [[537, "sklearn.decomposition.LatentDirichletAllocation.set_output", false]], "set_output() (sklearn.decomposition.minibatchdictionarylearning method)": [[538, "sklearn.decomposition.MiniBatchDictionaryLearning.set_output", false]], "set_output() (sklearn.decomposition.minibatchnmf method)": [[539, "sklearn.decomposition.MiniBatchNMF.set_output", false]], "set_output() (sklearn.decomposition.minibatchsparsepca method)": [[540, "sklearn.decomposition.MiniBatchSparsePCA.set_output", false]], "set_output() (sklearn.decomposition.nmf method)": [[541, "sklearn.decomposition.NMF.set_output", false]], "set_output() (sklearn.decomposition.pca method)": [[542, "sklearn.decomposition.PCA.set_output", false]], "set_output() (sklearn.decomposition.sparsecoder method)": [[543, "sklearn.decomposition.SparseCoder.set_output", false]], "set_output() (sklearn.decomposition.sparsepca method)": [[544, "sklearn.decomposition.SparsePCA.set_output", false]], "set_output() (sklearn.decomposition.truncatedsvd method)": [[545, "sklearn.decomposition.TruncatedSVD.set_output", false]], "set_output() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[550, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_output", false]], "set_output() (sklearn.ensemble.randomtreesembedding method)": [[567, "sklearn.ensemble.RandomTreesEmbedding.set_output", false]], "set_output() (sklearn.ensemble.stackingclassifier method)": [[568, "sklearn.ensemble.StackingClassifier.set_output", false]], "set_output() (sklearn.ensemble.stackingregressor method)": [[569, "sklearn.ensemble.StackingRegressor.set_output", false]], "set_output() (sklearn.ensemble.votingclassifier method)": [[570, "sklearn.ensemble.VotingClassifier.set_output", false]], "set_output() (sklearn.ensemble.votingregressor method)": [[571, "sklearn.ensemble.VotingRegressor.set_output", false]], "set_output() (sklearn.feature_extraction.dictvectorizer method)": [[583, "sklearn.feature_extraction.DictVectorizer.set_output", false]], "set_output() (sklearn.feature_extraction.featurehasher method)": [[584, "sklearn.feature_extraction.FeatureHasher.set_output", false]], "set_output() (sklearn.feature_extraction.image.patchextractor method)": [[585, "sklearn.feature_extraction.image.PatchExtractor.set_output", false]], "set_output() (sklearn.feature_extraction.text.hashingvectorizer method)": [[591, "sklearn.feature_extraction.text.HashingVectorizer.set_output", false]], "set_output() (sklearn.feature_extraction.text.tfidftransformer method)": [[592, "sklearn.feature_extraction.text.TfidfTransformer.set_output", false]], "set_output() (sklearn.feature_selection.genericunivariateselect method)": [[594, "sklearn.feature_selection.GenericUnivariateSelect.set_output", false]], "set_output() (sklearn.feature_selection.rfe method)": [[595, "sklearn.feature_selection.RFE.set_output", false]], "set_output() (sklearn.feature_selection.rfecv method)": [[596, "sklearn.feature_selection.RFECV.set_output", false]], "set_output() (sklearn.feature_selection.selectfdr method)": [[597, "sklearn.feature_selection.SelectFdr.set_output", false]], "set_output() (sklearn.feature_selection.selectfpr method)": [[598, "sklearn.feature_selection.SelectFpr.set_output", false]], "set_output() (sklearn.feature_selection.selectfrommodel method)": [[599, "sklearn.feature_selection.SelectFromModel.set_output", false]], "set_output() (sklearn.feature_selection.selectfwe method)": [[600, "sklearn.feature_selection.SelectFwe.set_output", false]], "set_output() (sklearn.feature_selection.selectkbest method)": [[601, "sklearn.feature_selection.SelectKBest.set_output", false]], "set_output() (sklearn.feature_selection.selectormixin method)": [[603, "sklearn.feature_selection.SelectorMixin.set_output", false]], "set_output() (sklearn.feature_selection.selectpercentile method)": [[602, "sklearn.feature_selection.SelectPercentile.set_output", false]], "set_output() (sklearn.feature_selection.sequentialfeatureselector method)": [[604, "sklearn.feature_selection.SequentialFeatureSelector.set_output", false]], "set_output() (sklearn.feature_selection.variancethreshold method)": [[605, "sklearn.feature_selection.VarianceThreshold.set_output", false]], "set_output() (sklearn.impute.iterativeimputer method)": [[630, "sklearn.impute.IterativeImputer.set_output", false]], "set_output() (sklearn.impute.knnimputer method)": [[631, "sklearn.impute.KNNImputer.set_output", false]], "set_output() (sklearn.impute.missingindicator method)": [[632, "sklearn.impute.MissingIndicator.set_output", false]], "set_output() (sklearn.impute.simpleimputer method)": [[633, "sklearn.impute.SimpleImputer.set_output", false]], "set_output() (sklearn.isotonic.isotonicregression method)": [[638, "sklearn.isotonic.IsotonicRegression.set_output", false]], "set_output() (sklearn.kernel_approximation.additivechi2sampler method)": [[641, "sklearn.kernel_approximation.AdditiveChi2Sampler.set_output", false]], "set_output() (sklearn.kernel_approximation.nystroem method)": [[642, "sklearn.kernel_approximation.Nystroem.set_output", false]], "set_output() (sklearn.kernel_approximation.polynomialcountsketch method)": [[643, "sklearn.kernel_approximation.PolynomialCountSketch.set_output", false]], "set_output() (sklearn.kernel_approximation.rbfsampler method)": [[644, "sklearn.kernel_approximation.RBFSampler.set_output", false]], "set_output() (sklearn.kernel_approximation.skewedchi2sampler method)": [[645, "sklearn.kernel_approximation.SkewedChi2Sampler.set_output", false]], "set_output() (sklearn.manifold.isomap method)": [[691, "sklearn.manifold.Isomap.set_output", false]], "set_output() (sklearn.manifold.locallylinearembedding method)": [[692, "sklearn.manifold.LocallyLinearEmbedding.set_output", false]], "set_output() (sklearn.manifold.tsne method)": [[695, "sklearn.manifold.TSNE.set_output", false]], "set_output() (sklearn.neighbors.kneighborstransformer method)": [[851, "sklearn.neighbors.KNeighborsTransformer.set_output", false]], "set_output() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[856, "sklearn.neighbors.NeighborhoodComponentsAnalysis.set_output", false]], "set_output() (sklearn.neighbors.radiusneighborstransformer method)": [[859, "sklearn.neighbors.RadiusNeighborsTransformer.set_output", false]], "set_output() (sklearn.neural_network.bernoullirbm method)": [[863, "sklearn.neural_network.BernoulliRBM.set_output", false]], "set_output() (sklearn.pipeline.featureunion method)": [[866, "sklearn.pipeline.FeatureUnion.set_output", false]], "set_output() (sklearn.pipeline.pipeline method)": [[867, "sklearn.pipeline.Pipeline.set_output", false]], "set_output() (sklearn.preprocessing.binarizer method)": [[870, "sklearn.preprocessing.Binarizer.set_output", false]], "set_output() (sklearn.preprocessing.functiontransformer method)": [[871, "sklearn.preprocessing.FunctionTransformer.set_output", false]], "set_output() (sklearn.preprocessing.kbinsdiscretizer method)": [[872, "sklearn.preprocessing.KBinsDiscretizer.set_output", false]], "set_output() (sklearn.preprocessing.kernelcenterer method)": [[873, "sklearn.preprocessing.KernelCenterer.set_output", false]], "set_output() (sklearn.preprocessing.labelbinarizer method)": [[874, "sklearn.preprocessing.LabelBinarizer.set_output", false]], "set_output() (sklearn.preprocessing.labelencoder method)": [[875, "sklearn.preprocessing.LabelEncoder.set_output", false]], "set_output() (sklearn.preprocessing.maxabsscaler method)": [[876, "sklearn.preprocessing.MaxAbsScaler.set_output", false]], "set_output() (sklearn.preprocessing.minmaxscaler method)": [[877, "sklearn.preprocessing.MinMaxScaler.set_output", false]], "set_output() (sklearn.preprocessing.multilabelbinarizer method)": [[878, "sklearn.preprocessing.MultiLabelBinarizer.set_output", false]], "set_output() (sklearn.preprocessing.normalizer method)": [[879, "sklearn.preprocessing.Normalizer.set_output", false]], "set_output() (sklearn.preprocessing.onehotencoder method)": [[880, "sklearn.preprocessing.OneHotEncoder.set_output", false]], "set_output() (sklearn.preprocessing.ordinalencoder method)": [[881, "sklearn.preprocessing.OrdinalEncoder.set_output", false]], "set_output() (sklearn.preprocessing.polynomialfeatures method)": [[882, "sklearn.preprocessing.PolynomialFeatures.set_output", false]], "set_output() (sklearn.preprocessing.powertransformer method)": [[883, "sklearn.preprocessing.PowerTransformer.set_output", false]], "set_output() (sklearn.preprocessing.quantiletransformer method)": [[884, "sklearn.preprocessing.QuantileTransformer.set_output", false]], "set_output() (sklearn.preprocessing.robustscaler method)": [[885, "sklearn.preprocessing.RobustScaler.set_output", false]], "set_output() (sklearn.preprocessing.splinetransformer method)": [[886, "sklearn.preprocessing.SplineTransformer.set_output", false]], "set_output() (sklearn.preprocessing.standardscaler method)": [[887, "sklearn.preprocessing.StandardScaler.set_output", false]], "set_output() (sklearn.preprocessing.targetencoder method)": [[888, "sklearn.preprocessing.TargetEncoder.set_output", false]], "set_output() (sklearn.random_projection.gaussianrandomprojection method)": [[899, "sklearn.random_projection.GaussianRandomProjection.set_output", false]], "set_output() (sklearn.random_projection.sparserandomprojection method)": [[900, "sklearn.random_projection.SparseRandomProjection.set_output", false]], "set_params": [[389, "term-set_params", true]], "set_params() (sklearn.base.baseestimator method)": [[421, "sklearn.base.BaseEstimator.set_params", false]], "set_params() (sklearn.calibration.calibratedclassifiercv method)": [[437, "sklearn.calibration.CalibratedClassifierCV.set_params", false]], "set_params() (sklearn.cluster.affinitypropagation method)": [[440, "sklearn.cluster.AffinityPropagation.set_params", false]], "set_params() (sklearn.cluster.agglomerativeclustering method)": [[441, "sklearn.cluster.AgglomerativeClustering.set_params", false]], "set_params() (sklearn.cluster.birch method)": [[442, "sklearn.cluster.Birch.set_params", false]], "set_params() (sklearn.cluster.bisectingkmeans method)": [[443, "sklearn.cluster.BisectingKMeans.set_params", false]], "set_params() (sklearn.cluster.dbscan method)": [[444, "sklearn.cluster.DBSCAN.set_params", false]], "set_params() (sklearn.cluster.featureagglomeration method)": [[445, "sklearn.cluster.FeatureAgglomeration.set_params", false]], "set_params() (sklearn.cluster.hdbscan method)": [[446, "sklearn.cluster.HDBSCAN.set_params", false]], "set_params() (sklearn.cluster.kmeans method)": [[447, "sklearn.cluster.KMeans.set_params", false]], "set_params() (sklearn.cluster.meanshift method)": [[448, "sklearn.cluster.MeanShift.set_params", false]], "set_params() (sklearn.cluster.minibatchkmeans method)": [[449, "sklearn.cluster.MiniBatchKMeans.set_params", false]], "set_params() (sklearn.cluster.optics method)": [[450, "sklearn.cluster.OPTICS.set_params", false]], "set_params() (sklearn.cluster.spectralbiclustering method)": [[451, "sklearn.cluster.SpectralBiclustering.set_params", false]], "set_params() (sklearn.cluster.spectralclustering method)": [[452, "sklearn.cluster.SpectralClustering.set_params", false]], "set_params() (sklearn.cluster.spectralcoclustering method)": [[453, "sklearn.cluster.SpectralCoclustering.set_params", false]], "set_params() (sklearn.compose.columntransformer method)": [[464, "sklearn.compose.ColumnTransformer.set_params", false]], "set_params() (sklearn.compose.transformedtargetregressor method)": [[465, "sklearn.compose.TransformedTargetRegressor.set_params", false]], "set_params() (sklearn.covariance.ellipticenvelope method)": [[469, "sklearn.covariance.EllipticEnvelope.set_params", false]], "set_params() (sklearn.covariance.empiricalcovariance method)": [[470, "sklearn.covariance.EmpiricalCovariance.set_params", false]], "set_params() (sklearn.covariance.graphicallasso method)": [[471, "sklearn.covariance.GraphicalLasso.set_params", false]], "set_params() (sklearn.covariance.graphicallassocv method)": [[472, "sklearn.covariance.GraphicalLassoCV.set_params", false]], "set_params() (sklearn.covariance.ledoitwolf method)": [[473, "sklearn.covariance.LedoitWolf.set_params", false]], "set_params() (sklearn.covariance.mincovdet method)": [[474, "sklearn.covariance.MinCovDet.set_params", false]], "set_params() (sklearn.covariance.oas method)": [[475, "sklearn.covariance.OAS.set_params", false]], "set_params() (sklearn.covariance.shrunkcovariance method)": [[476, "sklearn.covariance.ShrunkCovariance.set_params", false]], "set_params() (sklearn.cross_decomposition.cca method)": [[482, "sklearn.cross_decomposition.CCA.set_params", false]], "set_params() (sklearn.cross_decomposition.plscanonical method)": [[483, "sklearn.cross_decomposition.PLSCanonical.set_params", false]], "set_params() (sklearn.cross_decomposition.plsregression method)": [[484, "sklearn.cross_decomposition.PLSRegression.set_params", false]], "set_params() (sklearn.cross_decomposition.plssvd method)": [[485, "sklearn.cross_decomposition.PLSSVD.set_params", false]], "set_params() (sklearn.decomposition.dictionarylearning method)": [[532, "sklearn.decomposition.DictionaryLearning.set_params", false]], "set_params() (sklearn.decomposition.factoranalysis method)": [[533, "sklearn.decomposition.FactorAnalysis.set_params", false]], "set_params() (sklearn.decomposition.fastica method)": [[534, "sklearn.decomposition.FastICA.set_params", false]], "set_params() (sklearn.decomposition.incrementalpca method)": [[535, "sklearn.decomposition.IncrementalPCA.set_params", false]], "set_params() (sklearn.decomposition.kernelpca method)": [[536, "sklearn.decomposition.KernelPCA.set_params", false]], "set_params() (sklearn.decomposition.latentdirichletallocation method)": [[537, "sklearn.decomposition.LatentDirichletAllocation.set_params", false]], "set_params() (sklearn.decomposition.minibatchdictionarylearning method)": [[538, "sklearn.decomposition.MiniBatchDictionaryLearning.set_params", false]], "set_params() (sklearn.decomposition.minibatchnmf method)": [[539, "sklearn.decomposition.MiniBatchNMF.set_params", false]], "set_params() (sklearn.decomposition.minibatchsparsepca method)": [[540, "sklearn.decomposition.MiniBatchSparsePCA.set_params", false]], "set_params() (sklearn.decomposition.nmf method)": [[541, "sklearn.decomposition.NMF.set_params", false]], "set_params() (sklearn.decomposition.pca method)": [[542, "sklearn.decomposition.PCA.set_params", false]], "set_params() (sklearn.decomposition.sparsecoder method)": [[543, "sklearn.decomposition.SparseCoder.set_params", false]], "set_params() (sklearn.decomposition.sparsepca method)": [[544, "sklearn.decomposition.SparsePCA.set_params", false]], "set_params() (sklearn.decomposition.truncatedsvd method)": [[545, "sklearn.decomposition.TruncatedSVD.set_params", false]], "set_params() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[550, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_params", false]], "set_params() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[551, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.set_params", false]], "set_params() (sklearn.dummy.dummyclassifier method)": [[552, "sklearn.dummy.DummyClassifier.set_params", false]], "set_params() (sklearn.dummy.dummyregressor method)": [[553, "sklearn.dummy.DummyRegressor.set_params", false]], "set_params() (sklearn.ensemble.adaboostclassifier method)": [[554, "sklearn.ensemble.AdaBoostClassifier.set_params", false]], "set_params() (sklearn.ensemble.adaboostregressor method)": [[555, "sklearn.ensemble.AdaBoostRegressor.set_params", false]], "set_params() (sklearn.ensemble.baggingclassifier method)": [[556, "sklearn.ensemble.BaggingClassifier.set_params", false]], "set_params() (sklearn.ensemble.baggingregressor method)": [[557, "sklearn.ensemble.BaggingRegressor.set_params", false]], "set_params() (sklearn.ensemble.extratreesclassifier method)": [[558, "sklearn.ensemble.ExtraTreesClassifier.set_params", false]], "set_params() (sklearn.ensemble.extratreesregressor method)": [[559, "sklearn.ensemble.ExtraTreesRegressor.set_params", false]], "set_params() (sklearn.ensemble.gradientboostingclassifier method)": [[560, "sklearn.ensemble.GradientBoostingClassifier.set_params", false]], "set_params() (sklearn.ensemble.gradientboostingregressor method)": [[561, "sklearn.ensemble.GradientBoostingRegressor.set_params", false]], "set_params() (sklearn.ensemble.histgradientboostingclassifier method)": [[562, "sklearn.ensemble.HistGradientBoostingClassifier.set_params", false]], "set_params() (sklearn.ensemble.histgradientboostingregressor method)": [[563, "sklearn.ensemble.HistGradientBoostingRegressor.set_params", false]], "set_params() (sklearn.ensemble.isolationforest method)": [[564, "sklearn.ensemble.IsolationForest.set_params", false]], "set_params() (sklearn.ensemble.randomforestclassifier method)": [[565, "sklearn.ensemble.RandomForestClassifier.set_params", false]], "set_params() (sklearn.ensemble.randomforestregressor method)": [[566, "sklearn.ensemble.RandomForestRegressor.set_params", false]], "set_params() (sklearn.ensemble.randomtreesembedding method)": [[567, "sklearn.ensemble.RandomTreesEmbedding.set_params", false]], "set_params() (sklearn.ensemble.stackingclassifier method)": [[568, "sklearn.ensemble.StackingClassifier.set_params", false]], "set_params() (sklearn.ensemble.stackingregressor method)": [[569, "sklearn.ensemble.StackingRegressor.set_params", false]], "set_params() (sklearn.ensemble.votingclassifier method)": [[570, "sklearn.ensemble.VotingClassifier.set_params", false]], "set_params() (sklearn.ensemble.votingregressor method)": [[571, "sklearn.ensemble.VotingRegressor.set_params", false]], "set_params() (sklearn.feature_extraction.dictvectorizer method)": [[583, "sklearn.feature_extraction.DictVectorizer.set_params", false]], "set_params() (sklearn.feature_extraction.featurehasher method)": [[584, "sklearn.feature_extraction.FeatureHasher.set_params", false]], "set_params() (sklearn.feature_extraction.image.patchextractor method)": [[585, "sklearn.feature_extraction.image.PatchExtractor.set_params", false]], "set_params() (sklearn.feature_extraction.text.countvectorizer method)": [[590, "sklearn.feature_extraction.text.CountVectorizer.set_params", false]], "set_params() (sklearn.feature_extraction.text.hashingvectorizer method)": [[591, "sklearn.feature_extraction.text.HashingVectorizer.set_params", false]], "set_params() (sklearn.feature_extraction.text.tfidftransformer method)": [[592, "sklearn.feature_extraction.text.TfidfTransformer.set_params", false]], "set_params() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[593, "sklearn.feature_extraction.text.TfidfVectorizer.set_params", false]], "set_params() (sklearn.feature_selection.genericunivariateselect method)": [[594, "sklearn.feature_selection.GenericUnivariateSelect.set_params", false]], "set_params() (sklearn.feature_selection.rfe method)": [[595, "sklearn.feature_selection.RFE.set_params", false]], "set_params() (sklearn.feature_selection.rfecv method)": [[596, "sklearn.feature_selection.RFECV.set_params", false]], "set_params() (sklearn.feature_selection.selectfdr method)": [[597, "sklearn.feature_selection.SelectFdr.set_params", false]], "set_params() (sklearn.feature_selection.selectfpr method)": [[598, "sklearn.feature_selection.SelectFpr.set_params", false]], "set_params() (sklearn.feature_selection.selectfrommodel method)": [[599, "sklearn.feature_selection.SelectFromModel.set_params", false]], "set_params() (sklearn.feature_selection.selectfwe method)": [[600, "sklearn.feature_selection.SelectFwe.set_params", false]], "set_params() (sklearn.feature_selection.selectkbest method)": [[601, "sklearn.feature_selection.SelectKBest.set_params", false]], "set_params() (sklearn.feature_selection.selectpercentile method)": [[602, "sklearn.feature_selection.SelectPercentile.set_params", false]], "set_params() (sklearn.feature_selection.sequentialfeatureselector method)": [[604, "sklearn.feature_selection.SequentialFeatureSelector.set_params", false]], "set_params() (sklearn.feature_selection.variancethreshold method)": [[605, "sklearn.feature_selection.VarianceThreshold.set_params", false]], "set_params() (sklearn.frozen.frozenestimator method)": [[612, "sklearn.frozen.FrozenEstimator.set_params", false]], "set_params() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[613, "sklearn.gaussian_process.GaussianProcessClassifier.set_params", false]], "set_params() (sklearn.gaussian_process.gaussianprocessregressor method)": [[614, "sklearn.gaussian_process.GaussianProcessRegressor.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.compoundkernel method)": [[615, "sklearn.gaussian_process.kernels.CompoundKernel.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.constantkernel method)": [[616, "sklearn.gaussian_process.kernels.ConstantKernel.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.dotproduct method)": [[617, "sklearn.gaussian_process.kernels.DotProduct.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.exponentiation method)": [[619, "sklearn.gaussian_process.kernels.Exponentiation.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.expsinesquared method)": [[618, "sklearn.gaussian_process.kernels.ExpSineSquared.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.kernel method)": [[621, "sklearn.gaussian_process.kernels.Kernel.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.matern method)": [[622, "sklearn.gaussian_process.kernels.Matern.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[623, "sklearn.gaussian_process.kernels.PairwiseKernel.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.product method)": [[624, "sklearn.gaussian_process.kernels.Product.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[626, "sklearn.gaussian_process.kernels.RationalQuadratic.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.rbf method)": [[625, "sklearn.gaussian_process.kernels.RBF.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.sum method)": [[627, "sklearn.gaussian_process.kernels.Sum.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.whitekernel method)": [[628, "sklearn.gaussian_process.kernels.WhiteKernel.set_params", false]], "set_params() (sklearn.impute.iterativeimputer method)": [[630, "sklearn.impute.IterativeImputer.set_params", false]], "set_params() (sklearn.impute.knnimputer method)": [[631, "sklearn.impute.KNNImputer.set_params", false]], "set_params() (sklearn.impute.missingindicator method)": [[632, "sklearn.impute.MissingIndicator.set_params", false]], "set_params() (sklearn.impute.simpleimputer method)": [[633, "sklearn.impute.SimpleImputer.set_params", false]], "set_params() (sklearn.isotonic.isotonicregression method)": [[638, "sklearn.isotonic.IsotonicRegression.set_params", false]], "set_params() (sklearn.kernel_approximation.additivechi2sampler method)": [[641, "sklearn.kernel_approximation.AdditiveChi2Sampler.set_params", false]], "set_params() (sklearn.kernel_approximation.nystroem method)": [[642, "sklearn.kernel_approximation.Nystroem.set_params", false]], "set_params() (sklearn.kernel_approximation.polynomialcountsketch method)": [[643, "sklearn.kernel_approximation.PolynomialCountSketch.set_params", false]], "set_params() (sklearn.kernel_approximation.rbfsampler method)": [[644, "sklearn.kernel_approximation.RBFSampler.set_params", false]], "set_params() (sklearn.kernel_approximation.skewedchi2sampler method)": [[645, "sklearn.kernel_approximation.SkewedChi2Sampler.set_params", false]], "set_params() (sklearn.kernel_ridge.kernelridge method)": [[646, "sklearn.kernel_ridge.KernelRidge.set_params", false]], "set_params() (sklearn.linear_model.ardregression method)": [[647, "sklearn.linear_model.ARDRegression.set_params", false]], "set_params() (sklearn.linear_model.bayesianridge method)": [[648, "sklearn.linear_model.BayesianRidge.set_params", false]], "set_params() (sklearn.linear_model.elasticnet method)": [[649, "sklearn.linear_model.ElasticNet.set_params", false]], "set_params() (sklearn.linear_model.elasticnetcv method)": [[650, "sklearn.linear_model.ElasticNetCV.set_params", false]], "set_params() (sklearn.linear_model.gammaregressor method)": [[651, "sklearn.linear_model.GammaRegressor.set_params", false]], "set_params() (sklearn.linear_model.huberregressor method)": [[652, "sklearn.linear_model.HuberRegressor.set_params", false]], "set_params() (sklearn.linear_model.lars method)": [[653, "sklearn.linear_model.Lars.set_params", false]], "set_params() (sklearn.linear_model.larscv method)": [[654, "sklearn.linear_model.LarsCV.set_params", false]], "set_params() (sklearn.linear_model.lasso method)": [[655, "sklearn.linear_model.Lasso.set_params", false]], "set_params() (sklearn.linear_model.lassocv method)": [[656, "sklearn.linear_model.LassoCV.set_params", false]], "set_params() (sklearn.linear_model.lassolars method)": [[657, "sklearn.linear_model.LassoLars.set_params", false]], "set_params() (sklearn.linear_model.lassolarscv method)": [[658, "sklearn.linear_model.LassoLarsCV.set_params", false]], "set_params() (sklearn.linear_model.lassolarsic method)": [[659, "sklearn.linear_model.LassoLarsIC.set_params", false]], "set_params() (sklearn.linear_model.linearregression method)": [[660, "sklearn.linear_model.LinearRegression.set_params", false]], "set_params() (sklearn.linear_model.logisticregression method)": [[661, "sklearn.linear_model.LogisticRegression.set_params", false]], "set_params() (sklearn.linear_model.logisticregressioncv method)": [[662, "sklearn.linear_model.LogisticRegressionCV.set_params", false]], "set_params() (sklearn.linear_model.multitaskelasticnet method)": [[663, "sklearn.linear_model.MultiTaskElasticNet.set_params", false]], "set_params() (sklearn.linear_model.multitaskelasticnetcv method)": [[664, "sklearn.linear_model.MultiTaskElasticNetCV.set_params", false]], "set_params() (sklearn.linear_model.multitasklasso method)": [[665, "sklearn.linear_model.MultiTaskLasso.set_params", false]], "set_params() (sklearn.linear_model.multitasklassocv method)": [[666, "sklearn.linear_model.MultiTaskLassoCV.set_params", false]], "set_params() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[667, "sklearn.linear_model.OrthogonalMatchingPursuit.set_params", false]], "set_params() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[668, "sklearn.linear_model.OrthogonalMatchingPursuitCV.set_params", false]], "set_params() (sklearn.linear_model.passiveaggressiveclassifier method)": [[669, "sklearn.linear_model.PassiveAggressiveClassifier.set_params", false]], "set_params() (sklearn.linear_model.passiveaggressiveregressor method)": [[670, "sklearn.linear_model.PassiveAggressiveRegressor.set_params", false]], "set_params() (sklearn.linear_model.perceptron method)": [[671, "sklearn.linear_model.Perceptron.set_params", false]], "set_params() (sklearn.linear_model.poissonregressor method)": [[672, "sklearn.linear_model.PoissonRegressor.set_params", false]], "set_params() (sklearn.linear_model.quantileregressor method)": [[673, "sklearn.linear_model.QuantileRegressor.set_params", false]], "set_params() (sklearn.linear_model.ransacregressor method)": [[674, "sklearn.linear_model.RANSACRegressor.set_params", false]], "set_params() (sklearn.linear_model.ridge method)": [[675, "sklearn.linear_model.Ridge.set_params", false]], "set_params() (sklearn.linear_model.ridgeclassifier method)": [[677, "sklearn.linear_model.RidgeClassifier.set_params", false]], "set_params() (sklearn.linear_model.ridgeclassifiercv method)": [[678, "sklearn.linear_model.RidgeClassifierCV.set_params", false]], "set_params() (sklearn.linear_model.ridgecv method)": [[676, "sklearn.linear_model.RidgeCV.set_params", false]], "set_params() (sklearn.linear_model.sgdclassifier method)": [[679, "sklearn.linear_model.SGDClassifier.set_params", false]], "set_params() (sklearn.linear_model.sgdoneclasssvm method)": [[680, "sklearn.linear_model.SGDOneClassSVM.set_params", false]], "set_params() (sklearn.linear_model.sgdregressor method)": [[681, "sklearn.linear_model.SGDRegressor.set_params", false]], "set_params() (sklearn.linear_model.theilsenregressor method)": [[682, "sklearn.linear_model.TheilSenRegressor.set_params", false]], "set_params() (sklearn.linear_model.tweedieregressor method)": [[683, "sklearn.linear_model.TweedieRegressor.set_params", false]], "set_params() (sklearn.manifold.isomap method)": [[691, "sklearn.manifold.Isomap.set_params", false]], "set_params() (sklearn.manifold.locallylinearembedding method)": [[692, "sklearn.manifold.LocallyLinearEmbedding.set_params", false]], "set_params() (sklearn.manifold.mds method)": [[693, "sklearn.manifold.MDS.set_params", false]], "set_params() (sklearn.manifold.spectralembedding method)": [[694, "sklearn.manifold.SpectralEmbedding.set_params", false]], "set_params() (sklearn.manifold.tsne method)": [[695, "sklearn.manifold.TSNE.set_params", false]], "set_params() (sklearn.mixture.bayesiangaussianmixture method)": [[800, "sklearn.mixture.BayesianGaussianMixture.set_params", false]], "set_params() (sklearn.mixture.gaussianmixture method)": [[801, "sklearn.mixture.GaussianMixture.set_params", false]], "set_params() (sklearn.model_selection.fixedthresholdclassifier method)": [[802, "sklearn.model_selection.FixedThresholdClassifier.set_params", false]], "set_params() (sklearn.model_selection.gridsearchcv method)": [[803, "sklearn.model_selection.GridSearchCV.set_params", false]], "set_params() (sklearn.model_selection.halvinggridsearchcv method)": [[806, "sklearn.model_selection.HalvingGridSearchCV.set_params", false]], "set_params() (sklearn.model_selection.halvingrandomsearchcv method)": [[807, "sklearn.model_selection.HalvingRandomSearchCV.set_params", false]], "set_params() (sklearn.model_selection.randomizedsearchcv method)": [[817, "sklearn.model_selection.RandomizedSearchCV.set_params", false]], "set_params() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[825, "sklearn.model_selection.TunedThresholdClassifierCV.set_params", false]], "set_params() (sklearn.multiclass.onevsoneclassifier method)": [[835, "sklearn.multiclass.OneVsOneClassifier.set_params", false]], "set_params() (sklearn.multiclass.onevsrestclassifier method)": [[836, "sklearn.multiclass.OneVsRestClassifier.set_params", false]], "set_params() (sklearn.multiclass.outputcodeclassifier method)": [[837, "sklearn.multiclass.OutputCodeClassifier.set_params", false]], "set_params() (sklearn.multioutput.classifierchain method)": [[838, "sklearn.multioutput.ClassifierChain.set_params", false]], "set_params() (sklearn.multioutput.multioutputclassifier method)": [[839, "sklearn.multioutput.MultiOutputClassifier.set_params", false]], "set_params() (sklearn.multioutput.multioutputregressor method)": [[840, "sklearn.multioutput.MultiOutputRegressor.set_params", false]], "set_params() (sklearn.multioutput.regressorchain method)": [[841, "sklearn.multioutput.RegressorChain.set_params", false]], "set_params() (sklearn.naive_bayes.bernoullinb method)": [[842, "sklearn.naive_bayes.BernoulliNB.set_params", false]], "set_params() (sklearn.naive_bayes.categoricalnb method)": [[843, "sklearn.naive_bayes.CategoricalNB.set_params", false]], "set_params() (sklearn.naive_bayes.complementnb method)": [[844, "sklearn.naive_bayes.ComplementNB.set_params", false]], "set_params() (sklearn.naive_bayes.gaussiannb method)": [[845, "sklearn.naive_bayes.GaussianNB.set_params", false]], "set_params() (sklearn.naive_bayes.multinomialnb method)": [[846, "sklearn.naive_bayes.MultinomialNB.set_params", false]], "set_params() (sklearn.neighbors.kerneldensity method)": [[852, "sklearn.neighbors.KernelDensity.set_params", false]], "set_params() (sklearn.neighbors.kneighborsclassifier method)": [[849, "sklearn.neighbors.KNeighborsClassifier.set_params", false]], "set_params() (sklearn.neighbors.kneighborsregressor method)": [[850, "sklearn.neighbors.KNeighborsRegressor.set_params", false]], "set_params() (sklearn.neighbors.kneighborstransformer method)": [[851, "sklearn.neighbors.KNeighborsTransformer.set_params", false]], "set_params() (sklearn.neighbors.localoutlierfactor method)": [[853, "sklearn.neighbors.LocalOutlierFactor.set_params", false]], "set_params() (sklearn.neighbors.nearestcentroid method)": [[854, "sklearn.neighbors.NearestCentroid.set_params", false]], "set_params() (sklearn.neighbors.nearestneighbors method)": [[855, "sklearn.neighbors.NearestNeighbors.set_params", false]], "set_params() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[856, "sklearn.neighbors.NeighborhoodComponentsAnalysis.set_params", false]], "set_params() (sklearn.neighbors.radiusneighborsclassifier method)": [[857, "sklearn.neighbors.RadiusNeighborsClassifier.set_params", false]], "set_params() (sklearn.neighbors.radiusneighborsregressor method)": [[858, "sklearn.neighbors.RadiusNeighborsRegressor.set_params", false]], "set_params() (sklearn.neighbors.radiusneighborstransformer method)": [[859, "sklearn.neighbors.RadiusNeighborsTransformer.set_params", false]], "set_params() (sklearn.neural_network.bernoullirbm method)": [[863, "sklearn.neural_network.BernoulliRBM.set_params", false]], "set_params() (sklearn.neural_network.mlpclassifier method)": [[864, "sklearn.neural_network.MLPClassifier.set_params", false]], "set_params() (sklearn.neural_network.mlpregressor method)": [[865, "sklearn.neural_network.MLPRegressor.set_params", false]], "set_params() (sklearn.pipeline.featureunion method)": [[866, "sklearn.pipeline.FeatureUnion.set_params", false]], "set_params() (sklearn.pipeline.pipeline method)": [[867, "sklearn.pipeline.Pipeline.set_params", false]], "set_params() (sklearn.preprocessing.binarizer method)": [[870, "sklearn.preprocessing.Binarizer.set_params", false]], "set_params() (sklearn.preprocessing.functiontransformer method)": [[871, "sklearn.preprocessing.FunctionTransformer.set_params", false]], "set_params() (sklearn.preprocessing.kbinsdiscretizer method)": [[872, "sklearn.preprocessing.KBinsDiscretizer.set_params", false]], "set_params() (sklearn.preprocessing.kernelcenterer method)": [[873, "sklearn.preprocessing.KernelCenterer.set_params", false]], "set_params() (sklearn.preprocessing.labelbinarizer method)": [[874, "sklearn.preprocessing.LabelBinarizer.set_params", false]], "set_params() (sklearn.preprocessing.labelencoder method)": [[875, "sklearn.preprocessing.LabelEncoder.set_params", false]], "set_params() (sklearn.preprocessing.maxabsscaler method)": [[876, "sklearn.preprocessing.MaxAbsScaler.set_params", false]], "set_params() (sklearn.preprocessing.minmaxscaler method)": [[877, "sklearn.preprocessing.MinMaxScaler.set_params", false]], "set_params() (sklearn.preprocessing.multilabelbinarizer method)": [[878, "sklearn.preprocessing.MultiLabelBinarizer.set_params", false]], "set_params() (sklearn.preprocessing.normalizer method)": [[879, "sklearn.preprocessing.Normalizer.set_params", false]], "set_params() (sklearn.preprocessing.onehotencoder method)": [[880, "sklearn.preprocessing.OneHotEncoder.set_params", false]], "set_params() (sklearn.preprocessing.ordinalencoder method)": [[881, "sklearn.preprocessing.OrdinalEncoder.set_params", false]], "set_params() (sklearn.preprocessing.polynomialfeatures method)": [[882, "sklearn.preprocessing.PolynomialFeatures.set_params", false]], "set_params() (sklearn.preprocessing.powertransformer method)": [[883, "sklearn.preprocessing.PowerTransformer.set_params", false]], "set_params() (sklearn.preprocessing.quantiletransformer method)": [[884, "sklearn.preprocessing.QuantileTransformer.set_params", false]], "set_params() (sklearn.preprocessing.robustscaler method)": [[885, "sklearn.preprocessing.RobustScaler.set_params", false]], "set_params() (sklearn.preprocessing.splinetransformer method)": [[886, "sklearn.preprocessing.SplineTransformer.set_params", false]], "set_params() (sklearn.preprocessing.standardscaler method)": [[887, "sklearn.preprocessing.StandardScaler.set_params", false]], "set_params() (sklearn.preprocessing.targetencoder method)": [[888, "sklearn.preprocessing.TargetEncoder.set_params", false]], "set_params() (sklearn.random_projection.gaussianrandomprojection method)": [[899, "sklearn.random_projection.GaussianRandomProjection.set_params", false]], "set_params() (sklearn.random_projection.sparserandomprojection method)": [[900, "sklearn.random_projection.SparseRandomProjection.set_params", false]], "set_params() (sklearn.semi_supervised.labelpropagation method)": [[902, "sklearn.semi_supervised.LabelPropagation.set_params", false]], "set_params() (sklearn.semi_supervised.labelspreading method)": [[903, "sklearn.semi_supervised.LabelSpreading.set_params", false]], "set_params() (sklearn.semi_supervised.selftrainingclassifier method)": [[904, "sklearn.semi_supervised.SelfTrainingClassifier.set_params", false]], "set_params() (sklearn.svm.linearsvc method)": [[907, "sklearn.svm.LinearSVC.set_params", false]], "set_params() (sklearn.svm.linearsvr method)": [[908, "sklearn.svm.LinearSVR.set_params", false]], "set_params() (sklearn.svm.nusvc method)": [[909, "sklearn.svm.NuSVC.set_params", false]], "set_params() (sklearn.svm.nusvr method)": [[910, "sklearn.svm.NuSVR.set_params", false]], "set_params() (sklearn.svm.oneclasssvm method)": [[911, "sklearn.svm.OneClassSVM.set_params", false]], "set_params() (sklearn.svm.svc method)": [[912, "sklearn.svm.SVC.set_params", false]], "set_params() (sklearn.svm.svr method)": [[913, "sklearn.svm.SVR.set_params", false]], "set_params() (sklearn.tree.decisiontreeclassifier method)": [[915, "sklearn.tree.DecisionTreeClassifier.set_params", false]], "set_params() (sklearn.tree.decisiontreeregressor method)": [[916, "sklearn.tree.DecisionTreeRegressor.set_params", false]], "set_params() (sklearn.tree.extratreeclassifier method)": [[917, "sklearn.tree.ExtraTreeClassifier.set_params", false]], "set_params() (sklearn.tree.extratreeregressor method)": [[918, "sklearn.tree.ExtraTreeRegressor.set_params", false]], "set_partial_fit_request() (sklearn.cluster.minibatchkmeans method)": [[449, "sklearn.cluster.MiniBatchKMeans.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.passiveaggressiveclassifier method)": [[669, "sklearn.linear_model.PassiveAggressiveClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.passiveaggressiveregressor method)": [[670, "sklearn.linear_model.PassiveAggressiveRegressor.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.perceptron method)": [[671, "sklearn.linear_model.Perceptron.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.sgdclassifier method)": [[679, "sklearn.linear_model.SGDClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.sgdoneclasssvm method)": [[680, "sklearn.linear_model.SGDOneClassSVM.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.sgdregressor method)": [[681, "sklearn.linear_model.SGDRegressor.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.multiclass.onevsoneclassifier method)": [[835, "sklearn.multiclass.OneVsOneClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.multiclass.onevsrestclassifier method)": [[836, "sklearn.multiclass.OneVsRestClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.multioutput.multioutputclassifier method)": [[839, "sklearn.multioutput.MultiOutputClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.multioutput.multioutputregressor method)": [[840, "sklearn.multioutput.MultiOutputRegressor.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.naive_bayes.bernoullinb method)": [[842, "sklearn.naive_bayes.BernoulliNB.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.naive_bayes.categoricalnb method)": [[843, "sklearn.naive_bayes.CategoricalNB.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.naive_bayes.complementnb method)": [[844, "sklearn.naive_bayes.ComplementNB.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.naive_bayes.gaussiannb method)": [[845, "sklearn.naive_bayes.GaussianNB.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.naive_bayes.multinomialnb method)": [[846, "sklearn.naive_bayes.MultinomialNB.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.neural_network.mlpclassifier method)": [[864, "sklearn.neural_network.MLPClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.preprocessing.standardscaler method)": [[887, "sklearn.preprocessing.StandardScaler.set_partial_fit_request", false]], "set_predict_request() (sklearn.cross_decomposition.cca method)": [[482, "sklearn.cross_decomposition.CCA.set_predict_request", false]], "set_predict_request() (sklearn.cross_decomposition.plscanonical method)": [[483, "sklearn.cross_decomposition.PLSCanonical.set_predict_request", false]], "set_predict_request() (sklearn.cross_decomposition.plsregression method)": [[484, "sklearn.cross_decomposition.PLSRegression.set_predict_request", false]], "set_predict_request() (sklearn.dummy.dummyregressor method)": [[553, "sklearn.dummy.DummyRegressor.set_predict_request", false]], "set_predict_request() (sklearn.gaussian_process.gaussianprocessregressor method)": [[614, "sklearn.gaussian_process.GaussianProcessRegressor.set_predict_request", false]], "set_predict_request() (sklearn.linear_model.ardregression method)": [[647, "sklearn.linear_model.ARDRegression.set_predict_request", false]], "set_predict_request() (sklearn.linear_model.bayesianridge method)": [[648, "sklearn.linear_model.BayesianRidge.set_predict_request", false]], "set_score_request() (sklearn.calibration.calibratedclassifiercv method)": [[437, "sklearn.calibration.CalibratedClassifierCV.set_score_request", false]], "set_score_request() (sklearn.cluster.bisectingkmeans method)": [[443, "sklearn.cluster.BisectingKMeans.set_score_request", false]], "set_score_request() (sklearn.cluster.kmeans method)": [[447, "sklearn.cluster.KMeans.set_score_request", false]], "set_score_request() (sklearn.cluster.minibatchkmeans method)": [[449, "sklearn.cluster.MiniBatchKMeans.set_score_request", false]], "set_score_request() (sklearn.compose.transformedtargetregressor method)": [[465, "sklearn.compose.TransformedTargetRegressor.set_score_request", false]], "set_score_request() (sklearn.cross_decomposition.cca method)": [[482, "sklearn.cross_decomposition.CCA.set_score_request", false]], "set_score_request() (sklearn.cross_decomposition.plscanonical method)": [[483, "sklearn.cross_decomposition.PLSCanonical.set_score_request", false]], "set_score_request() (sklearn.cross_decomposition.plsregression method)": [[484, "sklearn.cross_decomposition.PLSRegression.set_score_request", false]], "set_score_request() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[550, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_score_request", false]], "set_score_request() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[551, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.set_score_request", false]], "set_score_request() (sklearn.dummy.dummyclassifier method)": [[552, "sklearn.dummy.DummyClassifier.set_score_request", false]], "set_score_request() (sklearn.dummy.dummyregressor method)": [[553, "sklearn.dummy.DummyRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.adaboostclassifier method)": [[554, "sklearn.ensemble.AdaBoostClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.adaboostregressor method)": [[555, "sklearn.ensemble.AdaBoostRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.baggingclassifier method)": [[556, "sklearn.ensemble.BaggingClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.baggingregressor method)": [[557, "sklearn.ensemble.BaggingRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.extratreesclassifier method)": [[558, "sklearn.ensemble.ExtraTreesClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.extratreesregressor method)": [[559, "sklearn.ensemble.ExtraTreesRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.gradientboostingclassifier method)": [[560, "sklearn.ensemble.GradientBoostingClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.gradientboostingregressor method)": [[561, "sklearn.ensemble.GradientBoostingRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.histgradientboostingclassifier method)": [[562, "sklearn.ensemble.HistGradientBoostingClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.histgradientboostingregressor method)": [[563, "sklearn.ensemble.HistGradientBoostingRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.randomforestclassifier method)": [[565, "sklearn.ensemble.RandomForestClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.randomforestregressor method)": [[566, "sklearn.ensemble.RandomForestRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.stackingclassifier method)": [[568, "sklearn.ensemble.StackingClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.stackingregressor method)": [[569, "sklearn.ensemble.StackingRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.votingclassifier method)": [[570, "sklearn.ensemble.VotingClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.votingregressor method)": [[571, "sklearn.ensemble.VotingRegressor.set_score_request", false]], "set_score_request() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[613, "sklearn.gaussian_process.GaussianProcessClassifier.set_score_request", false]], "set_score_request() (sklearn.gaussian_process.gaussianprocessregressor method)": [[614, "sklearn.gaussian_process.GaussianProcessRegressor.set_score_request", false]], "set_score_request() (sklearn.isotonic.isotonicregression method)": [[638, "sklearn.isotonic.IsotonicRegression.set_score_request", false]], "set_score_request() (sklearn.kernel_ridge.kernelridge method)": [[646, "sklearn.kernel_ridge.KernelRidge.set_score_request", false]], "set_score_request() (sklearn.linear_model.ardregression method)": [[647, "sklearn.linear_model.ARDRegression.set_score_request", false]], "set_score_request() (sklearn.linear_model.bayesianridge method)": [[648, "sklearn.linear_model.BayesianRidge.set_score_request", false]], "set_score_request() (sklearn.linear_model.elasticnet method)": [[649, "sklearn.linear_model.ElasticNet.set_score_request", false]], "set_score_request() (sklearn.linear_model.elasticnetcv method)": [[650, "sklearn.linear_model.ElasticNetCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.gammaregressor method)": [[651, "sklearn.linear_model.GammaRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.huberregressor method)": [[652, "sklearn.linear_model.HuberRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.lars method)": [[653, "sklearn.linear_model.Lars.set_score_request", false]], "set_score_request() (sklearn.linear_model.larscv method)": [[654, "sklearn.linear_model.LarsCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.lasso method)": [[655, "sklearn.linear_model.Lasso.set_score_request", false]], "set_score_request() (sklearn.linear_model.lassocv method)": [[656, "sklearn.linear_model.LassoCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.lassolars method)": [[657, "sklearn.linear_model.LassoLars.set_score_request", false]], "set_score_request() (sklearn.linear_model.lassolarscv method)": [[658, "sklearn.linear_model.LassoLarsCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.lassolarsic method)": [[659, "sklearn.linear_model.LassoLarsIC.set_score_request", false]], "set_score_request() (sklearn.linear_model.linearregression method)": [[660, "sklearn.linear_model.LinearRegression.set_score_request", false]], "set_score_request() (sklearn.linear_model.logisticregression method)": [[661, "sklearn.linear_model.LogisticRegression.set_score_request", false]], "set_score_request() (sklearn.linear_model.logisticregressioncv method)": [[662, "sklearn.linear_model.LogisticRegressionCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.multitaskelasticnet method)": [[663, "sklearn.linear_model.MultiTaskElasticNet.set_score_request", false]], "set_score_request() (sklearn.linear_model.multitaskelasticnetcv method)": [[664, "sklearn.linear_model.MultiTaskElasticNetCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.multitasklasso method)": [[665, "sklearn.linear_model.MultiTaskLasso.set_score_request", false]], "set_score_request() (sklearn.linear_model.multitasklassocv method)": [[666, "sklearn.linear_model.MultiTaskLassoCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[667, "sklearn.linear_model.OrthogonalMatchingPursuit.set_score_request", false]], "set_score_request() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[668, "sklearn.linear_model.OrthogonalMatchingPursuitCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.passiveaggressiveclassifier method)": [[669, "sklearn.linear_model.PassiveAggressiveClassifier.set_score_request", false]], "set_score_request() (sklearn.linear_model.passiveaggressiveregressor method)": [[670, "sklearn.linear_model.PassiveAggressiveRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.perceptron method)": [[671, "sklearn.linear_model.Perceptron.set_score_request", false]], "set_score_request() (sklearn.linear_model.poissonregressor method)": [[672, "sklearn.linear_model.PoissonRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.quantileregressor method)": [[673, "sklearn.linear_model.QuantileRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.ridge method)": [[675, "sklearn.linear_model.Ridge.set_score_request", false]], "set_score_request() (sklearn.linear_model.ridgeclassifier method)": [[677, "sklearn.linear_model.RidgeClassifier.set_score_request", false]], "set_score_request() (sklearn.linear_model.ridgeclassifiercv method)": [[678, "sklearn.linear_model.RidgeClassifierCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.ridgecv method)": [[676, "sklearn.linear_model.RidgeCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.sgdclassifier method)": [[679, "sklearn.linear_model.SGDClassifier.set_score_request", false]], "set_score_request() (sklearn.linear_model.sgdregressor method)": [[681, "sklearn.linear_model.SGDRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.theilsenregressor method)": [[682, "sklearn.linear_model.TheilSenRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.tweedieregressor method)": [[683, "sklearn.linear_model.TweedieRegressor.set_score_request", false]], "set_score_request() (sklearn.model_selection.fixedthresholdclassifier method)": [[802, "sklearn.model_selection.FixedThresholdClassifier.set_score_request", false]], "set_score_request() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[825, "sklearn.model_selection.TunedThresholdClassifierCV.set_score_request", false]], "set_score_request() (sklearn.multiclass.onevsoneclassifier method)": [[835, "sklearn.multiclass.OneVsOneClassifier.set_score_request", false]], "set_score_request() (sklearn.multiclass.onevsrestclassifier method)": [[836, "sklearn.multiclass.OneVsRestClassifier.set_score_request", false]], "set_score_request() (sklearn.multiclass.outputcodeclassifier method)": [[837, "sklearn.multiclass.OutputCodeClassifier.set_score_request", false]], "set_score_request() (sklearn.multioutput.classifierchain method)": [[838, "sklearn.multioutput.ClassifierChain.set_score_request", false]], "set_score_request() (sklearn.multioutput.multioutputregressor method)": [[840, "sklearn.multioutput.MultiOutputRegressor.set_score_request", false]], "set_score_request() (sklearn.multioutput.regressorchain method)": [[841, "sklearn.multioutput.RegressorChain.set_score_request", false]], "set_score_request() (sklearn.naive_bayes.bernoullinb method)": [[842, "sklearn.naive_bayes.BernoulliNB.set_score_request", false]], "set_score_request() (sklearn.naive_bayes.categoricalnb method)": [[843, "sklearn.naive_bayes.CategoricalNB.set_score_request", false]], "set_score_request() (sklearn.naive_bayes.complementnb method)": [[844, "sklearn.naive_bayes.ComplementNB.set_score_request", false]], "set_score_request() (sklearn.naive_bayes.gaussiannb method)": [[845, "sklearn.naive_bayes.GaussianNB.set_score_request", false]], "set_score_request() (sklearn.naive_bayes.multinomialnb method)": [[846, "sklearn.naive_bayes.MultinomialNB.set_score_request", false]], "set_score_request() (sklearn.neighbors.kneighborsclassifier method)": [[849, "sklearn.neighbors.KNeighborsClassifier.set_score_request", false]], "set_score_request() (sklearn.neighbors.kneighborsregressor method)": [[850, "sklearn.neighbors.KNeighborsRegressor.set_score_request", false]], "set_score_request() (sklearn.neighbors.nearestcentroid method)": [[854, "sklearn.neighbors.NearestCentroid.set_score_request", false]], "set_score_request() (sklearn.neighbors.radiusneighborsclassifier method)": [[857, "sklearn.neighbors.RadiusNeighborsClassifier.set_score_request", false]], "set_score_request() (sklearn.neighbors.radiusneighborsregressor method)": [[858, "sklearn.neighbors.RadiusNeighborsRegressor.set_score_request", false]], "set_score_request() (sklearn.neural_network.mlpclassifier method)": [[864, "sklearn.neural_network.MLPClassifier.set_score_request", false]], "set_score_request() (sklearn.neural_network.mlpregressor method)": [[865, "sklearn.neural_network.MLPRegressor.set_score_request", false]], "set_score_request() (sklearn.pipeline.pipeline method)": [[867, "sklearn.pipeline.Pipeline.set_score_request", false]], "set_score_request() (sklearn.semi_supervised.labelpropagation method)": [[902, "sklearn.semi_supervised.LabelPropagation.set_score_request", false]], "set_score_request() (sklearn.semi_supervised.labelspreading method)": [[903, "sklearn.semi_supervised.LabelSpreading.set_score_request", false]], "set_score_request() (sklearn.svm.linearsvc method)": [[907, "sklearn.svm.LinearSVC.set_score_request", false]], "set_score_request() (sklearn.svm.linearsvr method)": [[908, "sklearn.svm.LinearSVR.set_score_request", false]], "set_score_request() (sklearn.svm.nusvc method)": [[909, "sklearn.svm.NuSVC.set_score_request", false]], "set_score_request() (sklearn.svm.nusvr method)": [[910, "sklearn.svm.NuSVR.set_score_request", false]], "set_score_request() (sklearn.svm.svc method)": [[912, "sklearn.svm.SVC.set_score_request", false]], "set_score_request() (sklearn.svm.svr method)": [[913, "sklearn.svm.SVR.set_score_request", false]], "set_score_request() (sklearn.tree.decisiontreeclassifier method)": [[915, "sklearn.tree.DecisionTreeClassifier.set_score_request", false]], "set_score_request() (sklearn.tree.decisiontreeregressor method)": [[916, "sklearn.tree.DecisionTreeRegressor.set_score_request", false]], "set_score_request() (sklearn.tree.extratreeclassifier method)": [[917, "sklearn.tree.ExtraTreeClassifier.set_score_request", false]], "set_score_request() (sklearn.tree.extratreeregressor method)": [[918, "sklearn.tree.ExtraTreeRegressor.set_score_request", false]], "set_split_request() (sklearn.model_selection.groupkfold method)": [[804, "sklearn.model_selection.GroupKFold.set_split_request", false]], "set_split_request() (sklearn.model_selection.groupshufflesplit method)": [[805, "sklearn.model_selection.GroupShuffleSplit.set_split_request", false]], "set_split_request() (sklearn.model_selection.leaveonegroupout method)": [[810, "sklearn.model_selection.LeaveOneGroupOut.set_split_request", false]], "set_split_request() (sklearn.model_selection.leavepgroupsout method)": [[812, "sklearn.model_selection.LeavePGroupsOut.set_split_request", false]], "set_split_request() (sklearn.model_selection.stratifiedgroupkfold method)": [[821, "sklearn.model_selection.StratifiedGroupKFold.set_split_request", false]], "set_transform_request() (sklearn.cross_decomposition.cca method)": [[482, "sklearn.cross_decomposition.CCA.set_transform_request", false]], "set_transform_request() (sklearn.cross_decomposition.plscanonical method)": [[483, "sklearn.cross_decomposition.PLSCanonical.set_transform_request", false]], "set_transform_request() (sklearn.cross_decomposition.plsregression method)": [[484, "sklearn.cross_decomposition.PLSRegression.set_transform_request", false]], "set_transform_request() (sklearn.decomposition.fastica method)": [[534, "sklearn.decomposition.FastICA.set_transform_request", false]], "set_transform_request() (sklearn.decomposition.latentdirichletallocation method)": [[537, "sklearn.decomposition.LatentDirichletAllocation.set_transform_request", false]], "set_transform_request() (sklearn.feature_extraction.text.tfidftransformer method)": [[592, "sklearn.feature_extraction.text.TfidfTransformer.set_transform_request", false]], "set_transform_request() (sklearn.preprocessing.binarizer method)": [[870, "sklearn.preprocessing.Binarizer.set_transform_request", false]], "set_transform_request() (sklearn.preprocessing.kernelcenterer method)": [[873, "sklearn.preprocessing.KernelCenterer.set_transform_request", false]], "set_transform_request() (sklearn.preprocessing.normalizer method)": [[879, "sklearn.preprocessing.Normalizer.set_transform_request", false]], "set_transform_request() (sklearn.preprocessing.standardscaler method)": [[887, "sklearn.preprocessing.StandardScaler.set_transform_request", false]], "setdefault() (sklearn.utils.bunch method)": [[922, "sklearn.utils.Bunch.setdefault", false]], "sgdclassifier (class in sklearn.linear_model)": [[679, "sklearn.linear_model.SGDClassifier", false]], "sgdoneclasssvm (class in sklearn.linear_model)": [[680, "sklearn.linear_model.SGDOneClassSVM", false]], "sgdregressor (class in sklearn.linear_model)": [[681, "sklearn.linear_model.SGDRegressor", false]], "show_versions() (in module sklearn)": [[906, "sklearn.show_versions", false]], "shrunk_covariance() (in module sklearn.covariance)": [[481, "sklearn.covariance.shrunk_covariance", false]], "shrunkcovariance (class in sklearn.covariance)": [[476, "sklearn.covariance.ShrunkCovariance", false]], "shuffle() (in module sklearn.utils)": [[977, "sklearn.utils.shuffle", false]], "shufflesplit (class in sklearn.model_selection)": [[820, "sklearn.model_selection.ShuffleSplit", false]], "sigmoid_kernel() (in module sklearn.metrics.pairwise)": [[780, "sklearn.metrics.pairwise.sigmoid_kernel", false]], "silhouette_samples() (in module sklearn.metrics)": [[795, "sklearn.metrics.silhouette_samples", false]], "silhouette_score() (in module sklearn.metrics)": [[796, "sklearn.metrics.silhouette_score", false]], "simpleimputer (class in sklearn.impute)": [[633, "sklearn.impute.SimpleImputer", false]], "single_source_shortest_path_length() (in module sklearn.utils.graph)": [[957, "sklearn.utils.graph.single_source_shortest_path_length", false]], "skewedchi2sampler (class in sklearn.kernel_approximation)": [[645, "sklearn.kernel_approximation.SkewedChi2Sampler", false]], "sklearn": [[3, "module-sklearn", false]], "sklearn.base": [[4, "module-sklearn.base", false]], "sklearn.calibration": [[5, "module-sklearn.calibration", false]], "sklearn.cluster": [[6, "module-sklearn.cluster", false]], "sklearn.compose": [[7, "module-sklearn.compose", false]], "sklearn.covariance": [[8, "module-sklearn.covariance", false]], "sklearn.cross_decomposition": [[9, "module-sklearn.cross_decomposition", false]], "sklearn.datasets": [[10, "module-sklearn.datasets", false]], "sklearn.decomposition": [[11, "module-sklearn.decomposition", false]], "sklearn.discriminant_analysis": [[12, "module-sklearn.discriminant_analysis", false]], "sklearn.dummy": [[13, "module-sklearn.dummy", false]], "sklearn.ensemble": [[14, "module-sklearn.ensemble", false]], "sklearn.exceptions": [[15, "module-sklearn.exceptions", false]], "sklearn.experimental": [[16, "module-sklearn.experimental", false]], "sklearn.experimental.enable_halving_search_cv": [[581, "module-sklearn.experimental.enable_halving_search_cv", false]], "sklearn.experimental.enable_iterative_imputer": [[582, "module-sklearn.experimental.enable_iterative_imputer", false]], "sklearn.feature_extraction": [[17, "module-sklearn.feature_extraction", false]], "sklearn.feature_extraction.image": [[17, "module-sklearn.feature_extraction.image", false]], "sklearn.feature_extraction.text": [[17, "module-sklearn.feature_extraction.text", false]], "sklearn.feature_selection": [[18, "module-sklearn.feature_selection", false]], "sklearn.frozen": [[19, "module-sklearn.frozen", false]], "sklearn.gaussian_process": [[20, "module-sklearn.gaussian_process", false]], "sklearn.gaussian_process.kernels": [[20, "module-sklearn.gaussian_process.kernels", false]], "sklearn.impute": [[21, "module-sklearn.impute", false]], "sklearn.inspection": [[22, "module-sklearn.inspection", false]], "sklearn.isotonic": [[23, "module-sklearn.isotonic", false]], "sklearn.kernel_approximation": [[24, "module-sklearn.kernel_approximation", false]], "sklearn.kernel_ridge": [[25, "module-sklearn.kernel_ridge", false]], "sklearn.linear_model": [[26, "module-sklearn.linear_model", false]], "sklearn.manifold": [[27, "module-sklearn.manifold", false]], "sklearn.metrics": [[28, "module-sklearn.metrics", false]], "sklearn.metrics.cluster": [[28, "module-sklearn.metrics.cluster", false]], "sklearn.metrics.pairwise": [[28, "module-sklearn.metrics.pairwise", false]], "sklearn.mixture": [[29, "module-sklearn.mixture", false]], "sklearn.model_selection": [[30, "module-sklearn.model_selection", false]], "sklearn.multiclass": [[31, "module-sklearn.multiclass", false]], "sklearn.multioutput": [[32, "module-sklearn.multioutput", false]], "sklearn.naive_bayes": [[33, "module-sklearn.naive_bayes", false]], "sklearn.neighbors": [[34, "module-sklearn.neighbors", false]], "sklearn.neural_network": [[35, "module-sklearn.neural_network", false]], "sklearn.pipeline": [[36, "module-sklearn.pipeline", false]], "sklearn.preprocessing": [[37, "module-sklearn.preprocessing", false]], "sklearn.random_projection": [[38, "module-sklearn.random_projection", false]], "sklearn.semi_supervised": [[39, "module-sklearn.semi_supervised", false]], "sklearn.svm": [[40, "module-sklearn.svm", false]], "sklearn.tree": [[41, "module-sklearn.tree", false]], "sklearn.utils": [[42, "module-sklearn.utils", false]], "sklearn.utils.arrayfuncs": [[42, "module-sklearn.utils.arrayfuncs", false]], "sklearn.utils.class_weight": [[42, "module-sklearn.utils.class_weight", false]], "sklearn.utils.discovery": [[42, "module-sklearn.utils.discovery", false]], "sklearn.utils.estimator_checks": [[42, "module-sklearn.utils.estimator_checks", false]], "sklearn.utils.extmath": [[42, "module-sklearn.utils.extmath", false]], "sklearn.utils.graph": [[42, "module-sklearn.utils.graph", false]], "sklearn.utils.metadata_routing": [[42, "module-sklearn.utils.metadata_routing", false]], "sklearn.utils.metaestimators": [[42, "module-sklearn.utils.metaestimators", false]], "sklearn.utils.multiclass": [[42, "module-sklearn.utils.multiclass", false]], "sklearn.utils.parallel": [[42, "module-sklearn.utils.parallel", false]], "sklearn.utils.random": [[42, "module-sklearn.utils.random", false]], "sklearn.utils.sparsefuncs": [[42, "module-sklearn.utils.sparsefuncs", false]], "sklearn.utils.sparsefuncs_fast": [[42, "module-sklearn.utils.sparsefuncs_fast", false]], "sklearn.utils.validation": [[42, "module-sklearn.utils.validation", false]], "slep": [[389, "term-SLEP", true]], "sleps": [[389, "term-SLEPs", true]], "smacof() (in module sklearn.manifold)": [[697, "sklearn.manifold.smacof", false]], "sort_graph_by_row_values() (in module sklearn.neighbors)": [[862, "sklearn.neighbors.sort_graph_by_row_values", false]], "sparse graph": [[389, "term-sparse-graph", true]], "sparse matrix": [[389, "term-sparse-matrix", true]], "sparse_coef_ (sklearn.linear_model.elasticnet property)": [[649, "sklearn.linear_model.ElasticNet.sparse_coef_", false]], "sparse_coef_ (sklearn.linear_model.lasso property)": [[655, "sklearn.linear_model.Lasso.sparse_coef_", false]], "sparse_coef_ (sklearn.linear_model.multitaskelasticnet property)": [[663, "sklearn.linear_model.MultiTaskElasticNet.sparse_coef_", false]], "sparse_coef_ (sklearn.linear_model.multitasklasso property)": [[665, "sklearn.linear_model.MultiTaskLasso.sparse_coef_", false]], "sparse_encode() (in module sklearn.decomposition)": [[549, "sklearn.decomposition.sparse_encode", false]], "sparsecoder (class in sklearn.decomposition)": [[543, "sklearn.decomposition.SparseCoder", false]], "sparsepca (class in sklearn.decomposition)": [[544, "sklearn.decomposition.SparsePCA", false]], "sparserandomprojection (class in sklearn.random_projection)": [[900, "sklearn.random_projection.SparseRandomProjection", false]], "sparsify() (sklearn.linear_model.logisticregression method)": [[661, "sklearn.linear_model.LogisticRegression.sparsify", false]], "sparsify() (sklearn.linear_model.logisticregressioncv method)": [[662, "sklearn.linear_model.LogisticRegressionCV.sparsify", false]], "sparsify() (sklearn.linear_model.passiveaggressiveclassifier method)": [[669, "sklearn.linear_model.PassiveAggressiveClassifier.sparsify", false]], "sparsify() (sklearn.linear_model.passiveaggressiveregressor method)": [[670, "sklearn.linear_model.PassiveAggressiveRegressor.sparsify", false]], "sparsify() (sklearn.linear_model.perceptron method)": [[671, "sklearn.linear_model.Perceptron.sparsify", false]], "sparsify() (sklearn.linear_model.sgdclassifier method)": [[679, "sklearn.linear_model.SGDClassifier.sparsify", false]], "sparsify() (sklearn.linear_model.sgdoneclasssvm method)": [[680, "sklearn.linear_model.SGDOneClassSVM.sparsify", false]], "sparsify() (sklearn.linear_model.sgdregressor method)": [[681, "sklearn.linear_model.SGDRegressor.sparsify", false]], "sparsify() (sklearn.svm.linearsvc method)": [[907, "sklearn.svm.LinearSVC.sparsify", false]], "spectral_clustering() (in module sklearn.cluster)": [[462, "sklearn.cluster.spectral_clustering", false]], "spectral_embedding() (in module sklearn.manifold)": [[698, "sklearn.manifold.spectral_embedding", false]], "spectralbiclustering (class in sklearn.cluster)": [[451, "sklearn.cluster.SpectralBiclustering", false]], "spectralclustering (class in sklearn.cluster)": [[452, "sklearn.cluster.SpectralClustering", false]], "spectralcoclustering (class in sklearn.cluster)": [[453, "sklearn.cluster.SpectralCoclustering", false]], "spectralembedding (class in sklearn.manifold)": [[694, "sklearn.manifold.SpectralEmbedding", false]], "splinetransformer (class in sklearn.preprocessing)": [[886, "sklearn.preprocessing.SplineTransformer", false]], "split": [[389, "term-split", true]], "split() (sklearn.model_selection.groupkfold method)": [[804, "sklearn.model_selection.GroupKFold.split", false]], "split() (sklearn.model_selection.groupshufflesplit method)": [[805, "sklearn.model_selection.GroupShuffleSplit.split", false]], "split() (sklearn.model_selection.kfold method)": [[808, "sklearn.model_selection.KFold.split", false]], "split() (sklearn.model_selection.leaveonegroupout method)": [[810, "sklearn.model_selection.LeaveOneGroupOut.split", false]], "split() (sklearn.model_selection.leaveoneout method)": [[811, "sklearn.model_selection.LeaveOneOut.split", false]], "split() (sklearn.model_selection.leavepgroupsout method)": [[812, "sklearn.model_selection.LeavePGroupsOut.split", false]], "split() (sklearn.model_selection.leavepout method)": [[813, "sklearn.model_selection.LeavePOut.split", false]], "split() (sklearn.model_selection.predefinedsplit method)": [[816, "sklearn.model_selection.PredefinedSplit.split", false]], "split() (sklearn.model_selection.repeatedkfold method)": [[818, "sklearn.model_selection.RepeatedKFold.split", false]], "split() (sklearn.model_selection.repeatedstratifiedkfold method)": [[819, "sklearn.model_selection.RepeatedStratifiedKFold.split", false]], "split() (sklearn.model_selection.shufflesplit method)": [[820, "sklearn.model_selection.ShuffleSplit.split", false]], "split() (sklearn.model_selection.stratifiedgroupkfold method)": [[821, "sklearn.model_selection.StratifiedGroupKFold.split", false]], "split() (sklearn.model_selection.stratifiedkfold method)": [[822, "sklearn.model_selection.StratifiedKFold.split", false]], "split() (sklearn.model_selection.stratifiedshufflesplit method)": [[823, "sklearn.model_selection.StratifiedShuffleSplit.split", false]], "split() (sklearn.model_selection.timeseriessplit method)": [[824, "sklearn.model_selection.TimeSeriesSplit.split", false]], "stackingclassifier (class in sklearn.ensemble)": [[568, "sklearn.ensemble.StackingClassifier", false]], "stackingregressor (class in sklearn.ensemble)": [[569, "sklearn.ensemble.StackingRegressor", false]], "staged_decision_function() (sklearn.ensemble.adaboostclassifier method)": [[554, "sklearn.ensemble.AdaBoostClassifier.staged_decision_function", false]], "staged_decision_function() (sklearn.ensemble.gradientboostingclassifier method)": [[560, "sklearn.ensemble.GradientBoostingClassifier.staged_decision_function", false]], "staged_decision_function() (sklearn.ensemble.histgradientboostingclassifier method)": [[562, "sklearn.ensemble.HistGradientBoostingClassifier.staged_decision_function", false]], "staged_predict() (sklearn.ensemble.adaboostclassifier method)": [[554, "sklearn.ensemble.AdaBoostClassifier.staged_predict", false]], "staged_predict() (sklearn.ensemble.adaboostregressor method)": [[555, "sklearn.ensemble.AdaBoostRegressor.staged_predict", false]], "staged_predict() (sklearn.ensemble.gradientboostingclassifier method)": [[560, "sklearn.ensemble.GradientBoostingClassifier.staged_predict", false]], "staged_predict() (sklearn.ensemble.gradientboostingregressor method)": [[561, "sklearn.ensemble.GradientBoostingRegressor.staged_predict", false]], "staged_predict() (sklearn.ensemble.histgradientboostingclassifier method)": [[562, "sklearn.ensemble.HistGradientBoostingClassifier.staged_predict", false]], "staged_predict() (sklearn.ensemble.histgradientboostingregressor method)": [[563, "sklearn.ensemble.HistGradientBoostingRegressor.staged_predict", false]], "staged_predict_proba() (sklearn.ensemble.adaboostclassifier method)": [[554, "sklearn.ensemble.AdaBoostClassifier.staged_predict_proba", false]], "staged_predict_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[560, "sklearn.ensemble.GradientBoostingClassifier.staged_predict_proba", false]], "staged_predict_proba() (sklearn.ensemble.histgradientboostingclassifier method)": [[562, "sklearn.ensemble.HistGradientBoostingClassifier.staged_predict_proba", false]], "staged_score() (sklearn.ensemble.adaboostclassifier method)": [[554, "sklearn.ensemble.AdaBoostClassifier.staged_score", false]], "staged_score() (sklearn.ensemble.adaboostregressor method)": [[555, "sklearn.ensemble.AdaBoostRegressor.staged_score", false]], "standardscaler (class in sklearn.preprocessing)": [[887, "sklearn.preprocessing.StandardScaler", false]], "stateless": [[389, "term-stateless", true]], "stratifiedgroupkfold (class in sklearn.model_selection)": [[821, "sklearn.model_selection.StratifiedGroupKFold", false]], "stratifiedkfold (class in sklearn.model_selection)": [[822, "sklearn.model_selection.StratifiedKFold", false]], "stratifiedshufflesplit (class in sklearn.model_selection)": [[823, "sklearn.model_selection.StratifiedShuffleSplit", false]], "sum (class in sklearn.gaussian_process.kernels)": [[627, "sklearn.gaussian_process.kernels.Sum", false]], "supervised": [[389, "term-supervised", true]], "supervised learning": [[389, "term-supervised-learning", true]], "svc (class in sklearn.svm)": [[912, "sklearn.svm.SVC", false]], "svr (class in sklearn.svm)": [[913, "sklearn.svm.SVR", false]], "tags (class in sklearn.utils)": [[926, "sklearn.utils.Tags", false]], "target": [[389, "term-target", true]], "targetencoder (class in sklearn.preprocessing)": [[888, "sklearn.preprocessing.TargetEncoder", false]], "targets": [[389, "term-targets", true]], "targettags (class in sklearn.utils)": [[927, "sklearn.utils.TargetTags", false]], "tfidftransformer (class in sklearn.feature_extraction.text)": [[592, "sklearn.feature_extraction.text.TfidfTransformer", false]], "tfidfvectorizer (class in sklearn.feature_extraction.text)": [[593, "sklearn.feature_extraction.text.TfidfVectorizer", false]], "theilsenregressor (class in sklearn.linear_model)": [[682, "sklearn.linear_model.TheilSenRegressor", false]], "theta (sklearn.gaussian_process.kernels.compoundkernel property)": [[615, "sklearn.gaussian_process.kernels.CompoundKernel.theta", false]], "theta (sklearn.gaussian_process.kernels.constantkernel property)": [[616, "sklearn.gaussian_process.kernels.ConstantKernel.theta", false]], "theta (sklearn.gaussian_process.kernels.dotproduct property)": [[617, "sklearn.gaussian_process.kernels.DotProduct.theta", false]], "theta (sklearn.gaussian_process.kernels.exponentiation property)": [[619, "sklearn.gaussian_process.kernels.Exponentiation.theta", false]], "theta (sklearn.gaussian_process.kernels.expsinesquared property)": [[618, "sklearn.gaussian_process.kernels.ExpSineSquared.theta", false]], "theta (sklearn.gaussian_process.kernels.kernel property)": [[621, "sklearn.gaussian_process.kernels.Kernel.theta", false]], "theta (sklearn.gaussian_process.kernels.matern property)": [[622, "sklearn.gaussian_process.kernels.Matern.theta", false]], "theta (sklearn.gaussian_process.kernels.pairwisekernel property)": [[623, "sklearn.gaussian_process.kernels.PairwiseKernel.theta", false]], "theta (sklearn.gaussian_process.kernels.product property)": [[624, "sklearn.gaussian_process.kernels.Product.theta", false]], "theta (sklearn.gaussian_process.kernels.rationalquadratic property)": [[626, "sklearn.gaussian_process.kernels.RationalQuadratic.theta", false]], "theta (sklearn.gaussian_process.kernels.rbf property)": [[625, "sklearn.gaussian_process.kernels.RBF.theta", false]], "theta (sklearn.gaussian_process.kernels.sum property)": [[627, "sklearn.gaussian_process.kernels.Sum.theta", false]], "theta (sklearn.gaussian_process.kernels.whitekernel property)": [[628, "sklearn.gaussian_process.kernels.WhiteKernel.theta", false]], "threshold_ (sklearn.feature_selection.selectfrommodel property)": [[599, "sklearn.feature_selection.SelectFromModel.threshold_", false]], "timeseriessplit (class in sklearn.model_selection)": [[824, "sklearn.model_selection.TimeSeriesSplit", false]], "top_k_accuracy_score() (in module sklearn.metrics)": [[797, "sklearn.metrics.top_k_accuracy_score", false]], "train_test_split() (in module sklearn.model_selection)": [[833, "sklearn.model_selection.train_test_split", false]], "transduction": [[389, "term-transduction", true]], "transductive": [[389, "term-transductive", true]], "transform": [[389, "term-transform", true]], "transform() (sklearn.cluster.birch method)": [[442, "sklearn.cluster.Birch.transform", false]], "transform() (sklearn.cluster.bisectingkmeans method)": [[443, "sklearn.cluster.BisectingKMeans.transform", false]], "transform() (sklearn.cluster.featureagglomeration method)": [[445, "sklearn.cluster.FeatureAgglomeration.transform", false]], "transform() (sklearn.cluster.kmeans method)": [[447, "sklearn.cluster.KMeans.transform", false]], "transform() (sklearn.cluster.minibatchkmeans method)": [[449, "sklearn.cluster.MiniBatchKMeans.transform", false]], "transform() (sklearn.compose.columntransformer method)": [[464, "sklearn.compose.ColumnTransformer.transform", false]], "transform() (sklearn.cross_decomposition.cca method)": [[482, "sklearn.cross_decomposition.CCA.transform", false]], "transform() (sklearn.cross_decomposition.plscanonical method)": [[483, "sklearn.cross_decomposition.PLSCanonical.transform", false]], "transform() (sklearn.cross_decomposition.plsregression method)": [[484, "sklearn.cross_decomposition.PLSRegression.transform", false]], "transform() (sklearn.cross_decomposition.plssvd method)": [[485, "sklearn.cross_decomposition.PLSSVD.transform", false]], "transform() (sklearn.decomposition.dictionarylearning method)": [[532, "sklearn.decomposition.DictionaryLearning.transform", false]], "transform() (sklearn.decomposition.factoranalysis method)": [[533, "sklearn.decomposition.FactorAnalysis.transform", false]], "transform() (sklearn.decomposition.fastica method)": [[534, "sklearn.decomposition.FastICA.transform", false]], "transform() (sklearn.decomposition.incrementalpca method)": [[535, "sklearn.decomposition.IncrementalPCA.transform", false]], "transform() (sklearn.decomposition.kernelpca method)": [[536, "sklearn.decomposition.KernelPCA.transform", false]], "transform() (sklearn.decomposition.latentdirichletallocation method)": [[537, "sklearn.decomposition.LatentDirichletAllocation.transform", false]], "transform() (sklearn.decomposition.minibatchdictionarylearning method)": [[538, "sklearn.decomposition.MiniBatchDictionaryLearning.transform", false]], "transform() (sklearn.decomposition.minibatchnmf method)": [[539, "sklearn.decomposition.MiniBatchNMF.transform", false]], "transform() (sklearn.decomposition.minibatchsparsepca method)": [[540, "sklearn.decomposition.MiniBatchSparsePCA.transform", false]], "transform() (sklearn.decomposition.nmf method)": [[541, "sklearn.decomposition.NMF.transform", false]], "transform() (sklearn.decomposition.pca method)": [[542, "sklearn.decomposition.PCA.transform", false]], "transform() (sklearn.decomposition.sparsecoder method)": [[543, "sklearn.decomposition.SparseCoder.transform", false]], "transform() (sklearn.decomposition.sparsepca method)": [[544, "sklearn.decomposition.SparsePCA.transform", false]], "transform() (sklearn.decomposition.truncatedsvd method)": [[545, "sklearn.decomposition.TruncatedSVD.transform", false]], "transform() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[550, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.transform", false]], "transform() (sklearn.ensemble.randomtreesembedding method)": [[567, "sklearn.ensemble.RandomTreesEmbedding.transform", false]], "transform() (sklearn.ensemble.stackingclassifier method)": [[568, "sklearn.ensemble.StackingClassifier.transform", false]], "transform() (sklearn.ensemble.stackingregressor method)": [[569, "sklearn.ensemble.StackingRegressor.transform", false]], "transform() (sklearn.ensemble.votingclassifier method)": [[570, "sklearn.ensemble.VotingClassifier.transform", false]], "transform() (sklearn.ensemble.votingregressor method)": [[571, "sklearn.ensemble.VotingRegressor.transform", false]], "transform() (sklearn.feature_extraction.dictvectorizer method)": [[583, "sklearn.feature_extraction.DictVectorizer.transform", false]], "transform() (sklearn.feature_extraction.featurehasher method)": [[584, "sklearn.feature_extraction.FeatureHasher.transform", false]], "transform() (sklearn.feature_extraction.image.patchextractor method)": [[585, "sklearn.feature_extraction.image.PatchExtractor.transform", false]], "transform() (sklearn.feature_extraction.text.countvectorizer method)": [[590, "sklearn.feature_extraction.text.CountVectorizer.transform", false]], "transform() (sklearn.feature_extraction.text.hashingvectorizer method)": [[591, "sklearn.feature_extraction.text.HashingVectorizer.transform", false]], "transform() (sklearn.feature_extraction.text.tfidftransformer method)": [[592, "sklearn.feature_extraction.text.TfidfTransformer.transform", false]], "transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[593, "sklearn.feature_extraction.text.TfidfVectorizer.transform", false]], "transform() (sklearn.feature_selection.genericunivariateselect method)": [[594, "sklearn.feature_selection.GenericUnivariateSelect.transform", false]], "transform() (sklearn.feature_selection.rfe method)": [[595, "sklearn.feature_selection.RFE.transform", false]], "transform() (sklearn.feature_selection.rfecv method)": [[596, "sklearn.feature_selection.RFECV.transform", false]], "transform() (sklearn.feature_selection.selectfdr method)": [[597, "sklearn.feature_selection.SelectFdr.transform", false]], "transform() (sklearn.feature_selection.selectfpr method)": [[598, "sklearn.feature_selection.SelectFpr.transform", false]], "transform() (sklearn.feature_selection.selectfrommodel method)": [[599, "sklearn.feature_selection.SelectFromModel.transform", false]], "transform() (sklearn.feature_selection.selectfwe method)": [[600, "sklearn.feature_selection.SelectFwe.transform", false]], "transform() (sklearn.feature_selection.selectkbest method)": [[601, "sklearn.feature_selection.SelectKBest.transform", false]], "transform() (sklearn.feature_selection.selectormixin method)": [[603, "sklearn.feature_selection.SelectorMixin.transform", false]], "transform() (sklearn.feature_selection.selectpercentile method)": [[602, "sklearn.feature_selection.SelectPercentile.transform", false]], "transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[604, "sklearn.feature_selection.SequentialFeatureSelector.transform", false]], "transform() (sklearn.feature_selection.variancethreshold method)": [[605, "sklearn.feature_selection.VarianceThreshold.transform", false]], "transform() (sklearn.impute.iterativeimputer method)": [[630, "sklearn.impute.IterativeImputer.transform", false]], "transform() (sklearn.impute.knnimputer method)": [[631, "sklearn.impute.KNNImputer.transform", false]], "transform() (sklearn.impute.missingindicator method)": [[632, "sklearn.impute.MissingIndicator.transform", false]], "transform() (sklearn.impute.simpleimputer method)": [[633, "sklearn.impute.SimpleImputer.transform", false]], "transform() (sklearn.isotonic.isotonicregression method)": [[638, "sklearn.isotonic.IsotonicRegression.transform", false]], "transform() (sklearn.kernel_approximation.additivechi2sampler method)": [[641, "sklearn.kernel_approximation.AdditiveChi2Sampler.transform", false]], "transform() (sklearn.kernel_approximation.nystroem method)": [[642, "sklearn.kernel_approximation.Nystroem.transform", false]], "transform() (sklearn.kernel_approximation.polynomialcountsketch method)": [[643, "sklearn.kernel_approximation.PolynomialCountSketch.transform", false]], "transform() (sklearn.kernel_approximation.rbfsampler method)": [[644, "sklearn.kernel_approximation.RBFSampler.transform", false]], "transform() (sklearn.kernel_approximation.skewedchi2sampler method)": [[645, "sklearn.kernel_approximation.SkewedChi2Sampler.transform", false]], "transform() (sklearn.manifold.isomap method)": [[691, "sklearn.manifold.Isomap.transform", false]], "transform() (sklearn.manifold.locallylinearembedding method)": [[692, "sklearn.manifold.LocallyLinearEmbedding.transform", false]], "transform() (sklearn.model_selection.gridsearchcv method)": [[803, "sklearn.model_selection.GridSearchCV.transform", false]], "transform() (sklearn.model_selection.halvinggridsearchcv method)": [[806, "sklearn.model_selection.HalvingGridSearchCV.transform", false]], "transform() (sklearn.model_selection.halvingrandomsearchcv method)": [[807, "sklearn.model_selection.HalvingRandomSearchCV.transform", false]], "transform() (sklearn.model_selection.randomizedsearchcv method)": [[817, "sklearn.model_selection.RandomizedSearchCV.transform", false]], "transform() (sklearn.neighbors.kneighborstransformer method)": [[851, "sklearn.neighbors.KNeighborsTransformer.transform", false]], "transform() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[856, "sklearn.neighbors.NeighborhoodComponentsAnalysis.transform", false]], "transform() (sklearn.neighbors.radiusneighborstransformer method)": [[859, "sklearn.neighbors.RadiusNeighborsTransformer.transform", false]], "transform() (sklearn.neural_network.bernoullirbm method)": [[863, "sklearn.neural_network.BernoulliRBM.transform", false]], "transform() (sklearn.pipeline.featureunion method)": [[866, "sklearn.pipeline.FeatureUnion.transform", false]], "transform() (sklearn.pipeline.pipeline method)": [[867, "sklearn.pipeline.Pipeline.transform", false]], "transform() (sklearn.preprocessing.binarizer method)": [[870, "sklearn.preprocessing.Binarizer.transform", false]], "transform() (sklearn.preprocessing.functiontransformer method)": [[871, "sklearn.preprocessing.FunctionTransformer.transform", false]], "transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[872, "sklearn.preprocessing.KBinsDiscretizer.transform", false]], "transform() (sklearn.preprocessing.kernelcenterer method)": [[873, "sklearn.preprocessing.KernelCenterer.transform", false]], "transform() (sklearn.preprocessing.labelbinarizer method)": [[874, "sklearn.preprocessing.LabelBinarizer.transform", false]], "transform() (sklearn.preprocessing.labelencoder method)": [[875, "sklearn.preprocessing.LabelEncoder.transform", false]], "transform() (sklearn.preprocessing.maxabsscaler method)": [[876, "sklearn.preprocessing.MaxAbsScaler.transform", false]], "transform() (sklearn.preprocessing.minmaxscaler method)": [[877, "sklearn.preprocessing.MinMaxScaler.transform", false]], "transform() (sklearn.preprocessing.multilabelbinarizer method)": [[878, "sklearn.preprocessing.MultiLabelBinarizer.transform", false]], "transform() (sklearn.preprocessing.normalizer method)": [[879, "sklearn.preprocessing.Normalizer.transform", false]], "transform() (sklearn.preprocessing.onehotencoder method)": [[880, "sklearn.preprocessing.OneHotEncoder.transform", false]], "transform() (sklearn.preprocessing.ordinalencoder method)": [[881, "sklearn.preprocessing.OrdinalEncoder.transform", false]], "transform() (sklearn.preprocessing.polynomialfeatures method)": [[882, "sklearn.preprocessing.PolynomialFeatures.transform", false]], "transform() (sklearn.preprocessing.powertransformer method)": [[883, "sklearn.preprocessing.PowerTransformer.transform", false]], "transform() (sklearn.preprocessing.quantiletransformer method)": [[884, "sklearn.preprocessing.QuantileTransformer.transform", false]], "transform() (sklearn.preprocessing.robustscaler method)": [[885, "sklearn.preprocessing.RobustScaler.transform", false]], "transform() (sklearn.preprocessing.splinetransformer method)": [[886, "sklearn.preprocessing.SplineTransformer.transform", false]], "transform() (sklearn.preprocessing.standardscaler method)": [[887, "sklearn.preprocessing.StandardScaler.transform", false]], "transform() (sklearn.preprocessing.targetencoder method)": [[888, "sklearn.preprocessing.TargetEncoder.transform", false]], "transform() (sklearn.random_projection.gaussianrandomprojection method)": [[899, "sklearn.random_projection.GaussianRandomProjection.transform", false]], "transform() (sklearn.random_projection.sparserandomprojection method)": [[900, "sklearn.random_projection.SparseRandomProjection.transform", false]], "transformedtargetregressor (class in sklearn.compose)": [[465, "sklearn.compose.TransformedTargetRegressor", false]], "transformer": [[389, "term-transformer", true]], "transformermixin (class in sklearn.base)": [[431, "sklearn.base.TransformerMixin", false]], "transformers": [[389, "term-transformers", true]], "transformertags (class in sklearn.utils)": [[928, "sklearn.utils.TransformerTags", false]], "truncatedsvd (class in sklearn.decomposition)": [[545, "sklearn.decomposition.TruncatedSVD", false]], "trustworthiness() (in module sklearn.manifold)": [[699, "sklearn.manifold.trustworthiness", false]], "tsne (class in sklearn.manifold)": [[695, "sklearn.manifold.TSNE", false]], "tunedthresholdclassifiercv (class in sklearn.model_selection)": [[825, "sklearn.model_selection.TunedThresholdClassifierCV", false]], "tweedieregressor (class in sklearn.linear_model)": [[683, "sklearn.linear_model.TweedieRegressor", false]], "two_point_correlation() (sklearn.neighbors.balltree method)": [[847, "sklearn.neighbors.BallTree.two_point_correlation", false]], "two_point_correlation() (sklearn.neighbors.kdtree method)": [[848, "sklearn.neighbors.KDTree.two_point_correlation", false]], "type_of_target() (in module sklearn.utils.multiclass)": [[966, "sklearn.utils.multiclass.type_of_target", false]], "undefinedmetricwarning": [[580, "sklearn.exceptions.UndefinedMetricWarning", false]], "unique_labels() (in module sklearn.utils.multiclass)": [[967, "sklearn.utils.multiclass.unique_labels", false]], "unlabeled": [[389, "term-unlabeled", true]], "unlabeled data": [[389, "term-unlabeled-data", true]], "unsupervised": [[389, "term-unsupervised", true]], "unsupervised learning": [[389, "term-unsupervised-learning", true]], "update() (sklearn.utils.bunch method)": [[922, "sklearn.utils.Bunch.update", false]], "v_measure_score() (in module sklearn.metrics)": [[798, "sklearn.metrics.v_measure_score", false]], "validate_data() (in module sklearn.utils.validation)": [[992, "sklearn.utils.validation.validate_data", false]], "validate_metadata() (sklearn.utils.metadata_routing.metadatarouter method)": [[960, "sklearn.utils.metadata_routing.MetadataRouter.validate_metadata", false]], "validation_curve() (in module sklearn.model_selection)": [[834, "sklearn.model_selection.validation_curve", false]], "validationcurvedisplay (class in sklearn.model_selection)": [[826, "sklearn.model_selection.ValidationCurveDisplay", false]], "value_type (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[620, "sklearn.gaussian_process.kernels.Hyperparameter.value_type", false]], "values() (sklearn.utils.bunch method)": [[922, "sklearn.utils.Bunch.values", false]], "variancethreshold (class in sklearn.feature_selection)": [[605, "sklearn.feature_selection.VarianceThreshold", false]], "vectorizer": [[389, "term-vectorizer", true]], "vectorizers": [[389, "term-vectorizers", true]], "verbose": [[389, "term-verbose", true]], "votingclassifier (class in sklearn.ensemble)": [[570, "sklearn.ensemble.VotingClassifier", false]], "votingregressor (class in sklearn.ensemble)": [[571, "sklearn.ensemble.VotingRegressor", false]], "ward_tree() (in module sklearn.cluster)": [[463, "sklearn.cluster.ward_tree", false]], "warm_start": [[389, "term-warm_start", true]], "weighted_mode() (in module sklearn.utils.extmath)": [[953, "sklearn.utils.extmath.weighted_mode", false]], "whitekernel (class in sklearn.gaussian_process.kernels)": [[628, "sklearn.gaussian_process.kernels.WhiteKernel", false]], "x": [[389, "term-X", true]], "xt": [[389, "term-Xt", true]], "y": [[389, "term-Y", true], [389, "term-y", true]], "zero_one_loss() (in module sklearn.metrics)": [[799, "sklearn.metrics.zero_one_loss", false]]}, "objects": {"": [[3, 0, 0, "-", "sklearn"]], "sklearn": [[4, 0, 0, "-", "base"], [5, 0, 0, "-", "calibration"], [6, 0, 0, "-", "cluster"], [7, 0, 0, "-", "compose"], [468, 4, 1, "", "config_context"], [8, 0, 0, "-", "covariance"], [9, 0, 0, "-", "cross_decomposition"], [10, 0, 0, "-", "datasets"], [11, 0, 0, "-", "decomposition"], [12, 0, 0, "-", "discriminant_analysis"], [13, 0, 0, "-", "dummy"], [14, 0, 0, "-", "ensemble"], [15, 0, 0, "-", "exceptions"], [16, 0, 0, "-", "experimental"], [17, 0, 0, "-", "feature_extraction"], [18, 0, 0, "-", "feature_selection"], [19, 0, 0, "-", "frozen"], [20, 0, 0, "-", "gaussian_process"], [629, 4, 1, "", "get_config"], [21, 0, 0, "-", "impute"], [22, 0, 0, "-", "inspection"], [23, 0, 0, "-", "isotonic"], [24, 0, 0, "-", "kernel_approximation"], [25, 0, 0, "-", "kernel_ridge"], [26, 0, 0, "-", "linear_model"], [27, 0, 0, "-", "manifold"], [28, 0, 0, "-", "metrics"], [29, 0, 0, "-", "mixture"], [30, 0, 0, "-", "model_selection"], [31, 0, 0, "-", "multiclass"], [32, 0, 0, "-", "multioutput"], [33, 0, 0, "-", "naive_bayes"], [34, 0, 0, "-", "neighbors"], [35, 0, 0, "-", "neural_network"], [36, 0, 0, "-", "pipeline"], [37, 0, 0, "-", "preprocessing"], [38, 0, 0, "-", "random_projection"], [39, 0, 0, "-", "semi_supervised"], [905, 4, 1, "", "set_config"], [906, 4, 1, "", "show_versions"], [40, 0, 0, "-", "svm"], [41, 0, 0, "-", "tree"], [42, 0, 0, "-", "utils"]], "sklearn.base": [[421, 1, 1, "", "BaseEstimator"], [422, 1, 1, "", "BiclusterMixin"], [423, 1, 1, "", "ClassNamePrefixFeaturesOutMixin"], [424, 1, 1, "", "ClassifierMixin"], [425, 1, 1, "", "ClusterMixin"], [426, 1, 1, "", "DensityMixin"], [427, 1, 1, "", "MetaEstimatorMixin"], [428, 1, 1, "", "OneToOneFeatureMixin"], [429, 1, 1, "", "OutlierMixin"], [430, 1, 1, "", "RegressorMixin"], [431, 1, 1, "", "TransformerMixin"], [432, 4, 1, "", "clone"], [433, 4, 1, "", "is_classifier"], [434, 4, 1, "", "is_clusterer"], [435, 4, 1, "", "is_outlier_detector"], [436, 4, 1, "", "is_regressor"]], "sklearn.base.BaseEstimator": [[421, 2, 1, "", "get_metadata_routing"], [421, 2, 1, "", "get_params"], [421, 2, 1, "", "set_params"]], "sklearn.base.BiclusterMixin": [[422, 3, 1, "", "biclusters_"], [422, 2, 1, "", "get_indices"], [422, 2, 1, "", "get_shape"], [422, 2, 1, "", "get_submatrix"]], "sklearn.base.ClassNamePrefixFeaturesOutMixin": [[423, 2, 1, "", "get_feature_names_out"]], "sklearn.base.ClassifierMixin": [[424, 2, 1, "", "score"]], "sklearn.base.ClusterMixin": [[425, 2, 1, "", "fit_predict"]], "sklearn.base.DensityMixin": [[426, 2, 1, "", "score"]], "sklearn.base.OneToOneFeatureMixin": [[428, 2, 1, "", "get_feature_names_out"]], "sklearn.base.OutlierMixin": [[429, 2, 1, "", "fit_predict"]], "sklearn.base.RegressorMixin": [[430, 2, 1, "", "score"]], "sklearn.base.TransformerMixin": [[431, 2, 1, "", "fit_transform"], [431, 2, 1, "", "set_output"]], "sklearn.calibration": [[437, 1, 1, "", "CalibratedClassifierCV"], [438, 1, 1, "", "CalibrationDisplay"], [439, 4, 1, "", "calibration_curve"]], "sklearn.calibration.CalibratedClassifierCV": [[437, 2, 1, "", "fit"], [437, 2, 1, "", "get_metadata_routing"], [437, 2, 1, "", "get_params"], [437, 2, 1, "", "predict"], [437, 2, 1, "", "predict_proba"], [437, 2, 1, "", "score"], [437, 2, 1, "", "set_fit_request"], [437, 2, 1, "", "set_params"], [437, 2, 1, "", "set_score_request"]], "sklearn.calibration.CalibrationDisplay": [[438, 2, 1, "", "from_estimator"], [438, 2, 1, "", "from_predictions"], [438, 2, 1, "", "plot"]], "sklearn.cluster": [[440, 1, 1, "", "AffinityPropagation"], [441, 1, 1, "", "AgglomerativeClustering"], [442, 1, 1, "", "Birch"], [443, 1, 1, "", "BisectingKMeans"], [444, 1, 1, "", "DBSCAN"], [445, 1, 1, "", "FeatureAgglomeration"], [446, 1, 1, "", "HDBSCAN"], [447, 1, 1, "", "KMeans"], [448, 1, 1, "", "MeanShift"], [449, 1, 1, "", "MiniBatchKMeans"], [450, 1, 1, "", "OPTICS"], [451, 1, 1, "", "SpectralBiclustering"], [452, 1, 1, "", "SpectralClustering"], [453, 1, 1, "", "SpectralCoclustering"], [454, 4, 1, "", "affinity_propagation"], [455, 4, 1, "", "cluster_optics_dbscan"], [456, 4, 1, "", "cluster_optics_xi"], [457, 4, 1, "", "compute_optics_graph"], [418, 4, 1, "", "dbscan"], [458, 4, 1, "", "estimate_bandwidth"], [459, 4, 1, "", "k_means"], [460, 4, 1, "", "kmeans_plusplus"], [461, 4, 1, "", "mean_shift"], [462, 4, 1, "", "spectral_clustering"], [463, 4, 1, "", "ward_tree"]], "sklearn.cluster.AffinityPropagation": [[440, 2, 1, "", "fit"], [440, 2, 1, "", "fit_predict"], [440, 2, 1, "", "get_metadata_routing"], [440, 2, 1, "", "get_params"], [440, 2, 1, "", "predict"], [440, 2, 1, "", "set_params"]], "sklearn.cluster.AgglomerativeClustering": [[441, 2, 1, "", "fit"], [441, 2, 1, "", "fit_predict"], [441, 2, 1, "", "get_metadata_routing"], [441, 2, 1, "", "get_params"], [441, 2, 1, "", "set_params"]], "sklearn.cluster.Birch": [[442, 2, 1, "", "fit"], [442, 2, 1, "", "fit_predict"], [442, 2, 1, "", "fit_transform"], [442, 2, 1, "", "get_feature_names_out"], [442, 2, 1, "", "get_metadata_routing"], [442, 2, 1, "", "get_params"], [442, 2, 1, "", "partial_fit"], [442, 2, 1, "", "predict"], [442, 2, 1, "", "set_output"], [442, 2, 1, "", "set_params"], [442, 2, 1, "", "transform"]], "sklearn.cluster.BisectingKMeans": [[443, 2, 1, "", "fit"], [443, 2, 1, "", "fit_predict"], [443, 2, 1, "", "fit_transform"], [443, 2, 1, "", "get_feature_names_out"], [443, 2, 1, "", "get_metadata_routing"], [443, 2, 1, "", "get_params"], [443, 2, 1, "", "predict"], [443, 2, 1, "", "score"], [443, 2, 1, "", "set_fit_request"], [443, 2, 1, "", "set_output"], [443, 2, 1, "", "set_params"], [443, 2, 1, "", "set_score_request"], [443, 2, 1, "", "transform"]], "sklearn.cluster.DBSCAN": [[444, 2, 1, "", "fit"], [444, 2, 1, "", "fit_predict"], [444, 2, 1, "", "get_metadata_routing"], [444, 2, 1, "", "get_params"], [444, 2, 1, "", "set_fit_request"], [444, 2, 1, "", "set_params"]], "sklearn.cluster.FeatureAgglomeration": [[445, 2, 1, "", "fit"], [445, 3, 1, "", "fit_predict"], [445, 2, 1, "", "fit_transform"], [445, 2, 1, "", "get_feature_names_out"], [445, 2, 1, "", "get_metadata_routing"], [445, 2, 1, "", "get_params"], [445, 2, 1, "", "inverse_transform"], [445, 2, 1, "", "set_output"], [445, 2, 1, "", "set_params"], [445, 2, 1, "", "transform"]], "sklearn.cluster.HDBSCAN": [[446, 2, 1, "", "dbscan_clustering"], [446, 2, 1, "", "fit"], [446, 2, 1, "", "fit_predict"], [446, 2, 1, "", "get_metadata_routing"], [446, 2, 1, "", "get_params"], [446, 2, 1, "", "set_params"]], "sklearn.cluster.KMeans": [[447, 2, 1, "", "fit"], [447, 2, 1, "", "fit_predict"], [447, 2, 1, "", "fit_transform"], [447, 2, 1, "", "get_feature_names_out"], [447, 2, 1, "", "get_metadata_routing"], [447, 2, 1, "", "get_params"], [447, 2, 1, "", "predict"], [447, 2, 1, "", "score"], [447, 2, 1, "", "set_fit_request"], [447, 2, 1, "", "set_output"], [447, 2, 1, "", "set_params"], [447, 2, 1, "", "set_score_request"], [447, 2, 1, "", "transform"]], "sklearn.cluster.MeanShift": [[448, 2, 1, "", "fit"], [448, 2, 1, "", "fit_predict"], [448, 2, 1, "", "get_metadata_routing"], [448, 2, 1, "", "get_params"], [448, 2, 1, "", "predict"], [448, 2, 1, "", "set_params"]], "sklearn.cluster.MiniBatchKMeans": [[449, 2, 1, "", "fit"], [449, 2, 1, "", "fit_predict"], [449, 2, 1, "", "fit_transform"], [449, 2, 1, "", "get_feature_names_out"], [449, 2, 1, "", "get_metadata_routing"], [449, 2, 1, "", "get_params"], [449, 2, 1, "", "partial_fit"], [449, 2, 1, "", "predict"], [449, 2, 1, "", "score"], [449, 2, 1, "", "set_fit_request"], [449, 2, 1, "", "set_output"], [449, 2, 1, "", "set_params"], [449, 2, 1, "", "set_partial_fit_request"], [449, 2, 1, "", "set_score_request"], [449, 2, 1, "", "transform"]], "sklearn.cluster.OPTICS": [[450, 2, 1, "", "fit"], [450, 2, 1, "", "fit_predict"], [450, 2, 1, "", "get_metadata_routing"], [450, 2, 1, "", "get_params"], [450, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralBiclustering": [[451, 3, 1, "", "biclusters_"], [451, 2, 1, "", "fit"], [451, 2, 1, "", "get_indices"], [451, 2, 1, "", "get_metadata_routing"], [451, 2, 1, "", "get_params"], [451, 2, 1, "", "get_shape"], [451, 2, 1, "", "get_submatrix"], [451, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralClustering": [[452, 2, 1, "", "fit"], [452, 2, 1, "", "fit_predict"], [452, 2, 1, "", "get_metadata_routing"], [452, 2, 1, "", "get_params"], [452, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralCoclustering": [[453, 3, 1, "", "biclusters_"], [453, 2, 1, "", "fit"], [453, 2, 1, "", "get_indices"], [453, 2, 1, "", "get_metadata_routing"], [453, 2, 1, "", "get_params"], [453, 2, 1, "", "get_shape"], [453, 2, 1, "", "get_submatrix"], [453, 2, 1, "", "set_params"]], "sklearn.compose": [[464, 1, 1, "", "ColumnTransformer"], [465, 1, 1, "", "TransformedTargetRegressor"], [466, 1, 1, "", "make_column_selector"], [467, 4, 1, "", "make_column_transformer"]], "sklearn.compose.ColumnTransformer": [[464, 2, 1, "", "fit"], [464, 2, 1, "", "fit_transform"], [464, 2, 1, "", "get_feature_names_out"], [464, 2, 1, "", "get_metadata_routing"], [464, 2, 1, "", "get_params"], [464, 3, 1, "", "named_transformers_"], [464, 2, 1, "", "set_output"], [464, 2, 1, "", "set_params"], [464, 2, 1, "", "transform"]], "sklearn.compose.TransformedTargetRegressor": [[465, 2, 1, "", "fit"], [465, 2, 1, "", "get_metadata_routing"], [465, 2, 1, "", "get_params"], [465, 3, 1, "", "n_features_in_"], [465, 2, 1, "", "predict"], [465, 2, 1, "", "score"], [465, 2, 1, "", "set_params"], [465, 2, 1, "", "set_score_request"]], "sklearn.compose.make_column_selector": [[466, 2, 1, "", "__call__"]], "sklearn.covariance": [[469, 1, 1, "", "EllipticEnvelope"], [470, 1, 1, "", "EmpiricalCovariance"], [471, 1, 1, "", "GraphicalLasso"], [472, 1, 1, "", "GraphicalLassoCV"], [473, 1, 1, "", "LedoitWolf"], [474, 1, 1, "", "MinCovDet"], [475, 1, 1, "", "OAS"], [476, 1, 1, "", "ShrunkCovariance"], [477, 4, 1, "", "empirical_covariance"], [478, 4, 1, "", "graphical_lasso"], [479, 4, 1, "", "ledoit_wolf"], [480, 4, 1, "", "ledoit_wolf_shrinkage"], [420, 4, 1, "", "oas"], [481, 4, 1, "", "shrunk_covariance"]], "sklearn.covariance.EllipticEnvelope": [[469, 2, 1, "", "correct_covariance"], [469, 2, 1, "", "decision_function"], [469, 2, 1, "", "error_norm"], [469, 2, 1, "", "fit"], [469, 2, 1, "", "fit_predict"], [469, 2, 1, "", "get_metadata_routing"], [469, 2, 1, "", "get_params"], [469, 2, 1, "", "get_precision"], [469, 2, 1, "", "mahalanobis"], [469, 2, 1, "", "predict"], [469, 2, 1, "", "reweight_covariance"], [469, 2, 1, "", "score"], [469, 2, 1, "", "score_samples"], [469, 2, 1, "", "set_params"]], "sklearn.covariance.EmpiricalCovariance": [[470, 2, 1, "", "error_norm"], [470, 2, 1, "", "fit"], [470, 2, 1, "", "get_metadata_routing"], [470, 2, 1, "", "get_params"], [470, 2, 1, "", "get_precision"], [470, 2, 1, "", "mahalanobis"], [470, 2, 1, "", "score"], [470, 2, 1, "", "set_params"]], "sklearn.covariance.GraphicalLasso": [[471, 2, 1, "", "error_norm"], [471, 2, 1, "", "fit"], [471, 2, 1, "", "get_metadata_routing"], [471, 2, 1, "", "get_params"], [471, 2, 1, "", "get_precision"], [471, 2, 1, "", "mahalanobis"], [471, 2, 1, "", "score"], [471, 2, 1, "", "set_params"]], "sklearn.covariance.GraphicalLassoCV": [[472, 2, 1, "", "error_norm"], [472, 2, 1, "", "fit"], [472, 2, 1, "", "get_metadata_routing"], [472, 2, 1, "", "get_params"], [472, 2, 1, "", "get_precision"], [472, 2, 1, "", "mahalanobis"], [472, 2, 1, "", "score"], [472, 2, 1, "", "set_params"]], "sklearn.covariance.LedoitWolf": [[473, 2, 1, "", "error_norm"], [473, 2, 1, "", "fit"], [473, 2, 1, "", "get_metadata_routing"], [473, 2, 1, "", "get_params"], [473, 2, 1, "", "get_precision"], [473, 2, 1, "", "mahalanobis"], [473, 2, 1, "", "score"], [473, 2, 1, "", "set_params"]], "sklearn.covariance.MinCovDet": [[474, 2, 1, "", "correct_covariance"], [474, 2, 1, "", "error_norm"], [474, 2, 1, "", "fit"], [474, 2, 1, "", "get_metadata_routing"], [474, 2, 1, "", "get_params"], [474, 2, 1, "", "get_precision"], [474, 2, 1, "", "mahalanobis"], [474, 2, 1, "", "reweight_covariance"], [474, 2, 1, "", "score"], [474, 2, 1, "", "set_params"]], "sklearn.covariance.OAS": [[475, 2, 1, "", "error_norm"], [475, 2, 1, "", "fit"], [475, 2, 1, "", "get_metadata_routing"], [475, 2, 1, "", "get_params"], [475, 2, 1, "", "get_precision"], [475, 2, 1, "", "mahalanobis"], [475, 2, 1, "", "score"], [475, 2, 1, "", "set_params"]], "sklearn.covariance.ShrunkCovariance": [[476, 2, 1, "", "error_norm"], [476, 2, 1, "", "fit"], [476, 2, 1, "", "get_metadata_routing"], [476, 2, 1, "", "get_params"], [476, 2, 1, "", "get_precision"], [476, 2, 1, "", "mahalanobis"], [476, 2, 1, "", "score"], [476, 2, 1, "", "set_params"]], "sklearn.cross_decomposition": [[482, 1, 1, "", "CCA"], [483, 1, 1, "", "PLSCanonical"], [484, 1, 1, "", "PLSRegression"], [485, 1, 1, "", "PLSSVD"]], "sklearn.cross_decomposition.CCA": [[482, 2, 1, "", "fit"], [482, 2, 1, "", "fit_transform"], [482, 2, 1, "", "get_feature_names_out"], [482, 2, 1, "", "get_metadata_routing"], [482, 2, 1, "", "get_params"], [482, 2, 1, "", "inverse_transform"], [482, 2, 1, "", "predict"], [482, 2, 1, "", "score"], [482, 2, 1, "", "set_output"], [482, 2, 1, "", "set_params"], [482, 2, 1, "", "set_predict_request"], [482, 2, 1, "", "set_score_request"], [482, 2, 1, "", "set_transform_request"], [482, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSCanonical": [[483, 2, 1, "", "fit"], [483, 2, 1, "", "fit_transform"], [483, 2, 1, "", "get_feature_names_out"], [483, 2, 1, "", "get_metadata_routing"], [483, 2, 1, "", "get_params"], [483, 2, 1, "", "inverse_transform"], [483, 2, 1, "", "predict"], [483, 2, 1, "", "score"], [483, 2, 1, "", "set_output"], [483, 2, 1, "", "set_params"], [483, 2, 1, "", "set_predict_request"], [483, 2, 1, "", "set_score_request"], [483, 2, 1, "", "set_transform_request"], [483, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSRegression": [[484, 2, 1, "", "fit"], [484, 2, 1, "", "fit_transform"], [484, 2, 1, "", "get_feature_names_out"], [484, 2, 1, "", "get_metadata_routing"], [484, 2, 1, "", "get_params"], [484, 2, 1, "", "inverse_transform"], [484, 2, 1, "", "predict"], [484, 2, 1, "", "score"], [484, 2, 1, "", "set_output"], [484, 2, 1, "", "set_params"], [484, 2, 1, "", "set_predict_request"], [484, 2, 1, "", "set_score_request"], [484, 2, 1, "", "set_transform_request"], [484, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSSVD": [[485, 2, 1, "", "fit"], [485, 2, 1, "", "fit_transform"], [485, 2, 1, "", "get_feature_names_out"], [485, 2, 1, "", "get_metadata_routing"], [485, 2, 1, "", "get_params"], [485, 2, 1, "", "set_output"], [485, 2, 1, "", "set_params"], [485, 2, 1, "", "transform"]], "sklearn.datasets": [[486, 4, 1, "", "clear_data_home"], [487, 4, 1, "", "dump_svmlight_file"], [488, 4, 1, "", "fetch_20newsgroups"], [489, 4, 1, "", "fetch_20newsgroups_vectorized"], [490, 4, 1, "", "fetch_california_housing"], [491, 4, 1, "", "fetch_covtype"], [492, 4, 1, "", "fetch_file"], [493, 4, 1, "", "fetch_kddcup99"], [494, 4, 1, "", "fetch_lfw_pairs"], [495, 4, 1, "", "fetch_lfw_people"], [496, 4, 1, "", "fetch_olivetti_faces"], [497, 4, 1, "", "fetch_openml"], [498, 4, 1, "", "fetch_rcv1"], [499, 4, 1, "", "fetch_species_distributions"], [500, 4, 1, "", "get_data_home"], [501, 4, 1, "", "load_breast_cancer"], [502, 4, 1, "", "load_diabetes"], [503, 4, 1, "", "load_digits"], [504, 4, 1, "", "load_files"], [505, 4, 1, "", "load_iris"], [506, 4, 1, "", "load_linnerud"], [507, 4, 1, "", "load_sample_image"], [508, 4, 1, "", "load_sample_images"], [509, 4, 1, "", "load_svmlight_file"], [510, 4, 1, "", "load_svmlight_files"], [511, 4, 1, "", "load_wine"], [512, 4, 1, "", "make_biclusters"], [513, 4, 1, "", "make_blobs"], [514, 4, 1, "", "make_checkerboard"], [515, 4, 1, "", "make_circles"], [516, 4, 1, "", "make_classification"], [517, 4, 1, "", "make_friedman1"], [518, 4, 1, "", "make_friedman2"], [519, 4, 1, "", "make_friedman3"], [520, 4, 1, "", "make_gaussian_quantiles"], [521, 4, 1, "", "make_hastie_10_2"], [522, 4, 1, "", "make_low_rank_matrix"], [523, 4, 1, "", "make_moons"], [524, 4, 1, "", "make_multilabel_classification"], [525, 4, 1, "", "make_regression"], [526, 4, 1, "", "make_s_curve"], [527, 4, 1, "", "make_sparse_coded_signal"], [528, 4, 1, "", "make_sparse_spd_matrix"], [529, 4, 1, "", "make_sparse_uncorrelated"], [530, 4, 1, "", "make_spd_matrix"], [531, 4, 1, "", "make_swiss_roll"]], "sklearn.decomposition": [[532, 1, 1, "", "DictionaryLearning"], [533, 1, 1, "", "FactorAnalysis"], [534, 1, 1, "", "FastICA"], [535, 1, 1, "", "IncrementalPCA"], [536, 1, 1, "", "KernelPCA"], [537, 1, 1, "", "LatentDirichletAllocation"], [538, 1, 1, "", "MiniBatchDictionaryLearning"], [539, 1, 1, "", "MiniBatchNMF"], [540, 1, 1, "", "MiniBatchSparsePCA"], [541, 1, 1, "", "NMF"], [542, 1, 1, "", "PCA"], [543, 1, 1, "", "SparseCoder"], [544, 1, 1, "", "SparsePCA"], [545, 1, 1, "", "TruncatedSVD"], [546, 4, 1, "", "dict_learning"], [547, 4, 1, "", "dict_learning_online"], [419, 4, 1, "", "fastica"], [548, 4, 1, "", "non_negative_factorization"], [549, 4, 1, "", "sparse_encode"]], "sklearn.decomposition.DictionaryLearning": [[532, 2, 1, "", "fit"], [532, 2, 1, "", "fit_transform"], [532, 2, 1, "", "get_feature_names_out"], [532, 2, 1, "", "get_metadata_routing"], [532, 2, 1, "", "get_params"], [532, 2, 1, "", "set_output"], [532, 2, 1, "", "set_params"], [532, 2, 1, "", "transform"]], "sklearn.decomposition.FactorAnalysis": [[533, 2, 1, "", "fit"], [533, 2, 1, "", "fit_transform"], [533, 2, 1, "", "get_covariance"], [533, 2, 1, "", "get_feature_names_out"], [533, 2, 1, "", "get_metadata_routing"], [533, 2, 1, "", "get_params"], [533, 2, 1, "", "get_precision"], [533, 2, 1, "", "score"], [533, 2, 1, "", "score_samples"], [533, 2, 1, "", "set_output"], [533, 2, 1, "", "set_params"], [533, 2, 1, "", "transform"]], "sklearn.decomposition.FastICA": [[534, 2, 1, "", "fit"], [534, 2, 1, "", "fit_transform"], [534, 2, 1, "", "get_feature_names_out"], [534, 2, 1, "", "get_metadata_routing"], [534, 2, 1, "", "get_params"], [534, 2, 1, "", "inverse_transform"], [534, 2, 1, "", "set_inverse_transform_request"], [534, 2, 1, "", "set_output"], [534, 2, 1, "", "set_params"], [534, 2, 1, "", "set_transform_request"], [534, 2, 1, "", "transform"]], "sklearn.decomposition.IncrementalPCA": [[535, 2, 1, "", "fit"], [535, 2, 1, "", "fit_transform"], [535, 2, 1, "", "get_covariance"], [535, 2, 1, "", "get_feature_names_out"], [535, 2, 1, "", "get_metadata_routing"], [535, 2, 1, "", "get_params"], [535, 2, 1, "", "get_precision"], [535, 2, 1, "", "inverse_transform"], [535, 2, 1, "", "partial_fit"], [535, 2, 1, "", "set_output"], [535, 2, 1, "", "set_params"], [535, 2, 1, "", "transform"]], "sklearn.decomposition.KernelPCA": [[536, 2, 1, "", "fit"], [536, 2, 1, "", "fit_transform"], [536, 2, 1, "", "get_feature_names_out"], [536, 2, 1, "", "get_metadata_routing"], [536, 2, 1, "", "get_params"], [536, 2, 1, "", "inverse_transform"], [536, 2, 1, "", "set_output"], [536, 2, 1, "", "set_params"], [536, 2, 1, "", "transform"]], "sklearn.decomposition.LatentDirichletAllocation": [[537, 2, 1, "", "fit"], [537, 2, 1, "", "fit_transform"], [537, 2, 1, "", "get_feature_names_out"], [537, 2, 1, "", "get_metadata_routing"], [537, 2, 1, "", "get_params"], [537, 2, 1, "", "partial_fit"], [537, 2, 1, "", "perplexity"], [537, 2, 1, "", "score"], [537, 2, 1, "", "set_output"], [537, 2, 1, "", "set_params"], [537, 2, 1, "", "set_transform_request"], [537, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchDictionaryLearning": [[538, 2, 1, "", "fit"], [538, 2, 1, "", "fit_transform"], [538, 2, 1, "", "get_feature_names_out"], [538, 2, 1, "", "get_metadata_routing"], [538, 2, 1, "", "get_params"], [538, 2, 1, "", "partial_fit"], [538, 2, 1, "", "set_output"], [538, 2, 1, "", "set_params"], [538, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchNMF": [[539, 2, 1, "", "fit"], [539, 2, 1, "", "fit_transform"], [539, 2, 1, "", "get_feature_names_out"], [539, 2, 1, "", "get_metadata_routing"], [539, 2, 1, "", "get_params"], [539, 2, 1, "", "inverse_transform"], [539, 2, 1, "", "partial_fit"], [539, 2, 1, "", "set_output"], [539, 2, 1, "", "set_params"], [539, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchSparsePCA": [[540, 2, 1, "", "fit"], [540, 2, 1, "", "fit_transform"], [540, 2, 1, "", "get_feature_names_out"], [540, 2, 1, "", "get_metadata_routing"], [540, 2, 1, "", "get_params"], [540, 2, 1, "", "inverse_transform"], [540, 2, 1, "", "set_output"], [540, 2, 1, "", "set_params"], [540, 2, 1, "", "transform"]], "sklearn.decomposition.NMF": [[541, 2, 1, "", "fit"], [541, 2, 1, "", "fit_transform"], [541, 2, 1, "", "get_feature_names_out"], [541, 2, 1, "", "get_metadata_routing"], [541, 2, 1, "", "get_params"], [541, 2, 1, "", "inverse_transform"], [541, 2, 1, "", "set_output"], [541, 2, 1, "", "set_params"], [541, 2, 1, "", "transform"]], "sklearn.decomposition.PCA": [[542, 2, 1, "", "fit"], [542, 2, 1, "", "fit_transform"], [542, 2, 1, "", "get_covariance"], [542, 2, 1, "", "get_feature_names_out"], [542, 2, 1, "", "get_metadata_routing"], [542, 2, 1, "", "get_params"], [542, 2, 1, "", "get_precision"], [542, 2, 1, "", "inverse_transform"], [542, 2, 1, "", "score"], [542, 2, 1, "", "score_samples"], [542, 2, 1, "", "set_output"], [542, 2, 1, "", "set_params"], [542, 2, 1, "", "transform"]], "sklearn.decomposition.SparseCoder": [[543, 2, 1, "", "fit"], [543, 2, 1, "", "fit_transform"], [543, 2, 1, "", "get_feature_names_out"], [543, 2, 1, "", "get_metadata_routing"], [543, 2, 1, "", "get_params"], [543, 3, 1, "", "n_components_"], [543, 3, 1, "", "n_features_in_"], [543, 2, 1, "", "set_output"], [543, 2, 1, "", "set_params"], [543, 2, 1, "", "transform"]], "sklearn.decomposition.SparsePCA": [[544, 2, 1, "", "fit"], [544, 2, 1, "", "fit_transform"], [544, 2, 1, "", "get_feature_names_out"], [544, 2, 1, "", "get_metadata_routing"], [544, 2, 1, "", "get_params"], [544, 2, 1, "", "inverse_transform"], [544, 2, 1, "", "set_output"], [544, 2, 1, "", "set_params"], [544, 2, 1, "", "transform"]], "sklearn.decomposition.TruncatedSVD": [[545, 2, 1, "", "fit"], [545, 2, 1, "", "fit_transform"], [545, 2, 1, "", "get_feature_names_out"], [545, 2, 1, "", "get_metadata_routing"], [545, 2, 1, "", "get_params"], [545, 2, 1, "", "inverse_transform"], [545, 2, 1, "", "set_output"], [545, 2, 1, "", "set_params"], [545, 2, 1, "", "transform"]], "sklearn.discriminant_analysis": [[550, 1, 1, "", "LinearDiscriminantAnalysis"], [551, 1, 1, "", "QuadraticDiscriminantAnalysis"]], "sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[550, 2, 1, "", "decision_function"], [550, 2, 1, "", "fit"], [550, 2, 1, "", "fit_transform"], [550, 2, 1, "", "get_feature_names_out"], [550, 2, 1, "", "get_metadata_routing"], [550, 2, 1, "", "get_params"], [550, 2, 1, "", "predict"], [550, 2, 1, "", "predict_log_proba"], [550, 2, 1, "", "predict_proba"], [550, 2, 1, "", "score"], [550, 2, 1, "", "set_output"], [550, 2, 1, "", "set_params"], [550, 2, 1, "", "set_score_request"], [550, 2, 1, "", "transform"]], "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[551, 2, 1, "", "decision_function"], [551, 2, 1, "", "fit"], [551, 2, 1, "", "get_metadata_routing"], [551, 2, 1, "", "get_params"], [551, 2, 1, "", "predict"], [551, 2, 1, "", "predict_log_proba"], [551, 2, 1, "", "predict_proba"], [551, 2, 1, "", "score"], [551, 2, 1, "", "set_params"], [551, 2, 1, "", "set_score_request"]], "sklearn.dummy": [[552, 1, 1, "", "DummyClassifier"], [553, 1, 1, "", "DummyRegressor"]], "sklearn.dummy.DummyClassifier": [[552, 2, 1, "", "fit"], [552, 2, 1, "", "get_metadata_routing"], [552, 2, 1, "", "get_params"], [552, 2, 1, "", "predict"], [552, 2, 1, "", "predict_log_proba"], [552, 2, 1, "", "predict_proba"], [552, 2, 1, "", "score"], [552, 2, 1, "", "set_fit_request"], [552, 2, 1, "", "set_params"], [552, 2, 1, "", "set_score_request"]], "sklearn.dummy.DummyRegressor": [[553, 2, 1, "", "fit"], [553, 2, 1, "", "get_metadata_routing"], [553, 2, 1, "", "get_params"], [553, 2, 1, "", "predict"], [553, 2, 1, "", "score"], [553, 2, 1, "", "set_fit_request"], [553, 2, 1, "", "set_params"], [553, 2, 1, "", "set_predict_request"], [553, 2, 1, "", "set_score_request"]], "sklearn.ensemble": [[554, 1, 1, "", "AdaBoostClassifier"], [555, 1, 1, "", "AdaBoostRegressor"], [556, 1, 1, "", "BaggingClassifier"], [557, 1, 1, "", "BaggingRegressor"], [558, 1, 1, "", "ExtraTreesClassifier"], [559, 1, 1, "", "ExtraTreesRegressor"], [560, 1, 1, "", "GradientBoostingClassifier"], [561, 1, 1, "", "GradientBoostingRegressor"], [562, 1, 1, "", "HistGradientBoostingClassifier"], [563, 1, 1, "", "HistGradientBoostingRegressor"], [564, 1, 1, "", "IsolationForest"], [565, 1, 1, "", "RandomForestClassifier"], [566, 1, 1, "", "RandomForestRegressor"], [567, 1, 1, "", "RandomTreesEmbedding"], [568, 1, 1, "", "StackingClassifier"], [569, 1, 1, "", "StackingRegressor"], [570, 1, 1, "", "VotingClassifier"], [571, 1, 1, "", "VotingRegressor"]], "sklearn.ensemble.AdaBoostClassifier": [[554, 2, 1, "", "decision_function"], [554, 3, 1, "", "feature_importances_"], [554, 2, 1, "", "fit"], [554, 2, 1, "", "get_metadata_routing"], [554, 2, 1, "", "get_params"], [554, 2, 1, "", "predict"], [554, 2, 1, "", "predict_log_proba"], [554, 2, 1, "", "predict_proba"], [554, 2, 1, "", "score"], [554, 2, 1, "", "set_fit_request"], [554, 2, 1, "", "set_params"], [554, 2, 1, "", "set_score_request"], [554, 2, 1, "", "staged_decision_function"], [554, 2, 1, "", "staged_predict"], [554, 2, 1, "", "staged_predict_proba"], [554, 2, 1, "", "staged_score"]], "sklearn.ensemble.AdaBoostRegressor": [[555, 3, 1, "", "feature_importances_"], [555, 2, 1, "", "fit"], [555, 2, 1, "", "get_metadata_routing"], [555, 2, 1, "", "get_params"], [555, 2, 1, "", "predict"], [555, 2, 1, "", "score"], [555, 2, 1, "", "set_fit_request"], [555, 2, 1, "", "set_params"], [555, 2, 1, "", "set_score_request"], [555, 2, 1, "", "staged_predict"], [555, 2, 1, "", "staged_score"]], "sklearn.ensemble.BaggingClassifier": [[556, 2, 1, "", "decision_function"], [556, 3, 1, "", "estimators_samples_"], [556, 2, 1, "", "fit"], [556, 2, 1, "", "get_metadata_routing"], [556, 2, 1, "", "get_params"], [556, 2, 1, "", "predict"], [556, 2, 1, "", "predict_log_proba"], [556, 2, 1, "", "predict_proba"], [556, 2, 1, "", "score"], [556, 2, 1, "", "set_fit_request"], [556, 2, 1, "", "set_params"], [556, 2, 1, "", "set_score_request"]], "sklearn.ensemble.BaggingRegressor": [[557, 3, 1, "", "estimators_samples_"], [557, 2, 1, "", "fit"], [557, 2, 1, "", "get_metadata_routing"], [557, 2, 1, "", "get_params"], [557, 2, 1, "", "predict"], [557, 2, 1, "", "score"], [557, 2, 1, "", "set_fit_request"], [557, 2, 1, "", "set_params"], [557, 2, 1, "", "set_score_request"]], "sklearn.ensemble.ExtraTreesClassifier": [[558, 2, 1, "", "apply"], [558, 2, 1, "", "decision_path"], [558, 3, 1, "", "estimators_samples_"], [558, 3, 1, "", "feature_importances_"], [558, 2, 1, "", "fit"], [558, 2, 1, "", "get_metadata_routing"], [558, 2, 1, "", "get_params"], [558, 2, 1, "", "predict"], [558, 2, 1, "", "predict_log_proba"], [558, 2, 1, "", "predict_proba"], [558, 2, 1, "", "score"], [558, 2, 1, "", "set_fit_request"], [558, 2, 1, "", "set_params"], [558, 2, 1, "", "set_score_request"]], "sklearn.ensemble.ExtraTreesRegressor": [[559, 2, 1, "", "apply"], [559, 2, 1, "", "decision_path"], [559, 3, 1, "", "estimators_samples_"], [559, 3, 1, "", "feature_importances_"], [559, 2, 1, "", "fit"], [559, 2, 1, "", "get_metadata_routing"], [559, 2, 1, "", "get_params"], [559, 2, 1, "", "predict"], [559, 2, 1, "", "score"], [559, 2, 1, "", "set_fit_request"], [559, 2, 1, "", "set_params"], [559, 2, 1, "", "set_score_request"]], "sklearn.ensemble.GradientBoostingClassifier": [[560, 2, 1, "", "apply"], [560, 2, 1, "", "decision_function"], [560, 3, 1, "", "feature_importances_"], [560, 2, 1, "", "fit"], [560, 2, 1, "", "get_metadata_routing"], [560, 2, 1, "", "get_params"], [560, 2, 1, "", "predict"], [560, 2, 1, "", "predict_log_proba"], [560, 2, 1, "", "predict_proba"], [560, 2, 1, "", "score"], [560, 2, 1, "", "set_fit_request"], [560, 2, 1, "", "set_params"], [560, 2, 1, "", "set_score_request"], [560, 2, 1, "", "staged_decision_function"], [560, 2, 1, "", "staged_predict"], [560, 2, 1, "", "staged_predict_proba"]], "sklearn.ensemble.GradientBoostingRegressor": [[561, 2, 1, "", "apply"], [561, 3, 1, "", "feature_importances_"], [561, 2, 1, "", "fit"], [561, 2, 1, "", "get_metadata_routing"], [561, 2, 1, "", "get_params"], [561, 2, 1, "", "predict"], [561, 2, 1, "", "score"], [561, 2, 1, "", "set_fit_request"], [561, 2, 1, "", "set_params"], [561, 2, 1, "", "set_score_request"], [561, 2, 1, "", "staged_predict"]], "sklearn.ensemble.HistGradientBoostingClassifier": [[562, 2, 1, "", "decision_function"], [562, 2, 1, "", "fit"], [562, 2, 1, "", "get_metadata_routing"], [562, 2, 1, "", "get_params"], [562, 3, 1, "", "n_iter_"], [562, 2, 1, "", "predict"], [562, 2, 1, "", "predict_proba"], [562, 2, 1, "", "score"], [562, 2, 1, "", "set_fit_request"], [562, 2, 1, "", "set_params"], [562, 2, 1, "", "set_score_request"], [562, 2, 1, "", "staged_decision_function"], [562, 2, 1, "", "staged_predict"], [562, 2, 1, "", "staged_predict_proba"]], "sklearn.ensemble.HistGradientBoostingRegressor": [[563, 2, 1, "", "fit"], [563, 2, 1, "", "get_metadata_routing"], [563, 2, 1, "", "get_params"], [563, 3, 1, "", "n_iter_"], [563, 2, 1, "", "predict"], [563, 2, 1, "", "score"], [563, 2, 1, "", "set_fit_request"], [563, 2, 1, "", "set_params"], [563, 2, 1, "", "set_score_request"], [563, 2, 1, "", "staged_predict"]], "sklearn.ensemble.IsolationForest": [[564, 2, 1, "", "decision_function"], [564, 3, 1, "", "estimators_samples_"], [564, 2, 1, "", "fit"], [564, 2, 1, "", "fit_predict"], [564, 2, 1, "", "get_metadata_routing"], [564, 2, 1, "", "get_params"], [564, 2, 1, "", "predict"], [564, 2, 1, "", "score_samples"], [564, 2, 1, "", "set_fit_request"], [564, 2, 1, "", "set_params"]], "sklearn.ensemble.RandomForestClassifier": [[565, 2, 1, "", "apply"], [565, 2, 1, "", "decision_path"], [565, 3, 1, "", "estimators_samples_"], [565, 3, 1, "", "feature_importances_"], [565, 2, 1, "", "fit"], [565, 2, 1, "", "get_metadata_routing"], [565, 2, 1, "", "get_params"], [565, 2, 1, "", "predict"], [565, 2, 1, "", "predict_log_proba"], [565, 2, 1, "", "predict_proba"], [565, 2, 1, "", "score"], [565, 2, 1, "", "set_fit_request"], [565, 2, 1, "", "set_params"], [565, 2, 1, "", "set_score_request"]], "sklearn.ensemble.RandomForestRegressor": [[566, 2, 1, "", "apply"], [566, 2, 1, "", "decision_path"], [566, 3, 1, "", "estimators_samples_"], [566, 3, 1, "", "feature_importances_"], [566, 2, 1, "", "fit"], [566, 2, 1, "", "get_metadata_routing"], [566, 2, 1, "", "get_params"], [566, 2, 1, "", "predict"], [566, 2, 1, "", "score"], [566, 2, 1, "", "set_fit_request"], [566, 2, 1, "", "set_params"], [566, 2, 1, "", "set_score_request"]], "sklearn.ensemble.RandomTreesEmbedding": [[567, 2, 1, "", "apply"], [567, 2, 1, "", "decision_path"], [567, 3, 1, "", "estimators_samples_"], [567, 3, 1, "", "feature_importances_"], [567, 2, 1, "", "fit"], [567, 2, 1, "", "fit_transform"], [567, 2, 1, "", "get_feature_names_out"], [567, 2, 1, "", "get_metadata_routing"], [567, 2, 1, "", "get_params"], [567, 2, 1, "", "set_fit_request"], [567, 2, 1, "", "set_output"], [567, 2, 1, "", "set_params"], [567, 2, 1, "", "transform"]], "sklearn.ensemble.StackingClassifier": [[568, 2, 1, "", "decision_function"], [568, 2, 1, "", "fit"], [568, 2, 1, "", "fit_transform"], [568, 2, 1, "", "get_feature_names_out"], [568, 2, 1, "", "get_metadata_routing"], [568, 2, 1, "", "get_params"], [568, 3, 1, "", "n_features_in_"], [568, 3, 1, "", "named_estimators"], [568, 2, 1, "", "predict"], [568, 2, 1, "", "predict_proba"], [568, 2, 1, "", "score"], [568, 2, 1, "", "set_fit_request"], [568, 2, 1, "", "set_output"], [568, 2, 1, "", "set_params"], [568, 2, 1, "", "set_score_request"], [568, 2, 1, "", "transform"]], "sklearn.ensemble.StackingRegressor": [[569, 2, 1, "", "fit"], [569, 2, 1, "", "fit_transform"], [569, 2, 1, "", "get_feature_names_out"], [569, 2, 1, "", "get_metadata_routing"], [569, 2, 1, "", "get_params"], [569, 3, 1, "", "n_features_in_"], [569, 3, 1, "", "named_estimators"], [569, 2, 1, "", "predict"], [569, 2, 1, "", "score"], [569, 2, 1, "", "set_fit_request"], [569, 2, 1, "", "set_output"], [569, 2, 1, "", "set_params"], [569, 2, 1, "", "set_score_request"], [569, 2, 1, "", "transform"]], "sklearn.ensemble.VotingClassifier": [[570, 2, 1, "", "fit"], [570, 2, 1, "", "fit_transform"], [570, 2, 1, "", "get_feature_names_out"], [570, 2, 1, "", "get_metadata_routing"], [570, 2, 1, "", "get_params"], [570, 3, 1, "", "n_features_in_"], [570, 3, 1, "", "named_estimators"], [570, 2, 1, "", "predict"], [570, 2, 1, "", "predict_proba"], [570, 2, 1, "", "score"], [570, 2, 1, "", "set_fit_request"], [570, 2, 1, "", "set_output"], [570, 2, 1, "", "set_params"], [570, 2, 1, "", "set_score_request"], [570, 2, 1, "", "transform"]], "sklearn.ensemble.VotingRegressor": [[571, 2, 1, "", "fit"], [571, 2, 1, "", "fit_transform"], [571, 2, 1, "", "get_feature_names_out"], [571, 2, 1, "", "get_metadata_routing"], [571, 2, 1, "", "get_params"], [571, 3, 1, "", "n_features_in_"], [571, 3, 1, "", "named_estimators"], [571, 2, 1, "", "predict"], [571, 2, 1, "", "score"], [571, 2, 1, "", "set_fit_request"], [571, 2, 1, "", "set_output"], [571, 2, 1, "", "set_params"], [571, 2, 1, "", "set_score_request"], [571, 2, 1, "", "transform"]], "sklearn.exceptions": [[572, 5, 1, "", "ConvergenceWarning"], [573, 5, 1, "", "DataConversionWarning"], [574, 5, 1, "", "DataDimensionalityWarning"], [575, 5, 1, "", "EfficiencyWarning"], [576, 5, 1, "", "EstimatorCheckFailedWarning"], [577, 5, 1, "", "FitFailedWarning"], [578, 5, 1, "", "InconsistentVersionWarning"], [579, 5, 1, "", "NotFittedError"], [580, 5, 1, "", "UndefinedMetricWarning"]], "sklearn.experimental": [[581, 0, 0, "-", "enable_halving_search_cv"], [582, 0, 0, "-", "enable_iterative_imputer"]], "sklearn.feature_extraction": [[583, 1, 1, "", "DictVectorizer"], [584, 1, 1, "", "FeatureHasher"], [17, 0, 0, "-", "image"], [17, 0, 0, "-", "text"]], "sklearn.feature_extraction.DictVectorizer": [[583, 2, 1, "", "fit"], [583, 2, 1, "", "fit_transform"], [583, 2, 1, "", "get_feature_names_out"], [583, 2, 1, "", "get_metadata_routing"], [583, 2, 1, "", "get_params"], [583, 2, 1, "", "inverse_transform"], [583, 2, 1, "", "restrict"], [583, 2, 1, "", "set_output"], [583, 2, 1, "", "set_params"], [583, 2, 1, "", "transform"]], "sklearn.feature_extraction.FeatureHasher": [[584, 2, 1, "", "fit"], [584, 2, 1, "", "fit_transform"], [584, 2, 1, "", "get_metadata_routing"], [584, 2, 1, "", "get_params"], [584, 2, 1, "", "set_output"], [584, 2, 1, "", "set_params"], [584, 2, 1, "", "transform"]], "sklearn.feature_extraction.image": [[585, 1, 1, "", "PatchExtractor"], [586, 4, 1, "", "extract_patches_2d"], [587, 4, 1, "", "grid_to_graph"], [588, 4, 1, "", "img_to_graph"], [589, 4, 1, "", "reconstruct_from_patches_2d"]], "sklearn.feature_extraction.image.PatchExtractor": [[585, 2, 1, "", "fit"], [585, 2, 1, "", "fit_transform"], [585, 2, 1, "", "get_metadata_routing"], [585, 2, 1, "", "get_params"], [585, 2, 1, "", "set_output"], [585, 2, 1, "", "set_params"], [585, 2, 1, "", "transform"]], "sklearn.feature_extraction.text": [[590, 1, 1, "", "CountVectorizer"], [591, 1, 1, "", "HashingVectorizer"], [592, 1, 1, "", "TfidfTransformer"], [593, 1, 1, "", "TfidfVectorizer"]], "sklearn.feature_extraction.text.CountVectorizer": [[590, 2, 1, "", "build_analyzer"], [590, 2, 1, "", "build_preprocessor"], [590, 2, 1, "", "build_tokenizer"], [590, 2, 1, "", "decode"], [590, 2, 1, "", "fit"], [590, 2, 1, "", "fit_transform"], [590, 2, 1, "", "get_feature_names_out"], [590, 2, 1, "", "get_metadata_routing"], [590, 2, 1, "", "get_params"], [590, 2, 1, "", "get_stop_words"], [590, 2, 1, "", "inverse_transform"], [590, 2, 1, "", "set_params"], [590, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.HashingVectorizer": [[591, 2, 1, "", "build_analyzer"], [591, 2, 1, "", "build_preprocessor"], [591, 2, 1, "", "build_tokenizer"], [591, 2, 1, "", "decode"], [591, 2, 1, "", "fit"], [591, 2, 1, "", "fit_transform"], [591, 2, 1, "", "get_metadata_routing"], [591, 2, 1, "", "get_params"], [591, 2, 1, "", "get_stop_words"], [591, 2, 1, "", "partial_fit"], [591, 2, 1, "", "set_output"], [591, 2, 1, "", "set_params"], [591, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.TfidfTransformer": [[592, 2, 1, "", "fit"], [592, 2, 1, "", "fit_transform"], [592, 2, 1, "", "get_feature_names_out"], [592, 2, 1, "", "get_metadata_routing"], [592, 2, 1, "", "get_params"], [592, 2, 1, "", "set_output"], [592, 2, 1, "", "set_params"], [592, 2, 1, "", "set_transform_request"], [592, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.TfidfVectorizer": [[593, 2, 1, "", "build_analyzer"], [593, 2, 1, "", "build_preprocessor"], [593, 2, 1, "", "build_tokenizer"], [593, 2, 1, "", "decode"], [593, 2, 1, "", "fit"], [593, 2, 1, "", "fit_transform"], [593, 2, 1, "", "get_feature_names_out"], [593, 2, 1, "", "get_metadata_routing"], [593, 2, 1, "", "get_params"], [593, 2, 1, "", "get_stop_words"], [593, 3, 1, "", "idf_"], [593, 2, 1, "", "inverse_transform"], [593, 2, 1, "", "set_params"], [593, 2, 1, "", "transform"]], "sklearn.feature_selection": [[594, 1, 1, "", "GenericUnivariateSelect"], [595, 1, 1, "", "RFE"], [596, 1, 1, "", "RFECV"], [597, 1, 1, "", "SelectFdr"], [598, 1, 1, "", "SelectFpr"], [599, 1, 1, "", "SelectFromModel"], [600, 1, 1, "", "SelectFwe"], [601, 1, 1, "", "SelectKBest"], [602, 1, 1, "", "SelectPercentile"], [603, 1, 1, "", "SelectorMixin"], [604, 1, 1, "", "SequentialFeatureSelector"], [605, 1, 1, "", "VarianceThreshold"], [606, 4, 1, "", "chi2"], [607, 4, 1, "", "f_classif"], [608, 4, 1, "", "f_regression"], [609, 4, 1, "", "mutual_info_classif"], [610, 4, 1, "", "mutual_info_regression"], [611, 4, 1, "", "r_regression"]], "sklearn.feature_selection.GenericUnivariateSelect": [[594, 2, 1, "", "fit"], [594, 2, 1, "", "fit_transform"], [594, 2, 1, "", "get_feature_names_out"], [594, 2, 1, "", "get_metadata_routing"], [594, 2, 1, "", "get_params"], [594, 2, 1, "", "get_support"], [594, 2, 1, "", "inverse_transform"], [594, 2, 1, "", "set_output"], [594, 2, 1, "", "set_params"], [594, 2, 1, "", "transform"]], "sklearn.feature_selection.RFE": [[595, 3, 1, "", "classes_"], [595, 2, 1, "", "decision_function"], [595, 2, 1, "", "fit"], [595, 2, 1, "", "fit_transform"], [595, 2, 1, "", "get_feature_names_out"], [595, 2, 1, "", "get_metadata_routing"], [595, 2, 1, "", "get_params"], [595, 2, 1, "", "get_support"], [595, 2, 1, "", "inverse_transform"], [595, 2, 1, "", "predict"], [595, 2, 1, "", "predict_log_proba"], [595, 2, 1, "", "predict_proba"], [595, 2, 1, "", "score"], [595, 2, 1, "", "set_output"], [595, 2, 1, "", "set_params"], [595, 2, 1, "", "transform"]], "sklearn.feature_selection.RFECV": [[596, 3, 1, "", "classes_"], [596, 2, 1, "", "decision_function"], [596, 2, 1, "", "fit"], [596, 2, 1, "", "fit_transform"], [596, 2, 1, "", "get_feature_names_out"], [596, 2, 1, "", "get_metadata_routing"], [596, 2, 1, "", "get_params"], [596, 2, 1, "", "get_support"], [596, 2, 1, "", "inverse_transform"], [596, 2, 1, "", "predict"], [596, 2, 1, "", "predict_log_proba"], [596, 2, 1, "", "predict_proba"], [596, 2, 1, "", "score"], [596, 2, 1, "", "set_output"], [596, 2, 1, "", "set_params"], [596, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFdr": [[597, 2, 1, "", "fit"], [597, 2, 1, "", "fit_transform"], [597, 2, 1, "", "get_feature_names_out"], [597, 2, 1, "", "get_metadata_routing"], [597, 2, 1, "", "get_params"], [597, 2, 1, "", "get_support"], [597, 2, 1, "", "inverse_transform"], [597, 2, 1, "", "set_output"], [597, 2, 1, "", "set_params"], [597, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFpr": [[598, 2, 1, "", "fit"], [598, 2, 1, "", "fit_transform"], [598, 2, 1, "", "get_feature_names_out"], [598, 2, 1, "", "get_metadata_routing"], [598, 2, 1, "", "get_params"], [598, 2, 1, "", "get_support"], [598, 2, 1, "", "inverse_transform"], [598, 2, 1, "", "set_output"], [598, 2, 1, "", "set_params"], [598, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFromModel": [[599, 2, 1, "", "fit"], [599, 2, 1, "", "fit_transform"], [599, 2, 1, "", "get_feature_names_out"], [599, 2, 1, "", "get_metadata_routing"], [599, 2, 1, "", "get_params"], [599, 2, 1, "", "get_support"], [599, 2, 1, "", "inverse_transform"], [599, 3, 1, "", "n_features_in_"], [599, 2, 1, "", "partial_fit"], [599, 2, 1, "", "set_output"], [599, 2, 1, "", "set_params"], [599, 3, 1, "", "threshold_"], [599, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFwe": [[600, 2, 1, "", "fit"], [600, 2, 1, "", "fit_transform"], [600, 2, 1, "", "get_feature_names_out"], [600, 2, 1, "", "get_metadata_routing"], [600, 2, 1, "", "get_params"], [600, 2, 1, "", "get_support"], [600, 2, 1, "", "inverse_transform"], [600, 2, 1, "", "set_output"], [600, 2, 1, "", "set_params"], [600, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectKBest": [[601, 2, 1, "", "fit"], [601, 2, 1, "", "fit_transform"], [601, 2, 1, "", "get_feature_names_out"], [601, 2, 1, "", "get_metadata_routing"], [601, 2, 1, "", "get_params"], [601, 2, 1, "", "get_support"], [601, 2, 1, "", "inverse_transform"], [601, 2, 1, "", "set_output"], [601, 2, 1, "", "set_params"], [601, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectPercentile": [[602, 2, 1, "", "fit"], [602, 2, 1, "", "fit_transform"], [602, 2, 1, "", "get_feature_names_out"], [602, 2, 1, "", "get_metadata_routing"], [602, 2, 1, "", "get_params"], [602, 2, 1, "", "get_support"], [602, 2, 1, "", "inverse_transform"], [602, 2, 1, "", "set_output"], [602, 2, 1, "", "set_params"], [602, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectorMixin": [[603, 2, 1, "", "fit_transform"], [603, 2, 1, "", "get_feature_names_out"], [603, 2, 1, "", "get_support"], [603, 2, 1, "", "inverse_transform"], [603, 2, 1, "", "set_output"], [603, 2, 1, "", "transform"]], "sklearn.feature_selection.SequentialFeatureSelector": [[604, 2, 1, "", "fit"], [604, 2, 1, "", "fit_transform"], [604, 2, 1, "", "get_feature_names_out"], [604, 2, 1, "", "get_metadata_routing"], [604, 2, 1, "", "get_params"], [604, 2, 1, "", "get_support"], [604, 2, 1, "", "inverse_transform"], [604, 2, 1, "", "set_output"], [604, 2, 1, "", "set_params"], [604, 2, 1, "", "transform"]], "sklearn.feature_selection.VarianceThreshold": [[605, 2, 1, "", "fit"], [605, 2, 1, "", "fit_transform"], [605, 2, 1, "", "get_feature_names_out"], [605, 2, 1, "", "get_metadata_routing"], [605, 2, 1, "", "get_params"], [605, 2, 1, "", "get_support"], [605, 2, 1, "", "inverse_transform"], [605, 2, 1, "", "set_output"], [605, 2, 1, "", "set_params"], [605, 2, 1, "", "transform"]], "sklearn.frozen": [[612, 1, 1, "", "FrozenEstimator"]], "sklearn.frozen.FrozenEstimator": [[612, 2, 1, "", "fit"], [612, 2, 1, "", "get_metadata_routing"], [612, 2, 1, "", "get_params"], [612, 2, 1, "", "set_params"]], "sklearn.gaussian_process": [[613, 1, 1, "", "GaussianProcessClassifier"], [614, 1, 1, "", "GaussianProcessRegressor"], [20, 0, 0, "-", "kernels"]], "sklearn.gaussian_process.GaussianProcessClassifier": [[613, 2, 1, "", "fit"], [613, 2, 1, "", "get_metadata_routing"], [613, 2, 1, "", "get_params"], [613, 3, 1, "", "kernel_"], [613, 2, 1, "", "log_marginal_likelihood"], [613, 2, 1, "", "predict"], [613, 2, 1, "", "predict_proba"], [613, 2, 1, "", "score"], [613, 2, 1, "", "set_params"], [613, 2, 1, "", "set_score_request"]], "sklearn.gaussian_process.GaussianProcessRegressor": [[614, 2, 1, "", "fit"], [614, 2, 1, "", "get_metadata_routing"], [614, 2, 1, "", "get_params"], [614, 2, 1, "", "log_marginal_likelihood"], [614, 2, 1, "", "predict"], [614, 2, 1, "", "sample_y"], [614, 2, 1, "", "score"], [614, 2, 1, "", "set_params"], [614, 2, 1, "", "set_predict_request"], [614, 2, 1, "", "set_score_request"]], "sklearn.gaussian_process.kernels": [[615, 1, 1, "", "CompoundKernel"], [616, 1, 1, "", "ConstantKernel"], [617, 1, 1, "", "DotProduct"], [618, 1, 1, "", "ExpSineSquared"], [619, 1, 1, "", "Exponentiation"], [620, 1, 1, "", "Hyperparameter"], [621, 1, 1, "", "Kernel"], [622, 1, 1, "", "Matern"], [623, 1, 1, "", "PairwiseKernel"], [624, 1, 1, "", "Product"], [625, 1, 1, "", "RBF"], [626, 1, 1, "", "RationalQuadratic"], [627, 1, 1, "", "Sum"], [628, 1, 1, "", "WhiteKernel"]], "sklearn.gaussian_process.kernels.CompoundKernel": [[615, 2, 1, "", "__call__"], [615, 3, 1, "", "bounds"], [615, 2, 1, "", "clone_with_theta"], [615, 2, 1, "", "diag"], [615, 2, 1, "", "get_params"], [615, 3, 1, "", "hyperparameters"], [615, 2, 1, "", "is_stationary"], [615, 3, 1, "", "n_dims"], [615, 3, 1, "", "requires_vector_input"], [615, 2, 1, "", "set_params"], [615, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.ConstantKernel": [[616, 2, 1, "", "__call__"], [616, 3, 1, "", "bounds"], [616, 2, 1, "", "clone_with_theta"], [616, 2, 1, "", "diag"], [616, 2, 1, "", "get_params"], [616, 3, 1, "", "hyperparameters"], [616, 2, 1, "", "is_stationary"], [616, 3, 1, "", "n_dims"], [616, 3, 1, "", "requires_vector_input"], [616, 2, 1, "", "set_params"], [616, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.DotProduct": [[617, 2, 1, "", "__call__"], [617, 3, 1, "", "bounds"], [617, 2, 1, "", "clone_with_theta"], [617, 2, 1, "", "diag"], [617, 2, 1, "", "get_params"], [617, 3, 1, "", "hyperparameters"], [617, 2, 1, "", "is_stationary"], [617, 3, 1, "", "n_dims"], [617, 3, 1, "", "requires_vector_input"], [617, 2, 1, "", "set_params"], [617, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.ExpSineSquared": [[618, 2, 1, "", "__call__"], [618, 3, 1, "", "bounds"], [618, 2, 1, "", "clone_with_theta"], [618, 2, 1, "", "diag"], [618, 2, 1, "", "get_params"], [618, 3, 1, "", "hyperparameter_length_scale"], [618, 3, 1, "", "hyperparameters"], [618, 2, 1, "", "is_stationary"], [618, 3, 1, "", "n_dims"], [618, 3, 1, "", "requires_vector_input"], [618, 2, 1, "", "set_params"], [618, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Exponentiation": [[619, 2, 1, "", "__call__"], [619, 3, 1, "", "bounds"], [619, 2, 1, "", "clone_with_theta"], [619, 2, 1, "", "diag"], [619, 2, 1, "", "get_params"], [619, 3, 1, "", "hyperparameters"], [619, 2, 1, "", "is_stationary"], [619, 3, 1, "", "n_dims"], [619, 3, 1, "", "requires_vector_input"], [619, 2, 1, "", "set_params"], [619, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Hyperparameter": [[620, 6, 1, "", "bounds"], [620, 2, 1, "", "count"], [620, 6, 1, "", "fixed"], [620, 2, 1, "", "index"], [620, 6, 1, "", "n_elements"], [620, 6, 1, "", "name"], [620, 6, 1, "", "value_type"]], "sklearn.gaussian_process.kernels.Kernel": [[621, 2, 1, "", "__call__"], [621, 3, 1, "", "bounds"], [621, 2, 1, "", "clone_with_theta"], [621, 2, 1, "", "diag"], [621, 2, 1, "", "get_params"], [621, 3, 1, "", "hyperparameters"], [621, 2, 1, "", "is_stationary"], [621, 3, 1, "", "n_dims"], [621, 3, 1, "", "requires_vector_input"], [621, 2, 1, "", "set_params"], [621, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Matern": [[622, 2, 1, "", "__call__"], [622, 3, 1, "", "bounds"], [622, 2, 1, "", "clone_with_theta"], [622, 2, 1, "", "diag"], [622, 2, 1, "", "get_params"], [622, 3, 1, "", "hyperparameters"], [622, 2, 1, "", "is_stationary"], [622, 3, 1, "", "n_dims"], [622, 3, 1, "", "requires_vector_input"], [622, 2, 1, "", "set_params"], [622, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.PairwiseKernel": [[623, 2, 1, "", "__call__"], [623, 3, 1, "", "bounds"], [623, 2, 1, "", "clone_with_theta"], [623, 2, 1, "", "diag"], [623, 2, 1, "", "get_params"], [623, 3, 1, "", "hyperparameters"], [623, 2, 1, "", "is_stationary"], [623, 3, 1, "", "n_dims"], [623, 3, 1, "", "requires_vector_input"], [623, 2, 1, "", "set_params"], [623, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Product": [[624, 2, 1, "", "__call__"], [624, 3, 1, "", "bounds"], [624, 2, 1, "", "clone_with_theta"], [624, 2, 1, "", "diag"], [624, 2, 1, "", "get_params"], [624, 3, 1, "", "hyperparameters"], [624, 2, 1, "", "is_stationary"], [624, 3, 1, "", "n_dims"], [624, 3, 1, "", "requires_vector_input"], [624, 2, 1, "", "set_params"], [624, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.RBF": [[625, 2, 1, "", "__call__"], [625, 3, 1, "", "bounds"], [625, 2, 1, "", "clone_with_theta"], [625, 2, 1, "", "diag"], [625, 2, 1, "", "get_params"], [625, 3, 1, "", "hyperparameters"], [625, 2, 1, "", "is_stationary"], [625, 3, 1, "", "n_dims"], [625, 3, 1, "", "requires_vector_input"], [625, 2, 1, "", "set_params"], [625, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.RationalQuadratic": [[626, 2, 1, "", "__call__"], [626, 3, 1, "", "bounds"], [626, 2, 1, "", "clone_with_theta"], [626, 2, 1, "", "diag"], [626, 2, 1, "", "get_params"], [626, 3, 1, "", "hyperparameters"], [626, 2, 1, "", "is_stationary"], [626, 3, 1, "", "n_dims"], [626, 3, 1, "", "requires_vector_input"], [626, 2, 1, "", "set_params"], [626, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Sum": [[627, 2, 1, "", "__call__"], [627, 3, 1, "", "bounds"], [627, 2, 1, "", "clone_with_theta"], [627, 2, 1, "", "diag"], [627, 2, 1, "", "get_params"], [627, 3, 1, "", "hyperparameters"], [627, 2, 1, "", "is_stationary"], [627, 3, 1, "", "n_dims"], [627, 3, 1, "", "requires_vector_input"], [627, 2, 1, "", "set_params"], [627, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.WhiteKernel": [[628, 2, 1, "", "__call__"], [628, 3, 1, "", "bounds"], [628, 2, 1, "", "clone_with_theta"], [628, 2, 1, "", "diag"], [628, 2, 1, "", "get_params"], [628, 3, 1, "", "hyperparameters"], [628, 2, 1, "", "is_stationary"], [628, 3, 1, "", "n_dims"], [628, 3, 1, "", "requires_vector_input"], [628, 2, 1, "", "set_params"], [628, 3, 1, "", "theta"]], "sklearn.impute": [[630, 1, 1, "", "IterativeImputer"], [631, 1, 1, "", "KNNImputer"], [632, 1, 1, "", "MissingIndicator"], [633, 1, 1, "", "SimpleImputer"]], "sklearn.impute.IterativeImputer": [[630, 2, 1, "", "fit"], [630, 2, 1, "", "fit_transform"], [630, 2, 1, "", "get_feature_names_out"], [630, 2, 1, "", "get_metadata_routing"], [630, 2, 1, "", "get_params"], [630, 2, 1, "", "set_output"], [630, 2, 1, "", "set_params"], [630, 2, 1, "", "transform"]], "sklearn.impute.KNNImputer": [[631, 2, 1, "", "fit"], [631, 2, 1, "", "fit_transform"], [631, 2, 1, "", "get_feature_names_out"], [631, 2, 1, "", "get_metadata_routing"], [631, 2, 1, "", "get_params"], [631, 2, 1, "", "set_output"], [631, 2, 1, "", "set_params"], [631, 2, 1, "", "transform"]], "sklearn.impute.MissingIndicator": [[632, 2, 1, "", "fit"], [632, 2, 1, "", "fit_transform"], [632, 2, 1, "", "get_feature_names_out"], [632, 2, 1, "", "get_metadata_routing"], [632, 2, 1, "", "get_params"], [632, 2, 1, "", "set_output"], [632, 2, 1, "", "set_params"], [632, 2, 1, "", "transform"]], "sklearn.impute.SimpleImputer": [[633, 2, 1, "", "fit"], [633, 2, 1, "", "fit_transform"], [633, 2, 1, "", "get_feature_names_out"], [633, 2, 1, "", "get_metadata_routing"], [633, 2, 1, "", "get_params"], [633, 2, 1, "", "inverse_transform"], [633, 2, 1, "", "set_output"], [633, 2, 1, "", "set_params"], [633, 2, 1, "", "transform"]], "sklearn.inspection": [[634, 1, 1, "", "DecisionBoundaryDisplay"], [635, 1, 1, "", "PartialDependenceDisplay"], [636, 4, 1, "", "partial_dependence"], [637, 4, 1, "", "permutation_importance"]], "sklearn.inspection.DecisionBoundaryDisplay": [[634, 2, 1, "", "from_estimator"], [634, 2, 1, "", "plot"]], "sklearn.inspection.PartialDependenceDisplay": [[635, 2, 1, "", "from_estimator"], [635, 2, 1, "", "plot"]], "sklearn.isotonic": [[638, 1, 1, "", "IsotonicRegression"], [639, 4, 1, "", "check_increasing"], [640, 4, 1, "", "isotonic_regression"]], "sklearn.isotonic.IsotonicRegression": [[638, 2, 1, "", "fit"], [638, 2, 1, "", "fit_transform"], [638, 2, 1, "", "get_feature_names_out"], [638, 2, 1, "", "get_metadata_routing"], [638, 2, 1, "", "get_params"], [638, 2, 1, "", "predict"], [638, 2, 1, "", "score"], [638, 2, 1, "", "set_fit_request"], [638, 2, 1, "", "set_output"], [638, 2, 1, "", "set_params"], [638, 2, 1, "", "set_score_request"], [638, 2, 1, "", "transform"]], "sklearn.kernel_approximation": [[641, 1, 1, "", "AdditiveChi2Sampler"], [642, 1, 1, "", "Nystroem"], [643, 1, 1, "", "PolynomialCountSketch"], [644, 1, 1, "", "RBFSampler"], [645, 1, 1, "", "SkewedChi2Sampler"]], "sklearn.kernel_approximation.AdditiveChi2Sampler": [[641, 2, 1, "", "fit"], [641, 2, 1, "", "fit_transform"], [641, 2, 1, "", "get_feature_names_out"], [641, 2, 1, "", "get_metadata_routing"], [641, 2, 1, "", "get_params"], [641, 2, 1, "", "set_output"], [641, 2, 1, "", "set_params"], [641, 2, 1, "", "transform"]], "sklearn.kernel_approximation.Nystroem": [[642, 2, 1, "", "fit"], [642, 2, 1, "", "fit_transform"], [642, 2, 1, "", "get_feature_names_out"], [642, 2, 1, "", "get_metadata_routing"], [642, 2, 1, "", "get_params"], [642, 2, 1, "", "set_output"], [642, 2, 1, "", "set_params"], [642, 2, 1, "", "transform"]], "sklearn.kernel_approximation.PolynomialCountSketch": [[643, 2, 1, "", "fit"], [643, 2, 1, "", "fit_transform"], [643, 2, 1, "", "get_feature_names_out"], [643, 2, 1, "", "get_metadata_routing"], [643, 2, 1, "", "get_params"], [643, 2, 1, "", "set_output"], [643, 2, 1, "", "set_params"], [643, 2, 1, "", "transform"]], "sklearn.kernel_approximation.RBFSampler": [[644, 2, 1, "", "fit"], [644, 2, 1, "", "fit_transform"], [644, 2, 1, "", "get_feature_names_out"], [644, 2, 1, "", "get_metadata_routing"], [644, 2, 1, "", "get_params"], [644, 2, 1, "", "set_output"], [644, 2, 1, "", "set_params"], [644, 2, 1, "", "transform"]], "sklearn.kernel_approximation.SkewedChi2Sampler": [[645, 2, 1, "", "fit"], [645, 2, 1, "", "fit_transform"], [645, 2, 1, "", "get_feature_names_out"], [645, 2, 1, "", "get_metadata_routing"], [645, 2, 1, "", "get_params"], [645, 2, 1, "", "set_output"], [645, 2, 1, "", "set_params"], [645, 2, 1, "", "transform"]], "sklearn.kernel_ridge": [[646, 1, 1, "", "KernelRidge"]], "sklearn.kernel_ridge.KernelRidge": [[646, 2, 1, "", "fit"], [646, 2, 1, "", "get_metadata_routing"], [646, 2, 1, "", "get_params"], [646, 2, 1, "", "predict"], [646, 2, 1, "", "score"], [646, 2, 1, "", "set_fit_request"], [646, 2, 1, "", "set_params"], [646, 2, 1, "", "set_score_request"]], "sklearn.linear_model": [[647, 1, 1, "", "ARDRegression"], [648, 1, 1, "", "BayesianRidge"], [649, 1, 1, "", "ElasticNet"], [650, 1, 1, "", "ElasticNetCV"], [651, 1, 1, "", "GammaRegressor"], [652, 1, 1, "", "HuberRegressor"], [653, 1, 1, "", "Lars"], [654, 1, 1, "", "LarsCV"], [655, 1, 1, "", "Lasso"], [656, 1, 1, "", "LassoCV"], [657, 1, 1, "", "LassoLars"], [658, 1, 1, "", "LassoLarsCV"], [659, 1, 1, "", "LassoLarsIC"], [660, 1, 1, "", "LinearRegression"], [661, 1, 1, "", "LogisticRegression"], [662, 1, 1, "", "LogisticRegressionCV"], [663, 1, 1, "", "MultiTaskElasticNet"], [664, 1, 1, "", "MultiTaskElasticNetCV"], [665, 1, 1, "", "MultiTaskLasso"], [666, 1, 1, "", "MultiTaskLassoCV"], [667, 1, 1, "", "OrthogonalMatchingPursuit"], [668, 1, 1, "", "OrthogonalMatchingPursuitCV"], [669, 1, 1, "", "PassiveAggressiveClassifier"], [670, 1, 1, "", "PassiveAggressiveRegressor"], [671, 1, 1, "", "Perceptron"], [672, 1, 1, "", "PoissonRegressor"], [673, 1, 1, "", "QuantileRegressor"], [674, 1, 1, "", "RANSACRegressor"], [675, 1, 1, "", "Ridge"], [676, 1, 1, "", "RidgeCV"], [677, 1, 1, "", "RidgeClassifier"], [678, 1, 1, "", "RidgeClassifierCV"], [679, 1, 1, "", "SGDClassifier"], [680, 1, 1, "", "SGDOneClassSVM"], [681, 1, 1, "", "SGDRegressor"], [682, 1, 1, "", "TheilSenRegressor"], [683, 1, 1, "", "TweedieRegressor"], [684, 4, 1, "", "enet_path"], [685, 4, 1, "", "lars_path"], [686, 4, 1, "", "lars_path_gram"], [687, 4, 1, "", "lasso_path"], [688, 4, 1, "", "orthogonal_mp"], [689, 4, 1, "", "orthogonal_mp_gram"], [690, 4, 1, "", "ridge_regression"]], "sklearn.linear_model.ARDRegression": [[647, 2, 1, "", "fit"], [647, 2, 1, "", "get_metadata_routing"], [647, 2, 1, "", "get_params"], [647, 2, 1, "", "predict"], [647, 2, 1, "", "score"], [647, 2, 1, "", "set_params"], [647, 2, 1, "", "set_predict_request"], [647, 2, 1, "", "set_score_request"]], "sklearn.linear_model.BayesianRidge": [[648, 2, 1, "", "fit"], [648, 2, 1, "", "get_metadata_routing"], [648, 2, 1, "", "get_params"], [648, 2, 1, "", "predict"], [648, 2, 1, "", "score"], [648, 2, 1, "", "set_fit_request"], [648, 2, 1, "", "set_params"], [648, 2, 1, "", "set_predict_request"], [648, 2, 1, "", "set_score_request"]], "sklearn.linear_model.ElasticNet": [[649, 2, 1, "", "fit"], [649, 2, 1, "", "get_metadata_routing"], [649, 2, 1, "", "get_params"], [649, 2, 1, "", "path"], [649, 2, 1, "", "predict"], [649, 2, 1, "", "score"], [649, 2, 1, "", "set_fit_request"], [649, 2, 1, "", "set_params"], [649, 2, 1, "", "set_score_request"], [649, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.ElasticNetCV": [[650, 2, 1, "", "fit"], [650, 2, 1, "", "get_metadata_routing"], [650, 2, 1, "", "get_params"], [650, 2, 1, "", "path"], [650, 2, 1, "", "predict"], [650, 2, 1, "", "score"], [650, 2, 1, "", "set_fit_request"], [650, 2, 1, "", "set_params"], [650, 2, 1, "", "set_score_request"]], "sklearn.linear_model.GammaRegressor": [[651, 2, 1, "", "fit"], [651, 2, 1, "", "get_metadata_routing"], [651, 2, 1, "", "get_params"], [651, 2, 1, "", "predict"], [651, 2, 1, "", "score"], [651, 2, 1, "", "set_fit_request"], [651, 2, 1, "", "set_params"], [651, 2, 1, "", "set_score_request"]], "sklearn.linear_model.HuberRegressor": [[652, 2, 1, "", "fit"], [652, 2, 1, "", "get_metadata_routing"], [652, 2, 1, "", "get_params"], [652, 2, 1, "", "predict"], [652, 2, 1, "", "score"], [652, 2, 1, "", "set_fit_request"], [652, 2, 1, "", "set_params"], [652, 2, 1, "", "set_score_request"]], "sklearn.linear_model.Lars": [[653, 2, 1, "", "fit"], [653, 2, 1, "", "get_metadata_routing"], [653, 2, 1, "", "get_params"], [653, 2, 1, "", "predict"], [653, 2, 1, "", "score"], [653, 2, 1, "", "set_fit_request"], [653, 2, 1, "", "set_params"], [653, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LarsCV": [[654, 2, 1, "", "fit"], [654, 2, 1, "", "get_metadata_routing"], [654, 2, 1, "", "get_params"], [654, 2, 1, "", "predict"], [654, 2, 1, "", "score"], [654, 2, 1, "", "set_fit_request"], [654, 2, 1, "", "set_params"], [654, 2, 1, "", "set_score_request"]], "sklearn.linear_model.Lasso": [[655, 2, 1, "", "fit"], [655, 2, 1, "", "get_metadata_routing"], [655, 2, 1, "", "get_params"], [655, 2, 1, "", "path"], [655, 2, 1, "", "predict"], [655, 2, 1, "", "score"], [655, 2, 1, "", "set_fit_request"], [655, 2, 1, "", "set_params"], [655, 2, 1, "", "set_score_request"], [655, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.LassoCV": [[656, 2, 1, "", "fit"], [656, 2, 1, "", "get_metadata_routing"], [656, 2, 1, "", "get_params"], [656, 2, 1, "", "path"], [656, 2, 1, "", "predict"], [656, 2, 1, "", "score"], [656, 2, 1, "", "set_fit_request"], [656, 2, 1, "", "set_params"], [656, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoLars": [[657, 2, 1, "", "fit"], [657, 2, 1, "", "get_metadata_routing"], [657, 2, 1, "", "get_params"], [657, 2, 1, "", "predict"], [657, 2, 1, "", "score"], [657, 2, 1, "", "set_fit_request"], [657, 2, 1, "", "set_params"], [657, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoLarsCV": [[658, 2, 1, "", "fit"], [658, 2, 1, "", "get_metadata_routing"], [658, 2, 1, "", "get_params"], [658, 2, 1, "", "predict"], [658, 2, 1, "", "score"], [658, 2, 1, "", "set_fit_request"], [658, 2, 1, "", "set_params"], [658, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoLarsIC": [[659, 2, 1, "", "fit"], [659, 2, 1, "", "get_metadata_routing"], [659, 2, 1, "", "get_params"], [659, 2, 1, "", "predict"], [659, 2, 1, "", "score"], [659, 2, 1, "", "set_fit_request"], [659, 2, 1, "", "set_params"], [659, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LinearRegression": [[660, 2, 1, "", "fit"], [660, 2, 1, "", "get_metadata_routing"], [660, 2, 1, "", "get_params"], [660, 2, 1, "", "predict"], [660, 2, 1, "", "score"], [660, 2, 1, "", "set_fit_request"], [660, 2, 1, "", "set_params"], [660, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LogisticRegression": [[661, 2, 1, "", "decision_function"], [661, 2, 1, "", "densify"], [661, 2, 1, "", "fit"], [661, 2, 1, "", "get_metadata_routing"], [661, 2, 1, "", "get_params"], [661, 2, 1, "", "predict"], [661, 2, 1, "", "predict_log_proba"], [661, 2, 1, "", "predict_proba"], [661, 2, 1, "", "score"], [661, 2, 1, "", "set_fit_request"], [661, 2, 1, "", "set_params"], [661, 2, 1, "", "set_score_request"], [661, 2, 1, "", "sparsify"]], "sklearn.linear_model.LogisticRegressionCV": [[662, 2, 1, "", "decision_function"], [662, 2, 1, "", "densify"], [662, 2, 1, "", "fit"], [662, 2, 1, "", "get_metadata_routing"], [662, 2, 1, "", "get_params"], [662, 2, 1, "", "predict"], [662, 2, 1, "", "predict_log_proba"], [662, 2, 1, "", "predict_proba"], [662, 2, 1, "", "score"], [662, 2, 1, "", "set_fit_request"], [662, 2, 1, "", "set_params"], [662, 2, 1, "", "set_score_request"], [662, 2, 1, "", "sparsify"]], "sklearn.linear_model.MultiTaskElasticNet": [[663, 2, 1, "", "fit"], [663, 2, 1, "", "get_metadata_routing"], [663, 2, 1, "", "get_params"], [663, 2, 1, "", "path"], [663, 2, 1, "", "predict"], [663, 2, 1, "", "score"], [663, 2, 1, "", "set_fit_request"], [663, 2, 1, "", "set_params"], [663, 2, 1, "", "set_score_request"], [663, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.MultiTaskElasticNetCV": [[664, 2, 1, "", "fit"], [664, 2, 1, "", "get_metadata_routing"], [664, 2, 1, "", "get_params"], [664, 2, 1, "", "path"], [664, 2, 1, "", "predict"], [664, 2, 1, "", "score"], [664, 2, 1, "", "set_fit_request"], [664, 2, 1, "", "set_params"], [664, 2, 1, "", "set_score_request"]], "sklearn.linear_model.MultiTaskLasso": [[665, 2, 1, "", "fit"], [665, 2, 1, "", "get_metadata_routing"], [665, 2, 1, "", "get_params"], [665, 2, 1, "", "path"], [665, 2, 1, "", "predict"], [665, 2, 1, "", "score"], [665, 2, 1, "", "set_fit_request"], [665, 2, 1, "", "set_params"], [665, 2, 1, "", "set_score_request"], [665, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.MultiTaskLassoCV": [[666, 2, 1, "", "fit"], [666, 2, 1, "", "get_metadata_routing"], [666, 2, 1, "", "get_params"], [666, 2, 1, "", "path"], [666, 2, 1, "", "predict"], [666, 2, 1, "", "score"], [666, 2, 1, "", "set_fit_request"], [666, 2, 1, "", "set_params"], [666, 2, 1, "", "set_score_request"]], "sklearn.linear_model.OrthogonalMatchingPursuit": [[667, 2, 1, "", "fit"], [667, 2, 1, "", "get_metadata_routing"], [667, 2, 1, "", "get_params"], [667, 2, 1, "", "predict"], [667, 2, 1, "", "score"], [667, 2, 1, "", "set_params"], [667, 2, 1, "", "set_score_request"]], "sklearn.linear_model.OrthogonalMatchingPursuitCV": [[668, 2, 1, "", "fit"], [668, 2, 1, "", "get_metadata_routing"], [668, 2, 1, "", "get_params"], [668, 2, 1, "", "predict"], [668, 2, 1, "", "score"], [668, 2, 1, "", "set_params"], [668, 2, 1, "", "set_score_request"]], "sklearn.linear_model.PassiveAggressiveClassifier": [[669, 2, 1, "", "decision_function"], [669, 2, 1, "", "densify"], [669, 2, 1, "", "fit"], [669, 2, 1, "", "get_metadata_routing"], [669, 2, 1, "", "get_params"], [669, 2, 1, "", "partial_fit"], [669, 2, 1, "", "predict"], [669, 2, 1, "", "score"], [669, 2, 1, "", "set_fit_request"], [669, 2, 1, "", "set_params"], [669, 2, 1, "", "set_partial_fit_request"], [669, 2, 1, "", "set_score_request"], [669, 2, 1, "", "sparsify"]], "sklearn.linear_model.PassiveAggressiveRegressor": [[670, 2, 1, "", "densify"], [670, 2, 1, "", "fit"], [670, 2, 1, "", "get_metadata_routing"], [670, 2, 1, "", "get_params"], [670, 2, 1, "", "partial_fit"], [670, 2, 1, "", "predict"], [670, 2, 1, "", "score"], [670, 2, 1, "", "set_fit_request"], [670, 2, 1, "", "set_params"], [670, 2, 1, "", "set_partial_fit_request"], [670, 2, 1, "", "set_score_request"], [670, 2, 1, "", "sparsify"]], "sklearn.linear_model.Perceptron": [[671, 2, 1, "", "decision_function"], [671, 2, 1, "", "densify"], [671, 2, 1, "", "fit"], [671, 2, 1, "", "get_metadata_routing"], [671, 2, 1, "", "get_params"], [671, 2, 1, "", "partial_fit"], [671, 2, 1, "", "predict"], [671, 2, 1, "", "score"], [671, 2, 1, "", "set_fit_request"], [671, 2, 1, "", "set_params"], [671, 2, 1, "", "set_partial_fit_request"], [671, 2, 1, "", "set_score_request"], [671, 2, 1, "", "sparsify"]], "sklearn.linear_model.PoissonRegressor": [[672, 2, 1, "", "fit"], [672, 2, 1, "", "get_metadata_routing"], [672, 2, 1, "", "get_params"], [672, 2, 1, "", "predict"], [672, 2, 1, "", "score"], [672, 2, 1, "", "set_fit_request"], [672, 2, 1, "", "set_params"], [672, 2, 1, "", "set_score_request"]], "sklearn.linear_model.QuantileRegressor": [[673, 2, 1, "", "fit"], [673, 2, 1, "", "get_metadata_routing"], [673, 2, 1, "", "get_params"], [673, 2, 1, "", "predict"], [673, 2, 1, "", "score"], [673, 2, 1, "", "set_fit_request"], [673, 2, 1, "", "set_params"], [673, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RANSACRegressor": [[674, 2, 1, "", "fit"], [674, 2, 1, "", "get_metadata_routing"], [674, 2, 1, "", "get_params"], [674, 2, 1, "", "predict"], [674, 2, 1, "", "score"], [674, 2, 1, "", "set_fit_request"], [674, 2, 1, "", "set_params"]], "sklearn.linear_model.Ridge": [[675, 2, 1, "", "fit"], [675, 2, 1, "", "get_metadata_routing"], [675, 2, 1, "", "get_params"], [675, 2, 1, "", "predict"], [675, 2, 1, "", "score"], [675, 2, 1, "", "set_fit_request"], [675, 2, 1, "", "set_params"], [675, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RidgeCV": [[676, 2, 1, "", "fit"], [676, 2, 1, "", "get_metadata_routing"], [676, 2, 1, "", "get_params"], [676, 2, 1, "", "predict"], [676, 2, 1, "", "score"], [676, 2, 1, "", "set_fit_request"], [676, 2, 1, "", "set_params"], [676, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RidgeClassifier": [[677, 3, 1, "", "classes_"], [677, 2, 1, "", "decision_function"], [677, 2, 1, "", "fit"], [677, 2, 1, "", "get_metadata_routing"], [677, 2, 1, "", "get_params"], [677, 2, 1, "", "predict"], [677, 2, 1, "", "score"], [677, 2, 1, "", "set_fit_request"], [677, 2, 1, "", "set_params"], [677, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RidgeClassifierCV": [[678, 3, 1, "", "classes_"], [678, 2, 1, "", "decision_function"], [678, 2, 1, "", "fit"], [678, 2, 1, "", "get_metadata_routing"], [678, 2, 1, "", "get_params"], [678, 2, 1, "", "predict"], [678, 2, 1, "", "score"], [678, 2, 1, "", "set_fit_request"], [678, 2, 1, "", "set_params"], [678, 2, 1, "", "set_score_request"]], "sklearn.linear_model.SGDClassifier": [[679, 2, 1, "", "decision_function"], [679, 2, 1, "", "densify"], [679, 2, 1, "", "fit"], [679, 2, 1, "", "get_metadata_routing"], [679, 2, 1, "", "get_params"], [679, 2, 1, "", "partial_fit"], [679, 2, 1, "", "predict"], [679, 2, 1, "", "predict_log_proba"], [679, 2, 1, "", "predict_proba"], [679, 2, 1, "", "score"], [679, 2, 1, "", "set_fit_request"], [679, 2, 1, "", "set_params"], [679, 2, 1, "", "set_partial_fit_request"], [679, 2, 1, "", "set_score_request"], [679, 2, 1, "", "sparsify"]], "sklearn.linear_model.SGDOneClassSVM": [[680, 2, 1, "", "decision_function"], [680, 2, 1, "", "densify"], [680, 2, 1, "", "fit"], [680, 2, 1, "", "fit_predict"], [680, 2, 1, "", "get_metadata_routing"], [680, 2, 1, "", "get_params"], [680, 2, 1, "", "partial_fit"], [680, 2, 1, "", "predict"], [680, 2, 1, "", "score_samples"], [680, 2, 1, "", "set_fit_request"], [680, 2, 1, "", "set_params"], [680, 2, 1, "", "set_partial_fit_request"], [680, 2, 1, "", "sparsify"]], "sklearn.linear_model.SGDRegressor": [[681, 2, 1, "", "densify"], [681, 2, 1, "", "fit"], [681, 2, 1, "", "get_metadata_routing"], [681, 2, 1, "", "get_params"], [681, 2, 1, "", "partial_fit"], [681, 2, 1, "", "predict"], [681, 2, 1, "", "score"], [681, 2, 1, "", "set_fit_request"], [681, 2, 1, "", "set_params"], [681, 2, 1, "", "set_partial_fit_request"], [681, 2, 1, "", "set_score_request"], [681, 2, 1, "", "sparsify"]], "sklearn.linear_model.TheilSenRegressor": [[682, 2, 1, "", "fit"], [682, 2, 1, "", "get_metadata_routing"], [682, 2, 1, "", "get_params"], [682, 2, 1, "", "predict"], [682, 2, 1, "", "score"], [682, 2, 1, "", "set_params"], [682, 2, 1, "", "set_score_request"]], "sklearn.linear_model.TweedieRegressor": [[683, 2, 1, "", "fit"], [683, 2, 1, "", "get_metadata_routing"], [683, 2, 1, "", "get_params"], [683, 2, 1, "", "predict"], [683, 2, 1, "", "score"], [683, 2, 1, "", "set_fit_request"], [683, 2, 1, "", "set_params"], [683, 2, 1, "", "set_score_request"]], "sklearn.manifold": [[691, 1, 1, "", "Isomap"], [692, 1, 1, "", "LocallyLinearEmbedding"], [693, 1, 1, "", "MDS"], [694, 1, 1, "", "SpectralEmbedding"], [695, 1, 1, "", "TSNE"], [696, 4, 1, "", "locally_linear_embedding"], [697, 4, 1, "", "smacof"], [698, 4, 1, "", "spectral_embedding"], [699, 4, 1, "", "trustworthiness"]], "sklearn.manifold.Isomap": [[691, 2, 1, "", "fit"], [691, 2, 1, "", "fit_transform"], [691, 2, 1, "", "get_feature_names_out"], [691, 2, 1, "", "get_metadata_routing"], [691, 2, 1, "", "get_params"], [691, 2, 1, "", "reconstruction_error"], [691, 2, 1, "", "set_output"], [691, 2, 1, "", "set_params"], [691, 2, 1, "", "transform"]], "sklearn.manifold.LocallyLinearEmbedding": [[692, 2, 1, "", "fit"], [692, 2, 1, "", "fit_transform"], [692, 2, 1, "", "get_feature_names_out"], [692, 2, 1, "", "get_metadata_routing"], [692, 2, 1, "", "get_params"], [692, 2, 1, "", "set_output"], [692, 2, 1, "", "set_params"], [692, 2, 1, "", "transform"]], "sklearn.manifold.MDS": [[693, 2, 1, "", "fit"], [693, 2, 1, "", "fit_transform"], [693, 2, 1, "", "get_metadata_routing"], [693, 2, 1, "", "get_params"], [693, 2, 1, "", "set_fit_request"], [693, 2, 1, "", "set_params"]], "sklearn.manifold.SpectralEmbedding": [[694, 2, 1, "", "fit"], [694, 2, 1, "", "fit_transform"], [694, 2, 1, "", "get_metadata_routing"], [694, 2, 1, "", "get_params"], [694, 2, 1, "", "set_params"]], "sklearn.manifold.TSNE": [[695, 2, 1, "", "fit"], [695, 2, 1, "", "fit_transform"], [695, 2, 1, "", "get_feature_names_out"], [695, 2, 1, "", "get_metadata_routing"], [695, 2, 1, "", "get_params"], [695, 2, 1, "", "set_output"], [695, 2, 1, "", "set_params"]], "sklearn.metrics": [[700, 1, 1, "", "ConfusionMatrixDisplay"], [701, 1, 1, "", "DetCurveDisplay"], [702, 1, 1, "", "DistanceMetric"], [703, 1, 1, "", "PrecisionRecallDisplay"], [704, 1, 1, "", "PredictionErrorDisplay"], [705, 1, 1, "", "RocCurveDisplay"], [706, 4, 1, "", "accuracy_score"], [707, 4, 1, "", "adjusted_mutual_info_score"], [708, 4, 1, "", "adjusted_rand_score"], [709, 4, 1, "", "auc"], [710, 4, 1, "", "average_precision_score"], [711, 4, 1, "", "balanced_accuracy_score"], [712, 4, 1, "", "brier_score_loss"], [713, 4, 1, "", "calinski_harabasz_score"], [714, 4, 1, "", "check_scoring"], [715, 4, 1, "", "class_likelihood_ratios"], [716, 4, 1, "", "classification_report"], [28, 0, 0, "-", "cluster"], [719, 4, 1, "", "cohen_kappa_score"], [720, 4, 1, "", "completeness_score"], [721, 4, 1, "", "confusion_matrix"], [722, 4, 1, "", "consensus_score"], [723, 4, 1, "", "coverage_error"], [724, 4, 1, "", "d2_absolute_error_score"], [725, 4, 1, "", "d2_log_loss_score"], [726, 4, 1, "", "d2_pinball_score"], [727, 4, 1, "", "d2_tweedie_score"], [728, 4, 1, "", "davies_bouldin_score"], [729, 4, 1, "", "dcg_score"], [730, 4, 1, "", "det_curve"], [731, 4, 1, "", "explained_variance_score"], [732, 4, 1, "", "f1_score"], [733, 4, 1, "", "fbeta_score"], [734, 4, 1, "", "fowlkes_mallows_score"], [735, 4, 1, "", "get_scorer"], [736, 4, 1, "", "get_scorer_names"], [737, 4, 1, "", "hamming_loss"], [738, 4, 1, "", "hinge_loss"], [739, 4, 1, "", "homogeneity_completeness_v_measure"], [740, 4, 1, "", "homogeneity_score"], [741, 4, 1, "", "jaccard_score"], [742, 4, 1, "", "label_ranking_average_precision_score"], [743, 4, 1, "", "label_ranking_loss"], [744, 4, 1, "", "log_loss"], [745, 4, 1, "", "make_scorer"], [746, 4, 1, "", "matthews_corrcoef"], [747, 4, 1, "", "max_error"], [748, 4, 1, "", "mean_absolute_error"], [749, 4, 1, "", "mean_absolute_percentage_error"], [750, 4, 1, "", "mean_gamma_deviance"], [751, 4, 1, "", "mean_pinball_loss"], [752, 4, 1, "", "mean_poisson_deviance"], [753, 4, 1, "", "mean_squared_error"], [754, 4, 1, "", "mean_squared_log_error"], [755, 4, 1, "", "mean_tweedie_deviance"], [756, 4, 1, "", "median_absolute_error"], [757, 4, 1, "", "multilabel_confusion_matrix"], [758, 4, 1, "", "mutual_info_score"], [759, 4, 1, "", "ndcg_score"], [760, 4, 1, "", "normalized_mutual_info_score"], [28, 0, 0, "-", "pairwise"], [781, 4, 1, "", "pairwise_distances"], [782, 4, 1, "", "pairwise_distances_argmin"], [783, 4, 1, "", "pairwise_distances_argmin_min"], [784, 4, 1, "", "pairwise_distances_chunked"], [785, 4, 1, "", "precision_recall_curve"], [786, 4, 1, "", "precision_recall_fscore_support"], [787, 4, 1, "", "precision_score"], [788, 4, 1, "", "r2_score"], [789, 4, 1, "", "rand_score"], [790, 4, 1, "", "recall_score"], [791, 4, 1, "", "roc_auc_score"], [792, 4, 1, "", "roc_curve"], [793, 4, 1, "", "root_mean_squared_error"], [794, 4, 1, "", "root_mean_squared_log_error"], [795, 4, 1, "", "silhouette_samples"], [796, 4, 1, "", "silhouette_score"], [797, 4, 1, "", "top_k_accuracy_score"], [798, 4, 1, "", "v_measure_score"], [799, 4, 1, "", "zero_one_loss"]], "sklearn.metrics.ConfusionMatrixDisplay": [[700, 2, 1, "", "from_estimator"], [700, 2, 1, "", "from_predictions"], [700, 2, 1, "", "plot"]], "sklearn.metrics.DetCurveDisplay": [[701, 2, 1, "", "from_estimator"], [701, 2, 1, "", "from_predictions"], [701, 2, 1, "", "plot"]], "sklearn.metrics.DistanceMetric": [[702, 2, 1, "", "get_metric"]], "sklearn.metrics.PrecisionRecallDisplay": [[703, 2, 1, "", "from_estimator"], [703, 2, 1, "", "from_predictions"], [703, 2, 1, "", "plot"]], "sklearn.metrics.PredictionErrorDisplay": [[704, 2, 1, "", "from_estimator"], [704, 2, 1, "", "from_predictions"], [704, 2, 1, "", "plot"]], "sklearn.metrics.RocCurveDisplay": [[705, 2, 1, "", "from_estimator"], [705, 2, 1, "", "from_predictions"], [705, 2, 1, "", "plot"]], "sklearn.metrics.cluster": [[717, 4, 1, "", "contingency_matrix"], [718, 4, 1, "", "pair_confusion_matrix"]], "sklearn.metrics.pairwise": [[761, 4, 1, "", "additive_chi2_kernel"], [762, 4, 1, "", "chi2_kernel"], [763, 4, 1, "", "cosine_distances"], [764, 4, 1, "", "cosine_similarity"], [765, 4, 1, "", "distance_metrics"], [766, 4, 1, "", "euclidean_distances"], [767, 4, 1, "", "haversine_distances"], [768, 4, 1, "", "kernel_metrics"], [769, 4, 1, "", "laplacian_kernel"], [770, 4, 1, "", "linear_kernel"], [771, 4, 1, "", "manhattan_distances"], [772, 4, 1, "", "nan_euclidean_distances"], [773, 4, 1, "", "paired_cosine_distances"], [774, 4, 1, "", "paired_distances"], [775, 4, 1, "", "paired_euclidean_distances"], [776, 4, 1, "", "paired_manhattan_distances"], [777, 4, 1, "", "pairwise_kernels"], [778, 4, 1, "", "polynomial_kernel"], [779, 4, 1, "", "rbf_kernel"], [780, 4, 1, "", "sigmoid_kernel"]], "sklearn.mixture": [[800, 1, 1, "", "BayesianGaussianMixture"], [801, 1, 1, "", "GaussianMixture"]], "sklearn.mixture.BayesianGaussianMixture": [[800, 2, 1, "", "fit"], [800, 2, 1, "", "fit_predict"], [800, 2, 1, "", "get_metadata_routing"], [800, 2, 1, "", "get_params"], [800, 2, 1, "", "predict"], [800, 2, 1, "", "predict_proba"], [800, 2, 1, "", "sample"], [800, 2, 1, "", "score"], [800, 2, 1, "", "score_samples"], [800, 2, 1, "", "set_params"]], "sklearn.mixture.GaussianMixture": [[801, 2, 1, "", "aic"], [801, 2, 1, "", "bic"], [801, 2, 1, "", "fit"], [801, 2, 1, "", "fit_predict"], [801, 2, 1, "", "get_metadata_routing"], [801, 2, 1, "", "get_params"], [801, 2, 1, "", "predict"], [801, 2, 1, "", "predict_proba"], [801, 2, 1, "", "sample"], [801, 2, 1, "", "score"], [801, 2, 1, "", "score_samples"], [801, 2, 1, "", "set_params"]], "sklearn.model_selection": [[802, 1, 1, "", "FixedThresholdClassifier"], [803, 1, 1, "", "GridSearchCV"], [804, 1, 1, "", "GroupKFold"], [805, 1, 1, "", "GroupShuffleSplit"], [806, 1, 1, "", "HalvingGridSearchCV"], [807, 1, 1, "", "HalvingRandomSearchCV"], [808, 1, 1, "", "KFold"], [809, 1, 1, "", "LearningCurveDisplay"], [810, 1, 1, "", "LeaveOneGroupOut"], [811, 1, 1, "", "LeaveOneOut"], [812, 1, 1, "", "LeavePGroupsOut"], [813, 1, 1, "", "LeavePOut"], [814, 1, 1, "", "ParameterGrid"], [815, 1, 1, "", "ParameterSampler"], [816, 1, 1, "", "PredefinedSplit"], [817, 1, 1, "", "RandomizedSearchCV"], [818, 1, 1, "", "RepeatedKFold"], [819, 1, 1, "", "RepeatedStratifiedKFold"], [820, 1, 1, "", "ShuffleSplit"], [821, 1, 1, "", "StratifiedGroupKFold"], [822, 1, 1, "", "StratifiedKFold"], [823, 1, 1, "", "StratifiedShuffleSplit"], [824, 1, 1, "", "TimeSeriesSplit"], [825, 1, 1, "", "TunedThresholdClassifierCV"], [826, 1, 1, "", "ValidationCurveDisplay"], [827, 4, 1, "", "check_cv"], [828, 4, 1, "", "cross_val_predict"], [829, 4, 1, "", "cross_val_score"], [830, 4, 1, "", "cross_validate"], [831, 4, 1, "", "learning_curve"], [832, 4, 1, "", "permutation_test_score"], [833, 4, 1, "", "train_test_split"], [834, 4, 1, "", "validation_curve"]], "sklearn.model_selection.FixedThresholdClassifier": [[802, 3, 1, "", "classes_"], [802, 2, 1, "", "decision_function"], [802, 2, 1, "", "fit"], [802, 2, 1, "", "get_metadata_routing"], [802, 2, 1, "", "get_params"], [802, 2, 1, "", "predict"], [802, 2, 1, "", "predict_log_proba"], [802, 2, 1, "", "predict_proba"], [802, 2, 1, "", "score"], [802, 2, 1, "", "set_params"], [802, 2, 1, "", "set_score_request"]], "sklearn.model_selection.GridSearchCV": [[803, 3, 1, "", "classes_"], [803, 2, 1, "", "decision_function"], [803, 2, 1, "", "fit"], [803, 2, 1, "", "get_metadata_routing"], [803, 2, 1, "", "get_params"], [803, 2, 1, "", "inverse_transform"], [803, 3, 1, "", "n_features_in_"], [803, 2, 1, "", "predict"], [803, 2, 1, "", "predict_log_proba"], [803, 2, 1, "", "predict_proba"], [803, 2, 1, "", "score"], [803, 2, 1, "", "score_samples"], [803, 2, 1, "", "set_params"], [803, 2, 1, "", "transform"]], "sklearn.model_selection.GroupKFold": [[804, 2, 1, "", "get_metadata_routing"], [804, 2, 1, "", "get_n_splits"], [804, 2, 1, "", "set_split_request"], [804, 2, 1, "", "split"]], "sklearn.model_selection.GroupShuffleSplit": [[805, 2, 1, "", "get_metadata_routing"], [805, 2, 1, "", "get_n_splits"], [805, 2, 1, "", "set_split_request"], [805, 2, 1, "", "split"]], "sklearn.model_selection.HalvingGridSearchCV": [[806, 3, 1, "", "classes_"], [806, 2, 1, "", "decision_function"], [806, 2, 1, "", "fit"], [806, 2, 1, "", "get_metadata_routing"], [806, 2, 1, "", "get_params"], [806, 2, 1, "", "inverse_transform"], [806, 3, 1, "", "n_features_in_"], [806, 2, 1, "", "predict"], [806, 2, 1, "", "predict_log_proba"], [806, 2, 1, "", "predict_proba"], [806, 2, 1, "", "score"], [806, 2, 1, "", "score_samples"], [806, 2, 1, "", "set_params"], [806, 2, 1, "", "transform"]], "sklearn.model_selection.HalvingRandomSearchCV": [[807, 3, 1, "", "classes_"], [807, 2, 1, "", "decision_function"], [807, 2, 1, "", "fit"], [807, 2, 1, "", "get_metadata_routing"], [807, 2, 1, "", "get_params"], [807, 2, 1, "", "inverse_transform"], [807, 3, 1, "", "n_features_in_"], [807, 2, 1, "", "predict"], [807, 2, 1, "", "predict_log_proba"], [807, 2, 1, "", "predict_proba"], [807, 2, 1, "", "score"], [807, 2, 1, "", "score_samples"], [807, 2, 1, "", "set_params"], [807, 2, 1, "", "transform"]], "sklearn.model_selection.KFold": [[808, 2, 1, "", "get_metadata_routing"], [808, 2, 1, "", "get_n_splits"], [808, 2, 1, "", "split"]], "sklearn.model_selection.LearningCurveDisplay": [[809, 2, 1, "", "from_estimator"], [809, 2, 1, "", "plot"]], "sklearn.model_selection.LeaveOneGroupOut": [[810, 2, 1, "", "get_metadata_routing"], [810, 2, 1, "", "get_n_splits"], [810, 2, 1, "", "set_split_request"], [810, 2, 1, "", "split"]], "sklearn.model_selection.LeaveOneOut": [[811, 2, 1, "", "get_metadata_routing"], [811, 2, 1, "", "get_n_splits"], [811, 2, 1, "", "split"]], "sklearn.model_selection.LeavePGroupsOut": [[812, 2, 1, "", "get_metadata_routing"], [812, 2, 1, "", "get_n_splits"], [812, 2, 1, "", "set_split_request"], [812, 2, 1, "", "split"]], "sklearn.model_selection.LeavePOut": [[813, 2, 1, "", "get_metadata_routing"], [813, 2, 1, "", "get_n_splits"], [813, 2, 1, "", "split"]], "sklearn.model_selection.PredefinedSplit": [[816, 2, 1, "", "get_metadata_routing"], [816, 2, 1, "", "get_n_splits"], [816, 2, 1, "", "split"]], "sklearn.model_selection.RandomizedSearchCV": [[817, 3, 1, "", "classes_"], [817, 2, 1, "", "decision_function"], [817, 2, 1, "", "fit"], [817, 2, 1, "", "get_metadata_routing"], [817, 2, 1, "", "get_params"], [817, 2, 1, "", "inverse_transform"], [817, 3, 1, "", "n_features_in_"], [817, 2, 1, "", "predict"], [817, 2, 1, "", "predict_log_proba"], [817, 2, 1, "", "predict_proba"], [817, 2, 1, "", "score"], [817, 2, 1, "", "score_samples"], [817, 2, 1, "", "set_params"], [817, 2, 1, "", "transform"]], "sklearn.model_selection.RepeatedKFold": [[818, 2, 1, "", "get_metadata_routing"], [818, 2, 1, "", "get_n_splits"], [818, 2, 1, "", "split"]], "sklearn.model_selection.RepeatedStratifiedKFold": [[819, 2, 1, "", "get_metadata_routing"], [819, 2, 1, "", "get_n_splits"], [819, 2, 1, "", "split"]], "sklearn.model_selection.ShuffleSplit": [[820, 2, 1, "", "get_metadata_routing"], [820, 2, 1, "", "get_n_splits"], [820, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedGroupKFold": [[821, 2, 1, "", "get_metadata_routing"], [821, 2, 1, "", "get_n_splits"], [821, 2, 1, "", "set_split_request"], [821, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedKFold": [[822, 2, 1, "", "get_metadata_routing"], [822, 2, 1, "", "get_n_splits"], [822, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedShuffleSplit": [[823, 2, 1, "", "get_metadata_routing"], [823, 2, 1, "", "get_n_splits"], [823, 2, 1, "", "split"]], "sklearn.model_selection.TimeSeriesSplit": [[824, 2, 1, "", "get_metadata_routing"], [824, 2, 1, "", "get_n_splits"], [824, 2, 1, "", "split"]], "sklearn.model_selection.TunedThresholdClassifierCV": [[825, 3, 1, "", "classes_"], [825, 2, 1, "", "decision_function"], [825, 2, 1, "", "fit"], [825, 2, 1, "", "get_metadata_routing"], [825, 2, 1, "", "get_params"], [825, 2, 1, "", "predict"], [825, 2, 1, "", "predict_log_proba"], [825, 2, 1, "", "predict_proba"], [825, 2, 1, "", "score"], [825, 2, 1, "", "set_params"], [825, 2, 1, "", "set_score_request"]], "sklearn.model_selection.ValidationCurveDisplay": [[826, 2, 1, "", "from_estimator"], [826, 2, 1, "", "plot"]], "sklearn.multiclass": [[835, 1, 1, "", "OneVsOneClassifier"], [836, 1, 1, "", "OneVsRestClassifier"], [837, 1, 1, "", "OutputCodeClassifier"]], "sklearn.multiclass.OneVsOneClassifier": [[835, 2, 1, "", "decision_function"], [835, 2, 1, "", "fit"], [835, 2, 1, "", "get_metadata_routing"], [835, 2, 1, "", "get_params"], [835, 3, 1, "", "n_classes_"], [835, 2, 1, "", "partial_fit"], [835, 2, 1, "", "predict"], [835, 2, 1, "", "score"], [835, 2, 1, "", "set_params"], [835, 2, 1, "", "set_partial_fit_request"], [835, 2, 1, "", "set_score_request"]], "sklearn.multiclass.OneVsRestClassifier": [[836, 2, 1, "", "decision_function"], [836, 2, 1, "", "fit"], [836, 2, 1, "", "get_metadata_routing"], [836, 2, 1, "", "get_params"], [836, 3, 1, "", "multilabel_"], [836, 3, 1, "", "n_classes_"], [836, 2, 1, "", "partial_fit"], [836, 2, 1, "", "predict"], [836, 2, 1, "", "predict_proba"], [836, 2, 1, "", "score"], [836, 2, 1, "", "set_params"], [836, 2, 1, "", "set_partial_fit_request"], [836, 2, 1, "", "set_score_request"]], "sklearn.multiclass.OutputCodeClassifier": [[837, 2, 1, "", "fit"], [837, 2, 1, "", "get_metadata_routing"], [837, 2, 1, "", "get_params"], [837, 2, 1, "", "predict"], [837, 2, 1, "", "score"], [837, 2, 1, "", "set_params"], [837, 2, 1, "", "set_score_request"]], "sklearn.multioutput": [[838, 1, 1, "", "ClassifierChain"], [839, 1, 1, "", "MultiOutputClassifier"], [840, 1, 1, "", "MultiOutputRegressor"], [841, 1, 1, "", "RegressorChain"]], "sklearn.multioutput.ClassifierChain": [[838, 2, 1, "", "decision_function"], [838, 2, 1, "", "fit"], [838, 2, 1, "", "get_metadata_routing"], [838, 2, 1, "", "get_params"], [838, 2, 1, "", "predict"], [838, 2, 1, "", "predict_log_proba"], [838, 2, 1, "", "predict_proba"], [838, 2, 1, "", "score"], [838, 2, 1, "", "set_params"], [838, 2, 1, "", "set_score_request"]], "sklearn.multioutput.MultiOutputClassifier": [[839, 2, 1, "", "fit"], [839, 2, 1, "", "get_metadata_routing"], [839, 2, 1, "", "get_params"], [839, 2, 1, "", "partial_fit"], [839, 2, 1, "", "predict"], [839, 2, 1, "", "predict_proba"], [839, 2, 1, "", "score"], [839, 2, 1, "", "set_fit_request"], [839, 2, 1, "", "set_params"], [839, 2, 1, "", "set_partial_fit_request"]], "sklearn.multioutput.MultiOutputRegressor": [[840, 2, 1, "", "fit"], [840, 2, 1, "", "get_metadata_routing"], [840, 2, 1, "", "get_params"], [840, 2, 1, "", "partial_fit"], [840, 2, 1, "", "predict"], [840, 2, 1, "", "score"], [840, 2, 1, "", "set_fit_request"], [840, 2, 1, "", "set_params"], [840, 2, 1, "", "set_partial_fit_request"], [840, 2, 1, "", "set_score_request"]], "sklearn.multioutput.RegressorChain": [[841, 2, 1, "", "fit"], [841, 2, 1, "", "get_metadata_routing"], [841, 2, 1, "", "get_params"], [841, 2, 1, "", "predict"], [841, 2, 1, "", "score"], [841, 2, 1, "", "set_params"], [841, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes": [[842, 1, 1, "", "BernoulliNB"], [843, 1, 1, "", "CategoricalNB"], [844, 1, 1, "", "ComplementNB"], [845, 1, 1, "", "GaussianNB"], [846, 1, 1, "", "MultinomialNB"]], "sklearn.naive_bayes.BernoulliNB": [[842, 2, 1, "", "fit"], [842, 2, 1, "", "get_metadata_routing"], [842, 2, 1, "", "get_params"], [842, 2, 1, "", "partial_fit"], [842, 2, 1, "", "predict"], [842, 2, 1, "", "predict_joint_log_proba"], [842, 2, 1, "", "predict_log_proba"], [842, 2, 1, "", "predict_proba"], [842, 2, 1, "", "score"], [842, 2, 1, "", "set_fit_request"], [842, 2, 1, "", "set_params"], [842, 2, 1, "", "set_partial_fit_request"], [842, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.CategoricalNB": [[843, 2, 1, "", "fit"], [843, 2, 1, "", "get_metadata_routing"], [843, 2, 1, "", "get_params"], [843, 2, 1, "", "partial_fit"], [843, 2, 1, "", "predict"], [843, 2, 1, "", "predict_joint_log_proba"], [843, 2, 1, "", "predict_log_proba"], [843, 2, 1, "", "predict_proba"], [843, 2, 1, "", "score"], [843, 2, 1, "", "set_fit_request"], [843, 2, 1, "", "set_params"], [843, 2, 1, "", "set_partial_fit_request"], [843, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.ComplementNB": [[844, 2, 1, "", "fit"], [844, 2, 1, "", "get_metadata_routing"], [844, 2, 1, "", "get_params"], [844, 2, 1, "", "partial_fit"], [844, 2, 1, "", "predict"], [844, 2, 1, "", "predict_joint_log_proba"], [844, 2, 1, "", "predict_log_proba"], [844, 2, 1, "", "predict_proba"], [844, 2, 1, "", "score"], [844, 2, 1, "", "set_fit_request"], [844, 2, 1, "", "set_params"], [844, 2, 1, "", "set_partial_fit_request"], [844, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.GaussianNB": [[845, 2, 1, "", "fit"], [845, 2, 1, "", "get_metadata_routing"], [845, 2, 1, "", "get_params"], [845, 2, 1, "", "partial_fit"], [845, 2, 1, "", "predict"], [845, 2, 1, "", "predict_joint_log_proba"], [845, 2, 1, "", "predict_log_proba"], [845, 2, 1, "", "predict_proba"], [845, 2, 1, "", "score"], [845, 2, 1, "", "set_fit_request"], [845, 2, 1, "", "set_params"], [845, 2, 1, "", "set_partial_fit_request"], [845, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.MultinomialNB": [[846, 2, 1, "", "fit"], [846, 2, 1, "", "get_metadata_routing"], [846, 2, 1, "", "get_params"], [846, 2, 1, "", "partial_fit"], [846, 2, 1, "", "predict"], [846, 2, 1, "", "predict_joint_log_proba"], [846, 2, 1, "", "predict_log_proba"], [846, 2, 1, "", "predict_proba"], [846, 2, 1, "", "score"], [846, 2, 1, "", "set_fit_request"], [846, 2, 1, "", "set_params"], [846, 2, 1, "", "set_partial_fit_request"], [846, 2, 1, "", "set_score_request"]], "sklearn.neighbors": [[847, 1, 1, "", "BallTree"], [848, 1, 1, "", "KDTree"], [849, 1, 1, "", "KNeighborsClassifier"], [850, 1, 1, "", "KNeighborsRegressor"], [851, 1, 1, "", "KNeighborsTransformer"], [852, 1, 1, "", "KernelDensity"], [853, 1, 1, "", "LocalOutlierFactor"], [854, 1, 1, "", "NearestCentroid"], [855, 1, 1, "", "NearestNeighbors"], [856, 1, 1, "", "NeighborhoodComponentsAnalysis"], [857, 1, 1, "", "RadiusNeighborsClassifier"], [858, 1, 1, "", "RadiusNeighborsRegressor"], [859, 1, 1, "", "RadiusNeighborsTransformer"], [860, 4, 1, "", "kneighbors_graph"], [861, 4, 1, "", "radius_neighbors_graph"], [862, 4, 1, "", "sort_graph_by_row_values"]], "sklearn.neighbors.BallTree": [[847, 2, 1, "", "get_arrays"], [847, 2, 1, "", "get_n_calls"], [847, 2, 1, "", "get_tree_stats"], [847, 2, 1, "", "kernel_density"], [847, 2, 1, "", "query"], [847, 2, 1, "", "query_radius"], [847, 2, 1, "", "reset_n_calls"], [847, 2, 1, "", "two_point_correlation"]], "sklearn.neighbors.KDTree": [[848, 2, 1, "", "get_arrays"], [848, 2, 1, "", "get_n_calls"], [848, 2, 1, "", "get_tree_stats"], [848, 2, 1, "", "kernel_density"], [848, 2, 1, "", "query"], [848, 2, 1, "", "query_radius"], [848, 2, 1, "", "reset_n_calls"], [848, 2, 1, "", "two_point_correlation"]], "sklearn.neighbors.KNeighborsClassifier": [[849, 2, 1, "", "fit"], [849, 2, 1, "", "get_metadata_routing"], [849, 2, 1, "", "get_params"], [849, 2, 1, "", "kneighbors"], [849, 2, 1, "", "kneighbors_graph"], [849, 2, 1, "", "predict"], [849, 2, 1, "", "predict_proba"], [849, 2, 1, "", "score"], [849, 2, 1, "", "set_params"], [849, 2, 1, "", "set_score_request"]], "sklearn.neighbors.KNeighborsRegressor": [[850, 2, 1, "", "fit"], [850, 2, 1, "", "get_metadata_routing"], [850, 2, 1, "", "get_params"], [850, 2, 1, "", "kneighbors"], [850, 2, 1, "", "kneighbors_graph"], [850, 2, 1, "", "predict"], [850, 2, 1, "", "score"], [850, 2, 1, "", "set_params"], [850, 2, 1, "", "set_score_request"]], "sklearn.neighbors.KNeighborsTransformer": [[851, 2, 1, "", "fit"], [851, 2, 1, "", "fit_transform"], [851, 2, 1, "", "get_feature_names_out"], [851, 2, 1, "", "get_metadata_routing"], [851, 2, 1, "", "get_params"], [851, 2, 1, "", "kneighbors"], [851, 2, 1, "", "kneighbors_graph"], [851, 2, 1, "", "set_output"], [851, 2, 1, "", "set_params"], [851, 2, 1, "", "transform"]], "sklearn.neighbors.KernelDensity": [[852, 2, 1, "", "fit"], [852, 2, 1, "", "get_metadata_routing"], [852, 2, 1, "", "get_params"], [852, 2, 1, "", "sample"], [852, 2, 1, "", "score"], [852, 2, 1, "", "score_samples"], [852, 2, 1, "", "set_fit_request"], [852, 2, 1, "", "set_params"]], "sklearn.neighbors.LocalOutlierFactor": [[853, 2, 1, "", "decision_function"], [853, 2, 1, "", "fit"], [853, 2, 1, "", "fit_predict"], [853, 2, 1, "", "get_metadata_routing"], [853, 2, 1, "", "get_params"], [853, 2, 1, "", "kneighbors"], [853, 2, 1, "", "kneighbors_graph"], [853, 2, 1, "", "predict"], [853, 2, 1, "", "score_samples"], [853, 2, 1, "", "set_params"]], "sklearn.neighbors.NearestCentroid": [[854, 2, 1, "", "decision_function"], [854, 2, 1, "", "fit"], [854, 2, 1, "", "get_metadata_routing"], [854, 2, 1, "", "get_params"], [854, 2, 1, "", "predict"], [854, 2, 1, "", "predict_log_proba"], [854, 2, 1, "", "predict_proba"], [854, 2, 1, "", "score"], [854, 2, 1, "", "set_params"], [854, 2, 1, "", "set_score_request"]], "sklearn.neighbors.NearestNeighbors": [[855, 2, 1, "", "fit"], [855, 2, 1, "", "get_metadata_routing"], [855, 2, 1, "", "get_params"], [855, 2, 1, "", "kneighbors"], [855, 2, 1, "", "kneighbors_graph"], [855, 2, 1, "", "radius_neighbors"], [855, 2, 1, "", "radius_neighbors_graph"], [855, 2, 1, "", "set_params"]], "sklearn.neighbors.NeighborhoodComponentsAnalysis": [[856, 2, 1, "", "fit"], [856, 2, 1, "", "fit_transform"], [856, 2, 1, "", "get_feature_names_out"], [856, 2, 1, "", "get_metadata_routing"], [856, 2, 1, "", "get_params"], [856, 2, 1, "", "set_output"], [856, 2, 1, "", "set_params"], [856, 2, 1, "", "transform"]], "sklearn.neighbors.RadiusNeighborsClassifier": [[857, 2, 1, "", "fit"], [857, 2, 1, "", "get_metadata_routing"], [857, 2, 1, "", "get_params"], [857, 2, 1, "", "predict"], [857, 2, 1, "", "predict_proba"], [857, 2, 1, "", "radius_neighbors"], [857, 2, 1, "", "radius_neighbors_graph"], [857, 2, 1, "", "score"], [857, 2, 1, "", "set_params"], [857, 2, 1, "", "set_score_request"]], "sklearn.neighbors.RadiusNeighborsRegressor": [[858, 2, 1, "", "fit"], [858, 2, 1, "", "get_metadata_routing"], [858, 2, 1, "", "get_params"], [858, 2, 1, "", "predict"], [858, 2, 1, "", "radius_neighbors"], [858, 2, 1, "", "radius_neighbors_graph"], [858, 2, 1, "", "score"], [858, 2, 1, "", "set_params"], [858, 2, 1, "", "set_score_request"]], "sklearn.neighbors.RadiusNeighborsTransformer": [[859, 2, 1, "", "fit"], [859, 2, 1, "", "fit_transform"], [859, 2, 1, "", "get_feature_names_out"], [859, 2, 1, "", "get_metadata_routing"], [859, 2, 1, "", "get_params"], [859, 2, 1, "", "radius_neighbors"], [859, 2, 1, "", "radius_neighbors_graph"], [859, 2, 1, "", "set_output"], [859, 2, 1, "", "set_params"], [859, 2, 1, "", "transform"]], "sklearn.neural_network": [[863, 1, 1, "", "BernoulliRBM"], [864, 1, 1, "", "MLPClassifier"], [865, 1, 1, "", "MLPRegressor"]], "sklearn.neural_network.BernoulliRBM": [[863, 2, 1, "", "fit"], [863, 2, 1, "", "fit_transform"], [863, 2, 1, "", "get_feature_names_out"], [863, 2, 1, "", "get_metadata_routing"], [863, 2, 1, "", "get_params"], [863, 2, 1, "", "gibbs"], [863, 2, 1, "", "partial_fit"], [863, 2, 1, "", "score_samples"], [863, 2, 1, "", "set_output"], [863, 2, 1, "", "set_params"], [863, 2, 1, "", "transform"]], "sklearn.neural_network.MLPClassifier": [[864, 2, 1, "", "fit"], [864, 2, 1, "", "get_metadata_routing"], [864, 2, 1, "", "get_params"], [864, 2, 1, "", "partial_fit"], [864, 2, 1, "", "predict"], [864, 2, 1, "", "predict_log_proba"], [864, 2, 1, "", "predict_proba"], [864, 2, 1, "", "score"], [864, 2, 1, "", "set_params"], [864, 2, 1, "", "set_partial_fit_request"], [864, 2, 1, "", "set_score_request"]], "sklearn.neural_network.MLPRegressor": [[865, 2, 1, "", "fit"], [865, 2, 1, "", "get_metadata_routing"], [865, 2, 1, "", "get_params"], [865, 2, 1, "", "partial_fit"], [865, 2, 1, "", "predict"], [865, 2, 1, "", "score"], [865, 2, 1, "", "set_params"], [865, 2, 1, "", "set_score_request"]], "sklearn.pipeline": [[866, 1, 1, "", "FeatureUnion"], [867, 1, 1, "", "Pipeline"], [868, 4, 1, "", "make_pipeline"], [869, 4, 1, "", "make_union"]], "sklearn.pipeline.FeatureUnion": [[866, 3, 1, "", "feature_names_in_"], [866, 2, 1, "", "fit"], [866, 2, 1, "", "fit_transform"], [866, 2, 1, "", "get_feature_names_out"], [866, 2, 1, "", "get_metadata_routing"], [866, 2, 1, "", "get_params"], [866, 3, 1, "", "n_features_in_"], [866, 2, 1, "", "set_output"], [866, 2, 1, "", "set_params"], [866, 2, 1, "", "transform"]], "sklearn.pipeline.Pipeline": [[867, 3, 1, "", "classes_"], [867, 2, 1, "", "decision_function"], [867, 3, 1, "", "feature_names_in_"], [867, 2, 1, "", "fit"], [867, 2, 1, "", "fit_predict"], [867, 2, 1, "", "fit_transform"], [867, 2, 1, "", "get_feature_names_out"], [867, 2, 1, "", "get_metadata_routing"], [867, 2, 1, "", "get_params"], [867, 2, 1, "", "inverse_transform"], [867, 3, 1, "", "n_features_in_"], [867, 3, 1, "", "named_steps"], [867, 2, 1, "", "predict"], [867, 2, 1, "", "predict_log_proba"], [867, 2, 1, "", "predict_proba"], [867, 2, 1, "", "score"], [867, 2, 1, "", "score_samples"], [867, 2, 1, "", "set_output"], [867, 2, 1, "", "set_params"], [867, 2, 1, "", "set_score_request"], [867, 2, 1, "", "transform"]], "sklearn.preprocessing": [[870, 1, 1, "", "Binarizer"], [871, 1, 1, "", "FunctionTransformer"], [872, 1, 1, "", "KBinsDiscretizer"], [873, 1, 1, "", "KernelCenterer"], [874, 1, 1, "", "LabelBinarizer"], [875, 1, 1, "", "LabelEncoder"], [876, 1, 1, "", "MaxAbsScaler"], [877, 1, 1, "", "MinMaxScaler"], [878, 1, 1, "", "MultiLabelBinarizer"], [879, 1, 1, "", "Normalizer"], [880, 1, 1, "", "OneHotEncoder"], [881, 1, 1, "", "OrdinalEncoder"], [882, 1, 1, "", "PolynomialFeatures"], [883, 1, 1, "", "PowerTransformer"], [884, 1, 1, "", "QuantileTransformer"], [885, 1, 1, "", "RobustScaler"], [886, 1, 1, "", "SplineTransformer"], [887, 1, 1, "", "StandardScaler"], [888, 1, 1, "", "TargetEncoder"], [889, 4, 1, "", "add_dummy_feature"], [890, 4, 1, "", "binarize"], [891, 4, 1, "", "label_binarize"], [892, 4, 1, "", "maxabs_scale"], [893, 4, 1, "", "minmax_scale"], [894, 4, 1, "", "normalize"], [895, 4, 1, "", "power_transform"], [896, 4, 1, "", "quantile_transform"], [897, 4, 1, "", "robust_scale"], [898, 4, 1, "", "scale"]], "sklearn.preprocessing.Binarizer": [[870, 2, 1, "", "fit"], [870, 2, 1, "", "fit_transform"], [870, 2, 1, "", "get_feature_names_out"], [870, 2, 1, "", "get_metadata_routing"], [870, 2, 1, "", "get_params"], [870, 2, 1, "", "set_output"], [870, 2, 1, "", "set_params"], [870, 2, 1, "", "set_transform_request"], [870, 2, 1, "", "transform"]], "sklearn.preprocessing.FunctionTransformer": [[871, 2, 1, "", "fit"], [871, 2, 1, "", "fit_transform"], [871, 2, 1, "", "get_feature_names_out"], [871, 2, 1, "", "get_metadata_routing"], [871, 2, 1, "", "get_params"], [871, 2, 1, "", "inverse_transform"], [871, 2, 1, "", "set_output"], [871, 2, 1, "", "set_params"], [871, 2, 1, "", "transform"]], "sklearn.preprocessing.KBinsDiscretizer": [[872, 2, 1, "", "fit"], [872, 2, 1, "", "fit_transform"], [872, 2, 1, "", "get_feature_names_out"], [872, 2, 1, "", "get_metadata_routing"], [872, 2, 1, "", "get_params"], [872, 2, 1, "", "inverse_transform"], [872, 2, 1, "", "set_fit_request"], [872, 2, 1, "", "set_output"], [872, 2, 1, "", "set_params"], [872, 2, 1, "", "transform"]], "sklearn.preprocessing.KernelCenterer": [[873, 2, 1, "", "fit"], [873, 2, 1, "", "fit_transform"], [873, 2, 1, "", "get_feature_names_out"], [873, 2, 1, "", "get_metadata_routing"], [873, 2, 1, "", "get_params"], [873, 2, 1, "", "set_output"], [873, 2, 1, "", "set_params"], [873, 2, 1, "", "set_transform_request"], [873, 2, 1, "", "transform"]], "sklearn.preprocessing.LabelBinarizer": [[874, 2, 1, "", "fit"], [874, 2, 1, "", "fit_transform"], [874, 2, 1, "", "get_metadata_routing"], [874, 2, 1, "", "get_params"], [874, 2, 1, "", "inverse_transform"], [874, 2, 1, "", "set_inverse_transform_request"], [874, 2, 1, "", "set_output"], [874, 2, 1, "", "set_params"], [874, 2, 1, "", "transform"]], "sklearn.preprocessing.LabelEncoder": [[875, 2, 1, "", "fit"], [875, 2, 1, "", "fit_transform"], [875, 2, 1, "", "get_metadata_routing"], [875, 2, 1, "", "get_params"], [875, 2, 1, "", "inverse_transform"], [875, 2, 1, "", "set_output"], [875, 2, 1, "", "set_params"], [875, 2, 1, "", "transform"]], "sklearn.preprocessing.MaxAbsScaler": [[876, 2, 1, "", "fit"], [876, 2, 1, "", "fit_transform"], [876, 2, 1, "", "get_feature_names_out"], [876, 2, 1, "", "get_metadata_routing"], [876, 2, 1, "", "get_params"], [876, 2, 1, "", "inverse_transform"], [876, 2, 1, "", "partial_fit"], [876, 2, 1, "", "set_output"], [876, 2, 1, "", "set_params"], [876, 2, 1, "", "transform"]], "sklearn.preprocessing.MinMaxScaler": [[877, 2, 1, "", "fit"], [877, 2, 1, "", "fit_transform"], [877, 2, 1, "", "get_feature_names_out"], [877, 2, 1, "", "get_metadata_routing"], [877, 2, 1, "", "get_params"], [877, 2, 1, "", "inverse_transform"], [877, 2, 1, "", "partial_fit"], [877, 2, 1, "", "set_output"], [877, 2, 1, "", "set_params"], [877, 2, 1, "", "transform"]], "sklearn.preprocessing.MultiLabelBinarizer": [[878, 2, 1, "", "fit"], [878, 2, 1, "", "fit_transform"], [878, 2, 1, "", "get_metadata_routing"], [878, 2, 1, "", "get_params"], [878, 2, 1, "", "inverse_transform"], [878, 2, 1, "", "set_output"], [878, 2, 1, "", "set_params"], [878, 2, 1, "", "transform"]], "sklearn.preprocessing.Normalizer": [[879, 2, 1, "", "fit"], [879, 2, 1, "", "fit_transform"], [879, 2, 1, "", "get_feature_names_out"], [879, 2, 1, "", "get_metadata_routing"], [879, 2, 1, "", "get_params"], [879, 2, 1, "", "set_output"], [879, 2, 1, "", "set_params"], [879, 2, 1, "", "set_transform_request"], [879, 2, 1, "", "transform"]], "sklearn.preprocessing.OneHotEncoder": [[880, 2, 1, "", "fit"], [880, 2, 1, "", "fit_transform"], [880, 2, 1, "", "get_feature_names_out"], [880, 2, 1, "", "get_metadata_routing"], [880, 2, 1, "", "get_params"], [880, 3, 1, "", "infrequent_categories_"], [880, 2, 1, "", "inverse_transform"], [880, 2, 1, "", "set_output"], [880, 2, 1, "", "set_params"], [880, 2, 1, "", "transform"]], "sklearn.preprocessing.OrdinalEncoder": [[881, 2, 1, "", "fit"], [881, 2, 1, "", "fit_transform"], [881, 2, 1, "", "get_feature_names_out"], [881, 2, 1, "", "get_metadata_routing"], [881, 2, 1, "", "get_params"], [881, 3, 1, "", "infrequent_categories_"], [881, 2, 1, "", "inverse_transform"], [881, 2, 1, "", "set_output"], [881, 2, 1, "", "set_params"], [881, 2, 1, "", "transform"]], "sklearn.preprocessing.PolynomialFeatures": [[882, 2, 1, "", "fit"], [882, 2, 1, "", "fit_transform"], [882, 2, 1, "", "get_feature_names_out"], [882, 2, 1, "", "get_metadata_routing"], [882, 2, 1, "", "get_params"], [882, 3, 1, "", "powers_"], [882, 2, 1, "", "set_output"], [882, 2, 1, "", "set_params"], [882, 2, 1, "", "transform"]], "sklearn.preprocessing.PowerTransformer": [[883, 2, 1, "", "fit"], [883, 2, 1, "", "fit_transform"], [883, 2, 1, "", "get_feature_names_out"], [883, 2, 1, "", "get_metadata_routing"], [883, 2, 1, "", "get_params"], [883, 2, 1, "", "inverse_transform"], [883, 2, 1, "", "set_output"], [883, 2, 1, "", "set_params"], [883, 2, 1, "", "transform"]], "sklearn.preprocessing.QuantileTransformer": [[884, 2, 1, "", "fit"], [884, 2, 1, "", "fit_transform"], [884, 2, 1, "", "get_feature_names_out"], [884, 2, 1, "", "get_metadata_routing"], [884, 2, 1, "", "get_params"], [884, 2, 1, "", "inverse_transform"], [884, 2, 1, "", "set_output"], [884, 2, 1, "", "set_params"], [884, 2, 1, "", "transform"]], "sklearn.preprocessing.RobustScaler": [[885, 2, 1, "", "fit"], [885, 2, 1, "", "fit_transform"], [885, 2, 1, "", "get_feature_names_out"], [885, 2, 1, "", "get_metadata_routing"], [885, 2, 1, "", "get_params"], [885, 2, 1, "", "inverse_transform"], [885, 2, 1, "", "set_output"], [885, 2, 1, "", "set_params"], [885, 2, 1, "", "transform"]], "sklearn.preprocessing.SplineTransformer": [[886, 2, 1, "", "fit"], [886, 2, 1, "", "fit_transform"], [886, 2, 1, "", "get_feature_names_out"], [886, 2, 1, "", "get_metadata_routing"], [886, 2, 1, "", "get_params"], [886, 2, 1, "", "set_fit_request"], [886, 2, 1, "", "set_output"], [886, 2, 1, "", "set_params"], [886, 2, 1, "", "transform"]], "sklearn.preprocessing.StandardScaler": [[887, 2, 1, "", "fit"], [887, 2, 1, "", "fit_transform"], [887, 2, 1, "", "get_feature_names_out"], [887, 2, 1, "", "get_metadata_routing"], [887, 2, 1, "", "get_params"], [887, 2, 1, "", "inverse_transform"], [887, 2, 1, "", "partial_fit"], [887, 2, 1, "", "set_fit_request"], [887, 2, 1, "", "set_inverse_transform_request"], [887, 2, 1, "", "set_output"], [887, 2, 1, "", "set_params"], [887, 2, 1, "", "set_partial_fit_request"], [887, 2, 1, "", "set_transform_request"], [887, 2, 1, "", "transform"]], "sklearn.preprocessing.TargetEncoder": [[888, 2, 1, "", "fit"], [888, 2, 1, "", "fit_transform"], [888, 2, 1, "", "get_feature_names_out"], [888, 2, 1, "", "get_metadata_routing"], [888, 2, 1, "", "get_params"], [888, 3, 1, "", "infrequent_categories_"], [888, 2, 1, "", "set_output"], [888, 2, 1, "", "set_params"], [888, 2, 1, "", "transform"]], "sklearn.random_projection": [[899, 1, 1, "", "GaussianRandomProjection"], [900, 1, 1, "", "SparseRandomProjection"], [901, 4, 1, "", "johnson_lindenstrauss_min_dim"]], "sklearn.random_projection.GaussianRandomProjection": [[899, 2, 1, "", "fit"], [899, 2, 1, "", "fit_transform"], [899, 2, 1, "", "get_feature_names_out"], [899, 2, 1, "", "get_metadata_routing"], [899, 2, 1, "", "get_params"], [899, 2, 1, "", "inverse_transform"], [899, 2, 1, "", "set_output"], [899, 2, 1, "", "set_params"], [899, 2, 1, "", "transform"]], "sklearn.random_projection.SparseRandomProjection": [[900, 2, 1, "", "fit"], [900, 2, 1, "", "fit_transform"], [900, 2, 1, "", "get_feature_names_out"], [900, 2, 1, "", "get_metadata_routing"], [900, 2, 1, "", "get_params"], [900, 2, 1, "", "inverse_transform"], [900, 2, 1, "", "set_output"], [900, 2, 1, "", "set_params"], [900, 2, 1, "", "transform"]], "sklearn.semi_supervised": [[902, 1, 1, "", "LabelPropagation"], [903, 1, 1, "", "LabelSpreading"], [904, 1, 1, "", "SelfTrainingClassifier"]], "sklearn.semi_supervised.LabelPropagation": [[902, 2, 1, "", "fit"], [902, 2, 1, "", "get_metadata_routing"], [902, 2, 1, "", "get_params"], [902, 2, 1, "", "predict"], [902, 2, 1, "", "predict_proba"], [902, 2, 1, "", "score"], [902, 2, 1, "", "set_params"], [902, 2, 1, "", "set_score_request"]], "sklearn.semi_supervised.LabelSpreading": [[903, 2, 1, "", "fit"], [903, 2, 1, "", "get_metadata_routing"], [903, 2, 1, "", "get_params"], [903, 2, 1, "", "predict"], [903, 2, 1, "", "predict_proba"], [903, 2, 1, "", "score"], [903, 2, 1, "", "set_params"], [903, 2, 1, "", "set_score_request"]], "sklearn.semi_supervised.SelfTrainingClassifier": [[904, 2, 1, "", "decision_function"], [904, 2, 1, "", "fit"], [904, 2, 1, "", "get_metadata_routing"], [904, 2, 1, "", "get_params"], [904, 2, 1, "", "predict"], [904, 2, 1, "", "predict_log_proba"], [904, 2, 1, "", "predict_proba"], [904, 2, 1, "", "score"], [904, 2, 1, "", "set_params"]], "sklearn.svm": [[907, 1, 1, "", "LinearSVC"], [908, 1, 1, "", "LinearSVR"], [909, 1, 1, "", "NuSVC"], [910, 1, 1, "", "NuSVR"], [911, 1, 1, "", "OneClassSVM"], [912, 1, 1, "", "SVC"], [913, 1, 1, "", "SVR"], [914, 4, 1, "", "l1_min_c"]], "sklearn.svm.LinearSVC": [[907, 2, 1, "", "decision_function"], [907, 2, 1, "", "densify"], [907, 2, 1, "", "fit"], [907, 2, 1, "", "get_metadata_routing"], [907, 2, 1, "", "get_params"], [907, 2, 1, "", "predict"], [907, 2, 1, "", "score"], [907, 2, 1, "", "set_fit_request"], [907, 2, 1, "", "set_params"], [907, 2, 1, "", "set_score_request"], [907, 2, 1, "", "sparsify"]], "sklearn.svm.LinearSVR": [[908, 2, 1, "", "fit"], [908, 2, 1, "", "get_metadata_routing"], [908, 2, 1, "", "get_params"], [908, 2, 1, "", "predict"], [908, 2, 1, "", "score"], [908, 2, 1, "", "set_fit_request"], [908, 2, 1, "", "set_params"], [908, 2, 1, "", "set_score_request"]], "sklearn.svm.NuSVC": [[909, 3, 1, "", "coef_"], [909, 2, 1, "", "decision_function"], [909, 2, 1, "", "fit"], [909, 2, 1, "", "get_metadata_routing"], [909, 2, 1, "", "get_params"], [909, 3, 1, "", "n_support_"], [909, 2, 1, "", "predict"], [909, 2, 1, "", "predict_log_proba"], [909, 2, 1, "", "predict_proba"], [909, 3, 1, "", "probA_"], [909, 3, 1, "", "probB_"], [909, 2, 1, "", "score"], [909, 2, 1, "", "set_fit_request"], [909, 2, 1, "", "set_params"], [909, 2, 1, "", "set_score_request"]], "sklearn.svm.NuSVR": [[910, 3, 1, "", "coef_"], [910, 2, 1, "", "fit"], [910, 2, 1, "", "get_metadata_routing"], [910, 2, 1, "", "get_params"], [910, 3, 1, "", "n_support_"], [910, 2, 1, "", "predict"], [910, 2, 1, "", "score"], [910, 2, 1, "", "set_fit_request"], [910, 2, 1, "", "set_params"], [910, 2, 1, "", "set_score_request"]], "sklearn.svm.OneClassSVM": [[911, 3, 1, "", "coef_"], [911, 2, 1, "", "decision_function"], [911, 2, 1, "", "fit"], [911, 2, 1, "", "fit_predict"], [911, 2, 1, "", "get_metadata_routing"], [911, 2, 1, "", "get_params"], [911, 3, 1, "", "n_support_"], [911, 2, 1, "", "predict"], [911, 2, 1, "", "score_samples"], [911, 2, 1, "", "set_fit_request"], [911, 2, 1, "", "set_params"]], "sklearn.svm.SVC": [[912, 3, 1, "", "coef_"], [912, 2, 1, "", "decision_function"], [912, 2, 1, "", "fit"], [912, 2, 1, "", "get_metadata_routing"], [912, 2, 1, "", "get_params"], [912, 3, 1, "", "n_support_"], [912, 2, 1, "", "predict"], [912, 2, 1, "", "predict_log_proba"], [912, 2, 1, "", "predict_proba"], [912, 3, 1, "", "probA_"], [912, 3, 1, "", "probB_"], [912, 2, 1, "", "score"], [912, 2, 1, "", "set_fit_request"], [912, 2, 1, "", "set_params"], [912, 2, 1, "", "set_score_request"]], "sklearn.svm.SVR": [[913, 3, 1, "", "coef_"], [913, 2, 1, "", "fit"], [913, 2, 1, "", "get_metadata_routing"], [913, 2, 1, "", "get_params"], [913, 3, 1, "", "n_support_"], [913, 2, 1, "", "predict"], [913, 2, 1, "", "score"], [913, 2, 1, "", "set_fit_request"], [913, 2, 1, "", "set_params"], [913, 2, 1, "", "set_score_request"]], "sklearn.tree": [[915, 1, 1, "", "DecisionTreeClassifier"], [916, 1, 1, "", "DecisionTreeRegressor"], [917, 1, 1, "", "ExtraTreeClassifier"], [918, 1, 1, "", "ExtraTreeRegressor"], [919, 4, 1, "", "export_graphviz"], [920, 4, 1, "", "export_text"], [921, 4, 1, "", "plot_tree"]], "sklearn.tree.DecisionTreeClassifier": [[915, 2, 1, "", "apply"], [915, 2, 1, "", "cost_complexity_pruning_path"], [915, 2, 1, "", "decision_path"], [915, 3, 1, "", "feature_importances_"], [915, 2, 1, "", "fit"], [915, 2, 1, "", "get_depth"], [915, 2, 1, "", "get_metadata_routing"], [915, 2, 1, "", "get_n_leaves"], [915, 2, 1, "", "get_params"], [915, 2, 1, "", "predict"], [915, 2, 1, "", "predict_log_proba"], [915, 2, 1, "", "predict_proba"], [915, 2, 1, "", "score"], [915, 2, 1, "", "set_fit_request"], [915, 2, 1, "", "set_params"], [915, 2, 1, "", "set_score_request"]], "sklearn.tree.DecisionTreeRegressor": [[916, 2, 1, "", "apply"], [916, 2, 1, "", "cost_complexity_pruning_path"], [916, 2, 1, "", "decision_path"], [916, 3, 1, "", "feature_importances_"], [916, 2, 1, "", "fit"], [916, 2, 1, "", "get_depth"], [916, 2, 1, "", "get_metadata_routing"], [916, 2, 1, "", "get_n_leaves"], [916, 2, 1, "", "get_params"], [916, 2, 1, "", "predict"], [916, 2, 1, "", "score"], [916, 2, 1, "", "set_fit_request"], [916, 2, 1, "", "set_params"], [916, 2, 1, "", "set_score_request"]], "sklearn.tree.ExtraTreeClassifier": [[917, 2, 1, "", "apply"], [917, 2, 1, "", "cost_complexity_pruning_path"], [917, 2, 1, "", "decision_path"], [917, 3, 1, "", "feature_importances_"], [917, 2, 1, "", "fit"], [917, 2, 1, "", "get_depth"], [917, 2, 1, "", "get_metadata_routing"], [917, 2, 1, "", "get_n_leaves"], [917, 2, 1, "", "get_params"], [917, 2, 1, "", "predict"], [917, 2, 1, "", "predict_log_proba"], [917, 2, 1, "", "predict_proba"], [917, 2, 1, "", "score"], [917, 2, 1, "", "set_fit_request"], [917, 2, 1, "", "set_params"], [917, 2, 1, "", "set_score_request"]], "sklearn.tree.ExtraTreeRegressor": [[918, 2, 1, "", "apply"], [918, 2, 1, "", "cost_complexity_pruning_path"], [918, 2, 1, "", "decision_path"], [918, 3, 1, "", "feature_importances_"], [918, 2, 1, "", "fit"], [918, 2, 1, "", "get_depth"], [918, 2, 1, "", "get_metadata_routing"], [918, 2, 1, "", "get_n_leaves"], [918, 2, 1, "", "get_params"], [918, 2, 1, "", "predict"], [918, 2, 1, "", "score"], [918, 2, 1, "", "set_fit_request"], [918, 2, 1, "", "set_params"], [918, 2, 1, "", "set_score_request"]], "sklearn.utils": [[922, 1, 1, "", "Bunch"], [923, 1, 1, "", "ClassifierTags"], [924, 1, 1, "", "InputTags"], [925, 1, 1, "", "RegressorTags"], [926, 1, 1, "", "Tags"], [927, 1, 1, "", "TargetTags"], [928, 1, 1, "", "TransformerTags"], [929, 4, 1, "", "_safe_indexing"], [42, 0, 0, "-", "arrayfuncs"], [931, 4, 1, "", "as_float_array"], [932, 4, 1, "", "assert_all_finite"], [933, 4, 1, "", "check_X_y"], [934, 4, 1, "", "check_array"], [935, 4, 1, "", "check_consistent_length"], [936, 4, 1, "", "check_random_state"], [937, 4, 1, "", "check_scalar"], [42, 0, 0, "-", "class_weight"], [940, 1, 1, "", "deprecated"], [42, 0, 0, "-", "discovery"], [42, 0, 0, "-", "estimator_checks"], [947, 4, 1, "", "estimator_html_repr"], [42, 0, 0, "-", "extmath"], [954, 4, 1, "", "gen_batches"], [955, 4, 1, "", "gen_even_slices"], [956, 4, 1, "", "get_tags"], [42, 0, 0, "-", "graph"], [958, 4, 1, "", "indexable"], [42, 0, 0, "-", "metadata_routing"], [42, 0, 0, "-", "metaestimators"], [42, 0, 0, "-", "multiclass"], [968, 4, 1, "", "murmurhash3_32"], [42, 0, 0, "-", "parallel"], [971, 1, 1, "", "parallel_backend"], [42, 0, 0, "-", "random"], [973, 4, 1, "", "register_parallel_backend"], [974, 4, 1, "", "resample"], [975, 4, 1, "", "safe_mask"], [976, 4, 1, "", "safe_sqr"], [977, 4, 1, "", "shuffle"], [42, 0, 0, "-", "sparsefuncs"], [42, 0, 0, "-", "sparsefuncs_fast"], [42, 0, 0, "-", "validation"]], "sklearn.utils.Bunch": [[922, 2, 1, "", "clear"], [922, 2, 1, "", "copy"], [922, 2, 1, "", "fromkeys"], [922, 2, 1, "", "get"], [922, 2, 1, "", "items"], [922, 2, 1, "", "keys"], [922, 2, 1, "", "pop"], [922, 2, 1, "", "popitem"], [922, 2, 1, "", "setdefault"], [922, 2, 1, "", "update"], [922, 2, 1, "", "values"]], "sklearn.utils.arrayfuncs": [[930, 4, 1, "", "min_pos"]], "sklearn.utils.class_weight": [[938, 4, 1, "", "compute_class_weight"], [939, 4, 1, "", "compute_sample_weight"]], "sklearn.utils.deprecated": [[940, 2, 1, "", "__call__"]], "sklearn.utils.discovery": [[941, 4, 1, "", "all_displays"], [942, 4, 1, "", "all_estimators"], [943, 4, 1, "", "all_functions"]], "sklearn.utils.estimator_checks": [[944, 4, 1, "", "check_estimator"], [945, 4, 1, "", "estimator_checks_generator"], [946, 4, 1, "", "parametrize_with_checks"]], "sklearn.utils.extmath": [[948, 4, 1, "", "density"], [949, 4, 1, "", "fast_logdet"], [950, 4, 1, "", "randomized_range_finder"], [951, 4, 1, "", "randomized_svd"], [952, 4, 1, "", "safe_sparse_dot"], [953, 4, 1, "", "weighted_mode"]], "sklearn.utils.graph": [[957, 4, 1, "", "single_source_shortest_path_length"]], "sklearn.utils.metadata_routing": [[959, 1, 1, "", "MetadataRequest"], [960, 1, 1, "", "MetadataRouter"], [961, 1, 1, "", "MethodMapping"], [962, 4, 1, "", "get_routing_for_object"], [963, 4, 1, "", "process_routing"]], "sklearn.utils.metadata_routing.MetadataRequest": [[959, 2, 1, "", "consumes"]], "sklearn.utils.metadata_routing.MetadataRouter": [[960, 2, 1, "", "add"], [960, 2, 1, "", "add_self_request"], [960, 2, 1, "", "consumes"], [960, 2, 1, "", "route_params"], [960, 2, 1, "", "validate_metadata"]], "sklearn.utils.metadata_routing.MethodMapping": [[961, 2, 1, "", "add"]], "sklearn.utils.metaestimators": [[964, 4, 1, "", "available_if"]], "sklearn.utils.multiclass": [[965, 4, 1, "", "is_multilabel"], [966, 4, 1, "", "type_of_target"], [967, 4, 1, "", "unique_labels"]], "sklearn.utils.parallel": [[969, 1, 1, "", "Parallel"], [970, 4, 1, "", "delayed"]], "sklearn.utils.parallel.Parallel": [[969, 2, 1, "", "__call__"], [969, 2, 1, "", "dispatch_next"], [969, 2, 1, "", "dispatch_one_batch"], [969, 2, 1, "", "format"], [969, 2, 1, "", "print_progress"]], "sklearn.utils.random": [[972, 4, 1, "", "sample_without_replacement"]], "sklearn.utils.sparsefuncs": [[978, 4, 1, "", "incr_mean_variance_axis"], [979, 4, 1, "", "inplace_column_scale"], [980, 4, 1, "", "inplace_csr_column_scale"], [981, 4, 1, "", "inplace_row_scale"], [982, 4, 1, "", "inplace_swap_column"], [983, 4, 1, "", "inplace_swap_row"], [984, 4, 1, "", "mean_variance_axis"]], "sklearn.utils.sparsefuncs_fast": [[985, 4, 1, "", "inplace_csr_row_normalize_l1"], [986, 4, 1, "", "inplace_csr_row_normalize_l2"]], "sklearn.utils.validation": [[987, 4, 1, "", "check_is_fitted"], [988, 4, 1, "", "check_memory"], [989, 4, 1, "", "check_symmetric"], [990, 4, 1, "", "column_or_1d"], [991, 4, 1, "", "has_fit_parameter"], [992, 4, 1, "", "validate_data"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"], "6": ["py", "attribute", "Python attribute"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:function", "5": "py:exception", "6": "py:attribute"}, "terms": {"": [0, 2, 44, 45, 46, 47, 48, 50, 51, 52, 53, 56, 58, 59, 62, 65, 71, 74, 75, 76, 78, 79, 80, 81, 82, 86, 87, 89, 91, 92, 93, 94, 95, 96, 98, 99, 101, 103, 104, 110, 111, 114, 116, 119, 121, 122, 123, 126, 127, 129, 130, 131, 133, 135, 137, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 156, 160, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 185, 186, 188, 190, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 207, 208, 210, 212, 214, 216, 217, 219, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 237, 238, 241, 243, 244, 245, 247, 253, 255, 256, 258, 262, 263, 268, 269, 270, 271, 272, 275, 279, 281, 283, 288, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 306, 307, 308, 311, 314, 317, 319, 320, 321, 322, 323, 324, 325, 326, 329, 330, 336, 337, 338, 339, 340, 343, 344, 345, 348, 350, 351, 352, 355, 356, 357, 358, 362, 363, 364, 368, 369, 370, 372, 373, 374, 375, 376, 377, 379, 381, 382, 383, 384, 389, 390, 392, 393, 398, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 417, 419, 421, 428, 432, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 457, 459, 460, 463, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 489, 491, 497, 499, 501, 505, 511, 512, 520, 526, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 573, 583, 584, 585, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 608, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 688, 690, 691, 692, 693, 694, 695, 696, 703, 704, 705, 711, 714, 719, 723, 725, 738, 744, 761, 762, 782, 783, 800, 801, 802, 803, 805, 806, 807, 812, 817, 821, 822, 825, 828, 829, 830, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 922, 931, 933, 934, 937, 944, 951, 953, 960, 961, 963, 987, 991, 992, 993, 995, 996, 998, 1000, 1001, 1002, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1014, 1016, 1017, 1018, 1019, 1020, 1023, 1025, 1028, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "0": [2, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 182, 184, 185, 186, 187, 188, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 358, 362, 363, 369, 370, 371, 372, 373, 375, 376, 377, 379, 380, 381, 382, 383, 384, 387, 388, 389, 393, 398, 399, 400, 401, 403, 404, 405, 406, 407, 408, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 430, 432, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 579, 580, 583, 584, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 737, 738, 739, 740, 741, 742, 743, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 923, 925, 929, 930, 931, 933, 934, 938, 939, 941, 942, 943, 944, 946, 948, 950, 951, 953, 954, 955, 957, 964, 965, 966, 968, 969, 972, 973, 974, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 989, 993, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1023, 1024, 1025, 1026, 1030, 1031, 1032], "00": [53, 69, 112, 124, 185, 186, 202, 228, 241, 262, 266, 269, 306, 324, 328, 329, 351, 369, 372, 381, 407, 414, 415, 607, 608, 716, 718, 791, 803, 817, 831, 916, 1000, 1004, 1014, 1016, 1018, 1025], "000": [44, 45, 60, 63, 65, 78, 107, 170, 187, 190, 203, 241, 262, 266, 268, 270, 313, 320, 350, 351, 358, 370, 381, 414, 415, 490, 562, 563, 647, 680, 1018, 1025, 1045], "0000": [44, 322], "000000": [80, 185, 200, 228, 268, 312, 740], "00000000": 172, "000000e": 228, "000024": 362, "000045": 185, "00005": 55, "0000ff": [68, 296, 303], "0001": [50, 165, 218, 266, 377, 419, 443, 447, 459, 471, 472, 478, 534, 539, 541, 548, 550, 551, 560, 561, 649, 650, 651, 652, 655, 656, 661, 662, 663, 664, 665, 666, 671, 672, 675, 677, 679, 681, 683, 690, 692, 696, 864, 865, 907, 908, 993], "000198": 185, "000234": 47, "000290": 47, "0003": 138, "000310": 47, "000317": 47, "000353": 47, "000393": 47, "0004": [53, 138, 313, 606], "000431": 47, "000454": 47, "000628": 350, "000669": 47, "000687": 350, "0007": 350, "000722": 350, "000754": 350, "000895": 47, "000977": 268, "00099547": 172, "000e": 415, "001": [47, 54, 69, 80, 96, 145, 165, 169, 185, 196, 219, 237, 247, 253, 266, 268, 270, 331, 351, 372, 381, 411, 537, 538, 540, 547, 630, 647, 648, 649, 650, 655, 656, 663, 664, 665, 666, 669, 670, 671, 679, 680, 681, 682, 684, 687, 692, 693, 696, 697, 800, 801, 864, 865, 902, 903, 909, 910, 911, 912, 913, 993], "00106": 350, "0012": [44, 697], "0013": 44, "0014": 44, "0015": 44, "001540": 53, "00166409": 664, "00167": 350, "00171412": [761, 762, 1002], "001727": 262, "001882": [198, 200], "002": [44, 52, 165, 169, 372], "00204": 350, "002592": [198, 200], "00274": 210, "0028": 44, "002861": [198, 200], "003": [44, 351], "0032": 44, "0034189458230957995": 46, "003533": 200, "003586": 537, "00360392": 537, "0036211": 537, "00362644": 537, "00364": 321, "00393284e": 194, "003935": [198, 200], "003e": 415, "004": [44, 351], "0044": 914, "004577621581492997": 315, "00462428": 754, "0049896314219659565": 315, "005": [44, 268, 272, 293, 308, 381], "005027": 271, "005383": [198, 200], "005422": 268, "005670": [198, 200], "005840": 271, "005861": 271, "006": [44, 276, 381], "006360": 271, "007": [46, 253, 276, 288, 351], "007247": 266, "0072b2": 253, "0075": [473, 542], "00755": 542, "007581": 273, "00768662e": 194, "007822": 282, "007833": 273, "008": [165, 372, 381], "008142": [198, 200], "0083899664": 767, "008449": [198, 200], "00860051": 661, "008915": 271, "009": [44, 142, 351, 381], "009077": 185, "00911944e": 194, "0092": 138, "009362": [198, 200], "009747": 282, "009778": 271, "009788": 282, "0098": 138, "00ff00": 296, "01": [46, 48, 50, 53, 54, 76, 80, 85, 96, 121, 123, 124, 138, 146, 148, 150, 152, 153, 165, 174, 178, 185, 186, 194, 196, 202, 217, 222, 223, 228, 230, 231, 237, 241, 242, 243, 247, 248, 255, 259, 261, 262, 267, 268, 269, 273, 275, 276, 277, 293, 304, 306, 308, 318, 324, 341, 351, 356, 370, 372, 380, 407, 416, 449, 471, 516, 522, 533, 540, 544, 546, 597, 598, 600, 607, 645, 649, 657, 661, 681, 699, 718, 803, 817, 901, 972, 1000, 1004, 1008, 1014, 1016, 1018, 1025], "010": [351, 381, 832, 1012], "0106": 652, "010877306503748912": 276, "011": [44, 276, 288, 351, 381], "011595": [198, 200], "0116": 606, "011e": 415, "012": [53, 92, 188, 190, 351], "012191": [198, 200], "012521": 200, "012831": 200, "0129126": 369, "013": [44, 53, 158, 276, 351, 1025], "01327": 370, "013520": 185, "014": [44, 162, 276, 351, 381, 1025], "0144": 618, "015": [139, 354, 1012, 1025], "0152": 138, "015347e": 228, "015414e": 228, "015579": 282, "015587e": 228, "015596": [198, 200], "0157": 545, "015716e": 228, "01621459": 407, "016445": 268, "017": [320, 351, 381, 471, 472, 1025], "017379": 53, "017646": [198, 200], "018": [53, 167, 268, 472, 1025], "0182": 900, "018727": 185, "0188ff": 312, "018900": 200, "019": [165, 196, 372, 381, 471], "019023": 268, "019069": 200, "01915283": 131, "019163": [198, 200], "0193": [470, 476], "0195": [420, 475], "0196": 138, "0198e1": 119, "019907": [198, 200], "01e": 197, "02": [44, 52, 53, 67, 80, 84, 92, 96, 98, 114, 116, 121, 124, 137, 143, 165, 171, 176, 184, 185, 194, 228, 237, 245, 247, 262, 263, 269, 275, 293, 303, 306, 308, 310, 333, 335, 351, 355, 369, 372, 380, 406, 411, 441, 445, 599, 607, 661, 679, 803, 817, 886, 902, 916, 1000, 1025], "020": [44, 53, 1012], "02069427": 87, "021849": 322, "021872": [198, 200], "022": 1012, "022593": 185, "0226": 652, "022688": [198, 200], "023": [53, 276, 351, 908, 1012], "02306214": 670, "02449161": 131, "02456369": 196, "024991": [198, 200], "025": [68, 212, 247, 265, 351, 693, 697], "025102": 185, "025422": 268, "0255": 138, "0256": 172, "025930": [198, 200], "026": [117, 357], "026328": [198, 200], "026711": 88, "027": [53, 165, 372], "027400": 362, "028": [266, 351], "02818216": 116, "02891072": 1005, "029": [351, 1012], "02d": 200, "03": [52, 86, 112, 121, 150, 165, 174, 185, 194, 228, 241, 253, 259, 262, 269, 329, 372, 415, 751, 803, 1000, 1004, 1025], "030": [150, 351], "030462": 104, "030498": 104, "030585": 282, "030677e": 228, "030867": 185, "031": [165, 169, 372], "031020": 104, "031026": 185, "031255": 185, "031555": 200, "03162278": 52, "031988": [198, 200], "032": [167, 268, 1025], "0321": 838, "032179": 200, "03228": 625, "03228706": 613, "032356": [198, 200], "03237920e": 194, "032405": 185, "03260883": 1005, "0327": 350, "033": [143, 167, 239, 1012, 1025], "033764e": 228, "033823": 185, "034": [150, 471], "034077": 200, "034194": [198, 200], "0342": 350, "034278": 271, "034309": [198, 200], "03433306457": 46, "034821": [198, 200], "03498585": 1005, "035": 92, "035005": 185, "035013": 47, "03531816": [829, 830], "035445": 282, "0358": 47, "035914": 282, "036": [197, 381, 472], "036038": [198, 200], "036385": [198, 200], "036445": 268, "036592": 282, "036656": [198, 200], "0367": 174, "0368": 622, "037": [92, 712], "0370": 853, "037600e": 228, "038": [471, 472, 864], "038076": [198, 200], "03812219": 1005, "038159": 815, "03823144": 172, "038392": 47, "038689": 258, "0387": 606, "039": [266, 754, 784, 1004], "039493": [198, 200], "039497": 251, "03f": 266, "04": [48, 67, 76, 78, 88, 101, 116, 123, 130, 165, 174, 185, 194, 209, 228, 245, 253, 259, 262, 268, 269, 301, 325, 345, 372, 414, 416, 471, 472, 649, 650, 655, 663, 664, 665, 684, 791, 803, 817, 1000, 1004, 1008, 1018, 1025], "040": [241, 1025], "040530e": 228, "041": 53, "0412": 350, "041297": 304, "0416": 406, "042": 381, "0427": [228, 469, 474], "042898": 304, "043": [218, 351, 381, 1025], "043401": [198, 200], "044": [44, 266, 754, 1004], "044223": [198, 200], "044451": [198, 200], "044642": [198, 200], "0448": 228, "045": 726, "0453": 545, "045311": 304, "045390e": 228, "045599": [198, 200], "045934": 304, "046": [46, 351], "046010e": 228, "046636": 185, "046641": [198, 200], "047": 381, "047276": 47, "0479": 545, "048": 1012, "049": 471, "049530": 304, "049540": 304, "0499": 545, "04995982": 116, "05": [47, 48, 53, 55, 62, 64, 73, 80, 86, 94, 96, 98, 99, 101, 108, 116, 126, 138, 141, 147, 150, 153, 161, 165, 177, 178, 185, 193, 194, 209, 212, 224, 234, 235, 237, 247, 253, 255, 256, 259, 262, 268, 269, 277, 279, 293, 296, 301, 308, 310, 317, 321, 329, 331, 344, 358, 372, 416, 450, 456, 478, 526, 531, 532, 547, 594, 597, 598, 600, 616, 617, 618, 622, 623, 625, 626, 628, 635, 636, 652, 693, 697, 759, 803, 856, 907, 908, 1000, 1008, 1014, 1025], "050": [53, 87, 1012, 1025], "05063247886572012": 276, "050680": [198, 200], "051": [127, 472, 1025], "0512": 545, "051474": [198, 200], "0517578125e": 47, "052": 538, "05216586": 116, "052506": 322, "053": [44, 165, 372, 381], "05306648": 129, "05317": 174, "054045": 271, "054699": 185, "0547": 911, "055": [165, 244, 351, 372, 1004, 1025], "05518": 626, "05532": 623, "05534985": 305, "0556": 911, "056": [53, 758, 1012], "0561": 911, "0566": 626, "05663": 623, "0568": 750, "057": [226, 381, 832, 1025], "057122": 200, "05752333": 131, "057711": 200, "058": [165, 266, 372], "05840206": 131, "0595": [350, 473], "05994843": 52, "06": [53, 101, 185, 202, 209, 210, 262, 268, 269, 306, 310, 345, 351, 381, 406, 482, 483, 484, 647, 648, 692, 696, 800, 801, 803, 817, 916, 1000, 1014, 1016, 1025], "060": [44, 53, 754], "0602": 47, "060685": 47, "061": [232, 266], "0614": 626, "06165": 623, "061696": [198, 200], "062": [93, 1025], "0622": [470, 476], "0626": 838, "063": [232, 266, 268, 437], "0631": 53, "063184": 266, "064": [55, 94, 247, 381, 1012, 1025], "065": [266, 381], "06506307": 305, "0652": 625, "06525643": 613, "066": [266, 651], "06686804": 225, "06694199": 131, "06695631e": 112, "067": [178, 287, 1025], "067109": 200, "067528": 200, "068": [44, 53, 170, 268, 1025], "068332": [198, 200], "06880943": 116, "06896552": 449, "069": 266, "0693": 622, "07": [53, 116, 130, 185, 207, 228, 247, 262, 277, 370, 407, 562, 563, 695, 697, 1004, 1018, 1025], "070": [206, 1025], "0707": 626, "07073": 623, "071": [165, 325, 340, 344, 372, 437, 1025], "071964": 185, "072": [186, 437, 651], "073": [266, 471, 472], "074": [266, 351], "074412": [198, 200], "075": [124, 223, 1025], "07582983e": 194, "075887": 200, "076": [44, 55, 895], "0763": 350, "077": [55, 288], "077846": 268, "0779": 47, "078": 44, "07846529": 305, "079": [165, 372], "079297": 268, "07963978e": 194, "07993421": 225, "08": [44, 80, 84, 124, 178, 185, 186, 196, 306, 372, 478, 532, 544, 546, 564, 644, 661, 803, 864, 865, 886, 1010, 1025], "08022103": [829, 830], "080295": 200, "081": [55, 357, 1012, 1025], "0813": [469, 474], "082": 44, "0825": 313, "083": [266, 357], "08377444": 754, "084": 62, "085": [295, 1025], "085299": [198, 200], "08533159": 213, "085711": 88, "08604995": 116, "086944": 251, "08699432": 214, "087": 46, "0872422": 663, "088": [672, 1012], "089": 351, "089063": [198, 200], "08d": 56, "08t16": 369, "09": [123, 130, 185, 241, 245, 306, 407, 530, 609, 738, 845, 1004, 1014, 1018, 1025], "09000": 210, "090528": 185, "090808": 185, "091053": 185, "091621": 88, "092": [222, 1025], "092204": [198, 200], "093": 471, "094": 472, "09443967": 305, "095": [198, 1025], "09541846": 537, "096": [77, 220, 335, 1025], "09684337": 225, "096950": 304, "097": [44, 165, 372], "098332": 63, "0986": [415, 871], "09861229": [615, 1014], "098758": 63, "098776": 268, "098932": 63, "099": [44, 89, 213, 1025], "099820": 63, "0d": 1035, "0e": [279, 550, 551], "0e4": 217, "0f": [58, 92], "0min": 88, "0rc1": 379, "0rcn": 379, "0x": 936, "0x7656aa17e940": 210, "0x7656b5709610": 280, "0x7656b68b7430": 328, "0x7656b6b4a970": 104, "0x7656b6b4aca0": 104, "0x7656b70323a0": 155, "0x7656b7032400": 155, "0x7656b7241400": 248, "0x7656b789e5e0": 280, "0x7656b792f640": 280, "0x7656b79ddd30": 140, "0x7656b79ddee0": 140, "0x7656b7f06c10": 258, "0x7656b7f1f1f0": 266, "0x7656c057e040": 275, "0x7656c1bdf340": 280, "0x7656c9bad700": 104, "0x7656c9c539d0": 105, "1": [0, 1, 2, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 184, 185, 187, 188, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 358, 362, 363, 364, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 388, 389, 390, 393, 398, 399, 400, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 505, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 579, 583, 584, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 925, 926, 929, 930, 931, 932, 933, 934, 935, 937, 938, 939, 944, 945, 946, 948, 949, 950, 951, 952, 953, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 989, 990, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1023, 1024, 1025, 1027, 1028, 1032, 1036], "10": [2, 44, 45, 46, 47, 48, 50, 52, 53, 55, 56, 59, 63, 64, 65, 67, 68, 69, 73, 75, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 104, 105, 107, 110, 111, 112, 113, 114, 116, 117, 119, 123, 124, 125, 126, 130, 131, 135, 137, 138, 140, 141, 142, 143, 144, 145, 147, 148, 150, 152, 153, 156, 158, 162, 165, 170, 171, 173, 175, 176, 178, 180, 181, 184, 185, 186, 187, 188, 190, 192, 196, 201, 202, 204, 205, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 221, 222, 223, 226, 227, 228, 231, 232, 237, 240, 241, 242, 243, 244, 246, 247, 248, 250, 256, 257, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 276, 279, 281, 282, 283, 285, 287, 293, 303, 304, 305, 306, 308, 309, 311, 312, 313, 317, 318, 319, 320, 321, 323, 324, 325, 328, 329, 330, 332, 337, 338, 339, 341, 342, 344, 345, 346, 348, 350, 351, 358, 362, 369, 370, 371, 372, 373, 375, 377, 380, 381, 387, 388, 389, 393, 398, 399, 400, 404, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 420, 438, 443, 447, 449, 451, 452, 453, 459, 460, 462, 475, 488, 493, 494, 497, 501, 502, 503, 505, 511, 512, 513, 514, 517, 521, 522, 525, 527, 529, 532, 536, 537, 538, 539, 540, 542, 543, 545, 546, 547, 549, 553, 556, 557, 558, 559, 562, 563, 565, 566, 567, 568, 569, 571, 584, 585, 589, 595, 596, 601, 602, 607, 609, 614, 620, 622, 630, 633, 635, 637, 638, 639, 640, 643, 645, 646, 647, 649, 650, 652, 655, 662, 663, 664, 665, 667, 668, 669, 670, 672, 673, 675, 676, 678, 679, 680, 681, 684, 688, 689, 694, 695, 698, 699, 702, 708, 718, 729, 745, 759, 772, 800, 801, 803, 804, 805, 806, 807, 814, 817, 818, 819, 820, 821, 823, 824, 826, 831, 833, 834, 835, 836, 842, 843, 844, 846, 847, 848, 854, 863, 864, 865, 867, 873, 877, 880, 881, 884, 896, 904, 910, 913, 915, 916, 920, 925, 937, 948, 951, 955, 967, 972, 973, 979, 980, 989, 993, 994, 999, 1000, 1001, 1002, 1004, 1005, 1007, 1008, 1010, 1011, 1014, 1018, 1019, 1025, 1031, 1032, 1035, 1036, 1037, 1042, 1044, 1045, 1046, 1048, 1049], "100": [44, 45, 47, 50, 52, 53, 56, 58, 63, 65, 73, 78, 84, 87, 91, 95, 100, 104, 105, 108, 111, 112, 121, 123, 124, 130, 136, 141, 150, 151, 154, 157, 170, 174, 177, 178, 185, 186, 188, 190, 192, 193, 195, 196, 197, 201, 202, 205, 209, 210, 211, 212, 214, 219, 220, 221, 223, 225, 226, 228, 232, 233, 235, 240, 241, 242, 243, 244, 248, 253, 255, 259, 262, 263, 264, 266, 268, 271, 273, 278, 279, 283, 293, 294, 295, 306, 309, 310, 312, 314, 315, 320, 324, 325, 332, 333, 337, 338, 340, 341, 342, 345, 346, 348, 350, 351, 354, 356, 357, 362, 364, 370, 372, 375, 377, 380, 381, 398, 404, 407, 408, 411, 412, 413, 414, 415, 437, 441, 445, 449, 471, 472, 478, 490, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 523, 524, 525, 526, 527, 529, 531, 535, 537, 545, 546, 547, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 607, 609, 613, 634, 635, 636, 642, 643, 644, 645, 649, 650, 651, 652, 655, 656, 661, 662, 663, 664, 665, 666, 668, 670, 672, 674, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 698, 699, 749, 800, 801, 805, 825, 831, 832, 837, 842, 843, 844, 846, 847, 848, 852, 864, 865, 883, 885, 888, 897, 914, 993, 994, 997, 1001, 1004, 1005, 1011, 1014, 1016, 1042, 1043, 1044, 1047, 1048], "1000": [44, 47, 48, 55, 64, 68, 73, 84, 105, 108, 116, 130, 138, 140, 142, 145, 146, 147, 152, 157, 160, 167, 175, 190, 197, 213, 232, 240, 241, 243, 253, 257, 262, 266, 268, 274, 277, 279, 293, 295, 309, 312, 318, 319, 321, 323, 324, 326, 340, 341, 347, 350, 351, 380, 381, 388, 405, 415, 437, 473, 479, 480, 532, 533, 538, 540, 542, 543, 544, 546, 547, 549, 554, 564, 565, 635, 649, 650, 654, 655, 656, 658, 663, 664, 665, 666, 669, 670, 671, 675, 679, 680, 681, 690, 695, 701, 704, 767, 884, 896, 902, 907, 908, 993, 997, 1019, 1041, 1043, 1052], "10000": [44, 51, 53, 67, 79, 97, 105, 106, 148, 197, 204, 210, 218, 226, 241, 243, 319, 336, 338, 358, 364, 414, 415, 562, 563, 647, 682, 884, 913, 1016], "100000": [173, 243, 253, 375, 616, 617, 618, 622, 623, 625, 626, 628, 896, 997], "1000000": [56, 537], "10005": 1042, "1000x": 1040, "1001": [221, 251], "10027": 1047, "10045": 1042, "1005": 1019, "10058": 1043, "10059": 1042, "10065": 247, "1007": 708, "10070308464041304": 210, "10071": 1042, "10093": 1042, "10095": 1042, "10096": 1047, "100_000": [63, 65, 185], "100k": [241, 395], "100ksampl": 395, "100x": [1034, 1037, 1051], "101": [65, 165, 285, 372, 853, 1035], "10101": 1042, "10112": 1042, "1013": 1012, "10142": 1042, "10153": 1042, "10168": 1049, "10181": 1042, "10192": 1042, "10195": 1042, "101alexmartin": [1051, 1052], "102": [326, 381, 1004, 1025, 1036], "10210": 1042, "10229": 1042, "1024": [87, 130, 449, 468, 539, 905, 1047], "10280": 1042, "10297": 1042, "103": [150, 287, 288, 370, 414, 498, 556, 557, 1034], "10306": 1042, "10325": 1042, "10336": 1042, "10346": 1042, "10377": 1042, "1038": 407, "10397": 1042, "104": [44, 62], "10403": 228, "10412": 1042, "10428": 1042, "10437": 1042, "10440": 1043, "10441": 1042, "1045": 104, "10452": 1042, "10458": 1042, "1046": [104, 258], "10468": 1049, "10469096": 172, "1047": 104, "10471": 1042, "10474": 1042, "10478008": 407, "10482": 1044, "1048576": [415, 584, 591], "10493": 1046, "105": [142, 195, 312, 1025], "10500": 1042, "10521": 1042, "10526": 407, "10536": 1042, "10580": 1043, "10581": 1042, "10584743": 172, "10587": 1042, "10591": 1046, "10593": 1042, "106": [165, 249, 251, 351, 372, 883, 998, 1004, 1025, 1035], "10606655": 225, "10610": 1042, "10655": 1042, "10663": 1042, "10677": 1042, "10687": 1042, "107": [91, 150, 322, 407, 902, 1005, 1025, 1036], "10708": 1046, "10711": 1046, "10723": [1041, 1042], "10727": 1043, "1073": [370, 488], "10740": 1042, "1076": 332, "10774": 1042, "10795": 1042, "108": [0, 48, 225, 1035], "1080": [369, 407], "10805": 1048, "10811": 1042, "10815": 1044, "10827": 1042, "10829": 1042, "10834": 228, "10836": 1042, "1084": 258, "10845": 1042, "10869": 1042, "1088": 251, "10881": 1042, "108843": 271, "10887": 1042, "108880": 63, "10898": 1042, "10899": 1042, "109": [62, 87, 1005, 1036], "10908": 1042, "10913": 1042, "10914094": 225, "10928": 1042, "10933": 1042, "10982": 1042, "10992": 1042, "10998": 1042, "10999": 1042, "10_000": [47, 63, 108, 140, 147, 184, 190, 241, 271, 281, 288, 325, 560, 561, 565, 566, 884], "10_fold": [370, 494], "10e": [192, 196], "10k": [318, 395, 447], "10ksampl": 395, "10x": 1034, "10x10": 215, "10\u2079": 1042, "11": [44, 58, 107, 113, 123, 165, 172, 185, 186, 196, 210, 211, 212, 215, 241, 247, 262, 265, 273, 274, 280, 291, 292, 294, 312, 319, 322, 323, 338, 342, 346, 350, 369, 372, 373, 381, 388, 407, 410, 411, 414, 450, 457, 482, 483, 484, 485, 497, 502, 518, 519, 615, 653, 659, 673, 718, 724, 726, 727, 781, 782, 783, 804, 807, 821, 824, 832, 859, 916, 952, 967, 996, 1000, 1002, 1014, 1018, 1019, 1025, 1032, 1036, 1040, 1042, 1043, 1045, 1048, 1049], "110": [127, 192, 204, 217, 240, 314, 324, 437, 998, 999, 1025], "1100": 84, "11000": 1043, "11005": 1042, "11006": 1042, "11010": 1042, "11011": 1042, "11021": 150, "11042": 1042, "11047": 1044, "11064": 1046, "11082": 1042, "110923": 200, "11099": 767, "111": [44, 47, 48, 101, 127, 225, 234, 268, 288, 859, 1037], "1111": [653, 659], "1111111111111111": 276, "11124": 1042, "1112658": [901, 1016], "11135": 1042, "11136": 1042, "1114": 258, "11144": [1042, 1043], "11144673": 225, "11160": 1042, "11166": 1042, "1117": 622, "11176": 1042, "11179": 1043, "1118": 104, "112": [88, 165, 370, 372, 1036], "11206": 1042, "11211": 1042, "112141": 381, "11232": 1044, "11235": 1042, "112589990684262": 749, "11272": 1042, "11293": 1042, "11295": 1042, "11296": 1045, "113": [285, 381, 1037], "11306": 1042, "11308": 1042, "11310": 1042, "11314": 370, "11315": 1042, "11327": 1042, "113516": 271, "11353": 1042, "11354": 1043, "11364": 1043, "11364637": 52, "113781": 322, "11378556": 305, "114": [322, 713, 1034], "1140": 370, "11413": 44, "11420": 1042, "1145": [190, 407, 679], "11452112": 225, "11458": 1043, "11464": 1042, "11466": 1042, "11467": 1042, "1148": 258, "115": [186, 219, 1012, 1025], "11505": 1042, "11514": 1045, "11520": 1042, "11526": 1043, "11528972": 225, "11542": 1042, "11553": 1042, "11556": 1042, "11557": 1042, "11558": 1042, "11576": 1042, "11585": 1042, "11596": 1042, "116": 1034, "1162": 407, "11635": 1044, "11646": 1043, "11650": 1043, "11679": 1042, "11680": 48, "11682": 1046, "11682692": 225, "11693539": 116, "11699": 1043, "117": [147, 197, 1025, 1035], "11705": 1043, "117154": 185, "11724": 1042, "11727": 1043, "11741": 1042, "11754": 1043, "11756": [1042, 1043], "117608": 63, "11774": 1042, "1179": 258, "118": [76, 346, 592, 1025], "11841": [901, 1016], "1185": 381, "11860": 1049, "1189": 414, "119": [998, 1037], "11901": 1042, "11905": 1042, "11912": 1042, "11915045": 358, "11924": 1042, "11931": 210, "11932": 210, "11933": 210, "11935": 210, "11950": 1045, "11951": 1042, "11958": 174, "11973": 1043, "12": [0, 44, 46, 53, 59, 71, 76, 78, 79, 87, 89, 90, 91, 106, 107, 116, 143, 144, 145, 148, 150, 165, 172, 173, 174, 181, 185, 186, 188, 193, 196, 197, 203, 210, 218, 226, 228, 230, 233, 234, 237, 238, 240, 248, 251, 255, 256, 262, 266, 267, 268, 270, 271, 274, 280, 281, 282, 291, 312, 313, 314, 322, 325, 346, 352, 371, 372, 373, 380, 388, 390, 393, 399, 400, 401, 407, 411, 415, 443, 447, 449, 457, 482, 483, 484, 485, 497, 533, 535, 542, 571, 649, 650, 655, 663, 664, 665, 667, 672, 674, 684, 688, 689, 692, 695, 696, 728, 733, 800, 801, 804, 821, 824, 838, 859, 875, 984, 993, 994, 996, 1000, 1002, 1004, 1005, 1014, 1018, 1019, 1025, 1032, 1035, 1037, 1041, 1042, 1044, 1045, 1050, 1051], "120": [151, 231, 324, 416, 592, 1034], "1200": [84, 146, 308, 414], "12000": 521, "12068": 1044, "12069": 1047, "121": [101, 137, 155, 181, 242, 621, 672, 1014, 1025], "12105": 1042, "12116": 1043, "1212": 499, "12122": 1042, "121351": 200, "12143": 1043, "12145": 1044, "12159": 1042, "12165": 1042, "12165031": 1005, "1217": 210, "12171": 1042, "12174": 1043, "12177": 1043, "12190903": 116, "12196": 210, "12197": 1043, "122": [0, 137, 174, 181, 186, 201, 242, 381, 1005, 1025], "1220": 622, "12211": 1042, "12222": 1043, "12232": 1043, "12234": 1042, "12246": 1042, "12251": 1043, "12258": 1044, "12274212": 1005, "12279": 1043, "12285": 1049, "1229": 518, "123": [139, 157, 358, 414, 517, 518, 519, 556, 557, 840, 1005, 1012], "12300": 1043, "12303": 1044, "12304": 1042, "1231": 48, "12317": [174, 1042], "1232": 414, "12326": 44, "12327": 44, "12328": [44, 1043], "12329": 44, "12330": [44, 1042], "12334": 1043, "12338": 1042, "12339": 1042, "1234": [193, 256, 271, 375], "12344": 1043, "12345": 1042, "12350": 1042, "1236": [48, 314], "12360": 1042, "12365": 1042, "12379": 44, "12380": 44, "12381": 44, "12382": 44, "123828": 271, "12383": 44, "12388": 1042, "12393": 1042, "124": [47, 414, 1036], "124225": 200, "12436": 1043, "12441": 1042, "12451": 1042, "12462": 1042, "12467": 1042, "12471": 1042, "12481": 1042, "125": [44, 87, 112, 124, 320, 535, 993, 1004, 1014], "1250": 48, "12513": 1043, "12514": 1042, "125140": 271, "12517": 1042, "12518": 1042, "12522": 1042, "125247168": 53, "12543": 1043, "1255": 48, "12557": 1044, "12568": 1043, "12569": 1044, "12582": 1043, "12583": 1043, "1259": 58, "12599": 1043, "126": 414, "12612": 1042, "12613": 1043, "12625": 1042, "1263": 381, "12638": 1046, "12650": 1044, "126502": 200, "12669": 1043, "1268187": 225, "12685": 1042, "12699": 1042, "127": [146, 1034], "12701": 1042, "12704": 1042, "127128": 147, "12715": 1043, "12732": 1043, "1276": 48, "12789": 1044, "128": [54, 55, 210, 362, 537], "12807": 1043, "12821": 1043, "12834": 1043, "12852": 1044, "12855": 1043, "12860": [228, 1043], "12861": 1043, "1288": [46, 370], "12881": 1042, "12883823": 411, "12887": 1044, "129": [212, 1034], "12908": 1043, "12914884": 1005, "12916": 1043, "12927": 1044, "12946": 1042, "12949": 1042, "12955": 1043, "12972": 1043, "12983": 1043, "12988": 1043, "1299": [873, 1014], "12th": 1016, "13": [44, 46, 50, 51, 53, 80, 107, 126, 130, 143, 146, 148, 180, 185, 190, 197, 219, 226, 261, 262, 269, 272, 274, 306, 308, 312, 325, 339, 370, 372, 375, 381, 388, 411, 419, 497, 511, 514, 533, 534, 552, 553, 584, 608, 638, 642, 737, 762, 821, 851, 866, 873, 899, 900, 1000, 1004, 1005, 1010, 1011, 1014, 1019, 1025, 1032, 1034, 1036, 1037, 1040, 1041, 1042, 1043, 1046], "130": 381, "1300": 84, "13003": 1046, "13005": 1042, "13007": 1043, "130107": [225, 241, 489], "13013": 1044, "13042": 1049, "13046": 1042, "13077794": 358, "13086": 1043, "131": [44, 54, 90, 304, 381, 1004, 1025, 1035], "13124": [1042, 1043], "13134": 1042, "13142": 1043, "13146": 1044, "13151": 1043, "13157": 1043, "13164": 1043, "13165": 1042, "13174": 1043, "1319": [873, 1014], "131900": 103, "13193": 1043, "132": [44, 48, 54, 90, 119, 324, 414, 1025], "13204": 1046, "13213": 1044, "1322": 625, "13221": 1042, "13222543": 613, "1323": 210, "13231": 1044, "13233": [370, 494, 495], "13240": 1043, "13241": 1043, "13250": 1043, "13251": 1043, "13253": 1043, "13260": 1043, "13266": 1043, "13276": 1042, "13279": 1043, "13283": 1043, "13286": 994, "13290": 1044, "133": [54, 90, 172, 1025], "13312": 1042, "13317": 1043, "13328": 1043, "13333": 1043, "13336": 1043, "13350": 1043, "13363": 1043, "13366": 1043, "13374": 44, "13375": 44, "13376": 44, "13377": 44, "13378": 44, "1338": 263, "13382": 1043, "13389": 1043, "13392": 1044, "13393": 1044, "13397": 1043, "134": [87, 146, 262, 268, 1037], "13422": 1043, "13427": 1043, "13439": 1043, "13447": 1043, "13459": 1043, "13467": 1044, "13485": 1043, "13486": 1043, "13496": 1043, "135": [165, 274, 322, 372, 1025], "13511": 1045, "13524": 1043, "1353": 350, "13531": 1043, "13545": 1043, "13549": 1043, "13554": 1043, "13562": 1043, "13575": 1044, "13601": 1043, "13607": 1043, "13609": 1044, "13618": 1044, "13620": 1043, "13628": 1043, "13636": [1000, 1043], "13641": 1043, "13649": 1051, "13651": 1043, "137": [247, 381, 1035], "13704": 1044, "13707": 1044, "1371": 535, "13726": 1044, "1373": 1001, "1374": 535, "13741": 1043, "13769": 1044, "13772": [1042, 1043], "13773": 1044, "13779": 1043, "1378": 228, "13780": 1043, "1379": 228, "138": [381, 414, 1004], "13806": 1044, "1382": 525, "13822072286080167": 276, "13835": 1043, "1385": 474, "13864": 1043, "13875": 1044, "13877": 1043, "13894": 1043, "13896": 1044, "139": [186, 228, 267, 271, 288, 381, 414, 452, 462, 694, 698, 1005, 1025], "13900": 1046, "13902": 1044, "13903": [1042, 1043], "13910": 1043, "13911": 1044, "13925": 1044, "13933": 1044, "13938": 1044, "13947": 1043, "1396": 1001, "13960": 1044, "1397": 381, "13974": 1043, "13983521": 305, "13987": 1044, "13988486": 225, "13995": 1044, "13th": 65, "14": [44, 51, 53, 74, 83, 89, 94, 96, 97, 100, 107, 113, 126, 160, 185, 186, 196, 200, 202, 228, 232, 237, 242, 262, 267, 273, 274, 283, 287, 288, 306, 311, 312, 319, 322, 345, 348, 363, 370, 372, 373, 388, 393, 399, 400, 407, 411, 497, 499, 511, 554, 555, 638, 646, 695, 817, 821, 873, 997, 1000, 1004, 1014, 1019, 1025, 1032, 1034, 1035, 1037, 1038, 1042, 1047], "140": [87, 324, 414, 511, 517, 518, 519, 556, 557, 1005], "1400": [84, 474], "14012": 1044, "14024": 1043, "14028": 1044, "14035": 1044, "14048": 1045, "14053": 1043, "14067": 1043, "14075": 1045, "14087": 1043, "14092": 1043, "141": [285, 502, 535, 907, 1005], "14108": 1044, "14114": 1044, "14156": 228, "14170": 1044, "14180": 1045, "1419": 44, "14194": 1044, "14197": 1043, "142": [44, 414], "1422": 44, "14228": 363, "14237": [1042, 1043], "14259": 1044, "14264": 1045, "142857": 228, "14286": 1044, "14287": 1044, "14294": 1044, "14296": 1044, "143": [165, 372, 471, 472, 1016, 1034, 1035], "14300": 1045, "14302": 247, "14305": 1044, "14309": 1043, "14336": 1044, "14338": 994, "14356": 1044, "14357": 1044, "14378": 1044, "14381": 1044, "14393": 1043, "144": [85, 268, 381, 1025, 1034], "1440": 44, "14406": 1044, "1441": 625, "14410151": 613, "14417": 1044, "144204": 147, "1443": 1010, "14430": 1044, "14446": 1046, "14458": 1044, "14464": 1044, "14475": 1044, "144943": 63, "14496": [381, 1043], "145": [53, 338, 407, 1025], "14510": 1044, "14516": 1045, "14520": 1044, "14538": 1044, "14544": 1044, "14549": 1044, "1456": 228, "14591": 1044, "14593": 1044, "14595": 1044, "145957": 147, "146": [46, 149, 414, 1025], "1460": [144, 155], "14602": 1044, "14603365": 225, "14623": 1044, "14625": 48, "14629": 1044, "1464": 238, "14646": 1044, "14647": 1044, "14680": 1044, "14682": 1044, "14696": 1045, "147": [171, 240, 1005, 1025], "14702": 1044, "147022": 200, "14704": 1044, "14706": 1044, "1471": 1010, "14710": 1044, "14732": 1044, "14736": 1049, "1474": 381, "14740": 1044, "14764": 1044, "148": [128, 1025, 1037], "14800": 1046, "14810": 314, "14848": 1045, "14849": 1044, "14862": 1049, "14864": 1044, "14865": 1044, "14869": 1044, "14872": 1044, "14884": 1044, "14890": 1044, "14894": 1044, "14898": 1044, "149": [65, 1005, 1025, 1034], "14900": 1044, "14902": 1044, "14907": 1044, "14908": 1044, "14933": 1044, "14936": 1044, "14971": 1044, "14975": 1048, "14982": 1046, "1499": 48, "15": [44, 46, 47, 52, 53, 54, 55, 67, 68, 71, 76, 80, 87, 88, 95, 96, 100, 106, 107, 112, 114, 119, 124, 130, 139, 141, 143, 144, 147, 150, 160, 162, 164, 169, 173, 180, 184, 185, 186, 200, 212, 224, 228, 232, 235, 237, 255, 256, 262, 263, 271, 273, 276, 279, 280, 283, 292, 296, 303, 304, 306, 308, 310, 312, 323, 329, 337, 339, 342, 345, 348, 355, 369, 370, 373, 375, 388, 393, 399, 400, 411, 414, 415, 440, 454, 490, 497, 498, 499, 532, 538, 546, 547, 556, 557, 600, 606, 611, 647, 655, 664, 666, 671, 679, 681, 695, 821, 836, 859, 888, 993, 999, 1000, 1001, 1004, 1007, 1008, 1014, 1019, 1032, 1036, 1046, 1048, 1049], "150": [44, 46, 119, 127, 139, 147, 231, 235, 237, 281, 324, 343, 346, 372, 411, 416, 505, 603, 604, 828, 829, 830, 1004], "1500": [75, 84, 91, 96, 101, 119, 230, 234, 253], "15000": [675, 690, 864, 865], "15005": [1045, 1047], "15007": 1046, "15010": 1044, "15028": 1044, "15038": 1044, "150407": 381, "15044": 1044, "15049": 1044, "150527": 304, "15053": 1044, "15057": 1044, "1506": 383, "15080": 1044, "15082": 1044, "15083": 1044, "15084": 1044, "15086": 1044, "15094": 1044, "15096": 1044, "15099": 1044, "151": [243, 322, 381, 414, 502, 1004, 1016], "15100": 1044, "1511007": 251, "151101": 251, "15119": 1044, "15120": 1044, "15126": 1046, "15138": 1044, "15160": 1044, "15179": 1045, "152": [82, 92, 381], "15257": 1044, "1527": 863, "15274": 1044, "15297572": 537, "153": 666, "15304": 1044, "153244303321897735": 407, "15361": 1046, "15375": 1044, "15380": 1045, "15382": 1044, "15393": 1044, "154": [298, 306, 654, 1005, 1025], "1542": 381, "15427": 1046, "15429": 1044, "15436": 1045, "154453": 304, "15463": 1044, "15488": 1044, "15490": 1044, "15503": 1045, "15524": 1044, "1553374": 407, "1553511": 407, "1554": 863, "15557": 1044, "15558": 1045, "15582": 1045, "156": [165, 185, 372], "15622": 1045, "15625": 1044, "156252": 200, "15636": 1046, "1565": 306, "15652": 1045, "15655": 1045, "15661": 1044, "15669": 1045, "15699552": 1005, "157": 381, "15707": 1045, "15709": 1045, "15730": 1045, "157334": 304, "15751": 1044, "15760": 1044, "15762": 1045, "15763": 1046, "15773": 1045, "15782": 1045, "15785": 1045, "15797": 1044, "158": [78, 207, 414, 672, 1025], "15806": 1045, "15810": 1044, "15834": 1045, "15863": 1044, "15864": 1045, "15868": 1044, "15879": 1044, "15888": 1044, "15898": 1044, "159": [87, 370, 1034], "15918": 1045, "1592": 499, "15926": 1045, "15930": 1044, "15933": 1044, "15936": 1044, "15937": 1044, "159419": 251, "15946": 1045, "15947": 1044, "15948": 1048, "15950": 1045, "15953": 1045, "15959": 1045, "15963": 1045, "1597": 262, "15980": 1045, "15984": 1048, "15996": 1044, "15e": 121, "16": [44, 45, 53, 58, 65, 79, 84, 85, 88, 100, 107, 112, 121, 124, 160, 186, 204, 209, 210, 211, 225, 228, 230, 231, 235, 242, 246, 262, 270, 271, 272, 292, 306, 308, 312, 317, 343, 351, 356, 370, 372, 373, 381, 388, 393, 399, 400, 411, 412, 415, 442, 457, 459, 471, 472, 478, 479, 498, 499, 503, 517, 535, 536, 571, 591, 597, 598, 609, 610, 642, 653, 654, 657, 658, 659, 660, 685, 686, 816, 821, 833, 882, 908, 916, 979, 980, 981, 993, 1000, 1004, 1014, 1019, 1032, 1034, 1035, 1039, 1040, 1042, 1043], "160": [245, 993], "1600": 84, "160030": 200, "16006": 1045, "1600x1600": 88, "16018": 1048, "16021": 1045, "16052385": 131, "16061": 1048, "16066": 1046, "16069": 1045, "16075": 1045, "16076": 1044, "16084": 1045, "16090": 1045, "16103": 1045, "16111": 1045, "16112": 1045, "16117": 1045, "161245": 88, "16132": 1045, "16144": 381, "16147": 372, "16149": 1045, "16159": [381, 1045], "1616": 473, "16182": 1045, "16183": 1045, "162": [92, 372], "16224": 1045, "1623": 58, "1624": 499, "16245": 1045, "16257": 1045, "16261": 1045, "16266": 1045, "16280": 1045, "16289": 1046, "163": [165, 285, 372, 1012], "163224": 200, "16323": 1045, "16326": [44, 1046], "16327": 44, "16328": 44, "16329": 44, "16330": 44, "16331": 1045, "16335": 1046, "16352": 1046, "16362": 1045, "16379": 44, "16380": 44, "16381": 44, "16382": 44, "16383": 44, "16392": 1046, "16397": [1044, 1045], "164": 414, "164009": 271, "16401": 1045, "16403": 1045, "16431": 1045, "16437": 1045, "16442": 1045, "16443186": 1005, "16449": 1047, "16451": 1045, "16466": 1045, "16484": 1045, "16493": 1046, "165": [234, 251, 1005, 1025], "16500": 1044, "16505": 1044, "16508": 1045, "16530": 1046, "16531": 150, "16539": 1045, "16585": 1045, "166": [44, 299, 306, 381, 1004, 1025, 1034], "16605": 1048, "16619": 1046, "16622": 1045, "16625": 1046, "16632": 1045, "16655": 1045, "16663": 1045, "166667315173": 53, "16692": 1045, "16695": 1049, "167": [381, 1034], "16718": 1045, "16726": 1045, "16728": 1045, "16747": 1049, "16748": 1048, "168": 1034, "1680": 372, "16801": 1045, "16837": 1045, "16841": 1045, "16849": 1045, "1689": 351, "169": [92, 306, 331, 1025], "16906": 1046, "1691": 1000, "169106": 268, "1693": 907, "16935": 1046, "16948": 1048, "16950": 1045, "169504": 228, "16979946": 1005, "1698": 652, "16981": 1045, "16985": 1046, "16993": 1045, "17": [48, 50, 53, 58, 75, 86, 107, 112, 150, 170, 185, 209, 241, 262, 271, 303, 312, 370, 373, 380, 393, 399, 400, 407, 411, 444, 461, 487, 498, 499, 501, 524, 532, 537, 541, 548, 550, 551, 556, 560, 561, 570, 571, 599, 631, 652, 660, 661, 662, 669, 672, 675, 677, 690, 695, 732, 733, 743, 764, 769, 786, 787, 790, 792, 821, 845, 856, 871, 876, 877, 885, 887, 893, 909, 912, 915, 916, 917, 918, 952, 993, 994, 1005, 1007, 1014, 1025, 1032, 1034, 1035, 1036, 1037, 1040, 1043, 1048], "170": [80, 91, 92, 96, 341, 381, 1025], "1700": 84, "170087": 304, "17021": 1045, "17032": 1045, "17036": 1047, "17038": 1046, "170388": 1005, "1706": 332, "17061": 1045, "17090": 1046, "17095": 1046, "171": [87, 165, 372, 381, 791, 1004], "17107": 1046, "1714": 1000, "17148": 1046, "17159": 1046, "17169": 1047, "17187": 1046, "17192": 1046, "17193": 1046, "172": [381, 494, 495, 652, 1000], "17204": 1045, "17205": 1045, "17210": [53, 1045], "17225": 1046, "17226834": 87, "1723": 47, "17233": 1046, "17235": 1045, "17236387": 213, "17266": 1048, "17289014": 172, "1729": 186, "173": [381, 586], "17309": 1045, "17317": 1046, "17357": 1045, "17360": [48, 1045], "17367": 1046, "17370318": 225, "17374": 44, "17375": 44, "17376": 44, "17377": 44, "17378": 44, "17379": [44, 53, 1046], "1738": 1004, "17386": 1046, "17388": 1050, "17396": 1046, "174": [146, 250, 306, 330, 381, 586, 1025], "17406": 1046, "17412": 1046, "17414": 1046, "17427": 1046, "17433": 1045, "17443": 1047, "17448": 1046, "1747": 186, "17474": 228, "17478": 1046, "17491": 1046, "17499": 1046, "175": [381, 1014], "17526": 1046, "175298": 271, "17546": 1046, "17569": 1046, "17575": 1053, "17578": 1046, "17598": 1046, "176": [381, 840, 1005, 1012], "17603": 1046, "17604": 1046, "17606": 1046, "17608": 1046, "17609": 1046, "17610": 1046, "17612": 1046, "17614": 1046, "17616": 1046, "17622": 1047, "17633": 1046, "17644": 1046, "17651": 1046, "17661": 1046, "17662": 1046, "17679": 1046, "17694": 1045, "177": 381, "17702": 1046, "1771": 351, "17742": 1045, "17743": 1047, "17746": 1047, "17750": 1047, "17759": 1046, "17769": 1047, "17772": 1047, "17777": 1046, "17785": 1047, "178": [47, 83, 98, 372, 381, 511, 851, 1025], "178000": 310, "17804": 1046, "17812": 1045, "17819": 1048, "17826": 1046, "17833": 1046, "17848": 1045, "1785": 351, "17856": 1046, "17864": 1046, "17876": 1046, "17878": 1046, "179": [372, 381, 414, 1034], "17914": 1045, "17928620": 369, "17932": 1046, "17935": 1046, "17937": 1046, "17959": 1045, "1797": [92, 266, 306, 328, 372, 419, 445, 503, 533, 534, 535, 536, 601, 602, 691, 692, 693, 694, 696, 1007], "17984": 1046, "17985": 1045, "17985197": 225, "17987": 1046, "17992": 1046, "17995": 1045, "17997": 1046, "17_760": 150, "17t14": 369, "18": [44, 47, 48, 58, 76, 80, 83, 87, 94, 96, 107, 128, 147, 167, 178, 185, 221, 230, 235, 237, 242, 247, 262, 268, 306, 312, 314, 329, 350, 351, 352, 375, 381, 411, 412, 415, 447, 459, 493, 501, 502, 503, 505, 506, 511, 536, 537, 539, 541, 542, 558, 559, 560, 561, 564, 565, 566, 567, 570, 572, 573, 574, 575, 577, 579, 580, 591, 596, 601, 602, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 649, 652, 661, 662, 674, 717, 721, 734, 737, 738, 744, 746, 763, 773, 800, 801, 824, 840, 854, 863, 864, 865, 871, 877, 885, 886, 897, 907, 908, 915, 916, 917, 918, 919, 950, 951, 993, 1002, 1004, 1014, 1025, 1032, 1034, 1035, 1038, 1039, 1041, 1042, 1044, 1045], "180": [71, 253, 254, 255, 258, 259, 297, 301, 381, 503], "1800": 84, "18000": [352, 370], "18010": 1047, "18016": 1045, "18020": 1049, "1804243": 369, "18052": 1046, "18094": 1049, "181": [285, 306, 381], "18108182014": 178, "18114": 1046, "18121": 1046, "18124": 1046, "18149": 1046, "18167": 1046, "18170": 1048, "18176": 1046, "18197458": 358, "182": [169, 306, 381, 414], "18222": 1046, "18256": 1046, "18266": 1046, "18269": 1046, "18278": 1046, "18280": 1046, "18293": 1046, "18298": 1049, "183": [225, 329, 381, 1005, 1025, 1034], "18302": 1046, "18310": 1048, "18326": 1046, "18328": 1047, "18334": 1046, "18341": 1046, "18343": 1046, "18368": 1047, "18370": 1046, "18393": 1047, "18394": 1046, "184": [44, 210, 306, 381, 802], "18405": 1046, "18406": 1046, "18410": 1046, "18429": 1046, "18433": 1047, "18444": 1047, "18447": 1046, "18459": 1047, "1847": 47, "18482": 1048, "18488": 1050, "185": [87, 165, 178, 372, 381, 864, 865], "1850": [46, 370], "18508": 1046, "18510": 1046, "18525": 1046, "18527": 1046, "18528": 1046, "18543": 1047, "18545": 1046, "18555": 1052, "185654": 271, "185659": 200, "18595": 1046, "186": [210, 233, 306, 381, 791, 1004, 1025], "18607": 1046, "18612": 1046, "18622": 1046, "18639": 1046, "18649": 1047, "1865": 48, "18682": 1046, "18689": 1051, "18691": 1046, "187": [174, 268, 381, 586, 1005, 1025, 1036], "1871": 1019, "18723": 1050, "18736": 1047, "1874": 1019, "18746": 1046, "1875": 984, "18768": 1046, "188": [165, 174, 372, 381, 586], "1880": 381, "18805": 1049, "18815268": 251, "188153": 251, "18818427": 670, "18832": 1048, "18842": 1047, "18843": 1052, "18846": [370, 488, 489], "1887": 351, "18898": 1047, "189": [210, 238, 257, 381, 904, 1017, 1025], "18925": 1047, "189267": 271, "18959": 1047, "189631": 200, "18964": 1047, "18975": 1048, "189830": 322, "18987": 1046, "19": [44, 48, 53, 174, 185, 214, 258, 262, 312, 313, 329, 350, 372, 373, 389, 393, 399, 400, 407, 415, 418, 444, 493, 517, 518, 519, 537, 541, 542, 548, 550, 551, 558, 559, 560, 561, 565, 566, 567, 584, 591, 609, 651, 661, 662, 669, 670, 671, 674, 675, 677, 679, 681, 690, 710, 784, 788, 802, 803, 817, 830, 835, 836, 838, 839, 853, 854, 873, 884, 905, 909, 912, 915, 916, 917, 918, 993, 1004, 1014, 1032, 1034, 1035, 1036, 1037, 1039, 1042, 1051], "190": [51, 146, 228, 277, 301, 370, 381, 499], "1900": 84, "19002": 1047, "19004": 1047, "19011": 1047, "19024": 1047, "19035": 1047, "1903908407869": 213, "19041": 1047, "19046": 1047, "19047631514961908949361222113": 53, "1905": [165, 372], "19052": 1047, "19055": 1047, "19069": 1047, "19075": 1049, "19085": 1048, "191": [381, 1005], "19112072e": 194, "19126": 1046, "19145": 352, "19158": 1048, "19159": 1047, "19162": 1047, "19172": 1047, "19174891": 305, "19179": 1046, "19182": 1046, "19198": 1047, "192": [146, 381, 1034], "19210": 1047, "19211": 1046, "19234": 1046, "19244": 1047, "19263": 1047, "19271": 1046, "19278": 1047, "192913": 271, "192938": 53, "19296": 1047, "19297": 1047, "193": [278, 381, 414, 718, 789, 1017, 1025], "19308": 1046, "1931": 112, "19310": 1047, "19317": 174, "19336": 1047, "193548": 228, "19356": 1047, "1936": 372, "19365": 1047, "19390": 1047, "19391": 1047, "193949": 271, "194": 306, "1940": 228, "19401": 1047, "19407": 1046, "19411": 1047, "19415": 1047, "19417": 1046, "194239": 381, "19426": 1047, "19428": 1047, "19438": 1048, "19459": 1047, "19472": 1047, "19473": 1047, "1948": 58, "19483": 1047, "19490": 1048, "19491": 1047, "19499": 1047, "195": [494, 495], "1950": [372, 1004], "1951": 228, "195133": 381, "19520": 1047, "19522393": 225, "19527": 1047, "19564": 1047, "19568": 1047, "19571": 1047, "19579": 1046, "1958": [174, 412, 414, 533], "19580": 1046, "196": [904, 1017], "1960": [630, 719], "19616": 1047, "19631": 1047, "1964": [693, 697, 883, 895, 1001], "19641": 1047, "19643": 1047, "19646": 1046, "19659": 1046, "19662693": [847, 848], "19664": 1050, "19669": 1047, "196795181": 53, "19680": 1048, "196861": 200, "19689": 1048, "197": 197, "19703": 1046, "1972": 372, "19721": 1046, "19727": 1046, "1973": [372, 405], "19731": 1053, "19732": 1046, "19733": 1047, "19734": 1047, "1974": [407, 415, 713], "19746": 1053, "19747": 1048, "1975": 1007, "19752": 1047, "19766": 1047, "197666": 271, "1977": 638, "1978": [228, 1000], "19784": 1047, "19788": 1047, "1979": [407, 728, 772], "19790": 1047, "19794": 1048, "19799": 1047, "198": [161, 1025, 1034], "1980": 372, "19803308": 116, "1981": [228, 1000], "19829832": 225, "1983": [407, 734, 887], "19836": 1047, "1984": [112, 113, 409, 474, 915, 916, 1020], "19847": 1046, "1985": [185, 407, 708, 718, 789], "1986": [994, 1020], "19869": 1047, "1987": [407, 609, 610, 795, 796], "198766": 271, "19879": 1047, "1988": 372, "19883": 1047, "19888": 1046, "1989": [277, 638, 791, 864, 865, 1000, 1007], "199": [129, 350, 650, 794, 1019, 1025], "1990": 370, "19906": 1047, "19908": 1047, "1990a": 405, "1991": [517, 518, 519], "19916": 1048, "1992": [165, 370, 372, 411, 414, 568, 569, 648, 1000], "19922": 1046, "19924": 1046, "1993": [165, 372, 474, 667, 688, 689, 1020], "19934": 1047, "19939": 1046, "1993apr6": 103, "1994": [165, 370, 372, 647], "19948": 1047, "1995": [165, 268, 372, 405, 414, 554, 555, 837, 904, 1005], "1996": [65, 150, 407, 414, 418, 444, 517, 518, 519, 556, 557, 1014], "1997": [136, 370, 412, 414, 536, 555, 693, 697, 1000, 1001, 1004], "1998": [150, 268, 370, 372, 412, 414, 556, 557, 837, 842, 873, 1005, 1006, 1008, 1014, 1018], "19982": 1046, "1999": [177, 370, 405, 407, 409, 412, 414, 437, 450, 457, 469, 474, 535, 542, 556, 557, 560, 561, 726, 901, 909, 910, 912, 913, 1010, 1016], "19th": 407, "1_": 1014, "1_000": [45, 65, 71, 105, 126, 150, 169, 174, 176, 186, 203, 241, 265, 326, 346, 406, 538, 540, 704, 802, 825, 826, 834], "1d": [2, 136, 138, 182, 186, 211, 241, 289, 292, 301, 325, 345, 375, 382, 384, 388, 389, 408, 413, 464, 467, 620, 633, 636, 656, 660, 663, 666, 687, 706, 715, 716, 722, 732, 733, 737, 741, 786, 787, 790, 799, 849, 850, 851, 852, 853, 855, 857, 858, 859, 872, 924, 927, 929, 933, 934, 966, 990, 1005, 1025, 1034, 1039, 1040, 1041, 1043, 1047, 1048, 1052, 1053], "1e": [45, 46, 47, 50, 56, 64, 81, 121, 165, 169, 172, 174, 175, 176, 177, 178, 180, 185, 193, 204, 210, 211, 217, 224, 228, 233, 237, 243, 248, 253, 256, 259, 266, 276, 279, 305, 315, 320, 323, 332, 337, 339, 346, 350, 381, 419, 443, 447, 452, 459, 462, 471, 472, 478, 482, 483, 484, 532, 533, 534, 537, 538, 539, 540, 541, 543, 544, 546, 547, 548, 549, 560, 561, 562, 563, 594, 599, 608, 610, 611, 614, 616, 617, 618, 622, 623, 625, 626, 628, 630, 641, 643, 644, 645, 647, 648, 649, 650, 651, 652, 655, 656, 661, 662, 663, 664, 665, 666, 669, 670, 671, 672, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 687, 690, 692, 693, 694, 695, 696, 697, 698, 731, 788, 800, 801, 817, 842, 843, 844, 845, 846, 847, 848, 856, 864, 865, 872, 902, 903, 907, 908, 909, 910, 911, 912, 913, 989, 993, 1004, 1008, 1012, 1014, 1018, 1042, 1047, 1048, 1049], "1e0": [169, 243, 259, 276, 993], "1e1": [169, 175, 210, 243, 339], "1e15": 178, "1e2": [50, 169, 176, 243, 259, 339], "1e3": [46, 47, 50, 169, 175, 180, 243, 279, 323, 993], "1e4": [279, 662, 682, 901, 1016], "1e5": [46, 174, 194, 201, 279, 616, 617, 618, 622, 623, 625, 626, 628, 896, 901, 1016], "1e6": [48, 50, 204, 241, 325, 350, 352, 362, 537, 901, 1004, 1016], "1e7": 381, "1er": 415, "1f": [53, 59, 84, 87, 124, 193, 210, 241, 253, 255, 275, 317, 324, 351, 352], "1gb": 362, "1kastner": 1041, "1m": 969, "1mb": [363, 1039], "1mo": 174, "1nn": 372, "1or": 415, "1px": 306, "1qlettinn8oi": 350, "1st": [0, 44, 94, 127, 177, 211, 313, 885, 886], "1z": 415, "2": [2, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 75, 76, 78, 79, 80, 81, 82, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 161, 162, 163, 164, 165, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 184, 185, 186, 187, 188, 190, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 358, 362, 363, 364, 369, 370, 371, 372, 373, 375, 377, 379, 380, 381, 382, 384, 387, 388, 389, 393, 398, 399, 400, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 428, 429, 430, 431, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 468, 469, 471, 472, 473, 474, 475, 478, 479, 480, 482, 483, 484, 485, 494, 497, 501, 502, 505, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 529, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 579, 583, 584, 586, 587, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 603, 605, 606, 607, 608, 609, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 704, 706, 707, 708, 709, 710, 711, 714, 716, 717, 718, 719, 720, 721, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 760, 761, 762, 766, 767, 770, 771, 772, 774, 776, 777, 778, 779, 781, 784, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 885, 886, 887, 888, 890, 891, 892, 893, 894, 895, 897, 898, 900, 901, 903, 905, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 920, 922, 929, 930, 931, 933, 934, 935, 939, 942, 949, 950, 951, 952, 953, 954, 955, 957, 958, 964, 965, 966, 967, 968, 969, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 989, 990, 993, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1025, 1031, 1032, 1034, 1035, 1036, 1038, 1039, 1053], "20": [2, 44, 47, 48, 53, 55, 58, 63, 64, 65, 70, 71, 75, 76, 79, 81, 82, 84, 88, 89, 95, 101, 110, 114, 119, 121, 128, 130, 137, 141, 143, 144, 147, 151, 155, 156, 158, 160, 161, 162, 165, 175, 184, 186, 187, 195, 200, 201, 207, 209, 210, 211, 214, 219, 222, 223, 224, 225, 227, 233, 234, 241, 247, 255, 257, 258, 262, 268, 269, 271, 272, 274, 279, 280, 283, 285, 288, 292, 293, 294, 295, 296, 299, 306, 312, 313, 314, 318, 319, 320, 321, 323, 328, 329, 332, 336, 338, 342, 344, 348, 351, 352, 356, 368, 372, 373, 375, 380, 381, 393, 399, 400, 407, 414, 415, 441, 446, 447, 449, 464, 465, 469, 471, 472, 478, 488, 489, 490, 491, 493, 495, 497, 498, 501, 503, 505, 506, 512, 513, 516, 517, 524, 532, 537, 538, 543, 546, 547, 549, 553, 556, 557, 560, 561, 562, 563, 564, 570, 571, 584, 591, 592, 594, 596, 599, 601, 632, 633, 648, 652, 661, 669, 670, 671, 679, 681, 699, 707, 711, 716, 719, 728, 729, 742, 759, 760, 770, 795, 796, 800, 801, 802, 803, 817, 829, 830, 831, 834, 836, 839, 840, 841, 844, 845, 852, 853, 864, 865, 866, 867, 869, 871, 872, 880, 881, 882, 883, 888, 902, 903, 905, 906, 911, 914, 919, 925, 931, 933, 934, 937, 981, 993, 1000, 1004, 1007, 1010, 1011, 1014, 1017, 1025, 1027, 1028, 1030, 1032, 1034, 1040, 1043, 1046, 1048, 1049], "200": [70, 71, 80, 84, 88, 94, 108, 124, 137, 147, 154, 173, 197, 206, 211, 214, 215, 216, 222, 227, 231, 249, 253, 262, 269, 275, 277, 278, 308, 311, 330, 338, 339, 356, 358, 370, 387, 412, 414, 419, 440, 454, 468, 471, 472, 523, 534, 535, 536, 539, 540, 541, 544, 548, 586, 652, 654, 674, 682, 695, 749, 817, 864, 865, 905, 909, 910, 911, 912, 913, 925, 1004, 1019, 1025], "2000": [55, 64, 76, 84, 108, 122, 128, 190, 256, 259, 268, 285, 303, 321, 351, 370, 372, 407, 408, 414, 419, 452, 462, 534, 535, 560, 692, 694, 696, 746, 791, 800, 853, 865, 883, 895, 1001, 1004, 1010, 1016, 1053], "20000": [58, 123], "200000": [228, 872], "20002": 1047, "2001": [2, 65, 174, 187, 262, 267, 404, 407, 414, 437, 451, 452, 453, 462, 512, 560, 561, 565, 566, 631, 637, 642, 648, 694, 699, 738, 791, 888, 900, 938, 994, 996, 1000, 1004, 1010, 1012, 1014, 1016, 1019], "2002": [97, 405, 407, 414, 437, 448, 595, 596, 729, 759, 854, 902, 996, 1004], "20023": 1047, "2003": [2, 52, 174, 404, 407, 412, 415, 451, 452, 462, 514, 516, 692, 696, 842, 844, 1000, 1001, 1006, 1016, 1042], "20030": 1047, "20031": 1048, "2004": [45, 165, 268, 285, 370, 372, 407, 409, 412, 473, 536, 609, 610, 692, 696, 708, 746, 786, 903, 998, 1000, 1001, 1006, 1019], "2005": [63, 65, 113, 372, 405, 437, 439, 856, 1000, 1007, 1017], "20056": 1047, "2006": [2, 51, 301, 370, 414, 417, 462, 499, 558, 559, 566, 567, 613, 614, 617, 622, 625, 652, 669, 670, 744, 791, 792, 800, 842, 900, 917, 918, 1000, 1004, 1006, 1009, 1016, 1017], "2007": [0, 74, 198, 370, 407, 416, 440, 452, 454, 460, 462, 567, 659, 694, 720, 737, 740, 761, 762, 798, 996, 1000, 1002, 1004], "20072": 1047, "2008": [52, 409, 411, 412, 478, 535, 564, 592, 648, 667, 688, 689, 695, 719, 729, 759, 837, 842, 846, 863, 998, 1001, 1002, 1004, 1005, 1006, 1009, 1010, 1019], "20087": 1047, "2009": [2, 135, 138, 139, 149, 196, 407, 411, 412, 414, 415, 520, 521, 529, 532, 538, 539, 541, 542, 545, 548, 554, 560, 561, 638, 674, 682, 699, 838, 854, 915, 916, 950, 951, 1000, 1004, 1005, 1011, 1020], "200_000": [872, 1050], "200m": 370, "200x": 1034, "201": [146, 165, 372, 586], "2010": [0, 111, 186, 273, 274, 404, 407, 409, 411, 412, 420, 475, 537, 707, 711, 722, 723, 743, 832, 864, 865, 996, 1000, 1004, 1008, 1018, 1022, 1034], "2011": [0, 186, 381, 412, 415, 536, 539, 541, 542, 548, 592, 630, 641, 661, 733, 994, 1008, 1018, 1022, 1034], "20117": 1047, "2012": [0, 113, 405, 414, 556, 557, 564, 642, 746, 993, 997, 1004, 1022, 1034], "2013": [0, 190, 372, 407, 411, 412, 537, 729, 759, 996, 1004, 1022, 1035, 1036], "2014": [0, 369, 401, 412, 414, 417, 531, 609, 610, 625, 626, 661, 695, 864, 865, 950, 951, 1001, 1004, 1008, 1028, 1037], "20145": 1048, "2015": [0, 186, 369, 711, 724, 726, 727, 864, 865, 1004, 1011, 1028, 1038, 1039], "201520": 200, "20155": 1047, "20159": 1047, "2016": [0, 235, 369, 407, 993, 1039, 1040], "20161": 1047, "20165": 1047, "2017": [0, 268, 369, 405, 407, 418, 444, 1004, 1040, 1041], "2018": [0, 210, 228, 415, 450, 993, 1004, 1028, 1041, 1042], "2019": [0, 186, 373, 407, 452, 462, 695, 1001, 1004, 1011, 1014, 1042, 1043, 1044], "202": [264, 1025], "2020": [0, 370, 1044, 1045, 1046, 1047], "20200": 1047, "20207": 1047, "20209": 1047, "2021": [0, 373, 375, 674, 1004, 1046, 1047], "2022": [0, 363, 407, 414, 708, 1014, 1048, 1049], "2023": [0, 387, 401, 403, 405, 1049, 1050], "20231": 1047, "2024": [1051, 1052, 1053], "20240": 1047, "2025": 1053, "20250": 1047, "20272": 1047, "20297": 1047, "203": [87, 209, 351, 1025], "20312": 1047, "203174": 200, "20326": 1047, "20331": 1049, "2034": [350, 370], "2035": 48, "2038": 48, "20380": 1047, "20385": 1047, "2039": 271, "204": [165, 337, 1012, 1017, 1025], "20408": 1048, "20415": 1049, "20416": 1047, "20431": 1047, "2047": 48, "20477": 1047, "2050": 48, "20512": 1047, "20515": 1047, "20521": 1047, "20524": 1050, "20526": 1047, "20528": 1047, "20531": 1047, "20534": 1047, "20552": 1047, "20554": 1047, "20560": 1047, "20567": 1048, "20583": 1047, "20597": 1047, "206": [116, 1025], "2061": 148, "20617": 1049, "20619": 1047, "20638": 1047, "20640": [141, 181, 370, 490], "20652": 1047, "20653": 1048, "20657": 1047, "20673": 1047, "20683": 1047, "207": [306, 1034], "2071716": [847, 848], "20727": 1047, "20729": 1047, "20752": 1047, "2075215": 225, "20753": 1048, "20761": 1047, "207667": 271, "2079": 273, "208": [165, 288, 372], "20802": 1049, "20803": 1048, "20811": 1048, "20842": 1047, "20843": 1047, "20860": 1048, "20880": 1047, "208864": 200, "20899": 1047, "209": [336, 744, 883, 1025], "20904": 1047, "20959": 1047, "20960": 1047, "20961": 1047, "20_000": 288, "20new": 370, "20newgroup": [67, 182, 191, 203, 226, 306, 489, 661, 833, 836, 1000, 1025], "20news_hom": 370, "20newsgroup": [225, 368, 1034], "20th": 711, "21": [44, 53, 58, 106, 119, 150, 165, 185, 200, 210, 211, 228, 231, 258, 262, 288, 306, 310, 312, 323, 372, 373, 377, 379, 393, 404, 414, 415, 441, 445, 474, 478, 530, 533, 562, 563, 564, 570, 571, 590, 591, 593, 630, 672, 690, 757, 803, 817, 830, 873, 880, 882, 888, 905, 921, 950, 996, 1000, 1004, 1005, 1014, 1025, 1032, 1034, 1035, 1037, 1041, 1042, 1044], "2100": [84, 320], "2102": 545, "21020": 1049, "21026": 1048, "21032": 1048, "21038": 1048, "2107": 273, "21078": 1048, "21079": 1048, "21080": 1047, "21086": 1048, "21093": 1047, "211": [273, 322, 331, 883, 895], "21109": 1048, "21114": 1048, "211217613": 1042, "21130": 1047, "21145": 1047, "21148": 1048, "2117": 332, "21177": 1048, "21179": 1047, "21194": [81, 1047], "21195": 1047, "21199": 1047, "212": [146, 165, 273, 331, 372, 469, 501, 1010], "21219": 1048, "212197e": 228, "21243": 81, "21251": 1047, "2126": 247, "21271": 1047, "21278": 1048, "21295": 1047, "21298": 1048, "21301203": 172, "213056e": 228, "21310": 1048, "21316": 1048, "21330": 1048, "21334": 1048, "21336": 1047, "21340": 1047, "21341": 1048, "21351": 1047, "21389": 1047, "2139": [210, 228], "214": [170, 586], "21408": 1048, "21425": 1048, "21430": 1048, "21432": 1048, "21434": 1048, "21436": 1048, "21443888": 225, "21445": 1048, "21448": 1048, "21469": 1049, "21481": [1047, 1048], "21482": 1048, "21493": 1047, "215": [55, 276, 586, 1025], "21517": 1047, "21534": 1048, "21542": 1048, "21544347": 52, "21552": 1047, "21565": 1048, "2156660": 324, "21567": 1048, "21569": 1048, "21573": 1048, "21576": 1048, "21578": [48, 1047], "2159048": [656, 666, 687], "216": 1017, "21606": 1048, "21616": 744, "21617": 1048, "21632": 1048, "21694": 1047, "217": [536, 542, 802], "21701": 1048, "21705": 1048, "2171": 47, "21713": 1048, "21724": 1048, "2173": [198, 659, 1000], "21735": 1048, "21741": 1047, "21762": 1048, "21767": 1048, "2179": 48, "218": [261, 372, 471, 718, 789, 1025], "2180": 58, "21800": 1048, "21805": 1048, "21807": 1051, "21808": 1048, "21809": 1050, "21814": 1048, "21832": 1048, "21833": 1047, "21837": 1048, "21845": 1047, "21871": 1047, "21873": 1048, "21880": 1048, "21881": 1048, "21888": 1048, "218997": 200, "219": 267, "21901": 1048, "21915": 1047, "21917": 1047, "2192": [198, 659, 1000], "21938": 1049, "21954": 1048, "21987": 1048, "21988": 1048, "21991": 1047, "21998": 1048, "22": [44, 53, 78, 139, 140, 142, 180, 181, 182, 185, 186, 187, 227, 235, 250, 258, 262, 276, 285, 290, 306, 308, 312, 316, 319, 322, 326, 329, 332, 352, 375, 380, 393, 404, 437, 448, 472, 478, 488, 489, 496, 497, 505, 516, 525, 532, 538, 543, 546, 547, 558, 559, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 571, 596, 611, 630, 631, 635, 637, 648, 650, 654, 656, 658, 661, 662, 664, 666, 668, 672, 691, 695, 705, 707, 716, 760, 772, 781, 786, 787, 791, 803, 804, 808, 817, 822, 824, 827, 828, 829, 830, 831, 832, 833, 834, 851, 853, 855, 857, 858, 859, 864, 865, 866, 868, 871, 887, 898, 907, 909, 910, 911, 912, 913, 915, 916, 917, 918, 944, 946, 996, 1004, 1014, 1025, 1032, 1034, 1037, 1042, 1045, 1047], "220": [80, 262, 1034], "2200": [84, 370, 494], "22002": 1048, "22014": 1049, "22015": 1048, "22016": 1048, "22027": 1048, "220446049250313e": [471, 472, 478, 653, 654, 657, 658, 659, 685, 686], "22050": 1047, "22054": 1049, "22058": 1048, "22059": 1048, "22062": 1048, "22063": 1048, "22064": 1048, "22065": 1048, "221": [116, 153, 262, 1037], "22106": 1048, "22108": 1048, "2211": 637, "22111": 1048, "22114": 1048, "22118": 1048, "22119": 1048, "22120": 1048, "22137": 1048, "22148": 1048, "22149": 1048, "22150": 1048, "22154": 1048, "22159": 1048, "22181": 1048, "22188": 1048, "22191": 1048, "22199": 1048, "222": [116, 153, 160, 332, 351, 352, 1019, 1025], "22203": 1048, "22206": 1048, "22212": 1048, "22215": 1048, "22217": 1048, "22218": 1048, "2222": 659, "22223": 1048, "22235": 1048, "22237": 1048, "2224": 1036, "22240": 1048, "22248": 1048, "22249": 1048, "22254": 1048, "22255": 1048, "22268": 1049, "22269": 1049, "22284": 1048, "22288": 1048, "223": [116, 153, 165, 372], "22300": 1048, "22314355": 592, "22318": 1048, "22320": 1048, "2235": 48, "22356": 1048, "22361": 372, "2237": 48, "22370": 1048, "223745": 210, "224": [87, 116, 153, 241, 407, 728, 825], "22409": 1050, "22410": 1048, "22412": 1048, "2243": 48, "22438": 387, "2245": 48, "2246": 228, "22476": 1048, "22486": 1048, "22493": 1048, "22498": 1048, "225": 414, "22504": 407, "22506": 1050, "22508": 1048, "22518": 1049, "2252": 48, "22525": 1048, "22526": 1048, "22527": 1049, "2253": 48, "22537": 1048, "22548": 1048, "22553": 1048, "22554": 1049, "22562": 1049, "22566": 1048, "2257": 48, "22578": 1048, "2258": 48, "225806": 228, "22595": 1048, "226": [300, 407, 418, 444, 1025], "22604": 1048, "22629": 1049, "22635": 1048, "22665": 1049, "22685": 1048, "22687": 1048, "22692": 124, "22694": 1048, "22695": 1048, "22696": 1048, "22697": 1048, "227": [268, 407, 728], "22710": 1049, "22735": 1048, "22747343e": 112, "22775": 1048, "22784907": 830, "228": 243, "22806": 1048, "22808": 1048, "22830": 1048, "2284": 186, "22856": 1048, "2286": 370, "22866": 1048, "22868": 1048, "2287": 370, "2288": 370, "22891": 1048, "22898": 1049, "22899": 1048, "229": 1004, "22908": 1048, "22913": 1048, "22950": 1048, "22953": 1048, "22965": 1049, "22968": 1049, "22982": 1048, "22993": 1049, "22nd": 439, "23": [44, 51, 58, 64, 71, 84, 124, 152, 165, 182, 210, 239, 247, 251, 258, 262, 306, 312, 316, 319, 320, 321, 324, 329, 346, 351, 372, 373, 381, 393, 414, 420, 430, 440, 447, 452, 454, 462, 465, 467, 468, 475, 478, 479, 480, 482, 483, 484, 490, 493, 501, 502, 503, 505, 506, 511, 513, 515, 523, 525, 539, 540, 541, 544, 548, 555, 557, 559, 561, 562, 563, 566, 569, 570, 571, 609, 610, 614, 630, 633, 635, 638, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 670, 672, 673, 675, 676, 678, 681, 682, 683, 684, 720, 733, 781, 833, 839, 840, 841, 850, 858, 865, 868, 880, 887, 895, 896, 905, 908, 910, 913, 916, 918, 931, 933, 934, 946, 951, 1004, 1025, 1032, 1034, 1035, 1041, 1042, 1043, 1046], "230": 586, "2300": [84, 200], "2301": 48, "2302": 48, "23023": 1048, "23033": 1048, "23034": 1048, "23036": 1048, "23038": 1049, "23040": 1048, "23046": 1048, "23047": 1048, "2305": 48, "2306": 48, "23077": 1048, "23079": 1048, "23095": 1048, "23097": 1048, "23098": 1048, "23099": 1050, "231": [51, 301, 370, 407, 418, 444, 499, 586], "23101": 1049, "23113": 1048, "23115": 1048, "23127": 1049, "23139": 1049, "23149": [370, 498, 1048], "23194": 1048, "23197": 1049, "23198": 1048, "232": [262, 1004], "23210": 1049, "23214": 1048, "2323": [692, 696, 1001], "2325": 48, "23252": 1049, "23256": 1048, "23264": 1048, "2327": 48, "23271": 1048, "23273": 1048, "23275": 1049, "23299": 1048, "2331": [44, 48], "23317": 1051, "2332": 44, "2333": [44, 48], "2334": 44, "2335": 44, "23358": 1048, "2336": 381, "23370": 1048, "23395": 1048, "233mb": 46, "234": [87, 125, 842, 846, 864, 865, 1006, 1025], "2341": 525, "23410": 1048, "234137": 200, "2342": 48, "2343": 48, "23442": 1049, "23446": 1049, "2345": 48, "2346": 48, "23461": 1049, "23470": 1049, "23471": 1048, "23480": 1049, "235": 314, "235430": 271, "23548": 1048, "2357juan": [1048, 1049, 1050], "23585": 1049, "23595": 1050, "23604": 1049, "23608": 1048, "23619": 1049, "23636": 1048, "23637": 1049, "23668876": [656, 666, 687], "236720": 200, "23683": 1049, "23689075": [656, 666, 687], "23726": 1049, "23731": 1050, "23734": 1049, "237703": 200, "23773583": 112, "23798": 1049, "23819": [1049, 1050], "23833": 1048, "23834": 1049, "23865": 1049, "23874": 1049, "238744": 200, "23877": 1049, "238955": 271, "239": [55, 1034], "23905": 1049, "23935": 1049, "23957125": 324, "23977": 1049, "23990": 1048, "23993": 1049, "24": [44, 45, 53, 78, 100, 150, 155, 165, 182, 186, 190, 196, 198, 218, 248, 262, 280, 288, 316, 317, 318, 320, 323, 324, 328, 329, 373, 375, 379, 393, 399, 400, 407, 414, 415, 437, 440, 441, 442, 444, 445, 447, 448, 449, 450, 451, 452, 453, 460, 462, 464, 469, 470, 471, 472, 473, 474, 475, 476, 489, 490, 491, 493, 497, 505, 516, 517, 518, 519, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 544, 545, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 570, 571, 583, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 613, 614, 616, 630, 631, 632, 633, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 691, 692, 693, 694, 695, 701, 702, 703, 705, 711, 717, 730, 741, 749, 756, 800, 801, 803, 806, 807, 817, 824, 831, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 868, 870, 871, 872, 873, 876, 877, 879, 881, 882, 883, 884, 885, 887, 897, 899, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 946, 950, 978, 984, 993, 1011, 1014, 1025, 1032, 1034, 1042, 1043, 1044, 1045, 1047], "240": [44, 53, 80, 1012, 1034], "2400": 84, "24000": 521, "24015": 1048, "24017": 1048, "24027": 1050, "24051": 1049, "24058": 1049, "24075": 1049, "24076": 1050, "24083": 1050, "24084": 1049, "24087": 1048, "241": [177, 255, 309, 414, 568, 569, 1025], "2410": 545, "24140": 1050, "24141": 1049, "24145": 1050, "24146": 1049, "24160": 322, "242": [245, 887, 1025, 1034], "24218": 1049, "24230": 1050, "24245": 1049, "24258": 1049, "24264": 1049, "24283": 1049, "243": 586, "2431": 475, "24317": 1049, "24338": 1049, "24350": 1049, "24354": 1049, "24365": 1049, "243802": 304, "244": [262, 285, 586], "24404831511191221642141021252626109": 53, "24405": 1049, "2441": 228, "24412": 1049, "24421": 1049, "24433": 1049, "24446": 1048, "244466": 251, "24465": 1049, "2449": 381, "245": [197, 1016, 1025, 1036], "24512": 1049, "24523": 1049, "24528": 1049, "24538": 1049, "24539": 1049, "24543": 1049, "24556": 1049, "24568": 1050, "245961": 147, "245mb": 352, "246": [196, 1012, 1034], "24617": 1049, "2463": 1000, "24630": 1049, "24631": 1048, "24637": 1049, "24640578": 112, "24645": 1049, "24667": 1049, "24668": 1050, "24677": 1050, "24683": 1049, "24688": 1049, "24699": 1049, "247": 887, "24714": 1049, "24747": 1049, "24750": 1049, "24755": 1049, "24767": 1049, "24769": 1050, "24838": 1051, "24849": 1049, "24855": 1049, "24856": 1049, "24871": 1050, "24873": 1049, "2487575": 190, "2487591": 190, "24882": 1050, "24889": 1049, "24894": 1049, "249": 262, "24935": 1050, "24951": 1049, "25": [44, 45, 46, 47, 49, 50, 51, 53, 58, 62, 64, 78, 88, 89, 112, 116, 124, 128, 130, 139, 147, 161, 162, 170, 180, 185, 193, 201, 214, 232, 235, 237, 255, 262, 268, 301, 303, 306, 308, 310, 314, 322, 328, 329, 350, 356, 358, 362, 381, 411, 414, 415, 418, 444, 477, 481, 502, 505, 522, 571, 599, 621, 681, 737, 799, 820, 833, 859, 877, 882, 884, 885, 888, 896, 897, 899, 900, 948, 952, 984, 1000, 1004, 1005, 1007, 1014, 1025, 1034, 1036, 1042, 1045], "250": [50, 99, 147, 190, 230, 494, 695, 825, 993, 1016, 1041], "2500": 1004, "25000": 78, "2501": [165, 372], "25044": 1050, "250639": 200, "25067": 1049, "25077": 1049, "25080": 1049, "25089": 1049, "25093": 1050, "25094": 1049, "251": [165, 232, 350, 372], "25102": 1050, "25120": 1050, "25129": 1049, "25147": 1049, "25163598": 383, "25172": 1049, "25174": 1049, "25177": 1050, "25183501383331797": 276, "25186": 1050, "25188": 1049, "25190": 1050, "25193977": 1005, "25196": 1050, "252": [165, 232, 297, 372, 535, 883, 895, 1025], "25209": 1050, "25214": 1050, "25220": 1050, "25232": 1050, "25250": 1049, "25251": 1050, "25257": 1050, "25274": 1049, "25275": 1051, "25291": 1050, "25291366": 358, "25294": 1050, "25295": 1049, "25296": 1049, "25297": 1050, "25299": 1050, "253": [146, 535], "25308": 1050, "25312": 1049, "25330": 1053, "25334": 1050, "25341": 1049, "253445": 147, "25349312e": 194, "2535": [469, 474], "25354": 1049, "2536": 476, "25363": 1049, "25367": 1050, "25370": 1049, "25387": 1050, "254": 55, "25402": 1050, "25417": 1050, "25432": 1050, "25438": 1050, "25443": 1050, "25477": 1049, "2548": 207, "25490": 1050, "25499205": 537, "255": [124, 288, 305, 314, 320, 370, 414, 494, 495, 562, 563], "25500": 1049, "25506": 1050, "25511": 1049, "25531": 1050, "25563": 1049, "25570": 1049, "25587": 1050, "25589": 1049, "256": [78, 87, 138, 146, 314, 363, 370, 407, 414, 449, 468, 538, 547, 564, 863, 895, 905, 1025, 1048], "25601": 1050, "25619": 1049, "25629": 1050, "25638": 1049, "25659": 1050, "25664": 1049, "25672": 1050, "25677": 1050, "2568": 1043, "25694": 1049, "25697": 1050, "257": [232, 266], "25704": 1049, "25713": 1050, "25719016": 1005, "25732": 1050, "25733": 1050, "25744": 1049, "25747": 1049, "25752": 1050, "25774": 1049, "25784": 1050, "2579": 695, "258": 232, "25805": 1050, "25813": 1050, "25814": 1050, "25815": 1050, "259": [51, 232, 265, 301, 370, 414, 499, 568, 569, 1025], "259031": 200, "259297": 200, "25931": 1050, "25956": 1050, "25973": 1050, "25987": 1050, "25991": 1052, "25th": [44, 247, 885], "26": [44, 81, 88, 112, 119, 123, 174, 185, 235, 246, 262, 329, 381, 571, 651, 732, 786, 825, 883, 895, 951, 1004, 1014, 1034, 1037, 1038, 1046, 1052], "260": [267, 1047], "26019": 1050, "26021": 1050, "26033": 1050, "2605": 695, "26082": 1050, "26093": 1050, "260mb": 350, "261": [84, 283, 1025], "26106": 1050, "26108": 1050, "26113448": 162, "26120": 1052, "26121": 1050, "26163": 1051, "26194": 1050, "262": 1034, "26207": 1050, "26242": 1050, "26243": 1051, "26253567e": 112, "26264": 1050, "26267": 1051, "26278": 1051, "26286": 1050, "26286057": 225, "26289": 1050, "26299": 1051, "26315": 1051, "26316": 174, "26318": 1050, "26323": 1050, "263234": 251, "26323428": 251, "26325": 1050, "26333": 1050, "26337": 1050, "26362917": 225, "26366": 1051, "26367": 1053, "263758": [585, 589], "26376": 1050, "26385": 1050, "26386": 1050, "26386883": 172, "26391": 1051, "2640": 838, "26400": 1050, "26410": 1051, "26411": 1051, "26416": 1050, "26424": 1050, "26433": 1050, "26454": 1050, "26459": 1051, "26464": 1051, "26466": 1050, "265": [738, 842, 846, 1006], "26503": 1050, "26506": 1051, "26521": 1050, "2652124": 818, "26525": 1051, "26551": 1050, "26566": 1050, "26579": 1050, "26593496": 225, "266": [112, 221, 279, 1025], "26600": 1050, "26602": 1050, "26616": 1051, "26634": 1051, "26642044": 669, "26644": 1050, "26648": 1051, "26653": 1050, "26657": 1050, "2666": 1004, "2667": 499, "26674": 1051, "26683": 1051, "26689": 1053, "267": [63, 1025, 1034], "2671": 1014, "26721": 1051, "26734": 1051, "26736": 1051, "26744": 1051, "26748": 1050, "2675": 47, "26754": 1050, "26760": 1050, "26765": 1051, "267703": 88, "26772": 1050, "26786": 1051, "26789": 1051, "268": [241, 282], "26814": 1050, "268147": 271, "26828": 1051, "26830": 1051, "26831": 1051, "26837": 1052, "26840": 1051, "26855": 1051, "26862": 1051, "26893": 1050, "26896": 1051, "269": [254, 512], "26903": 1050, "26909": 1051, "26913": 1050, "2692": 1014, "26931": 1050, "26934744": 131, "26940": 1050, "26944": 1051, "26957": 1051, "26th": [407, 729, 759, 1004], "27": [44, 46, 53, 58, 68, 82, 88, 124, 186, 235, 247, 262, 328, 329, 347, 372, 407, 415, 518, 525, 607, 716, 791, 792, 888, 908, 1004, 1014, 1025, 1034, 1036], "270": [196, 329], "27000": 228, "27002": 1050, "27005": 1051, "27006": 1051, "27017": 1051, "27018": 1051, "27044": 1050, "27054655": 225, "27058": 1051, "27096": 1053, "27098": 1051, "27100": 1051, "27104": 1051, "27110": 1051, "27137": 1051, "27139": 1051, "2714": 247, "271411": 251, "27161": 1051, "27161955": 162, "27166": 1051, "27167": 1050, "27179": 1051, "27185": 1051, "272": [208, 230, 1025], "27204": 1051, "27219": 1051, "272214": 586, "27239": 1051, "27240": 1051, "27243": 1050, "27250": 1051, "27252": 1051, "2727": 559, "27274": 1051, "27277": 1051, "27291": 1051, "27292": 1050, "273": [130, 1025], "27301": 1051, "27308": 1051, "27309": 1051, "27311": 1050, "27314": 1051, "27315": 1051, "27328": 1051, "27336": 1051, "2734": 381, "27344": 1052, "27369": 1053, "27372": 1051, "27381": 1053, "27389": 1051, "274": 512, "27412": 1053, "27417": 1051, "27431": 1051, "27438": 1051, "27456": 1052, "27468": 1050, "27478": 1051, "27490": 1051, "27491": 1052, "27499706": 52, "275": [44, 329, 1037], "27500": 1051, "27526": 1052, "27538": 1051, "27544": 1051, "27556": 1051, "27558": 1051, "27560": 1052, "27566": 1052, "275706": 88, "27573": 1050, "27576": 1052, "27577": 1051, "27580": 1050, "27583": 1050, "27584": 1052, "275851": 251, "2759": [899, 900], "27597342": 116, "276": 268, "27601": 1051, "27614": 1051, "27624": 1051, "2763": [420, 475], "27636": 1052, "27639": 1051, "27645": 1051, "27650": 1051, "27651": 1051, "27657": 1052, "27668": 1051, "27670": 1051, "27675": 1051, "27678": 1051, "277": [1012, 1036], "27700": 1052, "27702": 1051, "27710": 1051, "27718": 1051, "27720": 1051, "27721": 1051, "27734": 1051, "27736": 1053, "27757": 1051, "27760": 1051, "27772182": 53, "278": [372, 847, 848, 1025], "2780": 381, "27800": 1052, "27801": 1051, "27817": 1051, "27821": 1051, "27828": 1051, "27834": 1051, "27835": 1051, "27841": 1051, "27844": 1052, "27865": 1051, "27875": 1053, "27898": 1051, "27899": 1051, "279": [178, 205, 217, 1000, 1025], "27904": 1052, "27937": 1052, "27966": 1053, "27979": 1051, "27990": 1052, "28": [44, 100, 147, 165, 185, 226, 235, 262, 277, 305, 328, 329, 372, 381, 407, 411, 450, 457, 865, 1014, 1034, 1037, 1040], "280": 329, "28009951": 830, "2802": 58, "28040": 1052, "28048": 1051, "28051": 1052, "28053": 1052, "28064": 1053, "28074": 1051, "28085": 1052, "28090": 1051, "28092": 1052, "28095": 1051, "28096": 1053, "281": 1025, "28102": 1052, "28106": 1053, "28111": 1051, "28121": 1051, "28136": 1052, "28160": 1052, "28165": 1051, "28167": 1051, "28179": 1053, "2818": 470, "28184": 1051, "28187": 1052, "28188": 1051, "28191": 1051, "28195": 1051, "28198": 1051, "282": 1034, "28205": 1052, "28207552": 225, "28210": 1052, "28222": 1051, "28225276": 87, "2823": 332, "28233": 1051, "28235": 1051, "28240": 1051, "28241": 1051, "28247": 1051, "2825": 0, "28256": 1051, "28261": 1052, "28262": 1051, "28263": 1051, "28268": 1053, "28295": 1051, "2830": 0, "28306": 1052, "28327": 1051, "2833": 381, "28351": 1052, "28352": 1052, "28360": 1052, "28365": 1051, "28377": 1051, "28385": 1051, "28399": 1052, "284": [254, 652, 1025], "28407": 1052, "28425": 1052, "284315": 262, "28432": 1052, "28435": 1052, "28471": 1052, "284806": 262, "284807": 262, "28483": 1052, "28491": 1052, "28494": 1053, "28498": 1052, "285": [251, 329, 727], "28519": 1053, "28521": 1052, "28552": 1052, "28557": 1052, "28582": 1052, "286": [351, 414], "28604": 1052, "28612": 1052, "28622": 1053, "28637": 1053, "28651": 1052, "28664": 1052, "28670": 1052, "28692": 1052, "287": [47, 186, 1016, 1025], "28701": 1053, "28703": 1052, "28712": 1052, "28718": 1052, "28722": 1052, "28756": 1052, "28763": 1052, "28768": 1052, "28773": 1053, "2879": 1041, "288": [536, 542], "28808734": 214, "28822": 1052, "28823": 1052, "28840": 1053, "28843": 1052, "28847": 1052, "289": 185, "28901": 1053, "28915": 1052, "28925": 1052, "28929562": 324, "28934": 1053, "28936": 1053, "28951": 1052, "28975": [1047, 1053], "28988": 1052, "28992": 1053, "28x28": 305, "29": [113, 167, 170, 174, 202, 210, 214, 227, 235, 262, 322, 329, 372, 414, 560, 561, 693, 697, 784, 800, 859, 1000, 1001, 1018], "290": [329, 691, 692, 696, 865, 1001], "290075": 200, "29014": 1053, "29018": 1052, "290584": 304, "29078": 1052, "291": [165, 351, 370, 372], "29105": 1053, "29112": 1053, "29119": 1052, "29124": 1053, "29128": 1053, "29135": 1053, "29136": 1053, "2914": 495, "29141": 1053, "29142": 1053, "29144": 1053, "29158": 1053, "29179": 1052, "292": [393, 414, 738], "29207": 1053, "29212": 1053, "29227": 1053, "29235": 1052, "29239": 1053, "29260": 1053, "29265": 1053, "29266": 1053, "29267": 1053, "29269": 1052, "2928359": 225, "293": 241, "29300": 1053, "29312": 1053, "29314": 1052, "29316": 174, "29327": 1052, "29329": 1053, "29330": 1052, "29336": 1052, "29354": 1053, "29389": 1053, "2939931": 324, "294": [68, 74, 169, 186, 1025], "29400": 1053, "29401": 1052, "29402": 1053, "29404": 1053, "29419": 1053, "29433": 1053, "29437": 1024, "29442": 1053, "29451": 1053, "29462": 1053, "29473397": [847, 848], "29475": 1053, "295040e": 228, "29540": 1053, "29545": 1052, "295505e": 228, "296": 1016, "2961": 654, "29612": 1052, "29634": 1053, "29639": 1053, "296575": 200, "29677": 1053, "29694": 1052, "29696": 1053, "297": 370, "29705": 1053, "29709": 1053, "29710": 1053, "29738": 1053, "29751": 1053, "29773": 1053, "29779": 1053, "29780": 1052, "29793": 1053, "298": 1012, "29818": 1053, "29835": 1053, "29842": 1053, "29868": 1053, "298688": 268, "29869": 1053, "29874": 1053, "29880": 1053, "29884": 1053, "29898468": 225, "299": [136, 683], "29920": 1053, "29950": 1053, "299546e": 228, "29997": 1053, "2_": 996, "2_000": 135, "2_2": [649, 650, 655, 656, 657, 658, 659, 663, 664, 665, 666, 675, 684, 685, 686, 687], "2_f": 655, "2_fro": [656, 665, 666, 687], "2_poli": 268, "2_y": 1006, "2c": [646, 655, 675, 676, 677, 678, 690, 996], "2d": [2, 44, 70, 72, 75, 80, 82, 83, 87, 90, 95, 96, 120, 122, 125, 127, 131, 153, 182, 203, 205, 211, 216, 230, 231, 232, 235, 237, 240, 241, 297, 328, 329, 336, 339, 357, 369, 371, 375, 384, 389, 407, 408, 412, 415, 417, 441, 452, 462, 464, 467, 481, 488, 490, 491, 493, 494, 495, 501, 502, 503, 505, 511, 515, 534, 542, 550, 586, 588, 638, 646, 660, 675, 694, 741, 782, 828, 832, 836, 874, 924, 927, 929, 933, 934, 950, 966, 989, 990, 998, 1000, 1001, 1004, 1011, 1015, 1020, 1025, 1034, 1038, 1041, 1042, 1043, 1046, 1048, 1052], "2e": [197, 281, 283], "2e6": 1004, "2ec5ac": 312, "2f": [45, 48, 51, 53, 58, 68, 75, 78, 80, 81, 84, 86, 96, 98, 101, 116, 119, 124, 130, 147, 150, 154, 155, 160, 185, 186, 190, 193, 200, 202, 207, 210, 225, 226, 227, 228, 237, 241, 247, 262, 267, 271, 272, 274, 276, 277, 278, 282, 296, 297, 303, 310, 313, 321, 325, 326, 339, 350, 351, 358, 408, 411, 414, 699, 831, 834], "2fbf01908075": 708, "2fx": 256, "2g": [232, 235, 700, 1045], "2h": 413, "2k": 180, "2l": [417, 625], "2n": [699, 996, 1008], "2n_": 1000, "2nd": [94, 127, 177, 313, 407, 418, 444, 531, 854, 1014, 1049], "2x": 1034, "2x2": [336, 407, 757], "2x_iy_i": 996, "3": [0, 2, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 184, 185, 186, 187, 188, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 358, 363, 364, 369, 370, 371, 372, 373, 375, 376, 377, 380, 381, 387, 388, 389, 393, 398, 399, 400, 401, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 428, 429, 430, 431, 432, 437, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 478, 481, 482, 483, 484, 485, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 502, 503, 505, 506, 507, 508, 511, 513, 516, 517, 518, 519, 520, 522, 524, 526, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 579, 583, 585, 586, 589, 592, 595, 596, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 620, 621, 630, 631, 632, 633, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 690, 691, 692, 693, 695, 696, 697, 699, 702, 703, 705, 706, 707, 708, 710, 712, 713, 716, 719, 720, 724, 726, 727, 728, 729, 731, 732, 733, 734, 736, 737, 738, 739, 740, 744, 746, 747, 748, 749, 751, 753, 754, 755, 756, 757, 759, 760, 771, 772, 778, 784, 785, 786, 787, 788, 789, 790, 791, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 878, 879, 880, 881, 882, 883, 885, 886, 887, 888, 895, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 920, 921, 922, 929, 930, 933, 934, 935, 939, 949, 950, 951, 952, 953, 954, 955, 957, 958, 959, 960, 961, 962, 963, 966, 967, 969, 970, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 989, 993, 994, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1010, 1011, 1014, 1015, 1017, 1019, 1020, 1022, 1023, 1025, 1032, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1044, 1046, 1047, 1049, 1051, 1052], "30": [44, 48, 50, 55, 58, 71, 75, 76, 80, 88, 94, 104, 106, 110, 128, 135, 143, 147, 150, 154, 165, 169, 170, 173, 186, 190, 192, 205, 208, 210, 228, 230, 231, 235, 242, 246, 247, 257, 262, 268, 273, 283, 285, 288, 297, 298, 312, 313, 314, 322, 323, 328, 329, 333, 337, 340, 342, 343, 357, 362, 370, 372, 373, 380, 381, 393, 399, 400, 411, 415, 418, 444, 450, 455, 456, 457, 501, 532, 536, 538, 539, 540, 542, 544, 546, 547, 571, 594, 597, 598, 600, 651, 695, 738, 786, 847, 848, 849, 850, 851, 853, 855, 857, 858, 859, 888, 903, 916, 981, 993, 998, 1004, 1005, 1007, 1012, 1034, 1035, 1041, 1042, 1043], "300": [44, 59, 60, 71, 74, 84, 92, 124, 135, 136, 137, 141, 181, 201, 235, 237, 241, 257, 262, 271, 281, 298, 311, 319, 328, 343, 346, 443, 447, 448, 459, 461, 514, 642, 647, 648, 682, 693, 695, 697, 864, 923, 1000, 1044], "3000": [53, 98, 233, 899, 900], "30000": 370, "30001": 1053, "30013": 1053, "30022": 1053, "30023": 1053, "300343": 200, "30040": 1053, "30047": 1053, "30061": 542, "30097": 1053, "301": [408, 1018], "3010": 148, "30100": 1053, "30122": 1053, "30137": 1053, "30149": 1053, "3015": 58, "30151134": 466, "30171": 1053, "30172": 1053, "30187": 1053, "302": [268, 351, 630], "30203": 1053, "30224": 1053, "30227": 1053, "30258509": 417, "303": [228, 638], "30318": 1053, "30360": 1053, "304": [165, 312, 357, 372], "30451": 1053, "30454": 1053, "305": 381, "30506066": 196, "30516": 1053, "3053": [469, 474], "305438": 147, "30557": 1053, "30573": 1053, "306": [193, 630, 1025], "306012": 200, "30750": 407, "308": [315, 638, 1025], "30897646": 225, "30m": 370, "31": [44, 103, 111, 228, 262, 270, 293, 320, 328, 329, 404, 415, 501, 562, 563, 599, 652, 674, 682, 968, 1005, 1025, 1034], "3109306": 172, "311": 351, "312": [150, 1037], "3121": 711, "313276e": 228, "314": [356, 1025], "315": [288, 351, 372], "316": [174, 178, 350, 614, 617, 628, 883, 1025], "3164764": [210, 228], "317": 174, "31760": 1000, "318": [104, 175, 450, 1025], "318387": 304, "319": 170, "31958": 174, "31973683": 225, "31bit": 1045, "31st": [211, 886], "32": [44, 45, 53, 85, 119, 184, 187, 190, 235, 246, 282, 321, 329, 369, 373, 380, 389, 404, 414, 415, 445, 565, 566, 584, 591, 637, 679, 886, 888, 933, 934, 968, 1012, 1014, 1025, 1034, 1037, 1040, 1042, 1043, 1046, 1047, 1048, 1051], "320": [82, 370, 993, 1018, 1025, 1034], "3204": 1040, "321301": 63, "322": [46, 351, 471, 472], "3221": [695, 1001], "323": 241, "323200": 63, "324": 370, "324084": 200, "3245": [695, 1001], "325198e": 228, "3252": 599, "326": 351, "32634568": 214, "3264": 47, "327": [64, 733], "3272984419327777": 354, "3273": 749, "327407": 251, "327605": 251, "32767": 1045, "32782448": 172, "3279": 47, "328": [351, 733], "3288": 545, "329": 450, "329616": 200, "32987858": 566, "32bit": [2, 362, 968, 1052], "32x32": 372, "33": [44, 53, 112, 165, 210, 322, 329, 357, 370, 372, 380, 381, 407, 415, 461, 533, 640, 651, 715, 716, 732, 733, 741, 746, 786, 787, 790, 809, 831, 833, 835, 894, 918, 985, 1000, 1004, 1014, 1025, 1034, 1042], "330": 329, "331": [60, 1025], "331263": 200, "3315057": [829, 830], "3317": 210, "332": [351, 895], "333": 849, "3333": 499, "333333": 228, "33333333": [857, 1014], "334": [150, 172, 1025], "334795": 271, "335": 44, "335919": 304, "336": [150, 381, 1014], "336188": 304, "3367": 1041, "337": [317, 381, 1025], "3375": 322, "338": 247, "3383": 47, "3384": 351, "3387": 351, "3397": [667, 688, 689], "33rd": [904, 1017], "34": [44, 48, 147, 165, 169, 293, 306, 328, 329, 357, 372, 411, 521, 530, 571, 599, 652, 670, 719, 767, 1034], "340": [243, 328], "341": [46, 238, 1025], "34118": 370, "34125758": 225, "3415": [667, 688, 689], "341523": 304, "3419": 271, "341949": 200, "342": 825, "34279478": 225, "3433": 47, "34346583": 87, "3445": 47, "345": [62, 165, 372, 1025], "34545455": 1000, "3456": 47, "34586917": 225, "346": [414, 502, 556, 557], "3467": 618, "347717": 147, "348": [101, 1025], "34867495": 1005, "349": [135, 351, 381, 554], "34990341": 116, "35": [44, 46, 47, 48, 49, 51, 89, 104, 137, 157, 185, 186, 192, 198, 237, 269, 282, 285, 313, 328, 329, 545, 651, 652, 659, 705, 709, 710, 730, 744, 759, 785, 792, 840, 993, 1000, 1004, 1010, 1011, 1014, 1025, 1034, 1036], "350": [95, 153, 185, 1025], "351390": 268, "352": [268, 381], "352124": 200, "35278655": 225, "3534": 58, "3539": 103, "354394": 147, "355": [215, 1025], "3551": 47, "355440": 268, "355445": 147, "356": [165, 1012, 1025], "356497": 147, "3565178": 968, "357": [165, 351, 372, 501, 908], "3573": 830, "35776189065725783": 318, "3582": 47, "358295": 200, "358990": 200, "359": 1004, "3591": 1043, "36": [44, 46, 47, 53, 54, 123, 165, 175, 185, 228, 247, 342, 357, 372, 381, 414, 415, 556, 557, 571, 738, 762, 1004, 1034], "360": [135, 554], "360000": 304, "36047253": 225, "361": [122, 266, 370, 414, 556, 557, 1025], "362176": 322, "363": [53, 108, 157, 1025], "3635": 830, "364": [343, 471, 472, 1025, 1035], "365": [409, 473], "3659": 1039, "366": 357, "367": [351, 414, 1034], "36787944": 1002, "3680": [614, 617, 628], "3684": 838, "36851234": 819, "368896": 63, "3690483151908911912247722318110": 53, "3696": 616, "3697": 853, "3697178": 53, "37": [44, 196, 269, 271, 282, 328, 357, 370, 414, 525, 719, 887, 898, 1014, 1025, 1034], "370000e": 228, "370039": 200, "370738": 63, "372": [49, 351, 1025], "37257991": 116, "373333": 271, "375": [51, 87, 123, 449, 753, 1004, 1025], "376": 1012, "37647423": 53, "376999": 63, "37741762": 131, "377eb8": [76, 80, 96, 97, 237], "378": [185, 351, 414, 1004, 1034], "37815029": 225, "37845099": 358, "37967282": 1005, "379710": 185, "379763": 147, "38": [186, 202, 209, 214, 261, 277, 293, 322, 323, 414, 635, 888, 950, 1004, 1014, 1034, 1035, 1036], "3800": 200, "3803": 352, "381": [48, 1025], "381327": 370, "382005": 147, "382120e": 228, "38353048": 225, "383973": 271, "384": [290, 699, 908, 1025], "3840": 1042, "384338": 200, "384616559": 384, "385000e": 228, "3854": [667, 668], "3855": 1024, "386": [64, 883, 1025], "3862": 871, "38629436": 1014, "38690531511642143152471231333333107": 53, "387": [55, 351, 1034], "387580e": 228, "387599": 53, "387830e": 228, "388": 350, "3889": 475, "3889873516666431": 53, "389": [595, 596], "3894": 618, "39": [44, 53, 165, 251, 262, 370, 372, 373, 379, 407, 415, 496, 898, 916, 952], "390": [210, 1025], "3908844": 830, "391": [228, 699, 1025], "3910350737": 384, "3911": 48, "3928": 470, "393": [323, 1025], "393297": 251, "39329747": 251, "39360224": 324, "394": [103, 178], "3947": 1016, "395": 44, "39568399": 537, "396": [103, 165, 186, 372, 1025], "3964": [420, 475], "397": [342, 370, 1025], "3972": 658, "398": [351, 650], "3986": 228, "3996": 654, "3_": 996, "3_poli": 268, "3bae43c9b14e387f76a61b6d82bf98a4fb5d3ef99ef7e7075ff2ccbcf59f9d30": 48, "3c479a6885bfa0438971388283a1ce32": 369, "3d": [101, 127, 230, 232, 234, 357, 415, 507, 588, 924, 966, 1041, 1042, 1044], "3f": [44, 46, 48, 51, 53, 55, 56, 60, 62, 64, 74, 76, 82, 83, 92, 104, 106, 108, 117, 135, 142, 150, 161, 165, 167, 169, 170, 171, 173, 178, 184, 186, 187, 193, 196, 197, 203, 210, 212, 216, 225, 226, 228, 231, 241, 243, 266, 268, 269, 271, 274, 276, 279, 281, 288, 303, 325, 332, 350, 351, 352, 825, 832, 1012], "3k": 699, "3l": 417, "3llobo": 1049, "3m": 52, "3rd": [127, 177, 842, 885, 1006, 1014], "3ssnporch": 144, "4": [44, 45, 46, 47, 48, 49, 50, 52, 53, 56, 58, 59, 63, 64, 65, 68, 69, 70, 71, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 89, 90, 92, 93, 94, 96, 98, 99, 100, 103, 104, 105, 106, 107, 113, 114, 116, 117, 119, 122, 123, 124, 125, 126, 127, 129, 130, 135, 136, 138, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 161, 165, 169, 172, 174, 175, 177, 178, 180, 181, 182, 185, 186, 190, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 208, 209, 210, 211, 214, 216, 217, 218, 220, 223, 224, 228, 230, 237, 241, 242, 243, 244, 245, 246, 247, 249, 251, 253, 254, 255, 256, 258, 259, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 275, 276, 277, 279, 280, 282, 283, 287, 288, 290, 292, 293, 294, 295, 298, 303, 305, 306, 308, 309, 310, 311, 312, 314, 316, 317, 318, 319, 320, 322, 323, 325, 326, 328, 329, 330, 331, 332, 336, 338, 342, 343, 344, 346, 347, 348, 350, 351, 357, 358, 363, 369, 370, 371, 372, 373, 375, 380, 381, 384, 387, 388, 389, 393, 398, 399, 400, 405, 406, 407, 408, 409, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 428, 429, 430, 431, 437, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 491, 497, 505, 513, 514, 517, 518, 519, 525, 527, 528, 529, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 548, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 579, 583, 584, 585, 587, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 617, 620, 621, 622, 625, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 654, 655, 656, 658, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 677, 680, 682, 683, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 701, 702, 705, 709, 710, 718, 719, 728, 729, 730, 735, 737, 745, 746, 747, 749, 750, 751, 752, 754, 755, 759, 771, 772, 784, 785, 791, 792, 793, 794, 797, 799, 800, 801, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 828, 829, 830, 831, 833, 835, 836, 837, 838, 841, 842, 843, 844, 846, 851, 854, 855, 856, 859, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 894, 895, 899, 900, 901, 905, 907, 908, 911, 915, 916, 917, 918, 929, 930, 932, 933, 934, 935, 939, 950, 951, 952, 953, 955, 957, 958, 959, 960, 967, 974, 975, 976, 978, 979, 980, 981, 984, 985, 986, 993, 994, 997, 998, 999, 1000, 1002, 1004, 1005, 1006, 1007, 1014, 1015, 1018, 1019, 1025, 1032, 1035, 1036, 1037, 1039, 1040, 1041, 1043, 1047, 1048, 1049, 1052], "40": [44, 48, 55, 88, 100, 110, 121, 127, 151, 157, 169, 196, 202, 203, 205, 227, 232, 234, 245, 247, 257, 269, 294, 300, 305, 310, 328, 329, 337, 338, 340, 342, 344, 345, 357, 363, 370, 411, 446, 496, 518, 519, 802, 847, 848, 852, 864, 865, 993, 1005, 1014, 1034, 1035], "400": [45, 58, 64, 84, 111, 121, 149, 154, 169, 181, 216, 235, 280, 304, 351, 370, 412, 496, 1025], "4000": [93, 149, 256], "400000e": 228, "4017": 525, "4018260": 324, "402": 272, "402344": 381, "4025": 1039, "403": [272, 275, 1025], "404": [148, 228, 1025], "404mb": 350, "40597": 287, "406": [692, 696, 1001], "4066": 47, "407": [165, 351, 372], "408": 351, "40842387": 52, "40887718": 91, "40945": 104, "4096": [121, 370, 412, 496], "40966": 369, "409717": 271, "41": [48, 53, 165, 210, 247, 357, 370, 372, 457, 469, 481, 493, 624, 627, 638, 649, 650, 655, 661, 663, 664, 665, 667, 684, 688, 689, 702, 784, 842, 1006, 1010, 1025], "41075698": 413, "41076071": 413, "41082": 45, "411": [185, 332, 409, 419, 473, 534], "4110": 476, "41187": 174, "412": [497, 1000], "412021": 147, "41214": [210, 228], "41215": 228, "412304": 200, "414": [71, 228, 351, 408, 729, 759, 883, 895, 1004, 1025], "41421356": [766, 772, 1007], "4143": 387, "414810": 251, "414912": 150, "416": [131, 742, 1004, 1025], "416010": 322, "41666667": 753, "41691605": 131, "417": 287, "41726413": 131, "418": [345, 1025], "41888636": 665, "419": [141, 619, 1025], "4194": 372, "42": [44, 45, 46, 53, 59, 62, 63, 64, 65, 68, 80, 81, 90, 110, 116, 119, 123, 128, 135, 142, 144, 145, 147, 148, 150, 151, 155, 161, 162, 181, 185, 187, 188, 190, 192, 200, 205, 206, 212, 216, 217, 218, 224, 225, 227, 230, 231, 232, 237, 242, 243, 244, 247, 250, 262, 267, 269, 272, 281, 282, 288, 294, 295, 296, 303, 308, 309, 310, 311, 313, 315, 317, 319, 321, 331, 337, 339, 350, 351, 358, 363, 380, 381, 389, 398, 407, 411, 414, 415, 418, 437, 444, 478, 488, 493, 512, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 525, 528, 530, 532, 538, 545, 546, 547, 558, 559, 566, 567, 568, 569, 571, 607, 608, 609, 610, 611, 680, 697, 698, 699, 763, 795, 796, 800, 802, 805, 825, 831, 833, 847, 848, 852, 856, 859, 899, 900, 902, 903, 904, 914, 917, 918, 925, 936, 950, 968, 972, 1007, 1014, 1031, 1034], "42074": 314, "421": [729, 759, 1004], "421087": 271, "42165": 144, "422": [595, 596, 729, 759, 1004], "4226193151": 53, "4232": [44, 53], "423641": 200, "424": 228, "4242": [44, 53], "42425183539869415": 318, "425": [224, 231, 618, 1025], "4254": [165, 372], "4260": [752, 755], "427": [165, 372, 507, 508, 585, 586, 589], "427329": 251, "428": [305, 1025], "4285714285714286": 1004, "429": [285, 351], "4294": 1040, "43": [165, 176, 241, 268, 288, 358, 372, 380, 803, 817, 888], "430": [351, 419, 534], "431": 372, "4310090": 772, "432": [268, 409], "4325": 58, "433": [262, 372], "43348936": 225, "4337": 1000, "434": [110, 263, 1025], "43475": 881, "435": [69, 1025], "436": 241, "4362": 1039, "437": [181, 1025], "437362": 200, "438": [185, 1012], "43847489": 131, "43873": 352, "4387766": 53, "4394": 1042, "44": [44, 174, 185, 186, 196, 225, 285, 292, 479, 784, 888, 908, 911, 986, 1004, 1011, 1034], "440": 185, "440409": 200, "4406": 473, "44063": 53, "4409": [44, 53], "44139186": 305, "4415": 58, "442": [165, 177, 181, 372, 502], "44216253": 324, "4425765": [656, 666, 687], "443": [211, 1025], "44300751539296973": 53, "44300752": 53, "443238": 271, "44373091": 1005, "44381023": 214, "444": 186, "44412786": 537, "445": [262, 1012], "445978": 200, "446": [351, 729, 759, 1004], "447": [328, 1025], "447268": 88, "4472869": 131, "4474": 381, "4478": 1039, "448": 288, "4486": 545, "449": [45, 164, 412, 536, 1025], "4496": [44, 53], "45": [76, 98, 106, 116, 119, 150, 161, 174, 187, 200, 210, 228, 275, 279, 280, 329, 339, 411, 414, 415, 565, 566, 630, 637, 649, 650, 655, 663, 664, 665, 684, 685, 686, 791, 800, 911, 994, 1004, 1012, 1022, 1034, 1037], "4500": 225, "45070924": 669, "451": 649, "451933": 88, "452": [173, 175], "453": 357, "454": 178, "4544": 44, "455": [106, 314, 1025], "4550": 369, "456": [45, 412, 536], "45612256": 663, "45663524": 663, "457": [354, 618, 1025], "4576": 838, "458": [103, 1025], "458333315172": 53, "459": [407, 442], "459074": 251, "46": [44, 53, 87, 105, 210, 247, 381, 595, 596, 685, 686, 719, 825, 911, 916, 1014, 1025], "46033": 497, "46043": 497, "46081961": 1005, "461": 381, "462": 46, "462234": 251, "463": [97, 228, 285, 1025], "463088": 53, "46402556": 324, "46428631511221642143151251232633109": 53, "465660": 63, "465730": 200, "466": [151, 1011, 1025], "4666": 637, "46779927": 52, "468": 92, "46858513287221654": 323, "46874778": [656, 666, 687], "469": [92, 176, 1025], "46915237": [656, 666, 687], "4694": 525, "469474": 200, "46958558": 664, "4697": 82, "47": [44, 53, 207, 370, 494, 495, 536, 542], "471": 372, "47140": 407, "47236": [370, 498], "47330339": 415, "4738": 1039, "475": [135, 185, 1025], "47668": 352, "478522": 200, "47885": 352, "479": [165, 351], "4792": 228, "47922861": 251, "479229": 251, "47928": 352, "4794": 200, "4795": 200, "4796": 200, "4798": 200, "47985": 497, "47987268e": 194, "4799": 200, "48": [44, 53, 116, 150, 174, 251, 314, 372, 381, 407, 511, 599, 702, 749, 831, 842, 993, 1006, 1014], "480": [196, 351], "4801": 200, "4802": 200, "4803": 200, "4804": 200, "4805": 200, "4806": 200, "4807": 200, "4809": [200, 271], "481": 351, "4810": 200, "4812": 47, "4815": 200, "48204257": 1005, "4828": 200, "483": 651, "4830": 200, "4831": [200, 658], "4832": 200, "4836": 200, "484": 178, "4841": 200, "484109": 200, "4846": 200, "485": 699, "4852": 200, "4855": 200, "4857596147013469": 94, "486": 212, "4860": 200, "4866": 200, "4867": 200, "4869": 200, "487": [53, 727], "4872": 200, "48736655": 670, "4874": 200, "4876": 200, "4880": 200, "4881": [200, 1039], "48841": 497, "48842": 497, "4885": 200, "48858": 381, "4888": 200, "489": [180, 1025], "4891": 200, "48938813e": 194, "4894": 200, "48979592": 449, "4898431": [370, 493], "49": [44, 58, 119, 165, 214, 247, 369, 370, 372, 380, 407, 450, 457, 716, 729, 759, 767, 796, 800, 803, 888, 1004, 1014, 1037], "490": 262, "491": 699, "492": [262, 646, 997], "4923": 652, "4928": 200, "493": [646, 907, 997], "4936": 200, "4939": 1041, "494021": 493, "4948": 47, "495": 186, "4951": 656, "495761": 381, "49665188": 214, "4967": 525, "4976": 599, "498": [100, 1025], "499": [165, 372, 381], "4995": 1040, "49999993": 1000, "4daf4a": [80, 96], "4dbd33": 119, "4e": 231, "4e9a06": [93, 98], "4eacc5": [93, 98], "4f": [47, 48, 58, 138, 146, 148, 225, 226, 228, 313, 914], "4i": 84, "4th": [165, 177, 372], "4x": [381, 1049, 1053], "4x11": 292, "4x4": [372, 412, 415], "5": [44, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 58, 60, 62, 63, 64, 65, 68, 69, 71, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 94, 95, 96, 98, 99, 100, 101, 103, 104, 106, 107, 108, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 128, 130, 133, 137, 138, 139, 140, 141, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 157, 160, 164, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 184, 185, 186, 187, 188, 190, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 210, 211, 212, 213, 216, 218, 221, 222, 223, 224, 225, 226, 228, 231, 232, 233, 235, 237, 240, 241, 242, 243, 245, 246, 247, 248, 249, 251, 253, 254, 255, 256, 257, 258, 259, 262, 263, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 277, 279, 280, 281, 282, 283, 285, 287, 288, 290, 291, 292, 293, 294, 295, 297, 298, 300, 301, 303, 304, 305, 306, 308, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 328, 329, 331, 332, 333, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 358, 370, 371, 372, 373, 375, 379, 380, 381, 383, 387, 388, 389, 393, 399, 400, 401, 405, 406, 407, 408, 411, 412, 414, 415, 416, 417, 418, 419, 422, 437, 438, 439, 440, 442, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 461, 462, 463, 464, 466, 467, 469, 472, 482, 483, 484, 485, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 505, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 529, 532, 534, 535, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 553, 556, 557, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 584, 594, 595, 596, 599, 604, 606, 607, 608, 609, 610, 613, 616, 617, 618, 619, 622, 623, 625, 626, 628, 630, 631, 632, 633, 634, 635, 637, 639, 640, 641, 644, 646, 649, 650, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 685, 686, 687, 691, 692, 694, 695, 696, 698, 699, 700, 702, 706, 708, 710, 712, 715, 716, 721, 723, 724, 725, 726, 727, 729, 730, 731, 733, 735, 738, 741, 742, 743, 745, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 772, 773, 781, 784, 785, 787, 788, 790, 791, 792, 793, 794, 797, 799, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 836, 837, 838, 841, 842, 843, 844, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 864, 865, 866, 867, 872, 873, 874, 876, 877, 879, 880, 881, 882, 883, 884, 886, 887, 888, 890, 892, 893, 894, 895, 896, 897, 901, 907, 908, 909, 910, 911, 912, 913, 915, 917, 925, 929, 930, 933, 934, 938, 939, 949, 950, 951, 952, 953, 955, 957, 958, 966, 967, 972, 974, 975, 978, 979, 980, 981, 982, 983, 984, 993, 994, 996, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1014, 1016, 1018, 1019, 1025, 1026, 1030, 1032, 1035, 1036, 1037, 1039, 1041, 1042, 1044, 1048, 1049, 1050, 1053], "50": [0, 44, 47, 50, 53, 55, 62, 69, 70, 74, 84, 86, 93, 94, 99, 100, 103, 104, 116, 119, 121, 124, 130, 135, 138, 141, 147, 150, 153, 154, 165, 170, 172, 173, 174, 175, 184, 185, 186, 193, 196, 206, 210, 213, 217, 218, 222, 224, 226, 228, 230, 234, 235, 240, 241, 243, 251, 262, 263, 268, 270, 271, 281, 288, 306, 308, 312, 319, 321, 329, 331, 333, 337, 345, 351, 370, 372, 375, 380, 395, 411, 414, 415, 416, 419, 442, 473, 479, 480, 501, 505, 522, 524, 527, 534, 540, 545, 554, 555, 570, 595, 596, 608, 610, 611, 618, 620, 661, 662, 669, 670, 671, 673, 679, 680, 681, 695, 716, 795, 803, 817, 836, 856, 907, 916, 999, 1000, 1004, 1005, 1007, 1010, 1014, 1027, 1034, 1051], "500": [50, 80, 84, 91, 94, 95, 97, 116, 117, 128, 130, 139, 141, 148, 164, 169, 173, 190, 223, 224, 231, 248, 249, 253, 254, 258, 262, 268, 271, 281, 282, 288, 294, 300, 312, 318, 323, 324, 343, 348, 362, 414, 420, 469, 470, 474, 475, 476, 481, 482, 483, 484, 614, 616, 617, 619, 624, 627, 628, 653, 654, 657, 658, 659, 683, 685, 686, 993, 1019, 1025], "5000": [90, 197, 225, 226, 228, 319, 888], "50000": 62, "500000": 304, "5000000": 56, "50000000": 172, "50000013": 1000, "500526": 150, "500x500": 542, "5012": 1040, "5016": [409, 420, 475], "5029": [409, 420, 475], "503452": 304, "5036": 1041, "504185": 304, "50447799": 1005, "505": [136, 832, 1025], "507": 408, "50755672": 466, "507943": 271, "5082": 1024, "509": [59, 67, 121, 1025], "50941682": 1005, "50_000": [315, 351], "50sampl": 395, "51": [62, 119, 174, 228, 247, 285, 288, 407, 408, 769, 779, 784, 1000, 1025], "51082562": 592, "511": [235, 1025], "512": [114, 209, 1025], "512281": 258, "512595": 304, "51292546": 615, "513": [88, 856, 1007, 1025], "513034": 304, "5131": [47, 1039], "51341712": 1002, "5141": 1040, "51462041": 852, "5149": 47, "515": 44, "515390": 381, "5166": 676, "5166646": 767, "517": [48, 196, 452, 462, 1025], "517272": 258, "518": [50, 1025], "5182": 1039, "5186": 1039, "5193": 47, "51958": 174, "51963999": 112, "52": [44, 174, 210, 532, 636, 800, 950, 1034], "520": [631, 856, 994, 1007], "52003279": 1005, "5208": 200, "521": 119, "52106591": 131, "5211": 1041, "5212": 200, "522": 908, "5224167": 53, "5229": 1041, "523": [178, 525], "524": [53, 259, 1025], "5243": 415, "52433293": 415, "5244": 200, "525": [439, 631, 994], "5251": 1040, "526": 907, "526599": 200, "5279": 1041, "5282": 1039, "52875032": 664, "5289": 47, "5291": 1040, "5295": 1041, "52955942": 852, "5299": 1040, "53": [44, 87, 247, 407, 414, 536, 542, 547, 795, 796], "531": [117, 1025], "5315170": 53, "5316": 350, "532": [348, 1025], "53284267": 251, "532843": 251, "533": 185, "5337": 1039, "534": [185, 292, 1025], "5355": 1039, "5359": 1041, "536": [107, 174, 288, 1025], "5360": 1039, "53777511": 53, "538": [152, 1025], "53844117956": 767, "5395559": 225, "53959628e": 194, "54": [165, 190, 196, 210, 213, 247, 370, 372, 407, 491, 1035, 1036], "54035582": 767, "541": [212, 291, 452, 462, 1025], "5415": 1001, "5417": 228, "542": [145, 165, 372, 1025], "5420": 545, "542052": 200, "5425": 525, "543": 196, "5431": 1039, "543841": 200, "544": [227, 1025], "54434690031882": 106, "54488318": 384, "5460": 1040, "546068": 251, "54606834": 251, "54675220": 53, "5469": 372, "547": 357, "5488135": 384, "549": 64, "5495": 1039, "54980": 542, "55": [119, 185, 190, 206, 210, 228, 232, 326, 329, 380, 407, 411, 491, 599, 803, 809, 817, 831, 1004, 1034], "5500": [322, 691, 1001], "550213": 200, "55102041": 449, "5515": 749, "552": 1004, "55212743": 358, "55249": 599, "55390036": 131, "554": [218, 226, 305], "5540": 1040, "55422893": 415, "555": 719, "5555555555555556": 276, "5557": 271, "5558": 47, "556": [86, 1025], "55800226": 225, "559": 619, "5591": [692, 696, 1001], "55968825": 649, "56": [44, 141, 228, 241, 332, 381, 649, 650, 655, 663, 664, 665, 684, 716, 738, 1004, 1014, 1025, 1034], "560": [210, 518, 519], "561": 407, "561464362648773": 94, "563": [126, 1025], "564": [210, 285, 1025], "56479934": 358, "56485654": 131, "565": 268, "566": 210, "569": [45, 165, 331, 372, 501, 594, 597, 598, 600, 1025], "5697": 1041, "56b4e9": 253, "57": [78, 124, 169, 185, 226, 277, 306, 372, 373, 393, 399, 400, 408, 708, 764, 784, 840, 1004, 1014, 1034], "570": [165, 372], "570655": 200, "5713": 666, "57142857": 724, "572": 241, "573": 415, "5732": 1041, "57320793": 415, "573491": 200, "574": [92, 351, 535, 542, 1025], "5748": 495, "5749": [370, 494, 495], "575": [103, 142, 210], "576": [202, 1025], "5762": 1040, "576989": 251, "577": [165, 372], "579": 525, "58": [100, 111, 372, 409, 420, 475, 609, 767, 1014], "580": [351, 847, 848], "5804131": 131, "5805": 1040, "5807": 1007, "581": 190, "581012": [370, 491], "5814": 1041, "58149261": 415, "58195950e": 194, "582": 908, "5828": [370, 494, 495], "583": 407, "5833": [741, 1004], "583333315172": 53, "58364548": 1002, "585": [188, 1025], "5857": 1039, "5863": 381, "58667835e": 194, "586798": 200, "587": [154, 1025], "5871": 682, "5874": 1040, "588": [272, 1025], "5882004012129721": 94, "589": [329, 1025], "589715": 200, "59": [44, 53, 190, 196, 228, 372, 381, 407, 408, 511, 825, 1004, 1034], "591": [308, 1025], "59122734": 670, "592": [99, 614, 617, 628, 1011, 1025], "592373": 322, "5925110": 53, "5929": 1040, "593": 139, "594": [178, 186, 210], "594754": 200, "59489497": 225, "595": 210, "5956": 1042, "596": 719, "5960": 225, "5963": 1044, "597": 210, "598": [92, 128, 170, 542], "5981": 545, "598533": 200, "599": 683, "5991": 1041, "5_000": 190, "5a": 887, "5d": 48, "5e": [45, 121, 199, 597, 598, 600], "5e5": 210, "5f": 321, "5m": 56, "5n_": 113, "5th": [53, 147, 150, 177, 407], "5x": 1051, "6": [0, 44, 46, 48, 49, 50, 51, 52, 53, 58, 64, 65, 68, 69, 76, 80, 81, 83, 84, 86, 90, 91, 94, 95, 96, 97, 98, 99, 101, 106, 107, 108, 110, 111, 112, 114, 116, 121, 123, 127, 130, 133, 136, 147, 148, 150, 152, 154, 160, 165, 169, 172, 174, 175, 176, 177, 178, 180, 181, 182, 185, 186, 188, 190, 192, 193, 194, 196, 200, 203, 204, 208, 210, 211, 212, 214, 224, 225, 228, 230, 231, 234, 237, 240, 241, 244, 245, 248, 249, 253, 254, 255, 256, 258, 259, 261, 262, 263, 266, 267, 268, 269, 270, 271, 276, 277, 278, 279, 280, 281, 287, 290, 293, 301, 303, 305, 306, 308, 310, 312, 313, 315, 316, 317, 320, 321, 322, 323, 324, 325, 328, 329, 331, 332, 333, 339, 340, 342, 344, 346, 348, 351, 352, 356, 357, 358, 369, 370, 372, 373, 375, 377, 379, 380, 381, 388, 393, 399, 400, 405, 407, 408, 411, 412, 414, 415, 416, 422, 427, 434, 437, 442, 446, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 461, 462, 463, 464, 465, 482, 483, 484, 485, 490, 492, 497, 506, 516, 518, 525, 531, 539, 541, 542, 546, 548, 554, 558, 563, 564, 568, 569, 570, 571, 595, 596, 604, 606, 607, 608, 610, 612, 614, 617, 618, 628, 630, 631, 633, 639, 640, 647, 648, 679, 682, 692, 696, 702, 703, 705, 714, 724, 731, 741, 745, 748, 749, 753, 754, 756, 772, 781, 788, 791, 793, 800, 801, 802, 804, 805, 810, 812, 813, 815, 820, 821, 824, 831, 832, 833, 834, 842, 843, 844, 846, 847, 848, 854, 855, 857, 858, 859, 867, 868, 874, 875, 877, 880, 882, 885, 886, 890, 891, 904, 922, 926, 929, 931, 933, 934, 944, 945, 946, 950, 951, 952, 954, 956, 957, 958, 966, 978, 981, 989, 990, 992, 993, 994, 998, 1000, 1001, 1004, 1014, 1015, 1018, 1019, 1020, 1025, 1027, 1032, 1035, 1036, 1037, 1040, 1042, 1047, 1051, 1052], "60": [44, 46, 93, 106, 114, 210, 222, 228, 230, 231, 251, 256, 276, 281, 329, 342, 350, 369, 407, 411, 450, 457, 716, 803, 1004, 1014, 1034, 1037], "600": [64, 84, 92, 145, 154, 155, 370, 683], "6000": [306, 630], "601": [135, 1025], "601052": 304, "601707": 200, "60244657": 852, "60276338": 384, "603": [97, 448], "604": [128, 165, 542], "606": [616, 837, 1005], "6072758064261095": 169, "607752": 147, "608": [80, 318, 1025], "60809415": 665, "60834549": 91, "60836363e": 194, "609": [178, 381], "61": [53, 113, 186, 228, 369, 372, 381, 408, 458, 542, 561, 649, 650, 655, 663, 664, 665, 684, 716, 825, 952], "610": [187, 243, 1025], "6101": 1041, "611": [266, 268, 542], "6114": 830, "6114326": 210, "6114327": 210, "6114328": 210, "6114329": 210, "6114330": 210, "611676": 200, "612": 793, "6121": 1040, "6126": 1041, "6147": 1039, "615373": 185, "616": [293, 844, 1006, 1014, 1025], "61611719": 172, "617": [92, 271, 407, 772], "617050e": 228, "6173": 1040, "617715": 147, "6178": 1040, "618": [92, 266], "6181": 1041, "6182": 1040, "618263": 200, "619": [97, 448], "619052": 370, "61958": 174, "6196": [271, 1039], "6198": 749, "62": [53, 124, 186, 190, 228, 261, 322, 329, 358, 370, 494, 495, 847, 848, 1037], "620": 499, "621": [92, 772], "621645": 200, "622": [92, 542], "62241605": 196, "622811": 147, "623": [844, 1006], "6231": 1024, "6237": 228, "624": 1011, "625": [87, 210, 621, 711], "6250": 1041, "6258": 1039, "626": [83, 197], "6261": 1043, "626286": 200, "62717609": 225, "62722912": 53, "62745778": 1005, "628": 351, "6282": 1040, "6284": 1024, "6288": 1041, "629": 352, "6291456": 87, "63": [46, 53, 262, 372, 414, 558, 559, 566, 567, 649, 650, 655, 663, 664, 665, 684, 702, 729, 803, 817, 825, 917, 918, 1004], "630": 727, "63035731": 415, "630382": 322, "6312": 53, "632": [192, 314, 1025], "6331": 44, "6332": 44, "63327171": 196, "6333": 44, "6334": 44, "6335": 44, "6338211367102258": 315, "63394388": 196, "635": [44, 619], "636": [196, 381], "63667341": 91, "637": [178, 352, 1025], "6371000": 767, "6374": 1042, "6375861597263857": 949, "638": [351, 381], "638768": 88, "638843": 304, "63bit": 1045, "64": [44, 53, 69, 87, 92, 121, 174, 185, 231, 241, 242, 246, 266, 277, 292, 297, 362, 363, 372, 373, 381, 389, 393, 408, 412, 419, 496, 499, 503, 601, 602, 649, 661, 691, 692, 693, 694, 696, 908, 1007, 1034, 1036, 1042, 1043, 1046, 1047, 1048, 1051], "640": [319, 352, 405, 490, 507, 508, 585, 586, 589, 993, 1025], "640000e": 228, "640770e": 228, "640880e": 228, "64185414": 669, "64236448": 537, "643": 266, "644": 332, "6440": 225, "64447187": 87, "645": [92, 203, 1025], "6452": 1042, "646": 177, "6463": 1043, "647": [53, 92, 1025], "6472": 1040, "6476": 525, "647689": 200, "648026": 147, "6497": 1040, "64_conda": 383, "64bit": 1034, "64x64": [121, 370, 412], "65": [44, 70, 186, 210, 277, 314, 407, 439, 503, 518, 599, 702, 744, 795, 796, 825, 1011, 1034, 1035, 1036], "650": 405, "6505186632729437": 94, "6507": 1041, "651": 381, "652": 351, "652739": 200, "653": [381, 614, 617, 628, 854], "654": [156, 1025], "6545": 1046, "656": 370, "6560362663398502": 318, "6567": 854, "657": [251, 268], "6572": 854, "6573": 1041, "65799352e": 194, "658": [117, 310, 1025], "6586": 1040, "65e": 197, "66": [44, 234, 314, 326, 372, 407, 424, 461, 533, 635, 715, 786, 787, 798, 886, 894, 985, 1004, 1016], "660": 251, "660797": 251, "661": [190, 1025], "661086": 271, "6624": 1046, "662409": 200, "663": [901, 1012, 1016], "664": [165, 372], "665": 44, "6650": 53, "6651": 1040, "666": [172, 407, 849, 994], "6660": 1040, "6666": [741, 1004, 1040], "66666667": [732, 785, 857, 1014], "666667315174": 53, "6667": 1040, "66670169e": 194, "667": [723, 743, 1004], "667219": 147, "6689": 1042, "6691": 1040, "6697": 1040, "669930e": 228, "67": [100, 185, 228, 372, 499, 517, 518, 519, 630, 670, 716, 817, 994, 1004, 1018, 1034], "670": [212, 262], "671": 1016, "67251877": 669, "673": [117, 351, 381], "67443065": 131, "67451144e": 194, "675": [169, 351], "675318": 88, "676": 672, "6764": 1040, "678008": 210, "678009": 210, "678010": 210, "678011": 210, "678012": 210, "678013": [210, 228], "678359": 200, "679": [212, 907], "68": [44, 202, 306, 328, 407, 478, 536, 542, 592, 688, 689, 1034], "681": [92, 381], "6817": 1040, "682": 381, "6821": 48, "682880e": 228, "683980e": 228, "684": [104, 112], "6846": 1040, "6848": 1043, "685": [723, 743, 1004], "6852": 268, "686": [54, 1025], "6860": 146, "687": 1016, "6875": 719, "688": 112, "689015": 304, "689143": 304, "689751": 304, "69": [46, 202, 262, 313, 329, 407, 471, 472, 609, 610, 759, 1004, 1014], "690": [52, 212, 1025], "6902": 1040, "691": 724, "6913": 1040, "692": 135, "692270e": 228, "692470": 304, "6929": 1024, "692901": 147, "693": 1004, "6931": 871, "69314718": [417, 615, 1014], "695": 266, "69513": 92, "6954": 1040, "69545": 92, "695740e": 228, "696": [243, 1025], "697": 178, "69735": 92, "698": [92, 214, 262, 1025], "6984743": 172, "69892343": 214, "699691": 370, "69e": 178, "6d": 48, "6f": [56, 125, 273, 740, 798], "6ppm": 174, "6th": 177, "7": [1, 2, 44, 46, 48, 52, 53, 54, 55, 64, 67, 69, 71, 75, 78, 80, 81, 87, 88, 89, 90, 94, 98, 99, 101, 104, 105, 107, 112, 114, 124, 135, 138, 143, 147, 150, 151, 155, 156, 165, 178, 184, 185, 186, 188, 190, 194, 195, 209, 210, 211, 212, 228, 230, 237, 241, 242, 243, 249, 251, 253, 254, 257, 258, 262, 263, 268, 272, 274, 275, 279, 285, 287, 288, 290, 293, 294, 296, 305, 306, 308, 312, 317, 320, 321, 322, 324, 328, 329, 331, 332, 336, 343, 346, 347, 350, 351, 352, 358, 370, 372, 373, 379, 380, 381, 393, 399, 400, 405, 411, 412, 414, 415, 416, 418, 419, 422, 439, 444, 445, 446, 448, 450, 451, 452, 453, 455, 456, 457, 458, 461, 462, 463, 464, 467, 471, 472, 482, 483, 484, 485, 491, 497, 499, 533, 534, 535, 536, 537, 539, 541, 545, 562, 563, 590, 593, 602, 607, 608, 630, 631, 633, 640, 649, 650, 652, 655, 661, 662, 663, 664, 665, 676, 678, 684, 685, 686, 695, 702, 710, 712, 724, 726, 727, 729, 731, 747, 748, 749, 753, 754, 756, 785, 788, 793, 794, 797, 800, 802, 803, 804, 805, 806, 807, 810, 813, 817, 820, 821, 824, 830, 833, 837, 847, 848, 856, 866, 867, 872, 879, 880, 902, 903, 950, 951, 954, 955, 958, 967, 972, 993, 994, 999, 1000, 1002, 1004, 1005, 1007, 1008, 1010, 1014, 1018, 1019, 1032, 1035, 1036, 1037, 1040, 1041, 1042, 1043, 1047, 1052], "70": [44, 46, 51, 100, 104, 106, 135, 186, 247, 253, 268, 329, 370, 372, 411, 494, 495, 685, 686, 716, 729, 759, 803, 817, 894, 993, 1014], "700": [84, 262, 319], "7000": 228, "701": 92, "702266": 200, "703": [405, 514], "70359377": 196, "704": 350, "70432034": 116, "7049": 1040, "7049787496083262": 94, "705": 186, "706026": 200, "707": [178, 883, 895], "7071": 1042, "70763101": 87, "708": [539, 541, 548, 753], "70814003": 358, "7083": 1004, "708333315174": 53, "7089": 1041, "709": [258, 269, 1025], "70x": 1051, "71": [44, 81, 165, 167, 214, 228, 372, 511, 733, 739, 769, 779, 1004, 1036], "710": [92, 405, 1025], "7101": 1040, "713": [269, 352], "714": 319, "71518937": 384, "7152": 1040, "7154": 1040, "715413": 147, "7159": 1040, "716": 514, "7187": 1040, "718747": 200, "7194": 1040, "72": [44, 46, 47, 53, 141, 172, 380, 825, 831], "7200": 652, "721": [539, 541, 548], "722128e": 228, "72295655": 116, "723": [92, 243], "723665": 282, "7239": 1040, "724702": 271, "7248": 1040, "725": [70, 1025], "7256": 638, "726": 1012, "7260": 1040, "7261": 1040, "726573": 185, "72667194": 1005, "727148206404819": 276, "72850319": 1005, "7295": 1040, "7298221281347037": 44, "73": [272, 329, 388, 481, 739, 803, 817, 853, 916, 1014, 1034, 1036], "7301": 1040, "730119e": 228, "731249e": 228, "7313": 47, "73153": 381, "732": 212, "7321432711315247203224138160467097": 53, "7323": 1040, "7325": 1040, "732913": 282, "733": 288, "7331": 1041, "7332": 911, "734": [140, 1025], "735": [113, 1025], "7350": 1040, "7353": 1040, "7356": 1041, "7365": 1041, "73654189": 53, "737": [243, 525], "7371": 319, "7376": 1041, "7382": 1024, "7387": 476, "7388": 1041, "739865e": 228, "739950": 282, "74": [44, 226, 328, 329, 372, 592, 697, 803, 817, 886], "741": [325, 1025], "7411": [469, 474, 1040], "7419": 1040, "743": 266, "74310541": 172, "7436926291700353": 206, "744": [266, 288], "744029": 282, "744042e": 228, "7441": 1041, "744497e": 228, "74495357": 196, "7459": 1041, "746": [372, 1004], "7464": 1041, "746492": 268, "748": [350, 381], "749": [81, 1025], "7490": [1040, 1041], "75": [44, 46, 47, 50, 53, 70, 80, 89, 114, 138, 162, 176, 177, 181, 185, 190, 192, 195, 202, 217, 228, 251, 255, 256, 262, 268, 277, 293, 308, 320, 348, 350, 358, 449, 502, 552, 640, 661, 697, 709, 715, 737, 742, 743, 748, 756, 759, 797, 803, 885, 893, 897, 904, 920, 938, 939, 984, 1004, 1006, 1014, 1020, 1022, 1036], "750": [83, 89, 242, 268, 1025], "75000": 210, "7501": 1041, "750348": 147, "750389": 200, "7506": 1041, "751": 352, "752": 350, "752470": 282, "752867": 200, "753": 74, "7532": 489, "7533": [420, 475, 1041], "75474165": 1005, "7548": 1041, "7548291": 324, "755": [137, 1025], "7553": 1040, "7565": 1041, "756687e": 228, "7567": 1041, "756746e": 228, "7569": 470, "757": [165, 266, 288, 372], "7573": 1041, "75747153": 214, "7578": [271, 1041], "75788833": 162, "757915": 282, "758": [78, 294, 1025], "759": [253, 288, 1025], "7593": 1040, "7594": 1040, "75949622": 214, "75th": [247, 885], "76": [44, 190, 210, 329, 350, 358, 372, 381, 780, 784, 867], "760": [44, 150, 165], "7608": 1024, "76195467e": 194, "762": 1004, "7621951219512195": 251, "763": 350, "7632": 1040, "7638": 1000, "764": [724, 1004], "764779": 200, "765012": 322, "7655": 1041, "765671": 200, "7660": 1040, "7661": 1041, "7668": 1042, "7674": [525, 1041], "767498": 147, "7676": 1040, "768": 87, "7680": 1040, "76823": 46, "7685": 1041, "769": 288, "76995": 370, "77": [44, 46, 48, 80, 81, 165, 190, 277, 329, 369, 372, 535, 710, 739, 778, 825], "77000": 210, "7702": 1041, "770926": 282, "772": [314, 350, 726, 1025], "7721": 1041, "7723": 1041, "7724": 1040, "773": [268, 332, 651, 845], "77310": 370, "7732": 1040, "77322639": 116, "7738": 1042, "7739": 1041, "77426368": 52, "775": 58, "7750": 1040, "775047": 679, "775151": 679, "7756": 1040, "77630514": 415, "7768366": 1002, "777": 381, "7771": 1041, "77764": 403, "77777215": 116, "7786": 1040, "779": [124, 237, 350, 1025], "7794": 1041, "779751": 282, "7798": 911, "7799": 1040, "78": [44, 48, 87, 190, 228, 277, 310, 329, 494, 495, 649, 650, 655, 656, 658, 663, 664, 665, 667, 668, 684, 688, 689, 803, 809, 825, 831, 1004, 1024], "780": 266, "7812": 1041, "781265": [370, 498], "7814": 1041, "7816": 53, "7819": [407, 1041], "782": 241, "7823": [1041, 1042], "7825": 1041, "7825594": 52, "7826": 372, "782755": 63, "7831": 350, "783149": 104, "7833": 475, "783392": 268, "7838": 1041, "784": 305, "7840": 88, "7849": 1041, "785063": 104, "78571427112143152472031331383346104": 53, "786": [87, 104], "786015": 104, "7863": 1041, "786432": 87, "78681467": 87, "7872": 1041, "7880": 1041, "7887550": 53, "788808": 322, "789": [161, 414], "7894": [901, 1016], "79": [44, 46, 67, 69, 112, 113, 119, 124, 165, 190, 232, 306, 329, 372, 380, 409, 474, 525, 599, 697, 825, 845, 1034, 1036], "790": [44, 103], "7906": [625, 652], "79064206": 613, "79084103": 358, "791": [144, 178, 1025], "7914": 1041, "791667315161908911936472223112": 53, "79269019073225": 292, "7927845601690917": 315, "7929": [351, 1041], "7943": 1044, "7944": 1041, "7946": 1040, "795": 651, "7954": 1041, "796": 147, "797": [296, 339, 1025], "7970": 1041, "7971": 666, "7972": 555, "79769376": 116, "798": [104, 414], "7983": 1041, "798301": 251, "7986": 1041, "7986499491396734": 169, "798982054": 1004, "799": [178, 351], "7990": 1041, "7998": 1041, "7_qbz5n2kfra8p0": 393, "8": [44, 45, 46, 47, 48, 49, 52, 53, 54, 58, 63, 64, 65, 68, 69, 70, 71, 73, 79, 80, 84, 87, 89, 94, 96, 98, 99, 103, 105, 107, 108, 113, 116, 119, 121, 122, 124, 125, 126, 127, 129, 131, 135, 138, 140, 141, 144, 146, 147, 149, 153, 156, 157, 164, 165, 170, 172, 174, 175, 177, 178, 181, 184, 185, 186, 188, 190, 192, 193, 197, 199, 202, 203, 205, 210, 211, 214, 217, 218, 220, 226, 228, 230, 231, 232, 234, 235, 238, 242, 243, 245, 249, 250, 251, 253, 254, 255, 257, 258, 259, 262, 263, 264, 266, 267, 268, 269, 271, 272, 273, 275, 278, 279, 285, 287, 290, 292, 296, 300, 303, 305, 306, 308, 310, 311, 312, 313, 314, 317, 322, 328, 329, 330, 332, 333, 336, 339, 343, 344, 345, 346, 347, 350, 351, 352, 356, 358, 363, 369, 370, 371, 372, 373, 375, 380, 381, 393, 399, 400, 401, 405, 407, 411, 412, 414, 415, 416, 418, 420, 439, 442, 443, 444, 447, 449, 450, 452, 455, 456, 457, 462, 463, 469, 470, 471, 472, 473, 474, 475, 476, 479, 480, 481, 483, 484, 485, 487, 490, 497, 499, 503, 504, 515, 517, 532, 535, 539, 541, 544, 546, 548, 550, 551, 554, 556, 557, 566, 571, 584, 590, 591, 592, 593, 606, 607, 631, 632, 633, 639, 640, 651, 661, 673, 679, 682, 692, 695, 696, 697, 698, 702, 705, 709, 710, 712, 713, 718, 724, 730, 731, 732, 744, 745, 748, 749, 753, 754, 756, 781, 785, 786, 788, 791, 792, 793, 794, 798, 800, 802, 804, 805, 810, 813, 820, 821, 824, 825, 826, 831, 833, 834, 836, 845, 847, 848, 854, 864, 865, 866, 872, 879, 886, 888, 904, 909, 912, 931, 933, 934, 944, 949, 950, 951, 955, 972, 978, 979, 980, 981, 982, 983, 984, 993, 994, 1000, 1001, 1002, 1004, 1007, 1012, 1014, 1018, 1028, 1031, 1032, 1035, 1036, 1037, 1041, 1042, 1047, 1048, 1050, 1053], "80": [44, 46, 51, 65, 101, 113, 155, 162, 175, 186, 192, 245, 310, 314, 328, 342, 344, 350, 356, 358, 370, 372, 375, 405, 411, 416, 418, 444, 479, 511, 542, 716, 803, 817, 825, 888, 901, 920, 993, 999, 1000, 1004, 1011, 1017, 1020], "800": [84, 320, 370, 586, 695], "8000": [228, 271, 272], "800000011920929": 357, "8000184677460305": 315, "8002": 1041, "8003": 1042, "8005": 1041, "8006": 1041, "8010": 1041, "801770e": 228, "802": [47, 165, 313, 372, 1025], "8022": [47, 473, 1043], "802601": 200, "8028": 1041, "803483": 147, "803882e": 228, "8040": 1040, "804414": [370, 498], "805": 212, "8053": 1041, "8059798": 196, "806": 652, "8061": 1041, "8065": 1041, "8066": 1042, "8068": 1041, "807": [266, 268], "8075": 1042, "808": [301, 1025], "8086": [622, 1041], "8087": 1041, "8093": 1041, "8094": 1041, "80956739": 1005, "80_000": 140, "81": [44, 84, 232, 251, 328, 329, 407, 702, 764, 791, 803, 817, 834, 1004, 1005, 1007, 1014], "810": [187, 832], "8100": 1024, "8102": 1042, "810596": 370, "8117": 1041, "8120": 1041, "8125": 724, "812526": 200, "8129": 1042, "8133333333333334": 299, "81355169": 415, "8137": 1041, "8139": 1041, "814": 187, "815476315189119122164721021826110": 53, "8157": 1024, "8159": 1041, "816": [269, 471, 472], "8160": 1041, "817": [311, 1025], "8174": 1041, "817724": 200, "818": 197, "8181": 1041, "819": 415, "8190": 1042, "81940995": 415, "8198": 1041, "82": [44, 67, 87, 92, 143, 162, 167, 213, 299, 328, 791, 803, 817, 950, 1004, 1007, 1034], "820": [44, 53, 847, 848], "820705": 200, "8216": 1043, "822": 793, "822097": 185, "8224": 1041, "8225220806196525": 206, "823": 288, "8243": 1024, "825": 753, "8251": 1041, "8253": 226, "8259": 1041, "827": [256, 1025], "827917": 147, "828": 288, "8282": 1041, "829429": 258, "8295": 1041, "83": [46, 67, 71, 75, 328, 350, 372, 697, 710, 789, 923, 999, 1004, 1037], "830000": 304, "8306": 1041, "8316": 1041, "832": [187, 414, 556, 557], "83236428": 415, "83281226": [847, 848], "8333": 499, "83333": 767, "833333": 185, "8335": 1041, "834": 332, "834310": 200, "8344": 1041, "8345": 599, "8353": 47, "8354": [625, 1041], "83548752": 613, "8355": 1040, "8361": 1042, "836224": 63, "8363": 1041, "837": [355, 1025], "8377": 1041, "83816048": 649, "83822343": 1002, "83833": 381, "8387": 838, "839": 683, "84": [44, 46, 103, 162, 202, 228, 247, 310, 328, 358, 372, 414, 415, 791, 817, 1004, 1014], "840": 381, "84000": 210, "840000": 304, "8407": 103, "84077985": 196, "841": 104, "84127814": 669, "84253": 1005, "844": [414, 556, 557], "8446": 1041, "8449": 1041, "847222222222214": 206, "8473": 415, "8478": 1043, "8480": 1024, "8481": 1041, "8484": 1042, "848743": 63, "849835": 88, "85": [46, 56, 69, 84, 89, 103, 124, 162, 225, 228, 247, 266, 279, 306, 329, 358, 414, 439, 499, 501, 556, 557, 599, 655, 661, 748, 756, 791, 803, 831, 1004, 1005, 1034], "850": [270, 1025], "850000": 304, "850031": 200, "8508": 1043, "851": 268, "8512": 1041, "8513": 622, "851348": 63, "8515": [415, 1041], "85151335": 415, "851792": 63, "852": [281, 1025], "85253229": 91, "852774": 147, "853174": 63, "853676": 266, "853846": 200, "854": 266, "85418642": 358, "8549": 1041, "855": [48, 352], "8554": 1042, "855465": 304, "857": [269, 351], "857400": 63, "858486250088675": 315, "85857475": 131, "8586": 1041, "859007": 63, "8591": 1041, "86": [53, 69, 103, 162, 202, 310, 328, 329, 406, 791, 915, 1004], "860000": 304, "861": [165, 186, 372, 791, 792, 1004], "861053": 63, "861106": 63, "861533": 63, "8617": 1042, "861868": 63, "8626621": 324, "8628": 638, "8640": 186, "865": [194, 1025], "865400": 63, "866": 1012, "866161": 63, "866571": 63, "867": 107, "8672": 1041, "8676": [623, 1041], "8678": 626, "868": [147, 161], "868443": 51, "869": [273, 1025], "8698": 1041, "87": [46, 69, 103, 178, 262, 329, 599, 670, 780, 791, 803, 825, 883, 895, 1004], "870": [165, 372], "871": [74, 112, 113, 409, 474], "871277": 63, "871965": 63, "872": [74, 1012], "8720": [557, 1042], "872186": 63, "873": [165, 372], "873724": 63, "87382323": 665, "874": [106, 791, 792, 1004], "87421f": 119, "874771": 147, "875": [87, 170, 672], "875315171": 53, "875315173": 53, "875941": 63, "876": [248, 1025], "87600388": 172, "8768": 1041, "8769": 1043, "877": [48, 266], "8773": 1043, "877981": 63, "878": [48, 277, 322, 1025], "878051": 200, "878964": 815, "87mb": 350, "88": [44, 46, 69, 202, 214, 247, 267, 306, 325, 328, 329, 354, 370, 372, 375, 406, 409, 473, 649, 650, 655, 663, 664, 665, 684, 867, 950, 1034], "880": [44, 96, 1025], "880191": 200, "880298": 200, "88089948": 415, "88096009": 131, "882": [268, 332, 1025], "88213": 370, "882561": 268, "883": 83, "883065": 63, "8833": 499, "8835": 1041, "884": [281, 288], "8845": 1041, "885": [48, 165, 332, 372], "8854": 1041, "8874": 1041, "8878": 838, "8880": 623, "8881": 626, "889": [266, 437], "88978285": 1005, "89": [44, 69, 174, 202, 328, 329, 986, 999, 1004, 1014, 1034, 1037, 1045], "890": 266, "891": 48, "892": [146, 1025], "8922": 1041, "893055": 200, "8931": 1041, "8936": 1041, "894264": 251, "8947": 917, "8948018": 53, "89483932": 1002, "8948621": 1005, "895": [199, 1025], "896": 651, "8963": 271, "8965": 414, "897": [184, 1025], "8973": 1041, "89856": 815, "899": [69, 266, 303, 1025], "8992": 1041, "8995": 1041, "8pt": 1014, "8x": 324, "8x8": [69, 202, 241, 297, 306, 372, 503], "9": [44, 47, 49, 52, 53, 54, 62, 64, 65, 68, 69, 71, 78, 80, 84, 89, 92, 96, 98, 107, 114, 116, 143, 144, 146, 147, 148, 153, 155, 165, 167, 172, 176, 181, 184, 185, 186, 188, 194, 195, 202, 210, 223, 224, 227, 228, 230, 232, 233, 241, 242, 251, 253, 254, 255, 256, 261, 262, 271, 272, 275, 277, 279, 281, 287, 290, 292, 293, 296, 297, 298, 303, 304, 306, 308, 310, 311, 312, 314, 315, 317, 322, 323, 325, 326, 328, 329, 331, 332, 333, 339, 343, 348, 352, 358, 372, 373, 381, 388, 393, 399, 400, 405, 406, 408, 409, 411, 414, 415, 439, 443, 450, 457, 463, 482, 483, 484, 485, 490, 497, 499, 517, 519, 521, 528, 535, 539, 540, 541, 548, 561, 568, 571, 585, 593, 606, 607, 609, 610, 630, 633, 637, 640, 642, 649, 650, 655, 661, 663, 664, 665, 684, 685, 686, 690, 695, 702, 712, 726, 729, 744, 751, 772, 781, 782, 783, 800, 802, 804, 806, 807, 821, 824, 825, 831, 833, 836, 844, 845, 849, 850, 855, 858, 864, 865, 873, 879, 882, 950, 951, 955, 976, 993, 999, 1000, 1004, 1008, 1014, 1018, 1019, 1032, 1035, 1036, 1037, 1039, 1048, 1050], "90": [46, 50, 53, 55, 69, 81, 107, 130, 131, 146, 147, 148, 150, 162, 174, 188, 193, 202, 209, 212, 217, 228, 253, 277, 279, 310, 314, 323, 328, 329, 358, 362, 375, 381, 411, 564, 784, 803, 831, 836, 888, 999, 1004, 1049, 1050], "900": [48, 84, 107, 108], "9000": 228, "900000e": 228, "9010": 1040, "9012": 1042, "9015": [666, 1042], "9019": 1041, "9022": 1041, "9024": 1041, "9026666666666666": 147, "903": 48, "904": [186, 266, 408], "9041": 1042, "9043": 1042, "9044": [268, 1041], "90453403": 466, "904556e": 228, "904558e": 228, "904747e": 228, "904751e": 228, "905": 266, "905206": 88, "9067": 1041, "9069": 1043, "9078": 1041, "908": 1004, "90809432": 131, "9085": 1042, "9087": 1048, "90885631": 87, "909": 48, "909293": 304, "909909": 147, "91": [46, 48, 69, 85, 174, 306, 328, 329, 414, 999], "910": 44, "9100": 1041, "9101": 1042, "9105": 1041, "9108": 1041, "911": [216, 1025], "912": 74, "912632": 304, "913": [321, 414, 560, 1025], "914370e": 228, "914387e": 228, "9144057": 53, "9145": 1041, "914538e": 228, "914573e": 228, "9147": 1042, "9149": 1040, "915": 48, "9151": 1042, "9157": 1042, "916": 83, "91629073": 592, "916555e": 228, "9167": 322, "917": [83, 357], "917281": 147, "917618e": 228, "919": 262, "92": [48, 53, 69, 84, 124, 162, 190, 266, 306, 328, 329, 339, 370, 372, 539, 541, 548, 563, 599, 699, 803, 817, 825, 999], "9206": 1041, "9219": 1041, "9221": 652, "9222": 1042, "9226260871125187": 276, "923223": 815, "92329566": 131, "9234": 1042, "9239": 1041, "924": 48, "92461872": 129, "925": 1004, "9250": 1044, "92529176": 1005, "9257": 1042, "9259": 1041, "9266666666666666": 143, "927": 437, "9274": 1044, "9277": 1041, "9278": 1041, "928": [113, 437], "9282207572920261": 324, "9284": 1041, "928571": 228, "9288": 1044, "9289": 1041, "929": [200, 1025], "93": [46, 69, 165, 210, 251, 329, 350, 372, 649, 650, 655, 663, 664, 665, 684, 780, 791, 803, 825, 831, 915, 999, 1004], "930": [246, 312, 1025], "9300": 268, "930000": 304, "9302": 1041, "9304": 1042, "932": 48, "93271427": 172, "933": [48, 107, 411], "933197": 251, "933253": 147, "9333": 411, "933333": 856, "935": 1041, "9354": 1042, "936": [48, 437, 1004], "936480": 63, "9372": 1042, "937443": 63, "937532": 63, "937597": 63, "9378": 1042, "938": [48, 280, 788, 1004, 1025], "938613": 63, "939": 671, "9399": 1042, "93fletcher": 1000, "93goldfarb": 1000, "93lindenstrauss_lemma": 901, "93shanno_algorithm": 1000, "94": [44, 69, 71, 88, 123, 143, 209, 245, 310, 328, 329, 406, 414, 666, 791, 825, 999, 1004, 1005, 1014, 1034], "940": 44, "9400": 268, "940000": 304, "940184": 147, "940201": 63, "940374": 63, "9403917": 116, "941": 48, "94114649": [847, 848], "9416": 53, "9417": 674, "9431": 838, "944": 48, "9456": 1042, "94592424": 665, "946": 113, "947": [347, 1025], "94731329": 670, "9473684210526315": 317, "947958": 993, "948": [788, 1004], "9484": 1042, "949": 48, "9490": 372, "9492": 1042, "9497": 1042, "9499": 641, "95": [46, 53, 55, 69, 80, 86, 91, 101, 124, 143, 147, 150, 176, 185, 192, 210, 212, 217, 228, 255, 256, 259, 266, 268, 269, 293, 301, 310, 314, 321, 329, 339, 358, 414, 528, 635, 636, 639, 650, 664, 751, 825, 904, 1000, 1004, 1005, 1017, 1037], "950": 48, "950000047683716": 357, "9502547": 196, "9507": 1041, "9515": 1042, "951751e": 228, "951958": 993, "952": [48, 83], "9521": 1042, "952289": 200, "9524": 1042, "953": [48, 83, 231, 1025], "953061": 305, "95373": 370, "954": [269, 883, 895, 1025], "95433992": 116, "955": [288, 411, 657], "9558": 1041, "955989": 993, "956": 48, "956038": 304, "9565": 372, "9569": 1042, "957": [48, 313, 731, 1004], "9579": 1042, "958": 48, "9583": 406, "9584": [630, 1041], "959": [75, 883, 895, 1025], "9593": 1041, "9595": 677, "9597": 1044, "9599": 1042, "95th": [53, 147, 150, 751], "96": [44, 53, 69, 96, 176, 237, 247, 306, 310, 313, 314, 328, 329, 372, 411, 554, 685, 686, 714, 825, 993, 999, 1004, 1014, 1034], "960": [90, 105, 1025], "9600": 1041, "9604": 1041, "961": [333, 864, 1025], "961009": 993, "9612": 1042, "961904": 856, "96190476": 1007, "962": [48, 169, 1025], "96228895": 131, "9623": 1041, "963": [55, 352, 1025], "9630": 678, "9641": 1041, "9647": 1042, "965": [48, 1004], "9655": 1042, "9656": 1042, "966": 46, "9666": 544, "966981": 200, "967": [107, 232, 1004, 1008, 1025], "9677": 1041, "968": [174, 184, 266], "9681": 1042, "9686": 1042, "969": 369, "9693": 1041, "9694898472080092": 323, "9697": 1041, "97": [69, 130, 165, 188, 245, 259, 329, 339, 372, 381, 388, 411, 649, 650, 655, 661, 663, 664, 665, 684, 685, 686, 999, 1005, 1014, 1034], "9701": 1042, "9707": 1042, "9711": 1041, "9717": 1041, "9723": 1042, "9726": 1042, "973": [351, 411], "9731": 1042, "9733": [623, 626], "973554": 322, "973770": 200, "974": 357, "974e": 415, "975": [165, 184, 1019], "9750": 1041, "97545464": 251, "975455": 251, "9759": 48, "976": [163, 276, 1025], "976158": 370, "977": [44, 411], "9771": 555, "9772": 1042, "9775": 1042, "977890": 258, "9781605585161": 407, "978444": 304, "9786": 1042, "9788": 1041, "98": [69, 78, 80, 88, 96, 98, 114, 124, 165, 237, 266, 276, 303, 310, 329, 372, 411, 414, 662, 842, 865, 898, 999, 1004, 1006], "980000": 304, "9802": 1041, "981": [165, 306, 372, 1004, 1025], "9815": 1041, "9816": 1042, "9821": 853, "983": 731, "9830": 1041, "9832": 1042, "9833": 499, "98350372e": 194, "983667": 993, "9837": 1042, "9843": 1047, "9847": 1041, "984ea3": [80, 96], "9850": 210, "9851": 1042, "9858": 1042, "98633022": 131, "986429": 305, "9865": 1041, "9866": [613, 622, 625], "9866666666666667": 143, "9868": [901, 1016], "986989": 271, "987": [276, 351], "9875": 1042, "98809919e": 194, "9884": 682, "9885": 674, "9886": 1042, "989": [73, 1025], "989341": 200, "98mb": 350, "99": [46, 53, 63, 69, 80, 85, 96, 121, 228, 237, 241, 247, 253, 255, 266, 269, 308, 329, 363, 368, 372, 411, 414, 415, 493, 650, 664, 674, 685, 686, 791, 825, 854, 972, 999, 1004, 1014, 1018, 1030, 1036], "990": [79, 672, 1004, 1025], "9900": 228, "9907": 1043, "9908": 1042, "991": [276, 351, 1004], "991584977345022": 169, "991653": 304, "992": 226, "9922": 1041, "9924": 542, "99244": 542, "992766": 304, "993": 276, "9930666666666667": 317, "9933333333333333": 143, "9935": 838, "993879": 304, "9939": 1042, "993919": 51, "994": [282, 288, 1025], "9945": 1041, "9951": 1044, "9969977": 53, "997": [47, 76, 165], "9978": 1047, "9979": 44, "9979281": 53, "998": [165, 1008], "9980": [44, 1042], "9981": 44, "998142": 53, "998273": 262, "9987": 642, "99891212e": 194, "999": [228, 262, 268, 414, 720, 864, 865], "9990": 228, "9991": [667, 668, 1042], "99918858": 131, "9993": [44, 656, 658, 1042], "9994": 666, "9995": 44, "9996": 654, "999791942438998": 318, "9998": [51, 301], "9999": [51, 228, 301, 331, 499, 630, 1042], "99999": 331, "999999": [80, 96], "A": [0, 2, 20, 26, 42, 54, 56, 57, 63, 65, 68, 72, 74, 75, 76, 77, 80, 81, 83, 87, 88, 90, 91, 93, 94, 95, 96, 98, 101, 108, 110, 113, 117, 119, 122, 123, 124, 136, 137, 142, 144, 154, 158, 162, 164, 169, 172, 174, 176, 177, 178, 182, 185, 186, 196, 198, 211, 214, 220, 224, 225, 228, 231, 244, 247, 256, 262, 268, 269, 271, 275, 283, 285, 303, 308, 310, 313, 317, 319, 322, 329, 330, 331, 333, 339, 343, 344, 350, 351, 352, 357, 358, 362, 364, 369, 370, 372, 373, 375, 377, 378, 379, 380, 383, 387, 388, 389, 390, 392, 398, 402, 404, 405, 407, 408, 409, 410, 412, 413, 414, 415, 416, 418, 419, 420, 421, 430, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 457, 458, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 488, 490, 491, 493, 495, 498, 501, 502, 503, 504, 505, 509, 511, 512, 513, 514, 515, 521, 523, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 583, 584, 585, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 609, 610, 612, 613, 614, 620, 623, 630, 631, 632, 633, 635, 636, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 707, 708, 713, 714, 715, 719, 720, 722, 724, 725, 726, 727, 728, 729, 734, 739, 740, 743, 745, 746, 747, 750, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 767, 769, 770, 777, 778, 779, 780, 781, 784, 791, 793, 794, 796, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 891, 892, 893, 895, 896, 897, 898, 899, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 944, 946, 949, 950, 951, 959, 960, 962, 963, 988, 992, 993, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1017, 1018, 1019, 1020, 1022, 1023, 1024, 1025, 1030, 1034, 1036, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "AND": 738, "AS": 419, "AT": [2, 370, 496], "And": [53, 182, 229, 230, 235, 244, 268, 350, 377, 383, 401, 407, 411, 415, 531, 590, 591, 593, 695, 696, 1000, 1004, 1025, 1041], "As": [0, 31, 44, 47, 59, 63, 67, 76, 79, 87, 89, 91, 92, 100, 114, 117, 126, 135, 136, 142, 144, 145, 146, 148, 150, 154, 160, 163, 169, 174, 175, 181, 185, 187, 188, 190, 192, 195, 196, 200, 202, 210, 214, 218, 228, 235, 244, 256, 262, 263, 265, 266, 268, 269, 271, 287, 293, 309, 320, 325, 326, 331, 339, 343, 351, 352, 354, 356, 358, 362, 363, 370, 374, 375, 377, 380, 387, 388, 389, 401, 405, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 446, 494, 555, 563, 567, 612, 622, 635, 658, 659, 675, 677, 690, 738, 761, 767, 849, 850, 851, 853, 855, 886, 993, 998, 1000, 1001, 1003, 1004, 1005, 1007, 1011, 1014, 1018, 1019, 1020, 1023, 1024, 1028, 1034, 1040, 1045, 1050, 1052], "At": [53, 108, 135, 215, 244, 262, 280, 285, 287, 328, 331, 362, 363, 379, 390, 398, 403, 410, 414, 437, 440, 465, 590, 591, 593, 604, 835, 837, 874, 967, 993, 1000, 1003, 1005, 1009, 1018, 1028], "Be": [162, 178, 350, 375, 409, 568, 569, 651, 657, 658, 659, 661, 662, 672, 683, 707, 821, 822, 882, 1014, 1031, 1035], "Being": [375, 389, 390, 1000, 1007], "But": [44, 49, 87, 184, 211, 212, 268, 288, 308, 375, 387, 407, 410, 413, 414, 462, 749, 915, 916, 993, 1004, 1019, 1024], "By": [58, 121, 150, 151, 152, 192, 214, 244, 262, 277, 285, 308, 317, 323, 324, 343, 350, 363, 375, 377, 381, 382, 389, 398, 406, 407, 408, 410, 411, 412, 413, 414, 416, 438, 441, 445, 446, 450, 464, 467, 468, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 525, 550, 551, 558, 559, 560, 561, 565, 566, 587, 588, 590, 591, 593, 608, 611, 635, 636, 674, 676, 678, 680, 693, 695, 697, 700, 702, 703, 705, 706, 721, 732, 733, 737, 741, 786, 787, 790, 797, 799, 806, 807, 853, 854, 867, 868, 880, 881, 883, 885, 895, 897, 905, 910, 911, 915, 916, 917, 918, 933, 934, 993, 994, 996, 1000, 1004, 1011, 1012, 1014, 1016, 1020, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1046, 1048, 1051, 1052, 1053], "For": [2, 31, 44, 48, 49, 52, 53, 54, 58, 65, 69, 73, 76, 80, 81, 83, 87, 89, 91, 92, 94, 101, 106, 112, 117, 122, 138, 140, 147, 148, 150, 151, 153, 161, 162, 165, 169, 171, 176, 180, 181, 185, 186, 196, 198, 200, 203, 207, 210, 211, 214, 215, 218, 227, 228, 230, 232, 235, 237, 238, 240, 241, 242, 244, 251, 258, 262, 265, 268, 269, 275, 282, 287, 288, 298, 303, 305, 306, 310, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 331, 333, 339, 341, 343, 346, 350, 351, 352, 354, 355, 357, 358, 362, 364, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 387, 388, 389, 390, 398, 403, 404, 405, 406, 407, 408, 411, 412, 414, 415, 416, 417, 418, 423, 430, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 454, 456, 457, 458, 460, 461, 462, 464, 465, 466, 468, 471, 472, 474, 482, 483, 484, 485, 489, 495, 497, 499, 504, 515, 516, 524, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 548, 550, 551, 552, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 573, 574, 583, 584, 585, 586, 590, 591, 593, 594, 595, 596, 599, 604, 609, 610, 611, 613, 614, 617, 622, 625, 626, 630, 631, 632, 633, 634, 635, 636, 638, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 687, 690, 691, 692, 693, 695, 696, 698, 704, 707, 709, 710, 723, 730, 732, 733, 741, 742, 743, 744, 766, 772, 781, 785, 786, 787, 790, 791, 792, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 817, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 834, 836, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 872, 873, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 892, 893, 894, 895, 896, 897, 898, 899, 900, 905, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 933, 939, 956, 966, 987, 993, 994, 996, 997, 998, 999, 1000, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1018, 1019, 1020, 1022, 1027, 1028, 1034, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "If": [0, 44, 51, 53, 65, 69, 78, 83, 89, 104, 114, 124, 133, 147, 150, 155, 178, 181, 185, 194, 210, 225, 227, 228, 244, 247, 251, 262, 268, 275, 282, 293, 301, 308, 313, 314, 322, 326, 339, 343, 346, 347, 350, 351, 352, 357, 358, 362, 363, 369, 370, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 387, 389, 390, 393, 398, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 428, 431, 432, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 509, 510, 511, 513, 515, 516, 520, 523, 524, 525, 528, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 583, 584, 585, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 609, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 703, 704, 705, 706, 707, 708, 710, 714, 715, 716, 717, 719, 720, 721, 725, 729, 730, 731, 732, 733, 734, 735, 739, 741, 744, 748, 749, 751, 756, 757, 758, 759, 760, 761, 762, 764, 766, 767, 769, 770, 771, 772, 774, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 815, 817, 820, 823, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 920, 921, 922, 928, 929, 931, 932, 933, 934, 936, 937, 938, 939, 942, 944, 949, 951, 953, 955, 960, 962, 966, 969, 972, 974, 977, 978, 984, 987, 988, 989, 990, 992, 993, 994, 996, 998, 999, 1000, 1001, 1002, 1004, 1007, 1008, 1010, 1011, 1014, 1016, 1018, 1019, 1020, 1021, 1023, 1024, 1027, 1034, 1037, 1038, 1039, 1040, 1043, 1044, 1046, 1047, 1048, 1050, 1052], "In": [0, 7, 38, 44, 45, 47, 49, 51, 52, 53, 54, 55, 63, 64, 65, 71, 73, 75, 83, 87, 89, 91, 92, 94, 100, 101, 104, 105, 107, 108, 110, 112, 113, 114, 117, 121, 123, 126, 127, 128, 129, 133, 135, 138, 140, 141, 142, 143, 144, 145, 147, 149, 150, 151, 152, 153, 155, 158, 161, 162, 164, 165, 169, 173, 174, 176, 177, 178, 180, 181, 184, 185, 186, 187, 188, 190, 192, 193, 194, 196, 198, 199, 200, 202, 203, 206, 210, 211, 212, 213, 214, 215, 218, 227, 228, 237, 238, 239, 240, 242, 243, 244, 245, 247, 248, 249, 250, 251, 256, 258, 261, 262, 265, 266, 268, 269, 270, 271, 273, 274, 277, 278, 280, 281, 282, 283, 285, 288, 291, 294, 295, 297, 306, 308, 309, 310, 313, 314, 315, 317, 318, 319, 321, 322, 324, 325, 326, 330, 332, 339, 343, 346, 350, 351, 352, 354, 356, 357, 358, 362, 363, 364, 368, 369, 370, 371, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 387, 388, 389, 390, 392, 393, 394, 398, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 424, 437, 440, 441, 442, 443, 444, 447, 448, 449, 452, 462, 463, 464, 469, 472, 475, 494, 497, 504, 509, 510, 512, 524, 535, 537, 539, 541, 542, 543, 545, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 583, 584, 590, 593, 604, 608, 611, 613, 614, 633, 635, 636, 637, 639, 646, 647, 648, 650, 651, 652, 654, 656, 658, 661, 662, 664, 666, 668, 669, 671, 672, 677, 678, 679, 682, 683, 687, 688, 689, 699, 702, 706, 715, 721, 723, 729, 731, 732, 737, 738, 741, 743, 745, 757, 759, 760, 784, 786, 788, 791, 797, 799, 800, 801, 802, 803, 806, 807, 809, 817, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 849, 850, 851, 853, 854, 855, 857, 858, 859, 864, 872, 874, 880, 881, 885, 886, 888, 892, 893, 895, 896, 897, 898, 899, 900, 902, 903, 904, 907, 908, 909, 912, 915, 917, 922, 932, 934, 951, 992, 993, 994, 996, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1028, 1031, 1034, 1035, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "Ines": 1051, "It": [0, 31, 44, 47, 48, 49, 53, 59, 63, 71, 73, 76, 87, 89, 92, 105, 110, 112, 114, 121, 124, 125, 127, 130, 135, 138, 140, 141, 143, 145, 147, 155, 165, 174, 175, 176, 180, 181, 185, 186, 187, 193, 196, 198, 200, 210, 214, 224, 227, 228, 230, 231, 237, 242, 244, 247, 262, 263, 264, 266, 268, 269, 271, 274, 275, 277, 282, 285, 288, 294, 295, 296, 298, 299, 301, 308, 312, 313, 315, 317, 323, 325, 326, 335, 339, 343, 346, 350, 351, 352, 358, 362, 363, 364, 368, 370, 371, 372, 373, 375, 377, 379, 380, 381, 383, 384, 387, 388, 389, 390, 393, 398, 401, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 432, 437, 438, 441, 442, 443, 444, 445, 447, 448, 449, 452, 459, 462, 464, 467, 468, 469, 474, 478, 485, 487, 497, 509, 516, 525, 534, 536, 537, 539, 541, 542, 550, 551, 554, 555, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 591, 598, 604, 608, 609, 610, 614, 617, 618, 622, 623, 625, 626, 630, 633, 634, 635, 636, 644, 645, 646, 649, 650, 653, 655, 656, 657, 658, 661, 663, 664, 665, 666, 669, 670, 671, 673, 674, 675, 677, 679, 680, 681, 682, 684, 685, 686, 687, 690, 692, 694, 695, 696, 698, 699, 700, 701, 702, 703, 705, 707, 711, 712, 713, 719, 726, 737, 745, 746, 750, 761, 762, 765, 768, 784, 786, 791, 802, 803, 806, 807, 809, 815, 816, 817, 825, 826, 828, 831, 834, 843, 844, 849, 850, 851, 853, 856, 857, 858, 859, 863, 864, 865, 869, 870, 871, 875, 876, 877, 881, 884, 886, 896, 899, 900, 904, 905, 907, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 920, 924, 928, 937, 951, 960, 974, 977, 979, 980, 981, 982, 983, 984, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1014, 1015, 1017, 1018, 1019, 1020, 1023, 1028, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "Its": [110, 266, 270, 371, 389, 412, 417, 539, 924, 999, 1000, 1004, 1009, 1012, 1018, 1023, 1028, 1037, 1051], "NOT": [244, 294, 372, 378, 564, 813, 847, 848], "Nearness": 630, "No": [62, 149, 167, 196, 216, 218, 238, 244, 262, 329, 346, 372, 383, 393, 401, 407, 474, 560, 561, 592, 593, 612, 638, 648, 667, 679, 681, 688, 689, 800, 944, 1000, 1051], "Not": [89, 186, 362, 387, 401, 407, 425, 426, 429, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 469, 470, 471, 472, 473, 474, 475, 476, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 564, 567, 570, 571, 583, 584, 585, 590, 591, 593, 630, 631, 632, 633, 680, 691, 692, 693, 694, 696, 797, 800, 801, 803, 806, 807, 817, 844, 847, 848, 851, 852, 853, 855, 859, 871, 879, 882, 883, 885, 888, 899, 900, 911, 1004, 1010, 1023, 1043], "OF": 372, "ON": 322, "ONE": [369, 609, 610], "OR": [308, 407, 418, 444, 1045], "Of": [49, 63, 65, 180, 282, 362, 377, 407, 415, 994], "On": [44, 52, 53, 56, 64, 101, 104, 105, 116, 117, 126, 135, 138, 140, 142, 147, 151, 152, 155, 158, 160, 162, 173, 174, 185, 186, 187, 194, 198, 200, 212, 214, 238, 239, 240, 241, 243, 244, 247, 248, 249, 250, 251, 253, 255, 258, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 275, 280, 282, 306, 308, 310, 312, 313, 314, 318, 319, 321, 322, 324, 330, 339, 346, 356, 357, 362, 373, 375, 376, 377, 379, 387, 389, 403, 405, 407, 411, 412, 414, 416, 417, 646, 659, 694, 738, 764, 872, 888, 993, 997, 1000, 1003, 1004, 1006, 1010, 1012, 1017, 1019], "One": [2, 44, 49, 52, 62, 67, 83, 89, 126, 128, 144, 147, 150, 151, 182, 185, 188, 191, 201, 214, 225, 237, 248, 258, 262, 268, 275, 278, 285, 294, 297, 309, 324, 334, 336, 351, 357, 362, 372, 375, 388, 389, 401, 406, 407, 410, 412, 413, 414, 415, 416, 418, 444, 449, 472, 474, 478, 513, 567, 634, 642, 661, 669, 671, 676, 678, 679, 680, 791, 810, 811, 835, 836, 837, 868, 869, 880, 911, 966, 994, 996, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1011, 1012, 1014, 1019, 1025, 1026, 1030, 1038, 1040, 1047, 1049], "Or": [350, 357, 411, 412, 880, 1004, 1010, 1018], "Such": [54, 151, 169, 174, 184, 192, 196, 200, 211, 262, 271, 350, 389, 390, 401, 411, 412, 414, 556, 557, 659, 994, 1004, 1007, 1014, 1020, 1044, 1049, 1051], "THE": 372, "That": [53, 65, 121, 135, 150, 165, 185, 200, 237, 268, 272, 351, 352, 363, 369, 377, 383, 389, 406, 411, 416, 417, 443, 446, 447, 558, 565, 595, 821, 915, 916, 993, 1001, 1002, 1010, 1020, 1043, 1044], "The": [2, 16, 26, 28, 31, 32, 34, 38, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 186, 187, 188, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 261, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 283, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 358, 362, 363, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 384, 387, 388, 389, 390, 392, 393, 395, 398, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 427, 429, 430, 432, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 714, 715, 716, 718, 719, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 737, 738, 741, 742, 743, 744, 745, 746, 747, 748, 749, 751, 755, 756, 757, 758, 759, 760, 761, 762, 765, 767, 768, 769, 770, 773, 774, 777, 778, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 923, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 936, 937, 938, 939, 940, 944, 946, 947, 948, 949, 950, 951, 953, 954, 956, 959, 960, 963, 966, 968, 969, 970, 972, 973, 974, 977, 985, 986, 987, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1027, 1028, 1030, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "Their": [185, 370, 372, 390, 407, 647, 1034], "Then": [104, 136, 140, 150, 155, 158, 162, 185, 190, 196, 198, 207, 210, 214, 234, 238, 244, 250, 262, 270, 271, 285, 350, 357, 369, 379, 381, 383, 393, 394, 404, 407, 410, 412, 415, 416, 571, 595, 722, 759, 803, 817, 907, 908, 994, 1003, 1004, 1010, 1019, 1020, 1043], "There": [0, 75, 81, 141, 169, 203, 228, 234, 244, 259, 263, 265, 268, 287, 350, 368, 370, 372, 375, 376, 377, 380, 387, 389, 390, 393, 404, 407, 412, 414, 415, 416, 446, 452, 462, 535, 554, 555, 560, 561, 590, 591, 593, 608, 648, 994, 1000, 1001, 1002, 1003, 1004, 1007, 1011, 1014, 1018, 1019, 1020, 1022, 1027, 1034, 1042, 1053], "These": [11, 18, 26, 33, 39, 44, 45, 47, 65, 85, 121, 123, 140, 143, 182, 186, 200, 203, 210, 211, 212, 238, 262, 285, 288, 292, 306, 308, 315, 316, 321, 329, 331, 358, 362, 363, 368, 371, 372, 375, 377, 379, 382, 384, 387, 389, 393, 398, 401, 404, 405, 406, 407, 410, 412, 414, 415, 416, 417, 442, 446, 448, 499, 509, 510, 516, 539, 568, 569, 604, 605, 671, 679, 680, 702, 709, 736, 781, 797, 803, 806, 807, 809, 817, 826, 828, 829, 830, 831, 832, 834, 852, 853, 872, 946, 993, 995, 998, 1000, 1001, 1004, 1005, 1015, 1017, 1019, 1023, 1034, 1040, 1042, 1043, 1044, 1047, 1051, 1053], "To": [1, 44, 48, 64, 65, 69, 81, 89, 91, 110, 112, 114, 117, 126, 135, 144, 147, 148, 157, 165, 174, 175, 178, 180, 181, 184, 185, 190, 194, 196, 198, 210, 211, 212, 214, 218, 228, 241, 242, 244, 247, 249, 251, 258, 262, 263, 265, 266, 268, 270, 271, 273, 275, 281, 282, 285, 287, 305, 308, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 348, 351, 354, 358, 362, 363, 368, 369, 373, 375, 376, 377, 379, 380, 381, 383, 387, 389, 390, 393, 401, 403, 404, 407, 408, 409, 410, 411, 412, 414, 415, 446, 448, 449, 450, 461, 464, 467, 493, 497, 503, 504, 508, 509, 510, 532, 538, 539, 540, 542, 544, 545, 546, 547, 558, 559, 560, 561, 565, 566, 570, 599, 614, 630, 635, 649, 650, 655, 656, 659, 661, 662, 663, 664, 665, 666, 687, 703, 715, 731, 766, 788, 796, 806, 807, 829, 836, 867, 878, 883, 897, 898, 907, 908, 912, 915, 916, 917, 918, 940, 951, 990, 993, 994, 996, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1010, 1011, 1014, 1018, 1019, 1020, 1028, 1034, 1037, 1039, 1040, 1041, 1043, 1045], "Will": [375, 498, 535, 630, 647, 648, 649, 655, 659, 660, 663, 664, 665, 666, 667, 668, 676, 678, 710, 717, 791, 872, 876, 886, 887, 1037, 1038, 1040, 1042, 1052], "Willing": [1040, 1041], "With": [62, 71, 80, 101, 108, 126, 127, 150, 152, 161, 167, 182, 186, 210, 212, 236, 238, 243, 245, 251, 268, 292, 362, 370, 373, 375, 377, 389, 398, 407, 408, 411, 414, 416, 437, 439, 502, 542, 584, 635, 636, 661, 865, 868, 870, 881, 887, 888, 914, 916, 997, 1000, 1001, 1004, 1005, 1007, 1008, 1011, 1018, 1020, 1025, 1031, 1037, 1041, 1042, 1044, 1046, 1048], "_": [44, 45, 47, 48, 49, 51, 52, 53, 55, 59, 63, 64, 65, 67, 69, 70, 76, 79, 84, 87, 89, 92, 97, 101, 103, 114, 119, 121, 126, 127, 128, 130, 138, 139, 140, 150, 160, 169, 174, 175, 176, 184, 185, 186, 188, 190, 192, 196, 198, 199, 200, 203, 208, 210, 212, 214, 223, 224, 227, 231, 234, 238, 243, 247, 251, 262, 263, 268, 270, 271, 272, 274, 275, 277, 281, 282, 285, 291, 296, 299, 306, 310, 313, 314, 315, 318, 321, 322, 323, 325, 329, 330, 338, 343, 346, 350, 352, 355, 377, 381, 389, 412, 414, 415, 419, 446, 478, 533, 534, 535, 536, 537, 539, 540, 541, 544, 546, 547, 548, 567, 599, 649, 650, 655, 656, 663, 664, 665, 666, 684, 685, 686, 687, 691, 692, 693, 694, 696, 698, 699, 701, 703, 713, 767, 803, 809, 817, 826, 851, 859, 880, 881, 888, 994, 1000, 1001, 1004, 1006, 1007, 1008, 1011, 1012, 1014, 1019, 1020, 1041], "_0": [209, 688, 1000, 1004, 1019], "_1": [320, 343, 409, 412, 415, 532, 538, 539, 541, 546, 547, 548, 649, 650, 655, 656, 657, 658, 659, 663, 664, 665, 666, 684, 685, 686, 687, 769, 1000, 1002, 1004, 1019], "_11": 655, "_2": [113, 174, 343, 412, 415, 532, 538, 546, 547, 649, 655, 1000, 1008, 1018, 1019], "_21": [649, 650, 655, 656, 663, 664, 665, 666, 684, 687], "__": [106, 269, 389, 408, 421, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 583, 584, 585, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 691, 692, 693, 694, 695, 800, 801, 802, 803, 806, 807, 817, 825, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 993, 1042, 1043], "______________________________________________________________________": 329, "________________________________________________________________________________": [51, 88, 350], "__________________________________________________________________________________": 92, "________________________________________________________ward_tre": 88, "_____________________________________________________f_regress": 88, "__add__": [417, 627], "__array__": [1037, 1044], "__array_function__": [1024, 1044], "__c": 377, "__call__": [177, 339, 389, 415, 417, 466, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 940, 969, 1041], "__class__": [180, 210, 212, 244, 247, 270, 310, 350, 351, 352, 382], "__class_weight": 377, "__dataframe__": [562, 563], "__doc__": [79, 108, 174, 256, 389], "__file__": [48, 50, 1047], "__getitem__": 1052, "__getstate__": [1041, 1049], "__init__": [48, 90, 133, 177, 244, 288, 339, 375, 377, 379, 380, 381, 382, 389, 415, 421, 424, 427, 430, 431, 621, 964, 1035, 1040, 1042, 1047, 1048, 1049, 1050], "__init_subclass__": 377, "__len__": 1043, "__main__": [332, 387], "__metadata_request__fit": 244, "__mul__": 624, "__mul___": 417, "__name__": [47, 63, 95, 180, 210, 212, 244, 247, 251, 263, 270, 310, 332, 350, 351, 352, 382, 387, 880], "__pow__": [417, 619], "__repr__": 1043, "__sklearn_clone__": [377, 432, 1050], "__sklearn_is_fitted__": [90, 132, 182, 377, 421, 424, 987, 1025, 1047, 1048], "__sklearn_tags__": [326, 377, 956, 1053], "__version__": [148, 188, 317, 379], "_agglom": 88, "_array_api": 403, "_bag": 942, "_base": 254, "_basehmm": 1034, "_bay": 942, "_birch": 1044, "_breast_cancer_dataset": 165, "_build": 375, "_c_step": 1041, "_cfnode": 442, "_check_bounds_param": 1046, "_check_i": 992, "_check_param_grid": 1040, "_check_sample_weight": 1047, "_check_stop_list": 593, "_check_target": 1041, "_check_x": 1044, "_class": 1004, "_class_cov": 1042, "_class_mean": 1042, "_classif": 306, "_classifier_ha": 90, "_column_transform": [104, 155], "_compon": [241, 537], "_coo": [587, 588], "_count_nonzero_coeffici": 47, "_criterion": 1042, "_csr": 880, "_cython_bla": 376, "_devianc": 1004, "_diabetes_dataset": 165, "_distn_infrastructur": 280, "_doc_link_modul": 377, "_doc_link_templ": 377, "_doc_link_url_param_gener": 377, "_dotbla": 381, "_encod": 1042, "_error": 1004, "_estim": 992, "_estimator_html_repr": 947, "_estimator_typ": [1039, 1053], "_estimator_with_converted_arrai": 403, "_f": [177, 1000], "_featur": [412, 539, 541, 548], "_fit_and_scor": 1042, "_fit_stag": [560, 561], "_fro": [532, 538, 546, 547, 649, 650, 655, 663, 664, 665, 684], "_g": 177, "_gb": 1044, "_generate_center_coordin": 54, "_get_support_mask": 603, "_get_tag": [1045, 1053], "_get_warnings_filters_info_list": 363, "_gpr": 178, "_h": [539, 541, 548], "_hist_gradient_boost": 379, "_i": [405, 414, 995, 1000, 1004, 1008, 1019], "_idx": 389, "_init": 193, "_init_t": 1018, "_initialize_nmf": 381, "_intermediate_coef": 377, "_is_fit": 133, "_iter": 379, "_j": [405, 995], "_k": [409, 998, 1000], "_l": 1004, "_learntselectormixin": 1039, "_level": [417, 628], "_logist": 375, "_loss": [389, 1004, 1052], "_m": 1020, "_mean": 314, "_mean_frequency_by_risk_group": 210, "_method": 963, "_more_tag": [326, 1053], "_my": 375, "_n": [415, 1004], "_n_cluster": 375, "_n_compon": 548, "_n_features_out": 423, "_name_estim": 1044, "_neg": 381, "_newton_cg": 1045, "_nls_subproblem": 381, "_nmf": 381, "_not_in_sphinx": [48, 50], "_num_thread": 363, "_obj": 963, "_openmp_help": 376, "_pairwis": [1044, 1046], "_plain_sgd": 1049, "_plot": [238, 328], "_po": 381, "_posterior_mod": 613, "_preprocess_data": 690, "_pvalu": 1034, "_rand": 358, "_ratio": [539, 541, 548], "_request": [244, 398, 1052, 1053], "_required_paramet": 427, "_reset": 48, "_run_search": 1042, "_safe_index": [2, 1047, 1051, 1052], "_safe_split": 924, "_safe_tag": [1045, 1053], "_sag": 1043, "_sampl": [241, 412, 539, 541, 548], "_samples_gener": 256, "_score": [389, 803, 817, 830, 1004, 1034, 1047], "_search": 1040, "_serial": 244, "_sgd_fast": 1049, "_skip_test": 926, "_spars": 381, "_sparse_fit": 1044, "_std": 314, "_t": 1018, "_test": [218, 310, 363, 377, 1047], "_test_scor": [268, 472, 596, 1047], "_transform_select": 1040, "_tree": [915, 916, 917, 918, 1035, 1037], "_typedef": 376, "_univariate_select": 88, "_validate_data": [326, 1053], "_valu": [417, 616], "_w": [539, 541, 548], "_weight": [54, 228], "_weight_boost": 942, "_weighted_percentil": 1047, "_x_is_even": 964, "_xfail_check": [326, 1053], "a16": [1044, 1045], "a65628": [80, 96], "a674e682c281": 380, "a_": [122, 404, 407, 539, 541, 548, 1000], "a_column": 722, "a_i": 407, "a_mask": 277, "a_n": 404, "a_row": 722, "a_tru": 277, "aaa": 177, "aaaaff": [293, 296], "aaai": [407, 418, 444, 842, 1006], "aact": 177, "aaffaa": 296, "aagaard": 1038, "aakanksha": 1042, "aapl": 52, "aarch64": 383, "aaron": [495, 1000, 1037, 1038, 1039, 1044, 1053], "aarshai": [1041, 1042], "aashil": 1041, "ab": [52, 56, 76, 108, 125, 131, 137, 144, 155, 161, 165, 188, 202, 221, 223, 226, 228, 233, 268, 308, 325, 337, 348, 407, 539, 541, 548, 630, 847, 848, 882, 1004], "ab_mask": 277, "abadi": [1040, 1041], "abandon": 375, "abati": [1049, 1051, 1052, 1053], "abbi": [1044, 1045], "abbrevi": 702, "abdela": 1043, "abdulaziz": [1052, 1053], "abdulelah": 1047, "abdur": 1044, "abenbihi": 1044, "abhi": 1053, "abhijeet": 1036, "abhinav": [1044, 1047], "abhishek": [1037, 1038, 1044, 1048, 1050, 1051], "abhyudai": 1041, "abid": 375, "abil": [49, 53, 95, 112, 147, 168, 169, 170, 174, 176, 178, 180, 182, 184, 185, 187, 210, 214, 228, 237, 350, 364, 393, 414, 415, 417, 614, 625, 628, 785, 786, 787, 790, 791, 1001, 1004, 1007, 1010, 1020, 1025, 1034, 1036, 1041, 1043, 1047, 1048, 1053], "abirami": 407, "abl": [44, 45, 49, 62, 82, 89, 95, 114, 117, 125, 126, 150, 152, 175, 185, 188, 196, 200, 210, 226, 228, 234, 274, 279, 281, 324, 325, 339, 358, 362, 363, 364, 369, 373, 375, 377, 379, 380, 383, 387, 401, 407, 409, 411, 415, 485, 504, 535, 832, 879, 993, 994, 1000, 1003, 1004, 1005, 1010, 1014, 1017, 1020, 1021, 1024, 1040, 1041, 1045, 1052], "ablin": 1049, "abnorm": [224, 237, 294, 338, 370, 493, 564, 853, 1010, 1042], "abo7atm": 1046, "abort": [695, 944], "about": [3, 47, 51, 66, 80, 87, 91, 96, 103, 117, 143, 162, 167, 178, 182, 184, 188, 214, 227, 237, 244, 262, 265, 266, 268, 270, 275, 287, 293, 313, 317, 319, 320, 321, 322, 323, 326, 329, 350, 352, 357, 358, 362, 363, 368, 370, 374, 375, 377, 379, 380, 381, 383, 388, 389, 390, 401, 406, 411, 412, 415, 417, 438, 493, 495, 496, 497, 498, 501, 502, 503, 505, 506, 511, 516, 562, 563, 595, 596, 609, 610, 617, 643, 679, 681, 746, 803, 809, 817, 826, 836, 886, 934, 994, 1000, 1001, 1003, 1005, 1007, 1010, 1011, 1014, 1015, 1017, 1019, 1020, 1023, 1027, 1028, 1039, 1040, 1050, 1052, 1053], "abov": [44, 63, 64, 65, 73, 80, 100, 103, 137, 140, 141, 147, 150, 158, 164, 165, 167, 185, 186, 197, 210, 212, 216, 221, 241, 244, 245, 262, 268, 274, 285, 293, 310, 313, 314, 318, 320, 324, 326, 343, 351, 352, 357, 358, 362, 363, 364, 369, 370, 372, 373, 374, 375, 377, 379, 381, 387, 389, 390, 405, 407, 408, 409, 411, 412, 413, 414, 415, 417, 441, 445, 464, 467, 489, 496, 497, 498, 524, 592, 637, 707, 758, 803, 807, 815, 817, 828, 870, 871, 884, 890, 896, 904, 966, 993, 994, 996, 998, 1000, 1001, 1004, 1007, 1009, 1011, 1014, 1018, 1019, 1020, 1024, 1040, 1052], "abraham": [1034, 1035, 1040, 1044], "abrahamowicz": 1014, "absenc": [237, 271, 389, 715, 870, 1003, 1004], "absent": [389, 405, 415, 732, 757, 828], "absgrad": 1045, "absher": 1036, "absolut": [2, 44, 53, 108, 125, 144, 165, 185, 210, 212, 216, 228, 325, 357, 377, 401, 407, 409, 411, 412, 414, 415, 416, 417, 418, 444, 450, 456, 457, 532, 538, 543, 546, 547, 549, 550, 551, 559, 561, 562, 563, 566, 590, 592, 593, 595, 599, 604, 622, 630, 635, 649, 652, 653, 655, 657, 659, 674, 675, 677, 679, 681, 685, 686, 707, 720, 724, 739, 740, 748, 749, 751, 756, 758, 760, 798, 805, 809, 820, 823, 831, 833, 845, 847, 848, 852, 871, 876, 879, 892, 916, 918, 989, 1000, 1001, 1014, 1018, 1020, 1035, 1040, 1045, 1046, 1047, 1048, 1051], "absolute_error": [53, 414, 559, 561, 563, 566, 674, 916, 918, 1047], "absolute_loss": 1047, "absolutelynowarranti": 1042, "absp": 863, "abstain": 535, "abstract": [389, 412, 417, 621, 772, 1034], "abstractmethod": 1044, "absurd": 1011, "abund": 370, "ac": [531, 667, 688, 689, 1000, 1017], "acad": [692, 696, 1001], "academ": [411, 1028], "academi": [112, 854], "acategorypredict": 395, "acc": 146, "acc_clf1": 70, "acc_clf2": 70, "acc_clf3": 70, "acc_histori": 48, "acc_knn": 297, "acceler": [242, 322, 362, 387, 403, 407, 468, 695, 905, 1001, 1023, 1028, 1043, 1047, 1049, 1051], "accent": [347, 590, 591, 593, 1044], "accept": [165, 169, 244, 262, 265, 317, 325, 326, 339, 350, 352, 358, 362, 363, 369, 375, 377, 384, 387, 388, 389, 390, 398, 403, 407, 415, 437, 441, 444, 445, 448, 461, 464, 467, 509, 510, 556, 557, 562, 563, 570, 571, 583, 584, 595, 596, 599, 631, 638, 642, 646, 649, 650, 655, 656, 682, 730, 745, 781, 800, 801, 802, 806, 807, 825, 849, 850, 857, 858, 867, 871, 931, 933, 934, 937, 992, 1000, 1002, 1004, 1007, 1012, 1014, 1019, 1023, 1024, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "accept_large_spars": [933, 934, 1042], "accept_spars": [871, 933, 934, 1041, 1051], "access": [44, 83, 110, 145, 247, 254, 259, 324, 325, 350, 357, 362, 363, 375, 376, 377, 383, 387, 389, 390, 403, 407, 409, 410, 414, 415, 417, 450, 457, 464, 467, 537, 568, 569, 570, 571, 612, 620, 865, 866, 867, 922, 993, 1000, 1003, 1004, 1010, 1011, 1012, 1018, 1019, 1028, 1034, 1036, 1040, 1041, 1042, 1043, 1046, 1048, 1049, 1050], "acciaro": 1053, "accid": [210, 228], "accident": [1034, 1038, 1043], "accommod": [174, 1042], "accompani": [268, 1042], "accomplish": [244, 405, 547, 1001, 1005, 1007, 1028, 1051], "accord": [2, 56, 62, 64, 73, 83, 110, 141, 146, 165, 170, 210, 228, 241, 317, 343, 351, 358, 375, 377, 387, 388, 389, 390, 401, 404, 405, 407, 409, 411, 412, 414, 415, 417, 437, 450, 452, 456, 460, 462, 465, 469, 505, 517, 518, 519, 526, 531, 533, 536, 537, 539, 541, 551, 554, 555, 562, 563, 564, 567, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 644, 645, 647, 648, 652, 661, 662, 673, 683, 694, 698, 738, 782, 783, 803, 804, 805, 806, 807, 810, 811, 812, 817, 828, 842, 843, 844, 845, 846, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 870, 877, 885, 897, 899, 900, 907, 908, 909, 910, 912, 913, 998, 1000, 1004, 1006, 1007, 1014, 1017, 1018, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "accordingli": [150, 186, 247, 343, 375, 379, 380, 1041, 1042, 1049], "account": [53, 54, 89, 123, 129, 135, 150, 174, 180, 185, 228, 244, 262, 268, 291, 297, 346, 348, 351, 362, 371, 375, 389, 390, 398, 407, 410, 411, 412, 414, 415, 463, 562, 563, 568, 569, 630, 631, 633, 635, 636, 652, 676, 682, 707, 710, 731, 732, 733, 741, 746, 759, 786, 787, 790, 791, 804, 808, 821, 881, 993, 996, 998, 1002, 1004, 1005, 1006, 1007, 1014, 1018, 1020, 1039, 1041, 1042, 1043, 1046, 1047, 1049, 1051, 1052, 1053], "acctactagaagtt": 387, "acctcctagaag": 387, "accumul": [48, 84, 142, 200, 379, 381, 407, 415, 1004, 1035, 1042], "accur": [44, 49, 53, 60, 63, 64, 112, 121, 149, 169, 176, 185, 186, 203, 214, 225, 228, 262, 268, 275, 279, 285, 321, 350, 351, 358, 374, 389, 405, 407, 409, 412, 414, 415, 416, 437, 443, 447, 451, 453, 459, 532, 539, 541, 543, 544, 546, 547, 548, 609, 610, 637, 806, 807, 847, 848, 950, 951, 996, 1001, 1004, 1020, 1048], "accuraci": [2, 31, 38, 44, 46, 47, 48, 63, 67, 68, 69, 70, 103, 104, 105, 106, 135, 141, 142, 145, 146, 153, 161, 162, 164, 170, 188, 190, 203, 210, 214, 218, 225, 226, 255, 266, 267, 268, 269, 270, 272, 274, 282, 285, 290, 296, 297, 298, 306, 310, 313, 323, 328, 329, 331, 339, 342, 343, 346, 358, 362, 388, 389, 406, 407, 411, 414, 415, 416, 424, 437, 449, 469, 471, 472, 478, 533, 535, 542, 550, 551, 552, 554, 556, 558, 559, 560, 562, 565, 566, 568, 570, 613, 637, 661, 662, 669, 671, 674, 677, 678, 679, 695, 700, 706, 711, 714, 716, 721, 735, 736, 737, 741, 746, 757, 766, 790, 797, 799, 802, 825, 831, 834, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 849, 854, 856, 857, 864, 902, 903, 907, 909, 912, 915, 917, 923, 950, 951, 993, 998, 999, 1000, 1001, 1005, 1007, 1008, 1012, 1016, 1018, 1020, 1042, 1043, 1052], "accuracy_histori": 48, "accuracy_multinomi": 203, "accuracy_ovr": 203, "accuracy_scor": [2, 67, 135, 170, 272, 313, 331, 350, 358, 388, 398, 403, 424, 558, 565, 711, 714, 732, 733, 737, 741, 786, 787, 790, 797, 799, 943, 993, 1004, 1035, 1036, 1037, 1046, 1051, 1052], "acf": 144, "achar": [1041, 1042, 1043, 1044], "achiev": [44, 52, 56, 58, 65, 68, 124, 135, 143, 145, 150, 153, 177, 190, 210, 218, 265, 268, 275, 313, 325, 331, 339, 342, 343, 346, 350, 358, 362, 364, 369, 370, 372, 377, 381, 387, 389, 395, 404, 405, 406, 407, 411, 412, 414, 415, 559, 566, 643, 652, 679, 681, 710, 732, 733, 741, 743, 766, 786, 787, 790, 806, 807, 843, 887, 993, 994, 996, 1000, 1004, 1014, 1017, 1019, 1047], "achin": 1028, "achliopta": [241, 900, 901, 1016], "acid": [313, 372], "acknowledg": [374, 611, 1051], "acl": [904, 1017, 1018], "acm": [369, 370, 407, 418, 444, 450, 457, 460, 512, 564, 679, 729, 759, 853, 1004, 1007, 1010, 1016], "acoust": 1004, "acq": 48, "acquaint": 375, "acquir": [54, 270, 1046], "acquisit": [404, 722], "acronym": 379, "across": [0, 2, 15, 44, 53, 89, 95, 101, 116, 127, 141, 185, 200, 205, 231, 263, 265, 268, 277, 281, 282, 288, 308, 313, 343, 376, 377, 384, 389, 401, 405, 407, 411, 414, 415, 416, 419, 437, 440, 450, 452, 454, 457, 460, 462, 469, 472, 474, 488, 491, 493, 496, 498, 504, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 552, 554, 555, 556, 557, 558, 560, 561, 562, 563, 564, 565, 568, 569, 590, 593, 596, 604, 609, 610, 613, 614, 635, 636, 637, 642, 643, 644, 645, 649, 650, 653, 655, 656, 657, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 674, 679, 681, 682, 688, 689, 692, 693, 694, 695, 696, 697, 698, 707, 708, 720, 734, 760, 791, 796, 798, 800, 801, 803, 804, 805, 806, 807, 808, 809, 815, 817, 818, 819, 820, 821, 822, 823, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 852, 856, 863, 864, 865, 872, 876, 877, 884, 885, 887, 888, 896, 899, 900, 902, 903, 907, 908, 909, 912, 915, 916, 950, 951, 974, 977, 993, 1000, 1002, 1004, 1014, 1018, 1020, 1024, 1028, 1034, 1037, 1040, 1041, 1042, 1043, 1044, 1052], "act": [339, 350, 375, 388, 413, 414, 716, 732, 733, 741, 786, 787, 790, 882, 886, 1001, 1004, 1007, 1019, 1042], "action": [320, 350, 374, 378, 379, 393, 406, 1014, 1044], "activ": [53, 69, 85, 182, 218, 253, 259, 269, 327, 328, 352, 369, 370, 373, 375, 376, 381, 383, 387, 389, 390, 393, 394, 398, 408, 497, 503, 527, 635, 638, 640, 653, 654, 656, 657, 658, 666, 667, 668, 685, 686, 687, 688, 689, 716, 721, 800, 863, 864, 865, 903, 969, 1000, 1001, 1002, 1003, 1007, 1008, 1009, 1017, 1025, 1027, 1045], "active_": [653, 654, 657, 658], "active_features_": 1042, "actual": [44, 53, 65, 81, 94, 108, 117, 141, 150, 165, 185, 190, 200, 210, 214, 218, 255, 264, 271, 275, 352, 357, 358, 362, 364, 372, 375, 377, 380, 381, 387, 388, 389, 405, 407, 412, 414, 415, 416, 432, 510, 516, 517, 528, 536, 539, 541, 548, 563, 564, 647, 648, 651, 661, 662, 669, 670, 671, 672, 673, 675, 677, 679, 680, 681, 683, 690, 694, 698, 704, 707, 712, 718, 724, 725, 726, 727, 788, 800, 806, 807, 819, 822, 823, 853, 884, 907, 913, 941, 942, 943, 978, 996, 1003, 1004, 1007, 1011, 1012, 1020, 1027, 1041, 1042, 1048, 1049, 1050], "actual_vs_predict": [44, 108, 155, 185, 264, 322, 704], "actuari": [405, 1004], "ad": [44, 54, 59, 108, 128, 130, 135, 141, 150, 161, 169, 175, 176, 192, 196, 207, 212, 214, 234, 243, 244, 268, 269, 270, 308, 318, 319, 320, 321, 322, 323, 324, 325, 326, 332, 343, 351, 374, 375, 377, 379, 383, 387, 389, 390, 412, 414, 415, 416, 417, 418, 419, 425, 429, 431, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 459, 460, 461, 462, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 505, 506, 511, 513, 515, 523, 524, 528, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 575, 583, 584, 585, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 703, 704, 705, 707, 711, 714, 716, 717, 721, 724, 725, 726, 727, 728, 730, 731, 732, 733, 734, 737, 741, 742, 743, 744, 745, 746, 749, 756, 757, 760, 764, 769, 770, 772, 778, 780, 781, 785, 786, 787, 788, 790, 792, 793, 794, 800, 801, 802, 803, 804, 805, 806, 807, 809, 810, 812, 816, 817, 821, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 893, 896, 897, 899, 900, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 920, 921, 931, 933, 934, 940, 944, 945, 946, 950, 951, 956, 959, 960, 961, 962, 963, 966, 969, 973, 978, 984, 990, 992, 993, 997, 999, 1000, 1001, 1005, 1007, 1008, 1010, 1024, 1028, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "adaboost": [2, 68, 116, 134, 138, 143, 151, 154, 155, 158, 172, 182, 222, 326, 356, 520, 552, 554, 555, 560, 634, 706, 833, 915, 916, 1025, 1026, 1030, 1036], "adaboost_clf": 135, "adaboostclassifi": [2, 68, 137, 143, 398, 414, 555, 560, 562, 942, 1036, 1037, 1040, 1041, 1043, 1044, 1047, 1049, 1050, 1051, 1053], "adaboostregressor": [2, 136, 398, 414, 554, 563, 942, 1036, 1037, 1040, 1043, 1044, 1047, 1049, 1050], "adam": [0, 304, 396, 864, 865, 1008, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "adamgonzo": 1048, "adamson": 1046, "adanhawth": [1042, 1043], "adapt": [87, 89, 135, 146, 147, 253, 254, 262, 343, 363, 374, 375, 384, 407, 414, 417, 516, 517, 518, 519, 679, 680, 681, 864, 865, 1000, 1006, 1008, 1014, 1018, 1023, 1024, 1042, 1043, 1050, 1051], "adarsh": [1051, 1052], "add": [45, 52, 56, 59, 63, 64, 65, 69, 70, 76, 80, 88, 108, 112, 113, 117, 122, 127, 143, 146, 161, 163, 165, 169, 174, 175, 176, 180, 181, 195, 199, 200, 206, 211, 213, 214, 225, 233, 237, 241, 243, 244, 275, 277, 278, 288, 300, 310, 312, 317, 319, 320, 326, 342, 343, 345, 346, 351, 362, 373, 374, 375, 376, 377, 379, 381, 383, 389, 393, 403, 405, 411, 414, 415, 416, 516, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 604, 630, 631, 633, 635, 661, 662, 697, 700, 824, 847, 848, 904, 940, 960, 961, 993, 994, 1003, 1004, 1010, 1014, 1017, 1018, 1024, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "add_2d_scatt": 230, "add_artist": [71, 127, 203, 231, 253, 254, 255, 258, 259], "add_ax": [186, 234, 279], "add_categori": 247, "add_collect": [52, 233, 240], "add_dummy_featur": 2, "add_ind": [155, 181, 630, 631, 633, 994, 1043, 1046, 1050], "add_missing_valu": 181, "add_nois": 175, "add_self_request": [244, 960], "add_subplot": [47, 63, 65, 78, 98, 101, 127, 186, 225, 232, 234, 328, 329, 382], "add_trac": 141, "adddatapointbatch": 288, "addep": 1045, "addison": [592, 733], "addit": [2, 7, 38, 44, 45, 47, 52, 54, 55, 100, 104, 114, 121, 124, 127, 135, 139, 141, 142, 144, 145, 164, 174, 175, 176, 181, 185, 186, 192, 196, 200, 203, 211, 212, 214, 234, 248, 262, 270, 277, 281, 283, 287, 308, 318, 319, 322, 324, 330, 343, 352, 356, 358, 362, 363, 367, 368, 369, 370, 371, 374, 375, 377, 379, 380, 381, 383, 387, 389, 390, 393, 401, 406, 407, 409, 411, 412, 415, 416, 417, 418, 431, 441, 442, 444, 445, 446, 450, 457, 469, 474, 497, 504, 533, 535, 538, 540, 542, 543, 544, 550, 554, 555, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 584, 585, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 612, 614, 615, 622, 631, 633, 634, 638, 641, 642, 643, 644, 645, 646, 647, 648, 673, 690, 691, 695, 701, 702, 705, 745, 761, 762, 791, 795, 800, 801, 809, 826, 836, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 863, 870, 871, 872, 873, 876, 877, 879, 880, 881, 882, 884, 885, 886, 887, 889, 899, 900, 907, 908, 944, 951, 993, 998, 1000, 1004, 1005, 1007, 1008, 1011, 1014, 1016, 1017, 1018, 1019, 1020, 1023, 1030, 1034, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1052, 1053], "addition": [87, 105, 137, 150, 185, 210, 228, 244, 318, 320, 351, 375, 387, 405, 415, 613, 614, 649, 655, 674, 884, 993, 994, 1004, 1012, 1023, 1040, 1051], "additional_nois": 76, "additive_chi2": [623, 641, 768, 777], "additive_chi2_kernel": [2, 403, 641, 762, 768, 996, 1053], "additivechi2sampl": [2, 642, 643, 644, 645, 761, 762, 996, 1048, 1050], "address": [44, 214, 244, 277, 350, 370, 375, 406, 407, 415, 447, 660, 1000, 1001, 1006, 1007, 1008, 1009, 1010, 1014, 1028, 1042], "adeel": 1053, "adelr": 1042, "adequ": [363, 381, 568, 1047], "adeyemi": [1052, 1053], "adher": [2, 362, 377, 389, 944, 946, 1034, 1035], "adien": 1050, "adijohar": 1048, "adil": 1049, "adimension": 185, "adithya": 1039, "aditi": [1052, 1053], "aditya": [1040, 1042, 1043, 1044, 1048, 1049], "adityadaflapurkar": 1042, "adjac": [407, 412, 452, 462, 587, 588, 638, 694, 698, 957, 1001, 1007], "adjacency_matrix": 407, "adjust": [2, 44, 49, 72, 74, 83, 92, 110, 135, 147, 160, 182, 214, 237, 242, 250, 269, 285, 317, 332, 346, 351, 382, 407, 408, 412, 414, 415, 525, 554, 555, 558, 560, 562, 563, 565, 661, 662, 669, 671, 677, 678, 679, 707, 708, 711, 717, 718, 758, 760, 789, 798, 842, 843, 845, 846, 877, 899, 900, 907, 908, 909, 912, 915, 917, 939, 1003, 1004, 1008, 1014, 1025, 1031, 1034, 1040, 1050], "adjusted_mutual_info_scor": [2, 73, 74, 83, 92, 407, 708, 718, 736, 758, 760, 789, 1004, 1034, 1042, 1046, 1050], "adjusted_rand_index": 708, "adjusted_rand_scor": [2, 73, 74, 83, 92, 351, 407, 707, 718, 736, 760, 789, 1004, 1047], "administr": [393, 394], "admir": [1049, 1050], "admiss": [241, 363], "adopt": [377, 379, 387, 389, 903, 1004, 1018, 1042, 1049, 1051], "adoublet": [1049, 1050], "adpot": 323, "adrian": [1047, 1048, 1049], "adrien": 1034, "adrin": [0, 390, 396, 401, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "adrinjalali": [1037, 1046], "adult": [324, 497, 1014], "advanc": [45, 152, 182, 186, 236, 238, 268, 287, 364, 375, 407, 412, 489, 502, 536, 635, 642, 786, 800, 856, 865, 868, 887, 916, 993, 996, 1004, 1007, 1014, 1025, 1028, 1031, 1036], "advani": 1046, "advantag": [44, 45, 75, 89, 91, 121, 126, 148, 210, 211, 237, 254, 269, 287, 321, 325, 358, 389, 405, 411, 412, 415, 417, 441, 445, 460, 535, 591, 652, 677, 678, 766, 835, 836, 837, 867, 868, 907, 908, 909, 910, 911, 912, 913, 993, 996, 999, 1000, 1001, 1004, 1005, 1007, 1008, 1012, 1014, 1018, 1019, 1020, 1037], "advic": [383, 417, 625, 626], "advik": [1051, 1052], "advis": [53, 211, 244, 358, 375, 407, 415, 437, 649, 655, 657, 663, 665, 675, 690, 996, 1000, 1006, 1008, 1019, 1048], "advoc": 1005, "aeberhard": 372, "aesthet": [308, 1020, 1039], "af": 74, "affan": 1040, "affanv14": 1041, "affect": [47, 63, 112, 150, 176, 184, 185, 214, 234, 247, 248, 271, 278, 313, 323, 358, 362, 363, 364, 371, 375, 389, 392, 405, 407, 410, 411, 413, 415, 418, 420, 444, 450, 457, 473, 475, 479, 550, 551, 570, 702, 715, 791, 803, 804, 806, 807, 808, 817, 821, 822, 847, 848, 849, 850, 851, 853, 855, 857, 858, 859, 887, 888, 898, 912, 1003, 1007, 1019, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1052], "affili": 370, "affin": [2, 28, 72, 73, 80, 83, 97, 182, 308, 330, 367, 377, 389, 412, 440, 441, 452, 454, 462, 513, 536, 694, 698, 707, 708, 720, 740, 796, 798, 903, 924, 998, 1001, 1004, 1025, 1029, 1030, 1034, 1035, 1038, 1044, 1045, 1047, 1049], "affinity_matrix": [694, 698], "affinity_matrix_": [440, 452, 694], "affinity_propag": [2, 52, 80], "affinitypropag": [2, 74, 80, 321, 407, 1034, 1037, 1038, 1042, 1045, 1047, 1048, 1049, 1050, 1051], "affirm": 44, "afnlp": 1018, "afor": [899, 900], "aforement": [363, 1005], "afraid": 393, "africa": 1014, "afroj": 1051, "aft": [314, 1037], "aftab": 1043, "after": [44, 56, 59, 60, 64, 81, 87, 89, 103, 104, 108, 113, 123, 135, 145, 150, 153, 155, 158, 161, 165, 174, 176, 178, 180, 185, 190, 203, 204, 210, 247, 248, 251, 256, 268, 277, 287, 288, 296, 298, 308, 309, 312, 313, 350, 351, 364, 370, 372, 374, 375, 377, 379, 381, 382, 383, 387, 389, 401, 403, 404, 405, 407, 408, 411, 412, 415, 416, 419, 442, 447, 450, 451, 452, 453, 456, 462, 516, 533, 537, 551, 554, 555, 560, 561, 562, 563, 599, 630, 633, 661, 662, 669, 670, 671, 676, 678, 679, 680, 681, 695, 715, 729, 759, 797, 800, 801, 806, 807, 856, 863, 867, 880, 886, 907, 912, 913, 928, 993, 994, 998, 1000, 1004, 1008, 1009, 1014, 1016, 1018, 1019, 1020, 1024, 1034, 1037, 1041, 1042, 1045, 1046, 1049, 1052, 1053], "afterward": [59, 375, 379, 536, 542, 831], "ag": [104, 165, 185, 187, 198, 200, 210, 228, 248, 249, 251, 262, 308, 320, 321, 322, 324, 370, 372, 497, 1028], "again": [44, 59, 101, 105, 147, 173, 175, 177, 185, 234, 269, 350, 358, 379, 384, 389, 390, 407, 408, 409, 414, 415, 472, 568, 569, 637, 650, 654, 656, 658, 664, 666, 668, 695, 993, 1000, 1004, 1018, 1031, 1034, 1042, 1051], "against": [65, 73, 117, 130, 138, 148, 160, 190, 202, 203, 219, 227, 228, 244, 277, 314, 317, 339, 370, 375, 390, 401, 405, 407, 411, 415, 438, 510, 543, 549, 552, 679, 681, 758, 760, 791, 805, 810, 812, 832, 836, 969, 996, 1000, 1004, 1005, 1007, 1019, 1022], "agamemnon": [1041, 1042, 1043, 1044, 1046, 1047], "agarw": [1041, 1042, 1044], "agath": 1048, "agc": 177, "agct": 177, "agent": 1028, "agg": 174, "aggfunc": 279, "agglo": [85, 445], "agglom": [2, 52, 72, 73, 78, 80, 82, 90, 96, 101, 182, 231, 233, 328, 329, 407, 441, 445, 503, 694, 781, 860, 1025, 1037], "agglomer": [2, 45, 46, 69, 72, 84, 105, 161, 163, 182, 195, 209, 246, 292, 328, 329, 367, 407, 415, 445, 503, 602, 608, 648, 803, 808, 867, 1025, 1030], "agglomerativeclust": [2, 75, 76, 77, 80, 82, 86, 90, 96, 101, 389, 407, 440, 442, 445, 1037, 1038, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1051], "aggreg": [94, 139, 228, 271, 277, 282, 321, 323, 407, 414, 416, 535, 556, 557, 596, 724, 726, 731, 748, 749, 751, 753, 754, 756, 788, 793, 794, 1005, 1007, 1014, 1050], "aggress": [2, 48, 217, 669, 670, 806, 807, 1026, 1030, 1035], "aggressive_elimin": [806, 807, 993], "agnost": [1003, 1012, 1052], "ago": [52, 379, 1024], "agraw": [1037, 1042, 1048, 1049], "agre": [26, 160, 383, 390, 407, 789], "agreement": [0, 2, 407, 707, 719, 758, 760, 798, 1004], "agricultur": 1000, "aguiar": 416, "agundez": 1042, "ahead": 891, "ahmadi": 1045, "ahmadjubair33": 1048, "ahmedbgh": [1049, 1050], "ahn": 1046, "ahuja": [1041, 1048, 1049], "ai": 411, "ai8rahim": 1037, "aic": [2, 182, 191, 197, 198, 205, 218, 258, 502, 654, 656, 657, 658, 659, 801, 868, 887, 993, 1025, 1034, 1041, 1047, 1048], "aic_criterion": 198, "aid": [265, 407, 795, 796, 1001, 1028, 1034, 1046], "aidan": 1042, "aidar": 1048, "aig": 52, "aiko": 1049, "aim": [53, 59, 113, 150, 181, 214, 262, 296, 326, 330, 343, 364, 370, 373, 375, 389, 401, 407, 409, 415, 448, 1000, 1004, 1007, 1014, 1019, 1023, 1048, 1053], "air": [174, 767], "airport": 767, "airspe": 375, "aisha": [1052, 1053], "aishgrt1": 1042, "aishwarya": 1042, "aishwaryark": 1041, "aistat": 1017, "aivision2020": 1041, "aj": [495, 1048], "ak": [405, 1048, 1049], "aka": [2, 46, 303, 350, 387, 415, 452, 537, 539, 541, 545, 548, 583, 584, 618, 625, 654, 655, 657, 658, 659, 661, 662, 665, 669, 670, 671, 673, 679, 680, 681, 744, 874, 878, 880, 1000, 1008, 1018, 1036, 1048], "akai": 1047, "akaik": [198, 200, 258, 659, 801, 993, 1000], "akanksha": 1053, "akash": [1042, 1052], "aki": [1048, 1049, 1050], "akihiro": [1052, 1053], "akin": [44, 211, 389], "akinkunl": 1044, "akitti": 1039, "akshai": [1038, 1041, 1046], "akshay0724": 1041, "akshayah3": 1038, "akshita": 1049, "al": [0, 2, 51, 110, 111, 135, 149, 198, 301, 370, 372, 404, 407, 409, 412, 414, 415, 416, 451, 499, 520, 521, 529, 536, 542, 545, 564, 685, 686, 722, 723, 842, 844, 864, 865, 900, 950, 951, 1000, 1001, 1004, 1010, 1014, 1016, 1019, 1020, 1042, 1047, 1050, 1051], "ala": [1049, 1050], "aladago": 1044, "alam": [1049, 1050], "alan": [1041, 1042, 1045, 1047, 1048, 1052], "alastuei": 1037, "albeit": 63, "albert": [0, 365, 1041, 1042, 1043, 1046, 1047], "alberto": [1043, 1047, 1048, 1052, 1053], "alcalin": 372, "alcohol": [313, 372], "alcorn": 1042, "aldrian": 1038, "aleator": 53, "alec": 1044, "alejandro": [1035, 1040, 1051], "alek": [1047, 1048], "aleksandr": 1041, "aleksandra": 1045, "alemagnani": 1037, "alert": 1041, "alessandro": [1044, 1046, 1049], "alessia": 1047, "alex": [401, 415, 1019, 1034, 1037, 1042, 1044, 1045, 1046, 1048, 1049, 1050, 1051], "alexand": [0, 397, 407, 412, 536, 873, 1036, 1037, 1038, 1040, 1041, 1042, 1046, 1047, 1048, 1051], "alexandercbooth": 1041, "alexandr": [0, 121, 390, 396, 397, 1028, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051], "alexandracraciun": 1046, "alexandru": 439, "alexanmv": 1048, "alexei": 1039, "alexfield": 1040, "alexgoryainov": 1044, "alexi": [1034, 1037, 1038, 1041, 1051, 1052], "alexl": [1050, 1051], "alexqiao": [1052, 1053], "alexryndin": 1042, "alexshack": [1044, 1045, 1046], "alfalfa": 58, "alfano": 1041, "alfaro": [0, 365, 1045, 1046, 1047, 1048, 1049], "alfr": 0, "algebra": [363, 373, 378, 387, 412, 415, 462, 873, 1014], "algesheim": 407, "algo": [79, 130], "algo_param": [80, 96], "algorithm": [2, 6, 8, 9, 11, 18, 29, 31, 33, 34, 39, 40, 42, 49, 54, 56, 57, 66, 72, 73, 78, 79, 81, 84, 90, 91, 92, 93, 94, 95, 96, 100, 101, 103, 111, 112, 116, 121, 123, 135, 136, 141, 151, 182, 190, 199, 200, 213, 224, 226, 232, 234, 236, 240, 241, 247, 254, 255, 256, 259, 265, 268, 277, 288, 294, 295, 297, 301, 308, 310, 313, 317, 318, 319, 322, 323, 324, 330, 332, 338, 350, 351, 352, 358, 362, 364, 368, 369, 370, 371, 372, 375, 376, 377, 378, 383, 384, 388, 389, 392, 403, 404, 407, 409, 410, 411, 412, 414, 415, 417, 418, 419, 420, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 469, 474, 475, 478, 482, 483, 484, 488, 504, 512, 513, 514, 515, 516, 523, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 545, 546, 547, 548, 549, 554, 555, 556, 557, 560, 561, 564, 593, 605, 606, 613, 614, 638, 640, 642, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 677, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 707, 708, 711, 720, 722, 738, 740, 746, 777, 781, 782, 796, 798, 800, 801, 835, 844, 845, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 863, 868, 872, 874, 887, 891, 903, 907, 908, 909, 910, 911, 912, 913, 915, 916, 933, 950, 951, 953, 968, 972, 978, 994, 996, 999, 1001, 1002, 1003, 1004, 1006, 1009, 1010, 1014, 1017, 1018, 1019, 1022, 1023, 1024, 1025, 1026, 1028, 1030, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "algorithm_nam": 79, "ali": [1039, 1042, 1043, 1046, 1047, 1049, 1050, 1051], "alia": [53, 244, 376, 383, 389, 398, 437, 443, 444, 447, 449, 465, 482, 483, 484, 534, 537, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 592, 613, 614, 620, 638, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 693, 802, 804, 805, 810, 812, 821, 825, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 852, 854, 857, 858, 864, 865, 867, 870, 872, 873, 874, 879, 886, 887, 902, 903, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 977, 1010, 1024, 1034, 1048], "alias": [81, 82, 244, 373, 375, 378, 398, 599, 1034, 1038, 1048, 1053], "aliased_sample_weight": 244, "align": [71, 148, 150, 181, 230, 253, 279, 352, 389, 692, 696, 996, 1004, 1007, 1018, 1029, 1030, 1050, 1051], "alihan": [1047, 1053], "alik": [412, 1002], "alin": 1047, "alison": 1041, "all": [0, 2, 4, 31, 44, 45, 47, 48, 51, 54, 58, 62, 63, 65, 71, 74, 75, 76, 78, 79, 86, 87, 88, 89, 94, 98, 108, 114, 121, 123, 124, 133, 140, 141, 143, 147, 150, 157, 158, 165, 174, 175, 177, 182, 184, 185, 186, 188, 192, 196, 197, 203, 204, 205, 210, 211, 212, 213, 214, 219, 221, 225, 227, 228, 230, 231, 237, 243, 244, 247, 248, 251, 254, 256, 258, 262, 266, 269, 270, 271, 272, 274, 275, 276, 278, 280, 281, 285, 288, 291, 293, 305, 308, 309, 313, 317, 318, 319, 320, 322, 323, 324, 325, 326, 328, 330, 331, 332, 336, 339, 343, 344, 346, 347, 350, 351, 352, 355, 357, 358, 362, 363, 364, 368, 370, 371, 372, 373, 375, 377, 379, 380, 381, 383, 384, 387, 388, 389, 390, 394, 398, 401, 403, 404, 405, 406, 407, 408, 411, 412, 414, 415, 416, 417, 418, 419, 421, 422, 424, 425, 426, 427, 429, 430, 431, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 504, 509, 510, 516, 528, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 585, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 690, 691, 692, 693, 694, 695, 696, 697, 700, 701, 702, 703, 704, 705, 708, 712, 716, 717, 718, 719, 720, 721, 723, 724, 726, 729, 731, 732, 733, 735, 736, 738, 739, 740, 741, 745, 748, 749, 751, 753, 754, 756, 759, 764, 772, 777, 781, 784, 785, 786, 787, 788, 789, 790, 791, 793, 794, 796, 797, 798, 800, 801, 803, 804, 805, 806, 807, 809, 810, 812, 813, 815, 817, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 891, 899, 900, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 920, 921, 922, 923, 929, 931, 933, 934, 935, 939, 941, 942, 943, 945, 957, 960, 966, 978, 987, 992, 993, 994, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1011, 1012, 1014, 1017, 1018, 1019, 1020, 1023, 1024, 1025, 1027, 1028, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1052, 1053], "all_class": 48, "all_displai": [2, 384, 1049], "all_estim": [2, 384, 1044, 1045, 1049], "all_funct": [2, 384, 1049], "all_handl": 203, "all_label": [203, 904], "all_model": 147, "all_or_ani": [987, 1044], "all_scor": 736, "all_split": [44, 53], "all_uppercas": 415, "allan": [350, 405, 1046], "allclos": [122, 152, 1016], "allefeld": 1047, "allen": [322, 1037, 1039, 1041, 1044], "allend": [1045, 1047], "allevi": [91, 150, 192, 196, 407, 1006], "allison": 322, "alloc": [2, 43, 46, 63, 95, 182, 280, 319, 371, 375, 376, 407, 415, 443, 447, 459, 488, 537, 539, 541, 586, 590, 593, 649, 655, 663, 665, 806, 807, 809, 826, 831, 834, 993, 1014, 1023, 1025, 1029, 1030, 1038, 1039, 1044, 1045, 1051, 1053], "allow": [26, 44, 59, 90, 92, 107, 108, 125, 126, 127, 138, 139, 145, 153, 167, 169, 174, 175, 176, 178, 199, 203, 205, 210, 214, 228, 231, 238, 241, 248, 250, 251, 253, 262, 268, 281, 282, 287, 317, 318, 319, 320, 322, 325, 326, 343, 344, 350, 357, 358, 362, 369, 370, 375, 376, 377, 379, 382, 383, 384, 387, 389, 390, 398, 401, 405, 406, 407, 408, 410, 411, 412, 414, 415, 416, 417, 418, 437, 443, 444, 446, 447, 449, 464, 465, 466, 467, 482, 483, 484, 497, 524, 525, 534, 535, 537, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 584, 585, 591, 592, 595, 596, 599, 605, 613, 614, 618, 630, 631, 633, 637, 638, 641, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 691, 693, 695, 702, 745, 765, 768, 777, 781, 784, 795, 796, 800, 801, 802, 803, 804, 805, 806, 807, 810, 812, 814, 817, 821, 824, 825, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 852, 853, 854, 857, 858, 862, 864, 865, 867, 869, 870, 872, 873, 874, 879, 886, 887, 891, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 931, 933, 934, 946, 967, 993, 994, 996, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1014, 1016, 1017, 1018, 1019, 1020, 1023, 1024, 1028, 1031, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "allow_nan": [924, 932, 934, 1050], "allow_nd": [933, 934], "allow_non": 714, "allow_single_clust": [80, 446], "allow_unlabel": [119, 245, 524], "allowed_extens": 504, "allwein": 285, "almeida": [1035, 1036, 1047], "almeidayoel": 1048, "almer": 1041, "almost": [44, 71, 141, 146, 212, 218, 244, 247, 262, 283, 313, 325, 331, 358, 368, 370, 379, 381, 387, 388, 389, 398, 407, 411, 412, 470, 471, 472, 473, 475, 476, 477, 800, 993, 999, 1000, 1003, 1004, 1019, 1042, 1047], "almubarak": [1047, 1048], "alon": [185, 214, 274, 339, 389, 405, 651, 672, 683, 1041, 1043], "along": [2, 52, 54, 90, 93, 100, 117, 142, 147, 150, 174, 199, 210, 242, 244, 272, 317, 351, 352, 358, 370, 375, 379, 383, 384, 389, 393, 398, 401, 404, 412, 414, 415, 416, 419, 534, 551, 589, 614, 615, 633, 649, 650, 653, 654, 655, 656, 657, 658, 659, 663, 664, 665, 666, 679, 681, 684, 685, 686, 687, 688, 689, 782, 783, 795, 803, 817, 876, 877, 880, 881, 884, 885, 886, 887, 892, 893, 894, 896, 897, 898, 929, 953, 978, 984, 993, 1000, 1007, 1014, 1017, 1028, 1034, 1039, 1040, 1042, 1046, 1047], "alongsid": [375, 381, 389, 393, 416, 828, 829, 830, 831, 832, 834, 1004, 1011, 1023, 1024], "alonso": [1045, 1047], "aloqe": [1052, 1053], "alpaydin": 372, "alpha": [2, 44, 45, 47, 48, 50, 52, 53, 54, 56, 62, 64, 68, 71, 73, 76, 78, 86, 90, 94, 99, 108, 114, 117, 121, 123, 124, 126, 129, 130, 135, 137, 138, 143, 147, 150, 151, 152, 154, 155, 156, 165, 169, 172, 174, 175, 176, 177, 178, 180, 181, 185, 192, 193, 194, 195, 196, 197, 198, 199, 200, 203, 205, 206, 208, 210, 211, 212, 214, 215, 219, 222, 223, 228, 230, 231, 234, 242, 243, 250, 253, 268, 269, 270, 271, 272, 275, 276, 278, 280, 281, 287, 288, 291, 293, 296, 298, 303, 305, 308, 309, 310, 311, 313, 315, 318, 320, 321, 324, 330, 332, 336, 337, 340, 341, 343, 344, 346, 347, 348, 350, 362, 370, 377, 381, 387, 409, 410, 412, 414, 416, 417, 419, 446, 471, 472, 478, 528, 532, 534, 536, 537, 538, 539, 540, 541, 543, 544, 546, 547, 548, 549, 561, 597, 598, 600, 614, 616, 618, 619, 626, 634, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 663, 664, 665, 666, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 683, 684, 685, 686, 687, 690, 726, 751, 842, 843, 844, 846, 864, 865, 903, 915, 916, 917, 918, 993, 1000, 1004, 1006, 1008, 1012, 1017, 1018, 1019, 1020, 1031, 1034, 1036, 1037, 1038, 1039, 1041, 1042, 1046, 1047, 1048, 1049, 1050, 1052, 1053], "alpha_": [44, 114, 185, 193, 198, 200, 472, 614, 647, 648, 650, 654, 656, 658, 659, 664, 666, 676, 678, 1000, 1020, 1034, 1041], "alpha_1": [647, 648, 1000], "alpha_2": [647, 648, 1000], "alpha_a": 200, "alpha_b": 200, "alpha_bound": [178, 626], "alpha_h": [55, 412, 539, 541, 548, 1047], "alpha_i": [1006, 1019], "alpha_init": [193, 648, 1000, 1044], "alpha_max": [649, 650, 655, 656, 663, 664, 665, 666, 684, 687], "alpha_min": [649, 650, 653, 655, 656, 657, 659, 663, 664, 665, 666, 684, 685, 686, 687], "alpha_per_target": [676, 1046], "alpha_w": [55, 412, 539, 541, 548, 1047], "alphabet": [105, 389, 725, 744], "alphalpha": 58, "alphanumer": [389, 590, 591, 593], "alphas_": [198, 200, 650, 653, 654, 656, 657, 658, 659, 664, 666, 685, 686, 1034, 1037, 1047], "alphas_enet": 199, "alphas_lar": 199, "alphas_lasso": 199, "alphas_positive_enet": 199, "alphas_positive_lar": 199, "alphas_positive_lasso": 199, "alphavantag": 52, "alphonsu": 1044, "alreadi": [2, 44, 46, 50, 89, 92, 126, 127, 135, 150, 155, 165, 185, 238, 245, 247, 250, 262, 269, 275, 288, 320, 323, 375, 376, 377, 380, 387, 389, 405, 406, 409, 411, 413, 414, 419, 437, 492, 500, 524, 534, 568, 569, 637, 649, 652, 667, 668, 669, 670, 671, 677, 679, 680, 681, 688, 689, 771, 781, 842, 862, 870, 876, 877, 879, 884, 904, 907, 908, 936, 962, 993, 996, 1010, 1014, 1015, 1024, 1031, 1035, 1039, 1042, 1046, 1047, 1048, 1049, 1053], "alsadi": 1042, "alsaedi": 1047, "alsalhi": [0, 1037, 1038], "alsawadi": 1047, "also": [0, 2, 26, 31, 44, 47, 51, 53, 56, 58, 59, 62, 63, 64, 65, 69, 81, 87, 91, 92, 94, 98, 103, 104, 110, 112, 116, 117, 121, 128, 130, 135, 138, 141, 144, 145, 146, 147, 148, 150, 153, 155, 161, 162, 163, 165, 169, 171, 174, 181, 182, 185, 186, 187, 188, 190, 193, 194, 200, 203, 204, 210, 211, 212, 214, 215, 219, 227, 228, 230, 240, 242, 244, 247, 248, 259, 262, 266, 268, 269, 270, 271, 273, 274, 275, 277, 278, 279, 281, 282, 285, 287, 288, 296, 299, 300, 301, 303, 308, 309, 310, 312, 313, 317, 318, 319, 320, 324, 325, 326, 333, 335, 336, 337, 339, 341, 343, 350, 351, 352, 354, 355, 356, 357, 358, 362, 363, 364, 368, 369, 370, 371, 372, 373, 374, 375, 377, 379, 381, 383, 384, 387, 388, 389, 390, 393, 395, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 437, 438, 439, 441, 442, 445, 446, 447, 448, 450, 452, 454, 462, 463, 465, 467, 473, 475, 482, 484, 493, 497, 499, 504, 509, 533, 534, 536, 537, 542, 547, 550, 552, 554, 555, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 609, 610, 611, 612, 613, 614, 625, 635, 636, 638, 646, 647, 648, 649, 650, 653, 655, 656, 657, 659, 661, 662, 663, 664, 665, 666, 667, 675, 679, 681, 684, 685, 687, 690, 694, 697, 698, 702, 713, 716, 726, 732, 733, 741, 746, 766, 782, 783, 786, 787, 790, 800, 801, 803, 805, 806, 807, 817, 820, 823, 829, 830, 831, 832, 833, 834, 836, 846, 849, 850, 851, 853, 854, 855, 857, 858, 859, 863, 864, 865, 867, 869, 870, 875, 876, 880, 884, 887, 892, 896, 909, 912, 915, 916, 917, 918, 924, 933, 944, 951, 953, 960, 967, 993, 994, 996, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1014, 1015, 1017, 1018, 1019, 1020, 1023, 1024, 1028, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "alt": [58, 269, 332, 350, 351, 352, 370, 383, 488], "altai": 1044, "alter": [63, 181, 377, 389, 732, 733, 741, 786, 787, 790, 1039, 1043, 1046], "altern": [44, 64, 104, 117, 142, 148, 150, 155, 187, 196, 210, 228, 238, 256, 259, 262, 277, 317, 343, 350, 351, 352, 358, 370, 373, 375, 379, 381, 387, 389, 390, 393, 401, 402, 404, 405, 407, 408, 409, 411, 412, 414, 415, 417, 441, 442, 445, 446, 447, 452, 458, 463, 500, 539, 541, 542, 548, 554, 555, 558, 559, 560, 561, 565, 566, 567, 584, 590, 591, 593, 620, 623, 646, 695, 709, 711, 774, 777, 781, 784, 805, 836, 871, 877, 880, 893, 900, 902, 915, 916, 917, 918, 970, 998, 1000, 1001, 1003, 1004, 1007, 1008, 1012, 1014, 1016, 1017, 1019, 1020, 1024, 1030, 1039, 1041, 1047, 1048, 1052, 1053], "alternate_sign": [48, 415, 584, 591, 1041], "although": [44, 49, 63, 142, 155, 184, 228, 237, 255, 287, 343, 358, 364, 377, 379, 383, 389, 407, 408, 412, 415, 497, 878, 1003, 1005, 1006, 1007, 1010, 1020, 1034, 1042, 1049], "altman": [631, 994], "altogeth": [144, 381, 1042], "alva": 1044, "alvaro": [1040, 1042], "alvin": 1042, "alwai": [141, 144, 147, 185, 192, 210, 228, 235, 241, 262, 271, 274, 278, 315, 336, 343, 346, 351, 358, 362, 363, 369, 373, 375, 376, 377, 381, 383, 388, 389, 393, 401, 405, 407, 408, 411, 414, 415, 416, 417, 424, 430, 443, 449, 464, 465, 467, 469, 482, 483, 484, 488, 497, 509, 510, 545, 550, 552, 553, 555, 557, 559, 560, 561, 562, 563, 565, 566, 569, 571, 583, 590, 591, 593, 596, 614, 630, 631, 633, 635, 636, 638, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 673, 674, 675, 676, 679, 681, 682, 698, 708, 712, 718, 724, 725, 726, 727, 735, 737, 738, 742, 785, 788, 789, 800, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 840, 841, 850, 851, 858, 859, 865, 872, 880, 885, 887, 890, 892, 893, 894, 895, 896, 897, 898, 900, 908, 909, 910, 912, 913, 915, 916, 918, 952, 962, 963, 993, 994, 996, 998, 1000, 1003, 1004, 1007, 1010, 1012, 1016, 1017, 1019, 1020, 1028, 1034, 1036, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1051, 1052], "always_accept_polici": 262, "always_reject_polici": 262, "alyssa": [1037, 1041], "alyssaq": 1040, "am": [103, 108, 112, 155, 186, 350, 380, 409, 474, 494, 1041], "amai": 1050, "aman": [1040, 1041, 1042, 1048, 1049], "amanda": [1042, 1045, 1046, 1047, 1048], "amar": [1048, 1049, 1050, 1052], "amax": 110, "amazon": 52, "amber": 389, "ambient": 234, "ambigu": [269, 380, 415, 573, 715, 951, 1007, 1043, 1045, 1047], "ambival": 94, "ambrosio": 1041, "ambroz": [1044, 1045], "amelia": 994, "amen": [381, 387, 417, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 993], "america": [51, 52, 112, 301, 370, 854, 1014], "american": [51, 52, 103, 113, 370, 407, 409, 413, 414, 415, 469, 474, 734, 887, 1004], "amerr": [1052, 1053], "ames_h": 247, "amg": [81, 100, 407, 452, 462, 694, 698, 1044, 1048, 1049], "amherst": 370, "ami": [73, 83, 92, 407, 707], "amicel": [1034, 1037], "amin": 110, "aminaka": 1038, "amit": [1034, 1048, 1049], "amlan": 1040, "amo": 1037, "amol": 1047, "among": [2, 65, 127, 177, 186, 188, 190, 210, 258, 275, 287, 357, 364, 370, 377, 389, 390, 405, 410, 447, 449, 513, 520, 797, 832, 850, 855, 857, 909, 912, 915, 916, 917, 918, 993, 996, 1004, 1005, 1011, 1014, 1019, 1020, 1034, 1040, 1041, 1044, 1051], "amongst": [52, 1020], "amor": [0, 386, 1048, 1049, 1050, 1051, 1052, 1053], "amormachin": 1037, "amort": 1007, "amount": [38, 39, 48, 52, 87, 100, 110, 113, 121, 125, 136, 138, 175, 185, 196, 214, 228, 242, 262, 281, 319, 325, 326, 328, 331, 333, 339, 346, 352, 362, 363, 364, 377, 387, 407, 409, 412, 414, 415, 416, 443, 454, 469, 539, 540, 542, 544, 564, 598, 649, 650, 653, 654, 655, 656, 657, 658, 659, 663, 664, 665, 666, 668, 684, 687, 695, 806, 807, 847, 848, 853, 888, 903, 904, 917, 918, 993, 999, 1000, 1003, 1006, 1008, 1014, 1016, 1017, 1018, 1019, 1047, 1051], "amount_fraud": 262, "amount_iter": 331, "amount_label": 331, "amount_test": 262, "amount_train": 262, "amourav": 1043, "amplitud": [147, 174, 176, 205, 1000], "amplitude_nois": 76, "amput": 1024, "amrcod": 1048, "amsterdam": [401, 875, 1015], "amy12xx": 1046, "amzn": 52, "an": [0, 2, 26, 30, 38, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 60, 63, 64, 65, 70, 71, 72, 73, 75, 76, 77, 79, 80, 81, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 100, 101, 103, 104, 105, 106, 108, 110, 111, 112, 113, 121, 122, 123, 124, 125, 126, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 147, 148, 150, 151, 152, 153, 154, 155, 158, 161, 165, 167, 169, 170, 171, 174, 175, 176, 178, 179, 180, 182, 184, 185, 186, 187, 190, 191, 192, 193, 196, 198, 199, 206, 207, 210, 211, 212, 214, 215, 217, 218, 224, 226, 227, 228, 230, 231, 232, 233, 235, 237, 238, 240, 241, 242, 243, 244, 245, 247, 251, 253, 254, 256, 258, 259, 261, 262, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 277, 279, 281, 287, 288, 291, 294, 295, 296, 299, 301, 308, 313, 314, 315, 318, 319, 320, 322, 323, 324, 325, 329, 333, 335, 336, 338, 339, 341, 342, 343, 350, 351, 352, 354, 357, 358, 362, 364, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 388, 389, 390, 392, 393, 398, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 428, 431, 432, 435, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 482, 483, 484, 485, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 502, 504, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 576, 577, 578, 582, 583, 584, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 608, 609, 610, 612, 613, 614, 615, 622, 625, 626, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 712, 714, 715, 721, 723, 724, 730, 732, 733, 737, 738, 740, 745, 746, 748, 749, 751, 753, 754, 756, 759, 761, 762, 766, 767, 769, 770, 771, 772, 773, 776, 778, 779, 780, 781, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 814, 815, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 920, 922, 923, 924, 925, 930, 931, 933, 934, 936, 937, 940, 944, 945, 946, 947, 949, 950, 951, 953, 955, 956, 959, 960, 961, 962, 963, 964, 966, 967, 968, 973, 974, 977, 978, 984, 987, 989, 990, 991, 992, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1027, 1028, 1030, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "ana": [1045, 1047, 1052], "anaconda": [0, 363, 373, 379], "anak": 1046, "analog": [44, 58, 149, 381, 414, 1004, 1005, 1019, 1043], "analogi": [1003, 1004], "analys": [230, 357, 412, 806, 807, 1001, 1023, 1028], "analysen": 450, "analysi": [2, 12, 28, 45, 47, 49, 50, 55, 56, 59, 63, 66, 72, 91, 97, 99, 110, 111, 112, 113, 114, 119, 120, 122, 123, 125, 126, 129, 144, 181, 182, 185, 200, 219, 231, 252, 254, 255, 258, 259, 261, 262, 265, 268, 269, 273, 274, 279, 288, 289, 290, 291, 299, 300, 308, 313, 346, 351, 355, 367, 370, 372, 375, 377, 390, 404, 407, 409, 414, 415, 419, 439, 447, 448, 473, 475, 476, 482, 483, 485, 503, 505, 513, 516, 532, 533, 534, 535, 536, 538, 540, 541, 542, 543, 544, 545, 546, 547, 550, 551, 556, 557, 634, 641, 691, 693, 694, 695, 696, 713, 722, 728, 729, 759, 791, 792, 795, 796, 800, 803, 829, 833, 849, 856, 867, 868, 873, 883, 887, 895, 922, 950, 951, 994, 1000, 1001, 1003, 1004, 1014, 1022, 1023, 1025, 1026, 1028, 1029, 1030, 1034, 1035, 1036, 1038, 1043], "analyst": 870, "analyt": [126, 412, 417, 533, 623, 711, 994, 998, 1004, 1022, 1028], "analyz": [44, 47, 56, 196, 270, 277, 322, 350, 352, 380, 381, 407, 415, 504, 590, 591, 593, 791, 1001, 1004, 1011, 1012, 1020, 1034, 1043], "anam": 1051, "anand": [1042, 1046], "ananiad": 1018, "anantharam": 1048, "anavelyz": 1047, "ana\u00ebl": 1044, "anbari": 529, "anchor": 279, "ander": [1038, 1044], "andersen": [746, 1048], "anderson": [51, 301, 370, 499, 1040, 1046, 1052], "andi": [1034, 1041], "ando": 1039, "andr": [1041, 1048], "andrea": [0, 390, 396, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "andreh7": 1041, "andrei": [1049, 1051, 1052], "andrew": [407, 462, 694, 698, 720, 740, 798, 882, 1008, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "andrewww": 1042, "andrii": 1048, "andriushchenko": [1040, 1041], "androutsopoulo": [842, 1006], "andrzej": [539, 541, 548], "andr\u00e1": [1047, 1048, 1049, 1050], "andr\u00e9": [1047, 1048, 1050, 1053], "ands": 878, "andyscanzio": 1051, "ang": 1041, "angel": [0, 397], "angela": [1044, 1045, 1049], "angelaambroz": 1045, "angelotti": 1053, "angermuel": [1038, 1039], "angl": [2, 54, 71, 124, 165, 253, 254, 255, 258, 259, 372, 412, 532, 538, 540, 543, 544, 546, 547, 549, 653, 654, 655, 656, 657, 658, 659, 666, 667, 668, 681, 685, 686, 687, 688, 689, 695, 1001, 1002, 1026, 1030, 1034], "angmar": 58, "angu": [1041, 1042, 1048], "angular": [413, 695, 767], "anh": [539, 541, 548], "ani": [2, 26, 38, 44, 48, 49, 53, 54, 58, 80, 81, 89, 91, 101, 152, 160, 165, 175, 176, 184, 185, 186, 187, 188, 200, 210, 214, 228, 237, 240, 241, 244, 254, 258, 259, 262, 268, 269, 271, 274, 277, 285, 301, 308, 309, 312, 317, 319, 320, 322, 325, 339, 343, 352, 358, 362, 363, 364, 369, 370, 372, 373, 375, 377, 379, 380, 381, 383, 388, 389, 390, 393, 395, 398, 401, 403, 404, 405, 407, 408, 411, 412, 413, 414, 415, 416, 432, 440, 441, 446, 448, 449, 450, 452, 454, 456, 457, 461, 464, 467, 488, 489, 509, 510, 524, 535, 538, 540, 547, 552, 558, 559, 560, 561, 565, 566, 567, 568, 569, 570, 571, 581, 582, 584, 590, 591, 593, 595, 605, 613, 614, 623, 630, 635, 636, 648, 651, 661, 662, 669, 670, 671, 672, 679, 680, 681, 682, 683, 695, 699, 702, 703, 707, 719, 720, 722, 727, 739, 740, 755, 758, 760, 777, 781, 782, 783, 784, 795, 796, 798, 803, 806, 807, 815, 816, 836, 839, 847, 848, 853, 857, 866, 867, 871, 872, 876, 878, 880, 881, 888, 897, 898, 901, 904, 907, 908, 915, 916, 917, 918, 919, 921, 929, 933, 934, 944, 973, 987, 993, 994, 996, 999, 1000, 1001, 1004, 1005, 1006, 1007, 1010, 1011, 1012, 1014, 1016, 1017, 1018, 1019, 1020, 1023, 1027, 1035, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "aniket": [1049, 1051], "anil": [407, 452, 462], "anim": [350, 415], "anirban": 415, "aniruddha": [1042, 1053], "anish": [1039, 1040], "anisha": 1044, "aniso": [80, 96], "anisotrop": [91, 171, 417, 620, 622, 625], "anisotropicli": [80, 96], "anjirbag": 1042, "ankan": 1039, "ankerst": [407, 450, 457], "ankit": [1037, 1044, 1046, 1048], "ankit810": 1045, "ankita": 1042, "ankur": [1039, 1050], "ann": [1034, 1046, 1048], "anna": 1042, "annaayzenshtat": 1042, "annal": [165, 196, 198, 372, 414, 474, 517, 518, 519, 560, 561, 659, 1000], "annau": 1047, "annegnx": 1050, "anno": [695, 1001], "annoi": 363, "annot": [2, 44, 49, 64, 157, 163, 190, 231, 272, 275, 350, 375, 376, 377, 407, 719, 921, 1004, 1020, 1043], "annotationbbox": 231, "announc": [0, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 379], "annual": [372, 407, 729, 759, 904, 1004, 1017], "anomali": [14, 49, 112, 151, 182, 224, 236, 247, 294, 295, 370, 469, 513, 523, 564, 642, 680, 853, 868, 911, 1010, 1023, 1025, 1040, 1041], "anomaly_algorithm": 237, "anomaly_frac": 247, "anoth": [44, 73, 121, 126, 135, 145, 149, 165, 169, 177, 181, 185, 200, 214, 218, 235, 237, 244, 248, 254, 262, 268, 270, 271, 274, 278, 282, 298, 350, 352, 354, 358, 362, 364, 369, 370, 373, 375, 377, 381, 387, 389, 401, 404, 407, 411, 412, 414, 415, 416, 418, 442, 444, 452, 455, 462, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 509, 539, 541, 548, 676, 679, 695, 712, 722, 809, 825, 826, 866, 867, 888, 993, 994, 999, 1000, 1001, 1004, 1005, 1007, 1010, 1014, 1018, 1019, 1043, 1044, 1051], "anova": [2, 50, 88, 107, 159, 161, 164, 165, 182, 190, 334, 408, 445, 505, 516, 594, 597, 598, 600, 601, 602, 606, 607, 608, 611, 716, 829, 833, 867, 868, 887, 907, 912, 1019, 1025], "anova__percentil": [88, 342], "anova_filt": 162, "anova_svm": 162, "ansam": 1050, "answer": [184, 268, 375, 387, 401, 406, 729, 759, 1004, 1028], "ant": [721, 757, 1004], "anthoni": [1039, 1041, 1042], "anthony22": [1049, 1050], "anti": [196, 358, 608, 842, 1006], "anti_alias": [81, 82], "anticip": 53, "antoin": [1034, 1036, 1037, 1038, 1041, 1053], "antoinebak": 1053, "antoni": [1038, 1040, 1046, 1049, 1053], "antonin": 1041, "antonio": [1042, 1044], "anubhav": 1042, "anuja": 1044, "anulekh": 1049, "anupam": [901, 1016, 1049], "anurag": 1053, "any_method": 963, "anymor": [150, 187, 210, 270, 317, 318, 339, 358, 379, 408, 427, 673, 1040, 1043, 1046, 1047, 1048, 1050, 1051, 1053], "anyon": [375, 390, 406, 1027, 1028], "anyth": [352, 381, 389, 398, 408, 411, 963, 967, 1048], "anywai": [49, 350, 377, 668, 688, 689], "anywher": 309, "anz": 1035, "aoif": [711, 1004], "ap": [2, 275, 710, 711, 1004], "apart": [185, 320, 339, 387, 389, 398, 408, 410, 416, 728, 1019, 1028, 1042], "api": [0, 52, 84, 90, 132, 140, 182, 236, 238, 244, 248, 249, 265, 270, 277, 278, 288, 324, 325, 351, 352, 364, 368, 369, 375, 378, 379, 384, 385, 387, 388, 390, 393, 401, 402, 406, 412, 414, 415, 417, 421, 424, 425, 426, 429, 431, 438, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 464, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 497, 505, 509, 511, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 564, 565, 567, 568, 569, 570, 571, 581, 582, 583, 584, 585, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 612, 614, 630, 631, 632, 633, 638, 641, 642, 643, 644, 645, 661, 674, 680, 691, 692, 693, 694, 695, 705, 800, 801, 806, 807, 809, 826, 833, 851, 853, 855, 856, 859, 863, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 905, 911, 912, 926, 944, 946, 969, 987, 990, 993, 1002, 1003, 1007, 1014, 1018, 1023, 1024, 1025, 1028, 1030, 1031, 1032, 1033, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050], "api_refer": 375, "apk": 393, "apolog": 1004, "apostolo": 1049, "appar": [116, 1006, 1028], "appdata": 393, "appeal": 390, "appear": [0, 48, 81, 138, 185, 188, 263, 265, 266, 294, 295, 303, 305, 309, 329, 343, 350, 351, 352, 370, 373, 375, 380, 389, 409, 412, 488, 489, 556, 568, 569, 581, 613, 630, 631, 633, 700, 703, 705, 715, 719, 721, 785, 792, 804, 821, 842, 843, 844, 845, 846, 909, 912, 953, 1000, 1006, 1010, 1034, 1042, 1046, 1047], "append": [47, 48, 49, 52, 53, 56, 63, 70, 73, 76, 80, 84, 95, 104, 128, 138, 139, 141, 145, 147, 150, 181, 188, 204, 214, 215, 217, 218, 225, 228, 242, 243, 268, 271, 277, 278, 303, 304, 314, 331, 339, 342, 350, 351, 352, 354, 357, 381, 389, 408, 415, 661, 662, 907, 908, 914, 940, 1014], "appendix": [648, 679, 1000, 1014], "appl": [52, 362, 373, 387, 1005], "appli": [2, 33, 49, 55, 58, 63, 65, 69, 76, 80, 81, 82, 89, 90, 92, 96, 104, 108, 117, 121, 122, 127, 129, 131, 140, 141, 145, 147, 161, 169, 185, 187, 196, 200, 203, 214, 215, 224, 230, 231, 232, 237, 242, 244, 268, 269, 271, 280, 281, 282, 287, 297, 308, 312, 313, 318, 339, 343, 352, 357, 358, 362, 367, 375, 377, 379, 383, 387, 388, 389, 398, 404, 405, 407, 408, 409, 411, 412, 414, 415, 416, 417, 419, 440, 446, 452, 462, 464, 465, 467, 469, 474, 482, 483, 484, 485, 509, 510, 517, 518, 519, 525, 532, 533, 534, 535, 536, 538, 540, 542, 543, 544, 549, 550, 551, 554, 555, 558, 559, 560, 561, 565, 566, 567, 590, 591, 592, 593, 630, 635, 636, 641, 642, 644, 645, 661, 662, 671, 679, 680, 681, 694, 702, 704, 710, 714, 729, 759, 761, 762, 784, 791, 795, 796, 803, 817, 833, 836, 842, 843, 844, 845, 846, 854, 856, 866, 867, 876, 883, 884, 887, 892, 893, 895, 896, 897, 898, 903, 914, 915, 916, 917, 918, 928, 933, 939, 942, 950, 951, 975, 994, 996, 1000, 1001, 1002, 1003, 1004, 1006, 1008, 1010, 1012, 1014, 1018, 1019, 1020, 1021, 1022, 1028, 1035, 1038, 1039, 1040, 1041, 1042, 1045, 1046, 1048], "applic": [43, 45, 58, 83, 89, 112, 182, 190, 210, 227, 232, 261, 262, 271, 308, 325, 362, 364, 370, 372, 375, 381, 384, 387, 389, 405, 406, 407, 411, 412, 413, 414, 417, 419, 444, 446, 452, 497, 533, 534, 535, 554, 555, 632, 691, 692, 693, 697, 715, 732, 733, 741, 786, 787, 790, 833, 927, 993, 1000, 1001, 1002, 1003, 1004, 1008, 1010, 1016, 1020, 1023, 1024, 1025, 1027, 1028, 1034, 1035, 1040, 1042, 1045], "applical": 377, "apply_along_axi": 306, "appr": 622, "appreci": [0, 375, 387], "approach": [45, 48, 92, 97, 100, 125, 165, 169, 180, 185, 188, 195, 198, 203, 210, 212, 218, 228, 230, 262, 277, 285, 314, 343, 350, 351, 352, 364, 374, 375, 381, 384, 389, 393, 395, 401, 405, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 437, 443, 446, 448, 452, 462, 521, 533, 584, 591, 614, 638, 661, 662, 677, 678, 836, 852, 951, 993, 994, 1000, 1001, 1004, 1005, 1007, 1008, 1014, 1018, 1019, 1022, 1023, 1028, 1038, 1050], "appropri": [26, 89, 91, 128, 174, 185, 214, 244, 277, 282, 325, 354, 358, 375, 377, 383, 389, 401, 405, 407, 411, 413, 414, 418, 444, 450, 457, 489, 490, 491, 497, 501, 502, 503, 505, 506, 511, 579, 584, 593, 594, 597, 598, 600, 601, 602, 675, 677, 690, 712, 849, 850, 851, 853, 855, 857, 858, 859, 987, 1000, 1003, 1004, 1014, 1038, 1041, 1047, 1050, 1052, 1053], "approv": [375, 390, 414], "approx": [65, 121, 242, 412, 414, 415, 1004, 1011, 1018], "approxim": [0, 2, 24, 44, 45, 65, 70, 81, 87, 112, 125, 126, 130, 139, 146, 147, 165, 170, 185, 193, 210, 211, 224, 228, 232, 235, 236, 237, 240, 243, 259, 268, 273, 283, 289, 290, 297, 308, 310, 311, 313, 317, 320, 350, 352, 356, 358, 367, 372, 384, 387, 389, 404, 405, 408, 410, 411, 412, 414, 417, 419, 420, 421, 431, 449, 469, 470, 473, 474, 475, 476, 482, 483, 484, 491, 497, 503, 522, 525, 534, 535, 536, 537, 539, 540, 541, 542, 544, 545, 546, 547, 548, 560, 561, 584, 591, 613, 614, 622, 641, 642, 643, 644, 645, 648, 660, 661, 662, 675, 677, 679, 680, 682, 690, 695, 761, 762, 767, 800, 804, 821, 828, 832, 833, 847, 848, 851, 855, 857, 858, 859, 863, 867, 868, 873, 877, 879, 880, 884, 896, 907, 912, 913, 950, 951, 977, 997, 998, 999, 1000, 1001, 1003, 1007, 1008, 1009, 1010, 1011, 1012, 1016, 1018, 1019, 1020, 1023, 1025, 1030, 1034, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048], "approximate_nearest_neighbor": [288, 1025], "approximateident": 1035, "april": [370, 667, 688, 689, 1004, 1038, 1046, 1051], "apriori": 228, "apt": [373, 383, 393], "aptitud": 185, "aqua": 277, "aquantitypredict": 395, "ar": [0, 2, 16, 26, 31, 32, 33, 38, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 69, 71, 73, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 96, 98, 100, 103, 104, 105, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 123, 126, 127, 128, 131, 133, 135, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 153, 154, 155, 156, 157, 161, 162, 164, 165, 167, 169, 173, 174, 175, 176, 177, 178, 180, 181, 184, 185, 186, 187, 188, 190, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 204, 205, 206, 207, 210, 211, 212, 214, 219, 221, 228, 230, 231, 232, 233, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 251, 254, 255, 256, 258, 261, 263, 265, 266, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 290, 293, 294, 298, 301, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 321, 322, 323, 324, 325, 326, 328, 330, 331, 332, 333, 337, 339, 341, 343, 346, 347, 350, 351, 352, 354, 356, 357, 358, 362, 363, 364, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 388, 389, 390, 393, 395, 398, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 423, 427, 428, 431, 432, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 482, 483, 484, 485, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 509, 510, 511, 513, 516, 517, 518, 519, 520, 521, 524, 525, 529, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 699, 700, 701, 702, 703, 704, 705, 707, 708, 710, 712, 714, 715, 716, 718, 719, 720, 721, 723, 724, 725, 726, 728, 729, 730, 731, 732, 733, 734, 737, 738, 739, 740, 741, 743, 744, 745, 746, 748, 749, 751, 753, 754, 756, 757, 759, 760, 764, 765, 766, 768, 770, 771, 772, 776, 777, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 809, 810, 812, 815, 817, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 892, 893, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 920, 921, 922, 923, 925, 929, 930, 931, 933, 934, 937, 938, 939, 942, 944, 945, 946, 950, 951, 952, 955, 956, 957, 959, 960, 963, 966, 967, 969, 974, 977, 978, 982, 983, 984, 987, 989, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1027, 1028, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "arab": 630, "arabi": [407, 708, 718, 789], "aradwad": 1045, "arafat": 1040, "arai": 1044, "arang": [44, 51, 53, 54, 76, 92, 94, 99, 106, 111, 112, 128, 131, 143, 144, 146, 148, 149, 153, 157, 161, 169, 171, 176, 177, 180, 181, 188, 196, 210, 213, 215, 219, 233, 240, 242, 263, 268, 271, 276, 279, 287, 288, 301, 303, 310, 320, 328, 329, 331, 333, 339, 345, 350, 352, 356, 357, 358, 387, 404, 411, 415, 465, 545, 833, 882, 886, 999, 1000, 1008, 1014, 1018], "aravindh": 1049, "arbitarili": 350, "arbitrari": [2, 44, 53, 89, 117, 121, 122, 123, 140, 167, 176, 192, 210, 227, 228, 266, 308, 312, 314, 319, 325, 326, 350, 357, 375, 387, 389, 401, 408, 411, 412, 414, 415, 419, 446, 450, 455, 457, 465, 533, 534, 560, 561, 583, 642, 651, 672, 683, 691, 745, 792, 804, 805, 810, 812, 847, 848, 849, 850, 851, 853, 855, 857, 858, 859, 860, 861, 871, 873, 886, 993, 995, 996, 1000, 1001, 1004, 1007, 1014, 1024, 1034, 1035, 1038, 1040, 1041, 1042, 1044, 1048, 1050, 1053], "arbitrarili": [170, 254, 259, 350, 389, 417, 430, 465, 482, 483, 484, 553, 555, 557, 559, 561, 563, 566, 569, 571, 614, 638, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 664, 665, 666, 667, 668, 670, 672, 673, 675, 676, 681, 682, 683, 724, 725, 726, 727, 749, 788, 792, 840, 841, 850, 858, 865, 888, 908, 910, 913, 916, 918, 1004, 1007, 1014, 1020], "arc": [372, 414], "archana": [1044, 1046], "archit": 1040, "architectur": [373, 377, 383, 387, 393, 401, 468, 905, 1008, 1028, 1034, 1051], "archiv": [48, 285, 369, 370, 372, 373, 407, 442, 501, 503, 511, 674, 761, 762, 1002, 1019], "archive_filenam": 48, "archive_path": 48, "archive_sha256": 48, "arci": [711, 1004], "arcidiacono": [1048, 1049, 1051, 1052], "arcsin": [702, 767], "arctan": [71, 254, 259, 371, 519], "arctan2": [253, 255, 258], "ard": [2, 192, 647, 648], "ard_poli": 192, "ard_scor": 192, "ardregress": [2, 192, 196, 648, 942, 1000, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1050, 1051], "area": [2, 51, 53, 151, 165, 210, 228, 247, 265, 268, 275, 277, 278, 339, 343, 344, 347, 372, 375, 379, 387, 407, 415, 705, 709, 710, 711, 791, 792, 1001, 1004, 1007, 1022, 1036], "aren": [16, 244, 350, 370, 379, 393, 729, 759, 1009, 1044, 1046], "arezki": 1034, "arfa": 1040, "arff": [322, 375, 497, 1046, 1049, 1050], "arg": [244, 304, 343, 376, 389, 412, 414, 421, 612, 702, 871, 969, 1000, 1006, 1007], "arg_sort_bi": 53, "argentina": 767, "argmax": [64, 128, 267, 281, 377, 414, 570, 835, 915, 1019, 1047], "argmin": [52, 146, 267, 377, 409, 532, 538, 546, 547, 688, 782, 783, 1020], "argpartit": 1041, "argsort": [55, 56, 58, 59, 60, 146, 148, 187, 188, 210, 228, 317, 328, 329, 350, 351, 370, 1012], "argument": [2, 105, 148, 188, 211, 238, 241, 244, 317, 363, 369, 370, 375, 376, 377, 380, 381, 383, 384, 387, 389, 407, 408, 411, 412, 414, 416, 418, 419, 421, 425, 429, 438, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 454, 457, 459, 461, 463, 464, 468, 469, 494, 497, 504, 509, 534, 536, 537, 539, 541, 552, 560, 561, 564, 568, 569, 570, 571, 579, 583, 584, 590, 591, 593, 612, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 634, 642, 646, 649, 650, 653, 654, 655, 656, 657, 658, 659, 663, 664, 665, 666, 669, 671, 679, 680, 684, 687, 691, 695, 699, 701, 702, 703, 704, 705, 717, 722, 738, 745, 766, 782, 783, 809, 826, 828, 829, 830, 831, 832, 834, 835, 836, 839, 849, 850, 851, 853, 855, 856, 857, 858, 859, 860, 861, 864, 867, 868, 871, 905, 911, 921, 931, 940, 946, 970, 972, 973, 987, 993, 996, 1000, 1001, 1002, 1004, 1007, 1011, 1012, 1019, 1020, 1034, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1046, 1048, 1049, 1050, 1051, 1052, 1053], "argv": 241, "ari": [73, 92, 351, 407, 708, 1039, 1045], "aria": [1042, 1043, 1049], "aric": 56, "arida": [1043, 1044, 1046, 1048, 1051], "ariel": [46, 370, 1034, 1040], "arif": [1052, 1053], "ariga": 1040, "arik": 1042, "arima": 1023, "aris": [2, 185, 271, 346, 363, 380, 383, 407, 718, 1000, 1001, 1046], "arisa": [1048, 1049], "arithmet": [243, 381, 383, 407, 552, 651, 672, 683, 707, 720, 739, 740, 760, 798, 854, 1004, 1042], "ari\u00f1o": 1037, "arjona": 1043, "arka204": [1047, 1049], "arm": [373, 375, 383, 993], "arm64": [373, 378], "arm64v8": 383, "armstrong": 1046, "arnaud": [0, 397, 1035, 1036, 1037, 1038, 1039, 1040, 1052], "arnaudov": [1046, 1048], "arnaudstiegl": 1044, "arnold": [1034, 1035], "arnoldi": [691, 692, 696], "aroma": 314, "arora": [1042, 1049], "around": [0, 44, 64, 73, 86, 116, 135, 138, 147, 175, 186, 190, 203, 244, 247, 262, 271, 282, 306, 328, 330, 331, 339, 342, 343, 350, 351, 352, 357, 358, 370, 372, 375, 381, 387, 395, 406, 407, 411, 412, 415, 471, 472, 516, 545, 623, 643, 652, 671, 707, 745, 800, 809, 826, 853, 855, 857, 858, 859, 887, 1000, 1001, 1003, 1004, 1010, 1014, 1018, 1023, 1024, 1027, 1028, 1038, 1039], "aroyan": 1053, "arpack": [52, 58, 80, 81, 100, 103, 231, 324, 412, 451, 452, 453, 462, 536, 542, 545, 691, 692, 694, 696, 698, 1001, 1040, 1041, 1046, 1050, 1051, 1052], "arpanchowdhri": 1044, "arr": 325, "arrai": [2, 46, 47, 48, 50, 51, 52, 53, 54, 58, 69, 70, 71, 76, 80, 81, 87, 88, 95, 96, 98, 103, 105, 113, 116, 119, 122, 123, 146, 148, 150, 151, 154, 157, 162, 165, 170, 171, 172, 177, 185, 192, 194, 196, 204, 205, 210, 211, 217, 227, 231, 232, 237, 241, 244, 247, 248, 251, 253, 254, 255, 257, 258, 262, 263, 264, 266, 268, 269, 272, 273, 277, 287, 301, 311, 317, 320, 321, 323, 324, 329, 335, 342, 343, 350, 356, 358, 362, 363, 368, 369, 370, 375, 376, 377, 378, 380, 381, 383, 385, 387, 388, 389, 401, 404, 406, 407, 408, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 490, 491, 493, 494, 495, 497, 498, 499, 501, 502, 503, 504, 505, 507, 509, 510, 511, 512, 513, 514, 516, 520, 524, 525, 528, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 583, 584, 585, 586, 588, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 737, 738, 739, 740, 741, 742, 743, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 924, 926, 929, 930, 931, 932, 933, 934, 935, 938, 939, 949, 950, 951, 952, 953, 955, 957, 958, 965, 966, 967, 972, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 989, 990, 992, 994, 999, 1000, 1002, 1004, 1005, 1007, 1008, 1010, 1011, 1014, 1015, 1016, 1018, 1019, 1020, 1022, 1028, 1030, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "arrang": [2, 59, 287, 635, 838, 839, 840, 841, 1004], "array_api": [403, 1053], "array_api_compat": [403, 1053], "array_api_dispatch": [403, 468, 905], "array_api_support": [403, 926], "array_convert": 934, "array_equ": [570, 1041], "array_lik": 949, "array_paramet": 375, "array_sym": 989, "arrayfunc": [2, 384, 930], "arrow": [64, 395, 1048], "arrow_arg": 49, "arrowprop": [49, 64], "arrowstyl": 49, "arroyo": 1048, "art": [319, 381, 652, 695, 1028], "artem": [1038, 1041, 1051], "arth": 1048, "arthur": [407, 447, 460, 1039, 1040, 1041, 1042, 1043, 1046, 1048, 1053], "arthurdbrn": 1053, "arthurmello": 1048, "articl": [0, 56, 103, 350, 370, 374, 375, 383, 411, 420, 475, 708, 1000, 1004, 1047], "artiem": 1042, "artifact": [44, 54, 81, 82, 308, 364, 379, 1030], "artifici": [10, 142, 144, 152, 165, 181, 214, 230, 243, 262, 306, 350, 370, 371, 372, 380, 404, 407, 411, 412, 536, 699, 837, 864, 865, 997, 1001, 1003, 1005, 1011, 1016, 1020, 1024, 1028, 1034], "artist": [238, 382, 438, 635, 701, 703, 704, 705, 809, 826, 921], "artsiom": 1041, "artsion": 1040, "artstein": 719, "artur": [1049, 1050], "arturo": [0, 386, 1048, 1049, 1050, 1051, 1052, 1053], "arturoamor": 1048, "aruku": [1042, 1043], "arunav": 1045, "arunava": 1042, "arxiv": [375, 462], "arya": 1042, "as_dict": 377, "as_float_arrai": [2, 384, 1053], "as_fram": [44, 45, 104, 108, 127, 141, 144, 150, 155, 174, 185, 186, 187, 188, 198, 200, 210, 218, 226, 228, 247, 251, 262, 282, 285, 288, 291, 305, 313, 314, 317, 319, 321, 322, 369, 370, 489, 490, 491, 493, 497, 501, 502, 503, 505, 506, 511, 1044, 1045, 1046, 1047, 1050], "asanyarrai": 377, "asarrai": [48, 56, 210, 228, 306, 330, 350, 351, 377, 389, 403, 729, 759, 855, 857, 858, 859, 1014, 1019, 1051], "ascend": [59, 104, 187, 314, 414, 450, 456, 596, 630, 638, 919, 920, 921, 1018, 1044, 1050], "ascent": [174, 417], "ascii": [51, 301, 415, 487, 590, 591, 593], "ascontiguousarrai": 542, "asctim": 121, "asdict": 377, "aseem": 1041, "asgd": [217, 1018], "ash": [49, 372, 1037, 1040], "ashah002": [1049, 1050, 1051], "ashim": 1044, "ashimb9": 1044, "ashimin": 1047, "ashish": [1047, 1050], "ashra": 647, "ashutosh": [1041, 1042, 1044, 1046], "ashvith": 1047, "ashwin": [1049, 1050], "asia": [268, 1014], "asian": 415, "asid": [145, 218, 401, 560, 561, 562, 563, 669, 670, 671, 679, 681, 864, 865], "asish": [1040, 1041], "ask": [0, 180, 181, 268, 374, 375, 379, 380, 383, 389, 390, 401, 416, 849, 850, 851, 853, 855, 857, 858, 859, 1027, 1050], "asnt": 1040, "aspect": [47, 92, 117, 121, 173, 186, 230, 237, 277, 282, 297, 362, 363, 364, 375, 389, 390, 407, 491, 661, 662, 993, 1004, 1020, 1028, 1051], "aspir": [165, 372, 375], "ass": [112, 113, 409, 474], "assembl": [287, 315, 352, 867], "assert": [48, 56, 122, 241, 268, 277, 363, 378, 1024], "assert_all_finit": [2, 362, 384, 468, 1053], "assert_allclos": 377, "assert_array_equ": 415, "assert_warn": 1047, "assert_warns_messag": 1047, "assertionerror": 1041, "assess": [45, 53, 73, 94, 135, 145, 147, 185, 210, 228, 247, 264, 265, 267, 271, 405, 414, 704, 746, 1003, 1004, 1010, 1024, 1049], "assia": 1043, "assiaben": 1043, "assign": [48, 56, 59, 71, 73, 81, 83, 91, 92, 94, 135, 140, 151, 153, 161, 163, 171, 223, 228, 237, 242, 245, 262, 303, 310, 315, 325, 333, 346, 351, 370, 375, 377, 389, 404, 411, 412, 414, 415, 416, 417, 440, 441, 442, 443, 445, 446, 447, 448, 449, 452, 454, 456, 459, 460, 461, 462, 516, 537, 562, 563, 595, 596, 609, 610, 613, 661, 662, 669, 670, 671, 679, 680, 681, 707, 708, 718, 719, 720, 722, 723, 732, 733, 734, 741, 742, 746, 758, 760, 786, 787, 789, 790, 796, 797, 798, 803, 806, 807, 809, 812, 817, 826, 828, 829, 830, 831, 834, 851, 857, 859, 860, 861, 874, 902, 903, 907, 908, 909, 910, 911, 912, 913, 998, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1014, 1017, 1028, 1034, 1039, 1041, 1042, 1051, 1052], "assign_label": [81, 407, 452, 462], "assist": [0, 375, 387, 406, 1014, 1027, 1028], "associ": [51, 62, 63, 112, 135, 169, 184, 185, 214, 256, 262, 314, 328, 330, 350, 383, 407, 409, 411, 412, 414, 415, 425, 446, 449, 469, 470, 471, 472, 473, 474, 475, 476, 494, 495, 496, 525, 558, 562, 565, 607, 608, 633, 648, 661, 662, 669, 671, 677, 678, 679, 692, 698, 702, 734, 742, 825, 830, 850, 858, 872, 884, 896, 904, 913, 915, 917, 939, 1003, 1004, 1007, 1014, 1017, 1028, 1034, 1046, 1050], "assum": [49, 71, 89, 91, 176, 181, 184, 185, 200, 210, 228, 237, 240, 247, 259, 268, 277, 308, 346, 352, 363, 374, 375, 377, 381, 387, 388, 389, 392, 401, 404, 405, 407, 409, 411, 412, 414, 415, 417, 418, 423, 428, 439, 444, 446, 450, 457, 463, 469, 470, 471, 472, 473, 474, 475, 476, 504, 509, 510, 533, 543, 549, 550, 562, 563, 568, 569, 589, 590, 591, 593, 623, 635, 646, 647, 649, 650, 655, 661, 662, 663, 664, 665, 669, 670, 671, 674, 675, 679, 680, 681, 684, 688, 690, 691, 695, 712, 725, 729, 738, 744, 759, 767, 772, 777, 781, 784, 803, 806, 807, 817, 843, 849, 850, 853, 855, 857, 858, 863, 874, 887, 963, 979, 980, 981, 994, 998, 1000, 1002, 1003, 1004, 1006, 1007, 1009, 1010, 1011, 1014, 1018, 1020, 1040, 1046], "assume_cent": [70, 111, 409, 420, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480], "assume_finit": [362, 363, 468, 905], "assumpt": [33, 44, 49, 53, 63, 65, 72, 79, 110, 111, 124, 174, 178, 182, 184, 210, 212, 237, 264, 287, 308, 381, 387, 388, 392, 405, 407, 409, 411, 412, 415, 417, 447, 451, 453, 488, 504, 513, 533, 535, 542, 653, 657, 801, 803, 806, 807, 817, 844, 899, 900, 998, 1000, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1014, 1017, 1020, 1025, 1041, 1047], "assur": [0, 389, 800, 801, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "astel": 1042, "astolfi": 1034, "astrai": 389, "astroml": 1023, "astronom": 1022, "astronomi": 1023, "astropi": 375, "astyp": [44, 54, 73, 77, 80, 87, 94, 96, 100, 113, 144, 146, 184, 186, 201, 202, 228, 233, 243, 247, 262, 279, 288, 315, 401, 415, 994, 1000, 1041], "asv": 375, "asv_benchmark": 375, "aswathavicki": [1052, 1053], "asymmetr": [147, 212, 389, 1039], "asymmetri": [212, 350], "asymptot": [110, 111, 200, 362, 409, 474, 537, 733, 1000, 1003, 1044], "atag": 177, "atanasoska": 1053, "atariah": 1043, "ateif": 1047, "atharva": 1048, "atheism": [58, 269, 332, 350, 351, 352, 370, 488], "atheist": 350, "athena": 1028, "ation": 415, "atla": [362, 373], "atleast_2d": [147, 377], "atmospher": 174, "atol": [377, 675, 677, 847, 848, 852], "atom": [124, 130, 412, 532, 538, 540, 543, 544, 546, 547, 656, 666, 687, 1000, 1034, 1047], "atomic_benchmark": 50, "atomic_benchmark_estim": 50, "atomic_runtim": 50, "atsushi": [1046, 1047], "attach": [48, 350, 432, 852, 1035, 1045], "attack": [247, 370], "attalla": 1048, "attard": 1047, "attempt": [44, 88, 186, 216, 263, 350, 362, 374, 389, 407, 411, 419, 446, 450, 457, 464, 468, 634, 691, 692, 696, 821, 849, 850, 851, 853, 855, 857, 858, 859, 885, 887, 905, 933, 934, 1000, 1001, 1007, 1020, 1041, 1046, 1051], "attenberg": 415, "attent": [375, 383, 609, 610, 1018], "attenu": 169, "attia": 800, "attr": [48, 90], "attract": [418, 444, 998, 1007, 1023], "attractador": [1041, 1042], "attrgett": [595, 599], "attribut": [2, 48, 63, 69, 83, 104, 129, 133, 135, 142, 145, 161, 165, 210, 218, 244, 258, 266, 267, 272, 280, 297, 301, 320, 343, 352, 357, 364, 368, 369, 370, 372, 375, 378, 382, 387, 401, 404, 405, 407, 408, 409, 410, 412, 414, 415, 416, 417, 422, 423, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 508, 511, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 581, 582, 583, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 612, 613, 614, 620, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 691, 692, 693, 694, 695, 700, 701, 703, 704, 705, 739, 798, 800, 801, 802, 803, 806, 807, 809, 817, 825, 826, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 921, 922, 924, 964, 987, 992, 996, 998, 1000, 1005, 1007, 1008, 1010, 1014, 1017, 1018, 1019, 1020, 1028, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "attributeerror": [408, 560, 579, 964, 1043, 1044, 1046, 1050, 1051], "attrselect": 1034, "atukorala": 1049, "atuo": [1050, 1051], "aubert": 1041, "auc": [2, 51, 63, 165, 210, 228, 247, 265, 268, 272, 275, 277, 278, 324, 405, 705, 711, 791, 1004, 1039, 1042, 1046], "auc_scor": [1034, 1036], "audio": [369, 504], "audrei": [1052, 1053], "aufarkari": 1048, "aug": 1019, "augment": [2, 331, 633, 889, 1012, 1028], "augspurg": [1042, 1044], "august": [165, 372, 407, 512, 535, 1019, 1034, 1036, 1037, 1041, 1048], "aura": 1046, "aurelienmorgan": 1053, "auroc": 1004, "aur\u00e9lien": [1041, 1042, 1043, 1047, 1048], "austin": [1041, 1053], "australian": [150, 393], "author": [0, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 184, 185, 186, 187, 188, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 317, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 369, 375, 378, 383, 387, 389, 390, 411, 451, 535, 874, 996, 1023, 1037], "authorit": 390, "authorship": 379, "auto": [58, 70, 91, 92, 119, 165, 173, 230, 235, 249, 288, 291, 296, 317, 318, 319, 320, 321, 322, 325, 335, 336, 342, 345, 352, 369, 370, 377, 414, 417, 418, 437, 441, 444, 445, 446, 447, 449, 450, 452, 455, 456, 457, 459, 462, 497, 509, 510, 536, 539, 541, 542, 545, 548, 550, 558, 559, 562, 563, 564, 565, 566, 568, 595, 596, 599, 604, 609, 610, 632, 634, 635, 636, 638, 649, 650, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 675, 676, 677, 683, 684, 685, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 701, 703, 705, 802, 806, 807, 825, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 864, 865, 880, 881, 888, 899, 900, 904, 907, 908, 909, 910, 911, 912, 913, 917, 918, 950, 951, 969, 972, 995, 998, 1000, 1001, 1007, 1014, 1023, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "auto_examples_jupyt": 182, "auto_examples_python": 182, "auto_viml": 1046, "auto_wrap_output_kei": 377, "autoclass": 372, "autocorrel": 411, "autolabel": 48, "autom": [269, 326, 378, 379, 393, 695, 993, 1000, 1001, 1004, 1023, 1028], "automat": [2, 44, 48, 52, 53, 65, 81, 97, 99, 104, 128, 150, 164, 192, 213, 253, 254, 262, 266, 269, 308, 315, 318, 322, 332, 341, 343, 363, 370, 373, 375, 377, 379, 383, 389, 393, 401, 403, 407, 408, 409, 412, 414, 415, 416, 431, 450, 452, 456, 462, 464, 465, 467, 497, 500, 516, 539, 541, 542, 548, 550, 552, 558, 562, 565, 585, 590, 593, 596, 604, 646, 648, 649, 650, 655, 656, 661, 662, 663, 664, 665, 666, 669, 670, 671, 675, 677, 678, 679, 681, 684, 687, 690, 691, 694, 698, 805, 820, 823, 833, 843, 864, 865, 868, 869, 871, 880, 881, 888, 899, 900, 907, 908, 909, 912, 915, 917, 921, 939, 974, 977, 992, 993, 995, 998, 1003, 1008, 1014, 1018, 1020, 1023, 1024, 1034, 1037, 1038, 1039, 1045, 1048, 1049, 1050, 1051, 1052, 1053], "automl": [1004, 1023], "automobil": 1028, "autoregress": 370, "autoviml": 1023, "autoviz": 1046, "auxiliari": [181, 325, 373, 1028, 1049], "av": 1042, "avail": [0, 2, 45, 51, 52, 54, 77, 90, 91, 124, 127, 146, 150, 165, 169, 174, 178, 184, 185, 186, 200, 210, 218, 228, 231, 244, 247, 262, 265, 266, 271, 272, 275, 282, 293, 294, 295, 301, 313, 317, 318, 319, 320, 322, 323, 326, 331, 333, 358, 362, 369, 370, 372, 373, 374, 375, 376, 379, 380, 384, 388, 389, 393, 401, 404, 407, 408, 411, 412, 413, 414, 415, 416, 418, 447, 450, 451, 452, 453, 469, 470, 471, 472, 473, 474, 475, 476, 488, 489, 490, 491, 493, 494, 495, 496, 498, 499, 509, 536, 550, 556, 557, 558, 559, 560, 561, 565, 566, 568, 569, 570, 571, 595, 596, 604, 613, 614, 630, 635, 636, 650, 654, 656, 658, 660, 664, 666, 668, 671, 673, 674, 675, 676, 677, 678, 679, 685, 692, 699, 702, 735, 736, 803, 806, 807, 817, 829, 830, 835, 836, 837, 838, 839, 840, 841, 853, 864, 865, 867, 874, 883, 886, 891, 895, 900, 904, 959, 964, 993, 994, 998, 1001, 1003, 1004, 1005, 1006, 1007, 1010, 1014, 1017, 1018, 1019, 1022, 1023, 1024, 1027, 1028, 1030, 1034, 1039, 1040, 1041, 1042, 1043, 1044, 1047, 1048, 1050, 1053], "available_if": [2, 90, 389, 1047, 1048, 1051], "avebedrm": [308, 370, 490], "aventi": 52, "aveoccup": [308, 319, 370, 490], "averag": [2, 44, 53, 63, 65, 73, 75, 76, 80, 86, 94, 96, 138, 139, 143, 147, 150, 151, 156, 157, 158, 165, 174, 186, 194, 200, 210, 217, 228, 247, 262, 271, 273, 276, 278, 282, 287, 308, 317, 323, 325, 332, 350, 358, 362, 370, 372, 387, 404, 405, 409, 411, 415, 416, 418, 419, 437, 438, 441, 444, 445, 446, 447, 449, 490, 494, 495, 524, 532, 533, 534, 538, 539, 541, 542, 546, 547, 548, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 570, 571, 589, 596, 635, 636, 651, 661, 662, 669, 670, 672, 675, 677, 679, 680, 681, 683, 690, 703, 706, 707, 709, 710, 711, 716, 723, 724, 726, 728, 729, 731, 732, 733, 737, 738, 739, 741, 742, 743, 746, 748, 749, 751, 753, 754, 756, 759, 767, 784, 785, 786, 787, 788, 790, 791, 793, 794, 798, 799, 800, 801, 831, 834, 853, 873, 888, 989, 994, 999, 1000, 1005, 1008, 1010, 1011, 1018, 1019, 1020, 1034, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1048, 1049, 1050, 1051, 1052, 1053], "average_bike_rent": 186, "average_coef_": 1045, "average_feature_effect": 350, "average_intercept_": 1045, "average_linkag": 80, "average_method": [407, 707, 760, 1042], "average_pr": 150, "average_precis": [275, 703, 710, 1004], "average_precision_scor": [2, 275, 703, 709, 711, 785, 791, 1004, 1034, 1037, 1041, 1042, 1048, 1050], "average_week_demand": [44, 150], "averoom": [308, 319, 370, 490], "avg": [46, 69, 103, 162, 266, 306, 328, 329, 570, 707, 716, 825, 1004, 1050], "avg_dist": [76, 784], "avgclaim": 228, "avgclaimamount": 228, "avi": [1046, 1047], "avidar": 1050, "avinash": 1046, "avm19": [1048, 1049, 1051], "avoid": [44, 47, 52, 53, 80, 91, 96, 105, 140, 141, 145, 150, 185, 186, 214, 219, 228, 233, 244, 247, 262, 263, 269, 273, 281, 296, 298, 299, 312, 313, 324, 335, 336, 351, 363, 373, 375, 376, 377, 379, 380, 381, 387, 389, 390, 393, 401, 405, 407, 409, 411, 414, 415, 418, 440, 442, 444, 452, 462, 468, 494, 495, 496, 500, 509, 510, 535, 540, 544, 637, 649, 650, 655, 656, 663, 664, 665, 666, 684, 687, 692, 694, 696, 698, 715, 795, 803, 804, 808, 814, 817, 828, 829, 830, 867, 870, 876, 877, 879, 884, 885, 886, 887, 890, 892, 893, 894, 895, 896, 897, 898, 900, 905, 951, 998, 1001, 1003, 1004, 1007, 1008, 1010, 1012, 1014, 1019, 1020, 1027, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "aw": 383, "awai": [63, 64, 65, 94, 110, 143, 169, 170, 174, 213, 262, 343, 344, 370, 405, 417, 631, 849, 850, 857, 858, 1003, 1004, 1019], "await": 318, "awalei": 1042, "awar": [49, 55, 162, 178, 262, 336, 350, 373, 375, 377, 387, 390, 406, 411, 415, 568, 569, 651, 657, 658, 659, 661, 662, 672, 683, 853, 882, 1010, 1014, 1020, 1031, 1034, 1035, 1048], "awesom": 1028, "awwwyan": [1052, 1053], "ax": [44, 45, 47, 48, 49, 50, 52, 53, 55, 63, 65, 67, 68, 69, 71, 76, 78, 79, 87, 89, 90, 91, 98, 100, 105, 108, 112, 114, 117, 119, 121, 127, 131, 135, 137, 140, 142, 144, 145, 150, 152, 153, 155, 156, 157, 172, 173, 178, 180, 184, 185, 186, 187, 188, 190, 192, 193, 196, 200, 202, 203, 206, 207, 208, 210, 211, 212, 214, 215, 218, 219, 221, 223, 224, 225, 228, 230, 231, 232, 233, 234, 235, 238, 243, 247, 248, 250, 253, 255, 258, 262, 263, 264, 265, 268, 270, 271, 272, 274, 275, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 290, 291, 292, 293, 296, 298, 299, 303, 304, 305, 308, 310, 311, 312, 313, 314, 315, 317, 318, 321, 322, 324, 335, 336, 337, 338, 340, 341, 343, 345, 346, 347, 348, 350, 351, 352, 354, 355, 371, 378, 412, 417, 438, 535, 542, 551, 634, 635, 700, 701, 703, 704, 705, 721, 809, 826, 921, 924, 1004, 1007, 1011, 1031, 1044, 1050], "ax0": [106, 108, 210, 240, 351], "ax1": [47, 50, 91, 94, 99, 101, 106, 108, 112, 119, 144, 181, 188, 203, 210, 238, 240, 248, 253, 271, 279, 309, 313, 314, 331, 350, 351, 371], "ax2": [47, 91, 94, 99, 101, 112, 119, 144, 181, 188, 203, 210, 238, 248, 253, 271, 279, 298, 309, 313, 314, 331, 350, 371], "ax3": [99, 331], "ax4": 99, "ax_": [151, 261, 271, 275, 277, 281, 291, 313, 317, 382, 438, 634, 700, 701, 703, 704, 705, 809, 826], "ax_bc": 312, "ax_bottom": 382, "ax_calibration_curv": [63, 65], "ax_colorbar": 308, "ax_det": 265, "ax_histi": 308, "ax_histx": 308, "ax_histx_zoom": 308, "ax_histy_zoom": 308, "ax_idx": 270, "ax_origin": 312, "ax_qt": 312, "ax_roc": 265, "ax_row": 71, "ax_scatt": 308, "ax_scatter_zoom": 308, "ax_top_left": 382, "ax_top_right": 382, "ax_yj": 312, "ax_zoom_in": 308, "ax_zoom_out": 308, "axarr": [156, 308], "axes_": [150, 152, 248, 318, 324, 382, 635], "axes_idx": 312, "axes_list": 312, "axes_row": 202, "axesimag": 700, "axhlin": [128, 201, 267, 271], "axi": [2, 44, 45, 47, 51, 52, 54, 55, 56, 58, 63, 64, 73, 75, 76, 82, 84, 86, 87, 88, 89, 95, 104, 105, 108, 114, 117, 119, 121, 122, 123, 124, 125, 130, 137, 138, 142, 143, 151, 154, 158, 161, 173, 178, 180, 184, 185, 194, 199, 200, 204, 205, 210, 215, 219, 222, 224, 225, 227, 228, 231, 232, 235, 237, 241, 242, 246, 253, 255, 257, 258, 264, 265, 269, 270, 275, 277, 278, 281, 287, 288, 293, 294, 295, 298, 299, 300, 306, 308, 312, 315, 324, 329, 331, 333, 335, 338, 339, 342, 344, 345, 346, 348, 350, 351, 355, 356, 357, 370, 377, 384, 389, 405, 407, 415, 419, 438, 445, 464, 467, 532, 534, 537, 538, 540, 542, 544, 546, 547, 551, 587, 615, 634, 635, 688, 689, 704, 766, 782, 783, 784, 785, 809, 826, 835, 876, 877, 884, 885, 887, 892, 893, 894, 896, 897, 898, 921, 929, 933, 934, 953, 978, 984, 994, 1004, 1011, 1014, 1019, 1042, 1044, 1046, 1051, 1052], "axis_idx": 44, "axis_list": 123, "axp": 52, "axvlin": [87, 94, 106, 114, 128, 146, 157, 185, 187, 188, 200, 274, 282, 346], "ayako": 1046, "ayan": 1048, "ayc\u0131": 1052, "aydor": [1041, 1042, 1045], "ayerdi": 1038, "aygeeem": 1053, "aymer": 1035, "aymericbasset": 1050, "ayomid": 1044, "ayush": [1042, 1047], "ayzenshtat": [1028, 1042], "azaria": [1049, 1050], "azencott": 1048, "azim": [101, 127, 186, 230, 234], "azur": [0, 375], "b": [0, 2, 48, 50, 62, 64, 93, 99, 112, 128, 137, 138, 143, 147, 148, 158, 170, 171, 172, 177, 181, 195, 196, 199, 210, 211, 216, 228, 245, 247, 262, 267, 271, 273, 278, 283, 287, 320, 331, 358, 370, 372, 375, 379, 380, 381, 404, 405, 407, 410, 411, 412, 415, 437, 482, 499, 501, 542, 567, 590, 591, 592, 593, 609, 610, 613, 614, 631, 649, 650, 651, 652, 661, 672, 675, 677, 679, 683, 690, 691, 708, 722, 733, 734, 795, 796, 814, 815, 854, 880, 881, 882, 883, 886, 887, 895, 922, 935, 951, 952, 966, 968, 994, 996, 1000, 1001, 1002, 1004, 1007, 1009, 1014, 1018, 1019, 1034, 1042, 1045, 1047, 1048, 1049], "b0noi": 1040, "b0rxington": 1049, "b1": [224, 294, 338], "b12": [210, 228], "b1996": 414, "b1998": 414, "b1999": 414, "b2": [224, 294, 338], "b2001": 414, "b2011": 407, "b2c": 1028, "b30065": 310, "b5": 322, "b7a2ff": 312, "b_1": 1008, "b_2": 1008, "b_column": 722, "b_i": 1009, "b_iv_i": 1009, "b_j": 407, "b_k": 407, "b_mask": 277, "b_row": 722, "b_true": 277, "ba": [52, 864, 865, 1008], "baak": 1048, "baam": [1047, 1048], "babatchev": 1053, "babino": [1047, 1048], "bac": 52, "bach": [412, 532, 537, 538, 539, 661, 1000], "bachant": 1041, "back": [44, 126, 249, 363, 373, 375, 389, 390, 401, 408, 415, 432, 443, 446, 447, 459, 482, 483, 484, 509, 510, 534, 535, 536, 539, 541, 542, 545, 583, 633, 661, 662, 669, 670, 671, 679, 680, 681, 731, 872, 874, 875, 876, 880, 881, 882, 884, 885, 887, 899, 900, 907, 956, 1000, 1004, 1008, 1037, 1042, 1044, 1045, 1048, 1052, 1053], "backend": [2, 322, 363, 378, 389, 468, 905, 969, 971, 973, 1004, 1037, 1042, 1043, 1044, 1045], "backend_param": 971, "background": [45, 51, 82, 100, 151, 306, 310, 370, 375, 383, 407, 494, 495, 1001, 1009, 1018, 1044], "background_point": 51, "backlink": 1039, "backport": [379, 384, 1041], "backprop": [1008, 1018], "backpropag": 1008, "backslash": 1049, "backtick": [375, 380], "backup": [509, 1034], "backward": [165, 244, 319, 378, 389, 416, 497, 579, 604, 617, 618, 621, 622, 623, 625, 626, 920, 929, 1008, 1024, 1034, 1037, 1042, 1043, 1044, 1046, 1048, 1050], "bad": [94, 95, 170, 175, 185, 262, 325, 350, 358, 375, 407, 417, 695, 749, 993, 1000, 1001, 1006, 1012, 1034], "badaracco": 1047, "badli": [200, 210, 350, 364, 887, 1000, 1014], "badr": 1049, "baeza": [592, 733, 1037], "bag": [2, 14, 65, 103, 123, 134, 139, 141, 149, 182, 187, 285, 351, 352, 371, 405, 517, 518, 519, 556, 557, 558, 559, 560, 561, 564, 565, 566, 567, 744, 808, 833, 916, 1002, 1005, 1025, 1026, 1030, 1034, 1036, 1037, 1038, 1039, 1040, 1047, 1048, 1050], "bagai": 1047, "baggingclassifi": [2, 389, 398, 414, 557, 917, 942, 994, 1037, 1040, 1041, 1042, 1045, 1049, 1050, 1052], "baggingregressor": [2, 138, 398, 414, 556, 918, 994, 1037, 1040, 1042, 1045, 1049, 1050, 1052], "baggipont": [1052, 1053], "baharev": 1039, "bahavior": 350, "bahaviour": 350, "baibak": [1042, 1043], "bail": 1045, "bailei": [407, 707], "bajic": 1049, "baji\u0107": 1049, "baker": 1053, "bakir2003": 412, "bakiri": [837, 1005], "bak\u0131r": [45, 412, 536], "bala": [1034, 1037], "balakumaran": [1041, 1042], "balanc": [2, 44, 46, 53, 65, 87, 100, 105, 135, 141, 145, 164, 182, 214, 215, 260, 266, 269, 271, 272, 282, 308, 364, 387, 389, 405, 406, 411, 412, 414, 503, 516, 535, 541, 542, 548, 558, 562, 565, 643, 661, 662, 669, 671, 677, 678, 679, 706, 711, 732, 746, 785, 790, 803, 804, 821, 867, 907, 909, 912, 915, 917, 938, 939, 993, 1019, 1020, 1025, 1034, 1036, 1039, 1040, 1043, 1044, 1048], "balanced_accuraci": [282, 711, 825, 1004, 1042], "balanced_accuracy_scor": [2, 706, 790, 1004, 1042], "balanced_subsampl": [558, 565, 1042], "balaz": 1038, "baldi": 746, "ball": [103, 293, 301, 407, 413, 448, 695, 847, 848, 852, 855, 857, 858, 859, 1034, 1036, 1039, 1045], "ball_tre": [301, 418, 444, 446, 450, 457, 691, 692, 849, 850, 851, 852, 853, 855, 857, 858, 859, 1007, 1034, 1051], "balltre": [2, 418, 444, 446, 450, 457, 691, 692, 702, 849, 850, 851, 852, 853, 855, 857, 858, 859, 1001, 1034, 1036, 1038, 1042, 1047, 1050, 1051], "baloo": 1001, "baluyot": 1043, "bamidel": 1044, "banana": [49, 1004], "band": [53, 271, 310, 1014], "bandit": 993, "bandol": 314, "bandwidth": [2, 49, 80, 97, 243, 292, 293, 301, 387, 389, 407, 413, 448, 458, 461, 847, 848, 852, 997, 1004, 1010, 1045, 1049], "bandwidth_": 852, "bangda": 1042, "banik": 1052, "banilo": [1038, 1039], "bank": [52, 58, 1028], "bannerje": [1050, 1051], "bansal": 1041, "bansod": [1039, 1040, 1041], "bao": [1040, 1048], "baod": 407, "baptbillard": 1047, "baptist": [1037, 1045], "bar": [48, 50, 55, 105, 141, 142, 144, 145, 148, 157, 161, 165, 177, 180, 186, 192, 253, 258, 267, 269, 273, 287, 313, 314, 321, 322, 351, 377, 410, 583, 635, 651, 672, 683, 1004, 1011, 1018, 1020, 1040, 1041, 1042, 1043], "bar_color": 48, "bar_kw": 635, "bar_siz": 350, "baran": 1044, "barang": 1050, "baraniuk": 416, "barankaraku": 1046, "barata": 1050, "barber": 533, "barberogaston": 1046, "barbier": 1053, "bardiya": [1048, 1049], "bare": [370, 1001], "barh": [55, 148, 180, 181, 184, 185, 187, 188, 251, 315, 350, 351, 352], "barikbin": 1050, "barkhorn": 1042, "barklei": 1044, "barmalei": [1038, 1039], "barn": [695, 1001, 1039, 1041, 1044, 1052], "barnes_hut": [288, 695, 1041, 1042], "barnett": 1042, "barnhil": [595, 596], "barnowski": [1048, 1049], "barreca": [888, 1014], "barreto": 1048, "barri": [370, 1042], "barrier": 415, "barrycg": 1044, "bars_": 635, "bartelheim": 1045, "barth\u00e9lemi": [1050, 1051, 1053], "bartosz": 1043, "bart\u0142omiej": 1049, "barycent": [300, 1034], "basbug": 1041, "base": [2, 14, 20, 24, 31, 32, 33, 35, 41, 45, 52, 53, 54, 55, 56, 59, 63, 64, 65, 71, 83, 90, 91, 92, 101, 103, 104, 108, 112, 121, 122, 127, 133, 135, 136, 141, 145, 146, 147, 148, 150, 153, 155, 158, 159, 162, 163, 169, 174, 175, 177, 186, 187, 188, 191, 192, 197, 199, 200, 203, 205, 206, 210, 211, 218, 227, 228, 230, 237, 244, 245, 247, 265, 266, 271, 277, 281, 285, 287, 288, 301, 306, 308, 309, 311, 313, 319, 321, 325, 333, 337, 343, 351, 354, 362, 369, 370, 371, 372, 373, 376, 378, 379, 383, 387, 389, 390, 392, 401, 403, 405, 406, 408, 412, 413, 415, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 444, 445, 446, 447, 448, 449, 450, 452, 456, 457, 461, 463, 464, 465, 466, 467, 487, 501, 502, 509, 510, 533, 534, 536, 537, 538, 539, 540, 542, 547, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 580, 590, 593, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 608, 609, 610, 613, 614, 619, 620, 621, 624, 627, 635, 636, 638, 639, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 661, 667, 672, 674, 675, 676, 677, 678, 683, 685, 686, 688, 689, 690, 693, 695, 707, 720, 729, 738, 739, 740, 742, 744, 758, 759, 760, 788, 791, 798, 802, 803, 805, 806, 807, 809, 810, 812, 817, 819, 821, 822, 823, 824, 831, 833, 837, 838, 841, 849, 850, 851, 853, 855, 857, 858, 859, 864, 865, 868, 869, 872, 879, 880, 882, 886, 887, 888, 896, 899, 900, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 923, 925, 927, 936, 944, 956, 972, 993, 995, 996, 998, 999, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1014, 1016, 1017, 1018, 1019, 1020, 1022, 1023, 1024, 1025, 1028, 1030, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1045, 1052], "base_classifi": [331, 333, 1017], "base_clf": 437, "base_estim": [405, 554, 555, 556, 557, 838, 841, 904, 993, 1045, 1047, 1048, 1049, 1050, 1053], "base_estimator_": [554, 555, 556, 557, 558, 559, 564, 565, 566, 567, 613, 1049], "base_estimator__": 1049, "base_lr": [287, 838], "base_model": 406, "base_x_test": 110, "base_x_train": 110, "basebag": [1040, 1042], "basebal": [58, 370], "basedecisiontre": [1042, 1043, 1046], "basedictionarylearn": 1034, "baseensembl": [1041, 1044], "baseestim": [2, 90, 133, 244, 288, 326, 375, 388, 389, 417, 422, 423, 424, 425, 428, 429, 430, 431, 603, 635, 636, 942, 956, 1034, 1041, 1044, 1046, 1048, 1049, 1053], "basegradientboost": 1035, "baselabelpropag": 1041, "baselibsvm": 1044, "baselin": [63, 135, 144, 147, 158, 165, 188, 192, 228, 262, 278, 287, 319, 351, 372, 407, 416, 552, 553, 637, 1004, 1007, 1050], "baseline_similar": 177, "baseline_similarity_bound": 177, "basemap": [51, 301], "basemixtur": [1042, 1043], "basemultilayerperceptron": [1042, 1044], "basenb": 1044, "baserandomproject": [899, 900], "basesearchcv": [1041, 1042], "basesgd": 1018, "basesgdclassifi": 1043, "baseshufflesplit": 1047, "bash": [363, 375, 383], "bashrc": 383, "basi": [2, 44, 46, 54, 126, 169, 174, 176, 211, 262, 305, 320, 339, 343, 367, 373, 376, 407, 412, 414, 452, 535, 625, 635, 642, 694, 886, 1002, 1014, 1019, 1026, 1030, 1042, 1044, 1047], "basic": [128, 147, 168, 169, 174, 175, 177, 178, 181, 182, 208, 282, 315, 344, 362, 364, 375, 379, 387, 389, 407, 411, 412, 414, 614, 625, 903, 915, 916, 917, 918, 993, 994, 1007, 1018, 1022, 1023, 1024, 1025, 1028], "basicconfig": 121, "basil": 1041, "basilisk": 1023, "basis_1": 211, "basis_2": 211, "basri": 514, "bassett": 1000, "bastiaan": [1035, 1036], "bastian": 1042, "bat": 373, "batch": [2, 48, 51, 98, 121, 125, 301, 321, 364, 384, 389, 415, 440, 442, 447, 449, 451, 453, 532, 534, 535, 537, 538, 539, 540, 541, 543, 544, 546, 547, 667, 688, 689, 804, 808, 821, 822, 842, 843, 844, 845, 846, 864, 865, 876, 877, 887, 900, 954, 969, 1008, 1009, 1018, 1034, 1038, 1039, 1042, 1043, 1044, 1045, 1047, 1049, 1050], "batch_dict_estim": 121, "batch_pca_estim": 121, "batch_siz": [2, 55, 58, 78, 98, 121, 124, 125, 351, 412, 449, 535, 537, 538, 539, 540, 547, 863, 864, 865, 954, 955, 969, 1035, 1042, 1045, 1047, 1048], "batch_size_": 535, "batchkarov": [1035, 1039], "batiss": 1045, "batista": [1042, 1043, 1047], "batistaki": 407, "batoul": 1047, "battista": 1045, "batula": 1041, "bauk": [1042, 1043], "baum": 446, "baumgartn": 1041, "baxlei": 1041, "bay": [2, 33, 65, 68, 138, 153, 169, 200, 258, 270, 350, 370, 405, 412, 414, 415, 537, 550, 551, 659, 842, 843, 844, 845, 846, 888, 998, 999, 1000, 1014, 1026, 1030, 1034, 1035, 1036, 1037, 1042, 1044, 1047, 1049], "bayer": [0, 1034, 1035, 1039, 1052], "bayesian": [2, 47, 65, 88, 99, 119, 181, 182, 191, 196, 198, 211, 216, 252, 254, 258, 259, 271, 279, 283, 293, 298, 309, 313, 412, 437, 525, 529, 533, 614, 647, 648, 659, 660, 800, 801, 868, 870, 882, 887, 993, 1023, 1025, 1026, 1029, 1030, 1040, 1047], "bayesiangaussianmixtur": [2, 253, 254, 259, 801, 1003, 1040, 1042, 1043, 1047, 1048, 1052], "bayesianridg": [2, 88, 180, 192, 193, 196, 319, 630, 647, 1000, 1041, 1042, 1043, 1044, 1047, 1048, 1050, 1051], "baz": [377, 583], "baze": 1043, "bbbbbb": 98, "bbox": [49, 52, 71, 253, 254, 255, 258, 259, 310], "bbox_arg": 49, "bbox_to_anchor": [44, 73, 178, 273, 345], "bc": 312, "bcde": 144, "bcross_val": 1034, "bde": 144, "bdegraaff": 1049, "bdt": 137, "beach": 1042, "beam": [138, 1034], "bear": [414, 1023], "bearer": 1042, "beatrizsmg": 1046, "beauchamp": [1035, 1038], "beaugnon": 1044, "becam": [155, 390, 1042], "becaus": [44, 45, 53, 58, 63, 65, 76, 82, 84, 104, 114, 117, 135, 140, 147, 150, 165, 170, 173, 176, 185, 186, 188, 193, 197, 204, 210, 214, 216, 218, 228, 243, 244, 254, 262, 265, 268, 269, 274, 287, 288, 304, 305, 306, 308, 312, 313, 314, 315, 322, 330, 339, 343, 350, 351, 352, 354, 357, 358, 362, 363, 370, 375, 379, 380, 383, 387, 388, 389, 398, 401, 404, 405, 406, 407, 408, 411, 412, 413, 414, 415, 417, 420, 430, 447, 448, 461, 465, 475, 482, 483, 484, 535, 537, 553, 555, 557, 559, 561, 563, 564, 566, 569, 571, 609, 610, 614, 635, 636, 638, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 675, 676, 679, 680, 681, 682, 683, 692, 702, 712, 715, 716, 724, 725, 726, 727, 749, 766, 788, 791, 797, 803, 817, 831, 835, 840, 841, 850, 853, 855, 857, 858, 859, 865, 876, 877, 885, 887, 888, 892, 893, 895, 896, 897, 898, 908, 910, 913, 916, 918, 944, 967, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1007, 1009, 1011, 1014, 1019, 1020, 1028, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1050, 1053], "becker": [407, 1028, 1037, 1046], "becom": [84, 89, 91, 105, 112, 145, 185, 203, 212, 214, 244, 247, 270, 288, 309, 313, 339, 343, 350, 358, 369, 375, 377, 379, 383, 389, 390, 407, 409, 414, 415, 417, 440, 450, 454, 455, 457, 583, 590, 591, 593, 622, 630, 661, 662, 679, 681, 881, 907, 908, 914, 999, 1000, 1001, 1003, 1007, 1014, 1019, 1035, 1042, 1043, 1046, 1047, 1048, 1049, 1051, 1053], "bednar": 1041, "bedroom": [308, 370], "been": [0, 44, 49, 64, 80, 87, 94, 113, 126, 133, 135, 148, 165, 169, 174, 176, 185, 188, 234, 237, 239, 244, 245, 266, 268, 274, 275, 317, 318, 319, 320, 321, 323, 324, 325, 326, 330, 350, 358, 363, 369, 370, 372, 373, 374, 375, 377, 379, 381, 383, 384, 387, 388, 389, 390, 398, 401, 404, 405, 406, 407, 409, 411, 412, 414, 417, 432, 469, 471, 472, 474, 478, 487, 524, 535, 537, 550, 551, 568, 569, 583, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 614, 636, 637, 661, 662, 669, 670, 671, 676, 678, 679, 680, 681, 723, 781, 782, 783, 796, 803, 806, 807, 809, 817, 825, 826, 831, 832, 856, 904, 907, 994, 996, 997, 999, 1000, 1001, 1004, 1005, 1007, 1010, 1014, 1016, 1018, 1019, 1024, 1028, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "befor": [2, 48, 52, 63, 78, 103, 105, 108, 117, 145, 150, 155, 161, 176, 178, 179, 180, 182, 185, 186, 188, 194, 196, 198, 200, 204, 244, 262, 268, 275, 290, 291, 309, 312, 313, 315, 320, 326, 342, 358, 362, 363, 370, 373, 375, 377, 379, 380, 381, 383, 384, 387, 389, 390, 392, 393, 401, 403, 405, 407, 408, 409, 411, 412, 414, 416, 419, 420, 443, 447, 448, 449, 459, 461, 465, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 482, 483, 484, 485, 490, 502, 535, 538, 539, 540, 541, 542, 545, 547, 548, 562, 563, 566, 568, 570, 571, 579, 590, 591, 593, 614, 630, 631, 633, 648, 669, 670, 671, 674, 679, 681, 690, 695, 697, 800, 801, 804, 808, 809, 821, 822, 824, 829, 831, 833, 847, 848, 855, 856, 857, 858, 859, 862, 867, 868, 871, 874, 881, 885, 886, 887, 888, 892, 893, 895, 896, 897, 898, 904, 915, 916, 926, 951, 987, 994, 1000, 1001, 1004, 1010, 1014, 1018, 1019, 1020, 1024, 1025, 1034, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "beforehand": [251, 291, 1020], "begin": [58, 133, 165, 169, 263, 270, 287, 320, 350, 358, 375, 380, 381, 389, 404, 407, 414, 554, 555, 560, 562, 563, 669, 670, 679, 680, 681, 993, 996, 1000, 1004, 1014, 1016, 1018, 1042, 1048, 1049], "beginn": 1024, "behav": [44, 52, 86, 91, 214, 262, 263, 308, 319, 339, 358, 375, 377, 381, 388, 407, 408, 411, 887, 1000, 1014, 1019, 1021, 1024, 1034, 1041, 1043, 1047, 1048], "behavior": [63, 73, 75, 86, 180, 182, 185, 186, 199, 207, 210, 228, 244, 251, 259, 260, 262, 271, 273, 305, 306, 308, 310, 315, 339, 358, 363, 369, 372, 375, 377, 379, 383, 384, 389, 403, 405, 406, 407, 411, 414, 415, 537, 552, 567, 669, 670, 671, 679, 680, 681, 702, 704, 732, 733, 786, 787, 790, 803, 804, 805, 808, 817, 820, 821, 822, 823, 824, 844, 880, 907, 908, 993, 1000, 1004, 1005, 1010, 1014, 1019, 1025, 1028, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053], "behaviour": [75, 126, 150, 211, 212, 228, 341, 375, 389, 401, 407, 414, 560, 561, 565, 566, 604, 633, 804, 805, 808, 820, 821, 822, 823, 824, 905, 915, 916, 976, 993, 994, 1004, 1014, 1042, 1045, 1046, 1049, 1050, 1053], "behind": [38, 87, 112, 135, 285, 379, 383, 409, 414, 1003, 1007, 1016, 1050], "behrend": 1044, "behrouz": 1048, "behzad": 1040, "beier": 1045, "beimportantfew": 395, "being": [62, 65, 71, 86, 89, 114, 117, 126, 135, 139, 150, 152, 169, 174, 187, 190, 205, 244, 247, 261, 268, 306, 312, 313, 339, 343, 350, 352, 373, 374, 375, 377, 380, 387, 389, 390, 406, 407, 409, 411, 414, 415, 416, 417, 418, 420, 441, 442, 444, 445, 450, 456, 469, 475, 494, 524, 570, 643, 652, 659, 675, 677, 690, 693, 697, 715, 721, 737, 739, 786, 792, 800, 847, 848, 853, 855, 857, 858, 859, 882, 900, 952, 993, 994, 1000, 1003, 1004, 1007, 1010, 1011, 1014, 1016, 1018, 1019, 1020, 1034, 1035, 1040, 1041, 1042, 1043, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053], "beings": 350, "beirouti": 1041, "belatedli": 1041, "belief": [58, 268, 863, 1009], "believ": [350, 351, 383, 387, 1028], "belkin": 1001, "belkina": [695, 1001], "bell": [2, 522, 1042, 1044, 1046, 1047], "bella": 1004, "bella2012": 1004, "bellet": [1041, 1042, 1043], "belmont": [915, 916, 1020], "belong": [62, 65, 67, 89, 94, 167, 247, 268, 317, 323, 330, 369, 370, 404, 405, 407, 408, 410, 411, 414, 422, 440, 443, 447, 448, 449, 451, 453, 524, 715, 734, 810, 816, 828, 874, 888, 923, 959, 960, 1000, 1003, 1004, 1006, 1007, 1008, 1010, 1019, 1023], "below": [0, 2, 49, 53, 63, 64, 65, 69, 71, 89, 94, 103, 108, 112, 121, 133, 139, 142, 147, 160, 184, 186, 210, 212, 226, 227, 231, 235, 239, 244, 247, 249, 251, 263, 266, 271, 273, 274, 275, 308, 312, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 344, 350, 357, 358, 363, 368, 369, 373, 375, 377, 379, 380, 384, 389, 390, 393, 395, 407, 409, 410, 411, 412, 414, 415, 416, 417, 444, 446, 448, 471, 472, 478, 491, 493, 495, 496, 497, 498, 499, 501, 502, 503, 505, 506, 511, 532, 538, 543, 549, 584, 597, 598, 599, 600, 601, 602, 636, 649, 655, 661, 662, 670, 671, 676, 678, 695, 702, 708, 746, 766, 800, 801, 803, 814, 817, 836, 867, 870, 880, 881, 884, 890, 896, 993, 994, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1014, 1018, 1019, 1020, 1021, 1023, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1052], "beltran": 1052, "ben": [1036, 1037, 1038, 1041, 1042, 1043, 1046, 1051], "ben3940": 1048, "benavoli": 268, "benbihi": 1043, "bench_k_mean": 92, "benchmark": [288, 319, 326, 351, 352, 362, 368, 370, 375, 387, 393, 400, 405, 468, 516, 905], "benchmark_estim": 50, "benchmark_influ": 47, "benchmark_throughput": 50, "bend": 343, "benedek": 1050, "benedikt": 1038, "benediktsson": [1034, 1035, 1036], "benefici": [105, 107, 110, 121, 153, 262, 308, 309, 325, 401, 406, 1001], "benefit": [44, 81, 90, 107, 108, 135, 136, 145, 150, 185, 224, 234, 240, 242, 262, 290, 321, 326, 362, 375, 384, 389, 405, 407, 448, 461, 468, 509, 568, 569, 661, 662, 669, 670, 671, 679, 680, 681, 838, 905, 907, 993, 999, 1007, 1014, 1028, 1034, 1037, 1038, 1039, 1046, 1047, 1048, 1049], "benfield": 1041, "bengio": [268, 864, 865, 993, 1017], "bengtsson": 1038, "benhel": 376, "benhur": 1047, "benign": [165, 372, 501], "benjamin": [644, 1036, 1037, 1045, 1046, 1047, 1048, 1049, 1050, 1052], "benjamini": [597, 1040, 1041], "benjaminirv": 1039, "benjastudio": [1042, 1043], "benn": 1042, "bennett": [165, 372, 1004], "benni": 1048, "benoit": 1051, "beno\u00eet": 1047, "benson": 58, "bentlei": 1007, "bera": 1049, "berei": 1048, "beren": 695, "berenbaum": 1050, "bereng": 1047, "berg": [370, 1035, 1036, 1046, 1051], "bergman": [1051, 1052], "bergstra": [993, 1034, 1035], "berk": 1034, "berkecanrizai": 1049, "berkelei": [644, 915, 916], "berlin": [174, 407, 412, 536, 699, 729, 759, 1004], "bernardo": 1040, "bernd": 1049, "bernhard": [45, 412, 536, 838, 873, 903, 1005, 1010, 1019, 1040], "bernhardsson": 1028, "berni": 1045, "bernoulli": [2, 306, 415, 416, 842, 843, 844, 845, 846, 863, 864, 865, 870, 1000, 1014, 1026, 1030, 1034], "bernoullinb": [2, 153, 364, 843, 844, 845, 846, 1005, 1006, 1035, 1036, 1038, 1041, 1046, 1047, 1049], "bernoullirbm": [2, 306, 864, 865, 1009, 1014, 1036, 1037, 1046, 1048, 1051], "bertin": 1028, "bertoncelj": 1045, "bertrand": [0, 397, 1034, 1040, 1041, 1046, 1047], "bertrandhaut": [1042, 1043], "besid": [155, 240, 282, 375, 380, 591, 993, 1042], "bessel": [417, 622], "bessi": 322, "besson": [1039, 1040], "best": [0, 44, 46, 48, 52, 53, 54, 58, 62, 64, 65, 76, 81, 88, 89, 95, 103, 104, 105, 106, 110, 116, 121, 125, 128, 129, 130, 138, 141, 144, 146, 147, 148, 150, 155, 158, 165, 169, 170, 175, 180, 185, 192, 196, 198, 200, 203, 224, 225, 226, 230, 233, 237, 242, 243, 247, 254, 255, 259, 261, 262, 266, 267, 268, 269, 272, 275, 276, 279, 280, 283, 287, 292, 297, 309, 314, 319, 320, 325, 339, 342, 343, 350, 351, 352, 356, 362, 363, 369, 372, 374, 375, 378, 381, 388, 389, 393, 398, 401, 404, 405, 406, 407, 411, 412, 414, 415, 416, 417, 430, 443, 446, 447, 449, 451, 452, 453, 459, 462, 465, 472, 482, 483, 484, 539, 546, 547, 553, 555, 557, 558, 559, 560, 561, 563, 565, 566, 567, 569, 571, 595, 596, 599, 604, 613, 614, 638, 640, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 670, 672, 673, 674, 675, 676, 678, 679, 681, 682, 683, 691, 692, 693, 696, 697, 706, 711, 722, 723, 724, 725, 726, 727, 731, 732, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 759, 786, 787, 788, 790, 793, 794, 795, 796, 797, 799, 800, 801, 803, 806, 807, 817, 830, 832, 835, 840, 841, 850, 858, 864, 865, 908, 910, 913, 915, 916, 917, 918, 993, 998, 999, 1000, 1001, 1004, 1007, 1008, 1010, 1018, 1020, 1023, 1024, 1028, 1034, 1037, 1040, 1042, 1043, 1044, 1047, 1048, 1049, 1050, 1052], "best_alpha": 1034, "best_c": 346, "best_c_scal": 346, "best_clf": 106, "best_estim": [803, 806, 807, 817], "best_estimator_": [46, 88, 105, 106, 107, 110, 128, 243, 258, 262, 266, 268, 269, 272, 280, 292, 803, 806, 807, 817, 993, 1041], "best_idx": [58, 267], "best_index": [266, 272], "best_index_": [267, 272, 803, 806, 807, 817], "best_loss": [679, 681], "best_loss_": [864, 865, 1049], "best_low_complex": 267, "best_n_it": 459, "best_paramet": 269, "best_parameters_": 258, "best_params_": [104, 106, 147, 169, 243, 258, 266, 272, 319, 339, 388, 803, 806, 807, 817, 993], "best_recal": 266, "best_recall_std": 266, "best_recall_threshold": 266, "best_scor": 272, "best_score_": [104, 106, 243, 262, 269, 272, 273, 339, 406, 676, 678, 803, 806, 807, 817, 825, 1045], "best_score_idx": 267, "best_threshold_": [262, 282, 325, 825], "best_validation_score_": [864, 865, 1049], "beta": [2, 81, 116, 184, 214, 381, 405, 407, 410, 537, 539, 541, 548, 647, 732, 733, 739, 745, 786, 798, 800, 1004, 1036, 1039, 1041, 1043, 1044], "beta_": [214, 412], "beta_1": [864, 865], "beta_2": [864, 865], "beta_k": 412, "beta_loss": [55, 539, 541, 548, 1041], "betatim": 1049, "better": [44, 45, 49, 53, 58, 59, 62, 68, 84, 89, 107, 108, 110, 111, 112, 113, 117, 121, 124, 127, 138, 141, 145, 146, 147, 150, 155, 160, 173, 174, 175, 177, 180, 185, 187, 193, 196, 197, 200, 203, 210, 211, 212, 218, 225, 227, 228, 234, 242, 243, 244, 247, 258, 261, 262, 268, 270, 271, 274, 277, 278, 281, 285, 287, 306, 312, 313, 321, 322, 339, 346, 350, 351, 352, 354, 358, 362, 370, 374, 375, 376, 377, 380, 381, 383, 389, 392, 395, 403, 405, 407, 409, 411, 412, 413, 414, 415, 417, 449, 450, 539, 541, 548, 560, 561, 562, 563, 609, 610, 633, 674, 680, 695, 712, 728, 737, 742, 745, 766, 801, 832, 842, 843, 844, 845, 846, 847, 848, 853, 864, 865, 884, 885, 888, 896, 899, 900, 907, 908, 993, 994, 996, 997, 998, 1000, 1001, 1003, 1004, 1006, 1007, 1008, 1012, 1014, 1017, 1018, 1020, 1024, 1028, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051], "better_prob": 268, "between": [2, 26, 38, 44, 45, 48, 49, 51, 52, 53, 59, 71, 73, 74, 75, 76, 78, 79, 87, 94, 95, 100, 116, 124, 126, 127, 129, 135, 138, 141, 144, 145, 147, 150, 160, 169, 174, 175, 177, 182, 184, 185, 186, 187, 192, 196, 197, 199, 202, 203, 206, 207, 210, 211, 212, 214, 215, 218, 228, 230, 237, 242, 244, 247, 260, 262, 264, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 280, 281, 282, 285, 287, 290, 294, 295, 297, 298, 308, 313, 315, 320, 325, 331, 339, 343, 345, 346, 350, 351, 352, 357, 358, 362, 363, 370, 375, 377, 379, 383, 384, 387, 388, 389, 390, 398, 401, 403, 404, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 428, 440, 441, 443, 444, 445, 446, 447, 450, 452, 453, 454, 456, 457, 458, 463, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 503, 515, 516, 522, 525, 528, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 550, 551, 554, 555, 560, 561, 563, 564, 565, 566, 586, 590, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 604, 606, 607, 608, 609, 610, 611, 614, 623, 630, 635, 636, 637, 642, 645, 648, 649, 650, 655, 656, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 671, 673, 679, 681, 682, 684, 687, 691, 693, 695, 697, 698, 699, 702, 704, 706, 707, 708, 710, 712, 713, 717, 718, 719, 720, 722, 727, 728, 729, 732, 733, 734, 737, 739, 740, 746, 755, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 789, 790, 795, 796, 798, 799, 800, 801, 803, 804, 805, 806, 808, 812, 820, 821, 822, 823, 824, 832, 833, 835, 837, 849, 850, 851, 853, 855, 857, 858, 859, 860, 861, 864, 865, 871, 874, 875, 877, 878, 880, 881, 884, 885, 886, 888, 893, 896, 897, 901, 907, 908, 912, 915, 916, 917, 918, 920, 948, 960, 961, 972, 993, 996, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1018, 1019, 1020, 1021, 1024, 1025, 1034, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "bewar": 416, "beyond": [44, 65, 211, 212, 262, 362, 364, 374, 375, 387, 405, 414, 732, 733, 741, 786, 787, 790, 912, 1001, 1005, 1014, 1019, 1042], "beyst": 1048, "bezuidenhout": 1047, "bf5fff": 119, "bfg": [304, 613, 614, 651, 652, 661, 672, 675, 677, 683, 690, 1007, 1008, 1049], "bgm": 800, "bharat": [411, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053], "bharathi": 1045, "bhardwaj": [1041, 1042], "bhargav": 1040, "bhaskaran": [1041, 1042], "bhat": [1047, 1049, 1050, 1051], "bhattacharya": 1042, "bhattarai": 1044, "bhavika": 1046, "bhoomika": 1049, "bhsu": 1038, "bhtsne": [695, 1041], "bi": [89, 415], "bia": [44, 65, 110, 123, 134, 142, 147, 150, 182, 185, 187, 192, 193, 195, 273, 303, 343, 346, 358, 370, 389, 405, 409, 413, 414, 417, 525, 557, 560, 561, 609, 610, 617, 645, 651, 652, 661, 662, 672, 673, 683, 864, 865, 880, 882, 886, 892, 893, 895, 896, 897, 898, 916, 925, 999, 1000, 1003, 1004, 1008, 1009, 1012, 1018, 1025], "bianca": 65, "bianp": 381, "bias": [49, 114, 124, 147, 154, 184, 185, 187, 273, 370, 392, 405, 414, 525, 550, 863, 887, 898, 999, 1003, 1012, 1018, 1020], "bibhash": [1044, 1045], "bibl": 351, "bibliograph": 375, "bibtex": 0, "bic": [2, 182, 191, 197, 198, 205, 218, 416, 502, 654, 656, 657, 658, 659, 801, 868, 887, 993, 1003, 1025, 1034, 1041, 1047, 1048], "bic_criterion": 198, "bicker": 1044, "biclust": [2, 6, 60, 103, 330, 332, 350, 351, 352, 415, 422, 449, 451, 453, 488, 512, 514, 593, 722, 798, 1004, 1025, 1029, 1030, 1036, 1040], "bicluster_ncut": 58, "biclustermixin": 2, "biclusters_": [59, 60, 422, 451, 453], "bidu": [1047, 1048], "biernat": 1046, "big": [44, 80, 94, 96, 215, 231, 247, 259, 363, 375, 381, 390, 409, 415, 419, 539, 562, 563, 565, 566, 809, 831, 842, 843, 844, 845, 846, 1024, 1028, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "bigg": [417, 622], "bigger": [48, 76, 94, 223, 268, 306, 343, 348, 351, 361, 363, 415, 438, 439, 509, 539, 853, 1030], "biggest": [407, 410, 412, 443], "biggest_inertia": [407, 443], "biggio": 1045, "bigram": [269, 415, 590, 591, 593], "bigram_vector": 415, "bijil": 1048, "bike": 1011, "bike_shar": 44, "bike_sharing_data_fil": 53, "bike_sharing_demand": [44, 186], "bilbro": 1041, "bill": [1044, 1045], "billaud": 1042, "billi": 1038, "billing": [1037, 1038, 1039], "billion": 1028, "bimod": [312, 413], "bin": [2, 44, 62, 63, 65, 87, 108, 137, 141, 210, 241, 247, 262, 274, 293, 308, 309, 310, 311, 312, 314, 315, 373, 383, 393, 405, 413, 414, 438, 439, 448, 461, 562, 563, 606, 870, 872, 886, 953, 1042, 1043, 1044, 1048, 1052, 1053], "bin_cent": [87, 210], "bin_edg": 87, "bin_edges_": [87, 309, 872], "bin_seed": [80, 97, 448, 461, 1045], "binar": [2, 37, 275, 277, 278, 367, 369, 757, 842, 871, 872, 874, 878, 880, 888, 891, 1004, 1006, 1030, 1048, 1050], "binari": [2, 31, 48, 54, 63, 65, 139, 141, 151, 153, 162, 177, 185, 190, 202, 203, 204, 210, 218, 231, 238, 247, 250, 262, 265, 266, 271, 277, 282, 285, 292, 326, 339, 343, 357, 358, 369, 370, 371, 379, 380, 389, 393, 401, 404, 405, 406, 407, 414, 415, 417, 437, 438, 439, 452, 487, 501, 509, 510, 521, 524, 550, 551, 554, 556, 560, 562, 567, 568, 569, 583, 590, 591, 593, 595, 596, 604, 613, 630, 631, 632, 633, 634, 635, 636, 661, 662, 669, 671, 676, 677, 678, 679, 703, 706, 710, 711, 712, 715, 716, 718, 721, 723, 725, 730, 732, 733, 737, 738, 741, 742, 743, 744, 746, 785, 786, 787, 790, 791, 792, 797, 799, 802, 803, 804, 806, 807, 808, 809, 817, 821, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 842, 853, 863, 874, 878, 880, 888, 891, 907, 909, 912, 923, 966, 994, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1014, 1015, 1016, 1018, 1019, 1020, 1031, 1035, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1048, 1049, 1051, 1052], "binary_crossentropi": 1048, "binary_eros": 54, "binary_onli": [1044, 1045], "binarytre": [852, 1038, 1042, 1046], "bincount": [389, 411, 558, 562, 565, 661, 662, 669, 671, 677, 678, 679, 907, 909, 912, 915, 917, 938, 939, 1041], "bind": [393, 1023, 1034, 1041, 1042], "binder": [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 184, 185, 186, 187, 188, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357], "binesh": [1050, 1051], "binet": [1044, 1049], "bing": [1040, 1041], "bingham": 1016, "binned_numer": [210, 228], "binom": 1000, "binomi": [146, 149, 414, 554, 560, 562, 1000, 1048, 1051], "bio": 271, "biocsklearn": 1023, "bioinformat": [631, 994], "biola": [1052, 1053], "biologi": 51, "biometrika": [883, 895], "biostatist": [409, 478], "bipartit": [404, 453, 512, 1009], "biprateep": 1046, "birch": [2, 72, 80, 98, 182, 321, 364, 389, 446, 449, 513, 1025, 1029, 1030, 1038, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1053], "birch_model": 78, "bird": [584, 721, 757, 1004], "birodkar": [1039, 1040, 1042], "bischl": 369, "bisect": [2, 72, 76, 91, 92, 93, 94, 95, 178, 182, 264, 443, 447, 513, 1025, 1048], "bisect_km": 321, "bisect_mean": 443, "bisecting_strategi": [407, 443], "bisectingkmean": [2, 79, 407, 447, 1048, 1049, 1050], "bisector": 71, "bishop": [533, 535, 542, 744, 800, 1000, 1005, 1019], "bistochast": [404, 451], "biswadip": 1044, "biswaroop": 1049, "bit": [44, 53, 65, 87, 110, 124, 208, 212, 285, 308, 339, 351, 358, 362, 370, 373, 389, 393, 395, 414, 415, 584, 591, 661, 837, 933, 934, 1001, 1005, 1022, 1034, 1037, 1040, 1042, 1043, 1046, 1047, 1048, 1051, 1052], "bithash": 643, "bithash_": 643, "bitli": 1028, "bitmap": 372, "bittarello": 1047, "bjerr": 1042, "bla": [362, 363, 373, 376, 381, 383, 781, 1034, 1042, 1043, 1045, 1046, 1052], "black": [44, 49, 50, 51, 53, 64, 71, 80, 83, 89, 90, 112, 113, 119, 121, 123, 143, 160, 163, 169, 170, 174, 175, 178, 181, 185, 186, 192, 198, 200, 201, 203, 210, 211, 212, 216, 219, 222, 223, 228, 237, 247, 253, 256, 293, 303, 304, 306, 333, 348, 355, 356, 375, 393, 400, 407, 414, 417, 556, 557, 634, 1010, 1011, 1020], "blackberri": 314, "blackburn": [1037, 1040], "blackd0t": 1044, "blair": [46, 370], "blakeflei": 1040, "blame": 375, "blanc": 314, "blanchard": [1038, 1039], "blank": [94, 380, 994, 1020], "blazestorm001": 1053, "bldgtype": 144, "bleed": 1028, "blei": [412, 537, 800], "bleich": [186, 1011], "bleki": 1046, "blend": [143, 155, 314, 389, 411], "bli": [363, 373, 387], "blind": [120, 123, 182, 209, 350, 412, 534, 542, 1025], "blink": 339, "blis_num_thread": 363, "blob": [2, 62, 70, 71, 78, 80, 91, 96, 98, 375, 383, 407, 448, 513], "blobs_param": 237, "block": [2, 293, 308, 321, 370, 372, 375, 380, 383, 389, 404, 407, 410, 413, 452, 453, 462, 473, 479, 480, 488, 489, 512, 514, 698, 951, 1007, 1009], "block_siz": [473, 479, 480, 1038], "blocker": [379, 1052], "blocknum": 48, "blockwis": [404, 1000], "blog": [321, 362, 375, 381, 383, 390, 1045], "blogpost": 380, "blondel": [0, 397, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1047], "blood": [165, 238, 372], "bloom": [384, 968], "blown": 342, "blue": [47, 49, 53, 59, 60, 64, 71, 112, 119, 121, 135, 138, 142, 149, 150, 152, 155, 157, 163, 174, 176, 190, 193, 198, 200, 208, 233, 241, 261, 262, 263, 268, 304, 313, 318, 324, 330, 356, 372, 407, 412, 1051], "blueski": 379, "blueviolet": [224, 294, 338], "blum": 1041, "blyston": [1044, 1045], "bmaisonn": 1046, "bmalezieux": 1047, "bmatrix": [404, 996], "bmc": 1014, "bme": [1052, 1053], "bmi": [165, 198, 200, 248, 372, 1012], "bmreinig": 1048, "bmug": 58, "bmva": 674, "bmvc": [674, 1000], "bo": [64, 1046], "board": 0, "boat": 322, "bob": [1035, 1041], "bobyrev": 1041, "boca": 1000, "bodega": 314, "bodenhof": [404, 722], "bodi": [48, 103, 165, 248, 322, 372], "body_bow": 103, "body_stat": 103, "boe": 52, "boechat": 1041, "boenisch": 1045, "boerner": 1048, "boersma": 1040, "bogazici": 372, "bogdan": 1034, "boggavarapu": 1046, "bohl": [1046, 1048], "bohn\u00e9": 1047, "boil": [135, 378, 389, 409], "boilerpl": [244, 377, 1028], "boisberrang": [0, 396, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "bold": [94, 147, 200, 206, 375], "boll": 1000, "bolleddula": [1052, 1053], "bolmier": [1045, 1046, 1050], "boltzmann": [2, 106, 182, 201, 203, 302, 503, 661, 716, 833, 863, 864, 865, 867, 893, 1025, 1029, 1030, 1036], "bommarito": [1037, 1038], "bonald": 1049, "bone": [223, 348], "bonei": 1053, "bonferroni": 268, "bonu": [228, 373, 375], "bonusmalu": [210, 228], "boo": [165, 372], "book": [103, 443, 447, 449, 837, 842, 846, 1000, 1001, 1002, 1005, 1046], "booktitl": 0, "bool": [83, 100, 113, 181, 228, 357, 375, 377, 419, 420, 421, 422, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 459, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 516, 520, 523, 524, 525, 528, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 576, 583, 584, 585, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 700, 701, 703, 705, 706, 710, 711, 712, 714, 715, 716, 717, 729, 730, 731, 732, 733, 734, 741, 744, 745, 757, 759, 764, 766, 770, 772, 777, 781, 785, 786, 787, 788, 790, 792, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 817, 821, 822, 825, 826, 827, 830, 831, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 923, 924, 925, 926, 927, 929, 931, 932, 933, 934, 944, 945, 946, 951, 952, 965, 966, 968, 974, 976, 984, 989, 990, 991, 992, 994, 1043, 1046, 1047], "bool_": 212, "boolean": [2, 133, 244, 357, 370, 375, 377, 384, 408, 414, 415, 416, 464, 562, 563, 583, 584, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 609, 610, 632, 635, 636, 639, 652, 674, 702, 781, 836, 842, 863, 870, 890, 924, 929, 987, 994, 1000, 1006, 1011, 1014, 1020, 1034, 1037, 1039, 1040, 1041, 1043, 1044, 1045, 1047, 1048, 1049, 1052], "boom": 1052, "boost": [2, 14, 47, 53, 104, 134, 135, 136, 139, 140, 142, 152, 155, 158, 176, 182, 187, 188, 193, 207, 212, 218, 233, 267, 269, 304, 309, 312, 314, 321, 324, 376, 381, 389, 406, 416, 448, 466, 467, 490, 497, 502, 521, 554, 555, 560, 561, 562, 563, 565, 566, 635, 636, 637, 638, 744, 745, 751, 753, 793, 803, 806, 807, 808, 824, 830, 833, 868, 880, 881, 1000, 1004, 1023, 1025, 1026, 1030, 1034, 1035, 1037, 1039, 1040, 1041, 1043, 1047], "booster": 1039, "boosting_error": 135, "boostingcolumntransform": 155, "boostingdecis": 414, "booth": 1041, "bootstrap": [138, 139, 146, 180, 271, 280, 319, 411, 414, 555, 556, 557, 558, 559, 564, 565, 566, 939, 974, 1000, 1034, 1035, 1037, 1039, 1042, 1044, 1047], "bootstrap_featur": [414, 556, 557], "bootstrap_indic": 271, "borchmann": 1049, "border": [446, 1044], "borderaxespad": 112, "borderpad": 355, "borderwidth": 141, "borg": [693, 697, 1001], "borgn": 1047, "bori": [1038, 1046, 1050], "borja": 1038, "born": 1040, "borovec": 1048, "borovikova": 1045, "bosch": 1047, "bossan": [1046, 1048, 1049, 1050, 1052], "bossch": [0, 397, 1041, 1042, 1043, 1047], "boston": 1028, "bot": [375, 379, 1009, 1048, 1051, 1052, 1053], "botelho": 1046, "both": [31, 44, 45, 47, 49, 50, 53, 55, 59, 63, 64, 65, 71, 78, 88, 89, 98, 104, 110, 112, 116, 117, 126, 128, 133, 138, 141, 142, 144, 145, 150, 154, 155, 158, 160, 161, 163, 165, 169, 176, 178, 184, 185, 186, 187, 192, 196, 197, 198, 200, 203, 210, 211, 212, 214, 215, 216, 218, 228, 234, 243, 244, 245, 253, 254, 255, 256, 257, 258, 262, 268, 269, 270, 271, 275, 277, 279, 281, 288, 300, 308, 312, 313, 317, 319, 323, 326, 330, 331, 336, 341, 343, 350, 351, 352, 357, 358, 362, 363, 364, 368, 369, 370, 373, 375, 377, 379, 381, 382, 384, 387, 388, 389, 390, 393, 398, 401, 403, 404, 405, 407, 408, 409, 410, 411, 412, 414, 415, 417, 420, 437, 446, 452, 462, 468, 475, 482, 483, 484, 485, 488, 489, 497, 498, 501, 503, 506, 508, 509, 510, 535, 539, 541, 548, 552, 556, 557, 558, 565, 566, 567, 568, 579, 590, 591, 593, 599, 609, 610, 630, 635, 636, 646, 660, 661, 662, 675, 677, 679, 681, 690, 702, 707, 715, 719, 732, 733, 734, 739, 741, 760, 764, 770, 777, 781, 786, 787, 790, 791, 792, 798, 806, 807, 809, 826, 836, 864, 865, 879, 881, 883, 895, 900, 905, 907, 908, 915, 917, 924, 937, 942, 952, 966, 978, 992, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1014, 1017, 1018, 1019, 1020, 1023, 1024, 1028, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "botstein": [631, 994], "bottleneck": [362, 381, 414, 448, 864, 865], "bottom": [46, 48, 52, 54, 55, 71, 73, 75, 78, 80, 85, 87, 96, 98, 119, 145, 153, 158, 210, 221, 237, 253, 255, 256, 259, 265, 268, 279, 293, 308, 329, 331, 339, 375, 405, 407, 413, 589, 919, 998, 1000, 1004, 1012, 1024], "bottom_h": 308, "bottou": [679, 680, 681, 1008, 1018], "bou": [1049, 1050], "boucaud": 1042, "boucher": 1041, "bouckaert": 268, "boukhobza": 1052, "boulard": 1051, "bould": 407, "bouldin": [2, 728], "bouleng": 1053, "boulogn": 1037, "boun": 372, "bound": [2, 65, 89, 173, 175, 177, 182, 212, 228, 236, 267, 382, 407, 412, 415, 417, 418, 444, 489, 503, 513, 524, 537, 564, 597, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 635, 638, 640, 653, 657, 661, 680, 708, 738, 791, 800, 801, 847, 848, 884, 896, 899, 900, 901, 909, 910, 911, 914, 937, 1000, 1003, 1004, 1007, 1016, 1018, 1019, 1021, 1025, 1042, 1045, 1046, 1048], "bound_": 537, "boundari": [2, 51, 54, 63, 64, 65, 67, 68, 71, 92, 94, 134, 137, 143, 153, 157, 170, 171, 173, 182, 186, 191, 201, 211, 219, 225, 237, 242, 245, 271, 283, 285, 296, 298, 299, 301, 303, 308, 310, 313, 327, 332, 334, 335, 336, 337, 338, 339, 341, 347, 348, 355, 371, 405, 414, 415, 417, 450, 456, 505, 513, 537, 550, 551, 570, 590, 591, 593, 634, 661, 738, 764, 803, 836, 849, 855, 857, 858, 859, 882, 886, 903, 904, 909, 911, 912, 915, 937, 998, 1000, 1007, 1010, 1014, 1017, 1018, 1019, 1025, 1034, 1036, 1038, 1047, 1048, 1049, 1051], "bounding_ax_": [382, 635], "boundscheck": [363, 376], "bourassa": 414, "bourbeau": [1041, 1042, 1043], "bourboux": 1045, "bourguignat": 1039, "bournhonesqu": 1044, "bousquet": 903, "boutili": 1016, "boutsidi": 412, "bow": 408, "bown": 1040, "bowyer": 1052, "box": [44, 50, 67, 89, 186, 187, 231, 285, 308, 312, 382, 412, 414, 513, 556, 557, 883, 895, 919, 921, 1004, 1005, 1011, 1014, 1020, 1042, 1050], "boxcox": 1053, "boxplot": [50, 112, 148, 185, 188, 282, 317], "boxplot_runtim": 50, "boxstyl": [49, 310], "boy": 1048, "boyd": 1000, "boyl": [1051, 1052], "boyuan": [1038, 1039, 1040], "bp": [50, 148, 165, 198, 200, 372, 1012], "bpo": 881, "br": 137, "br_estim": 180, "bracket": [375, 1000], "bradi": 1041, "bradlei": [165, 372, 1000], "bradshaw": [1037, 1038, 1041], "bradypu": [51, 301, 370, 499], "bradypus_variegatus_0": 51, "brain": 369, "branch": [362, 373, 375, 378, 379, 407, 414, 442, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 915, 916, 917, 918, 920, 1007, 1011, 1020], "branching_factor": 442, "brand": [390, 393], "brandon": [1040, 1041, 1048, 1049], "brandt": 1045, "brandyn": 1034, "brault": 1041, "braun": 1042, "bravi": 1040, "braycurti": [450, 457, 702, 781, 782, 783, 1007], "braycurtisdist": 702, "brc": [407, 442], "brdav": [1052, 1053], "bre": [2, 637, 1020], "bread": 1028, "breadth": [847, 848, 852, 1028, 1036], "breadth_first": [847, 848, 852], "break": [2, 56, 75, 81, 103, 113, 182, 200, 216, 244, 255, 285, 320, 329, 334, 350, 352, 375, 379, 381, 388, 407, 469, 513, 642, 777, 781, 784, 800, 880, 887, 892, 909, 912, 1000, 1003, 1012, 1014, 1019, 1024, 1025, 1034, 1035, 1041, 1042, 1044, 1046, 1050], "break_ti": [347, 909, 912, 1019, 1044], "breakdown": [112, 113, 227, 682, 1000], "breakdown_": 682, "breast": [2, 165, 368, 501, 1012, 1030, 1039], "breast_canc": 331, "breast_cancer_data": 165, "brecht": 644, "bredin": 1038, "bredlund": 1053, "breiman": [187, 411, 414, 517, 518, 519, 556, 557, 565, 566, 637, 915, 916, 1012, 1020], "brekk": 1049, "brendan": [74, 440, 454, 1050, 1051, 1052], "brenden": 1048, "brenner": 1004, "breno": [1041, 1042], "brent": [1038, 1042, 1043], "brentfagan": 1043, "bresson": 1053, "brett": [1037, 1039, 1040, 1041, 1042, 1049], "brettingen": 1040, "breuer": 1045, "breunig": [407, 450, 457, 853, 1010], "breve": 1050, "brevin": [1050, 1051], "brew": [146, 373, 393], "brian": [0, 397, 711, 1004, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1044, 1045, 1047, 1048], "brice": [1046, 1047], "bridg": [387, 1001], "brief": [375, 1002], "briefli": [277, 374, 388, 414, 993, 1044], "brier": [2, 62, 63, 65, 405, 712], "brier1950": 1004, "brier_scor": 62, "brier_score_loss": [2, 62, 63, 167, 405, 1004, 1042, 1043, 1044, 1052], "brigata": 372, "bright": 339, "brighter": 177, "brigi": [1045, 1046], "brigitta": [1044, 1045, 1046, 1050, 1052, 1053], "bring": [185, 308, 412, 679, 681, 1001, 1028], "british": 415, "brittl": [75, 407], "broad": [375, 389, 1023], "broadcast": 630, "broader": [310, 1000, 1027], "broadli": [389, 407], "brocchini": 1046, "brochart": 1051, "brockherd": 1036, "brodersen": 711, "broke": 1041, "broken": [393, 411, 601, 602, 638, 723, 929, 1004, 1020, 1037, 1041, 1042, 1043, 1045, 1048], "brook": [1037, 1038, 1046], "brought": [184, 554, 555, 558, 559, 560, 561, 565, 566, 567, 915, 916, 917, 918], "brown": [51, 119, 301, 370, 499, 631, 994, 1039, 1041, 1042, 1043, 1046], "browser": [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 184, 185, 186, 187, 188, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 375, 383, 1014, 1051], "broyden": 1000, "brr": 192, "brr_poli": 192, "brr_score": 192, "bruce": [1044, 1045], "brucher": [0, 397, 1034], "brummitt": [1041, 1042], "brunak": 746, "brunner": 1038, "bruno": [1045, 1046, 1047, 1052], "brutal": 339, "brute": [288, 387, 402, 411, 418, 444, 446, 450, 457, 635, 636, 691, 692, 847, 848, 849, 850, 851, 853, 855, 857, 858, 859, 1011, 1030, 1038, 1042, 1046, 1049, 1050, 1051, 1052], "bry": 219, "bryan": [1034, 1037, 1043, 1044, 1047], "br\u00f6mmel": [1048, 1049], "br\u00fblade": 314, "bsa": 767, "bsas_in_radian": 767, "bscikit": 1034, "bsd": [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 184, 185, 186, 187, 188, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 317, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 381, 387], "bsh": 1049, "bsmtfinsf1": [144, 155], "bsmtfinsf2": 144, "bsmthalfbath": 144, "bsmtunfsf": 155, "bspline": 886, "bsplines_": [211, 886], "bsr": [933, 934, 1047], "bt": 415, "btol": [675, 677], "buck": 630, "budarz": 1047, "buddha": 1039, "budget": [0, 144, 842, 843, 844, 845, 846, 993], "bueno": 767, "buffer": [84, 1047, 1052], "buffer_mb": 1034, "bug": [244, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 373, 377, 378, 379, 380, 383, 387, 389, 1024, 1034, 1035, 1036, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "bugfix": [1034, 1048], "buguen": 1034, "buhmann": 711, "build": [0, 2, 7, 17, 36, 44, 47, 56, 69, 79, 89, 101, 107, 125, 135, 143, 145, 152, 158, 162, 164, 179, 180, 182, 185, 218, 273, 276, 285, 287, 288, 305, 306, 309, 314, 315, 352, 358, 362, 363, 364, 371, 378, 379, 380, 381, 389, 393, 400, 407, 411, 414, 415, 442, 490, 502, 504, 525, 554, 555, 556, 557, 558, 559, 560, 561, 564, 565, 566, 567, 587, 588, 590, 591, 593, 630, 631, 633, 694, 716, 717, 804, 808, 812, 821, 827, 829, 868, 885, 887, 915, 916, 917, 918, 920, 947, 951, 993, 994, 1001, 1004, 1008, 1010, 1014, 1019, 1020, 1023, 1024, 1025, 1027, 1028, 1034, 1037, 1039, 1040, 1041, 1043, 1046], "build_analyz": [415, 590, 591, 593, 1044], "build_preprocessor": [415, 590, 591, 593, 1044], "build_projection_oper": 54, "build_token": [58, 415, 590, 591, 593], "build_tool": [375, 379, 383], "builder": [48, 50, 346, 379], "buildtool": 373, "built": [2, 26, 67, 117, 133, 135, 136, 143, 145, 187, 218, 271, 285, 301, 317, 326, 355, 357, 362, 370, 373, 375, 376, 379, 381, 383, 384, 387, 388, 389, 393, 401, 407, 408, 411, 414, 416, 445, 504, 554, 555, 556, 557, 560, 561, 562, 563, 590, 591, 595, 599, 642, 643, 644, 645, 646, 649, 650, 655, 661, 663, 664, 665, 666, 675, 676, 677, 678, 684, 806, 807, 814, 838, 841, 847, 848, 917, 918, 956, 987, 1000, 1004, 1005, 1017, 1018, 1020, 1023, 1028, 1034, 1037, 1038, 1040, 1046, 1052], "builtin": 1019, "buitinck": [0, 397, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041], "bulk": [277, 418, 444], "bulk_benchmark": 50, "bulk_benchmark_estim": 50, "bulk_runtim": 50, "bull": [1041, 1053], "buluttekin": 1044, "bumblebe": 1047, "bunch": [2, 51, 127, 244, 368, 369, 370, 464, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 508, 511, 568, 569, 570, 571, 635, 636, 637, 866, 867, 915, 916, 917, 918, 960, 963, 1028, 1039, 1041, 1044, 1046, 1050], "bundl": [1042, 1043], "bupu": 186, "burden": [375, 879, 1024], "bureau": 370, "buri": 375, "burjek": 1034, "burk": [0, 359, 1049], "burn": [1041, 1042], "burst": 1004, "busch": [1042, 1043, 1045], "bush": [46, 370], "busi": [44, 210, 268, 277, 325, 383, 387, 406, 791, 1000, 1004, 1028], "business_metr": 262, "business_scor": 262, "bussonni": [1034, 1046], "butler": [474, 1037, 1045, 1046], "butlerdavi": 474, "butter": 1028, "button": [375, 383], "butyugina": 1050, "buuren": [630, 994], "buzenet": [1049, 1050], "bv_bunch": 51, "bwignal": 1037, "bypass": [406, 408, 601, 649, 655, 825, 915, 916, 917, 918, 1050], "byproduct": 234, "byrd": 661, "byron": 1046, "byte": [87, 415, 487, 504, 509, 510, 584, 590, 591, 593, 968, 1034, 1041, 1042, 1049, 1052], "bz2": [56, 509, 510], "bz2file": 56, "bzip2": 1034, "b\u00e9gude": 314, "c": [2, 44, 46, 47, 48, 51, 52, 53, 58, 62, 63, 65, 67, 68, 71, 75, 76, 78, 79, 86, 90, 91, 93, 94, 95, 99, 104, 105, 107, 117, 119, 126, 127, 135, 137, 138, 143, 144, 151, 153, 154, 156, 157, 165, 170, 171, 172, 173, 177, 190, 199, 201, 202, 203, 204, 206, 208, 217, 219, 221, 222, 223, 224, 226, 227, 230, 232, 234, 235, 242, 243, 245, 249, 254, 256, 257, 258, 259, 261, 262, 263, 265, 266, 267, 268, 271, 273, 277, 279, 288, 291, 294, 296, 297, 298, 299, 301, 303, 304, 306, 308, 309, 310, 313, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 330, 333, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 350, 355, 356, 362, 363, 369, 370, 371, 372, 373, 375, 376, 378, 380, 383, 384, 387, 393, 394, 398, 404, 405, 407, 408, 409, 410, 411, 412, 414, 416, 420, 437, 442, 443, 446, 447, 449, 459, 468, 475, 524, 529, 535, 539, 541, 542, 548, 550, 551, 592, 609, 610, 613, 634, 642, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 673, 675, 676, 682, 688, 689, 691, 692, 695, 696, 711, 717, 718, 721, 734, 738, 744, 745, 761, 762, 803, 817, 826, 832, 834, 842, 843, 844, 845, 846, 847, 848, 854, 856, 863, 878, 880, 881, 882, 886, 888, 902, 905, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 918, 922, 933, 934, 966, 993, 996, 997, 999, 1000, 1001, 1002, 1004, 1006, 1007, 1009, 1011, 1014, 1016, 1018, 1019, 1020, 1023, 1028, 1034, 1035, 1037, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1050, 1052, 1053], "c0": [144, 240, 314], "c1": [99, 144, 177, 240, 314], "c2": [99, 144, 177, 240, 314], "c22": 322, "c26": 322, "c3": [99, 144, 314], "c4": [99, 314, 1026, 1030], "c5": [99, 1026, 1030], "c56poni": 1044, "c6": 99, "c99": 1023, "c_": [51, 63, 64, 65, 92, 112, 122, 143, 146, 152, 153, 171, 208, 223, 226, 237, 294, 311, 313, 333, 339, 347, 348, 407, 662, 717, 718, 721, 1004], "c_0": [996, 1002], "c_1": 1001, "c_2": [407, 1001], "c_2d_rang": 339, "c_e": 407, "c_i": [407, 1007], "c_j": [407, 1009], "c_jh_j": 1009, "c_k": 550, "c_option": 105, "c_p": 1000, "c_q": 407, "c_rang": 339, "c_scale": 346, "ca": [165, 372, 407, 442, 915, 916, 1016, 1020], "cabernet": 314, "cabin": 322, "cablevis": 52, "cabrera": 1044, "cach": [2, 53, 88, 100, 182, 269, 288, 289, 291, 296, 300, 326, 362, 363, 370, 377, 389, 441, 445, 450, 468, 486, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 503, 509, 510, 803, 849, 851, 867, 868, 905, 909, 910, 911, 912, 913, 988, 1007, 1019, 1025, 1037, 1041, 1042, 1043, 1044, 1046, 1047, 1049, 1050, 1052, 1053], "cache_path": 1007, "cache_s": [468, 905, 909, 910, 911, 912, 913, 1019], "cached_pip": [105, 408], "cachedir": [88, 105, 384, 408], "caching_dir": 988, "caherrera": 1047, "cai": 1047, "caicedo": 1034, "cailean": [1052, 1053], "cainei": [1052, 1053], "caio": [1040, 1042, 1044], "caj": 52, "caje": 1035, "cal_clf": 64, "cal_clf_prob": 64, "cal_hous": 370, "cal_scor": 64, "calcot": 1047, "calcsiz": 373, "calcul": [2, 47, 64, 65, 70, 81, 93, 112, 133, 134, 135, 139, 156, 181, 182, 188, 214, 215, 227, 242, 244, 267, 268, 274, 277, 278, 283, 287, 337, 343, 344, 358, 362, 377, 382, 389, 398, 404, 405, 407, 411, 412, 414, 418, 438, 443, 444, 446, 448, 450, 451, 453, 455, 456, 471, 472, 478, 481, 537, 548, 564, 565, 570, 599, 614, 623, 635, 636, 637, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 675, 676, 677, 678, 682, 684, 687, 691, 693, 695, 697, 710, 719, 732, 733, 738, 739, 741, 747, 757, 767, 772, 774, 775, 776, 777, 781, 784, 786, 787, 790, 791, 792, 795, 796, 798, 810, 812, 828, 832, 845, 847, 848, 885, 886, 887, 893, 897, 907, 908, 939, 953, 996, 998, 1000, 1001, 1002, 1004, 1006, 1007, 1008, 1012, 1014, 1017, 1019, 1025, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "cald": 902, "caleb": 1046, "calibr": [2, 53, 67, 138, 150, 157, 203, 228, 240, 262, 268, 270, 389, 398, 437, 438, 439, 513, 516, 565, 570, 612, 661, 662, 679, 712, 732, 744, 787, 790, 791, 802, 825, 833, 845, 904, 907, 941, 993, 1000, 1004, 1017, 1019, 1025, 1026, 1030, 1031, 1038, 1040], "calibrated_classifi": [64, 167], "calibrated_classifiers_": [64, 405, 437], "calibrated_clf": 437, "calibrated_df": [63, 65], "calibrated_forest": 993, "calibrated_scor": 167, "calibratedclassifiercv": [2, 62, 63, 64, 167, 358, 389, 398, 405, 679, 802, 825, 993, 1019, 1038, 1040, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "calibratedclassifiercvifittedcalibratedclassifiercv": 64, "calibration_curv": [2, 62, 405, 437, 438, 1043, 1048, 1052], "calibration_displai": [63, 65], "calibrationdisplai": [2, 63, 65, 405, 941, 1047, 1048, 1052, 1053], "california": [2, 145, 177, 180, 181, 308, 314, 319, 368, 372, 490, 1030], "calinski": [2, 713, 1040], "calinski_harabasz_scor": [2, 407, 1042], "calinski_harabaz_scor": [1040, 1042], "cali\u0144ski": 407, "call": [53, 54, 56, 81, 84, 88, 104, 119, 133, 140, 146, 162, 167, 169, 173, 175, 177, 184, 186, 198, 203, 207, 210, 211, 214, 228, 238, 244, 248, 250, 251, 262, 268, 269, 277, 281, 283, 285, 288, 290, 313, 315, 319, 320, 326, 350, 351, 352, 357, 362, 363, 364, 370, 375, 376, 377, 380, 381, 382, 383, 384, 387, 388, 389, 390, 393, 398, 403, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 417, 419, 430, 440, 443, 446, 447, 449, 450, 451, 452, 453, 454, 457, 460, 462, 464, 465, 468, 469, 474, 482, 483, 484, 488, 491, 493, 496, 498, 504, 509, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 579, 584, 585, 590, 591, 593, 599, 604, 609, 610, 612, 613, 614, 617, 623, 630, 631, 632, 633, 634, 635, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 682, 683, 692, 693, 694, 695, 696, 697, 698, 700, 702, 703, 704, 707, 735, 745, 758, 774, 777, 781, 782, 783, 784, 796, 800, 801, 803, 804, 805, 806, 807, 808, 809, 815, 817, 818, 819, 820, 821, 822, 823, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 852, 853, 856, 858, 863, 864, 865, 866, 867, 870, 871, 872, 874, 876, 877, 879, 884, 887, 888, 891, 896, 897, 898, 899, 900, 904, 907, 908, 909, 910, 912, 913, 916, 918, 926, 928, 940, 944, 950, 951, 960, 961, 963, 969, 970, 974, 977, 987, 992, 993, 994, 996, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1012, 1014, 1016, 1017, 1019, 1020, 1023, 1028, 1030, 1031, 1034, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "callabl": [2, 258, 272, 325, 389, 406, 411, 414, 415, 416, 418, 419, 441, 443, 444, 445, 446, 447, 449, 450, 452, 457, 459, 460, 464, 465, 466, 467, 532, 534, 536, 538, 540, 546, 547, 558, 559, 560, 561, 562, 563, 565, 566, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 613, 614, 623, 631, 633, 637, 642, 646, 662, 674, 676, 678, 691, 694, 695, 699, 714, 722, 735, 745, 774, 777, 781, 782, 783, 784, 795, 796, 803, 806, 807, 809, 817, 825, 826, 829, 830, 831, 832, 834, 847, 848, 849, 850, 851, 853, 855, 856, 857, 858, 859, 871, 880, 902, 903, 909, 910, 911, 912, 913, 944, 945, 946, 964, 970, 973, 987, 993, 1014, 1034, 1038, 1041, 1042, 1043, 1044, 1046, 1048, 1050, 1053], "callback": [532, 538, 540, 546, 547, 856, 944, 969, 1024, 1050, 1053], "callbl": 849, "calle": [2, 244, 961], "caller": [2, 244, 408, 649, 650, 655, 663, 664, 665, 684, 897, 898, 960, 961, 979, 980, 981, 1043], "callgrin": 381, "callgrind": 378, "calm": 52, "caltech": 350, "calvin": [1037, 1038], "calvo": [1042, 1043], "cambridg": [370, 412, 592, 842, 846, 1000, 1002, 1006], "came": 1003, "camera_ind": 54, "camil": [1042, 1050, 1051, 1053], "camila": 1044, "camilaagw": 1044, "camilo": 1040, "campello": [407, 446], "campustrampu": 1041, "can": [0, 11, 20, 26, 38, 44, 45, 47, 48, 49, 50, 52, 53, 55, 58, 59, 62, 63, 64, 65, 68, 69, 70, 73, 76, 78, 79, 81, 83, 87, 89, 90, 91, 92, 94, 95, 96, 97, 99, 103, 104, 105, 106, 110, 111, 112, 113, 114, 117, 122, 124, 125, 126, 127, 128, 130, 131, 133, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 160, 161, 162, 163, 164, 165, 167, 169, 174, 175, 176, 180, 181, 182, 184, 185, 186, 187, 188, 190, 192, 193, 194, 196, 198, 200, 202, 203, 204, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 218, 226, 227, 228, 230, 231, 232, 237, 238, 239, 240, 241, 243, 244, 247, 248, 251, 253, 254, 255, 256, 258, 259, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 275, 277, 279, 280, 281, 282, 283, 285, 287, 288, 290, 292, 293, 294, 295, 297, 304, 305, 306, 308, 309, 310, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 329, 330, 332, 333, 336, 337, 339, 342, 343, 346, 350, 351, 352, 356, 357, 358, 362, 363, 364, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 383, 384, 388, 389, 390, 392, 393, 394, 395, 398, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 430, 432, 437, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 454, 456, 457, 458, 459, 461, 462, 464, 465, 466, 467, 468, 472, 482, 483, 484, 487, 497, 500, 504, 509, 510, 513, 522, 525, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 581, 582, 583, 584, 585, 586, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 633, 635, 637, 638, 641, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 690, 692, 694, 695, 696, 697, 698, 701, 702, 703, 704, 705, 707, 710, 712, 714, 715, 721, 723, 724, 725, 726, 727, 729, 730, 732, 733, 735, 736, 740, 741, 742, 743, 746, 749, 755, 758, 759, 760, 761, 762, 766, 782, 783, 785, 786, 787, 788, 790, 791, 792, 797, 798, 800, 801, 802, 803, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 817, 818, 819, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 857, 858, 859, 864, 865, 866, 867, 868, 870, 871, 872, 874, 875, 876, 880, 881, 882, 885, 886, 887, 892, 899, 900, 904, 905, 907, 908, 909, 910, 912, 913, 915, 916, 917, 918, 919, 920, 923, 924, 926, 927, 929, 931, 933, 937, 939, 948, 950, 951, 958, 960, 963, 966, 969, 973, 974, 977, 984, 987, 988, 992, 993, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1023, 1024, 1027, 1028, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "canberra": [450, 457, 702, 781, 782, 783, 1007], "canberradist": 702, "cancel": [414, 415, 766], "cancer": [2, 165, 368, 406, 501, 595, 596, 854, 1012, 1030, 1039], "candela": 372, "candid": [107, 258, 266, 269, 276, 319, 364, 375, 379, 407, 414, 448, 450, 803, 806, 807, 815, 817, 1000, 1007, 1020, 1040], "candidate_idx": 267, "cannon": 1049, "cannot": [44, 53, 76, 90, 108, 114, 121, 126, 185, 186, 196, 210, 228, 244, 281, 308, 339, 346, 364, 374, 376, 381, 387, 389, 390, 395, 401, 407, 408, 409, 411, 412, 414, 415, 417, 465, 522, 539, 540, 541, 544, 548, 612, 613, 616, 617, 618, 620, 622, 623, 625, 626, 628, 654, 658, 695, 714, 720, 781, 806, 807, 854, 855, 857, 858, 859, 867, 868, 872, 877, 878, 889, 931, 933, 934, 944, 993, 994, 998, 1000, 1001, 1004, 1005, 1010, 1014, 1019, 1020, 1024, 1028, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "canon": [2, 52, 389, 405, 414, 482, 483, 485, 771, 1024, 1026, 1030], "canonic": 389, "cant": [1051, 1052], "cantor": [631, 994], "canuma": 1047, "canva": 52, "cao": 407, "cap": [404, 407, 758, 1004, 1043], "capabl": [89, 90, 117, 150, 174, 214, 234, 377, 389, 393, 1005, 1008, 1019, 1020, 1028, 1034, 1043, 1051], "capac": [150, 169, 187], "capit": [50, 63, 324, 497, 809, 826], "capitain": 1052, "cappion": [695, 1001], "cappuzzo": 1051, "capsiz": 331, "caption": 103, "captur": [2, 44, 49, 52, 53, 73, 75, 117, 147, 152, 160, 174, 185, 192, 196, 203, 210, 214, 259, 281, 287, 318, 339, 343, 383, 407, 414, 415, 416, 572, 590, 591, 593, 853, 970, 1004, 1009, 1017, 1021, 1046], "car": 210, "carbal": 1051, "card": 1042, "cardin": [73, 142, 148, 187, 188, 314, 315, 323, 407, 414, 463, 554, 555, 558, 559, 560, 561, 565, 566, 567, 682, 880, 881, 888, 915, 916, 917, 918, 1004, 1005, 1012, 1014, 1048, 1049], "cardiotocogram": 247, "care": [48, 89, 148, 185, 262, 285, 343, 362, 364, 379, 381, 387, 389, 390, 401, 406, 407, 409, 415, 437, 460, 469, 643, 661, 662, 669, 670, 671, 679, 680, 681, 698, 907, 1001, 1019, 1028, 1050], "carefulli": [282, 362, 405, 412, 1019], "carei": [1037, 1038, 1039, 1040, 1041, 1053], "carett": 1041, "cari": 1046, "carl": [174, 417, 613, 614, 617, 622, 625], "carla": 1050, "carlo": [0, 242, 365, 414, 417, 614, 644, 645, 996, 1009, 1034, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "carlson": 1041, "carlsson": 1037, "carmen": 314, "carnegi": 902, "caro": 1039, "carodorum": 314, "carol": [1040, 1041], "carolin": 1008, "caro\u00e7o": 1053, "carrascosa": [1028, 1038], "carre\u00f1o": 1049, "carri": [52, 68, 135, 181, 262, 268, 271, 276, 281, 304, 310, 352, 390, 415, 558, 559, 560, 561, 565, 566, 567, 915, 916, 917, 918, 1028], "carrillo": 1039, "carsten": 1047, "cart": [1026, 1030], "carter": [1040, 1041, 1049, 1052, 1053], "cartesian": [104, 404, 636, 1007, 1049], "cartman_nabana": 1044, "cartograph": 190, "cartographi": 1000, "caruana": [63, 65, 405, 437, 439], "carvaj": 1034, "casado": 1045, "casagrand": [1042, 1043], "casalegno": 1046, "cascad": 372, "case": [2, 31, 44, 47, 48, 53, 63, 65, 71, 73, 83, 86, 89, 91, 95, 100, 104, 105, 113, 117, 126, 128, 138, 140, 141, 147, 148, 155, 162, 164, 165, 167, 169, 176, 185, 186, 188, 196, 197, 200, 202, 210, 211, 212, 214, 215, 218, 224, 226, 227, 228, 237, 241, 242, 243, 244, 247, 248, 258, 261, 262, 265, 267, 268, 269, 271, 274, 275, 277, 285, 288, 291, 295, 305, 308, 310, 313, 315, 317, 320, 325, 326, 343, 350, 351, 352, 356, 357, 358, 362, 363, 364, 369, 370, 375, 376, 377, 379, 380, 381, 382, 384, 387, 388, 389, 390, 393, 398, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 437, 440, 443, 444, 446, 447, 451, 453, 463, 464, 465, 467, 474, 497, 509, 510, 516, 540, 542, 543, 544, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 583, 584, 590, 593, 595, 596, 599, 604, 608, 611, 613, 614, 628, 630, 631, 633, 635, 650, 651, 656, 659, 660, 661, 662, 664, 666, 669, 671, 672, 675, 677, 678, 679, 683, 685, 686, 687, 688, 689, 690, 702, 706, 711, 712, 715, 721, 723, 724, 726, 729, 731, 732, 733, 737, 738, 741, 745, 746, 748, 749, 751, 753, 756, 757, 759, 766, 781, 784, 786, 787, 788, 790, 791, 792, 793, 797, 799, 801, 803, 806, 807, 809, 817, 821, 826, 827, 828, 829, 830, 831, 832, 834, 836, 844, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 867, 874, 876, 877, 880, 881, 882, 885, 886, 887, 888, 891, 897, 898, 899, 900, 907, 909, 912, 915, 916, 922, 927, 929, 939, 951, 952, 992, 993, 994, 996, 998, 999, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1010, 1011, 1014, 1018, 1019, 1020, 1023, 1024, 1028, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "caselli": [1042, 1043], "cash": 1000, "cashman": 1044, "casino": [1048, 1049], "caspersen": 1053, "cass": 1040, "cassi": 314, "cast": [51, 53, 87, 210, 231, 369, 390, 415, 497, 647, 648, 649, 655, 659, 660, 663, 664, 665, 666, 667, 668, 676, 678, 968, 1041, 1042, 1043, 1044, 1047, 1049, 1051], "castachick": 1045, "castello": 1038, "castor": 1045, "castro": 1053, "caswel": [1047, 1050], "cat": [52, 104, 186, 187, 247, 320, 321, 322, 323, 324, 325, 370, 415, 488, 584, 715, 721, 757, 786, 888, 1004, 1014, 1043, 1044, 1046], "cat_column": 247, "cat_linear_processor": 155, "cat_proc": [239, 318], "cat_selector": 155, "cat_str": 58, "cat_tree_processor": 155, "catajara": 1044, "catalfo": 1042, "catalin": 645, "catastroph": [262, 315, 766, 1024], "catch": [80, 96, 305, 363, 383, 384], "catch_warn": [80, 96, 244, 304, 305], "categor": [2, 44, 104, 134, 140, 150, 155, 182, 185, 186, 187, 210, 228, 247, 249, 251, 262, 315, 320, 322, 323, 326, 364, 367, 369, 370, 380, 389, 408, 415, 466, 467, 489, 490, 497, 506, 562, 563, 583, 584, 609, 610, 635, 636, 651, 661, 662, 672, 683, 712, 830, 842, 843, 844, 845, 846, 868, 870, 874, 875, 878, 880, 881, 888, 902, 903, 924, 994, 1000, 1004, 1011, 1012, 1020, 1023, 1024, 1025, 1026, 1027, 1028, 1030, 1034, 1035, 1038, 1039, 1042, 1044, 1046, 1049, 1050, 1051, 1052], "categori": [2, 26, 58, 80, 96, 103, 104, 144, 155, 185, 186, 210, 218, 225, 247, 262, 269, 304, 305, 310, 314, 315, 319, 322, 324, 332, 350, 351, 352, 369, 370, 384, 407, 408, 414, 415, 417, 488, 497, 498, 504, 562, 563, 651, 661, 662, 672, 683, 746, 761, 762, 843, 880, 881, 888, 944, 945, 946, 994, 1000, 1001, 1002, 1006, 1012, 1040, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "categorical_column": [44, 144, 185, 187, 247, 467], "categorical_columns_selector": 247, "categorical_columns_subset": 144, "categorical_crossentropi": [1044, 1048], "categorical_encod": 187, "categorical_featur": [44, 104, 144, 150, 186, 262, 314, 319, 320, 321, 322, 324, 380, 387, 414, 562, 563, 635, 636, 1011, 1042, 1046, 1049, 1051], "categorical_preprocessor": [249, 314], "categorical_transform": 104, "categoricaldtyp": 387, "categoricalnb": [2, 842, 844, 845, 846, 1006, 1044, 1045, 1046, 1047, 1049], "categories_": [880, 881, 888, 1014, 1042, 1049], "categoris": [944, 946], "category_1_fold": 504, "category_2_fold": 504, "category_count_": 843, "category_s": 351, "categr": 1012, "caterpillar": 52, "cathi": [1038, 1044], "catindex": 186, "catplot": 258, "caught": [356, 375, 383, 401], "caus": [44, 63, 65, 147, 170, 185, 208, 210, 214, 215, 228, 287, 315, 322, 343, 352, 358, 373, 380, 405, 407, 412, 413, 415, 417, 443, 447, 449, 459, 510, 533, 584, 591, 613, 614, 781, 842, 843, 844, 846, 871, 880, 882, 885, 886, 933, 934, 994, 1000, 1004, 1012, 1014, 1017, 1024, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1050, 1051, 1052, 1053], "causal": [182, 183, 206, 660, 788, 833, 1025], "causat": 185, "caution": [185, 262, 379, 440, 454, 1042], "cautiou": 1041, "caveat": [411, 416, 417], "cawlei": [273, 1004], "cax": [67, 172, 279], "ca\u00f1ardo": 1037, "cb": [172, 241, 257], "cbar_ax": 279, "cbar_kw": [192, 196], "cc": 373, "cc18": 369, "cc_home": [915, 916], "cca": [2, 245, 410, 483, 485, 1005, 1038, 1042, 1043, 1044, 1046, 1048, 1052], "ccat": 370, "ccf2002": 996, "cclauss": 1042, "cco": 350, "ccp_alpha": [317, 354, 558, 559, 560, 561, 565, 566, 915, 916, 917, 918, 1020, 1044], "ccp_path": [915, 916, 917, 918], "cd": [121, 165, 372, 373, 375, 379, 381, 412, 471, 472, 478, 532, 538, 540, 541, 544, 546, 547, 548, 1000, 1039, 1049], "cdef": 376, "cdf": 268, "cdist": 1047, "cdivis": 376, "cdot": [268, 343, 404, 407, 412, 413, 417, 617, 618, 622, 625, 626, 873, 996, 998, 1004, 1008, 1014], "cdrig": 1048, "cdt": 58, "cea": [842, 1006], "ceballo": 1048, "ceder": [791, 1004], "ceethinwa": [1046, 1047], "ceh": 1049, "ceil": [150, 247, 558, 559, 560, 561, 564, 565, 566, 567, 596, 674, 806, 807, 915, 916, 917, 918, 1018], "celelibi": 1043, "celeo": 1038, "celeux": 529, "cell": [51, 52, 59, 64, 69, 104, 105, 140, 142, 151, 152, 155, 158, 162, 165, 174, 185, 186, 187, 194, 238, 239, 240, 244, 248, 249, 250, 251, 258, 262, 266, 268, 269, 275, 280, 282, 301, 306, 314, 318, 319, 321, 322, 324, 330, 356, 357, 372, 380, 695, 1004, 1005, 1040, 1048], "cellular": 54, "celsiu": [186, 1011], "cemlyn": 1052, "cen": 746, "censor": 1023, "censu": 370, "center": [0, 2, 37, 44, 47, 48, 49, 54, 62, 64, 70, 71, 73, 74, 76, 78, 79, 83, 84, 87, 89, 90, 93, 94, 95, 97, 98, 113, 126, 130, 145, 146, 147, 148, 163, 165, 181, 186, 194, 203, 205, 210, 211, 221, 222, 233, 234, 237, 238, 247, 253, 256, 257, 263, 269, 279, 293, 296, 298, 304, 308, 310, 311, 321, 330, 337, 339, 340, 341, 345, 351, 352, 370, 371, 372, 380, 407, 409, 410, 412, 413, 414, 420, 440, 442, 443, 446, 447, 448, 449, 452, 454, 459, 460, 461, 462, 463, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 482, 483, 484, 485, 502, 513, 525, 535, 536, 542, 545, 551, 608, 611, 613, 614, 635, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 664, 665, 666, 667, 668, 669, 670, 671, 674, 675, 676, 677, 678, 679, 681, 693, 697, 699, 800, 872, 873, 876, 885, 887, 897, 898, 907, 908, 998, 1000, 1001, 1003, 1011, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1045, 1046, 1047, 1048, 1051], "center1": 100, "center2": 100, "center3": 100, "center4": 100, "center_": 885, "center_box": [94, 513], "centers_0": 311, "centers_1": 311, "centers_init": 93, "cento": 373, "centr": 154, "central": [0, 54, 212, 370, 376, 407, 1010, 1023], "centrality_scor": 56, "centroid": [2, 78, 91, 92, 110, 182, 289, 296, 311, 321, 351, 371, 398, 407, 442, 443, 446, 447, 448, 449, 452, 459, 460, 462, 505, 550, 634, 854, 1025, 1026, 1030, 1034, 1038, 1041, 1046, 1050], "centroids_": [442, 446, 854], "ceo": 1028, "cerda": 1048, "certain": [53, 89, 145, 150, 185, 215, 227, 244, 268, 288, 312, 343, 358, 370, 371, 375, 377, 379, 389, 392, 401, 403, 407, 412, 416, 641, 652, 656, 661, 666, 687, 867, 872, 907, 993, 996, 1000, 1001, 1004, 1005, 1008, 1014, 1019, 1023, 1039, 1043, 1046, 1049], "certainli": [87, 103, 185, 351, 406], "certainti": [268, 377, 1004], "ceshin": 1040, "cest": 1004, "cetina": 1046, "cf": [315, 406, 407, 410, 442, 703, 1000, 1014, 1024], "cflag": 373, "cft": 407, "cftree": 442, "cg": [306, 661, 662, 675, 677, 690, 1000, 1038, 1039, 1041, 1045, 1047, 1048, 1051, 1052], "cga": 177, "cgi": 900, "cgohlk": [1037, 1038], "cgroup": [1047, 1048], "cgsavard": [1044, 1045], "ch6": 531, "chacon": 708, "chac\u00f3n": [407, 708], "chad": 1051, "chadi": 1042, "chai": [1046, 1049, 1050, 1053], "chain": [2, 36, 102, 108, 135, 182, 240, 276, 279, 286, 288, 291, 306, 358, 367, 387, 389, 417, 497, 503, 542, 614, 630, 661, 741, 803, 833, 836, 838, 839, 840, 841, 867, 868, 887, 993, 994, 1005, 1009, 1021, 1025, 1028, 1030], "chain_jaccard_scor": 287, "chain_method": [838, 1052], "chain_method_": 838, "chaitanya": 1045, "chaitanyamog": 1046, "chakhchoukh": 113, "chakravarti": [638, 640], "chalearn": 1004, "challeng": [52, 155, 169, 186, 192, 203, 228, 237, 364, 370, 371, 401, 407, 409, 462, 472, 1004, 1010, 1028], "chalmer": 1048, "chalmerlow": 1037, "chalulu": 1049, "chan": [0, 365, 845, 887, 1052, 1053], "chanc": [2, 72, 74, 83, 135, 160, 182, 188, 210, 218, 225, 228, 268, 274, 277, 278, 314, 346, 351, 358, 374, 406, 407, 411, 703, 705, 707, 708, 711, 719, 758, 760, 789, 798, 832, 1004, 1012, 1020, 1025, 1050], "chance_level_": [703, 705, 1050], "chance_level_kw": [247, 703, 705, 1050], "chandra": [1044, 1045, 1048], "chang": [2, 47, 63, 64, 65, 121, 125, 126, 138, 141, 148, 167, 170, 180, 184, 185, 188, 199, 211, 212, 214, 215, 248, 249, 262, 263, 268, 275, 278, 282, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 329, 339, 343, 352, 356, 357, 358, 362, 363, 364, 370, 377, 378, 379, 380, 383, 387, 389, 398, 407, 411, 414, 415, 417, 419, 427, 432, 437, 440, 443, 444, 447, 449, 452, 454, 459, 462, 464, 465, 467, 468, 471, 472, 478, 482, 483, 484, 494, 495, 497, 505, 509, 510, 513, 514, 515, 523, 528, 532, 534, 536, 537, 538, 539, 540, 541, 542, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 577, 579, 580, 581, 582, 583, 584, 590, 591, 592, 593, 595, 596, 599, 604, 613, 614, 616, 617, 618, 620, 622, 623, 625, 626, 628, 630, 633, 638, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 690, 693, 695, 697, 703, 707, 710, 715, 719, 720, 732, 733, 739, 740, 758, 760, 781, 786, 787, 788, 790, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 812, 817, 821, 822, 824, 825, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 852, 853, 854, 857, 858, 864, 865, 866, 867, 869, 870, 871, 872, 873, 874, 879, 880, 886, 887, 888, 895, 896, 901, 902, 903, 905, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 921, 931, 933, 934, 946, 951, 962, 969, 970, 973, 993, 994, 995, 1003, 1004, 1005, 1007, 1014, 1017, 1018, 1019, 1020, 1024, 1032, 1033], "changed_onli": 1045, "changedbehaviorwarn": 1046, "changedbehaviourwarn": 1043, "changelog": [322, 375, 379, 383, 389, 1032, 1053], "changing_param": 47, "changing_param_valu": 47, "changyao": [1049, 1050], "channel": [363, 370, 373, 375, 393, 415, 494, 495, 585, 586, 588, 589, 1027], "channel_prior": 373, "chapman": 1000, "chapter": [121, 358, 377, 407, 412, 414, 417, 531, 533, 535, 617, 622, 625, 646, 994, 997, 1000, 1019, 1020], "char": [415, 590, 591, 593, 1034], "char_wb": [415, 590, 591, 593], "charact": [352, 375, 380, 389, 415, 504, 509, 510, 590, 591, 593, 919, 1009, 1034, 1047, 1049], "character": [76, 228, 354, 407, 411, 1001], "characteris": 1007, "characterist": [2, 80, 96, 165, 174, 182, 237, 238, 250, 260, 262, 263, 265, 270, 308, 358, 370, 372, 380, 405, 406, 411, 414, 417, 504, 505, 626, 641, 661, 705, 709, 711, 730, 785, 791, 792, 822, 833, 836, 874, 912, 1000, 1025], "chardet": 415, "chardetect": 415, "charg": [0, 262, 375], "charikar": 996, "charl": [65, 262, 767, 1034, 1037, 1040, 1044, 1046, 1049], "charli": [1041, 1042, 1050], "charlton": 1041, "charra": [1049, 1051, 1052], "charron": [1028, 1037, 1038, 1045, 1046, 1047], "charset": [1034, 1036], "charset_error": 1036, "chart": [73, 145, 273, 395, 1005, 1037], "chartbeat": 1028, "chase": [52, 1034], "chasnovski": 1045, "chat": 1028, "chatterje": 1045, "chaudhuri": 446, "chauhan": [1042, 1043, 1049, 1050, 1053], "chaumond": [1028, 1042], "chauvin": 746, "chavez": [46, 370], "chawla": 1044, "chayant": 1041, "chazalon": 1048, "cheaper": [186, 407, 417, 676, 996, 1000], "cheat": [53, 339, 395, 1008, 1018, 1036], "chebee7i": 1038, "chebyshev": [450, 457, 702, 781, 782, 783, 1007], "chebyshevdist": 702, "check": [2, 42, 44, 45, 48, 56, 81, 87, 90, 125, 133, 141, 155, 169, 182, 184, 186, 187, 197, 198, 200, 210, 231, 244, 254, 260, 262, 277, 285, 320, 326, 330, 357, 362, 363, 373, 374, 375, 376, 377, 378, 379, 381, 382, 384, 385, 387, 388, 389, 393, 394, 398, 401, 408, 421, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 491, 503, 509, 510, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 576, 583, 584, 585, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 612, 613, 614, 630, 631, 632, 633, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 690, 691, 692, 693, 694, 695, 696, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 831, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 933, 934, 935, 944, 945, 946, 956, 958, 959, 960, 964, 965, 987, 988, 989, 991, 992, 999, 1000, 1001, 1004, 1019, 1020, 1025, 1028, 1030, 1034, 1035, 1037, 1041, 1045, 1046, 1047, 1048, 1049, 1051, 1053], "check_arrai": [2, 326, 377, 384, 468, 535, 905, 992, 1038, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "check_classifier_multioutput": 1044, "check_consistent_length": 2, "check_cv": [2, 389, 1039], "check_decision_proba_consist": 1041, "check_estim": [2, 317, 326, 377, 389, 946, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1053], "check_estimator_sparse_arrai": 1052, "check_estimator_sparse_data": 1052, "check_estimator_sparse_matrix": 1052, "check_estimator_sparse_tag": 1053, "check_estimators_fit_returns_self": 946, "check_estimators_pickl": 1051, "check_fit_idempot": 1043, "check_increas": 2, "check_input": [535, 549, 649, 650, 655, 663, 664, 665, 684, 690, 915, 916, 917, 918, 1042], "check_invers": [408, 465, 871, 1014, 1042, 1048, 1049], "check_is_fit": [2, 90, 133, 244, 378, 384, 389, 1044, 1047, 1048, 1053], "check_memori": [2, 384, 389, 1041], "check_metadata": 244, "check_methods_sample_order_invari": [1046, 1048], "check_methods_subset_invari": [1042, 1048], "check_nam": [576, 944, 945, 946, 1053], "check_non_neg": 1053, "check_pairwise_arrai": [1043, 1053], "check_param": 992, "check_random_st": [2, 95, 226, 232, 240, 246, 377, 384, 389], "check_regressor_multioutput": 1044, "check_requires_y_non": 1048, "check_sample_weight_equivalence_on_dense_data": 1053, "check_sample_weight_equivalence_on_sparse_data": 1053, "check_sample_weights_invari": 1053, "check_sample_weights_pandas_seri": 1042, "check_scalar": [2, 1048], "check_scor": [2, 389, 1052, 1053], "check_set_param": 1042, "check_symmetr": 2, "check_transformer_data_not_an_arrai": 1044, "check_transformers_unfitted_stateless": 1050, "check_x_i": [2, 384, 992, 1038, 1042, 1043, 1048, 1053], "checkbox": 375, "checked_cv": 827, "checker": [2, 379, 827], "checkerboard": [2, 59, 404, 451, 453, 512, 514], "checking_statu": 262, "checkingclassifi": 1044, "checklist": [378, 379], "checkout": [373, 375, 379, 383], "checksum": [492, 1046], "cheeseman": 372, "chege": 1048, "chemic": 372, "chemometr": 372, "chen": [110, 111, 409, 414, 420, 475, 729, 759, 996, 1004, 1037, 1040, 1041, 1042, 1044, 1047, 1048, 1049, 1050, 1053], "chenal": [1043, 1044, 1046], "cherkasski": 1000, "chernei": [1052, 1053], "chernyi": 1048, "cherri": 379, "cherti": 1038, "cherubin": 1040, "chestervil": 322, "cheuk": [1042, 1043], "cheung": 1035, "chevali": 1046, "chevalli": 1051, "chevron": 52, "chi": [2, 104, 112, 135, 312, 367, 416, 520, 594, 597, 598, 600, 601, 602, 606, 607, 608, 611, 641, 642, 643, 644, 645, 761, 762, 1030, 1034, 1039, 1040], "chi2": [2, 104, 415, 416, 452, 583, 594, 597, 598, 600, 601, 602, 607, 608, 611, 623, 641, 642, 643, 644, 645, 646, 762, 768, 777, 1034, 1041, 1048], "chi2_featur": 645, "chi2_kernel": [2, 403, 641, 645, 761, 768, 1002, 1035, 1053], "chi2_stat": 606, "chi2sampl": 641, "chiang": 1042, "chiara": [0, 366, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "chibuik": 1047, "chicco": [1052, 1053], "chief": 1028, "chieh": [1041, 1042], "chigurupati": 1046, "chih": [661, 1039], "chilamkurthi": 1040, "child": [150, 244, 322, 350, 357, 363, 377, 387, 389, 398, 407, 414, 442, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 915, 916, 917, 918, 960, 961, 963, 1020, 1041, 1053], "child_idx": 77, "children": [357, 407, 414, 441, 445, 463, 567, 1038, 1051], "children_": [77, 441, 445, 463], "children_left": 357, "children_right": 357, "chime": 374, "chin": [372, 1038], "china": [407, 507, 508, 586, 589], "chines": 1023, "chinmaya": 1041, "chinthala": 1041, "chiotelli": 1043, "chip": [403, 1028], "chisquar": 312, "chistyakov": 1053, "chitteti": 1048, "chkoar": 1041, "chloe": 1048, "cho": 1045, "choe": 1043, "choi": [1000, 1052], "choic": [2, 44, 47, 65, 76, 81, 89, 99, 103, 110, 128, 150, 169, 170, 176, 180, 200, 211, 247, 261, 262, 266, 268, 271, 282, 293, 315, 319, 350, 351, 358, 362, 373, 380, 389, 393, 407, 409, 411, 413, 414, 416, 417, 452, 462, 471, 472, 473, 474, 475, 476, 478, 539, 541, 542, 548, 560, 641, 650, 651, 659, 661, 662, 664, 672, 683, 695, 708, 745, 836, 849, 850, 855, 857, 858, 884, 887, 896, 898, 907, 908, 937, 993, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1010, 1012, 1017, 1018, 1019, 1020, 1041, 1044, 1045, 1049, 1050], "choleski": [111, 210, 228, 384, 471, 472, 478, 528, 614, 651, 653, 654, 657, 658, 659, 661, 662, 672, 675, 677, 683, 685, 686, 690, 800, 801, 1000, 1037, 1041, 1043, 1046, 1049, 1050, 1053], "cholesky_delet": 384, "cholesterol": [165, 372], "chong": 537, "choo": [1049, 1050], "choos": [44, 51, 52, 80, 81, 84, 87, 94, 96, 100, 110, 143, 155, 165, 185, 188, 204, 245, 262, 263, 273, 277, 280, 354, 358, 362, 363, 364, 377, 380, 383, 388, 389, 401, 405, 406, 407, 409, 411, 414, 415, 418, 443, 444, 447, 449, 459, 524, 533, 539, 560, 561, 584, 604, 661, 662, 675, 677, 682, 690, 691, 692, 696, 729, 759, 803, 806, 807, 817, 874, 907, 908, 915, 916, 917, 918, 993, 994, 995, 999, 1000, 1001, 1002, 1003, 1004, 1007, 1014, 1017, 1018, 1019, 1030, 1036, 1037, 1041, 1043, 1045], "choose_check_classifiers_label": 1044, "choose_random_sampl": 377, "choraria": 1046, "chose": [78, 185], "chosen": [48, 59, 81, 106, 155, 170, 185, 186, 200, 211, 227, 245, 261, 262, 263, 265, 271, 282, 351, 358, 362, 387, 406, 407, 409, 410, 414, 417, 440, 446, 449, 451, 453, 454, 460, 497, 524, 536, 558, 559, 560, 561, 562, 563, 565, 566, 650, 656, 659, 661, 662, 664, 666, 674, 679, 680, 681, 682, 683, 693, 697, 797, 800, 801, 803, 806, 807, 817, 837, 856, 907, 908, 915, 916, 917, 918, 951, 993, 996, 998, 1000, 1001, 1003, 1004, 1005, 1010, 1011, 1018, 1020, 1042, 1050, 1051], "chou": [1041, 1042], "choudhari": [1038, 1039, 1048, 1050], "choudhri": 1052, "chowdhuri": [1042, 1048], "choyal": [1041, 1042], "chri": [0, 397, 1034, 1037, 1042, 1043, 1044, 1045, 1048], "chrissobel": 1047, "christ": 58, "christian": [0, 58, 350, 351, 370, 396, 1028, 1034, 1035, 1038, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "christianwaldmann": 1049, "christin": [1049, 1050, 1053], "christo": [1043, 1044, 1046, 1048, 1051], "christof": [1038, 1039], "christoph": [186, 412, 417, 533, 613, 614, 617, 622, 625, 800, 1000, 1005, 1035, 1039, 1042, 1045, 1046, 1047, 1048, 1049], "christopherlim98": 1048, "chrome": 1014, "chronolog": [370, 498], "chu": [854, 1050], "chuan": 1008, "chugh": 1046, "chuliang": 1047, "chun": [1045, 1046, 1048, 1049, 1050], "chung": [1041, 1042], "chunk": [2, 48, 84, 362, 363, 407, 412, 418, 444, 449, 468, 539, 781, 784, 835, 836, 842, 843, 844, 845, 846, 905, 1006, 1041, 1042, 1043, 1044, 1045], "chunk_siz": 1035, "chunker": 415, "church": [900, 1016], "chyi": [1037, 1038, 1039, 1040, 1041], "ci": [89, 363, 378, 379, 1006, 1040, 1042], "ciccolella": [695, 1001], "cice": [1011, 1048], "cichocki": [412, 539, 541, 548], "cimport": [376, 384, 1042], "cindi": [1039, 1047, 1051, 1052], "cio": 369, "cipri\u00e1n": 1048, "circl": [2, 71, 94, 126, 153, 154, 235, 245, 295, 298, 304, 308, 310, 330, 343, 356, 371, 379, 383, 407, 452, 462, 515, 523, 767, 1019], "circle1": 100, "circle2": 100, "circle3": 100, "circle4": 100, "circleci": [53, 173, 175, 177, 178, 238, 254, 306, 322, 375], "circlecl": 0, "circuit": [58, 1001], "circular": 54, "circumst": [128, 228, 1007, 1023], "circumstanti": 210, "cirru": [0, 375], "cisco": 52, "citat": [0, 369, 372, 387], "cite": [369, 387, 407], "citi": [408, 415, 466], "citizen": 1014, "city_categori": 408, "city_london": 408, "city_pari": 408, "city_sallisaw": 408, "cityblock": [76, 80, 407, 450, 457, 765, 781, 782, 783, 1007], "cividi": 76, "ciyou": 661, "cj": [1006, 1037, 1038, 1039, 1040, 1041], "cjlin": [190, 369, 487, 509, 510, 661, 1037], "ckdtree": [418, 444, 1036], "cl": [0, 48, 52, 382, 389, 917], "clabel": [172, 221], "clae": 1042, "clai": 1034, "claim": [182, 191, 375, 464, 497, 553, 651, 672, 683, 709, 748, 753, 755, 833, 868, 871, 872, 880, 887, 1000, 1025], "claimamount": 228, "claimnb": [210, 228], "clair": 1034, "clamp": [903, 1017], "clang": [373, 376], "clara": [369, 1046], "clare": 1044, "clarifi": [383, 390, 796], "clariti": [163, 375, 383], "clark": 52, "class": [2, 4, 28, 31, 44, 48, 49, 50, 51, 54, 58, 61, 62, 63, 65, 67, 71, 76, 88, 89, 90, 92, 104, 105, 116, 119, 125, 126, 127, 129, 133, 134, 141, 150, 151, 156, 165, 167, 169, 170, 172, 173, 175, 177, 178, 180, 182, 185, 186, 190, 191, 201, 202, 203, 209, 218, 222, 225, 226, 231, 237, 244, 245, 247, 253, 254, 255, 260, 261, 262, 263, 268, 270, 274, 278, 279, 282, 285, 287, 288, 291, 293, 294, 296, 297, 298, 299, 304, 313, 317, 321, 323, 324, 325, 326, 328, 330, 331, 334, 335, 337, 339, 340, 343, 347, 350, 351, 352, 355, 357, 364, 367, 369, 370, 371, 372, 375, 376, 377, 379, 380, 381, 382, 384, 387, 388, 393, 398, 401, 402, 403, 405, 407, 408, 410, 412, 416, 417, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 461, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 487, 488, 489, 491, 493, 494, 495, 496, 497, 498, 501, 503, 504, 505, 509, 510, 511, 513, 515, 516, 520, 523, 524, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 575, 577, 579, 583, 584, 585, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 691, 692, 693, 694, 695, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712, 715, 716, 717, 718, 719, 720, 721, 723, 725, 730, 732, 733, 734, 736, 738, 739, 740, 741, 742, 743, 744, 746, 757, 758, 760, 785, 786, 787, 789, 790, 791, 792, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 830, 831, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 891, 899, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 938, 939, 940, 941, 942, 944, 946, 956, 959, 960, 961, 964, 969, 971, 973, 974, 987, 993, 994, 995, 996, 998, 999, 1000, 1001, 1003, 1005, 1006, 1008, 1011, 1012, 1014, 1015, 1017, 1020, 1024, 1025, 1026, 1028, 1030, 1031, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "class1_1": 157, "class2_1": 157, "class_0": [218, 372, 511], "class_1": [218, 372, 511], "class_2": [372, 511], "class_count_": [842, 843, 844, 845, 846], "class_id": [277, 278], "class_index": 89, "class_label": [389, 558, 562, 565, 661, 662, 669, 671, 677, 678, 679, 802, 825, 915, 917, 939, 1019], "class_likelihood_ratio": [2, 271, 1004, 1049], "class_log_prior_": [842, 843, 844, 846], "class_memb": 74, "class_member_mask": 83, "class_nam": [137, 261, 888, 919, 920, 921, 1020, 1050], "class_name0": [423, 442, 443, 445, 447, 449, 482, 483, 484, 485, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 642, 643, 644, 645, 691, 692, 695, 851, 856, 859, 863, 873, 899, 900], "class_name1": [423, 442, 443, 445, 447, 449, 482, 483, 484, 485, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 642, 643, 644, 645, 691, 692, 695, 851, 856, 859, 863, 873, 899, 900], "class_name2": [423, 442, 443, 445, 447, 449, 482, 483, 484, 485, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 642, 643, 644, 645, 691, 692, 695, 851, 856, 859, 863, 873, 899, 900], "class_of_interest": [67, 277, 634, 1051], "class_prior": [370, 842, 843, 844, 846, 1035, 1038], "class_prior_": [552, 845, 854], "class_protein_loc": 285, "class_sep": [164, 298, 516, 802, 825], "class_weight": [2, 46, 341, 389, 558, 562, 565, 661, 662, 669, 671, 677, 678, 679, 680, 907, 909, 912, 914, 915, 917, 938, 939, 993, 1018, 1019, 1034, 1035, 1037, 1038, 1039, 1040, 1042, 1048, 1049], "class_weight_": [909, 912, 1049], "class_weight_vect": 938, "classes_": [133, 219, 238, 244, 277, 328, 329, 375, 377, 389, 432, 437, 438, 550, 551, 552, 554, 556, 558, 560, 562, 565, 568, 570, 595, 596, 613, 634, 661, 662, 669, 671, 677, 678, 679, 700, 703, 705, 791, 802, 803, 806, 807, 817, 825, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 849, 854, 857, 864, 867, 874, 875, 878, 888, 902, 903, 904, 907, 909, 912, 915, 917, 920, 1004, 1015, 1018, 1035, 1038, 1039, 1041, 1044, 1046], "classic": [56, 206, 234, 253, 259, 343, 372, 379, 409, 411, 412, 443, 447, 449, 459, 493, 501, 505, 511, 542, 635, 636, 917, 918, 998, 1000, 1003, 1006, 1014, 1023, 1034, 1035, 1039, 1048], "classif": [2, 14, 20, 31, 32, 39, 41, 43, 46, 47, 50, 55, 58, 61, 62, 63, 65, 68, 71, 104, 105, 106, 110, 111, 116, 119, 124, 135, 137, 139, 141, 142, 143, 148, 150, 151, 153, 157, 160, 161, 162, 164, 165, 168, 174, 175, 185, 186, 190, 191, 201, 202, 203, 204, 210, 218, 220, 221, 222, 223, 225, 236, 238, 242, 243, 247, 250, 256, 257, 260, 261, 265, 266, 267, 268, 269, 277, 282, 283, 285, 286, 289, 290, 296, 297, 298, 300, 301, 302, 303, 305, 310, 311, 312, 313, 328, 333, 334, 335, 339, 342, 344, 345, 346, 347, 348, 349, 351, 352, 358, 362, 364, 368, 369, 370, 372, 377, 380, 384, 388, 389, 402, 405, 406, 407, 408, 411, 412, 414, 415, 416, 424, 437, 469, 475, 482, 487, 488, 489, 491, 493, 494, 495, 496, 497, 498, 500, 501, 503, 504, 505, 511, 513, 515, 516, 520, 521, 523, 524, 542, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 565, 566, 567, 568, 570, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 606, 607, 608, 611, 612, 613, 614, 616, 617, 625, 634, 635, 636, 646, 661, 662, 669, 671, 677, 678, 679, 700, 706, 708, 711, 715, 716, 718, 719, 721, 729, 730, 732, 733, 737, 738, 741, 744, 746, 757, 759, 761, 762, 764, 785, 786, 787, 789, 790, 791, 792, 797, 799, 802, 803, 804, 806, 807, 808, 809, 817, 821, 822, 825, 826, 827, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 841, 842, 843, 844, 845, 846, 849, 854, 856, 857, 863, 864, 865, 867, 871, 874, 879, 880, 881, 882, 887, 888, 891, 893, 902, 903, 904, 907, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 920, 921, 923, 936, 939, 948, 993, 994, 996, 997, 998, 1001, 1002, 1006, 1009, 1011, 1012, 1014, 1015, 1017, 1022, 1023, 1025, 1026, 1027, 1028, 1030, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "classifi": [2, 31, 46, 47, 48, 49, 61, 64, 66, 67, 69, 71, 90, 103, 104, 105, 106, 107, 126, 135, 136, 137, 138, 139, 142, 143, 146, 153, 156, 157, 161, 162, 163, 164, 171, 182, 187, 188, 190, 201, 202, 208, 210, 217, 219, 222, 225, 228, 237, 240, 242, 244, 245, 250, 261, 262, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 285, 286, 290, 296, 297, 299, 303, 306, 310, 319, 320, 324, 326, 327, 328, 329, 331, 332, 334, 335, 337, 338, 340, 341, 342, 343, 347, 348, 352, 370, 372, 375, 377, 380, 387, 389, 398, 406, 407, 408, 411, 415, 416, 417, 424, 432, 433, 434, 436, 437, 438, 439, 488, 489, 497, 505, 513, 515, 516, 523, 532, 537, 538, 543, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 564, 565, 567, 568, 569, 570, 571, 595, 596, 604, 608, 613, 625, 632, 634, 635, 636, 652, 661, 662, 669, 671, 674, 675, 676, 677, 678, 679, 700, 701, 703, 705, 706, 710, 711, 712, 714, 715, 716, 721, 723, 725, 729, 730, 732, 733, 735, 737, 738, 741, 742, 743, 744, 746, 757, 759, 785, 786, 787, 790, 791, 792, 797, 799, 802, 803, 806, 807, 809, 817, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 854, 855, 857, 858, 863, 864, 865, 867, 868, 874, 887, 888, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 921, 923, 926, 927, 942, 944, 993, 994, 996, 999, 1000, 1001, 1004, 1005, 1006, 1009, 1012, 1014, 1017, 1018, 1019, 1020, 1023, 1024, 1025, 1026, 1028, 1030, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1051, 1052, 1053], "classification_data": 47, "classification_report": [2, 46, 69, 103, 162, 266, 306, 328, 329, 825, 1004, 1036, 1038, 1042, 1043, 1044, 1046, 1050, 1052, 1053], "classificationcriterion": 1042, "classifier_": [90, 244], "classifier_01": 325, "classifier_05": 325, "classifier__c": 104, "classifier__criterion": 249, "classifier__max_depth": 249, "classifier__max_featur": 249, "classifier__min_samples_leaf": 187, "classifier__n_estim": 249, "classifier__n_neighbor": 290, "classifier_idx": 67, "classifier_model": 290, "classifier_other_threshold": 802, "classifier_tag": [926, 1053], "classifier_tun": 825, "classifierchain": [2, 287, 389, 398, 839, 841, 1041, 1046, 1049, 1051, 1052], "classifiermixin": [2, 133, 244, 375, 377, 389, 411, 927, 1045, 1053], "classifiertag": [2, 926], "classify__c": 105, "classmethod": [382, 438, 634, 635, 700, 701, 702, 703, 704, 705, 809, 826], "classnameprefixfeaturesoutmixin": [2, 377, 431, 1049], "claudio": [372, 1048, 1049, 1051, 1052, 1053], "claus": [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 184, 185, 186, 187, 188, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 317, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 387], "clauss": 1051, "clb": 186, "clean": [86, 104, 209, 358, 367, 373, 413, 1010, 1014, 1044], "cleaner": 100, "cleanli": [96, 1034], "cleanup": [375, 1034], "clear": [44, 89, 94, 105, 185, 186, 313, 370, 374, 375, 377, 387, 388, 389, 405, 408, 413, 921, 922, 993, 998, 1045, 1046, 1047, 1052], "clear_data_hom": 2, "clearer": [235, 1019, 1053], "clearli": [44, 94, 124, 186, 242, 343, 374, 375, 387, 389, 412, 414, 1005, 1011], "clegg": 1037, "clemen": 1038, "clement": [1041, 1042, 1046], "clenaghan": [1039, 1040], "cleveland": 370, "cleverless": 1036, "clf": [46, 50, 51, 52, 62, 63, 64, 65, 68, 69, 74, 85, 88, 92, 97, 104, 139, 146, 149, 151, 156, 161, 162, 164, 171, 173, 188, 201, 204, 208, 214, 217, 219, 222, 223, 224, 225, 226, 233, 238, 239, 242, 245, 251, 257, 265, 269, 273, 274, 276, 279, 280, 291, 294, 295, 296, 299, 303, 310, 313, 317, 318, 319, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 350, 354, 355, 357, 362, 370, 388, 389, 401, 408, 411, 414, 416, 438, 550, 551, 554, 556, 558, 560, 562, 564, 565, 568, 595, 596, 599, 612, 635, 637, 641, 642, 643, 644, 645, 647, 648, 651, 655, 661, 662, 663, 664, 665, 669, 671, 672, 675, 676, 677, 678, 679, 680, 683, 700, 701, 703, 705, 714, 791, 803, 806, 807, 817, 835, 836, 837, 839, 842, 843, 844, 845, 846, 853, 854, 864, 907, 909, 911, 912, 915, 919, 921, 994, 996, 1000, 1004, 1005, 1007, 1008, 1010, 1011, 1018, 1019, 1020], "clf1": [70, 156, 157, 414, 570], "clf2": [70, 156, 157, 377, 414, 570], "clf3": [70, 156, 157, 377, 414, 570], "clf__": 269, "clf__alpha": 269, "clf__c": 408, "clf_descr": 350, "clf_en_lr": 202, "clf_err": 139, "clf_isoton": 62, "clf_isotonic_scor": 62, "clf_l1_lr": 202, "clf_l2_lr": 202, "clf_list": [63, 65], "clf_name": [50, 350], "clf_no_weight": 348, "clf_pf": 845, "clf_prob": 64, "clf_sample_weight": 244, "clf_score": [62, 167], "clf_sel": 188, "clf_select": 161, "clf_sgd": 224, "clf_sigmoid": 62, "clf_sigmoid_scor": 62, "clf_weight": 348, "click": [239, 249, 269, 318, 324, 375, 377, 383, 395, 1028], "clickabl": 1048, "client": 377, "clifford": 1047, "cliffordemmanuel": 1047, "clim": 172, "climatologi": 405, "climb": [407, 448, 461], "clinton": 58, "clip": [63, 65, 228, 240, 308, 339, 638, 679, 744, 877, 1014, 1038, 1045, 1046, 1053], "clmbst": 1046, "clock": 44, "clone": [2, 90, 147, 177, 186, 244, 306, 324, 358, 373, 375, 378, 379, 381, 383, 389, 405, 408, 417, 437, 465, 570, 571, 599, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 809, 826, 831, 834, 838, 841, 867, 868, 904, 1034, 1040, 1042, 1046, 1050, 1051, 1053], "clone_kernel": [613, 614, 1044], "clone_with_theta": [177, 417, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628], "cloned_classifi": 432, "close": [8, 48, 52, 56, 62, 63, 65, 74, 75, 81, 88, 94, 100, 110, 111, 114, 126, 138, 144, 147, 151, 155, 169, 170, 173, 174, 175, 176, 177, 185, 187, 196, 214, 216, 231, 237, 243, 247, 253, 259, 268, 269, 281, 282, 294, 295, 308, 317, 339, 343, 344, 351, 358, 370, 375, 377, 378, 379, 387, 389, 390, 405, 407, 410, 411, 414, 417, 450, 455, 472, 509, 510, 533, 564, 631, 646, 650, 664, 675, 677, 690, 708, 749, 800, 821, 822, 842, 843, 844, 846, 853, 934, 993, 997, 998, 1000, 1001, 1003, 1004, 1005, 1007, 1010, 1011, 1014, 1019, 1023, 1028, 1037, 1041, 1042, 1043], "close_pric": 52, "closer": [44, 73, 124, 126, 154, 165, 169, 186, 192, 214, 343, 352, 405, 407, 412, 449, 554, 631, 715, 849, 850, 855, 857, 858, 859, 1004, 1019, 1041], "closest": [65, 81, 98, 214, 377, 407, 440, 442, 443, 447, 448, 449, 459, 656, 782, 783, 837, 847, 848, 849, 850, 851, 853, 855, 857, 858, 859, 995, 998, 1005, 1007], "closur": 56, "cloud": [79, 116, 120, 122, 182, 383, 412, 534, 542, 695, 1004, 1022, 1023, 1025], "cloudpickl": 1030, "clouldpickl": 401, "cls_info": 50, "cls_name": [48, 50], "cls_runtim": 48, "cls_stat": 48, "cls_valu": 50, "club": 372, "clue": [370, 383, 1001], "clump": 234, "clust": [99, 450, 457], "cluster": [2, 49, 54, 55, 56, 57, 59, 62, 78, 79, 81, 84, 85, 87, 88, 91, 93, 95, 96, 103, 112, 133, 137, 143, 151, 160, 177, 188, 231, 233, 234, 235, 241, 247, 253, 254, 255, 256, 269, 294, 295, 297, 311, 318, 322, 328, 329, 330, 332, 341, 349, 350, 352, 357, 364, 368, 370, 372, 375, 377, 380, 387, 389, 402, 403, 408, 413, 415, 418, 421, 422, 425, 433, 434, 436, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 488, 503, 504, 505, 512, 513, 514, 515, 516, 523, 531, 542, 545, 554, 565, 567, 591, 592, 593, 634, 694, 695, 698, 707, 708, 713, 717, 718, 720, 722, 728, 734, 739, 740, 758, 760, 781, 782, 789, 795, 796, 798, 800, 801, 859, 860, 868, 872, 879, 887, 926, 942, 944, 964, 987, 994, 1001, 1003, 1007, 1010, 1012, 1014, 1017, 1021, 1023, 1024, 1025, 1028, 1029, 1030, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041], "cluster_1": 151, "cluster_2": 151, "cluster_al": [448, 461], "cluster_cent": [74, 95, 97, 98, 461], "cluster_center_indic": [440, 454], "cluster_centers_": [78, 79, 84, 92, 94, 95, 97, 98, 121, 321, 351, 440, 443, 447, 448, 449], "cluster_centers_indic": [74, 454], "cluster_centers_indices_": [74, 440], "cluster_data": 93, "cluster_doc": 58, "cluster_hierarchy_": [407, 450], "cluster_id": [188, 351], "cluster_id_to_feature_id": 188, "cluster_label": [90, 94], "cluster_method": 450, "cluster_optics_dbscan": [2, 99, 407], "cluster_optics_xi": 2, "cluster_qr": [81, 407, 452, 462, 1048], "cluster_s": 351, "cluster_selection_epsilon": 446, "cluster_selection_method": 446, "cluster_std": [64, 74, 80, 83, 89, 90, 91, 93, 94, 96, 97, 98, 222, 237, 256, 311, 341, 371, 513], "cluster_word": 58, "clusterer_": 90, "clustering_algorithm": [79, 80, 96], "clustering_metr": 92, "clustermixin": [2, 377, 1051], "clusters_std": 341, "clyde": 1039, "cl\u00e9ment": [1043, 1047, 1049], "cm": [44, 46, 51, 52, 54, 59, 60, 62, 67, 68, 69, 74, 75, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 94, 95, 101, 112, 114, 121, 124, 137, 143, 163, 172, 173, 186, 219, 222, 223, 226, 231, 232, 233, 238, 241, 242, 246, 251, 261, 262, 263, 288, 291, 292, 294, 298, 301, 303, 305, 306, 308, 310, 319, 322, 328, 329, 333, 335, 336, 337, 339, 340, 341, 347, 348, 355, 372, 408, 700, 920, 1004, 1014, 1020], "cm2013": 407, "cm_bright": [68, 303, 310], "cm_displai": 238, "cm_piyg": 310, "cmap": [44, 45, 46, 51, 52, 54, 59, 60, 67, 68, 69, 71, 75, 76, 81, 82, 84, 85, 87, 88, 92, 112, 114, 121, 124, 131, 137, 143, 163, 172, 173, 186, 192, 196, 202, 219, 222, 223, 224, 226, 231, 232, 233, 241, 242, 246, 261, 263, 288, 292, 294, 296, 297, 299, 301, 303, 305, 306, 308, 310, 328, 329, 333, 335, 336, 337, 338, 339, 340, 341, 344, 347, 348, 355, 700], "cmap_bold": [296, 299], "cmap_cv": 263, "cmap_data": 263, "cmap_light": [296, 299], "cmcsa": 52, "cmd": 373, "cmu": 902, "cname": 78, "cnb": 1006, "cnp": 376, "cnx": 1042, "co": [2, 44, 52, 54, 57, 59, 75, 76, 103, 152, 154, 174, 182, 185, 211, 232, 268, 283, 321, 332, 350, 351, 352, 356, 379, 413, 415, 449, 451, 453, 488, 512, 593, 702, 722, 767, 798, 999, 1014, 1025, 1028, 1029, 1030], "co2": [168, 176, 182, 417, 497, 614, 618, 625, 626, 628, 1025, 1041], "co2_data": 174, "co2_kernel": 174, "coars": [44, 143, 381, 448, 461], "coarser": [143, 147], "coast": [51, 301], "coastlin": [51, 165, 301, 372], "coca": 52, "cock": [155, 1043], "cockburn": 1036, "coclust": [58, 404, 451, 514], "cocoa": 1028, "code": [2, 31, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 184, 185, 186, 187, 188, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 358, 362, 363, 369, 373, 374, 376, 378, 379, 384, 387, 389, 390, 393, 398, 401, 403, 406, 407, 414, 415, 442, 443, 447, 449, 459, 497, 527, 531, 532, 538, 539, 543, 544, 546, 547, 549, 567, 573, 583, 584, 649, 650, 653, 654, 655, 656, 657, 658, 659, 663, 664, 665, 666, 667, 668, 685, 686, 688, 689, 714, 835, 836, 837, 874, 881, 993, 1001, 1005, 1014, 1016, 1018, 1019, 1023, 1024, 1025, 1027, 1028, 1034, 1036, 1037, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "code_book_": 837, "code_init": [532, 546], "code_s": [285, 837, 1005], "codebas": [323, 358, 375, 376, 415, 1034, 1040], "codebook": [285, 567, 837], "codecov": 383, "codeofconduct": 375, "coder": [130, 543, 719], "codevig": 1040, "coef": [50, 88, 130, 184, 185, 192, 196, 202, 203, 205, 209, 213, 214, 215, 219, 225, 226, 251, 281, 305, 323, 347, 525, 649, 650, 652, 655, 656, 662, 663, 664, 665, 666, 672, 675, 677, 683, 684, 685, 686, 687, 688, 689, 690, 1008], "coef0": [190, 343, 345, 452, 536, 642, 643, 646, 778, 780, 909, 910, 911, 912, 913, 1002, 1019], "coef_": [47, 50, 54, 88, 116, 161, 162, 165, 184, 185, 192, 195, 196, 197, 199, 201, 202, 203, 204, 205, 206, 209, 213, 214, 215, 219, 225, 226, 245, 251, 281, 282, 315, 321, 337, 344, 347, 350, 358, 370, 377, 389, 410, 416, 465, 482, 483, 484, 550, 595, 596, 599, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 683, 907, 908, 909, 910, 911, 912, 913, 987, 998, 1000, 1018, 1019, 1034, 1036, 1039, 1041, 1046, 1048, 1051, 1052, 1053], "coef_agglomeration_": 88, "coef_en_lr": 202, "coef_i": 185, "coef_init": [649, 650, 655, 656, 663, 664, 665, 666, 669, 670, 671, 679, 680, 681, 684, 687], "coef_l": 199, "coef_l1_lr": 202, "coef_l2_lr": 202, "coef_lar": 199, "coef_lasso": 199, "coef_lasso_": 205, "coef_multi_task_lasso_": 205, "coef_p": 199, "coef_path": [656, 666, 687], "coef_path_": [653, 654, 657, 658, 1000], "coef_path_continu": [656, 666, 687], "coef_path_lar": [656, 666, 687], "coef_pl": 199, "coef_positive_lar": 199, "coef_ridg": 195, "coef_selection_": 88, "coeff": 683, "coeff_diff": 197, "coeffeci": 1043, "coeffici": [2, 26, 47, 50, 74, 83, 92, 94, 110, 111, 114, 121, 124, 162, 169, 182, 183, 184, 191, 195, 196, 197, 199, 202, 204, 205, 206, 207, 208, 212, 213, 225, 228, 251, 268, 282, 305, 315, 319, 320, 321, 343, 346, 350, 351, 352, 362, 371, 377, 389, 392, 409, 410, 412, 416, 417, 420, 430, 452, 465, 467, 473, 475, 476, 478, 479, 480, 481, 482, 483, 484, 497, 525, 527, 528, 532, 536, 538, 540, 543, 544, 549, 553, 555, 557, 559, 561, 563, 566, 569, 571, 584, 591, 595, 599, 611, 614, 617, 630, 638, 639, 642, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 694, 704, 706, 719, 722, 732, 737, 741, 746, 753, 756, 778, 780, 788, 789, 791, 795, 796, 799, 818, 830, 833, 840, 841, 850, 858, 865, 868, 880, 887, 907, 908, 909, 910, 911, 912, 913, 916, 918, 995, 998, 1000, 1018, 1019, 1025, 1034, 1038, 1039, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1051], "coefs_": [204, 305, 864, 865, 1008, 1039], "coefs_cf": 315, "coefs_enet": 199, "coefs_lar": 199, "coefs_lasso": 199, "coefs_no_cf": 315, "coefs_path": 662, "coefs_paths_": [662, 1044], "coefs_positive_enet": 199, "coefs_positive_lar": 199, "coefs_positive_lasso": 199, "coelho": [1035, 1037, 1038, 1042], "coelhudo": 1046, "cognit": [165, 372], "cohen": [2, 719, 1042], "cohen_kappa_scor": [2, 1004, 1039, 1041], "coher": 407, "cohort": 158, "coin": [52, 54, 56, 60, 72, 75, 76, 77, 80, 87, 88, 90, 96, 100, 101, 124, 182, 407, 415, 441, 462, 1016, 1025], "coincid": [173, 212, 417, 1004], "col": [53, 58, 63, 65, 74, 78, 83, 89, 93, 97, 98, 103, 106, 141, 156, 174, 230, 247, 347, 512, 514], "col_compl": 58, "col_idx": 60, "col_idx_shuffl": 59, "col_ind": [422, 451, 453], "col_indic": 150, "col_nam": 53, "col_split": 53, "cola": 52, "cold": 288, "cole": 1043, "coleman": [1035, 1036], "colgat": [52, 56], "colin": [46, 370, 1040], "collabor": 375, "collaps": [44, 186, 247, 308, 339, 387], "colleagu": 268, "collect": [2, 42, 47, 50, 52, 53, 58, 63, 106, 139, 150, 151, 158, 165, 174, 181, 188, 198, 204, 233, 240, 271, 275, 326, 351, 352, 362, 370, 372, 379, 389, 393, 411, 412, 414, 415, 446, 464, 554, 555, 556, 557, 558, 559, 560, 561, 564, 565, 566, 567, 570, 571, 583, 585, 586, 590, 591, 592, 593, 635, 732, 733, 741, 781, 786, 787, 790, 805, 809, 810, 812, 826, 974, 977, 993, 999, 1000, 1004, 1010, 1015, 1024, 1028, 1036, 1046], "colleg": [0, 184], "college_degre": 184, "collei": 1053, "collid": 415, "collin": 1037, "collinear": [185, 188, 215, 228, 414, 568, 651, 672, 683, 880, 1000, 1034, 1053], "collis": [351, 352, 415, 584, 591], "collot": [1048, 1049], "colombia": [51, 301, 370, 499], "colon": 375, "coloni": 370, "color": [44, 47, 48, 49, 50, 51, 52, 53, 59, 62, 63, 64, 65, 68, 70, 71, 74, 76, 78, 80, 81, 82, 83, 87, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 101, 110, 111, 112, 113, 114, 117, 119, 121, 122, 123, 125, 127, 128, 129, 130, 135, 136, 141, 143, 144, 146, 149, 150, 151, 152, 153, 155, 157, 163, 169, 171, 172, 173, 174, 175, 176, 177, 178, 181, 185, 187, 188, 192, 193, 195, 196, 198, 199, 200, 201, 205, 207, 208, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 224, 227, 228, 231, 232, 233, 235, 237, 241, 242, 243, 245, 248, 253, 254, 255, 256, 257, 258, 259, 262, 263, 267, 269, 271, 272, 273, 274, 275, 277, 278, 279, 281, 282, 287, 290, 293, 294, 295, 296, 299, 300, 301, 303, 308, 309, 310, 312, 313, 314, 318, 324, 330, 331, 333, 337, 338, 339, 340, 341, 343, 345, 346, 347, 355, 356, 370, 372, 383, 407, 415, 494, 495, 507, 585, 586, 1018, 1020, 1039, 1044, 1046, 1051, 1053], "color_continuous_scal": 269, "color_intens": 49, "color_it": [254, 258, 259], "color_map": 333, "color_palett": [73, 136, 150, 258], "colorbar": [44, 51, 67, 76, 121, 131, 151, 163, 170, 172, 173, 175, 186, 230, 241, 257, 279, 308, 339, 700, 1046], "colorbarbas": 308, "colorblind": [73, 136, 150], "coloring_matrix": [110, 111], "colormap": [121, 177, 339, 700, 1047], "colors_": 78, "colors_list": 141, "colour": [256, 372, 415, 589, 1005], "colt": [729, 759, 1004], "colton": 996, "columbia": 0, "column": [2, 44, 48, 53, 59, 60, 94, 102, 105, 108, 142, 143, 144, 147, 150, 152, 155, 165, 174, 180, 182, 184, 185, 186, 187, 188, 200, 210, 211, 214, 218, 228, 239, 246, 247, 248, 251, 258, 262, 268, 269, 279, 280, 282, 287, 305, 313, 314, 315, 319, 320, 321, 322, 324, 325, 350, 351, 352, 362, 369, 370, 372, 375, 377, 381, 384, 387, 388, 389, 404, 407, 408, 410, 412, 414, 415, 416, 419, 422, 451, 453, 464, 466, 467, 471, 472, 478, 487, 488, 489, 490, 491, 493, 495, 497, 501, 502, 503, 505, 506, 509, 510, 511, 512, 514, 516, 527, 532, 535, 538, 542, 543, 549, 556, 558, 559, 562, 563, 565, 566, 567, 568, 583, 584, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 609, 610, 613, 630, 633, 635, 636, 637, 649, 651, 655, 661, 663, 665, 667, 668, 672, 683, 688, 689, 700, 716, 721, 722, 732, 733, 741, 757, 766, 771, 772, 773, 776, 786, 787, 790, 791, 803, 806, 807, 817, 828, 833, 838, 841, 842, 843, 844, 845, 846, 847, 848, 867, 871, 872, 873, 874, 880, 881, 882, 886, 887, 888, 889, 891, 892, 893, 897, 898, 907, 909, 912, 915, 917, 924, 929, 933, 934, 939, 951, 966, 979, 980, 982, 990, 993, 994, 996, 1000, 1002, 1004, 1005, 1012, 1014, 1019, 1024, 1025, 1034, 1036, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "column_labels_": [59, 60, 404, 451, 453], "column_nam": 228, "column_or_1d": [2, 384, 1045, 1049], "column_result": 269, "column_stack": [77, 303, 310], "column_to_drop": 185, "column_tran": [228, 408], "column_transform": 325, "columnar": [369, 464, 1023], "columns_": [58, 404, 422, 451, 453], "columns_to_drop": 262, "columntransform": [2, 44, 103, 104, 155, 185, 186, 187, 210, 228, 239, 247, 249, 251, 314, 318, 320, 321, 322, 324, 367, 369, 387, 388, 398, 466, 467, 632, 872, 993, 994, 1030, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "columntransformercolumntransform": [104, 155, 185, 187, 239, 249, 314, 318, 321], "columntransformerinot": [155, 186], "columnwis": 412, "com": [52, 103, 288, 350, 370, 373, 375, 379, 380, 381, 383, 387, 407, 442, 535, 542, 674, 708, 1041, 1044], "coma": 1028, "comaniciu": [97, 407, 448], "comaprison": [613, 661, 912], "comb": 1048, "combat": [303, 412], "combett": 1053, "combin": [2, 20, 44, 52, 53, 59, 63, 65, 95, 103, 104, 106, 107, 108, 121, 127, 129, 130, 134, 136, 144, 145, 149, 150, 158, 169, 175, 180, 181, 182, 185, 196, 203, 210, 214, 227, 228, 234, 237, 239, 242, 268, 269, 277, 279, 280, 297, 304, 314, 319, 320, 322, 342, 343, 352, 355, 362, 367, 371, 372, 375, 380, 388, 389, 403, 404, 405, 407, 408, 411, 412, 413, 414, 415, 416, 417, 419, 420, 445, 464, 466, 467, 473, 475, 476, 479, 480, 481, 489, 497, 509, 510, 516, 522, 525, 527, 532, 538, 539, 541, 543, 548, 550, 561, 563, 566, 568, 569, 613, 617, 619, 624, 627, 633, 637, 646, 649, 650, 655, 656, 661, 662, 663, 664, 665, 666, 669, 671, 675, 676, 677, 678, 679, 681, 682, 684, 687, 695, 704, 733, 791, 803, 806, 807, 814, 815, 828, 830, 834, 851, 866, 867, 868, 872, 880, 881, 882, 887, 907, 977, 993, 996, 997, 1000, 1004, 1005, 1007, 1010, 1014, 1017, 1018, 1020, 1021, 1025, 1028, 1034, 1039, 1042, 1045, 1046, 1047, 1049, 1050], "combinator": 813, "combined_featur": 107, "combsccod": 1048, "comcast": 52, "come": [83, 101, 103, 112, 117, 126, 165, 169, 203, 242, 282, 317, 350, 351, 362, 364, 368, 372, 375, 376, 377, 379, 383, 387, 389, 393, 401, 406, 407, 411, 414, 415, 439, 450, 456, 472, 551, 708, 798, 824, 909, 912, 956, 993, 994, 998, 1001, 1003, 1007, 1010, 1019, 1034, 1045, 1048, 1050], "comedi": 878, "comfort": [89, 414], "command": [241, 362, 363, 373, 375, 379, 381, 383, 393, 415, 509, 1023, 1036], "comment": [81, 350, 373, 374, 375, 376, 378, 379, 383, 487, 581, 1004], "commerc": 1028, "commerci": [411, 1028], "commit": [378, 379, 383, 1027, 1034, 1035, 1036, 1037], "committ": 1034, "commod": 1004, "common": [2, 53, 55, 56, 58, 124, 162, 165, 182, 183, 184, 214, 215, 263, 268, 275, 285, 319, 326, 343, 350, 352, 357, 362, 369, 375, 377, 383, 385, 387, 388, 392, 393, 398, 404, 405, 407, 408, 411, 413, 416, 417, 447, 465, 467, 497, 576, 592, 635, 656, 675, 676, 704, 749, 756, 772, 804, 805, 808, 818, 820, 821, 822, 823, 824, 830, 833, 868, 870, 878, 879, 880, 885, 887, 892, 893, 895, 896, 897, 898, 924, 926, 953, 956, 993, 994, 1000, 1004, 1007, 1010, 1014, 1019, 1020, 1023, 1024, 1025, 1028, 1030, 1034, 1042, 1044, 1045, 1049], "common_nod": 357, "common_node_id": 357, "common_param": [91, 147, 150, 186, 243, 270, 271, 343], "commonli": [207, 210, 265, 281, 343, 368, 389, 407, 408, 417, 617, 761, 762, 800, 836, 879, 1001, 1002, 1004, 1005, 1007, 1050], "commun": [244, 368, 374, 380, 383, 389, 390, 407, 414, 539, 541, 548, 695, 713, 879, 994, 1001, 1007, 1014, 1018, 1023, 1027, 1028, 1042, 1043], "commut": [44, 53], "comp": [58, 116, 117, 124, 131, 306, 332, 350, 351, 352, 370], "comp_cov": [469, 470, 471, 472, 473, 474, 475, 476], "compact": [165, 190, 308, 362, 372, 847, 848, 1020, 1036], "compani": [210, 228, 406, 407, 1028], "companion": [375, 1014], "companioni": 1034, "compar": [44, 45, 49, 53, 58, 59, 62, 63, 65, 71, 72, 73, 75, 76, 77, 79, 82, 83, 86, 88, 89, 90, 91, 92, 98, 101, 104, 105, 106, 107, 112, 113, 115, 117, 124, 128, 130, 134, 135, 136, 138, 143, 144, 145, 147, 149, 150, 151, 153, 155, 165, 173, 180, 181, 182, 185, 186, 187, 188, 191, 193, 195, 196, 198, 199, 200, 203, 206, 210, 211, 213, 214, 216, 218, 220, 224, 227, 228, 230, 231, 234, 236, 239, 242, 245, 247, 248, 249, 250, 255, 256, 260, 263, 265, 266, 267, 269, 271, 273, 275, 277, 279, 280, 281, 283, 285, 288, 289, 290, 291, 293, 294, 295, 297, 298, 299, 300, 302, 305, 307, 309, 312, 313, 315, 319, 343, 350, 351, 352, 356, 357, 358, 364, 370, 372, 375, 377, 401, 403, 404, 405, 406, 407, 409, 410, 411, 412, 414, 416, 417, 440, 441, 442, 444, 445, 446, 448, 449, 450, 452, 458, 463, 464, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 490, 497, 503, 505, 513, 515, 523, 525, 529, 532, 538, 540, 542, 546, 547, 552, 553, 562, 563, 564, 565, 566, 634, 642, 647, 648, 656, 658, 660, 661, 666, 669, 671, 679, 680, 687, 698, 708, 715, 718, 734, 741, 746, 789, 801, 803, 808, 817, 830, 833, 840, 849, 853, 856, 860, 864, 865, 867, 868, 875, 876, 877, 879, 880, 881, 882, 883, 884, 885, 887, 888, 892, 893, 894, 895, 896, 897, 898, 907, 908, 909, 911, 912, 993, 996, 997, 998, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1014, 1015, 1018, 1019, 1020, 1022, 1023, 1025, 1034, 1036, 1041, 1042, 1047], "comparison": [48, 52, 54, 58, 61, 62, 63, 64, 66, 70, 72, 74, 76, 78, 84, 91, 92, 93, 94, 95, 97, 103, 111, 120, 122, 123, 125, 127, 131, 135, 137, 138, 141, 147, 150, 153, 157, 158, 159, 168, 174, 175, 176, 178, 182, 187, 195, 196, 197, 198, 199, 202, 203, 208, 210, 214, 225, 228, 229, 232, 233, 234, 235, 236, 240, 255, 260, 262, 263, 264, 265, 272, 280, 282, 287, 297, 303, 310, 312, 313, 317, 319, 333, 336, 345, 349, 350, 351, 358, 370, 372, 389, 405, 407, 409, 410, 412, 416, 417, 437, 438, 442, 443, 445, 446, 447, 449, 462, 482, 483, 484, 488, 505, 513, 515, 516, 523, 526, 536, 542, 550, 551, 554, 565, 566, 583, 584, 590, 591, 592, 593, 608, 610, 613, 614, 618, 625, 628, 634, 642, 646, 662, 675, 691, 692, 693, 694, 695, 707, 741, 746, 782, 791, 803, 804, 805, 806, 808, 809, 817, 819, 820, 821, 822, 823, 824, 833, 842, 845, 849, 864, 865, 868, 880, 881, 885, 887, 888, 892, 893, 894, 895, 896, 897, 898, 907, 909, 910, 912, 913, 915, 993, 997, 998, 1001, 1004, 1006, 1007, 1010, 1019, 1025, 1031], "compat": [244, 271, 288, 318, 326, 369, 373, 377, 378, 384, 385, 387, 389, 393, 398, 401, 415, 463, 469, 509, 567, 579, 591, 605, 612, 617, 618, 621, 622, 623, 625, 626, 635, 636, 637, 661, 662, 676, 678, 777, 781, 804, 805, 808, 810, 811, 812, 813, 816, 818, 819, 820, 821, 822, 823, 824, 851, 852, 867, 872, 880, 881, 919, 920, 926, 929, 944, 946, 966, 1001, 1007, 1009, 1023, 1024, 1028, 1030, 1034, 1037, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1053], "compens": [113, 184, 186, 190, 210, 228, 269, 409, 412], "compet": [44, 185], "competit": [44, 147, 350, 414, 647, 1004, 1007], "compil": [155, 288, 352, 362, 363, 376, 377, 378, 383, 384, 387, 1023, 1034], "compl": 92, "complain": 1052, "complement": [2, 186, 278, 350, 635, 636, 805, 820, 823, 833, 842, 843, 844, 845, 846, 1011, 1026, 1030, 1042], "complementari": [44, 415], "complementnb": [2, 269, 350, 842, 843, 845, 846, 1006, 1042, 1046, 1047, 1049], "complementnbcomplementnb": 269, "complet": [0, 2, 44, 73, 74, 75, 80, 83, 86, 92, 96, 117, 150, 153, 160, 162, 165, 182, 187, 188, 216, 236, 237, 244, 247, 262, 266, 313, 315, 317, 351, 358, 370, 375, 379, 380, 383, 387, 408, 411, 412, 414, 415, 441, 445, 449, 452, 462, 463, 464, 467, 496, 537, 538, 539, 540, 545, 547, 559, 570, 571, 583, 589, 590, 591, 593, 630, 631, 632, 633, 648, 652, 660, 674, 676, 707, 708, 718, 719, 720, 732, 734, 739, 740, 760, 789, 798, 835, 838, 841, 850, 866, 867, 868, 869, 936, 988, 998, 1000, 1004, 1005, 1007, 1019, 1020, 1023, 1025, 1034, 1037, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "completed_fac": 246, "completeness_scor": [2, 74, 83, 92, 318, 351, 407, 739, 740, 798, 1004], "complex": [43, 49, 50, 55, 59, 105, 141, 155, 164, 169, 174, 180, 182, 203, 214, 224, 227, 236, 243, 244, 247, 260, 266, 269, 272, 277, 309, 317, 320, 321, 325, 327, 339, 343, 352, 353, 357, 371, 375, 380, 387, 407, 408, 412, 414, 418, 440, 444, 447, 448, 450, 467, 489, 501, 502, 503, 515, 535, 542, 552, 558, 559, 560, 561, 563, 565, 566, 606, 633, 641, 659, 661, 679, 680, 737, 753, 803, 833, 835, 863, 867, 868, 872, 880, 887, 903, 907, 910, 913, 915, 916, 917, 918, 993, 994, 996, 997, 999, 1001, 1003, 1004, 1005, 1010, 1014, 1017, 1024, 1025, 1026, 1028, 1030, 1035, 1037, 1043, 1044, 1047], "complexity_comput": [47, 50], "complexity_label": [47, 50], "compli": [375, 389, 944, 1024], "complianc": [0, 150], "compliant": [322, 375, 1052, 1053], "complic": [65, 244, 303, 381, 417, 697, 1007], "compon": [2, 11, 44, 45, 56, 80, 92, 96, 103, 106, 115, 116, 120, 122, 123, 125, 126, 128, 129, 131, 153, 174, 182, 184, 196, 219, 230, 241, 242, 245, 253, 254, 255, 257, 258, 259, 261, 267, 269, 274, 288, 289, 290, 291, 299, 300, 306, 313, 319, 355, 362, 367, 370, 375, 377, 381, 384, 401, 403, 407, 408, 410, 415, 417, 419, 421, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 462, 463, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 503, 505, 516, 522, 527, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 574, 583, 584, 585, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 691, 692, 693, 694, 695, 698, 800, 801, 802, 803, 806, 807, 817, 825, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 897, 898, 899, 900, 901, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 922, 950, 951, 996, 1001, 1003, 1014, 1016, 1019, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1034, 1036, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "component_1": 258, "component_2": 258, "component_indices_": [642, 1047], "components_": [46, 55, 92, 117, 121, 123, 124, 131, 241, 242, 306, 313, 321, 389, 408, 412, 444, 532, 533, 534, 535, 537, 538, 539, 540, 541, 542, 544, 545, 642, 856, 863, 899, 900, 996, 1016, 1038, 1040, 1046, 1049, 1052], "components_col": 106, "compos": [2, 44, 45, 63, 102, 103, 104, 108, 117, 137, 144, 155, 182, 185, 186, 187, 210, 212, 228, 239, 247, 249, 251, 282, 285, 314, 318, 320, 321, 322, 324, 325, 388, 398, 407, 408, 411, 464, 465, 466, 467, 516, 554, 615, 1003, 1005, 1025, 1034], "composit": [7, 36, 239, 318, 367, 411, 661, 791, 994, 1000, 1013, 1030, 1035], "compound": [44, 228, 415, 613, 615, 683, 727, 755, 1000], "compoundkernel": [2, 613, 1048], "comprehens": [343, 383, 415, 761, 762, 1002, 1028, 1042], "compress": [43, 51, 56, 100, 182, 285, 308, 370, 401, 407, 412, 415, 416, 655, 675, 695, 837, 880, 974, 977, 989, 1000, 1005, 1014, 1025, 1034, 1043], "compressed_raccoon_kmean": 87, "compressed_raccoon_uniform": 87, "compris": [103, 147, 266, 350, 351, 352, 370, 387, 412, 414, 516, 810, 1001], "compromis": [49, 65, 186, 362, 375, 650, 682, 1007, 1037], "comput": [0, 2, 28, 44, 46, 47, 51, 53, 54, 59, 64, 73, 75, 77, 78, 81, 86, 88, 91, 92, 94, 95, 103, 105, 111, 112, 113, 114, 122, 130, 138, 142, 145, 146, 147, 148, 149, 150, 164, 165, 169, 174, 176, 177, 180, 185, 186, 187, 188, 190, 193, 194, 196, 197, 198, 199, 200, 210, 212, 214, 218, 224, 227, 228, 231, 234, 238, 240, 241, 243, 247, 248, 250, 262, 264, 266, 268, 269, 270, 271, 275, 277, 279, 288, 290, 292, 294, 295, 297, 298, 301, 308, 317, 321, 322, 325, 329, 331, 339, 343, 346, 350, 351, 352, 357, 363, 364, 369, 370, 372, 375, 377, 380, 381, 382, 384, 387, 388, 389, 392, 393, 401, 402, 403, 404, 405, 407, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 457, 459, 461, 462, 463, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 517, 532, 533, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 575, 584, 587, 588, 591, 592, 593, 595, 596, 601, 602, 605, 606, 607, 608, 609, 610, 611, 613, 615, 616, 617, 618, 619, 622, 623, 624, 625, 626, 627, 628, 630, 632, 633, 634, 635, 636, 637, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 716, 718, 719, 720, 721, 722, 723, 728, 729, 730, 732, 733, 734, 737, 739, 741, 742, 743, 746, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 789, 790, 791, 792, 795, 796, 797, 799, 800, 801, 802, 803, 806, 807, 809, 817, 825, 826, 828, 829, 830, 831, 832, 834, 835, 836, 837, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 863, 864, 865, 872, 873, 876, 877, 882, 883, 884, 885, 886, 887, 891, 892, 894, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 907, 909, 912, 914, 915, 916, 917, 918, 948, 949, 950, 951, 968, 969, 976, 978, 984, 993, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1014, 1016, 1017, 1018, 1019, 1020, 1023, 1024, 1028, 1030, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "computation": [38, 54, 110, 121, 141, 146, 155, 169, 288, 343, 350, 361, 376, 387, 407, 408, 411, 412, 414, 417, 539, 635, 636, 674, 766, 803, 805, 806, 807, 817, 830, 1000, 1001, 1003, 1011, 1012, 1016, 1030, 1038], "compute_class_weight": [2, 389, 1037, 1048], "compute_corrected_ttest": 268, "compute_dist": [441, 445, 1046], "compute_full_tre": [441, 445, 1038], "compute_import": 1036, "compute_inverse_compon": [899, 900, 1016], "compute_inverse_transform": 1048, "compute_label": [442, 449], "compute_node_depth": 357, "compute_optics_graph": [2, 455, 456, 1051], "compute_sample_weight": [2, 1048], "compute_scor": [108, 128, 192, 193, 647, 648, 1043], "compute_sourc": 419, "computed_scor": 648, "con": [401, 591, 1003], "concat": [44, 180, 184, 200, 228, 880], "concaten": [2, 64, 71, 75, 84, 95, 102, 105, 113, 137, 151, 161, 177, 182, 192, 195, 203, 224, 225, 231, 237, 253, 257, 258, 264, 273, 275, 276, 277, 278, 293, 306, 312, 315, 329, 338, 342, 350, 408, 464, 467, 505, 510, 532, 538, 542, 543, 601, 784, 803, 866, 867, 869, 872, 880, 912, 1005, 1025, 1035], "concav": [165, 325, 372], "concentr": [47, 49, 99, 119, 126, 135, 153, 174, 181, 182, 235, 252, 254, 259, 279, 298, 310, 330, 371, 375, 414, 443, 520, 800, 1003, 1010, 1025], "concentrations_prior": 253, "concept": [2, 113, 141, 145, 244, 277, 387, 407, 413, 415, 996, 1004, 1007, 1020, 1028], "conceptu": [372, 414, 1002], "concern": [38, 57, 72, 109, 115, 118, 120, 132, 134, 159, 166, 168, 179, 182, 189, 191, 229, 252, 258, 262, 284, 286, 289, 302, 307, 327, 334, 349, 353, 362, 377, 401, 1001, 1016], "concis": [65, 210, 375, 380, 1045, 1047], "conclud": [135, 185, 193, 228, 268, 352, 358, 390, 867], "conclus": [44, 126, 185, 187, 210, 212, 268, 270, 358, 414], "concomit": [652, 1000], "concret": [214, 376, 390, 406, 416, 677, 678, 899, 900, 1000, 1018, 1023, 1053], "concurr": [389, 415, 969, 1046, 1048], "cond": 1053, "conda": [317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 363, 375, 376, 378, 379, 381, 383, 393, 394, 400, 401, 1020], "conda_prefix": 381, "condarc": 373, "condens": [190, 446], "condit": [2, 44, 52, 53, 63, 65, 114, 147, 182, 183, 185, 200, 203, 207, 212, 215, 228, 244, 248, 271, 320, 357, 381, 387, 392, 403, 404, 405, 406, 407, 409, 412, 414, 416, 451, 464, 471, 472, 473, 478, 497, 514, 524, 525, 537, 540, 541, 542, 544, 546, 548, 550, 551, 563, 630, 635, 636, 646, 653, 654, 655, 657, 658, 659, 673, 675, 676, 677, 678, 685, 686, 690, 700, 715, 720, 721, 739, 740, 798, 842, 843, 844, 845, 846, 865, 868, 871, 880, 881, 884, 888, 951, 975, 998, 1000, 1001, 1002, 1004, 1006, 1007, 1009, 1014, 1020, 1025, 1030, 1035, 1037, 1038, 1039, 1041, 1042, 1044, 1046, 1048, 1049, 1050, 1052], "condition": [52, 65, 210, 405, 409, 761, 998, 1004], "condition2": 155, "conduct": [184, 268, 417, 1027, 1048], "conf": [47, 65, 379, 405, 411, 842, 1006, 1048], "confer": [262, 268, 370, 407, 412, 418, 439, 444, 450, 512, 536, 564, 699, 711, 729, 759, 863, 864, 865, 1004, 1010, 1016, 1020], "confid": [53, 62, 63, 64, 65, 150, 174, 176, 254, 268, 271, 331, 390, 405, 417, 639, 661, 662, 669, 671, 674, 677, 678, 679, 701, 705, 710, 723, 729, 730, 742, 743, 759, 792, 835, 874, 907, 909, 912, 1000, 1003, 1004, 1005, 1010, 1017, 1018, 1019, 1028, 1044], "config": [53, 363, 373, 375, 376, 383, 629, 1042], "config_context": [2, 251, 362, 363, 403, 629, 905, 1041, 1047, 1050], "configur": [2, 3, 47, 50, 65, 104, 105, 186, 244, 249, 251, 282, 315, 350, 361, 373, 375, 377, 381, 387, 389, 393, 398, 403, 408, 415, 416, 431, 442, 443, 445, 447, 449, 452, 462, 464, 468, 482, 483, 484, 485, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 567, 568, 569, 570, 571, 583, 584, 585, 591, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 629, 630, 631, 632, 633, 635, 638, 641, 642, 643, 644, 645, 691, 692, 693, 694, 695, 697, 698, 791, 803, 817, 851, 856, 859, 863, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 905, 969, 970, 1001, 1004, 1014, 1019, 1023, 1030, 1038, 1041, 1042, 1043, 1044, 1046, 1048, 1049, 1050, 1051], "confirm": [44, 53, 117, 138, 144, 147, 150, 187, 210, 212, 262, 271, 274, 277, 313, 352, 379, 993, 1014, 1042], "conflict": [373, 378, 379, 383, 393, 1041, 1042], "conform": [53, 375, 583, 631, 835, 836, 1004, 1023, 1024, 1041, 1047], "confound": [184, 185], "confus": [2, 69, 182, 238, 260, 262, 277, 328, 329, 350, 389, 468, 505, 634, 655, 700, 716, 718, 721, 732, 733, 741, 757, 787, 790, 833, 905, 912, 1025, 1034, 1035, 1039, 1043, 1044, 1046, 1047, 1048, 1049], "confusingli": 373, "confusion_matrix": [2, 69, 238, 261, 262, 325, 328, 329, 700, 716, 757, 802, 830, 1004, 1035, 1040, 1041, 1044, 1045, 1047, 1051], "confusion_matrix_scor": 1004, "confusionmatrixdisplai": [2, 46, 69, 261, 320, 325, 328, 350, 634, 721, 1004, 1044, 1045, 1047, 1048, 1049, 1053], "congruenc": [657, 658, 659, 685, 686], "conjug": [268, 452, 462, 675, 677, 690, 698, 1000], "conjunct": [398, 407, 596, 809, 825, 826, 828, 829, 830, 831, 834, 970, 994, 1000, 1049], "connect": [2, 52, 75, 80, 82, 85, 88, 96, 100, 101, 373, 375, 384, 389, 409, 441, 445, 452, 462, 463, 587, 588, 698, 849, 850, 851, 853, 855, 857, 858, 859, 860, 861, 1002, 1004, 1007, 1009, 1017, 1027, 1038, 1047, 1051], "connected_compon": 1041, "connectionist": [864, 865], "conner": 1047, "connor": [1042, 1047, 1051, 1052], "connossor": [1042, 1043], "conocophillip": 52, "conort": 1028, "conquer": 951, "conrad": [1034, 1035, 1049, 1052, 1053], "conroi": 1049, "consecut": [135, 145, 211, 387, 405, 411, 415, 443, 447, 449, 450, 452, 456, 459, 462, 538, 539, 540, 547, 604, 648, 669, 670, 671, 679, 680, 681, 800, 801, 808, 842, 843, 844, 845, 846, 864, 865, 993, 1014, 1042], "consensu": [2, 59, 60, 73, 374, 375, 390, 404, 407, 652, 674, 681, 682, 722, 1004], "consensus_scor": [2, 59, 60, 404, 1036], "consequ": [91, 128, 228, 268, 269, 308, 326, 336, 358, 405, 406, 412, 414, 562, 563, 567, 658, 659, 994, 1000, 1004, 1012, 1020, 1043, 1045, 1050, 1052], "conserv": [51, 389, 584, 591, 899, 900, 1003, 1016], "consid": [0, 44, 52, 53, 54, 59, 63, 75, 89, 100, 104, 113, 121, 125, 127, 144, 147, 160, 164, 165, 181, 186, 203, 210, 212, 244, 262, 268, 271, 275, 277, 279, 282, 288, 291, 294, 295, 308, 319, 325, 336, 343, 344, 346, 350, 358, 362, 363, 364, 367, 374, 375, 377, 381, 383, 387, 389, 390, 398, 401, 403, 406, 407, 412, 413, 414, 415, 416, 417, 418, 419, 438, 444, 446, 450, 457, 474, 509, 510, 522, 534, 542, 550, 551, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 587, 588, 590, 591, 593, 595, 609, 610, 623, 634, 635, 636, 649, 655, 661, 662, 663, 665, 674, 682, 691, 692, 693, 695, 696, 697, 699, 703, 705, 708, 710, 712, 718, 729, 733, 737, 759, 789, 791, 797, 849, 850, 851, 853, 855, 857, 858, 859, 862, 864, 865, 870, 880, 881, 888, 902, 903, 912, 913, 915, 916, 917, 918, 928, 987, 993, 999, 1000, 1001, 1002, 1004, 1005, 1007, 1010, 1011, 1012, 1014, 1018, 1019, 1020, 1037, 1038, 1042, 1046, 1047, 1049, 1050, 1051], "consider": [149, 150, 170, 173, 247, 263, 269, 275, 370, 375, 406, 417, 622, 803, 817, 825, 993, 1000, 1006, 1010, 1018, 1028, 1051], "consist": [2, 44, 47, 64, 69, 73, 90, 91, 103, 112, 119, 121, 141, 144, 150, 151, 158, 165, 172, 174, 177, 181, 188, 203, 210, 228, 243, 247, 274, 277, 305, 313, 317, 320, 346, 351, 358, 362, 368, 370, 372, 375, 377, 381, 382, 383, 384, 388, 389, 390, 405, 407, 409, 413, 414, 415, 425, 426, 429, 430, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 463, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 490, 498, 532, 534, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 555, 557, 558, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 583, 584, 585, 590, 591, 593, 614, 630, 631, 632, 633, 638, 641, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 664, 665, 666, 667, 668, 670, 673, 675, 676, 677, 680, 681, 682, 690, 691, 692, 693, 694, 703, 738, 800, 801, 810, 835, 836, 837, 839, 840, 841, 842, 850, 851, 853, 855, 858, 859, 865, 870, 871, 872, 874, 878, 879, 882, 883, 885, 886, 888, 899, 900, 903, 907, 908, 910, 911, 913, 916, 918, 924, 933, 935, 958, 974, 977, 992, 993, 996, 997, 998, 1000, 1001, 1003, 1004, 1005, 1007, 1008, 1014, 1017, 1019, 1020, 1022, 1024, 1028, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "consol": [143, 373], "consolid": [0, 389, 390, 1034], "consolidate_scor": 53, "consortium": [0, 1028], "constant": [2, 44, 130, 138, 150, 172, 175, 176, 181, 185, 198, 211, 212, 214, 228, 239, 244, 249, 271, 300, 304, 306, 309, 311, 318, 346, 348, 358, 367, 377, 384, 389, 404, 414, 417, 430, 446, 465, 482, 483, 484, 512, 514, 535, 539, 541, 548, 550, 551, 552, 553, 555, 557, 559, 561, 563, 566, 569, 571, 592, 608, 611, 614, 616, 630, 633, 635, 636, 638, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 679, 680, 681, 682, 683, 690, 692, 696, 698, 724, 726, 727, 731, 735, 778, 780, 788, 802, 825, 840, 841, 850, 858, 864, 865, 872, 883, 886, 895, 907, 908, 909, 910, 911, 912, 913, 914, 916, 918, 996, 998, 1000, 1001, 1004, 1006, 1007, 1014, 1018, 1020, 1030, 1037, 1042, 1044, 1046, 1047, 1048, 1050, 1052, 1053], "constant_": 553, "constant_valu": [417, 616, 620], "constant_value_bound": [417, 614, 616, 620], "constantini": 1050, "constantkernel": [2, 172, 178, 417, 614, 620, 624, 627], "constantli": [73, 210, 1028], "constitu": 372, "constitut": [84, 389, 411, 414, 450, 456, 590, 591, 593, 1008], "constrain": [26, 82, 121, 144, 150, 152, 186, 202, 281, 303, 318, 324, 337, 339, 368, 389, 407, 412, 414, 510, 562, 563, 638, 661, 662, 693, 697, 825, 832, 1000, 1003, 1038], "constrained_layout": [121, 186, 230, 314, 315, 322], "constraint": [89, 91, 101, 121, 134, 182, 199, 206, 214, 247, 248, 263, 304, 305, 306, 318, 375, 387, 412, 415, 487, 509, 510, 558, 559, 560, 561, 562, 563, 565, 566, 635, 638, 821, 822, 915, 916, 917, 918, 972, 993, 995, 1000, 1001, 1018, 1025, 1038, 1041, 1042, 1045, 1047, 1049, 1051], "constru": 415, "construct": [2, 44, 51, 103, 105, 135, 137, 139, 155, 165, 228, 238, 244, 249, 251, 301, 309, 311, 318, 321, 369, 372, 377, 384, 389, 407, 408, 411, 412, 414, 415, 418, 432, 441, 442, 444, 445, 450, 452, 457, 463, 465, 467, 520, 536, 542, 545, 556, 557, 583, 589, 642, 691, 693, 694, 817, 847, 848, 849, 850, 851, 853, 855, 857, 858, 859, 866, 867, 868, 869, 871, 912, 932, 934, 950, 951, 962, 966, 993, 994, 996, 1000, 1001, 1004, 1005, 1007, 1014, 1017, 1019, 1020, 1024, 1039, 1041, 1042, 1045, 1048], "construct_grid": [51, 301], "constructor": [31, 32, 105, 240, 363, 377, 389, 408, 415, 464, 467, 550, 551, 556, 568, 569, 570, 571, 583, 584, 590, 591, 599, 671, 679, 680, 803, 817, 849, 850, 851, 853, 855, 857, 858, 859, 866, 867, 868, 869, 993, 1005, 1014, 1019, 1024, 1034, 1035, 1037, 1038, 1039, 1041, 1044, 1045, 1046, 1047, 1048, 1049, 1051], "consult": 1004, "consum": [2, 121, 358, 369, 377, 389, 398, 407, 411, 414, 449, 806, 807, 867, 868, 959, 960, 969, 1000, 1028, 1039, 1051], "consumpt": [48, 362, 389, 407, 535, 558, 559, 565, 566, 803, 817, 828, 829, 830, 915, 916, 917, 918, 969, 1034, 1036, 1040, 1042, 1043, 1048], "contact": [387, 1023], "contain": [2, 50, 58, 62, 65, 70, 76, 83, 90, 92, 103, 104, 127, 137, 139, 150, 151, 175, 185, 186, 188, 190, 202, 214, 228, 237, 244, 247, 248, 251, 258, 262, 266, 268, 274, 277, 278, 281, 287, 294, 295, 297, 308, 320, 329, 332, 350, 351, 368, 369, 370, 372, 375, 377, 379, 380, 381, 382, 383, 384, 387, 389, 401, 403, 405, 407, 408, 410, 411, 412, 414, 415, 416, 417, 419, 421, 431, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 462, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 487, 488, 489, 490, 491, 493, 494, 495, 497, 501, 503, 504, 505, 509, 510, 511, 515, 516, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 583, 584, 585, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 688, 689, 691, 692, 693, 694, 695, 699, 700, 701, 703, 704, 705, 712, 715, 738, 739, 740, 775, 782, 783, 791, 797, 800, 801, 802, 803, 806, 807, 809, 817, 821, 822, 825, 826, 830, 831, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 920, 921, 922, 929, 932, 933, 934, 954, 955, 958, 959, 966, 969, 970, 972, 993, 994, 996, 1002, 1004, 1005, 1008, 1010, 1012, 1014, 1015, 1017, 1020, 1023, 1027, 1034, 1036, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052], "container": 401, "container_fold": 504, "container_path": 504, "contamin": [49, 112, 113, 237, 247, 294, 295, 469, 564, 853, 1010, 1042, 1050, 1051], "content": [2, 7, 56, 313, 350, 352, 370, 375, 379, 381, 401, 415, 486, 504, 509, 510, 590, 591, 593, 674, 921, 1013, 1028, 1035, 1044], "context": [2, 92, 251, 262, 277, 281, 288, 322, 325, 362, 363, 369, 374, 376, 388, 389, 407, 408, 413, 414, 415, 417, 418, 437, 444, 446, 448, 450, 452, 457, 458, 461, 464, 467, 468, 472, 532, 536, 537, 538, 540, 543, 544, 545, 546, 547, 549, 556, 557, 558, 559, 564, 565, 566, 567, 568, 569, 570, 571, 596, 604, 609, 610, 613, 629, 630, 633, 635, 637, 642, 650, 654, 656, 658, 660, 661, 662, 664, 666, 668, 669, 671, 679, 682, 691, 692, 693, 694, 695, 696, 697, 777, 781, 784, 803, 806, 807, 809, 817, 825, 826, 828, 829, 830, 831, 832, 834, 835, 836, 837, 839, 840, 849, 850, 853, 855, 857, 858, 860, 861, 866, 869, 902, 903, 905, 907, 908, 909, 910, 911, 912, 913, 994, 1000, 1004, 1010, 1014, 1018, 1027, 1028, 1034, 1041, 1042, 1047, 1050], "contigu": [44, 60, 377, 387, 404, 411, 415, 443, 447, 449, 459, 649, 650, 655, 656, 663, 664, 665, 666, 684, 687, 784, 822, 847, 848, 907, 909, 910, 911, 912, 913, 1019, 1037, 1044, 1048, 1052], "contin": [413, 717, 1014], "conting": [2, 717, 718, 734, 758, 1040], "contingency_matrix": [2, 407, 758, 1042], "continu": [0, 2, 53, 56, 58, 78, 119, 144, 169, 182, 186, 193, 211, 218, 228, 231, 234, 247, 248, 250, 254, 258, 259, 305, 307, 313, 314, 319, 320, 357, 363, 370, 373, 377, 378, 379, 380, 383, 387, 389, 390, 393, 407, 412, 414, 468, 493, 594, 597, 598, 601, 602, 606, 609, 610, 611, 635, 649, 650, 655, 656, 660, 663, 664, 665, 666, 729, 759, 815, 817, 870, 872, 874, 876, 877, 886, 887, 888, 904, 905, 916, 944, 966, 993, 1000, 1001, 1004, 1005, 1007, 1008, 1014, 1020, 1024, 1025, 1028, 1031, 1034, 1036, 1037, 1042, 1047, 1048, 1049, 1051, 1053], "continuous_featur": 380, "contour": [49, 51, 71, 81, 82, 112, 143, 165, 172, 173, 175, 221, 222, 223, 224, 237, 242, 257, 294, 301, 337, 338, 340, 341, 343, 344, 372, 382, 634, 635, 1010, 1018], "contour_kw": 635, "contourf": [51, 143, 224, 242, 294, 301, 303, 310, 311, 333, 338, 344, 348, 634, 635], "contours_": [382, 635], "contract": [210, 228, 343, 363, 389, 1024], "contradict": 188, "contrari": [44, 54, 185, 231, 235, 247, 253, 271, 308, 350, 369, 407, 497, 545, 608, 805, 820, 888, 1000, 1006, 1010], "contrast": [129, 186, 212, 243, 247, 268, 270, 297, 313, 351, 389, 405, 407, 410, 414, 417, 449, 452, 462, 622, 646, 817, 863, 994, 997, 999, 1000, 1004, 1007, 1009, 1012, 1014, 1017, 1018, 1020, 1044], "contrib": [323, 375, 377, 383, 387, 389, 407, 446, 1023, 1024, 1050], "contribut": [0, 54, 59, 148, 174, 196, 214, 277, 313, 372, 373, 378, 379, 383, 389, 390, 393, 412, 413, 414, 447, 449, 554, 555, 560, 561, 729, 732, 759, 998, 1004, 1007, 1012, 1019, 1023, 1024, 1027, 1028, 1034, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "contributor": [363, 378, 379, 380, 383, 387, 389, 1004, 1024, 1035, 1036, 1037, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "control": [38, 52, 71, 95, 125, 126, 141, 174, 176, 196, 203, 207, 211, 214, 218, 240, 241, 269, 271, 285, 290, 306, 318, 320, 343, 354, 356, 362, 363, 368, 371, 375, 377, 380, 383, 387, 389, 393, 406, 407, 410, 411, 412, 413, 416, 417, 432, 440, 449, 454, 471, 472, 478, 532, 537, 538, 539, 540, 541, 544, 546, 547, 548, 549, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 595, 596, 598, 617, 622, 628, 630, 635, 637, 642, 644, 645, 649, 650, 652, 653, 654, 655, 657, 658, 659, 675, 677, 679, 680, 685, 686, 690, 695, 704, 712, 800, 801, 803, 804, 805, 806, 807, 808, 809, 817, 818, 819, 820, 821, 822, 823, 825, 826, 828, 829, 830, 831, 833, 834, 837, 838, 841, 864, 865, 886, 888, 899, 900, 907, 908, 909, 910, 912, 913, 915, 916, 917, 918, 921, 944, 969, 990, 993, 1000, 1001, 1003, 1004, 1005, 1007, 1010, 1011, 1014, 1016, 1018, 1019, 1020, 1023, 1024, 1026, 1030, 1034, 1036, 1038, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1052, 1053], "convei": [68, 235, 310], "conveni": [53, 89, 214, 247, 326, 367, 383, 387, 408, 411, 415, 417, 422, 443, 447, 449, 451, 453, 464, 489, 614, 679, 681, 702, 731, 788, 866, 867, 977, 994, 996, 1000, 1001, 1011, 1028, 1034], "convent": [2, 133, 150, 262, 268, 375, 377, 378, 379, 381, 389, 403, 425, 426, 429, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 469, 470, 471, 472, 473, 474, 475, 476, 509, 510, 532, 534, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 548, 564, 567, 570, 571, 583, 584, 585, 590, 591, 593, 630, 631, 632, 633, 680, 691, 692, 693, 694, 721, 800, 801, 835, 836, 851, 853, 855, 859, 871, 879, 882, 883, 885, 888, 899, 900, 911, 944, 946, 1004, 1034, 1041, 1042, 1045, 1047, 1048, 1050, 1051], "convention": [337, 389, 903], "converg": [2, 56, 91, 95, 110, 111, 145, 147, 150, 169, 175, 204, 212, 218, 226, 254, 256, 304, 305, 308, 313, 326, 329, 364, 384, 389, 404, 407, 412, 415, 417, 419, 440, 443, 446, 447, 448, 449, 452, 454, 459, 460, 461, 462, 471, 472, 478, 482, 483, 484, 534, 536, 537, 538, 539, 540, 547, 572, 613, 647, 648, 649, 650, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 671, 675, 677, 679, 681, 685, 686, 690, 691, 693, 694, 697, 698, 800, 801, 856, 864, 865, 902, 903, 909, 994, 999, 1000, 1001, 1003, 1008, 1018, 1034, 1037, 1038, 1039, 1041, 1042, 1045, 1047, 1048, 1049, 1050, 1051, 1052], "converged_": [800, 801, 1052], "convergence_it": [440, 454], "convergencewarn": [2, 173, 175, 177, 218, 225, 254, 304, 305, 310, 384, 389, 800, 801, 1042, 1043, 1046], "convers": [2, 56, 147, 202, 350, 358, 364, 369, 375, 377, 383, 387, 389, 401, 415, 573, 862, 871, 879, 933, 934, 989, 1001, 1028, 1042, 1043, 1044, 1047, 1050], "convert": [2, 56, 71, 81, 100, 104, 124, 174, 188, 210, 230, 247, 250, 254, 255, 258, 259, 282, 301, 325, 357, 362, 369, 370, 384, 387, 389, 401, 415, 440, 443, 444, 447, 449, 450, 451, 452, 459, 464, 465, 497, 535, 542, 554, 555, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 573, 583, 584, 590, 591, 592, 593, 595, 596, 608, 630, 631, 632, 633, 649, 655, 661, 662, 663, 665, 669, 670, 671, 673, 677, 679, 680, 681, 695, 749, 781, 802, 825, 862, 871, 872, 874, 878, 880, 881, 882, 884, 907, 915, 916, 917, 918, 931, 933, 934, 958, 988, 989, 993, 1000, 1001, 1002, 1004, 1014, 1015, 1019, 1020, 1034, 1036, 1037, 1038, 1039, 1040, 1042, 1044, 1045, 1046, 1049, 1050, 1051, 1052], "convex": [130, 146, 147, 182, 191, 217, 230, 347, 351, 407, 409, 412, 420, 446, 452, 462, 473, 475, 476, 479, 480, 481, 661, 679, 695, 1000, 1001, 1007, 1008, 1018, 1025, 1047], "convinc": 185, "convolut": [46, 177], "convolv": 306, "coo": [389, 554, 555, 695, 874, 929, 933, 934, 1007, 1035, 1051], "coo_matrix": [54, 197, 452, 587, 588, 974, 977], "cook": [372, 495, 1034, 1040], "cookbook": [417, 625, 626], "cool": [415, 1034], "coolwarm": [263, 336], "cooman": 372, "coord": [587, 1005], "coordin": [2, 51, 52, 54, 88, 126, 154, 173, 199, 230, 269, 301, 362, 370, 412, 417, 443, 447, 448, 449, 461, 471, 472, 478, 532, 538, 539, 540, 541, 543, 544, 546, 547, 548, 549, 551, 587, 617, 649, 650, 654, 655, 656, 657, 658, 659, 661, 663, 664, 665, 666, 684, 685, 686, 687, 691, 692, 693, 696, 697, 709, 767, 772, 907, 1000, 1001, 1019, 1034, 1037, 1038, 1039, 1043, 1045, 1047, 1048, 1049], "cop": 52, "cope": [237, 364, 370, 1000], "copeland": [1042, 1043], "copi": [45, 52, 56, 80, 96, 108, 124, 138, 150, 165, 180, 181, 185, 186, 187, 197, 204, 216, 226, 228, 231, 244, 288, 328, 329, 331, 333, 351, 355, 363, 372, 375, 377, 379, 380, 381, 387, 389, 432, 437, 440, 442, 443, 444, 446, 447, 449, 454, 459, 482, 483, 484, 485, 501, 503, 511, 533, 534, 535, 536, 542, 549, 554, 555, 560, 562, 563, 573, 592, 599, 609, 610, 613, 614, 631, 633, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 668, 674, 675, 677, 682, 684, 687, 688, 689, 735, 772, 795, 803, 817, 847, 848, 862, 870, 873, 876, 877, 878, 879, 883, 884, 885, 887, 890, 892, 893, 894, 895, 896, 897, 898, 902, 903, 907, 909, 910, 911, 912, 913, 922, 931, 933, 934, 962, 974, 976, 977, 1014, 1019, 1020, 1024, 1034, 1037, 1040, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "copy_": 1034, "copy_cov": 549, "copy_gram": [685, 686, 689], "copy_x": [443, 447, 459, 536, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 659, 660, 663, 664, 665, 666, 675, 677, 682, 684, 685, 686, 687, 688, 1036, 1042, 1043, 1053], "copy_x_train": [613, 614], "copy_xi": 689, "copybutton": [375, 393, 400], "copyright": [0, 56], "corani": 268, "cordier": 1041, "core": [43, 50, 83, 89, 99, 104, 135, 141, 143, 182, 185, 186, 262, 322, 361, 363, 375, 378, 383, 389, 393, 401, 407, 412, 414, 415, 418, 444, 446, 449, 450, 455, 457, 497, 500, 539, 591, 596, 661, 662, 669, 671, 679, 842, 843, 844, 845, 846, 851, 859, 1000, 1007, 1010, 1019, 1024, 1025, 1026, 1028, 1030, 1036, 1038, 1039, 1041, 1044, 1048, 1049, 1050], "core_dist": [99, 455, 456, 457], "core_distances_": [99, 450, 455, 457], "core_sampl": 418, "core_sample_indices_": [83, 444], "core_samples_mask": 83, "corei": [1035, 1042, 1043], "corentin": 1048, "cori": 1039, "corneil": 1047, "corner": [51, 54, 64, 87, 184, 265, 269, 277, 278, 301, 324, 370, 375, 499, 919, 921, 1004, 1048], "cornerston": 1028, "cornflowerblu": [154, 205, 213, 220, 254, 256, 259, 275, 277, 293, 299, 356], "corollari": 377, "corona": 1047, "corpora": 412, "corpu": [55, 351, 352, 370, 412, 590, 591, 592, 593, 1035], "corr": [116, 188, 268], "corrcoef": [116, 131], "correct": [2, 31, 53, 64, 65, 91, 113, 135, 145, 177, 185, 196, 200, 210, 228, 253, 261, 262, 268, 275, 277, 285, 287, 339, 341, 350, 358, 372, 375, 377, 379, 390, 403, 405, 407, 411, 412, 414, 415, 424, 430, 450, 456, 469, 474, 488, 502, 504, 638, 670, 679, 681, 706, 707, 711, 715, 716, 721, 724, 726, 727, 731, 732, 733, 737, 741, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 786, 787, 788, 790, 793, 794, 797, 799, 835, 836, 837, 844, 852, 878, 988, 1000, 1004, 1005, 1019, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "correct_covari": [469, 474], "corrected_std": 268, "corrected_var": 268, "correctli": [2, 160, 164, 210, 228, 244, 275, 277, 283, 298, 315, 330, 339, 375, 384, 389, 412, 414, 424, 437, 469, 494, 550, 551, 552, 554, 556, 558, 560, 562, 565, 568, 570, 613, 661, 669, 671, 677, 678, 679, 706, 797, 799, 802, 825, 835, 836, 837, 838, 842, 843, 844, 845, 846, 849, 854, 857, 864, 887, 902, 903, 907, 909, 910, 911, 912, 913, 915, 917, 952, 1001, 1004, 1007, 1008, 1014, 1019, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053], "correl": [2, 52, 65, 114, 116, 117, 131, 142, 148, 150, 152, 161, 164, 174, 182, 183, 184, 186, 187, 196, 200, 203, 206, 228, 268, 287, 314, 318, 319, 331, 368, 371, 372, 380, 389, 392, 404, 409, 411, 416, 450, 457, 482, 483, 485, 494, 495, 501, 525, 565, 608, 611, 630, 637, 638, 639, 685, 686, 746, 760, 781, 782, 783, 833, 847, 848, 884, 885, 887, 896, 995, 1000, 1005, 1011, 1014, 1018, 1020, 1025, 1026, 1030, 1034, 1035, 1036, 1047, 1048], "correlation_coeffici": 611, "correlation_model": 1041, "correspond": [2, 51, 53, 54, 59, 64, 65, 69, 77, 87, 99, 110, 114, 123, 135, 138, 141, 142, 143, 151, 161, 164, 165, 170, 175, 178, 185, 200, 203, 207, 210, 211, 214, 219, 228, 238, 243, 244, 251, 258, 262, 267, 269, 271, 272, 277, 278, 282, 301, 313, 319, 320, 321, 326, 351, 354, 355, 357, 358, 363, 369, 370, 371, 374, 375, 377, 379, 382, 383, 388, 389, 390, 404, 405, 406, 407, 409, 410, 411, 412, 414, 415, 416, 417, 422, 428, 437, 439, 441, 445, 448, 451, 453, 459, 461, 463, 464, 467, 472, 482, 483, 484, 490, 491, 493, 494, 495, 496, 497, 535, 542, 545, 546, 547, 550, 551, 553, 556, 558, 560, 561, 562, 565, 584, 586, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 613, 614, 620, 631, 633, 635, 636, 638, 646, 649, 650, 651, 655, 661, 662, 663, 664, 665, 671, 672, 674, 675, 676, 677, 678, 679, 681, 683, 684, 685, 686, 690, 693, 694, 695, 697, 706, 713, 716, 727, 728, 737, 741, 745, 749, 755, 757, 777, 781, 785, 791, 792, 797, 799, 800, 801, 802, 803, 806, 807, 809, 817, 825, 826, 828, 836, 838, 839, 842, 843, 844, 845, 846, 847, 848, 852, 853, 854, 856, 864, 865, 874, 877, 878, 880, 881, 884, 888, 896, 907, 908, 909, 912, 915, 916, 917, 918, 928, 938, 944, 960, 963, 978, 993, 994, 996, 997, 998, 1000, 1001, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1014, 1015, 1018, 1019, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "correspondingli": 1051, "corri": 1045, "corrobor": 387, "corrupt": [45, 128, 196, 216, 227, 387, 863, 1000, 1012], "cort": [1045, 1046, 1049, 1050], "cortex": 412, "cos_transform": 44, "cosin": [2, 44, 76, 283, 288, 293, 367, 370, 389, 407, 412, 413, 441, 445, 450, 457, 536, 592, 593, 623, 699, 763, 764, 765, 768, 773, 774, 777, 781, 782, 783, 847, 848, 852, 879, 1007, 1020, 1030, 1044], "cosine_dist": [2, 403, 699, 765, 1007, 1040, 1053], "cosine_similar": [2, 343, 403, 763, 768, 1002, 1039, 1053], "cosinesimil": 288, "cosmo": 58, "cost": [0, 44, 75, 124, 141, 150, 167, 169, 182, 190, 230, 238, 242, 260, 270, 272, 275, 277, 282, 317, 325, 339, 351, 352, 353, 357, 375, 381, 383, 387, 406, 407, 414, 478, 497, 501, 538, 539, 540, 547, 552, 558, 559, 560, 561, 562, 565, 566, 604, 612, 613, 622, 630, 649, 650, 655, 656, 661, 663, 664, 665, 666, 671, 675, 677, 679, 681, 690, 691, 695, 703, 705, 721, 745, 787, 790, 802, 803, 825, 833, 868, 887, 905, 907, 908, 909, 912, 915, 916, 917, 918, 951, 996, 1000, 1001, 1004, 1007, 1017, 1018, 1019, 1025, 1026, 1030, 1040, 1043, 1044], "cost_complexity_pruning_path": [354, 915, 916, 917, 918], "costa": [1042, 1047], "costin": 1034, "costli": [105, 110, 142, 180, 262, 269, 347, 363, 376, 381, 407, 443, 630, 811, 813, 899, 900, 951, 1004, 1007, 1016, 1024], "costlier": 674, "costs_": [471, 472, 1050], "could": [44, 49, 53, 54, 65, 73, 78, 87, 104, 105, 121, 124, 136, 137, 144, 147, 150, 162, 169, 174, 181, 184, 185, 186, 210, 211, 214, 219, 228, 234, 242, 243, 244, 261, 262, 268, 281, 287, 296, 299, 320, 335, 336, 350, 354, 357, 364, 375, 381, 383, 389, 393, 401, 405, 411, 414, 415, 419, 474, 534, 539, 609, 610, 632, 674, 805, 810, 812, 994, 1000, 1001, 1004, 1011, 1012, 1014, 1019, 1024, 1031, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1052], "couldn": [1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "count": [2, 24, 44, 53, 55, 63, 65, 77, 83, 87, 103, 104, 119, 156, 157, 185, 186, 210, 212, 228, 241, 251, 262, 282, 285, 288, 318, 319, 326, 351, 352, 370, 372, 379, 384, 389, 390, 405, 407, 412, 414, 415, 446, 449, 489, 497, 537, 545, 583, 590, 591, 592, 593, 596, 606, 620, 643, 700, 708, 718, 721, 732, 733, 741, 757, 786, 787, 789, 790, 842, 846, 847, 848, 856, 859, 870, 919, 921, 953, 968, 992, 993, 996, 1000, 1004, 1006, 1007, 1014, 1020, 1028, 1034, 1037, 1039, 1042, 1043, 1045, 1046, 1051], "count_nonzero": [47, 50, 362], "count_onli": [847, 848], "counter": [58, 135, 275, 407, 679, 680, 681, 1047], "counterpart": [993, 1001, 1019], "countlagged_count_1hlagged_count_2hlagged_count_3hlagged_count_1dlagged_count_1d_1hlagged_count_7dlagged_count_7d_1hlagged_mean_24hlagged_max_24hlagged_min_24hlagged_mean_7dlagged_max_7dlagged_min_7di64i64i64i64i64i64i64i64f64i64i64f64i64i6416nullnullnullnullnullnullnullnullnullnullnullnullnull4016nullnullnullnullnullnullnullnullnullnullnullnull324016nullnullnullnullnullnullnullnullnullnullnull13324016nullnullnullnullnullnullnullnullnullnull1133240nullnullnullnullnullnullnullnullnullnull111332nullnullnullnullnullnullnullnullnullnull21113nullnullnullnullnullnullnullnullnullnull3211nullnullnullnullnullnullnullnullnullnull8321nullnullnullnullnullnullnullnullnullnull14832nullnullnullnullnullnullnullnullnullnul": 53, "countlagged_count_1hlagged_count_2hlagged_count_3hlagged_count_1dlagged_count_1d_1hlagged_count_7dlagged_count_7d_1hlagged_mean_24hlagged_max_24hlagged_min_24hlagged_mean_7dlagged_max_7dlagged_min_7di64i64i64i64i64i64i64i64f64i64i64f64i64i642472032241571601697013593": 53, "countri": [314, 324, 497, 1001], "counts_": 1046, "countvector": [2, 55, 332, 352, 370, 380, 408, 412, 415, 464, 489, 537, 584, 591, 592, 593, 1034, 1036, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1052], "coupl": [55, 86, 87, 89, 231, 369, 370, 375, 404, 405, 407, 416, 591, 913, 993, 1019], "cournapeau": [0, 397, 1034, 1037], "cours": [48, 49, 190, 282, 362, 375, 377, 406, 412, 415, 416, 994, 999, 1000, 1028], "coursecentr": [407, 442], "coursel": 1053, "courtesi": 375, "couvreur": [1043, 1044], "cov": [71, 114, 117, 137, 258, 375, 389, 393, 400, 410, 420, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 520, 533, 535, 542, 549], "cov_": [51, 114], "cov_class_1": 71, "cov_class_2": 71, "cov_init": 1050, "cov_test": 51, "cov_train": 51, "cov_typ": [255, 491], "covar": [253, 254, 259], "covari": [2, 49, 52, 66, 70, 111, 116, 128, 131, 149, 151, 169, 176, 178, 213, 237, 252, 254, 256, 257, 258, 259, 275, 299, 324, 384, 389, 398, 407, 410, 412, 417, 420, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 505, 516, 520, 528, 533, 535, 542, 549, 550, 551, 564, 613, 614, 616, 625, 626, 634, 647, 648, 653, 657, 659, 685, 686, 689, 692, 696, 800, 801, 803, 822, 1003, 1010, 1014, 1025, 1026, 1029, 1030, 1034, 1036, 1037, 1038, 1039, 1041, 1043], "covariance_": [52, 71, 112, 114, 469, 470, 471, 472, 473, 474, 475, 476, 550, 551, 998, 1041], "covariance_correct": [469, 474], "covariance_eigh": [325, 542, 1052], "covariance_estim": [70, 550, 998, 1046], "covariance_prior": [259, 800], "covariance_prior_": 800, "covariance_reweight": [469, 474], "covariance_typ": [80, 254, 255, 257, 258, 259, 800, 801, 1050], "covariances_": [253, 254, 255, 258, 259, 800, 801, 1041], "cover": [0, 86, 190, 210, 228, 358, 367, 370, 375, 388, 638, 723, 797, 1004, 1005, 1022], "coverag": [2, 51, 53, 147, 150, 210, 228, 301, 370, 378, 403, 499, 630, 723], "coverage_error": [2, 1004, 1038, 1048], "coverage_fract": 147, "coverages_land": 51, "covertyp": [2, 368, 491, 1030], "covtyp": 190, "cow": 1035, "cowlei": 1044, "cowton": 1048, "cox": [308, 312, 883, 895, 1014, 1042, 1050], "cpo": [165, 372], "cppflag": 373, "cpu": [0, 95, 269, 288, 322, 362, 363, 381, 383, 389, 393, 403, 415, 497, 564, 635, 650, 654, 656, 658, 661, 662, 664, 666, 668, 669, 671, 679, 682, 803, 817, 828, 829, 830, 851, 859, 900, 1004, 1039, 1048, 1049, 1051, 1052, 1053], "cpu_count": [78, 141, 288], "cpuexecutionprovid": 401, "cpython": [375, 376, 381, 1049], "craeton": [1052, 1053], "craft": 378, "craig": [1016, 1037, 1042], "crall": [1041, 1047], "crammer": [669, 670, 738, 1000, 1004, 1019], "crammer06a": [669, 670], "crammer_sing": [907, 1005, 1019, 1034], "cranenburgh": 1038, "crash": [52, 322, 375, 401, 468, 897, 898, 905, 1014, 1038, 1042, 1050, 1051, 1053], "crawl": [522, 942], "craze": 1041, "crc": 1000, "creat": [2, 44, 45, 48, 51, 59, 60, 64, 65, 67, 69, 71, 73, 75, 77, 79, 80, 81, 83, 86, 92, 94, 96, 104, 105, 112, 117, 123, 126, 127, 137, 140, 143, 144, 145, 147, 151, 154, 164, 169, 171, 174, 175, 176, 178, 181, 184, 186, 192, 194, 197, 207, 211, 212, 222, 223, 232, 242, 244, 247, 248, 250, 258, 262, 263, 264, 266, 268, 278, 282, 296, 298, 299, 310, 312, 313, 317, 320, 321, 333, 335, 336, 340, 341, 344, 346, 347, 348, 352, 354, 358, 363, 370, 371, 373, 374, 375, 377, 379, 380, 381, 382, 383, 384, 388, 389, 393, 394, 401, 405, 407, 408, 411, 413, 414, 415, 417, 438, 451, 453, 465, 466, 500, 516, 517, 518, 519, 547, 554, 556, 557, 558, 559, 560, 561, 564, 565, 566, 567, 590, 591, 593, 599, 631, 633, 634, 635, 636, 700, 701, 703, 704, 705, 785, 792, 803, 805, 809, 813, 817, 821, 825, 826, 828, 829, 837, 868, 880, 909, 912, 915, 916, 917, 918, 922, 931, 954, 955, 962, 976, 988, 994, 1000, 1003, 1005, 1007, 1011, 1014, 1015, 1016, 1018, 1019, 1020, 1023, 1028, 1031, 1034, 1035, 1037, 1040, 1044, 1047, 1048, 1049, 1050, 1051, 1052], "create_ax": 308, "create_species_bunch": 51, "createindex": 288, "creation": [377, 512, 513, 514, 516, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 659, 847, 848, 1028, 1041, 1042, 1043, 1047], "creativ": 369, "creator": [165, 369, 372], "cred_int_df": 268, "cred_interv": 268, "credibl": 268, "credit": [370, 414, 1000, 1028], "credit_amount": 262, "credit_card": 262, "credit_gain": 262, "credit_gain_scor": 262, "credit_histori": 262, "creighton": 322, "crispinlogan": [1046, 1049, 1050, 1052], "cristian": 645, "cristina": 1046, "criteria": [91, 141, 182, 191, 200, 218, 258, 268, 383, 407, 416, 441, 466, 482, 483, 484, 502, 558, 559, 560, 561, 565, 566, 649, 655, 659, 661, 662, 674, 695, 868, 887, 907, 908, 915, 916, 917, 918, 994, 1003, 1004, 1008, 1018, 1025, 1037, 1042, 1045], "criterion": [65, 110, 111, 188, 198, 218, 258, 280, 318, 377, 384, 389, 407, 412, 441, 445, 449, 452, 459, 462, 533, 538, 540, 547, 554, 555, 558, 559, 560, 561, 565, 566, 567, 608, 630, 647, 648, 651, 659, 669, 670, 671, 672, 674, 675, 677, 679, 680, 681, 683, 694, 698, 713, 801, 830, 904, 909, 910, 911, 912, 913, 915, 916, 917, 918, 1000, 1003, 1004, 1012, 1017, 1020, 1026, 1030, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1050, 1051], "criterion_": [198, 200, 659], "critic": [369, 375, 388, 414, 695, 1001, 1004, 1012, 1019, 1028, 1045], "crockett": 1049, "crombach": 1036, "crop": [383, 1049], "cross": [2, 9, 30, 53, 54, 65, 71, 88, 91, 92, 104, 105, 107, 108, 110, 114, 117, 128, 141, 143, 144, 146, 147, 150, 159, 162, 163, 165, 185, 186, 191, 196, 197, 198, 205, 207, 210, 212, 218, 228, 245, 250, 255, 256, 258, 260, 265, 268, 269, 270, 272, 274, 275, 276, 277, 280, 282, 283, 285, 292, 306, 307, 309, 314, 317, 319, 324, 331, 339, 346, 356, 370, 375, 384, 387, 388, 389, 401, 402, 405, 408, 409, 412, 414, 415, 416, 417, 437, 471, 472, 473, 474, 475, 476, 478, 482, 483, 484, 485, 494, 502, 503, 505, 516, 542, 568, 569, 577, 595, 596, 599, 604, 608, 611, 645, 646, 649, 650, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 675, 676, 677, 678, 679, 681, 682, 684, 685, 686, 687, 688, 689, 704, 705, 709, 716, 731, 744, 788, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 838, 841, 849, 857, 867, 868, 872, 887, 888, 905, 907, 909, 912, 924, 958, 1003, 1004, 1007, 1008, 1012, 1014, 1019, 1020, 1024, 1025, 1026, 1028, 1030, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1051, 1052], "cross_decomposit": [2, 115, 116, 117, 182, 245, 482, 483, 484, 485, 1005, 1025, 1038, 1039, 1041, 1042, 1043], "cross_val": 1034, "cross_val_predict": [2, 155, 264, 317, 398, 405, 411, 414, 437, 568, 569, 829, 830, 1038, 1039, 1040, 1041, 1043, 1045, 1047, 1051, 1053], "cross_val_scor": [2, 53, 128, 180, 181, 182, 260, 264, 273, 283, 323, 342, 358, 375, 387, 398, 411, 414, 472, 521, 577, 706, 745, 803, 828, 830, 849, 857, 915, 916, 993, 1004, 1025, 1034, 1035, 1036, 1037, 1038, 1041, 1042, 1043, 1046, 1047, 1050, 1051, 1053], "cross_valid": [2, 44, 53, 144, 150, 155, 185, 212, 244, 264, 271, 282, 285, 314, 324, 375, 388, 398, 577, 828, 829, 1004, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1049, 1050, 1051, 1053], "crossentropi": 562, "crossvalid": [268, 283], "crowd": [383, 390, 1001, 1024], "crucial": [52, 150, 184, 214, 263, 277, 362, 374, 375, 389, 390, 407, 417, 1019], "crude": 1045, "crunch": 381, "cruz": 177, "crypt": [58, 370], "cryptograph": 384, "cs_": 662, "cs_note": 416, "cs_point": 143, "csail": [407, 669, 670, 679, 844], "csc": [2, 362, 387, 389, 415, 528, 552, 554, 555, 673, 695, 874, 876, 882, 887, 890, 892, 898, 929, 933, 934, 966, 978, 979, 981, 982, 983, 984, 1007, 1014, 1042, 1043, 1045, 1048], "csc_matrix": [452, 558, 559, 564, 565, 566, 567, 884, 915, 916, 917, 918, 994, 1014, 1020, 1039], "csco": 52, "csgraph": [389, 1047], "csie": [190, 369, 487, 509, 510, 661], "csizsek": 1041, "csr": [2, 56, 325, 352, 362, 369, 370, 384, 387, 389, 415, 418, 443, 446, 447, 449, 450, 459, 498, 509, 524, 528, 554, 555, 558, 559, 565, 566, 567, 592, 633, 661, 695, 717, 771, 795, 849, 850, 851, 853, 855, 857, 858, 859, 860, 861, 862, 870, 874, 876, 878, 879, 880, 882, 885, 886, 887, 890, 891, 892, 894, 897, 900, 915, 916, 917, 918, 929, 933, 934, 958, 966, 978, 979, 980, 981, 982, 983, 984, 985, 986, 1007, 1014, 1018, 1034, 1035, 1040, 1042, 1043, 1049, 1050, 1051], "csr_arrai": 985, "csr_matrix": [288, 318, 440, 444, 452, 497, 535, 545, 558, 559, 560, 561, 564, 565, 566, 567, 590, 595, 596, 717, 833, 862, 880, 882, 909, 910, 912, 913, 915, 916, 917, 918, 952, 958, 975, 978, 979, 980, 981, 982, 983, 984, 985, 986, 989, 1005, 1014, 1018, 1019, 1020, 1049], "css": 1046, "cst": 998, "cstride": 186, "csv": [52, 369, 372, 380, 1042, 1047], "csytraci": 1037, "ct": [54, 177, 251, 408, 464, 466, 467], "ctc": 177, "cttt": 177, "cube": [419, 534], "cubic": [112, 417], "cuda": [387, 403], "cue": 1003, "culprit": 387, "cultiv": 372, "cultur": 370, "cum_claim": [210, 228], "cum_exposur": [210, 228], "cumsum": [146, 210, 228, 1041], "cumtim": 381, "cumul": [2, 146, 210, 228, 407, 729, 738, 759, 884, 896, 1014, 1018, 1041, 1043, 1044], "cumulated_claim": 210, "cumulated_exposur": 210, "cumulative_claim_amount": 228, "cumulative_exposur": 228, "cunha": [1035, 1036], "cup": [370, 1004], "cupi": [322, 325, 326, 387, 403, 1051, 1052, 1053], "cupy_to_ndarrai": 403, "curat": [375, 378], "cure": 1000, "curic": [1042, 1043], "current": [0, 2, 7, 48, 81, 135, 174, 185, 228, 308, 317, 363, 364, 370, 373, 375, 376, 380, 384, 387, 389, 390, 403, 404, 407, 411, 414, 415, 416, 417, 440, 446, 450, 468, 469, 470, 471, 472, 473, 474, 475, 476, 533, 536, 542, 554, 555, 558, 559, 560, 561, 563, 565, 566, 567, 578, 593, 595, 613, 620, 629, 630, 633, 649, 670, 674, 678, 679, 680, 681, 791, 800, 801, 852, 856, 864, 865, 883, 895, 905, 915, 916, 917, 918, 921, 923, 924, 925, 970, 978, 993, 998, 1000, 1004, 1007, 1008, 1014, 1024, 1027, 1042, 1046, 1048, 1049, 1050], "current_count": 77, "current_month": 174, "current_sklearn_vers": 578, "current_sz_mb": 48, "currentcontrolset": 393, "currentmodul": 375, "curs": [350, 351, 407, 413, 1006, 1007], "cursor": [141, 269], "curv": [2, 30, 48, 51, 61, 62, 64, 73, 108, 110, 138, 140, 141, 146, 167, 182, 191, 192, 201, 210, 228, 230, 232, 235, 236, 238, 240, 247, 248, 252, 253, 254, 255, 257, 258, 260, 262, 268, 278, 281, 304, 309, 317, 325, 343, 356, 382, 402, 406, 411, 413, 437, 438, 439, 503, 511, 516, 522, 526, 565, 635, 648, 661, 701, 703, 705, 709, 710, 711, 712, 730, 732, 744, 785, 787, 790, 791, 792, 800, 801, 809, 820, 826, 831, 833, 834, 845, 868, 887, 907, 912, 1000, 1001, 1003, 1004, 1010, 1020, 1025, 1026, 1028, 1030, 1031, 1036, 1037, 1040, 1044, 1046, 1047, 1048, 1049, 1050], "curvatur": 303, "cusick": 1044, "custom": [2, 15, 31, 42, 132, 162, 164, 167, 182, 219, 248, 260, 262, 267, 269, 272, 275, 276, 280, 290, 295, 299, 317, 334, 336, 337, 339, 340, 342, 350, 352, 367, 370, 373, 377, 382, 383, 384, 387, 388, 389, 398, 401, 407, 408, 411, 417, 468, 489, 494, 495, 503, 505, 539, 541, 548, 550, 558, 559, 565, 566, 572, 574, 604, 633, 634, 693, 702, 716, 781, 803, 833, 871, 905, 912, 987, 998, 1007, 1023, 1024, 1025, 1028, 1030, 1034, 1038, 1039, 1041, 1042, 1044, 1045, 1046, 1049, 1050, 1051, 1052, 1053], "custom_combin": 880, "custom_cv": 411, "custom_cv_2fold": 411, "custom_fnames_enc": 880, "custom_nam": 350, "custom_scor": 325, "custom_scorer_modul": 1004, "custom_scoring_funct": 1004, "customestim": 133, "customkernel": 621, "customvector": 415, "cut": [58, 79, 81, 99, 100, 164, 165, 167, 182, 232, 260, 271, 285, 325, 331, 379, 387, 404, 406, 407, 446, 452, 453, 462, 497, 590, 593, 661, 694, 698, 819, 825, 830, 868, 887, 1014, 1025], "cut_dist": [89, 446], "cutler": [915, 916], "cutoff": [192, 957, 1014, 1043], "cutoffs_x0": 308, "cutoffs_x1": 308, "cv": [2, 44, 52, 53, 62, 63, 65, 88, 104, 105, 106, 107, 110, 128, 141, 144, 146, 150, 164, 180, 181, 185, 200, 209, 212, 244, 262, 264, 266, 267, 268, 269, 270, 271, 273, 274, 278, 282, 283, 285, 314, 322, 324, 325, 326, 339, 346, 388, 389, 398, 405, 406, 411, 414, 416, 437, 472, 568, 569, 596, 604, 650, 654, 656, 658, 662, 664, 666, 668, 676, 678, 803, 805, 806, 807, 808, 809, 817, 818, 819, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 834, 838, 841, 849, 857, 888, 915, 916, 993, 996, 999, 1000, 1004, 1014, 1036, 1040, 1041, 1042, 1043, 1044, 1046, 1048, 1050, 1051, 1052, 1053], "cv_alpha": [654, 658], "cv_alphas_": [200, 654, 658, 1046], "cv_best_it": 146, "cv_clf": 146, "cv_color": 146, "cv_estim": 146, "cv_line": 146, "cv_mape_scor": 53, "cv_model": 185, "cv_result": [44, 53, 104, 141, 150, 164, 266, 267, 269, 271, 398, 830, 1004], "cv_results_": [104, 105, 106, 114, 141, 164, 258, 262, 266, 267, 268, 269, 272, 276, 279, 280, 290, 339, 472, 596, 676, 678, 803, 806, 807, 817, 825, 1040, 1044, 1046, 1047, 1052, 1053], "cv_results_ecoc": 285, "cv_results_lr": 212, "cv_results_ovo": 285, "cv_results_ovr": 285, "cv_results_qr": 212, "cv_results_tre": 285, "cv_results_tuned_model": 282, "cv_results_vanilla_model": 282, "cv_score": [146, 282], "cv_test_scor": 831, "cv_train_scor": 831, "cv_valu": 1042, "cv_values_": [676, 678, 1052], "cvc": 52, "cve": 1047, "cvx": 52, "cwitt": 1042, "cxx": 373, "cxxflag": 373, "cyan": [110, 138, 185, 299], "cybernet": 772, "cycl": [0, 16, 44, 78, 80, 84, 96, 121, 199, 254, 259, 275, 277, 320, 321, 375, 379, 398, 412, 581, 582, 630, 806, 807, 929, 993, 994, 1042, 1043, 1044, 1046, 1047, 1048, 1049], "cycler": 74, "cyclic": [44, 649, 650, 655, 656, 663, 664, 665, 666, 1046], "cyclic_cossin_linear_pipelin": 44, "cyclic_cossin_linear_predict": 44, "cyclic_cossin_transform": 44, "cyclic_hour": 44, "cyclic_month": 44, "cyclic_spline_interactions_pipelin": 44, "cyclic_spline_linear_pipelin": 44, "cyclic_spline_linear_predict": 44, "cyclic_spline_poly_pipelin": 44, "cyclic_spline_poly_predict": 44, "cyclic_spline_transform": 44, "cyclic_weekdai": 44, "cyl": [51, 301], "cynthias13w": 1051, "cyt": 285, "cython": [42, 321, 362, 363, 373, 375, 378, 384, 387, 393, 400, 403, 407, 414, 509, 1014, 1015, 1018, 1019, 1023, 1024, 1034, 1037, 1038, 1040, 1046, 1049, 1050, 1051, 1052], "cython3": 373, "cythonx": 376, "c\u00e1rdena": 1053, "c\u00e8sar": 1004, "d": [0, 2, 46, 47, 48, 50, 51, 52, 53, 55, 56, 68, 69, 73, 74, 78, 83, 84, 94, 95, 97, 103, 104, 114, 119, 121, 124, 128, 130, 167, 169, 177, 185, 210, 218, 226, 228, 235, 240, 241, 242, 243, 256, 267, 268, 276, 282, 287, 294, 295, 301, 305, 326, 328, 329, 332, 339, 343, 344, 352, 369, 370, 372, 375, 377, 381, 387, 405, 407, 409, 410, 412, 414, 415, 417, 418, 444, 446, 447, 452, 460, 463, 488, 494, 504, 527, 535, 537, 558, 559, 566, 567, 583, 584, 592, 612, 617, 618, 622, 625, 626, 631, 647, 648, 651, 672, 673, 674, 683, 691, 692, 695, 696, 700, 702, 708, 711, 724, 725, 726, 727, 729, 759, 767, 781, 784, 791, 815, 842, 844, 846, 847, 848, 863, 874, 878, 880, 881, 883, 895, 900, 917, 918, 922, 944, 996, 998, 1000, 1001, 1002, 1003, 1004, 1006, 1012, 1014, 1016, 1019, 1020, 1037, 1039, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1050, 1052], "d120af76829af0d256338dc6dd4be5df4fd1f35bf3a283cab66a51c1c6abd06a": 53, "d1997": 414, "d2": [725, 726, 1004], "d2_absolute_error_scor": [2, 726, 1004, 1048], "d2_log_loss_scor": [2, 1004, 1052], "d2_pinball_scor": [2, 1004, 1048], "d2_pinball_score_08": 1004, "d2_tweedie_scor": [2, 403, 1004, 1047, 1053], "d2_tweedie_score_15": 1004, "d55e00": 253, "d81b60": 312, "d83": 372, "d_": [112, 407, 412, 651, 672, 683, 781, 1001, 1006], "d_c": 407, "d_chunk": 784, "d_fit": 691, "d_fix": 130, "d_m": 407, "d_multi": 130, "da": [370, 1049, 1050, 1052], "dagm": 996, "dagstuhl": 1004, "dai": [0, 44, 52, 53, 150, 174, 186, 211, 372, 375, 886, 1004, 1028, 1040, 1041, 1048, 1049], "daiki": 1038, "daili": [52, 150, 1028], "dakota": 1044, "dale": 1047, "dalla": 1042, "dalmia": [1040, 1041, 1042], "damag": 415, "damicelli": 1049, "damink": 1051, "daml": [407, 452, 462], "damp": [80, 407, 440, 454], "dan": [56, 1034, 1038, 1039, 1040, 1042, 1043], "danfrankj": 1038, "dang": [682, 1000, 1052], "danger": [211, 411], "dangi": 1051, "dangl": 56, "dangonite57": [1049, 1050], "daniel": [322, 362, 888, 1014, 1028, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1044, 1046, 1048, 1051, 1053], "daniela": [1048, 1049], "danielgaerb": 1049, "danielsen": 1041, "danielweitzenfeld": 1037, "daniil": 1041, "danil": 1042, "dani\u00ebl": 1045, "danna": 1044, "danni": [1037, 1038, 1039], "dantzig": 346, "danylo": 1043, "dao": 1042, "daphn": 1045, "dare": 1044, "darioka": [1046, 1048, 1049], "dariu": [1041, 1042], "dark": [138, 185, 339, 370, 1051], "dark2": [63, 65, 231], "darkblu": 299, "darkorang": [111, 125, 129, 130, 211, 221, 233, 254, 255, 256, 259, 275, 277, 293, 299, 300, 330, 356], "darkorchid": 220, "darkr": [224, 294, 338], "darpa": 370, "darren": [1048, 1049], "darshan": 1046, "dart": 1023, "dartmouth": 0, "dasarathi": 372, "dasgupta": [415, 446, 901, 1016], "dash": [70, 112, 135, 146, 157, 169, 172, 174, 185, 206, 211, 212, 219, 222, 223, 247, 262, 268, 278, 341, 1018], "dashdot": [146, 169, 172, 247], "dask": [1024, 1042], "data": [0, 2, 10, 17, 23, 27, 37, 38, 39, 43, 46, 48, 51, 53, 54, 55, 58, 60, 63, 65, 67, 68, 69, 70, 72, 73, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 88, 90, 93, 94, 95, 96, 99, 102, 104, 105, 107, 111, 113, 119, 121, 124, 125, 127, 129, 131, 133, 135, 138, 140, 141, 143, 144, 146, 147, 152, 153, 154, 156, 158, 162, 167, 168, 169, 170, 171, 173, 174, 176, 178, 180, 182, 185, 186, 191, 192, 195, 196, 199, 200, 201, 206, 208, 209, 210, 211, 212, 213, 216, 218, 219, 223, 224, 226, 227, 228, 230, 231, 232, 233, 234, 237, 240, 241, 242, 244, 246, 247, 248, 251, 253, 254, 255, 256, 257, 259, 261, 262, 266, 268, 270, 271, 272, 273, 276, 282, 283, 285, 287, 288, 292, 294, 296, 297, 298, 299, 301, 304, 305, 307, 309, 310, 311, 315, 317, 319, 321, 322, 323, 325, 329, 330, 332, 333, 335, 336, 338, 343, 344, 350, 355, 356, 357, 361, 363, 367, 368, 369, 370, 371, 372, 375, 377, 378, 381, 382, 383, 384, 388, 393, 395, 398, 401, 403, 404, 405, 406, 409, 410, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 424, 425, 426, 431, 432, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 514, 515, 516, 521, 522, 523, 524, 525, 527, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 573, 574, 583, 584, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 608, 609, 610, 611, 613, 614, 620, 621, 625, 628, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 699, 700, 701, 702, 703, 704, 705, 707, 708, 710, 711, 713, 714, 716, 720, 721, 723, 728, 730, 731, 732, 733, 734, 737, 739, 740, 741, 743, 744, 757, 758, 760, 764, 766, 767, 772, 781, 786, 787, 788, 790, 791, 792, 796, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 920, 921, 923, 924, 926, 927, 928, 929, 931, 932, 933, 934, 937, 938, 939, 948, 950, 951, 966, 969, 974, 975, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 990, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1030, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "data1010": 1039, "data_filenam": [502, 506], "data_hom": [486, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 1041, 1050], "data_home_path": 500, "data_id": [45, 144, 174, 185, 210, 228, 238, 262, 282, 285, 314, 369, 497], "data_ind": 54, "data_max": 1039, "data_max_": [877, 1039], "data_min": 1039, "data_min_": [877, 1039], "data_modul": 127, "data_nam": 393, "data_path": 48, "data_rang": 1039, "data_range_": [877, 1039], "data_sampl": 55, "data_set": 304, "data_size_mb": 352, "data_stream": 48, "data_test": [242, 262, 269, 350, 510], "data_test_size_mb": 350, "data_train": [242, 262, 269, 350, 510], "data_train_size_mb": 350, "data_transform": 642, "data_transpos": [1048, 1050], "data_unravel_indic": 54, "data_vers": 393, "databas": [48, 165, 313, 362, 364, 370, 372, 407, 412, 414, 415, 418, 442, 444, 511, 556, 557, 900, 1016], "dataclass": 377, "dataconversionwarn": 2, "datadimensionalitywarn": 2, "datafram": [2, 44, 53, 63, 103, 104, 105, 135, 141, 144, 147, 152, 164, 174, 180, 184, 185, 186, 187, 192, 196, 200, 214, 218, 228, 248, 251, 258, 262, 266, 268, 269, 271, 279, 280, 282, 285, 313, 314, 315, 320, 321, 322, 346, 350, 351, 369, 370, 375, 377, 380, 389, 408, 414, 431, 442, 443, 445, 447, 449, 464, 466, 467, 468, 482, 483, 484, 485, 489, 490, 491, 493, 497, 501, 502, 503, 505, 506, 511, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 562, 563, 567, 568, 569, 570, 571, 583, 584, 585, 591, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 691, 692, 695, 803, 806, 807, 817, 833, 851, 856, 859, 863, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 905, 929, 958, 974, 977, 992, 993, 994, 1024, 1037, 1038, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052], "datalim": 255, "datapoint": [44, 78, 86, 90, 173, 176, 242, 243, 247, 263, 268, 287, 417, 446, 503, 558, 559, 560, 561, 565, 566, 567, 614, 915, 916, 917, 918, 997], "datarollhexasphericon": 1053, "dataset": [2, 38, 46, 47, 49, 50, 51, 54, 55, 56, 58, 59, 60, 64, 65, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 97, 98, 101, 104, 105, 106, 107, 108, 112, 113, 114, 117, 120, 123, 124, 125, 126, 130, 131, 134, 136, 137, 138, 139, 140, 142, 145, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 161, 162, 163, 164, 165, 167, 168, 170, 172, 177, 180, 181, 187, 188, 190, 191, 194, 197, 198, 199, 201, 202, 204, 207, 208, 209, 213, 214, 215, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 232, 234, 235, 236, 238, 241, 243, 245, 246, 250, 251, 253, 255, 256, 257, 259, 261, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 276, 277, 278, 279, 280, 281, 288, 290, 291, 292, 294, 295, 296, 297, 298, 299, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 334, 335, 337, 339, 340, 341, 342, 344, 346, 347, 348, 351, 352, 353, 354, 357, 358, 363, 364, 378, 379, 381, 388, 389, 392, 393, 401, 403, 404, 405, 406, 407, 408, 411, 412, 413, 414, 415, 416, 419, 422, 427, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 458, 459, 469, 470, 473, 474, 475, 476, 478, 481, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 546, 547, 550, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 585, 586, 589, 590, 591, 592, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 631, 634, 635, 636, 637, 638, 641, 642, 643, 646, 648, 649, 650, 652, 654, 655, 656, 658, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 674, 675, 676, 677, 678, 679, 680, 682, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 703, 704, 705, 706, 707, 711, 713, 714, 732, 758, 760, 790, 791, 795, 796, 798, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 817, 818, 819, 820, 821, 822, 823, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 842, 843, 844, 845, 846, 849, 850, 851, 853, 855, 856, 857, 858, 859, 860, 863, 864, 865, 867, 868, 871, 872, 880, 881, 885, 887, 889, 897, 898, 899, 900, 901, 902, 903, 904, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 925, 933, 934, 938, 939, 993, 994, 996, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1016, 1017, 1018, 1019, 1020, 1023, 1024, 1025, 1028, 1030, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041], "dataset_44063": 53, "dataset_nam": [247, 288], "datasets_0004_44063": 53, "datasets_nam": 247, "datastructur": [403, 1042, 1046], "datastuctur": 1051, "datatyp": [387, 464, 466, 1041, 1044], "date": [44, 103, 150, 165, 174, 186, 370, 372, 375, 379, 390, 408, 1024], "dateco2datef641958": 174, "daten": [450, 1042, 1043], "datenbergwerk": 1044, "datetim": [44, 56, 174, 186], "datta": 1053, "dauphin": 1036, "dave": [1034, 1041, 1042, 1048, 1050], "davi": [2, 474, 728, 1004, 1038], "david": [0, 113, 370, 397, 407, 414, 417, 462, 533, 537, 568, 569, 625, 626, 631, 728, 800, 904, 994, 1000, 1008, 1017, 1028, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "davidblnc": [1049, 1050], "davidleon123": 1052, "davies_bouldin_scor": [2, 407, 1042], "davis2006": 1004, "daw": [0, 397, 1034, 1035, 1036, 1037, 1038], "dawson": [1038, 1052, 1053], "dayn": [1049, 1050], "db": [83, 89, 407], "dbauer9": 1045, "dberenbaum": 1050, "dbg": 381, "dbpedia": 56, "dbpedia_resource_prefix_len": 56, "dbscan": [2, 72, 73, 74, 80, 89, 94, 97, 99, 182, 323, 330, 387, 389, 446, 450, 452, 455, 513, 707, 708, 720, 740, 796, 798, 859, 887, 1007, 1025, 1029, 1030, 1034, 1036, 1038, 1039, 1041, 1042, 1043, 1050, 1051], "dbscan_clust": 446, "dcc": 370, "dcg": [729, 759, 1004, 1041], "dcg_score": [2, 759, 1004, 1041, 1044], "dd": [51, 52, 153, 301, 499], "ddof": [268, 887, 898], "de": [52, 155, 314, 372, 638, 691, 767, 1000, 1001, 1024, 1035, 1036, 1037, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052], "dea": [1048, 1049, 1050, 1053], "deactiv": [249, 369, 376, 381, 393, 408, 806, 807, 1048], "dead": 1052, "deadlock": [322, 390], "deal": [63, 91, 104, 150, 180, 185, 196, 234, 277, 282, 285, 343, 352, 375, 380, 408, 415, 416, 417, 474, 497, 706, 711, 766, 790, 873, 951, 1000, 1028, 1037, 1049, 1050], "dealloc": 1051, "dean": [155, 1042, 1048, 1050, 1052], "death": 370, "debian": [0, 362, 373, 381], "debias": 130, "deborah": [1040, 1041, 1051], "debug": [2, 358, 363, 376, 378, 381, 389, 392, 630, 906, 1042, 1046], "debugg": [378, 383], "dec": [211, 285, 680, 886, 911, 1019], "decad": [185, 1024], "decai": [174, 545, 864, 865, 951, 1004, 1018, 1038], "decal": 1046, "decemb": [113, 150, 174, 370, 667, 688, 689, 1034, 1042, 1044, 1046, 1047, 1049, 1053], "decent": [237, 267, 370, 1006], "deci": 277, "decid": [44, 51, 91, 94, 104, 145, 150, 167, 259, 265, 268, 275, 370, 375, 390, 401, 406, 415, 417, 450, 457, 560, 561, 614, 638, 649, 650, 653, 654, 655, 656, 657, 658, 659, 663, 664, 665, 666, 674, 684, 687, 800, 849, 850, 851, 853, 855, 857, 858, 859, 870, 1003, 1010, 1028, 1047, 1050, 1053], "decil": [635, 1045], "deciles_hlines_": 635, "deciles_vlines_": 635, "decim": [63, 175, 471, 472, 920, 1041, 1042], "decis": [0, 2, 41, 44, 63, 65, 67, 68, 71, 77, 90, 92, 94, 125, 127, 129, 134, 137, 138, 139, 140, 145, 153, 154, 155, 157, 158, 164, 165, 171, 173, 185, 191, 195, 201, 219, 220, 223, 225, 237, 238, 240, 245, 248, 260, 271, 272, 274, 275, 285, 296, 299, 303, 308, 309, 310, 313, 327, 331, 332, 335, 336, 337, 338, 339, 340, 341, 347, 348, 350, 362, 371, 372, 375, 377, 389, 401, 402, 405, 407, 414, 437, 469, 497, 501, 505, 513, 520, 537, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 595, 596, 612, 634, 635, 636, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 674, 675, 676, 677, 678, 679, 680, 701, 703, 705, 706, 710, 721, 723, 729, 730, 738, 742, 743, 745, 759, 785, 787, 790, 791, 792, 797, 802, 803, 806, 807, 817, 819, 825, 830, 833, 835, 836, 838, 849, 854, 868, 887, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 920, 921, 998, 1000, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1017, 1018, 1019, 1023, 1024, 1025, 1026, 1028, 1030, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1047, 1048, 1050, 1051, 1052], "decision_funct": [49, 51, 63, 65, 90, 137, 151, 167, 222, 223, 224, 238, 247, 262, 275, 282, 294, 295, 303, 310, 324, 337, 338, 339, 343, 344, 348, 377, 389, 405, 406, 414, 437, 469, 550, 551, 554, 556, 560, 562, 564, 568, 595, 596, 634, 635, 636, 661, 662, 669, 671, 677, 678, 679, 680, 701, 703, 705, 710, 723, 729, 730, 738, 742, 743, 745, 759, 785, 791, 792, 797, 802, 803, 806, 807, 817, 825, 828, 835, 836, 837, 838, 853, 854, 867, 874, 904, 907, 909, 911, 912, 926, 1000, 1004, 1010, 1011, 1018, 1019, 1034, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1051, 1053], "decision_function_shap": [317, 347, 909, 912, 1019, 1039, 1040, 1043, 1044], "decision_path": [357, 558, 559, 565, 566, 567, 915, 916, 917, 918, 1040, 1045], "decision_threshold": [262, 282], "decision_tre": [919, 920, 921, 1020], "decision_tree_learn": [915, 916, 1020], "decisionboundarydisplai": [2, 49, 67, 68, 71, 90, 137, 151, 156, 203, 219, 224, 271, 291, 296, 299, 313, 335, 336, 337, 338, 340, 341, 343, 355, 1048, 1049, 1051, 1052], "decisiontre": [143, 554, 1039], "decisiontreeclassifi": [2, 68, 135, 137, 143, 156, 272, 285, 323, 354, 355, 357, 377, 389, 406, 414, 554, 556, 558, 560, 562, 565, 634, 714, 809, 831, 916, 917, 919, 920, 921, 994, 1005, 1020, 1035, 1036, 1038, 1039, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "decisiontreeclassifierifitteddecisiontreeclassifi": 357, "decisiontreeregressor": [2, 136, 138, 248, 309, 317, 323, 356, 380, 555, 557, 559, 560, 561, 563, 566, 635, 636, 915, 918, 920, 946, 994, 1005, 1020, 1035, 1036, 1039, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "decisiontreeregressorifitteddecisiontreeregressor": [319, 356], "declan": 1046, "declar": [90, 231, 244, 358, 375, 376, 381, 389, 443, 446, 447, 459, 471, 472, 478, 693, 697, 1041, 1045], "decod": [48, 301, 370, 389, 504, 570, 590, 591, 593, 1034, 1035], "decode_error": [48, 415, 504, 590, 591, 593, 1036], "decompos": [11, 121, 125, 138, 310, 535, 539, 712, 828, 951, 999, 1000, 1004, 1021, 1029, 1030], "decomposit": [2, 9, 45, 46, 55, 56, 84, 92, 103, 105, 106, 107, 117, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 153, 230, 231, 233, 242, 245, 246, 249, 267, 292, 297, 313, 321, 324, 325, 351, 364, 368, 381, 384, 389, 403, 404, 405, 408, 414, 419, 449, 451, 452, 453, 462, 482, 483, 484, 496, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 557, 614, 653, 654, 655, 656, 657, 658, 659, 666, 667, 668, 675, 676, 677, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 800, 801, 856, 863, 866, 869, 885, 916, 950, 951, 1000, 1001, 1004, 1021, 1023, 1025, 1026, 1029, 1030, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041], "decompress": [401, 1034], "decor": [2, 186, 317, 375, 376, 377, 384, 809, 826, 940, 944, 946, 964, 970, 1044, 1047, 1050, 1052], "decoupl": [414, 1006], "decreas": [64, 75, 81, 89, 92, 100, 108, 150, 152, 164, 165, 177, 185, 186, 188, 218, 240, 241, 270, 275, 303, 310, 313, 317, 354, 362, 364, 375, 405, 407, 414, 441, 445, 463, 522, 535, 536, 542, 558, 559, 560, 561, 562, 563, 565, 566, 567, 604, 638, 639, 640, 679, 680, 681, 709, 715, 730, 785, 792, 864, 865, 915, 916, 917, 918, 993, 995, 996, 1000, 1001, 1004, 1007, 1008, 1011, 1012, 1018, 1019, 1028, 1036, 1041, 1044, 1047], "dede00": [80, 96, 97], "dedic": [44, 266, 348, 373, 379, 381, 387, 390, 403, 407, 586, 675, 677, 690, 993, 1000, 1023, 1042, 1051], "deduc": 47, "deduct": 1008, "dedupl": 1038, "deeksha": 1046, "deem": [276, 535, 1012, 1047], "deep": [210, 377, 389, 401, 414, 421, 432, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 583, 584, 585, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 691, 692, 693, 694, 695, 772, 800, 801, 802, 803, 806, 807, 817, 825, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 1008, 1009, 1023, 1024, 1028, 1039, 1045, 1046, 1048], "deepak": 1053, "deeper": [350, 1020], "deepest": [562, 563, 1045], "deeplook": 1044, "deeppink": 277, "deepyaman": 1053, "def": [44, 45, 46, 47, 48, 50, 51, 53, 54, 55, 56, 58, 63, 65, 70, 71, 73, 76, 77, 86, 89, 90, 92, 95, 103, 108, 119, 121, 123, 124, 128, 130, 133, 135, 138, 140, 144, 146, 147, 150, 155, 172, 175, 177, 178, 181, 188, 193, 198, 200, 203, 210, 211, 218, 219, 220, 228, 230, 231, 244, 245, 247, 253, 254, 255, 256, 258, 259, 262, 263, 266, 267, 268, 269, 271, 276, 279, 283, 288, 293, 295, 298, 301, 304, 306, 308, 310, 313, 314, 317, 325, 332, 335, 339, 343, 348, 350, 351, 352, 362, 370, 375, 377, 381, 382, 387, 408, 411, 415, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 509, 510, 534, 599, 603, 613, 614, 621, 784, 880, 940, 944, 946, 964, 1004, 1011, 1019], "default": [2, 44, 53, 55, 63, 67, 78, 81, 89, 93, 121, 127, 141, 161, 169, 180, 186, 192, 193, 200, 207, 210, 211, 228, 239, 241, 247, 249, 251, 256, 262, 263, 271, 277, 282, 287, 288, 308, 312, 315, 317, 318, 322, 324, 325, 343, 346, 347, 350, 351, 352, 354, 357, 358, 362, 363, 369, 370, 373, 377, 378, 379, 380, 381, 382, 383, 384, 387, 388, 389, 393, 398, 401, 405, 406, 407, 408, 411, 412, 414, 415, 416, 418, 419, 420, 421, 423, 424, 426, 428, 429, 430, 431, 432, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 583, 584, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 710, 711, 712, 714, 715, 716, 717, 719, 721, 722, 723, 724, 725, 726, 727, 729, 730, 731, 732, 733, 734, 737, 738, 739, 741, 742, 743, 744, 745, 746, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 769, 770, 771, 772, 774, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 931, 932, 933, 934, 937, 939, 940, 942, 944, 945, 946, 950, 951, 952, 953, 954, 955, 956, 957, 966, 968, 969, 972, 973, 974, 976, 977, 978, 984, 987, 989, 990, 992, 993, 994, 996, 998, 1000, 1003, 1004, 1005, 1007, 1008, 1010, 1011, 1014, 1016, 1018, 1019, 1020, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "default_bas": [80, 96], "default_rng": 271, "default_scor": 380, "default_target_attribut": 369, "default_tim": [225, 256], "defaultdict": [50, 53, 63, 188, 271, 351, 352], "defazio": [661, 1000], "defens": 285, "defer": 375, "deffici": 1052, "defici": [551, 1001, 1018, 1053], "defin": [8, 28, 47, 52, 65, 71, 87, 89, 91, 100, 103, 104, 106, 117, 121, 126, 133, 135, 136, 155, 165, 169, 176, 177, 178, 186, 187, 188, 192, 211, 218, 227, 228, 237, 241, 244, 248, 250, 253, 258, 262, 268, 269, 271, 275, 277, 278, 279, 280, 282, 285, 288, 306, 308, 318, 324, 325, 339, 343, 346, 350, 351, 362, 371, 374, 375, 376, 377, 381, 382, 384, 387, 388, 389, 401, 402, 403, 404, 406, 407, 408, 409, 411, 412, 413, 414, 415, 417, 422, 423, 424, 426, 428, 429, 430, 431, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 456, 459, 463, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 489, 520, 521, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 608, 611, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 625, 626, 630, 631, 632, 633, 635, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 691, 692, 693, 694, 695, 699, 700, 702, 711, 713, 714, 719, 724, 725, 726, 727, 728, 731, 734, 741, 744, 748, 749, 751, 753, 754, 756, 757, 760, 763, 769, 784, 788, 793, 794, 795, 796, 800, 801, 802, 803, 806, 807, 809, 817, 825, 826, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 867, 868, 870, 871, 872, 873, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 894, 899, 900, 901, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 937, 939, 942, 949, 961, 963, 987, 993, 994, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1014, 1016, 1018, 1019, 1020, 1024, 1030, 1031, 1036, 1040, 1041, 1042, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1053], "definit": [2, 92, 113, 198, 210, 275, 288, 351, 375, 376, 377, 389, 392, 407, 409, 410, 412, 528, 530, 536, 614, 631, 695, 711, 721, 731, 749, 761, 800, 801, 993, 996, 998, 1000, 1002, 1004, 1007, 1018, 1022, 1030, 1038, 1042, 1049], "definitelyuncertain": 1040, "deflat": [185, 410, 419, 534], "defoi": 1047, "deform": [151, 258, 348], "degener": [119, 254, 419, 440, 454, 534, 723, 1000, 1004, 1043, 1047, 1048], "degrad": [150, 186, 237, 308, 346, 351, 413, 781, 1012], "degre": [44, 71, 123, 137, 174, 180, 184, 185, 186, 190, 192, 196, 198, 200, 211, 214, 243, 249, 253, 254, 255, 258, 259, 268, 283, 306, 319, 320, 336, 343, 345, 412, 416, 446, 452, 499, 536, 542, 642, 643, 646, 659, 778, 800, 803, 853, 882, 886, 909, 910, 911, 912, 913, 996, 997, 999, 1000, 1001, 1002, 1004, 1005, 1007, 1010, 1011, 1014, 1017, 1019, 1037, 1043, 1047, 1048, 1051], "degrees_of_freedom_": 800, "degrees_of_freedom_prior": 800, "degrees_of_freedom_prior_": 800, "dei": 1046, "deil": [1035, 1045, 1046], "dein": 415, "dekel": [669, 670, 1000], "del": [56, 381, 1046, 1047], "delai": [2, 375, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 803, 817, 828, 829, 1048, 1049, 1052], "delalleau": 1017, "delanou": 1045, "delattr": 1046, "delayed_funct": 969, "delbert": [74, 440, 454], "deleg": [90, 381, 431, 432, 612, 920, 992, 1038, 1040, 1046], "delet": [2, 105, 329, 331, 379, 380, 469, 474, 486], "delete_index": 329, "delete_indic": 329, "deleteri": 1041, "deli": 401, "deliber": 1000, "delimit": [375, 1010, 1049], "deliv": [362, 1028], "deliveri": 379, "dell": 52, "delong": [1046, 1047], "delta": [410, 452], "delta_": 1001, "delta_k": 410, "delteil": 1038, "delv": [864, 865], "demand": [146, 150, 389, 415, 803, 817, 828, 829], "demarc": 94, "demiraj": [1049, 1050], "demo": [53, 54, 57, 72, 73, 75, 76, 77, 80, 81, 87, 88, 90, 91, 93, 94, 95, 96, 98, 101, 151, 182, 188, 196, 241, 256, 258, 269, 277, 323, 330, 350, 351, 377, 404, 407, 415, 418, 440, 441, 444, 446, 447, 448, 450, 451, 453, 454, 455, 458, 461, 503, 512, 513, 514, 542, 707, 708, 720, 722, 740, 796, 798, 868, 887, 888, 1025], "demo_param": 377, "demonstr": [47, 53, 58, 59, 60, 63, 69, 72, 76, 79, 89, 95, 103, 105, 135, 139, 145, 148, 162, 163, 177, 178, 182, 188, 203, 211, 212, 216, 244, 250, 251, 255, 259, 260, 264, 271, 274, 277, 283, 290, 293, 300, 307, 309, 310, 312, 313, 315, 319, 327, 329, 330, 333, 337, 343, 347, 350, 351, 352, 356, 358, 364, 370, 371, 375, 380, 387, 398, 403, 407, 411, 414, 447, 503, 513, 521, 561, 700, 706, 716, 745, 801, 803, 850, 872, 903, 915, 993, 994, 998, 1004, 1005, 1006, 1007, 1014, 1017, 1020, 1022, 1025], "dem\u0161ar": [268, 1053], "den": [0, 397, 1035, 1036, 1041, 1042, 1043, 1046, 1047], "dendrit": [407, 713], "dendro": 188, "dendro_idx": 188, "dendrogram": [72, 101, 182, 188, 357, 407, 441, 445, 505, 1025, 1046], "denero": 738, "deng": [1038, 1039, 1040], "dengemann": 1035, "dengyong": 903, "deni": [1036, 1037, 1041, 1042, 1043, 1049, 1050], "denni": 1048, "denois": [43, 69, 84, 85, 87, 100, 120, 126, 130, 182, 412, 497, 536, 538, 542, 586, 589, 833, 877, 1025], "denomin": [275, 414, 415, 420, 475, 592, 707, 760, 998], "denot": [163, 384, 389, 393, 405, 407, 411, 414, 590, 591, 593, 803, 809, 817, 826, 880, 881, 988, 993, 996, 1000, 1002, 1004, 1005, 1014, 1017, 1051], "dens": [52, 89, 182, 191, 196, 199, 205, 321, 322, 332, 362, 384, 389, 407, 412, 414, 416, 443, 446, 447, 449, 464, 467, 497, 524, 525, 528, 535, 536, 545, 567, 609, 610, 632, 633, 655, 660, 661, 662, 669, 670, 671, 675, 676, 679, 680, 681, 690, 691, 692, 695, 696, 763, 764, 770, 782, 795, 864, 865, 872, 879, 880, 882, 884, 885, 886, 887, 896, 897, 898, 899, 900, 907, 908, 909, 910, 912, 913, 952, 974, 977, 994, 997, 1000, 1001, 1004, 1005, 1007, 1010, 1014, 1016, 1017, 1018, 1019, 1020, 1025, 1034, 1036, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "dense_lasso": 197, "dense_output": [764, 770, 900, 952, 1042], "denser": 444, "densif": 1043, "densifi": [389, 661, 662, 669, 670, 671, 679, 680, 681, 907, 994, 1036], "densiti": [2, 51, 83, 89, 94, 99, 108, 130, 163, 165, 172, 182, 197, 210, 225, 228, 234, 237, 241, 252, 253, 259, 268, 274, 285, 289, 294, 295, 308, 339, 350, 370, 372, 384, 389, 407, 414, 418, 426, 444, 446, 448, 450, 452, 464, 467, 499, 503, 537, 542, 550, 551, 800, 801, 803, 847, 848, 852, 853, 900, 998, 1000, 1003, 1007, 1009, 1010, 1016, 1023, 1025, 1026, 1029, 1030, 1036, 1038, 1042, 1043, 1049, 1050], "density_": 900, "density_estim": [426, 926], "densitymixin": 2, "denton": 1036, "deodhar": 1046, "deoli": 1047, "depart": [177, 407], "depedend": 1051, "depend": [2, 26, 44, 45, 47, 53, 65, 73, 87, 108, 125, 141, 144, 147, 148, 150, 152, 155, 160, 164, 175, 180, 182, 183, 185, 188, 190, 193, 196, 228, 231, 236, 237, 243, 247, 258, 262, 268, 269, 273, 274, 275, 277, 282, 288, 304, 308, 313, 319, 322, 325, 336, 343, 346, 351, 352, 358, 362, 363, 364, 368, 375, 377, 378, 383, 384, 387, 388, 389, 390, 392, 393, 400, 401, 403, 407, 409, 411, 412, 414, 415, 416, 417, 418, 438, 439, 440, 444, 446, 447, 449, 450, 452, 454, 457, 459, 460, 462, 464, 469, 484, 489, 490, 491, 494, 497, 501, 502, 503, 505, 506, 511, 535, 536, 542, 545, 552, 560, 561, 563, 590, 591, 592, 593, 604, 606, 609, 610, 614, 630, 635, 636, 641, 643, 651, 661, 662, 672, 674, 676, 679, 680, 681, 683, 690, 693, 694, 697, 698, 714, 732, 733, 741, 781, 784, 786, 787, 790, 795, 796, 800, 801, 822, 832, 849, 850, 851, 853, 855, 856, 857, 858, 859, 865, 866, 868, 880, 881, 884, 887, 901, 908, 909, 912, 916, 931, 992, 993, 994, 996, 997, 998, 1000, 1001, 1003, 1004, 1006, 1007, 1008, 1009, 1012, 1016, 1018, 1019, 1020, 1025, 1030, 1031, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1049, 1050, 1051], "dependabot": [1052, 1053], "dependen": 346, "depict": [135, 270, 414, 1003], "deploi": [262, 325, 362, 392, 401, 406, 1024, 1028], "deploy": [383, 401, 1023, 1024, 1028], "depot": 52, "deprec": [2, 16, 148, 188, 317, 320, 363, 377, 378, 379, 384, 389, 398, 437, 442, 445, 447, 450, 457, 459, 482, 483, 484, 485, 537, 539, 541, 554, 570, 571, 581, 582, 584, 630, 661, 662, 676, 678, 682, 695, 712, 745, 781, 782, 783, 785, 803, 806, 807, 817, 831, 832, 834, 854, 866, 867, 872, 904, 909, 912, 929, 931, 933, 934, 944, 946, 993, 994, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "deprecated_api_refer": 375, "deprecationwarn": [1044, 1053], "dept": 372, "depth": [44, 140, 144, 148, 151, 156, 285, 354, 356, 357, 362, 373, 375, 379, 388, 414, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 847, 848, 852, 915, 916, 917, 918, 919, 921, 957, 1009, 1010, 1020, 1036, 1037, 1045], "der": [695, 699, 1001, 1037, 1038, 1042], "derek": 1042, "deriv": [44, 58, 130, 131, 146, 174, 177, 187, 198, 200, 204, 211, 363, 370, 409, 411, 413, 414, 415, 417, 419, 441, 445, 446, 465, 492, 534, 608, 620, 625, 651, 672, 679, 683, 864, 865, 880, 886, 907, 908, 998, 1000, 1001, 1004, 1008, 1010, 1019, 1034, 1035, 1036, 1041, 1042, 1043, 1049], "deros": 1045, "derouich": 1034, "derweh": 1052, "desai": [1041, 1043, 1046, 1047, 1049, 1050], "desalvo": 993, "descamp": 1042, "descend": [143, 630, 1044], "descent": [2, 47, 54, 145, 182, 191, 198, 199, 237, 242, 294, 320, 338, 412, 414, 471, 472, 478, 488, 497, 504, 532, 538, 539, 540, 541, 543, 544, 546, 547, 548, 549, 634, 642, 649, 650, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 671, 675, 677, 679, 680, 681, 684, 685, 686, 687, 690, 697, 833, 864, 865, 868, 907, 911, 977, 1001, 1008, 1010, 1019, 1025, 1026, 1030, 1034, 1037, 1038, 1039, 1041, 1043, 1045, 1047, 1048, 1049], "descr": [127, 165, 368, 369, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 501, 502, 503, 504, 505, 506, 508, 511, 1042], "describ": [2, 44, 53, 90, 155, 165, 185, 228, 242, 268, 277, 358, 362, 363, 368, 370, 372, 374, 375, 377, 380, 383, 389, 390, 404, 407, 409, 410, 411, 412, 414, 415, 462, 469, 473, 474, 491, 494, 496, 497, 498, 501, 502, 503, 504, 505, 506, 511, 517, 518, 519, 529, 609, 610, 648, 662, 671, 717, 800, 801, 842, 844, 880, 882, 951, 993, 996, 999, 1000, 1003, 1004, 1006, 1010, 1018, 1019, 1020, 1027, 1042, 1044], "descript": [2, 53, 165, 185, 314, 368, 369, 374, 375, 379, 380, 383, 389, 407, 415, 452, 462, 464, 467, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 501, 502, 503, 504, 505, 506, 508, 511, 545, 633, 679, 765, 768, 781, 1004, 1018, 1019, 1027, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "descriptor": [389, 509, 510], "deseri": 401, "deserv": [375, 381], "deshmukh": 1047, "deshpand": [1039, 1040], "design": [0, 2, 54, 59, 112, 135, 155, 172, 184, 185, 194, 244, 258, 262, 308, 314, 357, 364, 369, 375, 380, 387, 388, 389, 390, 392, 393, 395, 400, 401, 403, 407, 414, 416, 516, 529, 635, 636, 651, 668, 672, 679, 683, 688, 803, 821, 822, 842, 844, 994, 1000, 1001, 1004, 1005, 1014, 1023, 1028, 1036, 1043, 1052], "desir": [51, 62, 137, 165, 181, 210, 212, 277, 308, 312, 325, 368, 375, 383, 395, 401, 404, 407, 410, 411, 412, 416, 504, 539, 541, 545, 548, 568, 595, 604, 605, 667, 673, 688, 689, 702, 711, 739, 847, 848, 852, 867, 872, 874, 877, 878, 880, 881, 883, 884, 888, 891, 893, 895, 896, 937, 972, 996, 998, 1001, 1007, 1014, 1018, 1019, 1020, 1034, 1042, 1043, 1044, 1047], "desislava": 1048, "desktop": 373, "despin": [275, 277, 703, 705, 1053], "despit": [65, 117, 175, 203, 208, 210, 228, 243, 297, 389, 398, 409, 630, 631, 633, 1000, 1007, 1028, 1042, 1043], "dessyvv": 1048, "dest": 322, "destin": 1028, "destroi": [274, 415, 798, 876, 1014], "det": [2, 182, 250, 260, 277, 278, 375, 409, 516, 565, 701, 705, 730, 792, 833, 868, 887, 907, 949, 1025, 1046], "det_curv": [2, 265, 701, 785, 792, 1004, 1046, 1047, 1052], "detail": [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 65, 91, 135, 136, 138, 142, 143, 148, 155, 182, 186, 198, 200, 214, 235, 239, 242, 243, 247, 249, 251, 259, 262, 266, 275, 282, 291, 294, 295, 314, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 354, 356, 358, 362, 363, 364, 367, 368, 369, 370, 373, 375, 377, 379, 380, 381, 383, 387, 388, 389, 390, 393, 401, 403, 406, 407, 410, 411, 412, 414, 415, 416, 417, 418, 431, 432, 437, 443, 444, 446, 447, 448, 450, 451, 452, 457, 458, 459, 461, 462, 464, 465, 466, 467, 468, 472, 473, 475, 497, 505, 525, 532, 536, 537, 538, 540, 542, 543, 544, 545, 546, 547, 549, 550, 554, 555, 556, 557, 558, 559, 560, 561, 564, 565, 566, 567, 568, 569, 570, 571, 595, 596, 599, 604, 609, 610, 613, 617, 622, 625, 630, 631, 633, 634, 635, 637, 642, 643, 648, 649, 650, 654, 656, 658, 659, 660, 661, 662, 664, 666, 668, 669, 671, 674, 675, 676, 677, 678, 679, 681, 682, 690, 691, 692, 693, 694, 695, 696, 697, 698, 704, 708, 714, 716, 777, 781, 782, 783, 784, 801, 803, 806, 807, 809, 817, 825, 826, 828, 829, 830, 831, 832, 834, 835, 836, 837, 839, 840, 845, 849, 850, 852, 853, 855, 857, 858, 860, 861, 863, 866, 867, 869, 871, 872, 884, 888, 896, 902, 903, 904, 905, 909, 912, 915, 916, 917, 918, 944, 969, 990, 993, 994, 998, 1000, 1002, 1003, 1004, 1005, 1007, 1008, 1010, 1012, 1017, 1020, 1026, 1027, 1028, 1030, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "detcurvedisplai": [2, 265, 320, 730, 1046, 1047, 1051, 1052], "detect": [2, 14, 43, 48, 50, 59, 71, 97, 99, 112, 113, 114, 142, 144, 151, 182, 194, 214, 224, 236, 250, 260, 262, 268, 271, 277, 278, 289, 308, 314, 325, 338, 370, 373, 375, 379, 387, 389, 405, 406, 407, 409, 411, 415, 429, 446, 449, 464, 466, 469, 470, 473, 474, 475, 476, 488, 489, 491, 493, 497, 511, 513, 516, 523, 538, 539, 540, 547, 564, 565, 590, 593, 598, 634, 642, 680, 701, 705, 730, 792, 833, 853, 857, 868, 877, 880, 881, 885, 886, 887, 907, 911, 996, 1000, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1034, 1037, 1040, 1041, 1042, 1044, 1046, 1047, 1049, 1050, 1053], "detection_error_tradeoff": 1004, "detector": [2, 370, 389, 435, 853], "determin": [2, 49, 51, 54, 58, 81, 89, 112, 135, 137, 141, 150, 163, 174, 185, 192, 193, 203, 207, 213, 268, 281, 308, 313, 343, 352, 357, 358, 374, 375, 377, 384, 388, 389, 404, 405, 407, 411, 412, 414, 415, 416, 417, 430, 437, 441, 442, 443, 445, 447, 449, 450, 456, 459, 460, 461, 465, 469, 470, 472, 473, 474, 475, 476, 482, 483, 484, 488, 491, 493, 496, 498, 504, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 538, 540, 543, 544, 553, 554, 555, 557, 559, 560, 561, 562, 563, 564, 566, 568, 569, 571, 584, 585, 586, 590, 593, 596, 604, 609, 610, 613, 614, 615, 616, 617, 618, 619, 622, 623, 624, 625, 626, 627, 628, 630, 638, 639, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 664, 665, 666, 667, 668, 670, 672, 673, 675, 676, 677, 678, 679, 681, 682, 683, 690, 692, 693, 695, 696, 697, 710, 714, 726, 732, 733, 741, 786, 787, 788, 790, 791, 796, 803, 805, 806, 807, 809, 817, 825, 826, 827, 828, 829, 830, 831, 832, 834, 838, 840, 841, 843, 850, 852, 853, 858, 863, 864, 865, 871, 872, 880, 881, 882, 884, 888, 896, 907, 908, 910, 913, 916, 918, 921, 949, 966, 972, 974, 977, 993, 996, 998, 1003, 1007, 1009, 1010, 1012, 1014, 1017, 1018, 1020, 1034, 1039, 1042, 1043, 1045, 1046, 1047, 1053], "determinist": [92, 147, 363, 371, 389, 407, 443, 447, 449, 451, 452, 453, 458, 459, 462, 552, 560, 561, 565, 566, 585, 586, 694, 698, 814, 815, 863, 915, 916, 926, 996, 1000, 1004, 1035, 1038, 1040, 1042, 1043, 1046, 1049, 1050], "detlefsen": 1048, "detomaso": 1041, "detriment": [47, 164, 282, 363, 416, 1000], "dev": [178, 185, 228, 273, 278, 373, 375, 379, 381, 383, 944, 946, 1004, 1028, 1041, 1046, 1049, 1050], "dev0": [373, 379], "dev514": 1048, "devansh": [1041, 1042], "devanshkyada27": 1051, "devashish": 1040, "devel": 373, "develop": [0, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 184, 185, 186, 187, 188, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 317, 323, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 362, 370, 374, 375, 379, 381, 387, 389, 390, 392, 398, 401, 404, 409, 410, 414, 415, 421, 424, 431, 494, 803, 944, 946, 987, 1000, 1004, 1007, 1020, 1023, 1024, 1025, 1027, 1028, 1034, 1042, 1043, 1044, 1049, 1052, 1053], "developing_estim": 1025, "devi": 1046, "devianc": [2, 146, 149, 210, 228, 323, 414, 554, 559, 560, 562, 563, 566, 651, 672, 683, 724, 726, 727, 750, 752, 755, 916, 918, 1000, 1020, 1035, 1044, 1045, 1047, 1048, 1050], "deviant": [216, 1010], "deviat": [53, 59, 71, 95, 112, 138, 141, 142, 143, 145, 165, 169, 174, 176, 178, 185, 192, 216, 247, 265, 266, 267, 268, 269, 271, 294, 295, 308, 313, 367, 371, 372, 380, 384, 389, 411, 414, 417, 450, 472, 502, 512, 513, 514, 515, 517, 518, 519, 523, 525, 526, 531, 553, 596, 614, 637, 647, 648, 674, 727, 755, 809, 826, 853, 854, 876, 877, 887, 896, 897, 898, 1000, 1004, 1010, 1014, 1040, 1041, 1042, 1045, 1046, 1047], "deviations_": 854, "devic": [411, 584, 990, 1023, 1052], "devnani": 1046, "deweight": 953, "dexter": 1044, "dezub": 1041, "df": [44, 53, 63, 65, 150, 155, 184, 186, 192, 196, 210, 228, 258, 268, 312, 314, 324, 351, 380, 415, 466, 592, 593, 993, 994, 1051], "df_": 228, "df_freq": 228, "df_max_": [63, 65], "df_min_": [63, 65], "df_out": 324, "df_sev": 228, "df_std": 351, "df_test": [210, 228], "df_train": [210, 228], "dfrac": [1008, 1014], "dgemm": 362, "dgesdd": 381, "dhanshre": 1049, "dhillon": [2, 58, 404, 451, 453, 512], "dhingra": [1042, 1043, 1046, 1051], "di": [389, 407, 412, 532, 538, 667, 688, 689, 900, 1038, 1047], "dia": 1051, "diabet": [2, 47, 148, 158, 165, 181, 198, 200, 207, 264, 368, 414, 502, 828, 829, 830, 1012, 1030], "diadochokinet": 1049, "diag": [52, 114, 177, 255, 258, 412, 417, 533, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 800, 801, 1000, 1049], "diag_kind": [184, 185], "diagnos": [165, 271, 372, 383, 392, 408], "diagnosi": [165, 271, 372, 854], "diagnost": [165, 188, 271, 368, 389, 406, 501, 715, 829, 830, 1004, 1012, 1023, 1024, 1030], "diagon": [2, 44, 63, 65, 76, 114, 116, 127, 228, 247, 255, 258, 259, 261, 339, 404, 407, 409, 417, 453, 471, 472, 478, 481, 512, 514, 528, 533, 551, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 653, 654, 657, 658, 659, 685, 686, 704, 718, 795, 800, 801, 851, 859, 996, 998, 1000, 1003, 1004, 1007, 1014, 1040, 1042, 1043, 1044], "diagram": [2, 63, 65, 104, 249, 318, 324, 377, 405, 407, 438, 439, 468, 905, 1014, 1045, 1046, 1051, 1052], "diamet": 407, "diamond": 256, "diaz": 1042, "dice": [450, 457, 702, 781, 782, 783, 1007], "dicedist": 702, "dichotomis": 1020, "dickerson": 1035, "dickson": 1041, "dico": 124, "dict": [49, 50, 51, 52, 56, 64, 75, 103, 106, 107, 141, 145, 147, 149, 208, 216, 237, 246, 255, 266, 267, 269, 272, 275, 277, 288, 292, 310, 314, 321, 332, 339, 343, 351, 352, 364, 367, 369, 377, 387, 389, 408, 411, 418, 419, 421, 425, 429, 431, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 457, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 497, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 583, 584, 585, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 691, 692, 693, 694, 695, 700, 701, 703, 704, 705, 714, 716, 765, 768, 774, 782, 783, 800, 801, 802, 803, 806, 807, 809, 814, 815, 817, 825, 826, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 922, 924, 938, 939, 944, 945, 957, 960, 963, 992, 993, 1004, 1014, 1030, 1034, 1040, 1041, 1050, 1051, 1052], "dict_count_vector": 352, "dict_init": [532, 538, 546, 547], "dict_kei": [127, 629], "dict_learn": [2, 384, 532, 538, 547, 1035, 1042, 1044, 1047, 1048, 1050], "dict_learning_onlin": [2, 546, 1035, 1044, 1047, 1048, 1051], "dict_pos_code_estim": 121, "dict_pos_dict_estim": 121, "dict_pos_estim": 121, "dict_typ": 583, "dictat": 407, "dictionari": [2, 45, 46, 47, 48, 72, 85, 87, 120, 122, 150, 152, 182, 209, 244, 246, 262, 351, 352, 368, 369, 370, 377, 387, 389, 407, 415, 449, 464, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 508, 511, 527, 532, 538, 539, 540, 541, 543, 544, 545, 546, 547, 549, 568, 569, 570, 571, 583, 584, 586, 589, 590, 591, 596, 635, 636, 637, 667, 688, 689, 704, 714, 716, 803, 806, 807, 814, 815, 817, 825, 830, 866, 871, 880, 915, 916, 917, 918, 922, 924, 938, 944, 945, 946, 960, 963, 993, 1000, 1004, 1019, 1025, 1029, 1030, 1034, 1042, 1045, 1046, 1047, 1048, 1049, 1053], "dictionarylearn": [2, 412, 538, 540, 541, 543, 544, 545, 546, 547, 1035, 1039, 1041, 1044, 1047, 1048, 1049, 1050], "dictlearn": 1039, "dictvector": [2, 48, 58, 103, 182, 349, 350, 351, 370, 415, 488, 584, 590, 591, 592, 593, 880, 1025, 1034, 1035, 1038, 1044, 1046, 1047, 1050, 1051], "did": [147, 169, 185, 188, 210, 218, 228, 254, 262, 315, 351, 370, 401, 630, 715, 822, 909, 1035, 1036, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1049], "didact": [375, 1024], "didi": [1040, 1041, 1042, 1043], "didn": [244, 358, 389, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "die": 1001, "diebold": 268, "diederik": [864, 865, 1008, 1049], "diederikwp": 1049, "diego": [1035, 1036], "diegodlh": [1041, 1042], "diemert": [1028, 1036, 1037], "diesel": [210, 228], "dietterich": [268, 837, 1005], "diff": [378, 1004], "diff_embed": 298, "differ": [2, 26, 44, 45, 47, 50, 52, 54, 55, 59, 62, 65, 67, 68, 71, 72, 73, 75, 77, 78, 79, 81, 82, 83, 86, 87, 89, 90, 91, 92, 98, 99, 100, 101, 103, 104, 105, 107, 112, 116, 117, 119, 121, 123, 124, 126, 128, 129, 130, 135, 138, 140, 141, 143, 144, 145, 147, 149, 150, 155, 156, 157, 158, 160, 165, 167, 168, 169, 170, 171, 174, 175, 176, 180, 181, 182, 184, 185, 187, 190, 192, 193, 197, 198, 199, 200, 202, 203, 210, 211, 212, 214, 215, 216, 217, 218, 227, 228, 230, 231, 232, 233, 235, 237, 239, 242, 243, 244, 247, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 281, 282, 283, 285, 287, 288, 291, 294, 295, 297, 303, 304, 307, 309, 310, 312, 313, 317, 325, 333, 334, 335, 337, 338, 339, 341, 342, 346, 347, 350, 351, 352, 356, 358, 362, 363, 364, 369, 370, 372, 373, 374, 375, 378, 379, 380, 382, 383, 384, 388, 389, 393, 395, 401, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 420, 432, 437, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 458, 459, 462, 464, 475, 478, 490, 494, 495, 497, 504, 505, 509, 510, 513, 515, 523, 538, 539, 540, 541, 547, 548, 550, 551, 556, 557, 564, 583, 584, 590, 591, 592, 593, 596, 614, 616, 617, 618, 622, 625, 626, 630, 634, 635, 636, 637, 641, 646, 647, 648, 650, 652, 654, 656, 658, 661, 664, 669, 670, 675, 677, 679, 680, 681, 683, 693, 695, 697, 701, 703, 704, 707, 708, 709, 710, 712, 718, 720, 721, 730, 731, 732, 733, 734, 737, 738, 740, 746, 760, 761, 762, 764, 781, 785, 786, 787, 789, 790, 792, 795, 796, 798, 801, 803, 805, 806, 807, 808, 809, 812, 817, 818, 819, 821, 822, 823, 825, 826, 828, 830, 831, 834, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 857, 860, 863, 867, 872, 876, 877, 879, 880, 881, 882, 883, 884, 885, 887, 888, 892, 893, 894, 895, 896, 897, 898, 907, 908, 909, 910, 912, 913, 915, 916, 917, 918, 960, 967, 993, 994, 996, 997, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1014, 1017, 1018, 1019, 1020, 1021, 1023, 1024, 1025, 1028, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "difference_plot": 273, "differenti": [127, 275, 414, 417, 560, 561, 622, 625], "difficult": [89, 135, 185, 218, 247, 375, 383, 405, 412, 414, 554, 555, 560, 562, 563, 999, 1001, 1003, 1007, 1009, 1011, 1020, 1028, 1034, 1048], "difficulti": [49, 65, 228, 308, 364, 375, 405, 864, 865, 1003, 1007], "diffus": 174, "digest": [326, 375, 1049, 1053], "digg": [1028, 1041], "digicosm": 0, "digit": [2, 45, 52, 53, 66, 72, 75, 81, 85, 87, 90, 91, 93, 95, 96, 98, 105, 106, 124, 140, 163, 165, 182, 201, 202, 203, 217, 226, 229, 230, 232, 234, 241, 242, 256, 261, 266, 267, 270, 292, 297, 298, 302, 304, 305, 323, 327, 330, 351, 368, 375, 381, 407, 413, 414, 416, 441, 445, 447, 503, 542, 545, 550, 567, 661, 691, 692, 693, 694, 695, 700, 707, 708, 716, 720, 721, 740, 796, 798, 833, 856, 863, 867, 868, 877, 887, 893, 900, 903, 912, 919, 920, 921, 1001, 1004, 1007, 1009, 1017, 1025, 1030, 1038], "digraph": 919, "dijkstra": [384, 691, 1001], "dilemma": 999, "dillon": [1042, 1043, 1044], "dilut": [188, 372], "dilutedsauc": 1042, "dim": [219, 241, 296, 297, 299, 335, 336, 528, 702, 1051], "dim_reduction_method": 297, "dimens": [2, 38, 49, 52, 53, 55, 73, 76, 87, 114, 116, 121, 127, 165, 171, 173, 175, 177, 186, 196, 207, 208, 232, 234, 237, 241, 242, 248, 254, 255, 292, 293, 297, 311, 343, 350, 351, 352, 370, 372, 376, 389, 407, 412, 413, 417, 419, 442, 443, 445, 447, 448, 449, 452, 464, 465, 482, 483, 484, 494, 495, 516, 525, 526, 530, 531, 534, 542, 550, 584, 585, 586, 587, 589, 591, 599, 614, 622, 625, 644, 647, 662, 693, 694, 695, 697, 698, 702, 767, 828, 847, 848, 852, 866, 899, 900, 901, 909, 910, 911, 912, 913, 933, 934, 935, 966, 974, 977, 994, 996, 998, 1000, 1001, 1002, 1005, 1007, 1008, 1010, 1016, 1019, 1023, 1041, 1043, 1044, 1046], "dimension": [2, 11, 38, 46, 49, 50, 58, 68, 76, 80, 88, 89, 91, 92, 96, 102, 104, 106, 107, 116, 117, 119, 121, 127, 128, 129, 135, 140, 153, 165, 169, 171, 172, 176, 182, 196, 211, 227, 229, 231, 232, 234, 237, 241, 242, 245, 254, 255, 289, 292, 296, 298, 310, 336, 343, 350, 358, 362, 367, 370, 371, 372, 375, 384, 389, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 445, 447, 449, 465, 469, 473, 482, 483, 484, 485, 488, 489, 490, 491, 493, 494, 495, 496, 498, 501, 502, 503, 505, 506, 511, 516, 520, 533, 535, 536, 539, 540, 541, 542, 545, 548, 550, 564, 567, 574, 601, 609, 634, 643, 644, 645, 655, 691, 692, 693, 694, 695, 696, 697, 699, 702, 713, 728, 800, 801, 803, 833, 847, 848, 849, 852, 855, 856, 863, 867, 868, 871, 877, 882, 887, 899, 900, 901, 907, 911, 951, 989, 995, 996, 999, 1000, 1005, 1006, 1010, 1016, 1017, 1018, 1019, 1020, 1025, 1026, 1028, 1029, 1030, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1043, 1046, 1049, 1050], "dimensionalityreduct": 372, "diminish": 415, "dimitri": [1047, 1048, 1049, 1050, 1051], "dimmick": 372, "dinga92": [1052, 1053], "dingwal": 1041, "dionisi": 1048, "diop": 1044, "dipan": 1052, "direct": [52, 116, 117, 121, 123, 129, 165, 216, 253, 259, 265, 297, 306, 313, 339, 344, 373, 375, 376, 379, 383, 390, 393, 407, 410, 412, 415, 416, 452, 462, 471, 472, 478, 535, 542, 550, 590, 591, 593, 604, 644, 691, 856, 998, 999, 1000, 1005, 1007, 1009, 1024, 1034, 1037], "direction": 1052, "direction_vector": 306, "directli": [0, 46, 58, 65, 81, 90, 104, 127, 140, 144, 165, 177, 196, 198, 210, 216, 228, 238, 273, 306, 308, 321, 324, 325, 326, 352, 358, 362, 373, 375, 376, 377, 379, 381, 387, 388, 389, 390, 403, 404, 405, 407, 408, 409, 410, 411, 415, 417, 442, 452, 462, 464, 465, 469, 474, 528, 568, 569, 570, 571, 595, 599, 614, 623, 635, 646, 649, 650, 655, 656, 663, 664, 665, 666, 667, 680, 684, 687, 693, 777, 781, 784, 795, 796, 803, 806, 807, 817, 831, 832, 834, 850, 852, 866, 867, 868, 874, 884, 886, 889, 896, 993, 1000, 1002, 1007, 1009, 1011, 1014, 1019, 1020, 1034, 1042, 1043, 1045, 1046, 1047, 1050, 1051, 1053], "director": 1028, "directori": [0, 2, 48, 290, 369, 373, 375, 377, 379, 381, 383, 389, 393, 408, 441, 445, 450, 486, 492, 500, 867, 868, 1048], "direr": [1037, 1038, 1041, 1042], "dirichlet": [2, 43, 46, 182, 253, 254, 259, 263, 415, 488, 537, 539, 541, 590, 593, 800, 1023, 1025, 1029, 1030, 1034, 1039, 1040], "dirichlet_distribut": [253, 800, 1003, 1040], "dirichlet_process": [253, 259, 800, 1003, 1040], "disabl": [139, 244, 262, 315, 324, 350, 373, 375, 398, 415, 449, 460, 468, 538, 539, 540, 547, 560, 561, 562, 563, 612, 866, 884, 896, 905, 933, 934, 1014, 1040, 1043, 1047, 1049, 1052, 1053], "disadvantag": [412, 417, 1000, 1001, 1008, 1018, 1019, 1020], "disagre": [738, 1011], "disambigu": [375, 835, 904, 1017, 1049], "disappear": [1000, 1034], "disappoint": 44, "discard": [48, 89, 194, 271, 362, 404, 409, 416, 509, 510, 550, 599, 630, 633, 647, 880, 884, 896, 994, 1000, 1042, 1046, 1052], "disclaim": 1023, "disclos": 388, "disconnect": 1047, "discontinu": [44, 387, 1004], "discord": [375, 708, 1027], "discount": [2, 370, 407, 729, 759, 1041, 1044], "discounted_cumulative_gain": 729, "discourag": [214, 387, 393, 692], "discov": [351, 407, 412, 415, 418, 444, 448, 1049, 1052], "discoveri": [2, 268, 370, 381, 384, 407, 414, 416, 418, 444, 512, 556, 557, 564, 594, 597, 598, 600, 601, 602, 608, 723, 743, 786, 941, 942, 943, 1004, 1016, 1028, 1048, 1049], "discrep": [415, 1038], "discret": [2, 44, 68, 81, 119, 130, 135, 153, 168, 182, 186, 193, 210, 228, 248, 285, 303, 307, 311, 333, 364, 367, 370, 371, 375, 379, 388, 389, 407, 412, 415, 417, 438, 439, 448, 452, 460, 461, 462, 493, 515, 516, 523, 554, 560, 590, 591, 594, 597, 598, 601, 602, 609, 610, 613, 614, 615, 619, 620, 621, 660, 661, 803, 814, 825, 833, 842, 843, 846, 868, 872, 880, 881, 884, 887, 896, 907, 912, 916, 966, 993, 1000, 1001, 1002, 1004, 1005, 1007, 1020, 1023, 1025, 1030, 1036, 1039, 1047, 1048, 1049], "discrete_featur": [609, 610], "discrim": 210, "discrimin": [2, 12, 49, 50, 55, 66, 110, 111, 112, 113, 114, 127, 129, 160, 162, 165, 182, 190, 225, 231, 245, 258, 297, 372, 405, 414, 475, 513, 550, 551, 567, 634, 786, 856, 993, 1001, 1004, 1007, 1018, 1020, 1025, 1026, 1030, 1037], "discriminant_analysi": [2, 68, 70, 71, 129, 231, 297, 358, 403, 537, 550, 551, 856, 998, 1005, 1034, 1037, 1038, 1039, 1040, 1041], "discriminatori": 405, "discuss": [44, 87, 92, 165, 185, 200, 230, 235, 262, 271, 285, 350, 358, 364, 370, 372, 375, 380, 381, 383, 387, 389, 390, 406, 407, 409, 413, 414, 416, 417, 499, 685, 686, 849, 850, 855, 857, 858, 994, 998, 1000, 1001, 1004, 1007, 1014, 1021, 1024, 1027, 1037], "diseas": [47, 158, 165, 181, 271, 372, 715, 1004], "disentangl": 1001, "disjoint": [405, 407, 408, 437, 707, 734, 758, 760, 1001], "disk": [46, 54, 326, 370, 375, 380, 389, 401], "disp": [44, 67, 69, 137, 150, 151, 152, 261, 271, 281, 291, 313, 318, 324, 336, 341, 438, 634, 700, 703, 704, 856], "disp1": 635, "disp2": 635, "dispar": [693, 697, 1001], "dispatch": [104, 262, 389, 403, 468, 803, 817, 828, 829, 830, 905, 969, 970, 1030, 1049, 1052, 1053], "dispatch_next": 969, "dispatch_one_batch": 969, "dispers": [71, 282, 407, 713, 728, 1000], "displai": [2, 52, 63, 65, 71, 73, 81, 94, 104, 113, 114, 116, 117, 121, 141, 151, 152, 155, 180, 182, 185, 186, 199, 228, 236, 237, 247, 251, 257, 265, 269, 270, 275, 277, 278, 281, 283, 298, 314, 318, 319, 338, 355, 362, 375, 377, 378, 382, 384, 393, 395, 408, 412, 415, 416, 421, 438, 464, 467, 468, 497, 542, 565, 633, 634, 635, 661, 690, 700, 701, 703, 704, 705, 716, 721, 785, 792, 803, 809, 817, 826, 833, 867, 868, 880, 882, 887, 905, 912, 919, 920, 921, 941, 969, 990, 1004, 1008, 1023, 1025, 1030, 1043, 1045, 1046, 1048, 1049], "display_label": [46, 261, 700, 1046], "dispos": 993, "disproportion": 413, "disput": 141, "disregard": [350, 389, 415, 430, 465, 482, 483, 484, 553, 555, 557, 559, 561, 563, 566, 569, 571, 614, 638, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 664, 665, 666, 667, 668, 670, 673, 675, 676, 681, 682, 724, 725, 726, 727, 788, 840, 841, 850, 858, 865, 876, 877, 883, 884, 887, 892, 895, 896, 898, 908, 910, 913, 916, 918, 1004, 1042], "disrupt": [363, 373], "dissemin": 1023, "dissimilar": [233, 343, 389, 404, 452, 693, 697, 1001, 1040, 1050], "dissimilarity_matrix_": 693, "dist": [112, 231, 241, 379, 469, 470, 471, 472, 473, 474, 475, 476, 702, 766, 772, 847, 848], "dist_": [469, 474], "dist_embed": 298, "dist_linkag": 188, "dist_matrix": 452, "dist_matrix_": 691, "distanc": [2, 38, 75, 76, 89, 91, 94, 95, 99, 101, 109, 113, 126, 128, 165, 180, 182, 188, 197, 211, 213, 230, 232, 235, 241, 247, 288, 290, 291, 296, 298, 300, 301, 308, 313, 317, 321, 322, 343, 350, 351, 362, 372, 384, 387, 389, 404, 407, 409, 412, 413, 417, 418, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 452, 455, 456, 457, 458, 459, 461, 462, 463, 468, 469, 470, 471, 472, 473, 474, 475, 476, 539, 541, 548, 609, 610, 618, 622, 623, 625, 626, 631, 661, 662, 669, 671, 677, 678, 679, 680, 681, 691, 692, 693, 695, 696, 697, 698, 699, 702, 706, 728, 737, 761, 763, 765, 766, 767, 768, 771, 772, 773, 774, 775, 776, 781, 782, 783, 784, 795, 796, 799, 803, 817, 836, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 862, 886, 901, 905, 907, 909, 911, 912, 913, 915, 916, 917, 918, 994, 998, 1001, 1002, 1004, 1007, 1010, 1014, 1016, 1018, 1019, 1025, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "distance_matrix": 188, "distance_metr": [2, 781, 847, 848, 849, 850, 851, 852, 853, 855, 857, 858, 859, 860, 861], "distance_threshold": [77, 441, 445, 1043, 1046], "distancemetr": [2, 389, 413, 850, 1007, 1042, 1046, 1047, 1048, 1051], "distancemetric64": [847, 848], "distances_": [77, 441, 445, 1046], "distant": [407, 695, 712, 1007], "distil": 235, "distinct": [94, 203, 268, 330, 350, 352, 370, 380, 389, 390, 411, 414, 415, 591, 804, 813, 821, 881, 882, 902, 903, 993, 1000, 1007, 1010, 1042], "distinguish": [44, 59, 76, 112, 119, 126, 212, 265, 285, 370, 389, 390, 417, 993, 1004, 1007, 1010], "distort": [38, 209, 241, 372, 405, 884, 896, 901, 1001, 1014, 1016], "distribut": [2, 26, 38, 43, 44, 48, 49, 50, 53, 59, 65, 71, 73, 75, 80, 86, 87, 89, 91, 96, 108, 111, 112, 113, 117, 119, 127, 135, 137, 147, 151, 160, 165, 169, 178, 182, 184, 185, 188, 190, 192, 203, 210, 212, 214, 232, 234, 237, 241, 247, 253, 258, 259, 262, 264, 268, 274, 276, 282, 285, 289, 293, 307, 308, 310, 313, 323, 328, 329, 344, 346, 350, 362, 363, 368, 371, 372, 373, 375, 376, 380, 389, 405, 407, 409, 411, 412, 413, 419, 447, 449, 469, 470, 471, 472, 473, 474, 475, 476, 488, 499, 504, 516, 517, 518, 519, 520, 524, 533, 534, 537, 551, 552, 553, 564, 614, 628, 643, 645, 647, 648, 651, 661, 662, 672, 682, 683, 691, 692, 693, 695, 709, 711, 727, 755, 792, 800, 801, 807, 808, 815, 817, 821, 822, 833, 843, 846, 852, 856, 863, 870, 883, 884, 885, 886, 887, 895, 896, 897, 902, 903, 911, 922, 953, 993, 998, 1000, 1002, 1003, 1004, 1006, 1007, 1009, 1010, 1016, 1017, 1023, 1024, 1025, 1029, 1030, 1034, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1050, 1053], "district": [181, 370], "distutils_use_sdk": 373, "ditenberg": 1041, "div": [247, 947], "dive": [117, 375, 381, 993], "diverg": [55, 146, 230, 235, 293, 539, 541, 548, 695, 863, 1001, 1003, 1004, 1009, 1011, 1041, 1042, 1047, 1053], "divers": [0, 389, 414], "divid": [73, 79, 121, 162, 174, 210, 247, 253, 351, 358, 371, 372, 404, 406, 407, 411, 412, 414, 469, 470, 471, 472, 473, 474, 475, 476, 513, 520, 535, 542, 679, 680, 681, 722, 729, 737, 741, 749, 759, 797, 799, 864, 865, 909, 912, 951, 954, 955, 993, 1001, 1003, 1004, 1007, 1014, 1018, 1020, 1034, 1041, 1042, 1045], "dividend": 1004, "divis": [321, 407, 415, 592, 593, 596, 715, 716, 732, 733, 741, 749, 786, 787, 790, 1004, 1038, 1042, 1043, 1046, 1050, 1051], "divisor": 1004, "divo": 1044, "divyanshu": 1047, "divyaprabha": 1045, "diwakar": 1048, "dixon": [772, 1044, 1045], "dizietasahi": 1044, "di\u1ec5n": 1049, "djipei": [1039, 1040], "dl": 679, "dlabal": 1038, "dll": 1048, "dlovel": 1042, "dmallia17": 1047, "dmitri": [1039, 1041, 1042, 1043, 1047, 1050, 1051, 1053], "dmitrij": 1038, "dmytro": 1047, "dn": [0, 1007], "dna": [387, 631, 994], "dnf": 393, "do": [0, 31, 44, 50, 53, 63, 65, 78, 89, 95, 101, 107, 125, 127, 130, 139, 142, 143, 147, 148, 150, 155, 162, 167, 174, 180, 185, 186, 187, 210, 214, 228, 230, 232, 244, 245, 247, 259, 262, 263, 266, 269, 271, 281, 287, 288, 290, 294, 320, 322, 324, 333, 336, 339, 343, 344, 346, 350, 351, 352, 357, 358, 362, 363, 364, 370, 372, 374, 375, 376, 377, 378, 379, 381, 382, 383, 389, 390, 401, 403, 405, 406, 407, 408, 409, 410, 411, 414, 415, 416, 426, 450, 461, 464, 467, 504, 537, 539, 543, 545, 553, 556, 583, 584, 590, 591, 593, 604, 635, 636, 648, 649, 655, 658, 659, 661, 662, 669, 671, 679, 740, 766, 781, 785, 805, 820, 823, 839, 840, 844, 871, 872, 874, 881, 885, 887, 892, 893, 895, 896, 897, 898, 915, 916, 917, 918, 932, 977, 993, 996, 998, 1000, 1001, 1004, 1005, 1007, 1008, 1012, 1014, 1019, 1020, 1023, 1027, 1028, 1034, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "do_early_stopping_": [562, 563], "doc": [0, 44, 48, 53, 58, 322, 326, 350, 352, 363, 375, 379, 380, 383, 389, 393, 400, 415, 590, 591, 593, 781, 784, 795, 796, 830, 1034, 1038, 1048, 1053], "doc_environ": 383, "doc_it": 48, "doc_linux": 383, "doc_topic_distr": [537, 1041], "doc_topic_prior": [412, 537], "doc_topic_prior_": 537, "dock": 1053, "docker": [383, 401, 1047, 1048], "dock\u00e8": [1043, 1044, 1045, 1051, 1052, 1053], "docstr": [375, 377, 381, 389, 448, 461, 472, 702, 704, 940, 993, 1007, 1008, 1018, 1034, 1041, 1042, 1047, 1048, 1051], "doctest": [375, 389, 1034], "document": [2, 17, 43, 46, 50, 52, 55, 56, 57, 60, 64, 73, 91, 92, 94, 95, 103, 104, 105, 119, 121, 140, 142, 151, 152, 155, 158, 162, 174, 185, 186, 187, 194, 225, 238, 239, 240, 241, 244, 245, 247, 248, 249, 250, 251, 258, 262, 266, 268, 269, 275, 280, 282, 305, 306, 314, 318, 321, 322, 324, 330, 332, 346, 352, 356, 357, 362, 363, 364, 369, 370, 371, 373, 374, 376, 377, 378, 379, 380, 381, 383, 387, 389, 390, 393, 395, 398, 401, 403, 404, 407, 412, 415, 418, 444, 447, 448, 449, 450, 453, 457, 464, 488, 489, 500, 502, 512, 522, 524, 537, 545, 565, 590, 591, 592, 593, 606, 612, 634, 642, 646, 661, 669, 671, 677, 679, 699, 700, 702, 706, 708, 720, 740, 761, 762, 772, 781, 782, 783, 796, 798, 803, 806, 807, 809, 817, 826, 837, 844, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 868, 879, 907, 912, 929, 932, 934, 948, 969, 993, 1000, 1002, 1004, 1005, 1006, 1007, 1008, 1012, 1018, 1021, 1025, 1028, 1035, 1036, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "document_clust": 1040, "document_nam": 58, "doddington": 1004, "doe": [28, 44, 47, 48, 49, 52, 53, 62, 63, 68, 71, 76, 81, 87, 89, 91, 103, 105, 106, 117, 131, 135, 140, 141, 143, 144, 145, 149, 150, 155, 165, 167, 175, 185, 186, 196, 203, 210, 216, 228, 230, 231, 232, 235, 237, 240, 241, 242, 244, 245, 247, 255, 256, 262, 263, 268, 270, 271, 275, 277, 278, 287, 288, 301, 308, 310, 312, 314, 315, 320, 321, 326, 331, 332, 337, 339, 346, 348, 350, 351, 352, 356, 362, 363, 369, 373, 375, 376, 377, 379, 383, 388, 389, 395, 398, 401, 403, 405, 407, 408, 411, 412, 414, 415, 416, 417, 432, 440, 442, 446, 447, 449, 450, 454, 456, 467, 473, 479, 487, 500, 504, 509, 528, 536, 538, 539, 540, 545, 547, 550, 551, 554, 555, 558, 559, 560, 561, 562, 563, 564, 565, 566, 583, 584, 585, 590, 591, 593, 595, 596, 599, 604, 608, 613, 635, 641, 652, 653, 654, 657, 658, 659, 662, 674, 685, 686, 701, 703, 705, 710, 731, 732, 733, 737, 739, 741, 746, 781, 786, 787, 790, 791, 797, 803, 806, 807, 817, 864, 868, 869, 870, 872, 874, 876, 879, 880, 881, 884, 887, 888, 896, 899, 900, 904, 907, 908, 915, 916, 917, 918, 922, 933, 937, 944, 951, 954, 955, 956, 969, 987, 993, 994, 996, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1012, 1014, 1018, 1019, 1020, 1034, 1035, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1053], "doepk": 1041, "doesn": [48, 185, 210, 244, 254, 287, 305, 339, 383, 389, 393, 401, 407, 411, 415, 416, 420, 432, 475, 635, 636, 669, 671, 679, 719, 831, 834, 839, 849, 850, 864, 876, 877, 1003, 1004, 1020, 1038, 1051], "dog": [320, 321, 323, 324, 325, 584, 786, 888, 1014], "dohmatob": [1039, 1040, 1041], "dohri": [1051, 1052], "doi": [190, 210, 228, 375, 407, 679], "dok": [554, 555, 874, 1047], "dokato": 1041, "dolan": 370, "dollar": [185, 370], "dolmatov": 1044, "dolphin": 350, "domain": [150, 210, 282, 314, 326, 389, 392, 411, 638, 724, 726, 727, 804, 805, 810, 811, 812, 1000, 1024, 1053], "domenico": 1053, "domin": [141, 181, 188, 210, 215, 247, 277, 313, 370, 381, 405, 887, 1006, 1014, 1020, 1050], "domingo": [65, 791, 1004], "dominik": [1041, 1050], "don": [52, 65, 88, 103, 150, 185, 231, 244, 245, 262, 268, 281, 288, 331, 336, 340, 350, 351, 362, 369, 375, 377, 379, 381, 383, 388, 393, 398, 406, 408, 415, 427, 649, 655, 835, 915, 916, 917, 918, 926, 967, 993, 1000, 1003, 1005, 1008, 1010, 1018, 1038, 1043, 1050, 1051, 1052], "don86": 1041, "donald": [46, 370, 407, 728, 994], "donat": 238, "done": [0, 46, 48, 49, 51, 53, 55, 56, 58, 84, 86, 87, 124, 150, 162, 165, 174, 175, 185, 186, 190, 192, 196, 197, 214, 227, 243, 244, 258, 266, 269, 272, 277, 288, 311, 319, 326, 350, 351, 352, 356, 358, 363, 369, 373, 375, 379, 382, 383, 384, 387, 389, 398, 407, 409, 411, 412, 414, 424, 430, 441, 442, 445, 450, 452, 472, 482, 483, 484, 485, 489, 536, 562, 563, 584, 608, 609, 610, 631, 633, 635, 637, 646, 647, 648, 662, 725, 744, 800, 801, 803, 817, 819, 822, 823, 825, 871, 885, 945, 988, 993, 994, 997, 1000, 1001, 1004, 1006, 1007, 1008, 1014, 1017, 1018, 1019, 1020, 1024, 1034, 1036, 1041, 1044, 1046, 1050], "dong": 1044, "donn": 1039, "donoho": [692, 696, 1001], "donor": [165, 372], "donovan": 1040, "dor": 1042, "dorin": [97, 448], "dormagen": 1044, "doshi": 1053, "dot": [2, 56, 70, 80, 83, 88, 91, 96, 110, 111, 112, 114, 116, 117, 122, 123, 124, 128, 130, 135, 138, 169, 170, 176, 177, 185, 194, 196, 203, 205, 206, 242, 254, 255, 257, 258, 262, 272, 335, 337, 343, 362, 377, 381, 384, 389, 404, 412, 415, 534, 539, 541, 548, 592, 593, 617, 649, 650, 653, 655, 656, 657, 660, 663, 664, 665, 666, 684, 687, 690, 764, 766, 879, 919, 952, 1002, 1006, 1014, 1018, 1019, 1043], "dot_data": [919, 1020], "dot_product": 952, "dotproduct": [2, 172, 173, 178, 417, 614, 628], "dotson": 1039, "doubl": [71, 141, 280, 375, 389, 412, 539, 541, 542, 548, 847, 848, 858, 987, 994, 1019, 1020, 1034, 1044, 1045, 1053], "doubt": [375, 376, 379, 1000, 1010, 1023], "doucet": 1048, "douetteau": 1028, "doug": [1035, 1036, 1046], "dougal": [1036, 1038, 1039, 1041, 1042, 1043, 1044], "dougla": 1042, "douillard": 1041, "doumouro": 1043, "douriez": [1044, 1045], "dowl": 1040, "dowload": 326, "down": [81, 82, 113, 135, 225, 226, 232, 241, 242, 244, 271, 285, 306, 308, 343, 358, 369, 378, 383, 389, 409, 412, 443, 450, 456, 592, 595, 596, 642, 652, 777, 781, 784, 876, 877, 882, 885, 886, 897, 909, 912, 919, 1000, 1042], "downarrow": 1006, "download": [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 160, 161, 162, 163, 164, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 182, 184, 185, 186, 187, 188, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 368, 370, 372, 373, 379, 380, 383, 395, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 511, 1020, 1030, 1038, 1039, 1042, 1046, 1047, 1048, 1053], "download_20newsgroup": 1038, "download_if_miss": [488, 489, 490, 491, 493, 494, 495, 496, 498, 499, 1041], "download_url": 48, "downsampl": 124, "downsid": 352, "downstream": [44, 112, 315, 352, 415, 532, 535, 538, 542, 543, 608, 880, 1014, 1044], "downweight": [409, 537], "dowon": [1042, 1043], "dozen": [388, 417], "do\u0161ilovi\u0107": [1051, 1052], "dp": [254, 259], "dpgmm": [254, 259, 1034, 1038, 1040], "dpi": [221, 921, 1047], "dpy_debug": 381, "dqd": 381, "dr": [0, 165, 372, 407, 1048], "draft": [375, 390], "drag": 395, "dragon": 1014, "drama": 415, "dramat": 364, "dramsch": 1044, "drastic": [169, 241, 276, 407, 411, 1007, 1017], "draw": [44, 47, 94, 178, 185, 248, 270, 275, 339, 382, 410, 412, 413, 414, 556, 557, 558, 559, 564, 565, 566, 567, 614, 637, 704, 809, 826, 919, 921, 1003, 1023, 1047, 1048], "drawback": [227, 996, 999], "drawcoastlin": [51, 301], "drawcountri": [51, 301], "drawn": [47, 86, 112, 138, 164, 169, 178, 184, 248, 275, 292, 350, 363, 371, 407, 413, 414, 417, 419, 469, 470, 471, 472, 473, 474, 475, 476, 516, 524, 534, 556, 557, 558, 559, 564, 565, 566, 567, 614, 630, 635, 644, 843, 899, 900, 917, 918, 1000, 1014, 1016, 1037], "drawstyl": [354, 703], "draxu": 1034, "drew": [1043, 1052, 1053], "drewhogg": 1049, "drewmjohnston": 1043, "drgfreeman": 1044, "driessen": [409, 469, 474, 1010], "drift": 1024, "drivag": [210, 228], "drive": [364, 412, 413, 550, 1018, 1028], "driven": [0, 188, 1028], "driver": [210, 228, 1049], "drop": [44, 45, 53, 104, 108, 117, 150, 174, 184, 185, 186, 188, 210, 214, 228, 247, 251, 262, 278, 314, 319, 322, 324, 351, 379, 383, 408, 412, 414, 464, 467, 568, 569, 570, 571, 633, 698, 703, 705, 785, 792, 866, 880, 886, 994, 1000, 1004, 1014, 1023, 1034, 1035, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052], "drop_binary_enc": 880, "drop_dupl": 280, "drop_enc": [880, 1014], "drop_first": 698, "drop_idx": 880, "drop_idx_": [880, 1045, 1049], "drop_intermedi": [703, 705, 785, 792, 1050], "drop_nul": [53, 174], "dropdown": [165, 375, 993, 1004], "dropped_result": 144, "dropper": 144, "dror": 1043, "dross": 535, "dro\u017cd\u017c": 1037, "drskd": 1048, "druck": 1048, "drucker": [136, 414, 555], "drug": 1000, "dry": 186, "dryden": 103, "ds_ana": 1047, "ds_cnt": [68, 310, 311], "dschult": 56, "dscullei": 449, "dseg": 103, "dsouza": [1045, 1046, 1047, 1048], "dsquareindia": 1040, "dss": 1028, "dt": [84, 124, 156, 174, 414, 415, 1020], "dtreeviz": 1023, "dtype": [44, 48, 50, 51, 56, 83, 87, 99, 103, 104, 144, 146, 148, 149, 151, 170, 171, 172, 181, 185, 186, 212, 228, 251, 253, 262, 266, 272, 276, 282, 285, 295, 301, 314, 320, 321, 323, 329, 357, 369, 370, 375, 377, 387, 389, 403, 408, 411, 414, 415, 422, 423, 425, 428, 442, 443, 447, 448, 449, 450, 451, 453, 459, 464, 466, 467, 469, 472, 474, 488, 489, 490, 491, 497, 498, 499, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 515, 523, 543, 549, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 583, 584, 587, 588, 590, 591, 593, 595, 596, 603, 604, 608, 630, 631, 632, 633, 635, 636, 643, 644, 647, 648, 649, 655, 659, 660, 663, 664, 665, 666, 667, 668, 674, 676, 678, 700, 702, 708, 717, 718, 734, 741, 744, 758, 789, 809, 828, 830, 831, 843, 847, 848, 850, 858, 872, 878, 880, 881, 887, 888, 890, 892, 893, 894, 895, 896, 897, 898, 901, 909, 910, 911, 912, 913, 915, 916, 917, 918, 928, 930, 931, 933, 934, 958, 968, 974, 977, 978, 979, 980, 981, 984, 989, 990, 994, 1005, 1014, 1017, 1019, 1035, 1037, 1038, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "dtype_exclud": [104, 466], "dtype_includ": [104, 144, 155, 247, 408, 466], "du": [0, 396, 397, 1034, 1035, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "dua": 1043, "dual": [103, 105, 317, 346, 350, 415, 416, 471, 472, 478, 614, 649, 650, 655, 656, 661, 662, 663, 664, 665, 666, 684, 687, 847, 848, 907, 908, 909, 912, 1019, 1036, 1045, 1048, 1050], "dual_coef_": [536, 646, 909, 910, 911, 912, 913, 1019, 1038], "dual_gap": [471, 472, 478, 649, 650, 655, 656, 663, 664, 665, 666, 684, 687], "dual_gap_": [649, 650, 655, 656, 663, 664, 665, 666, 1047], "dualiti": [472, 1000], "dualtre": [847, 848], "duan": [1043, 1045], "duart": [1039, 1047, 1049, 1052], "dubai": 415, "duboi": [1040, 1042], "dubou": 1044, "dubourg": [0, 397, 1028, 1034, 1038], "duchesnai": [0, 397, 1034], "duck": [377, 389, 1044], "ducktyp": [1038, 1051], "duckworth": 1034, "ducout": 1048, "duda": [372, 998], "due": [49, 53, 64, 65, 87, 89, 94, 108, 135, 138, 169, 185, 186, 192, 196, 202, 208, 210, 212, 227, 228, 241, 247, 254, 276, 277, 282, 287, 288, 313, 314, 343, 346, 350, 351, 352, 375, 381, 387, 389, 393, 405, 406, 407, 411, 412, 414, 417, 443, 446, 447, 459, 536, 540, 544, 545, 575, 674, 803, 806, 807, 811, 813, 817, 828, 829, 832, 835, 839, 840, 872, 876, 877, 887, 994, 1000, 1001, 1003, 1004, 1005, 1007, 1011, 1018, 1019, 1024, 1034, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "dueck": [74, 440, 454], "dugnat": 1048, "duhaim": 1042, "dummi": [2, 135, 136, 210, 228, 244, 262, 271, 380, 402, 552, 553, 735, 880, 889, 926, 1005, 1014, 1020, 1030, 1035, 1037, 1038, 1039, 1041], "dummy_classifiers_misclassification_error": 135, "dummy_clf": [135, 552], "dummy_leaf_": 442, "dummy_regr": 553, "dummy_sev": 228, "dummybiclust": 422, "dummyclassifi": [2, 135, 262, 271, 553, 735, 1004, 1035, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1052], "dummyestim": [560, 561], "dummyregressor": [2, 210, 228, 552, 1004, 1005, 1035, 1037, 1038, 1041, 1042, 1044, 1047, 1048, 1052], "dumont": 1020, "dump": [2, 56, 401, 487, 847, 848], "dump_svmlight_fil": [2, 1034, 1035, 1039, 1049, 1051], "duong": [1051, 1052], "duplic": [363, 374, 375, 376, 389, 407, 418, 444, 448, 449, 516, 638, 649, 650, 655, 656, 663, 664, 665, 666, 684, 687, 831, 878, 989, 1007, 1034, 1037, 1046, 1048, 1050, 1051, 1053], "dupont": 52, "dupr": [1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050], "dupr\u00e9": [0, 397, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "duqu": 1047, "durat": [44, 48, 210, 228, 247, 262, 290, 352, 363, 969, 970, 1000, 1004], "duration_sec": 50, "duration_test": 350, "duration_train": 350, "dure": [0, 44, 45, 52, 53, 84, 89, 92, 105, 108, 117, 126, 139, 144, 145, 150, 152, 162, 169, 174, 185, 186, 188, 200, 203, 211, 218, 262, 266, 270, 282, 288, 319, 320, 343, 362, 364, 373, 375, 377, 379, 380, 389, 390, 407, 408, 412, 414, 415, 417, 418, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 459, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 583, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 613, 614, 616, 617, 618, 620, 622, 623, 625, 626, 628, 630, 631, 632, 633, 635, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 691, 692, 693, 694, 695, 703, 792, 800, 801, 802, 803, 806, 807, 817, 825, 828, 829, 830, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 870, 871, 872, 873, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 892, 898, 899, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 993, 994, 996, 1000, 1001, 1007, 1014, 1016, 1020, 1030, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1053], "duron": 1048, "duti": 390, "dutt": 1050, "dutta": [1051, 1052], "duv2014": 417, "duvenaud": [417, 625, 626], "dwight": 1049, "dx": [52, 54, 702], "dx_c": 1011, "dy": [52, 702], "dye": 1047, "dylan": [1041, 1044], "dymil": 1053, "dynam": [52, 53, 186, 556, 557, 558, 559, 564, 565, 566, 567, 581, 582, 679, 680, 681, 1020, 1028, 1040, 1046, 1051], "dzi": 1052, "dziki": 1037, "d\u00b2": 228, "d\u00f6pfert": 1042, "e": [0, 26, 44, 48, 50, 51, 53, 63, 64, 65, 69, 71, 87, 89, 91, 95, 103, 110, 112, 113, 114, 116, 117, 124, 126, 127, 135, 138, 144, 146, 147, 150, 151, 161, 164, 165, 177, 184, 185, 186, 190, 193, 196, 200, 201, 210, 211, 212, 214, 228, 230, 231, 243, 244, 262, 264, 268, 269, 271, 273, 274, 275, 283, 285, 287, 294, 301, 310, 313, 317, 319, 325, 346, 352, 356, 357, 358, 362, 363, 364, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 387, 388, 389, 393, 398, 401, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 437, 439, 441, 443, 444, 445, 447, 449, 450, 454, 463, 464, 465, 466, 469, 470, 471, 472, 473, 475, 476, 482, 483, 484, 497, 499, 501, 502, 503, 504, 525, 534, 536, 537, 539, 541, 542, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 579, 583, 584, 590, 591, 592, 593, 595, 596, 599, 605, 606, 607, 608, 609, 610, 611, 613, 614, 620, 625, 626, 631, 633, 636, 637, 638, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 687, 690, 691, 693, 695, 697, 700, 702, 704, 707, 708, 711, 712, 731, 732, 733, 734, 741, 744, 745, 758, 766, 770, 781, 788, 791, 800, 801, 802, 803, 804, 805, 806, 807, 809, 810, 812, 816, 817, 821, 825, 826, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 857, 858, 859, 863, 864, 865, 867, 870, 872, 873, 874, 875, 877, 878, 879, 880, 881, 882, 883, 885, 886, 887, 888, 890, 892, 893, 894, 895, 896, 897, 898, 902, 903, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 922, 950, 951, 953, 957, 958, 960, 963, 978, 989, 993, 994, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1018, 1019, 1020, 1024, 1027, 1028, 1034, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "e0129126": 369, "e11": 370, "e2": [901, 1000], "e41a1c": [80, 96], "e501": [165, 350], "e_": 412, "each": [2, 28, 44, 47, 48, 50, 51, 52, 53, 55, 56, 59, 63, 64, 65, 69, 71, 73, 77, 79, 80, 82, 83, 87, 89, 92, 94, 95, 103, 104, 106, 107, 108, 116, 117, 119, 121, 122, 126, 127, 128, 129, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 148, 150, 151, 153, 154, 155, 156, 157, 158, 161, 165, 171, 173, 178, 180, 181, 184, 185, 186, 188, 190, 192, 197, 199, 200, 203, 205, 208, 210, 211, 212, 214, 215, 218, 225, 228, 231, 237, 238, 241, 242, 243, 244, 245, 247, 248, 249, 251, 253, 256, 258, 261, 262, 263, 264, 266, 268, 269, 271, 273, 274, 277, 278, 282, 285, 287, 288, 291, 293, 297, 299, 301, 303, 304, 306, 308, 309, 310, 311, 313, 314, 315, 317, 319, 320, 321, 323, 324, 325, 328, 329, 330, 333, 339, 343, 346, 351, 352, 354, 355, 357, 358, 362, 363, 364, 369, 370, 371, 372, 373, 375, 376, 377, 379, 380, 383, 384, 387, 388, 389, 398, 401, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 424, 425, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 459, 460, 461, 463, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 478, 482, 483, 484, 485, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 505, 506, 509, 510, 511, 512, 513, 514, 515, 516, 520, 523, 524, 527, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 583, 584, 585, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 710, 711, 713, 716, 722, 728, 731, 732, 733, 741, 742, 748, 749, 751, 753, 754, 756, 757, 761, 762, 765, 766, 767, 768, 769, 771, 772, 773, 774, 776, 777, 779, 781, 782, 783, 784, 786, 787, 788, 790, 791, 793, 794, 795, 796, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 817, 818, 819, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 891, 892, 893, 894, 896, 897, 898, 899, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 920, 921, 924, 939, 946, 951, 953, 954, 959, 960, 979, 980, 981, 984, 993, 994, 996, 998, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1028, 1034, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "eager": 262, "eargl": 1048, "earl": 1037, "earli": [44, 47, 55, 80, 96, 134, 135, 141, 143, 182, 191, 198, 312, 318, 326, 389, 414, 441, 445, 449, 463, 490, 497, 537, 538, 539, 540, 547, 554, 555, 560, 561, 562, 563, 630, 648, 659, 669, 670, 671, 679, 681, 695, 753, 833, 864, 865, 977, 1001, 1007, 1014, 1018, 1022, 1024, 1025, 1028, 1034, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1048, 1049, 1051], "earlier": [141, 186, 214, 369, 375, 410, 838, 841, 1014, 1032, 1035, 1047, 1049], "earliest": [369, 1001], "early_exager": 1041, "early_exagger": 695, "early_stop": [141, 150, 186, 218, 303, 320, 350, 389, 414, 562, 563, 669, 670, 671, 679, 680, 681, 864, 865, 1018, 1042, 1045, 1048, 1049, 1053], "earn": [184, 185, 390], "earth": [232, 351, 767, 1023], "eas": [105, 188, 258, 313, 375, 378, 381, 1000, 1018, 1023, 1024, 1028, 1045, 1046, 1048], "easi": [186, 218, 228, 256, 266, 268, 339, 350, 358, 370, 375, 381, 383, 387, 388, 401, 407, 414, 501, 505, 511, 874, 993, 999, 1003, 1011, 1014, 1023, 1024, 1028, 1044, 1049, 1050], "easier": [80, 96, 100, 114, 144, 192, 199, 239, 247, 265, 266, 308, 339, 350, 358, 370, 375, 377, 380, 383, 387, 393, 409, 411, 468, 516, 905, 944, 999, 1004, 1011, 1020, 1024, 1028, 1043, 1048], "easiest": [377, 383, 408, 1001], "easili": [44, 49, 68, 127, 162, 188, 213, 226, 242, 244, 248, 251, 268, 270, 277, 293, 310, 326, 375, 377, 389, 390, 401, 408, 414, 415, 417, 449, 998, 1000, 1001, 1014, 1018, 1019, 1020, 1027, 1040], "easlii": 238, "ec": [308, 531], "ecat": 370, "echo": [373, 379], "eckert": 1039, "eckhart": 495, "eclf": [156, 157, 414], "eclf1": 570, "eclf2": 570, "eclf3": 570, "ecml": 0, "ecoc": 285, "ecolog": [51, 301, 370, 499], "econom": [184, 185, 268], "econometr": 1000, "econometrica": 1000, "ecosystem": [326, 375, 383, 994, 1022, 1028, 1053], "ecuador": [51, 301, 370, 499], "ed": [139, 149, 407, 414, 521, 560, 561, 1016, 1034, 1041], "eddi": [1037, 1051, 1052], "eden": 1049, "edern": [1049, 1050], "edg": [52, 64, 81, 100, 124, 144, 163, 233, 275, 383, 389, 404, 407, 409, 453, 562, 563, 587, 588, 590, 591, 593, 800, 844, 849, 850, 851, 853, 855, 857, 858, 859, 860, 861, 872, 920, 1014, 1017, 1028, 1040, 1042, 1045, 1048], "edgar": 1053, "edge_model": 52, "edgecolor": [52, 62, 67, 68, 71, 78, 90, 94, 101, 119, 137, 143, 151, 153, 154, 156, 157, 160, 170, 171, 173, 177, 186, 203, 212, 219, 222, 223, 224, 241, 242, 243, 245, 247, 253, 256, 268, 271, 283, 291, 294, 295, 296, 299, 303, 310, 311, 313, 333, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 348, 355, 356, 634], "edit": [78, 372, 373, 374, 375, 379, 383, 387, 393, 531, 535, 837, 854, 998, 1000, 1005, 1011], "editor": [375, 387], "edm": 1000, "edoardo": [1049, 1051, 1052, 1053], "edouard": [0, 397, 1034], "edson": [1004, 1039], "edu": [46, 48, 56, 165, 190, 285, 350, 369, 370, 372, 407, 449, 487, 501, 503, 509, 510, 511, 535, 644, 647, 661, 669, 670, 679, 682, 685, 686, 842, 844, 846, 856, 863, 900, 902, 915, 916, 1002], "eduardo": [1037, 1039, 1047, 1048], "educ": [184, 185, 324, 375, 497, 719, 1005], "edvardlindelof": 1044, "edward": [174, 617, 622, 625, 1037, 1042, 1043, 1044, 1045, 1049, 1052, 1053], "edwinensa": 1040, "edwinwenink": 1047, "eec": [449, 644], "ef": 1049, "eff": 1020, "effect": [44, 46, 65, 73, 75, 76, 81, 87, 91, 96, 99, 102, 106, 117, 119, 124, 126, 135, 145, 147, 149, 152, 164, 169, 170, 174, 176, 182, 183, 185, 186, 188, 196, 204, 206, 210, 211, 212, 214, 215, 216, 227, 229, 232, 234, 240, 247, 251, 254, 258, 260, 262, 264, 268, 269, 270, 273, 276, 277, 282, 288, 300, 306, 307, 309, 312, 318, 327, 339, 343, 344, 346, 347, 348, 350, 351, 352, 356, 358, 363, 375, 380, 387, 389, 405, 407, 408, 412, 413, 414, 415, 417, 418, 437, 442, 443, 444, 446, 447, 449, 450, 465, 482, 483, 484, 490, 497, 501, 515, 525, 526, 534, 537, 542, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 590, 591, 592, 593, 608, 611, 612, 613, 614, 638, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 690, 693, 694, 695, 704, 706, 756, 788, 800, 802, 804, 805, 808, 810, 812, 814, 821, 822, 825, 826, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 852, 853, 854, 857, 858, 864, 865, 867, 870, 871, 872, 873, 874, 876, 877, 879, 883, 884, 885, 886, 887, 888, 892, 893, 894, 895, 896, 897, 898, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 933, 934, 951, 969, 977, 993, 998, 999, 1000, 1001, 1003, 1004, 1005, 1007, 1011, 1012, 1014, 1017, 1018, 1019, 1020, 1025, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "effective_learning_r": [864, 865], "effective_metric_": [849, 850, 851, 853, 855, 857, 858, 859, 1007], "effective_metric_params_": [849, 850, 851, 853, 855, 857, 858, 859], "effective_rank": [522, 525], "efficaci": 200, "effici": [38, 44, 45, 52, 54, 78, 81, 87, 89, 121, 136, 141, 145, 153, 190, 200, 204, 212, 218, 293, 325, 326, 350, 362, 367, 369, 375, 377, 378, 380, 381, 387, 389, 401, 404, 407, 412, 413, 414, 417, 419, 442, 443, 446, 447, 449, 450, 452, 454, 457, 459, 461, 462, 497, 534, 535, 536, 539, 541, 542, 545, 564, 567, 575, 583, 584, 590, 591, 593, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 635, 636, 637, 641, 643, 658, 661, 662, 667, 669, 670, 671, 676, 678, 679, 680, 681, 682, 688, 689, 691, 729, 759, 766, 782, 783, 800, 801, 803, 817, 836, 847, 848, 849, 850, 851, 853, 855, 857, 858, 859, 872, 884, 896, 900, 907, 916, 918, 951, 993, 996, 998, 1000, 1001, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1023, 1028, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "efficiencywarn": [2, 862, 1049], "effort": [319, 375, 381, 1023, 1028, 1045, 1047], "efron": [165, 372, 685, 686, 1000], "eg": 987, "egashira": 1049, "egehan": 1052, "egg": 1042, "egger": 1052, "egin": 407, "egli": [1041, 1051], "egor": 1046, "ehrenheim": [1041, 1042], "eib": [838, 1005], "eickenberg": [1034, 1036, 1037, 1038, 1039], "eig": 1041, "eig_tol": 1035, "eig_val": 253, "eig_vec": 253, "eigen": [452, 550, 676, 694, 698, 998, 1040, 1043], "eigen_solv": [52, 80, 81, 100, 230, 231, 412, 452, 462, 536, 691, 692, 694, 696, 698, 1001, 1035, 1044, 1047, 1048, 1049], "eigen_tol": [81, 452, 462, 694, 698, 1035, 1048, 1049], "eigendecompos": 412, "eigendecomposit": [462, 676, 694, 698, 873, 996], "eigenfac": [43, 55, 182, 246, 370, 412, 495, 542, 700, 716, 817, 833, 887, 912, 1021, 1025, 1034], "eigenface_titl": 46, "eigenmap": [230, 692, 694, 696, 698, 1029, 1030, 1035], "eigensolv": [412, 452, 462, 536, 545, 698, 1001], "eigenvalu": [258, 324, 404, 407, 409, 452, 462, 469, 470, 471, 472, 473, 474, 475, 476, 536, 542, 550, 676, 691, 692, 694, 696, 698, 873, 996, 1001, 1014, 1036, 1040, 1043, 1044, 1045, 1046], "eigenvalues_": [536, 1047], "eigenvector": [2, 43, 81, 117, 127, 182, 253, 407, 452, 462, 535, 536, 542, 551, 691, 692, 694, 698, 951, 1001, 1025, 1034, 1038, 1048], "eigenvector_centr": 56, "eigenvectors_": [536, 1047], "eigh": [71, 253, 254, 255, 258, 259, 412, 419, 534, 536, 1049, 1052], "eighteenth": 407, "eighth": [564, 1010], "eigsh": [412, 536, 1040, 1041], "eiler": 1014, "einsum": 298, "eitan": 1051, "either": [44, 50, 65, 104, 141, 143, 144, 167, 185, 198, 201, 238, 247, 262, 263, 272, 277, 282, 293, 346, 350, 357, 362, 363, 367, 370, 373, 375, 376, 377, 389, 398, 401, 405, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 442, 447, 452, 487, 497, 513, 525, 534, 535, 537, 545, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 584, 585, 586, 590, 591, 592, 593, 595, 596, 599, 604, 609, 610, 613, 614, 625, 630, 633, 635, 636, 653, 657, 659, 667, 679, 681, 685, 686, 693, 700, 701, 705, 709, 710, 715, 723, 727, 729, 730, 731, 732, 733, 738, 741, 742, 743, 755, 759, 772, 777, 781, 785, 786, 787, 788, 790, 791, 792, 797, 803, 806, 807, 809, 817, 826, 827, 828, 829, 830, 831, 832, 834, 837, 867, 897, 898, 904, 907, 908, 915, 916, 917, 918, 922, 960, 964, 992, 993, 1000, 1004, 1005, 1006, 1007, 1008, 1009, 1012, 1014, 1018, 1019, 1034, 1037, 1043, 1044, 1045, 1048, 1052], "ekaterina": [1040, 1041, 1042, 1043, 1045, 1050], "ekman": [1036, 1040], "el": [529, 1047, 1049, 1050], "elabonga": [1050, 1051], "elabor": 1005, "elad": [667, 688, 689], "elaps": [51, 82, 101, 141, 142, 362, 464, 467, 570, 571, 866, 867, 868, 869], "elapsed_tim": [47, 75, 101, 142, 155, 227], "elast": [2, 26, 182, 191, 196, 197, 200, 202, 205, 221, 244, 281, 471, 472, 478, 502, 525, 649, 650, 655, 660, 661, 662, 663, 664, 665, 666, 671, 679, 681, 684, 685, 687, 993, 1004, 1018, 1025, 1026, 1030, 1034, 1039, 1043, 1044], "elastic_net": 221, "elastic_net_color": 221, "elastic_net_contour": 221, "elasticnet": [2, 47, 50, 194, 202, 276, 281, 362, 381, 387, 412, 650, 655, 660, 661, 662, 663, 664, 665, 666, 671, 679, 681, 684, 1000, 1005, 1018, 1034, 1035, 1038, 1039, 1040, 1042, 1043, 1045, 1046, 1047, 1048, 1052], "elasticnetcv": [2, 196, 389, 398, 649, 655, 663, 664, 665, 666, 684, 1000, 1034, 1037, 1045, 1047, 1048, 1051, 1052, 1053], "elasticnetifittedelasticnet": 194, "elbo": 412, "eldar": [409, 420, 475], "eleanor": 1049, "elec2": 150, "electr": [52, 150, 372, 407], "electron": [58, 165, 370, 372, 539, 541, 548, 630], "element": [2, 88, 121, 138, 139, 149, 239, 261, 267, 275, 277, 318, 351, 354, 357, 372, 374, 375, 377, 384, 390, 404, 407, 411, 412, 414, 415, 418, 444, 446, 452, 464, 487, 509, 513, 515, 521, 523, 527, 528, 532, 538, 539, 541, 551, 558, 559, 560, 561, 565, 566, 567, 568, 569, 587, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 620, 635, 661, 662, 669, 670, 671, 679, 680, 681, 710, 720, 730, 737, 739, 749, 766, 772, 781, 785, 791, 792, 837, 847, 848, 849, 850, 851, 853, 854, 855, 857, 858, 862, 864, 865, 870, 886, 887, 890, 894, 907, 912, 915, 916, 917, 918, 953, 954, 955, 974, 976, 977, 989, 998, 1000, 1004, 1005, 1008, 1011, 1014, 1015, 1016, 1020, 1028, 1039, 1040, 1042, 1044, 1045, 1046, 1048, 1050], "elementari": [901, 1016], "elementwis": [412, 539, 541, 548], "elena": 1041, "eleni": 1047, "eleph": 584, "elev": [101, 127, 186, 230, 234, 491], "eleven": 1024, "elfner": 1048, "elia": 1040, "eliaschiavon": 1049, "eliasi": [1049, 1050, 1051], "elicit": 1004, "elif": [47, 48, 193, 212, 245, 255, 293, 883], "elimin": [2, 18, 159, 162, 165, 182, 263, 266, 267, 271, 273, 292, 407, 411, 448, 503, 516, 595, 596, 599, 604, 661, 806, 807, 822, 867, 877, 989, 1004, 1025, 1026, 1028, 1030, 1034], "elisabeth": [322, 1051], "elizabeth": [1041, 1043, 1046], "elkan": [65, 262, 318, 405, 437, 443, 447, 459, 679, 1040, 1044, 1045, 1047, 1048], "ell": [71, 253, 254, 255, 259, 404], "ell_": 1000, "ell_0": [1000, 1004], "ell_1": [412, 1000], "ell_2": 1000, "ella": 1016, "ellen": 1041, "elli": [1040, 1043], "elliot": [1051, 1052], "elliott": 1041, "ellips": [71, 237, 253, 254, 255, 258, 259, 1010], "ellipsoid": [49, 66, 70, 112, 113, 114, 182, 252, 253, 255, 256, 257, 258, 259, 550, 551, 634, 800, 801, 998, 1003, 1025], "ellipt": [91, 1000], "ellipticenvelop": [2, 49, 237, 470, 473, 474, 475, 476, 564, 1010, 1034, 1037, 1041, 1042, 1047], "eln": 1045, "elong": 407, "els": [2, 44, 48, 51, 52, 53, 58, 71, 77, 80, 83, 89, 90, 96, 114, 125, 138, 143, 144, 147, 148, 177, 185, 186, 188, 200, 203, 225, 228, 231, 237, 241, 243, 244, 245, 246, 247, 263, 268, 269, 272, 279, 288, 293, 301, 303, 304, 310, 317, 343, 350, 351, 357, 375, 379, 381, 414, 415, 417, 419, 427, 437, 449, 509, 521, 534, 570, 621, 628, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 671, 675, 676, 677, 679, 682, 684, 685, 686, 687, 706, 712, 791, 797, 799, 806, 807, 833, 854, 871, 883, 886, 894, 907, 908, 922, 965, 967, 969, 990, 992, 1020], "elsewher": [389, 462, 463, 471, 472, 478], "eltermann": 1037, "elucid": 996, "elvezio": [652, 1000], "elvi": [1039, 1040, 1041], "em": [254, 255, 259, 443, 447, 459, 537, 800, 801, 1003, 1048], "emad": 1052, "email": [0, 350, 387, 390, 415, 842, 1006, 1028], "emami": 1048, "emanuel": 1035, "emb": [169, 231, 241, 297, 368, 369, 462, 698, 1001], "embark": [104, 187, 251, 317, 321, 322], "embed": [2, 27, 38, 72, 75, 80, 81, 89, 90, 96, 140, 169, 182, 229, 232, 234, 236, 288, 297, 328, 329, 389, 407, 441, 452, 462, 489, 503, 545, 550, 567, 584, 642, 691, 692, 693, 694, 695, 696, 697, 698, 699, 856, 868, 877, 899, 900, 901, 996, 1007, 1010, 1016, 1021, 1023, 1025, 1029, 1030, 1034, 1035, 1045, 1046, 1048], "embedding_": [233, 389, 691, 692, 693, 694, 695], "emerg": [407, 1028], "emeritu": 390, "emiko": 1048, "emil": 1048, "emili": [1045, 1046, 1053], "emilyxinyi": [1052, 1053], "emipr": 800, "emir": [1049, 1050], "emit": [1045, 1052], "emlearn": 1023, "emma": 1051, "emmanouil": 1048, "emmanuel": [1034, 1041, 1042, 1043, 1051], "emp_cov": [110, 112, 114, 478, 481], "emp_cov_contour": 112, "emp_mah": 112, "emphas": [185, 348, 381, 412, 1004], "emphasi": [348, 406, 410, 909, 910, 911, 912, 913, 1011, 1023], "empir": [2, 49, 53, 62, 63, 71, 72, 78, 79, 92, 98, 109, 111, 112, 114, 150, 182, 193, 228, 274, 308, 326, 405, 407, 411, 414, 417, 447, 449, 460, 469, 470, 471, 474, 477, 478, 533, 535, 540, 542, 544, 550, 552, 566, 592, 605, 642, 652, 670, 674, 681, 682, 719, 724, 726, 727, 832, 842, 843, 844, 846, 854, 865, 888, 936, 977, 996, 998, 1004, 1006, 1008, 1014, 1016, 1018, 1025, 1029, 1030, 1053], "empirical_covari": [2, 110, 409, 478, 479, 481, 1050], "empiricalcovari": [2, 110, 112, 113, 409, 469, 473, 474, 475, 476, 1010], "emploi": [0, 52, 169, 243, 389, 409, 415, 450, 478, 584, 591, 1028, 1040], "employ": [185, 262], "empti": [95, 103, 130, 222, 331, 362, 370, 379, 407, 419, 427, 483, 534, 562, 563, 633, 634, 814, 872, 912, 914, 922, 928, 933, 934, 940, 962, 963, 994, 1019, 1036, 1038, 1042, 1043, 1045, 1046, 1048, 1049, 1050, 1053], "emptyset": 1004, "emul": [185, 383], "en": [56, 62, 383, 532, 538, 597, 639, 667, 671, 674, 688, 689, 698, 708, 849, 850, 855, 856, 857, 858, 885, 901, 915, 916, 1000, 1004, 1019, 1020], "enabl": [2, 16, 53, 67, 84, 105, 150, 186, 218, 232, 244, 310, 318, 320, 321, 323, 324, 325, 326, 347, 373, 375, 380, 383, 387, 389, 393, 398, 403, 407, 408, 412, 414, 415, 449, 464, 468, 535, 536, 542, 560, 561, 562, 563, 564, 581, 582, 592, 593, 604, 613, 800, 801, 803, 806, 828, 829, 830, 831, 832, 834, 867, 868, 880, 881, 904, 905, 907, 908, 909, 910, 911, 912, 913, 922, 963, 970, 994, 996, 1001, 1003, 1004, 1007, 1014, 1015, 1018, 1019, 1024, 1028, 1034, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "enable_cython_pairwise_dist": [468, 905], "enable_halving_search_cv": [2, 147, 279, 280, 319, 379, 806, 807, 993], "enable_hist_gradient_boost": [379, 1043], "enable_iterative_imput": [2, 180, 181, 379, 630, 994, 1043], "enable_metadata_rout": [244, 262, 324, 326, 398, 437, 443, 444, 447, 449, 464, 465, 468, 472, 482, 483, 484, 534, 537, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 592, 595, 596, 599, 604, 613, 614, 630, 638, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 693, 802, 803, 804, 805, 806, 807, 810, 812, 817, 821, 825, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 852, 854, 857, 858, 864, 865, 866, 867, 868, 870, 872, 873, 874, 879, 886, 887, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 1050], "enable_my_experimental_featur": 379, "enblom": [1052, 1053], "enc": [309, 311, 321, 323, 880, 881, 1014], "enc_auto": 888, "enc_high_smooth": 888, "enc_low_smooth": 888, "encapsul": [382, 408, 421, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 583, 584, 585, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 612, 613, 614, 630, 631, 632, 633, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 691, 692, 693, 694, 695, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918], "enclos": 993, "encod": [2, 44, 48, 51, 89, 104, 121, 140, 150, 155, 182, 185, 186, 187, 209, 210, 247, 249, 262, 277, 282, 307, 309, 310, 311, 319, 321, 322, 326, 339, 350, 352, 367, 369, 371, 380, 387, 389, 408, 411, 412, 414, 415, 417, 464, 487, 497, 504, 527, 532, 538, 540, 541, 543, 545, 546, 547, 549, 552, 562, 563, 567, 568, 570, 583, 590, 591, 593, 633, 651, 661, 662, 672, 675, 683, 738, 805, 810, 812, 830, 833, 867, 868, 870, 872, 874, 875, 878, 880, 881, 888, 891, 905, 924, 993, 994, 1000, 1001, 1004, 1006, 1007, 1009, 1018, 1023, 1025, 1030, 1035, 1036, 1042, 1046, 1048, 1049, 1050, 1051, 1052], "encoded_missing_valu": [155, 187, 881, 1014, 1048, 1049], "encodings_": [323, 888, 1014], "encompass": [389, 450, 456, 556, 557, 1001], "encount": [363, 373, 393, 401, 407, 414, 415, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 562, 563, 583, 842, 843, 844, 846, 880, 978, 1014, 1018, 1023, 1027, 1028, 1042, 1045], "encourag": [185, 199, 214, 303, 339, 374, 375, 387, 1019, 1023, 1052], "encrypt": 1023, "encyclopedia": 1004, "end": [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 184, 185, 186, 187, 188, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 373, 375, 377, 387, 389, 390, 393, 398, 404, 407, 408, 410, 414, 450, 456, 468, 488, 489, 509, 510, 538, 547, 558, 559, 560, 561, 565, 566, 567, 648, 649, 650, 653, 654, 655, 656, 657, 658, 663, 664, 665, 666, 684, 685, 686, 687, 803, 806, 807, 817, 824, 828, 865, 867, 905, 915, 916, 917, 918, 955, 957, 987, 993, 996, 1000, 1001, 1003, 1004, 1014, 1016, 1018, 1023, 1028, 1039, 1041, 1044, 1047, 1048, 1053], "end_": 48, "end_bodi": 48, "end_d": 48, "end_idx": [52, 233], "end_reut": 48, "end_titl": 48, "end_top": 48, "endian": 1046, "endo": 1047, "endpoint": [54, 309, 342, 638], "enemi": 375, "energi": [52, 150, 383, 863, 1009], "enet": [196, 281], "enet_path": [2, 199, 389, 649, 650, 655, 663, 664, 665, 1036, 1038, 1047], "enet_tol": [471, 472, 478, 1039], "enforc": [44, 52, 71, 87, 121, 150, 174, 205, 297, 362, 375, 409, 412, 414, 424, 430, 509, 528, 532, 538, 540, 543, 544, 546, 547, 549, 558, 559, 562, 563, 565, 566, 871, 886, 915, 916, 917, 918, 933, 934, 994, 1001, 1036, 1042, 1044, 1046, 1050], "enforce_estimator_tags_i": 1044, "eng": 1042, "engag": [381, 390], "engemann": [1036, 1037, 1041], "engin": [43, 76, 140, 144, 150, 174, 182, 186, 211, 362, 369, 372, 407, 413, 415, 464, 497, 563, 642, 676, 704, 824, 830, 865, 866, 868, 871, 872, 877, 880, 882, 886, 994, 996, 1004, 1014, 1025, 1040], "english": [55, 58, 103, 350, 351, 352, 380, 415, 590, 591, 593, 1023, 1024, 1047], "enh": 379, "enhanc": [121, 214, 374, 375, 379, 387, 389, 407, 1004, 1032, 1033, 1034, 1035, 1036, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "enjoi": [78, 262], "enough": [2, 44, 53, 65, 73, 80, 96, 141, 143, 150, 169, 180, 186, 187, 200, 210, 242, 245, 247, 262, 281, 312, 350, 352, 358, 373, 375, 377, 379, 390, 405, 407, 409, 411, 414, 568, 569, 591, 803, 806, 807, 809, 817, 831, 951, 993, 998, 1001, 1003, 1004, 1010, 1014, 1019, 1023, 1028, 1040, 1050, 1051], "enrich": 343, "ensembl": [2, 44, 47, 50, 53, 64, 65, 68, 90, 135, 136, 137, 138, 139, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 171, 180, 181, 186, 187, 188, 210, 231, 237, 246, 247, 249, 250, 262, 265, 280, 285, 287, 310, 314, 317, 318, 319, 320, 321, 322, 323, 324, 326, 350, 355, 356, 358, 362, 379, 380, 388, 389, 398, 401, 405, 407, 411, 416, 437, 505, 516, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 635, 636, 638, 661, 705, 806, 807, 825, 833, 837, 838, 868, 871, 880, 911, 915, 917, 918, 942, 993, 1004, 1005, 1010, 1011, 1020, 1023, 1025, 1026, 1030, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041], "ensemble_clf": 139, "ensemble_jaccard_scor": 287, "ensembleregressorsensembl": 395, "ensur": [0, 53, 59, 77, 91, 114, 119, 135, 141, 142, 150, 188, 210, 231, 262, 263, 271, 305, 357, 358, 362, 363, 375, 377, 380, 381, 390, 393, 398, 403, 405, 407, 408, 411, 419, 469, 534, 535, 542, 614, 630, 699, 708, 785, 791, 792, 828, 900, 933, 934, 944, 946, 951, 958, 969, 1000, 1001, 1004, 1014, 1020, 1036, 1038, 1039, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "ensure_2d": [933, 934], "ensure_all_finit": [781, 931, 933, 934, 1053], "ensure_min_featur": [933, 934], "ensure_min_sampl": [933, 934], "ensure_non_neg": [934, 1053], "entail": [262, 388, 885, 887, 1018], "enter": [376, 379, 407, 442, 1011], "entertain": 1000, "entic": 185, "entir": [69, 180, 210, 218, 262, 306, 308, 318, 343, 357, 358, 369, 376, 389, 401, 407, 411, 413, 415, 472, 493, 535, 590, 591, 592, 593, 650, 654, 656, 658, 661, 662, 664, 666, 668, 669, 671, 679, 685, 686, 737, 799, 825, 835, 836, 839, 864, 866, 867, 880, 892, 893, 895, 896, 897, 898, 926, 972, 994, 1004, 1014, 1018, 1020, 1043, 1044], "entireti": 389, "entiti": [390, 729, 759], "entitl": [282, 291, 406, 614, 849, 996], "entri": [0, 104, 108, 150, 155, 181, 185, 186, 262, 264, 317, 351, 358, 375, 379, 381, 383, 388, 389, 404, 405, 407, 412, 414, 417, 463, 464, 467, 472, 497, 532, 533, 538, 546, 547, 562, 563, 590, 593, 596, 612, 614, 623, 635, 641, 643, 650, 654, 656, 658, 659, 662, 664, 666, 667, 668, 676, 678, 685, 686, 688, 689, 702, 707, 710, 712, 715, 718, 719, 721, 729, 732, 733, 734, 737, 738, 741, 746, 759, 761, 762, 786, 788, 791, 792, 795, 796, 816, 831, 847, 848, 855, 856, 857, 858, 859, 878, 884, 896, 989, 993, 994, 1000, 1004, 1007, 1014, 1019, 1024, 1041, 1044, 1045, 1047, 1051], "entropi": [2, 51, 65, 249, 280, 301, 319, 328, 329, 358, 370, 403, 407, 414, 419, 499, 534, 558, 565, 609, 610, 661, 720, 739, 740, 744, 798, 915, 917, 1000, 1001, 1004, 1008, 1020, 1036, 1038, 1042, 1043, 1048, 1050, 1051, 1053], "entrypoint_to_bug_reproduc": 376, "enumer": [44, 48, 50, 51, 52, 54, 55, 56, 58, 63, 65, 67, 68, 73, 75, 76, 77, 78, 79, 80, 84, 89, 93, 94, 95, 96, 99, 103, 111, 113, 114, 117, 122, 124, 130, 138, 141, 145, 146, 148, 149, 150, 171, 173, 178, 188, 193, 195, 202, 210, 231, 232, 235, 237, 242, 246, 247, 253, 254, 255, 256, 258, 259, 262, 263, 270, 271, 277, 278, 293, 297, 298, 300, 306, 310, 311, 328, 329, 331, 333, 337, 339, 345, 346, 350, 355, 370, 371, 560, 561, 565, 566, 784, 804, 805, 808, 810, 811, 812, 813, 816, 818, 819, 820, 821, 822, 823, 824], "env": [322, 373, 383, 393, 394], "environ": [0, 3, 52, 64, 104, 105, 140, 142, 151, 152, 155, 158, 162, 174, 185, 186, 187, 194, 238, 239, 240, 244, 248, 249, 250, 251, 258, 262, 266, 268, 269, 275, 280, 282, 306, 314, 318, 319, 321, 322, 324, 330, 356, 357, 362, 370, 372, 373, 375, 377, 378, 381, 387, 393, 394, 403, 408, 500, 1024, 1028, 1030, 1041, 1042, 1051], "environment": [51, 196, 228], "environmenterror": 1050, "eom": 446, "eoss": 0, "ep": [68, 80, 81, 83, 89, 99, 199, 233, 241, 387, 407, 418, 444, 450, 455, 471, 472, 478, 634, 649, 650, 653, 654, 655, 656, 657, 658, 659, 663, 664, 665, 666, 684, 685, 686, 687, 693, 697, 717, 744, 859, 899, 900, 901, 1016, 1049, 1050], "epanechnikov": [293, 413, 847, 848, 852], "ephemer": 383, "ephrem": 1049, "epimorph": 1051, "epistem": 53, "epoch": [225, 389, 537, 669, 670, 671, 679, 680, 681, 864, 865, 1018, 1041, 1042, 1047], "epp": [407, 707], "eps_": [663, 665], "eps_rang": 241, "epsilon": [2, 89, 99, 195, 233, 243, 323, 345, 412, 446, 455, 646, 652, 670, 679, 681, 749, 864, 865, 908, 910, 913, 997, 1000, 1004, 1008, 1018, 1019, 1034], "epsilon_": 845, "epsilon_i": 1004, "epsilon_insensit": [670, 679, 681, 908, 1000, 1018], "epsilon_valu": 195, "eq": [262, 420, 475, 724, 726, 727, 854], "equal": [44, 51, 52, 64, 71, 73, 75, 87, 94, 112, 117, 123, 135, 147, 172, 185, 211, 212, 221, 227, 248, 255, 258, 261, 266, 268, 277, 298, 310, 314, 339, 341, 347, 351, 370, 371, 375, 377, 389, 404, 405, 407, 411, 412, 414, 415, 420, 437, 440, 441, 442, 443, 445, 447, 449, 454, 459, 460, 463, 469, 474, 479, 480, 504, 513, 516, 520, 533, 534, 535, 540, 542, 544, 545, 550, 551, 552, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 571, 590, 595, 596, 599, 601, 602, 609, 610, 628, 631, 632, 635, 636, 637, 638, 640, 644, 645, 652, 661, 662, 674, 702, 710, 721, 723, 730, 732, 742, 743, 785, 786, 790, 791, 792, 797, 799, 803, 804, 806, 807, 816, 817, 821, 828, 835, 839, 840, 847, 848, 849, 850, 854, 855, 856, 857, 858, 859, 864, 865, 870, 871, 872, 879, 882, 885, 886, 887, 888, 890, 897, 904, 907, 908, 914, 915, 916, 917, 918, 939, 951, 978, 984, 998, 1000, 1004, 1005, 1007, 1008, 1010, 1014, 1018, 1019, 1020, 1035, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "equat": [2, 65, 346, 375, 407, 412, 414, 558, 559, 560, 561, 565, 566, 567, 592, 630, 661, 662, 685, 686, 690, 766, 887, 915, 916, 917, 918, 994, 1001, 1004, 1009, 1042], "equi": 1003, "equiangular": 1000, "equidist": [144, 695], "equip": 1028, "equiv": [996, 1019], "equival": [44, 55, 71, 89, 91, 144, 151, 164, 169, 174, 185, 196, 203, 228, 258, 277, 288, 313, 343, 352, 358, 362, 381, 384, 388, 389, 401, 407, 408, 409, 410, 411, 412, 414, 416, 417, 441, 443, 444, 445, 446, 447, 449, 450, 457, 464, 469, 474, 510, 535, 542, 559, 562, 563, 564, 565, 566, 590, 593, 616, 619, 622, 624, 627, 649, 650, 651, 655, 657, 661, 662, 669, 670, 671, 672, 675, 679, 680, 683, 686, 690, 691, 696, 711, 712, 726, 737, 745, 750, 751, 752, 764, 773, 782, 783, 800, 801, 806, 807, 811, 813, 838, 841, 849, 850, 851, 853, 855, 857, 858, 859, 860, 861, 864, 870, 876, 877, 879, 882, 883, 884, 885, 887, 895, 897, 898, 937, 949, 989, 993, 998, 1000, 1001, 1002, 1004, 1010, 1014, 1018, 1019, 1020, 1042, 1043, 1044, 1045, 1047, 1048, 1051, 1053], "er": 571, "era": 1024, "eras": [560, 561, 649, 655, 661, 663, 665, 669, 670, 671, 679, 680, 681, 864, 865], "ereg": [158, 414], "eren": [0, 1036, 1037], "eric": [1037, 1038, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1052, 1053], "ericellwang": [1047, 1048], "erich": [450, 1038, 1039, 1042, 1043, 1045, 1046, 1047, 1048, 1052], "erick": 1039, "erik": [370, 1028, 1037], "eriksson": 1041, "erin": [285, 1046], "erl": 285, "erlbaum": 262, "erling": 1039, "ermolaevpa": [1048, 1049], "ernst": [414, 558, 559, 566, 567, 917, 918], "err": [56, 116, 125, 135], "err_cov_emp_ful": 113, "err_cov_emp_pur": 113, "err_cov_mcd": 113, "err_loc_emp_ful": 113, "err_loc_emp_pur": 113, "err_loc_mcd": 113, "errno": 393, "erron": [112, 113, 412, 1000, 1035, 1042, 1046], "error": [2, 15, 26, 31, 44, 45, 47, 53, 54, 56, 65, 108, 110, 111, 113, 125, 130, 134, 138, 141, 142, 144, 146, 148, 150, 165, 169, 180, 182, 184, 185, 196, 200, 204, 206, 207, 210, 212, 215, 216, 217, 224, 228, 240, 243, 244, 250, 259, 260, 262, 264, 268, 269, 273, 277, 278, 283, 285, 294, 295, 321, 322, 324, 326, 338, 346, 350, 351, 363, 372, 373, 375, 377, 378, 379, 380, 384, 387, 389, 398, 401, 405, 407, 408, 409, 411, 412, 414, 415, 416, 437, 443, 444, 447, 449, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 504, 516, 525, 532, 534, 537, 538, 543, 544, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 577, 592, 594, 597, 598, 600, 601, 602, 608, 613, 614, 632, 635, 638, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 688, 691, 692, 693, 695, 696, 699, 701, 704, 705, 712, 714, 715, 723, 724, 726, 730, 743, 746, 747, 748, 749, 750, 751, 753, 754, 756, 767, 781, 785, 791, 792, 793, 794, 802, 803, 804, 805, 806, 807, 809, 810, 812, 817, 821, 825, 826, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 852, 854, 855, 857, 858, 859, 862, 864, 865, 866, 867, 868, 870, 872, 873, 874, 879, 880, 881, 886, 887, 902, 903, 905, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 931, 932, 933, 934, 937, 966, 987, 990, 992, 993, 994, 995, 997, 998, 999, 1001, 1005, 1008, 1012, 1014, 1018, 1019, 1020, 1025, 1026, 1030, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "error_": [532, 544], "error_i": [141, 269], "error_norm": [111, 113, 469, 470, 471, 472, 473, 474, 475, 476], "error_on_new": 632, "error_r": 139, "error_scor": [803, 806, 807, 809, 817, 826, 829, 830, 831, 834, 993, 1038, 1042, 1046, 1049], "error_x": [141, 269], "errorbar": [73, 95, 106, 111, 113, 164, 175, 176, 290, 331, 342, 809, 826], "errorbar_": [809, 826], "errorbar_kw": [809, 826], "errorbarcontain": [809, 826], "errors_coef": 214, "errors_lines_": 704, "erwan": 1051, "erwin": 1037, "escal": 390, "escalant": 1004, "escalera": 1004, "escap": [1047, 1049, 1053], "eschibli": 1046, "eschlbeck": 1048, "esdi": 58, "esp": [407, 1034], "especi": [44, 48, 53, 89, 90, 144, 147, 150, 185, 203, 210, 244, 314, 322, 351, 358, 363, 369, 375, 383, 387, 389, 405, 407, 415, 443, 449, 502, 539, 558, 559, 560, 561, 565, 566, 567, 649, 650, 651, 653, 655, 656, 657, 661, 662, 663, 664, 665, 666, 672, 683, 698, 708, 749, 842, 843, 844, 845, 846, 915, 916, 917, 918, 1000, 1006, 1007, 1014, 1028, 1037, 1042, 1046, 1047, 1048], "espinoza": [1035, 1036], "essenc": [609, 610, 746, 1001, 1004], "essenti": [0, 268, 277, 322, 373, 407, 411, 412, 510, 1004, 1007, 1024, 1028, 1042], "est": [155, 185, 203, 225, 244, 246, 262, 282, 310, 319, 358, 401, 414, 563, 738, 872, 956, 993, 1004, 1014, 1018, 1045, 1046], "est1": [389, 635], "est2": [389, 635], "est_freq": 228, "est_g": 326, "est_idx": 310, "est_sev": 228, "establish": [383, 387, 390, 994], "estefania": 1048, "ester": [407, 418, 444], "estev": [1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "estim": [2, 4, 7, 8, 13, 16, 26, 30, 31, 32, 36, 44, 46, 47, 48, 49, 50, 51, 52, 53, 62, 64, 65, 67, 70, 71, 73, 74, 80, 83, 88, 89, 90, 91, 92, 95, 97, 104, 105, 106, 107, 116, 117, 121, 122, 123, 128, 130, 134, 135, 139, 140, 141, 142, 143, 145, 147, 149, 150, 152, 155, 156, 157, 158, 163, 164, 165, 167, 168, 169, 170, 172, 174, 176, 178, 179, 180, 184, 185, 191, 194, 196, 198, 200, 201, 203, 206, 207, 210, 212, 214, 215, 217, 218, 227, 228, 236, 237, 238, 241, 243, 249, 251, 252, 253, 255, 256, 258, 259, 260, 261, 262, 265, 266, 268, 269, 270, 271, 272, 273, 275, 277, 278, 279, 280, 281, 282, 283, 284, 287, 288, 289, 295, 299, 308, 310, 320, 321, 323, 325, 342, 343, 346, 351, 352, 354, 355, 356, 362, 363, 364, 367, 373, 375, 378, 379, 382, 383, 384, 385, 393, 398, 401, 402, 405, 406, 407, 410, 412, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 461, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 490, 491, 493, 496, 497, 499, 502, 503, 525, 528, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 576, 577, 578, 579, 581, 582, 583, 584, 585, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 687, 690, 691, 692, 693, 694, 695, 700, 701, 703, 704, 705, 710, 711, 714, 715, 716, 719, 721, 723, 724, 726, 727, 729, 730, 731, 732, 733, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 785, 786, 787, 788, 790, 791, 792, 793, 794, 797, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 814, 815, 817, 819, 821, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 892, 893, 895, 896, 898, 899, 900, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 920, 923, 924, 925, 926, 927, 932, 933, 934, 936, 938, 939, 942, 944, 945, 946, 947, 956, 959, 960, 961, 963, 987, 991, 992, 999, 1001, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1024, 1025, 1026, 1028, 1029, 1030, 1031, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "estimate_bandwidth": [2, 80, 97, 407, 448, 461], "estimated_coef": [649, 650, 655, 663, 664, 665, 684, 685, 686], "estimator_": [213, 244, 282, 427, 554, 555, 556, 557, 558, 559, 564, 565, 566, 567, 595, 596, 599, 674, 802, 825, 904, 987, 1049], "estimator__alpha": 147, "estimator__max_depth": [389, 993], "estimator_alpha": 143, "estimator_check": [2, 317, 377, 389, 944, 945, 946, 1041, 1042, 1044, 1045, 1048, 1049, 1050, 1052, 1053], "estimator_checks_gener": [2, 944, 1053], "estimator_conf": 50, "estimator_config": 50, "estimator_dict": 218, "estimator_errors_": [135, 554, 555], "estimator_html_repr": [2, 377, 408, 1024, 1045, 1046, 1047, 1048, 1051], "estimator_modul": 377, "estimator_nam": [50, 218, 377, 382, 438, 578, 701, 703, 705, 932], "estimator_samples_": 1045, "estimator_typ": [424, 425, 426, 429, 430, 926, 1053], "estimator_weights_": [135, 554, 555], "estimatorcheckfailedwarn": [2, 944], "estimatorcv": 389, "estimators_": [142, 143, 203, 225, 245, 317, 389, 414, 554, 555, 556, 557, 558, 559, 560, 561, 564, 565, 566, 567, 568, 569, 570, 571, 835, 836, 837, 838, 839, 840, 841, 1035, 1041, 1048], "estimators_early_stop": 145, "estimators_features_": [556, 557, 564], "estimators_samples_": [556, 557, 558, 559, 564, 565, 566, 567, 1040, 1042, 1045, 1051], "estimatorwithvalidationset": 326, "estimatorwithvalidationset__param_to_optim": 326, "est\u00e8v": [0, 396, 1042, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "est\u00e8vc": 1052, "esuli": [1041, 1046], "esvhd": 1043, "et": [0, 2, 51, 110, 111, 135, 149, 198, 301, 370, 372, 404, 407, 409, 412, 414, 415, 416, 451, 499, 520, 521, 529, 536, 542, 545, 564, 685, 686, 722, 723, 842, 844, 864, 865, 900, 950, 951, 1000, 1001, 1004, 1010, 1014, 1016, 1019, 1020, 1042, 1050], "eta": [412, 537, 679, 680, 681, 1008, 1018, 1039], "eta0": [671, 679, 680, 681, 1018], "eta_0": 1018, "etc": [2, 144, 210, 228, 263, 272, 273, 325, 326, 358, 362, 364, 375, 377, 380, 387, 388, 389, 398, 401, 404, 408, 411, 415, 489, 504, 528, 558, 559, 565, 566, 671, 679, 695, 721, 774, 803, 817, 838, 841, 871, 882, 915, 916, 917, 918, 919, 921, 933, 934, 944, 993, 994, 998, 1004, 1007, 1023, 1024, 1028, 1034, 1041, 1043, 1044, 1053], "eth": 1044, "ethan": [1037, 1040], "ethic": 150, "etiquett": 375, "etl": [1024, 1028], "euclidean": [2, 38, 76, 91, 92, 197, 241, 247, 288, 291, 296, 317, 322, 343, 351, 404, 407, 412, 413, 414, 415, 417, 440, 441, 444, 445, 446, 450, 452, 457, 460, 463, 532, 538, 546, 547, 591, 618, 622, 625, 626, 679, 681, 693, 695, 698, 699, 702, 765, 766, 772, 773, 774, 775, 781, 782, 783, 784, 795, 796, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 901, 994, 998, 1002, 1005, 1007, 1016, 1038, 1041, 1042, 1043, 1044, 1050, 1051], "euclidean_dist": [2, 233, 241, 377, 403, 450, 454, 457, 691, 697, 765, 849, 850, 851, 853, 855, 857, 858, 859, 860, 861, 1034, 1039, 1042, 1043, 1051, 1053], "euclideandist": 702, "eugen": [372, 1035, 1040], "eunji": 1042, "eunseop": 1044, "euro": 325, "europ": [415, 1014], "european": [729, 759, 1004], "eustach": [1028, 1036, 1037], "eval_and_print_metr": 332, "eval_gradi": [177, 417, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628], "evalml": 1023, "evalu": [2, 28, 30, 44, 45, 46, 50, 51, 62, 69, 72, 74, 78, 79, 83, 89, 98, 104, 105, 124, 135, 141, 142, 144, 145, 147, 150, 160, 161, 172, 182, 188, 190, 193, 200, 212, 217, 228, 236, 260, 261, 265, 266, 267, 268, 271, 273, 274, 275, 277, 279, 280, 282, 283, 287, 295, 297, 301, 308, 313, 315, 319, 323, 324, 332, 339, 343, 350, 358, 368, 370, 377, 381, 389, 392, 408, 415, 416, 417, 447, 449, 464, 466, 488, 491, 493, 494, 497, 510, 521, 537, 552, 562, 563, 564, 568, 569, 593, 596, 604, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 630, 634, 635, 636, 637, 650, 656, 662, 676, 678, 700, 702, 704, 705, 706, 707, 708, 714, 716, 717, 718, 720, 721, 729, 730, 739, 740, 745, 757, 758, 759, 760, 789, 798, 800, 801, 803, 806, 807, 809, 817, 825, 826, 828, 829, 830, 831, 832, 833, 834, 838, 844, 847, 848, 853, 865, 867, 868, 874, 877, 880, 881, 885, 886, 887, 892, 893, 895, 896, 897, 898, 909, 912, 915, 936, 944, 977, 996, 1000, 1002, 1006, 1007, 1010, 1011, 1012, 1015, 1018, 1020, 1023, 1025, 1028, 1029, 1030, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047], "evaluate_everi": 537, "evaluate_model_and_stor": 314, "evaluation_std": 351, "evaluations_std": 351, "evelyn": [1052, 1053], "even": [38, 44, 53, 54, 65, 76, 78, 86, 108, 117, 124, 141, 147, 175, 185, 186, 187, 200, 210, 211, 218, 228, 234, 235, 243, 244, 254, 274, 285, 308, 310, 312, 313, 333, 346, 350, 351, 352, 358, 364, 370, 374, 375, 376, 377, 379, 380, 383, 387, 389, 401, 405, 407, 408, 409, 411, 412, 414, 415, 417, 441, 443, 445, 446, 447, 448, 449, 459, 461, 533, 536, 558, 559, 560, 561, 565, 566, 584, 591, 596, 630, 631, 633, 642, 661, 662, 698, 703, 708, 715, 746, 764, 770, 777, 781, 784, 789, 791, 830, 867, 868, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 915, 916, 917, 918, 944, 951, 972, 993, 994, 996, 998, 1000, 1003, 1004, 1007, 1009, 1010, 1012, 1014, 1016, 1018, 1019, 1020, 1028, 1041, 1042, 1043, 1046, 1048, 1051], "evenli": [2, 48, 75, 86, 147, 188, 214, 263, 415, 955], "event": [0, 44, 210, 228, 271, 405, 407, 590, 591, 639, 842, 938, 1000, 1005, 1006, 1023, 1028, 1040], "eventu": [7, 256, 407, 416, 595, 1028], "ever": [141, 154, 384, 414, 1028], "everi": [44, 121, 150, 174, 180, 208, 211, 231, 243, 254, 259, 277, 320, 324, 358, 370, 375, 377, 379, 383, 389, 405, 407, 409, 411, 412, 415, 440, 454, 509, 532, 537, 540, 546, 558, 560, 561, 562, 563, 565, 592, 593, 605, 649, 650, 652, 655, 656, 662, 663, 664, 665, 666, 667, 668, 669, 671, 675, 676, 677, 678, 679, 688, 689, 690, 695, 699, 757, 774, 782, 783, 816, 856, 915, 917, 919, 921, 939, 997, 999, 1004, 1005, 1006, 1014, 1020, 1028, 1034, 1038, 1040, 1043, 1047, 1051], "everingham": 1004, "everingham2010": 1004, "everybodi": [369, 375], "everyon": [375, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "everyth": [328, 358, 379, 381, 387, 401, 464, 958, 1023, 1024, 1034], "everywher": 389, "evgeni": 1045, "evid": [274, 350, 383, 407, 411, 412, 414, 647, 800, 1003], "evol": 1004, "evolut": [48, 50, 280, 362, 364], "evolv": [384, 1049], "ex": [103, 373, 376, 393, 1038, 1039], "exact": [45, 47, 114, 126, 141, 174, 214, 242, 262, 288, 324, 358, 362, 363, 369, 375, 377, 383, 384, 387, 388, 389, 407, 414, 416, 432, 482, 483, 484, 488, 497, 535, 536, 542, 562, 563, 641, 645, 649, 695, 803, 817, 828, 829, 830, 909, 912, 993, 996, 1000, 1001, 1010, 1014, 1018, 1019, 1041, 1042, 1044], "exactli": [104, 135, 184, 192, 196, 204, 210, 214, 259, 262, 276, 309, 346, 350, 375, 377, 383, 404, 407, 411, 412, 415, 420, 446, 453, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 516, 527, 592, 593, 618, 679, 681, 706, 708, 766, 804, 821, 828, 996, 1000, 1001, 1002, 1004, 1005, 1020, 1034, 1040, 1041, 1047], "exagger": [75, 185, 695, 1001], "examin": [161, 381, 383, 407, 856], "exampl": [2, 31, 44, 45, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 362, 363, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 387, 388, 389, 392, 393, 400, 401, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 416, 418, 419, 420, 422, 423, 425, 426, 428, 429, 432, 433, 434, 436, 439, 456, 457, 459, 461, 463, 471, 478, 480, 481, 485, 486, 487, 494, 498, 504, 506, 507, 508, 509, 510, 517, 518, 519, 529, 530, 532, 546, 547, 548, 549, 556, 573, 574, 579, 585, 587, 588, 594, 597, 598, 600, 603, 605, 611, 615, 619, 623, 624, 627, 629, 632, 639, 640, 641, 645, 653, 654, 657, 663, 664, 666, 670, 678, 686, 688, 689, 690, 697, 698, 699, 702, 711, 713, 714, 717, 718, 719, 723, 724, 726, 727, 728, 729, 731, 733, 734, 736, 739, 742, 743, 746, 747, 750, 754, 757, 759, 761, 762, 763, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 783, 784, 786, 794, 797, 799, 810, 811, 812, 813, 814, 815, 816, 827, 839, 841, 843, 847, 848, 857, 858, 859, 861, 862, 869, 870, 873, 875, 878, 889, 890, 892, 894, 895, 897, 898, 899, 902, 906, 908, 909, 917, 918, 919, 920, 929, 930, 931, 932, 933, 935, 937, 938, 939, 940, 941, 942, 943, 947, 949, 950, 951, 952, 953, 954, 957, 958, 965, 966, 967, 968, 972, 974, 975, 976, 978, 979, 980, 981, 982, 983, 984, 985, 986, 988, 989, 990, 991, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1024, 1025, 1026, 1028, 1030, 1031, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1044, 1047, 1049, 1050, 1051, 1053], "example_funct": 375, "example_gaussian_process_plot_gp_probabilistic_classification_after_regress": 1034, "example_gaussian_process_plot_gp_regress": 1034, "exampleclassifi": 244, "exampleclassifierexampleclassifi": 244, "exampleestim": 375, "exampleregressor": 244, "examples_pattern": 375, "exampletransform": 244, "exc": [285, 987], "exce": [116, 287, 318, 417, 442, 516, 604, 652, 661, 1043, 1046, 1048], "exceed": [806, 807, 1040], "excel": [153, 369, 375, 414, 693, 697, 1000, 1028], "except": [2, 51, 80, 87, 124, 133, 141, 150, 218, 225, 237, 244, 276, 288, 301, 304, 305, 308, 310, 322, 326, 368, 375, 377, 378, 380, 387, 389, 398, 401, 404, 408, 411, 412, 414, 415, 417, 430, 460, 465, 468, 482, 483, 484, 510, 555, 557, 558, 559, 561, 563, 565, 566, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 614, 630, 633, 638, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 673, 675, 676, 681, 682, 690, 714, 781, 810, 840, 841, 847, 848, 850, 853, 858, 864, 865, 871, 885, 887, 905, 908, 910, 913, 916, 918, 932, 944, 945, 955, 987, 989, 993, 1000, 1004, 1019, 1035, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1051, 1052, 1053], "exception": 228, "excerpt": [46, 1016], "excess": [214, 446, 1014, 1041], "exchang": [401, 1027], "excit": 1041, "exclud": [48, 58, 184, 308, 375, 379, 389, 446, 464, 466, 732, 733, 741, 786, 787, 790, 816, 824, 882, 978, 1004, 1007, 1043, 1050, 1053], "exclus": [363, 387, 389, 412, 414, 630, 631, 633, 805, 820, 823, 993, 1000, 1004, 1005, 1028, 1041, 1045], "exec": 387, "execut": [65, 180, 196, 200, 243, 273, 363, 373, 375, 381, 401, 403, 407, 412, 418, 443, 461, 803, 809, 817, 826, 828, 829, 830, 831, 834, 852, 969, 970, 1014, 1017, 1025, 1036, 1039, 1042], "exemplar": [407, 440, 454], "exemplari": [156, 157], "exemplifi": 389, "exercis": [2, 364, 372, 375, 506, 1037], "exhaust": [2, 165, 269, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 362, 372, 380, 388, 402, 407, 414, 803, 806, 807, 817, 897, 898, 900, 1000, 1030], "exhibit": [170, 215, 343, 350, 392, 411, 412, 414, 417, 1012], "exist": [48, 49, 53, 56, 58, 87, 228, 268, 305, 308, 343, 369, 374, 377, 378, 381, 387, 389, 390, 393, 401, 407, 411, 412, 414, 415, 422, 427, 432, 437, 443, 444, 447, 449, 451, 453, 465, 468, 482, 483, 484, 492, 500, 534, 537, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 587, 591, 592, 599, 605, 613, 614, 635, 636, 638, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 693, 701, 703, 705, 765, 768, 772, 802, 804, 805, 808, 810, 811, 812, 813, 816, 818, 819, 820, 821, 822, 823, 824, 825, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 852, 854, 857, 858, 864, 865, 867, 870, 872, 873, 874, 879, 880, 881, 886, 887, 902, 903, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 987, 996, 1001, 1003, 1004, 1008, 1010, 1011, 1014, 1028, 1034, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "exist_ok": 48, "existing_credit": 262, "exit": [105, 288, 379, 383, 468], "exp": [2, 81, 88, 100, 130, 138, 147, 170, 196, 220, 293, 298, 301, 318, 319, 323, 343, 405, 407, 408, 413, 419, 452, 465, 522, 534, 537, 618, 619, 625, 644, 762, 769, 779, 864, 865, 883, 998, 1000, 1002, 1006, 1007, 1008, 1017, 1018, 1019], "exp10": 185, "exp_dirichlet_component_": 537, "exp_dist_embed": 298, "expand": [44, 83, 99, 239, 314, 318, 358, 367, 377, 414, 444, 450, 500, 558, 559, 560, 561, 565, 566, 567, 915, 916, 917, 918, 1004, 1035, 1042, 1043, 1050], "expand_frame_repr": 228, "expans": [44, 180, 319, 450, 882, 1043], "expect": [44, 45, 50, 53, 62, 73, 80, 87, 117, 119, 126, 135, 138, 140, 142, 144, 147, 150, 162, 163, 169, 175, 182, 183, 187, 197, 202, 210, 211, 212, 214, 218, 228, 241, 244, 247, 248, 254, 255, 258, 259, 262, 275, 288, 313, 326, 346, 350, 351, 358, 362, 363, 375, 377, 380, 381, 382, 383, 384, 387, 388, 389, 390, 392, 398, 403, 405, 407, 408, 409, 411, 414, 415, 416, 430, 464, 465, 467, 468, 469, 482, 483, 484, 497, 524, 533, 537, 539, 542, 553, 555, 556, 557, 558, 559, 561, 563, 564, 565, 566, 567, 568, 569, 571, 573, 576, 590, 591, 593, 597, 599, 608, 614, 630, 635, 636, 638, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 664, 665, 666, 667, 668, 670, 673, 675, 676, 677, 678, 681, 682, 698, 707, 708, 719, 738, 791, 797, 803, 817, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 853, 857, 858, 859, 860, 865, 868, 873, 880, 881, 884, 887, 888, 897, 898, 905, 907, 908, 909, 910, 911, 912, 913, 916, 918, 928, 944, 945, 966, 993, 1000, 1003, 1004, 1006, 1010, 1014, 1018, 1019, 1020, 1025, 1027, 1030, 1034, 1035, 1036, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "expected_anomaly_fract": 247, "expected_failed_check": [944, 945, 946, 1053], "expected_i": 147, "expected_n_anomali": 247, "expected_ri": 708, "expected_to_fail": [576, 944], "expected_to_fail_reason": [576, 944], "expectedli": 350, "expens": [0, 90, 141, 155, 169, 184, 186, 238, 265, 277, 339, 343, 350, 351, 352, 364, 381, 389, 407, 408, 411, 414, 415, 449, 468, 509, 803, 806, 807, 817, 830, 905, 907, 1001, 1003, 1014, 1019, 1028, 1038], "experi": [31, 135, 172, 176, 184, 185, 186, 187, 190, 212, 262, 285, 313, 346, 351, 352, 363, 369, 375, 377, 378, 390, 411, 516, 731, 788, 1000, 1005, 1016, 1022, 1023, 1028], "experienc": 375, "experiment": [2, 147, 180, 181, 210, 279, 280, 319, 320, 325, 326, 377, 378, 385, 387, 389, 398, 411, 497, 550, 581, 582, 630, 699, 806, 807, 973, 993, 994, 1000, 1003, 1004, 1023, 1024, 1030, 1042, 1043, 1046, 1047, 1048, 1049, 1051, 1052, 1053], "expert_r": 408, "expertis": [374, 375, 387], "expit": [146, 201, 414, 562, 1000, 1041], "explain": [2, 44, 45, 52, 65, 90, 106, 116, 117, 129, 147, 169, 174, 175, 186, 187, 210, 228, 237, 244, 259, 278, 314, 325, 350, 351, 363, 375, 377, 387, 401, 403, 410, 412, 417, 494, 522, 525, 535, 542, 545, 550, 628, 651, 659, 672, 683, 724, 725, 726, 727, 731, 788, 1000, 1007, 1020, 1022, 1045, 1047, 1048], "explained_vari": [351, 1004], "explained_variance_": [117, 535, 542, 545, 1041], "explained_variance_ratio": 1040, "explained_variance_ratio_": [106, 129, 325, 351, 412, 535, 542, 545, 550, 1037, 1040], "explained_variance_scor": [2, 1004, 1037, 1041, 1048], "explan": [65, 117, 244, 362, 374, 375, 405, 415, 993, 1003, 1005, 1020, 1023, 1028, 1037], "explic": 1016, "explicit": [44, 150, 182, 186, 190, 236, 244, 282, 343, 362, 363, 364, 374, 376, 387, 389, 390, 398, 408, 415, 421, 472, 500, 502, 503, 542, 552, 553, 634, 641, 642, 644, 679, 803, 804, 811, 851, 859, 867, 907, 912, 967, 996, 998, 1000, 1004, 1014, 1020, 1023, 1025, 1034, 1038, 1043, 1044, 1047, 1051], "explicitli": [44, 81, 142, 169, 176, 180, 181, 211, 240, 244, 324, 343, 352, 358, 363, 369, 371, 375, 376, 377, 379, 387, 389, 398, 401, 403, 411, 415, 417, 536, 550, 551, 581, 582, 599, 630, 651, 661, 662, 672, 683, 712, 730, 785, 791, 792, 806, 807, 838, 841, 847, 848, 873, 897, 898, 992, 993, 994, 996, 998, 1000, 1001, 1004, 1006, 1007, 1014, 1028, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1046, 1047, 1048, 1052, 1053], "explod": 314, "exploit": [63, 287, 401, 1005, 1024, 1037], "exploit_incremental_learn": [809, 831], "explor": [53, 73, 138, 139, 150, 188, 234, 235, 247, 262, 269, 270, 276, 277, 285, 315, 319, 339, 351, 358, 369, 372, 374, 381, 407, 414, 472, 803, 806, 814, 888, 993, 1000, 1001, 1003, 1009, 1011, 1014, 1028, 1040], "exploratori": [185, 1028], "explos": [803, 817, 828, 829, 830], "expm1": 108, "expon": [417, 619, 679, 680, 681, 815, 864, 865, 882, 993], "exponenti": [2, 81, 108, 169, 174, 293, 298, 413, 414, 417, 449, 537, 555, 560, 617, 622, 625, 642, 646, 761, 762, 847, 848, 852, 864, 865, 882, 996, 1000, 1004, 1019, 1041, 1047], "export": [2, 373, 376, 377, 393, 403, 919, 920, 1020, 1023, 1043, 1053], "export_graphviz": [2, 1020, 1039, 1041, 1047, 1049, 1050, 1052], "export_text": [2, 1020, 1043, 1050], "expos": [2, 165, 244, 281, 285, 320, 322, 363, 368, 372, 377, 389, 398, 405, 408, 414, 416, 417, 437, 464, 554, 555, 562, 563, 568, 569, 570, 571, 595, 596, 604, 614, 802, 803, 806, 807, 817, 825, 836, 837, 838, 839, 840, 841, 922, 1000, 1004, 1006, 1023, 1031, 1034, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052], "exposur": [210, 228, 1000], "express": [44, 47, 52, 53, 135, 141, 169, 174, 185, 268, 269, 314, 319, 336, 343, 352, 369, 370, 375, 376, 381, 387, 401, 407, 412, 413, 414, 415, 450, 456, 457, 590, 591, 593, 719, 791, 803, 809, 817, 826, 828, 829, 830, 831, 834, 854, 996, 1000, 1004, 1008, 1014, 1015, 1020, 1042], "expsinesquar": [2, 169, 174, 178, 417], "exstrac": 1004, "ext": 649, "extend": [32, 53, 89, 90, 101, 133, 211, 257, 262, 275, 326, 339, 372, 373, 387, 389, 405, 407, 412, 414, 499, 634, 661, 723, 824, 836, 839, 840, 872, 874, 891, 907, 908, 911, 922, 996, 1004, 1005, 1019, 1024, 1026, 1030, 1039, 1040, 1041, 1042, 1044, 1049, 1053], "extens": [275, 277, 293, 362, 363, 369, 370, 373, 376, 378, 379, 383, 384, 387, 401, 407, 412, 497, 504, 535, 744, 944, 953, 1001, 1003, 1004, 1022, 1023, 1028, 1034, 1040, 1047, 1048, 1050, 1051], "extent": [2, 49, 92, 171, 172, 173, 241, 347, 440, 536, 699, 800, 1004], "extercond": 144, "extern": [169, 262, 322, 364, 368, 372, 375, 377, 380, 387, 389, 404, 407, 415, 416, 417, 595, 613, 614, 720, 740, 798, 1000, 1003, 1004, 1007, 1020, 1024, 1030, 1042, 1046], "exterqu": [144, 155], "extmath": [2, 256, 350, 384, 453, 948, 949, 950, 951, 952, 953, 1034, 1035, 1040, 1041, 1044, 1048, 1049, 1051], "extr": 48, "extra": [2, 81, 143, 150, 246, 288, 324, 352, 373, 374, 376, 389, 401, 414, 415, 438, 443, 447, 459, 464, 533, 558, 559, 567, 592, 593, 703, 704, 705, 828, 851, 917, 918, 940, 1003, 1004, 1007, 1034, 1037, 1039, 1040, 1042, 1047, 1049], "extra_cflag": 381, "extra_tre": [917, 918], "extract": [2, 17, 43, 44, 46, 48, 51, 52, 56, 84, 89, 102, 103, 104, 105, 116, 121, 141, 161, 165, 182, 225, 260, 267, 268, 273, 276, 306, 332, 342, 350, 352, 358, 367, 370, 372, 381, 384, 387, 407, 408, 411, 412, 450, 452, 455, 456, 462, 464, 488, 489, 494, 495, 504, 505, 532, 535, 536, 537, 538, 539, 540, 541, 542, 544, 546, 547, 548, 585, 586, 590, 591, 593, 595, 596, 599, 601, 634, 721, 791, 803, 817, 844, 866, 867, 912, 924, 951, 960, 967, 993, 1001, 1005, 1009, 1014, 1018, 1023, 1025, 1028, 1030, 1034, 1035, 1043, 1046], "extract_dbscan": 407, "extract_patches_2d": [2, 84, 124, 415, 589, 1042], "extract_scor": 271, "extractal": 48, "extractor": [210, 306, 364, 370, 389, 415, 504, 583, 584, 590, 591, 593, 993, 1034], "extran": 375, "extrapol": [44, 169, 192, 211, 240, 271, 886, 1004, 1014, 1020, 1047, 1049], "extratre": [143, 153, 362, 1037], "extratreeclassifi": [2, 558, 567, 918, 994, 1005, 1020, 1038, 1043, 1044, 1045, 1047, 1048, 1049, 1051, 1053], "extratreeregressor": [2, 559, 564, 567, 917, 994, 1005, 1010, 1020, 1043, 1044, 1045, 1047, 1048, 1049, 1051, 1053], "extratreesclassifi": [2, 143, 153, 326, 414, 416, 559, 565, 567, 917, 918, 994, 1005, 1037, 1038, 1042, 1043, 1044, 1047, 1048, 1049, 1050, 1051, 1053], "extratreesregressor": [2, 246, 326, 414, 558, 566, 567, 917, 918, 994, 1005, 1037, 1040, 1042, 1043, 1044, 1047, 1048, 1049, 1050, 1051, 1053], "extrem": [2, 147, 210, 212, 246, 247, 281, 308, 315, 331, 351, 375, 378, 406, 407, 412, 558, 559, 565, 566, 567, 635, 636, 682, 727, 755, 917, 918, 919, 921, 1004, 1006], "extrema": 998, "exxon": 52, "ey": [112, 113, 255, 259, 339, 370, 535, 542, 551], "eyast": 1048, "ezebunandu": 1046, "ezeiza": 767, "ezri": 1047, "f": [0, 2, 44, 45, 47, 51, 52, 53, 55, 56, 58, 59, 64, 67, 69, 73, 79, 82, 83, 86, 87, 89, 92, 98, 101, 104, 108, 117, 124, 135, 138, 141, 142, 144, 145, 147, 150, 155, 156, 159, 161, 164, 165, 167, 169, 175, 176, 178, 182, 184, 185, 186, 187, 188, 190, 196, 197, 200, 202, 203, 207, 210, 211, 212, 214, 220, 224, 228, 231, 241, 243, 244, 247, 251, 258, 262, 266, 268, 269, 270, 271, 274, 275, 277, 278, 280, 281, 282, 288, 291, 303, 304, 305, 310, 313, 314, 317, 319, 321, 323, 324, 325, 326, 328, 329, 338, 343, 346, 350, 351, 352, 358, 370, 375, 376, 377, 381, 383, 387, 401, 405, 408, 412, 414, 415, 416, 417, 487, 509, 510, 532, 533, 538, 539, 567, 583, 584, 585, 589, 594, 597, 598, 600, 601, 602, 606, 607, 608, 609, 610, 611, 620, 630, 635, 638, 661, 699, 716, 726, 729, 732, 733, 759, 786, 787, 790, 791, 804, 805, 808, 810, 811, 812, 813, 816, 818, 819, 820, 821, 822, 823, 824, 825, 831, 832, 834, 864, 865, 869, 878, 881, 882, 886, 887, 888, 914, 922, 933, 934, 987, 996, 999, 1008, 1011, 1012, 1014, 1018, 1025, 1036, 1042, 1043, 1044, 1046, 1048], "f0_c0": 888, "f0_c1": 888, "f0_c2": 888, "f0e442": 253, "f1": [2, 46, 63, 69, 103, 162, 266, 306, 328, 329, 332, 411, 716, 732, 733, 741, 786, 825, 1004, 1005, 1038, 1050], "f1_c0": 888, "f1_c1": 888, "f1_c2": 888, "f1_macro": [411, 1004, 1038], "f1_micro": [1004, 1038], "f1_sampl": 1004, "f1_score": [2, 63, 275, 332, 370, 403, 406, 741, 1004, 1034, 1036, 1037, 1038, 1039, 1043, 1044, 1050, 1051, 1053], "f1_weight": [1004, 1038], "f2": [379, 1005], "f2001": 1004, "f2006": 1004, "f3": 1005, "f4": 499, "f401": [101, 127, 186, 230, 232], "f781bf": [76, 80, 96, 97], "f7bd01": 76, "f_": [414, 638, 733, 1004], "f_0": 152, "f_1": [152, 1004], "f_beta": 1004, "f_classif": [2, 161, 162, 342, 416, 594, 597, 598, 600, 601, 602, 606, 608, 611], "f_i": 405, "f_idx": 152, "f_j": [405, 1012], "f_m": 414, "f_n": 275, "f_p": 275, "f_regress": [2, 88, 160, 416, 594, 597, 598, 600, 601, 602, 606, 607, 611, 1037, 1041, 1048, 1051], "f_score": 275, "f_statist": [607, 608], "f_test": 160, "fa": [2, 120, 131, 182, 381, 412, 473, 476, 533, 542, 803, 829, 1025], "fa_estim": 121, "fa_scor": 128, "fab": [1028, 1044, 1045], "fabia": [404, 722], "fabian": [0, 397, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1043, 1051], "fabiana": 1045, "fabianhen": 1053, "fabio": 1040, "fabisch": [0, 397, 1036, 1037, 1038, 1040], "fabrizio": 1049, "face": [2, 43, 45, 55, 72, 85, 87, 120, 124, 126, 130, 131, 182, 236, 368, 375, 379, 407, 412, 414, 449, 472, 494, 495, 496, 522, 533, 534, 538, 540, 541, 542, 544, 559, 586, 660, 676, 700, 716, 817, 833, 850, 887, 912, 936, 1007, 1020, 1021, 1025, 1030, 1034, 1042, 1053], "face_id": 246, "facecolor": [52, 64, 71, 94, 121, 137, 177, 230, 245, 268, 295, 310, 337, 340, 343, 344, 345], "faces_cent": 121, "facial": 370, "facil": [1003, 1023], "facilit": [362, 389, 401, 403, 1023, 1024, 1040, 1043], "fact": [44, 51, 58, 63, 113, 117, 135, 145, 147, 187, 241, 251, 285, 287, 350, 369, 382, 387, 389, 403, 410, 412, 413, 414, 415, 652, 671, 673, 707, 998, 1000, 1004, 1007, 1014, 1018, 1019, 1024, 1028, 1048], "facto": 1044, "factor": [2, 11, 43, 46, 49, 64, 68, 80, 81, 87, 89, 96, 120, 126, 130, 153, 182, 185, 224, 235, 237, 247, 262, 279, 280, 288, 289, 303, 304, 308, 310, 319, 321, 338, 362, 363, 371, 375, 381, 384, 389, 404, 407, 414, 415, 417, 440, 442, 454, 469, 471, 472, 473, 474, 476, 478, 488, 505, 515, 516, 528, 533, 536, 537, 539, 541, 542, 545, 546, 547, 548, 550, 551, 562, 563, 564, 590, 593, 599, 616, 652, 653, 654, 657, 658, 659, 685, 686, 695, 722, 786, 803, 806, 807, 829, 853, 887, 901, 903, 911, 950, 951, 993, 1000, 1001, 1007, 1014, 1017, 1021, 1025, 1029, 1030, 1034, 1035, 1037, 1038, 1040, 1048, 1050], "factoranalysi": [2, 121, 128, 131, 412, 545, 1035, 1037, 1046, 1048], "factori": [2, 95, 262, 268, 415, 926, 928, 973, 1004], "facundo": [1045, 1048], "fagan": 1043, "fail": [2, 44, 88, 100, 122, 128, 177, 192, 196, 214, 244, 268, 317, 326, 363, 373, 375, 378, 383, 390, 393, 410, 411, 440, 472, 474, 576, 679, 680, 681, 714, 864, 865, 923, 925, 932, 944, 945, 946, 993, 1001, 1034, 1035, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1053], "failur": [182, 183, 185, 206, 375, 383, 393, 576, 660, 788, 833, 933, 934, 944, 1025, 1027, 1028, 1047, 1048, 1052], "fair": [52, 65, 326, 414, 693, 697, 836, 1004, 1005, 1028], "fairer": 358, "fairli": [114, 146, 232, 304, 383, 407, 560, 561, 702, 1005], "faith": [58, 344], "fake": 415, "falak": 1043, "fall": [26, 31, 44, 53, 147, 150, 176, 267, 268, 375, 407, 415, 432, 446, 447, 509, 510, 730, 731, 797, 884, 896, 956, 1003, 1004, 1014, 1043, 1053], "fallback": [390, 393, 835, 836, 1004], "fals": [2, 44, 45, 47, 48, 50, 51, 54, 55, 59, 60, 62, 64, 65, 69, 70, 71, 75, 78, 80, 81, 82, 88, 89, 98, 101, 103, 104, 105, 111, 113, 119, 125, 129, 130, 135, 141, 142, 144, 147, 148, 150, 158, 169, 174, 175, 176, 177, 185, 186, 187, 188, 192, 193, 196, 197, 207, 210, 211, 215, 216, 218, 226, 228, 230, 233, 244, 245, 247, 251, 253, 262, 265, 266, 268, 271, 272, 275, 276, 277, 278, 279, 280, 281, 283, 288, 292, 298, 301, 304, 305, 308, 309, 314, 315, 317, 319, 320, 321, 322, 324, 325, 330, 339, 341, 343, 346, 347, 350, 351, 369, 375, 376, 377, 380, 389, 398, 405, 406, 407, 408, 409, 411, 412, 414, 415, 416, 417, 419, 420, 432, 433, 434, 435, 436, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 454, 459, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 509, 510, 511, 513, 514, 516, 524, 525, 528, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 583, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 635, 638, 640, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 693, 697, 698, 700, 701, 702, 703, 704, 705, 706, 711, 712, 714, 715, 716, 717, 718, 721, 722, 729, 730, 731, 732, 733, 734, 741, 746, 757, 759, 764, 766, 770, 772, 777, 781, 785, 786, 787, 788, 790, 792, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 814, 817, 821, 822, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 876, 877, 878, 879, 880, 882, 883, 884, 885, 886, 887, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 920, 921, 923, 924, 925, 926, 927, 931, 932, 933, 934, 944, 952, 964, 965, 966, 968, 969, 973, 974, 975, 977, 984, 989, 990, 992, 993, 994, 1000, 1004, 1007, 1014, 1018, 1019, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053], "false_": 639, "false_discovery_r": 597, "famili": [2, 46, 262, 362, 364, 389, 407, 410, 412, 415, 416, 594, 597, 598, 600, 601, 602, 608, 864, 865, 883, 895, 1000, 1014, 1018, 1038, 1048], "familiar": [375, 413, 1042], "famou": [370, 372, 414, 1019], "famous": 1006, "fan": [0, 363, 390, 396, 403, 1019, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "fanci": 415, "fancybox": 345, "fanelli": [1049, 1050], "fang": [661, 1041, 1042], "fanni": 1044, "fantasi": 1009, "fantast": 1028, "faouzi": [1044, 1045], "faq": [0, 383, 411, 695, 1001, 1014], "far": [63, 94, 114, 144, 170, 176, 185, 210, 228, 262, 339, 343, 350, 352, 375, 384, 417, 723, 887, 978, 1009, 1010, 1019, 1028], "farach": 996, "farahsae": 1042, "farawai": 1007, "fare": [104, 187, 251, 321, 322, 1038, 1039], "fargo": 52, "farhan": 1050, "farid": 1053, "farlei": [0, 397, 1034], "farouk": [1042, 1043], "farther": 728, "farthest": 407, "fasci": 1053, "fashion": [2, 47, 140, 145, 218, 277, 363, 389, 404, 405, 407, 412, 414, 554, 558, 559, 560, 561, 565, 566, 567, 604, 630, 833, 856, 871, 874, 880, 891, 915, 916, 917, 918, 974, 994, 1000, 1004, 1014, 1020, 1043], "fast": [2, 53, 65, 96, 190, 196, 200, 225, 226, 242, 243, 309, 352, 362, 370, 375, 384, 401, 407, 409, 411, 412, 414, 415, 419, 446, 447, 469, 474, 509, 533, 534, 536, 539, 541, 545, 548, 565, 566, 567, 590, 591, 593, 635, 636, 643, 661, 662, 675, 677, 690, 702, 803, 817, 828, 829, 839, 840, 847, 848, 852, 863, 951, 972, 996, 1000, 1003, 1006, 1007, 1009, 1010, 1020, 1023, 1028, 1034, 1035, 1040, 1041, 1044, 1045], "fast_dict": 1044, "fast_dot": 1041, "fast_logdet": [2, 384], "fast_svd": 1034, "faster": [38, 47, 58, 75, 98, 106, 121, 140, 141, 144, 145, 147, 150, 165, 186, 190, 197, 210, 212, 225, 226, 228, 243, 247, 262, 288, 290, 305, 318, 320, 321, 325, 326, 350, 351, 352, 362, 369, 375, 383, 384, 389, 401, 407, 412, 416, 417, 419, 443, 447, 449, 451, 452, 453, 462, 509, 532, 533, 534, 537, 538, 539, 540, 541, 543, 544, 546, 547, 548, 549, 560, 561, 562, 563, 564, 646, 649, 650, 655, 656, 661, 662, 663, 664, 665, 666, 675, 677, 687, 690, 694, 698, 729, 759, 781, 782, 783, 847, 848, 849, 852, 857, 864, 865, 882, 884, 886, 896, 900, 951, 972, 993, 997, 1000, 1005, 1007, 1008, 1011, 1016, 1018, 1019, 1020, 1023, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "fastest": [91, 266, 352, 447, 673, 675, 677, 690, 950, 951, 1003], "fastest_top_recall_high_precision_index": 266, "fastica": [2, 120, 182, 209, 412, 533, 536, 542, 1025, 1034, 1036, 1042, 1048, 1049, 1052], "fastkmean": 449, "fastmcd": [409, 469, 474], "fastnc": 863, "fat": [522, 525], "fatima": [1048, 1051], "fato": 1047, "fauchereau": 1047, "fault": [383, 1042, 1044, 1046], "faulti": [213, 1034], "faust": 1052, "favor": [45, 114, 141, 253, 259, 387, 409, 414, 676, 678, 733, 811, 813, 866, 993, 1012, 1036, 1038, 1040, 1041, 1043, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "favorit": [375, 387, 1028], "favour": [795, 1001, 1003, 1043], "fawcett": [791, 792, 1004], "fazlul": 1036, "fbach": [532, 538], "fbeta_scor": [2, 732, 745, 786, 1004, 1036, 1037, 1038, 1039, 1044, 1050], "fc": [49, 293, 370], "fc2009": 1004, "fcd116": 119, "fcharra": 1049, "fcluster": 188, "fcostin": 1034, "fd": 48, "fdr": 594, "feasibl": [375, 876, 877, 887], "feast": 408, "feat": [48, 50, 379, 415], "feat0": [239, 318], "feat1": [239, 318, 415], "feat2": [239, 318, 415], "feat3": [239, 318, 415], "feat_idx": 630, "featur": [2, 8, 16, 17, 18, 24, 26, 33, 43, 45, 46, 47, 48, 50, 51, 55, 58, 59, 63, 64, 65, 67, 68, 69, 70, 72, 78, 84, 92, 94, 97, 102, 103, 104, 105, 106, 112, 113, 117, 119, 121, 123, 125, 128, 129, 131, 134, 136, 139, 141, 143, 147, 149, 154, 155, 156, 158, 160, 162, 169, 170, 171, 174, 175, 177, 180, 181, 183, 184, 185, 186, 191, 193, 195, 196, 197, 199, 200, 201, 203, 207, 209, 210, 211, 212, 214, 215, 218, 219, 225, 226, 227, 231, 236, 239, 241, 246, 247, 250, 251, 260, 262, 263, 265, 266, 267, 268, 271, 273, 274, 275, 276, 277, 278, 281, 283, 287, 291, 292, 293, 296, 297, 299, 302, 303, 305, 307, 308, 311, 315, 316, 318, 321, 322, 323, 324, 325, 326, 328, 329, 331, 332, 333, 334, 335, 336, 339, 343, 346, 349, 352, 355, 356, 357, 358, 367, 368, 369, 370, 371, 372, 373, 377, 378, 380, 382, 383, 384, 387, 388, 389, 390, 392, 393, 395, 401, 405, 407, 409, 410, 411, 412, 413, 417, 418, 419, 420, 421, 423, 428, 430, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 457, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 509, 510, 511, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 529, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 574, 581, 582, 583, 584, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 616, 617, 618, 621, 622, 623, 625, 626, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 688, 689, 690, 691, 692, 693, 694, 695, 700, 704, 705, 706, 716, 724, 725, 726, 727, 744, 745, 748, 749, 751, 761, 762, 766, 767, 769, 770, 771, 772, 773, 774, 776, 777, 778, 779, 780, 781, 784, 788, 791, 793, 795, 796, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 924, 933, 934, 948, 968, 978, 979, 980, 984, 992, 993, 996, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1015, 1016, 1017, 1018, 1019, 1020, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "feature_0": 920, "feature_1": [634, 920], "feature_2": 634, "feature_all_": 844, "feature_count_": [842, 844, 846], "feature_extract": [2, 48, 55, 58, 81, 82, 84, 85, 88, 100, 103, 124, 182, 269, 332, 349, 350, 351, 352, 364, 370, 407, 408, 415, 464, 545, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 880, 1002, 1034, 1035, 1036, 1037, 1040, 1041], "feature_import": 148, "feature_importances_": [142, 148, 165, 187, 188, 389, 414, 416, 554, 555, 558, 559, 560, 561, 565, 566, 567, 595, 596, 599, 915, 916, 917, 918, 1036, 1039, 1043], "feature_index": 415, "feature_indices_": 1042, "feature_log_prob_": [842, 843, 844, 846], "feature_map": [242, 308], "feature_map__n_compon": 242, "feature_map_fouri": 242, "feature_map_nystroem": [242, 642], "feature_nam": [55, 58, 127, 131, 142, 148, 152, 165, 185, 187, 219, 248, 282, 291, 308, 317, 318, 319, 324, 336, 350, 355, 368, 370, 380, 408, 464, 490, 491, 493, 497, 501, 502, 503, 505, 506, 511, 584, 634, 635, 636, 888, 919, 920, 921, 1012, 1020, 1050], "feature_name_combin": [880, 1050], "feature_names_": 583, "feature_names_in": 1048, "feature_names_in_": [251, 315, 320, 377, 389, 428, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 613, 614, 630, 631, 632, 633, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 691, 692, 693, 694, 695, 800, 801, 802, 803, 806, 807, 817, 825, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 870, 871, 872, 873, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 992, 1047, 1048, 1049, 1050, 1052], "feature_names_out": [423, 428, 442, 443, 445, 447, 449, 464, 482, 483, 484, 485, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 567, 568, 569, 570, 571, 583, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 630, 631, 632, 633, 638, 641, 642, 643, 644, 645, 691, 692, 695, 851, 856, 859, 863, 866, 867, 870, 871, 872, 873, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 1048, 1051], "feature_rang": [306, 877, 893, 1014, 1036, 1046], "feature_select": [2, 88, 104, 105, 107, 159, 160, 161, 162, 163, 164, 165, 182, 251, 319, 321, 342, 358, 389, 398, 408, 416, 583, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 993, 1025, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1053], "feature_selector": 165, "feature_to_plot": 205, "feature_union": 1050, "featureagglomer": [2, 85, 88, 440, 441, 1021, 1037, 1043, 1044, 1047, 1048, 1050, 1051, 1052], "featureforg": 1028, "featurehash": [2, 48, 58, 103, 182, 349, 350, 351, 364, 370, 415, 488, 583, 590, 591, 592, 593, 880, 1025, 1035, 1040, 1041, 1042, 1048, 1049], "featureheash": 352, "features_": [632, 994], "features__pca__n_compon": 107, "features__univ_select__k": 107, "features_idx": 308, "features_info": 186, "features_nam": [184, 1041], "features_samples_ratio": 70, "featureselector": 603, "featuresshould": 395, "featuretool": 1023, "featureunion": [2, 7, 44, 107, 367, 389, 398, 464, 632, 869, 994, 1024, 1028, 1030, 1035, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052], "featurewis": [2, 883], "feb": [74, 440, 454], "februari": [0, 409, 473, 1004, 1035, 1039, 1051], "fed": [48, 155, 358, 370, 415, 993, 1009, 1014, 1045], "feda": [1042, 1043], "feder": 1023, "federico": [1036, 1037, 1042, 1043, 1048], "federicopisanu": 1044, "feed": [48, 117, 211, 244, 352, 370, 373, 380, 387, 407, 415, 745, 880, 1005], "feedback": [265, 326, 374, 375, 376, 390, 1023, 1027, 1042], "feedforward": [864, 865], "feedstock": 379, "feel": [65, 181, 308, 326, 374, 375, 383, 407, 446, 1020, 1053], "feel_temp": [44, 186], "feghali": 1051, "fei": [564, 1010], "feickert": 1053, "feld": [1038, 1050], "feldbauer": [1042, 1043, 1044, 1045, 1048], "feldman": [1036, 1041, 1042, 1043, 1044], "felip": [1047, 1048, 1049, 1050], "felix": [1036, 1041, 1042, 1044, 1046, 1047, 1048], "femal": [104, 185, 322, 380, 880, 881, 1014], "fenc": 380, "feng": [1044, 1046, 1047, 1048], "fenil": 1047, "fenx": 1042, "ferdman": 1051, "ferenc": 1028, "fernand": [1042, 1048, 1049], "fernandez": 1043, "fernando": [1039, 1046], "fern\u00e1ndez": 1048, "ferrando": 1044, "ferrari": 1042, "ferreira": [1042, 1047, 1048], "ferri": [416, 1004], "ferria": 1041, "ferrin": 1048, "ferriss": 1041, "ferr\u00e9": 1048, "ferr\u00edn": 1045, "fetal": 247, "fetch": [2, 52, 56, 155, 185, 228, 262, 282, 368, 369, 370, 375, 379, 380, 383, 412, 492, 497, 556, 557, 558, 559, 564, 565, 566, 567, 590, 591, 593, 1042, 1050], "fetch_": 1041, "fetch_20newsgroup": [2, 55, 58, 103, 269, 332, 350, 351, 352, 370, 489, 1039, 1044, 1052], "fetch_20newsgroups_vector": [2, 47, 225, 241, 370, 1034, 1044, 1046, 1051, 1052], "fetch_california_h": [2, 141, 145, 180, 181, 308, 319, 370, 388, 408, 1043, 1045, 1052], "fetch_covtyp": [2, 190, 247, 319, 370, 1043, 1046, 1048, 1052], "fetch_fil": [2, 53, 326, 1053], "fetch_kddcup99": [2, 247, 370, 1041, 1042, 1043, 1046, 1047, 1052], "fetch_lfw_pair": [2, 370, 1039, 1049, 1052], "fetch_lfw_peopl": [2, 46, 370, 1049, 1052], "fetch_mldata": 1042, "fetch_olivetti_fac": [2, 84, 121, 246, 370, 1042, 1043, 1044, 1052], "fetch_openml": [2, 44, 45, 53, 104, 108, 144, 150, 155, 174, 185, 186, 187, 210, 218, 226, 228, 238, 247, 251, 262, 282, 285, 287, 288, 305, 314, 317, 321, 324, 369, 379, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "fetch_rcv1": [2, 370, 1039, 1043, 1052], "fetch_species_distribut": [2, 51, 301, 1043, 1052], "fetcher": [326, 368, 1039, 1041, 1050], "feth": 1034, "feurer": [1037, 1042], "fevott": [412, 539, 541, 548], "few": [0, 47, 55, 58, 75, 81, 86, 125, 144, 150, 172, 175, 176, 200, 208, 210, 212, 228, 243, 244, 253, 270, 271, 275, 300, 305, 308, 312, 317, 318, 319, 320, 321, 322, 323, 324, 325, 328, 346, 352, 362, 370, 371, 372, 375, 377, 388, 390, 398, 401, 404, 405, 407, 411, 412, 414, 416, 417, 437, 449, 562, 563, 658, 695, 698, 900, 951, 1000, 1001, 1003, 1004, 1007, 1008, 1017, 1019, 1020, 1028, 1040, 1050, 1052], "fewer": [44, 54, 64, 89, 135, 143, 145, 210, 362, 376, 407, 416, 417, 448, 461, 542, 596, 699, 837, 955, 1000, 1005, 1007, 1039, 1040, 1041], "fewest": [267, 630], "ff": 383, "ff0000": [68, 296, 303], "ff3333": 119, "ff7216": 119, "ff7f00": [80, 96, 237], "ff9c34": [93, 98], "ffaaaa": 296, "ffc107": 312, "fft": 643, "fhaselbeck": 1046, "fhoang7": 1043, "fhr": 247, "fi": [878, 1004], "fibins": [1042, 1043], "fictiti": 1004, "fidel": 54, "fidor": 1050, "fiedler": 1040, "fiegel": [1046, 1047, 1049], "field": [165, 228, 372, 377, 379, 404, 407, 408, 415, 464, 499, 502, 620, 1000, 1002, 1011, 1019, 1027, 1035], "fifth": [243, 997], "fig": [44, 45, 47, 48, 49, 50, 53, 55, 63, 65, 67, 71, 78, 79, 87, 89, 91, 94, 98, 100, 106, 110, 112, 117, 121, 126, 127, 131, 135, 141, 142, 144, 145, 147, 148, 150, 152, 153, 155, 157, 172, 178, 180, 186, 188, 190, 193, 198, 202, 203, 205, 206, 207, 208, 210, 211, 214, 218, 223, 225, 228, 230, 231, 232, 233, 234, 235, 238, 240, 247, 248, 258, 262, 263, 264, 265, 268, 269, 270, 271, 274, 277, 278, 279, 281, 282, 287, 288, 290, 292, 293, 301, 304, 305, 308, 309, 310, 312, 313, 314, 317, 321, 322, 336, 343, 345, 346, 347, 348, 350, 351, 352, 354, 371, 382], "fig1": 101, "fig2": 101, "figaspect": 312, "fight": [75, 214, 1028], "fighter": 103, "fignum": 344, "figsiz": [44, 45, 46, 50, 52, 53, 54, 55, 63, 64, 65, 67, 68, 69, 71, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 96, 98, 99, 100, 106, 108, 112, 114, 116, 117, 119, 121, 124, 125, 126, 127, 130, 131, 135, 137, 138, 144, 145, 146, 147, 148, 150, 153, 155, 156, 160, 171, 173, 177, 178, 180, 181, 185, 186, 188, 190, 192, 193, 196, 201, 203, 205, 207, 208, 209, 210, 211, 212, 214, 216, 218, 221, 224, 226, 228, 230, 231, 232, 234, 235, 237, 238, 240, 242, 245, 246, 247, 248, 253, 255, 256, 259, 262, 263, 264, 265, 270, 271, 272, 275, 277, 278, 281, 282, 283, 287, 288, 290, 291, 303, 304, 306, 308, 309, 310, 311, 312, 313, 314, 321, 322, 328, 330, 337, 339, 343, 344, 345, 346, 347, 348, 350, 351, 352, 371, 921], "figur": [46, 47, 48, 50, 52, 54, 62, 63, 64, 65, 68, 73, 74, 75, 76, 78, 80, 81, 82, 84, 85, 86, 88, 90, 92, 93, 95, 96, 97, 98, 99, 101, 110, 114, 116, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 135, 136, 137, 138, 146, 147, 148, 149, 150, 153, 154, 158, 160, 161, 164, 170, 171, 172, 173, 176, 177, 181, 185, 186, 187, 188, 192, 196, 199, 201, 204, 205, 209, 211, 212, 216, 221, 225, 226, 227, 232, 233, 234, 237, 241, 242, 243, 245, 246, 248, 253, 255, 256, 259, 261, 267, 272, 273, 283, 293, 297, 298, 301, 303, 306, 308, 310, 311, 315, 317, 319, 328, 329, 330, 337, 339, 344, 355, 356, 375, 407, 413, 414, 415, 417, 438, 634, 635, 700, 701, 703, 704, 705, 809, 826, 921, 993, 997, 1000, 1003, 1004, 1007, 1008, 1011, 1012, 1018, 1019, 1020, 1047], "figure_": [69, 186, 248, 317, 319, 382, 438, 634, 635, 700, 701, 703, 704, 705, 809, 826], "figure_titl": 144, "filali": 1042, "file": [2, 48, 52, 53, 69, 326, 350, 351, 362, 363, 364, 369, 370, 372, 373, 378, 379, 380, 381, 387, 401, 408, 412, 487, 492, 494, 495, 497, 504, 509, 510, 535, 581, 582, 590, 591, 593, 919, 1007, 1020, 1025, 1027, 1034, 1035, 1037, 1040, 1041, 1042, 1043, 1046, 1047, 1048, 1049, 1050, 1053], "file_1": 504, "file_2": 504, "file_42": 504, "file_43": 504, "file_44": 504, "file_id": 369, "file_path": 492, "filenam": [2, 48, 56, 127, 332, 370, 375, 379, 381, 401, 488, 492, 501, 504, 505, 508, 590, 591, 593, 1034, 1039, 1042, 1043], "filesystem": [383, 393, 1047], "filho": 405, "filip": [1051, 1052], "filipj8": [1041, 1042], "fill": [71, 143, 187, 263, 293, 355, 389, 408, 412, 516, 528, 539, 541, 548, 589, 633, 919, 921, 994, 1007, 1020], "fill_between": [53, 147, 150, 169, 174, 176, 178, 192, 193, 228, 268, 270, 271, 272, 278, 809, 826], "fill_between_": [809, 826], "fill_between_kw": [809, 826], "fill_betweenx": 94, "fill_diagon": [188, 233], "fill_legend": 228, "fill_valu": [181, 239, 249, 318, 421, 424, 430, 431, 630, 633, 1014, 1042, 1050, 1051], "fillna": [228, 247], "filo": [1034, 1037], "filter": [2, 18, 48, 55, 81, 82, 106, 216, 228, 266, 268, 290, 350, 363, 370, 381, 384, 407, 415, 448, 488, 489, 504, 590, 593, 597, 598, 599, 600, 601, 602, 777, 842, 942, 968, 1006, 1007, 1044], "filter_param": 777, "filtered_cv_result": 266, "filterwarn": [80, 96, 225, 304, 305, 375, 1014], "final": [2, 44, 53, 64, 65, 71, 76, 78, 89, 103, 104, 112, 114, 117, 126, 135, 136, 138, 140, 144, 145, 148, 155, 158, 162, 174, 181, 184, 186, 188, 190, 192, 196, 198, 200, 207, 210, 212, 227, 228, 231, 237, 251, 257, 262, 266, 274, 285, 288, 314, 315, 317, 318, 339, 343, 362, 364, 370, 373, 375, 376, 377, 379, 388, 389, 404, 405, 407, 408, 411, 414, 415, 416, 437, 442, 447, 448, 452, 459, 462, 464, 537, 556, 557, 568, 569, 571, 596, 630, 650, 656, 662, 674, 682, 693, 697, 722, 803, 835, 836, 867, 868, 904, 907, 993, 994, 996, 1000, 1001, 1004, 1007, 1010, 1011, 1014, 1017, 1028, 1039, 1042, 1043, 1044, 1045, 1047], "final_estim": [155, 317, 414, 568, 569], "final_estimator_": [568, 569], "final_estimatorridgecv": 155, "final_lay": 414, "final_layer_gbr": 414, "final_layer_rfr": 414, "final_step": 78, "financ": [262, 1005], "financi": [0, 52, 407, 414, 1000], "find": [2, 44, 45, 46, 52, 56, 65, 76, 81, 82, 83, 86, 87, 89, 91, 99, 106, 112, 113, 121, 123, 125, 126, 131, 145, 155, 169, 173, 175, 177, 186, 196, 198, 200, 212, 218, 230, 232, 234, 235, 240, 247, 258, 262, 267, 268, 269, 279, 281, 291, 296, 297, 298, 313, 317, 323, 325, 341, 342, 343, 346, 350, 351, 354, 363, 372, 373, 375, 376, 377, 380, 381, 384, 387, 388, 389, 390, 395, 404, 406, 407, 409, 410, 412, 414, 415, 416, 418, 441, 444, 445, 446, 450, 451, 452, 453, 462, 532, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 559, 566, 584, 591, 613, 614, 650, 653, 656, 657, 658, 659, 661, 662, 674, 679, 691, 710, 732, 733, 741, 785, 786, 787, 790, 791, 797, 802, 803, 817, 825, 849, 850, 851, 853, 855, 857, 858, 859, 880, 881, 886, 899, 900, 901, 915, 916, 918, 930, 950, 951, 953, 993, 994, 996, 999, 1000, 1001, 1003, 1004, 1005, 1008, 1010, 1014, 1018, 1019, 1020, 1022, 1027, 1028, 1034, 1041, 1042, 1043, 1044, 1046, 1048, 1049, 1052], "findal": 352, "fine": [44, 73, 143, 165, 203, 214, 226, 259, 266, 343, 356, 372, 379, 389, 415, 446, 951, 1007, 1010, 1019, 1024, 1044], "finer": [44, 53, 73, 290, 339, 363, 407, 411, 993, 1007, 1044], "finfo": [233, 471, 472, 478, 608, 653, 654, 657, 658, 659, 685, 686, 1049], "finish": [165, 256, 1001], "finit": [65, 253, 259, 362, 370, 389, 468, 539, 552, 584, 608, 611, 613, 614, 661, 731, 781, 788, 800, 828, 905, 931, 932, 933, 934, 1000, 1003, 1004, 1028, 1041, 1042, 1046, 1048, 1049], "finn": [1042, 1043], "firefox": 1014, "fireplac": 144, "fireplacequ": 144, "firm": [52, 407], "first": [0, 2, 44, 45, 47, 48, 51, 53, 56, 59, 63, 64, 67, 68, 69, 71, 75, 89, 90, 92, 95, 98, 99, 100, 101, 103, 104, 105, 108, 112, 116, 117, 126, 127, 129, 135, 136, 140, 142, 143, 144, 145, 146, 148, 150, 152, 155, 156, 157, 158, 161, 162, 165, 169, 170, 171, 174, 175, 176, 177, 181, 184, 185, 186, 188, 190, 192, 194, 200, 208, 211, 212, 218, 219, 224, 231, 234, 241, 242, 244, 245, 246, 248, 250, 251, 255, 259, 262, 263, 268, 270, 271, 275, 277, 279, 280, 281, 285, 287, 288, 290, 293, 297, 298, 299, 303, 305, 308, 310, 313, 314, 315, 318, 319, 329, 332, 335, 336, 339, 341, 350, 351, 352, 354, 355, 357, 358, 363, 364, 369, 370, 372, 373, 374, 375, 377, 379, 380, 381, 383, 387, 389, 401, 404, 405, 406, 407, 410, 411, 412, 414, 415, 416, 417, 419, 443, 446, 447, 450, 459, 460, 464, 472, 483, 487, 488, 490, 491, 493, 495, 498, 501, 503, 505, 509, 510, 511, 529, 534, 535, 539, 542, 554, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 584, 586, 590, 591, 592, 593, 595, 596, 603, 613, 614, 620, 624, 627, 634, 635, 636, 637, 649, 655, 662, 669, 671, 677, 679, 691, 698, 701, 702, 703, 705, 715, 719, 739, 745, 766, 767, 785, 797, 800, 801, 806, 807, 808, 809, 810, 815, 817, 824, 826, 835, 836, 838, 839, 841, 842, 843, 844, 845, 846, 847, 848, 852, 855, 856, 857, 858, 859, 860, 861, 864, 865, 866, 867, 872, 880, 884, 885, 886, 888, 889, 896, 897, 909, 912, 915, 916, 917, 918, 920, 922, 928, 929, 933, 934, 935, 944, 953, 955, 970, 974, 977, 989, 992, 993, 994, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1011, 1014, 1015, 1018, 1019, 1020, 1028, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1053], "first_img_data": 508, "first_pca_compon": 313, "first_quart": 130, "first_week": 150, "firstli": [124, 362, 387, 660], "fisach": 1040, "fiscal": 0, "fischer": [1039, 1040], "fischler": 1000, "fischoff": 1046, "fish": 320, "fisher": [372, 414, 505, 639], "fisher1958": 414, "fisher_transform": 639, "fissler": 1004, "fissler2022": 1004, "fit": [2, 23, 26, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 60, 62, 63, 65, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 88, 89, 90, 92, 95, 96, 97, 98, 99, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 121, 123, 124, 125, 126, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 163, 164, 165, 169, 170, 171, 172, 173, 175, 176, 177, 178, 182, 184, 185, 186, 187, 188, 190, 191, 195, 196, 197, 198, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 213, 214, 215, 217, 218, 219, 222, 223, 224, 225, 226, 227, 228, 233, 237, 238, 240, 242, 243, 244, 245, 246, 247, 248, 250, 251, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 276, 277, 278, 279, 280, 281, 282, 283, 285, 288, 290, 291, 292, 293, 294, 296, 297, 298, 299, 301, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 343, 344, 346, 347, 348, 350, 351, 354, 355, 357, 362, 364, 367, 370, 372, 375, 378, 380, 381, 384, 387, 389, 401, 404, 405, 406, 407, 408, 409, 411, 412, 413, 415, 416, 417, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 457, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 510, 511, 525, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 577, 579, 583, 584, 585, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 612, 613, 614, 616, 617, 618, 619, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 690, 691, 692, 693, 694, 695, 697, 700, 701, 703, 704, 705, 713, 714, 726, 735, 738, 753, 791, 800, 801, 802, 803, 806, 807, 809, 817, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 895, 896, 897, 898, 899, 900, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 924, 926, 927, 942, 960, 963, 987, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1023, 1024, 1025, 1026, 1028, 1030, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "fit_": 1047, "fit_algorithm": [121, 532, 538, 1049, 1050], "fit_and_evalu": 351, "fit_and_plot_model": 313, "fit_and_scor": 218, "fit_data": 60, "fit_dur": 288, "fit_ecoc": 1038, "fit_grid_point": 1045, "fit_intercept": [47, 192, 193, 197, 207, 215, 224, 237, 276, 315, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 683, 690, 907, 908, 914, 1000, 1018, 1038, 1042, 1043, 1044, 1046, 1047, 1048], "fit_inverse_transform": [45, 126, 536, 1043], "fit_ovo": 1038, "fit_ovr": 1038, "fit_param": [244, 389, 431, 437, 442, 445, 465, 533, 535, 538, 540, 543, 544, 550, 556, 557, 568, 569, 570, 571, 584, 585, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 630, 631, 633, 638, 641, 642, 643, 644, 645, 668, 674, 809, 826, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 851, 856, 859, 863, 866, 870, 871, 872, 873, 876, 877, 879, 880, 881, 882, 884, 885, 886, 887, 899, 900, 963, 1041, 1044, 1045, 1046, 1048, 1050, 1051, 1052, 1053], "fit_path": [653, 657, 658, 659, 685, 686], "fit_predict": [58, 90, 91, 94, 237, 247, 295, 326, 377, 389, 407, 425, 429, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 469, 564, 612, 680, 795, 796, 800, 801, 853, 859, 867, 911, 927, 1010, 1039, 1042, 1043, 1047, 1049, 1051], "fit_prior": [370, 842, 843, 844, 846], "fit_status_": [909, 910, 911, 912, 913], "fit_tim": [53, 92, 144, 200, 218, 270, 411, 830, 831], "fit_timemapermsemaepinball_loss_05pinball_loss_50pinball_loss_95strstrstrstrstrstrstr": 53, "fit_times_nb": 270, "fit_times_svm": 270, "fit_transform": [44, 45, 46, 50, 52, 55, 58, 80, 83, 86, 87, 92, 96, 122, 125, 127, 131, 153, 190, 202, 226, 228, 230, 231, 232, 233, 234, 235, 240, 241, 244, 245, 251, 288, 292, 304, 308, 309, 313, 314, 315, 317, 320, 322, 323, 324, 325, 326, 339, 350, 351, 352, 358, 367, 370, 377, 380, 381, 389, 403, 408, 412, 415, 416, 423, 431, 442, 443, 445, 447, 449, 464, 466, 468, 482, 483, 484, 485, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 567, 568, 569, 570, 571, 583, 584, 585, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 612, 630, 631, 632, 633, 638, 641, 642, 643, 644, 645, 691, 692, 693, 694, 695, 699, 851, 856, 859, 863, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 905, 927, 994, 996, 1000, 1005, 1007, 1014, 1015, 1016, 1038, 1039, 1040, 1042, 1043, 1044, 1046, 1048, 1050, 1051, 1052, 1053], "fitfailedwarn": [2, 803, 806, 807, 809, 817, 826, 829, 830, 831, 834], "fitted_transform": 464, "fittedcolumntransform": [155, 186], "fittedgridsearchcv": 249, "fittedpipelin": [155, 239, 249, 269, 282, 314, 318], "fittedrandomforestclassifi": 324, "fittedrandomizedsearchcv": 104, "fittedstackingregressor": 155, "fitter": 1020, "fitting_weight": 398, "fitzgerald": 1042, "fitzk": 1028, "five": [150, 254, 262, 329, 332, 370, 532, 540, 546, 1001, 1007, 1019, 1028, 1034], "five_imag": 415, "fix": [2, 44, 48, 59, 63, 71, 81, 104, 130, 140, 141, 143, 148, 150, 169, 170, 174, 177, 185, 188, 196, 212, 228, 247, 259, 271, 281, 303, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 351, 362, 363, 369, 371, 373, 374, 375, 379, 383, 387, 389, 390, 398, 407, 408, 411, 412, 414, 415, 417, 452, 462, 472, 505, 513, 532, 538, 541, 543, 549, 550, 560, 561, 565, 566, 590, 593, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 633, 656, 666, 671, 673, 687, 690, 694, 698, 710, 788, 800, 817, 824, 849, 850, 852, 855, 857, 858, 874, 877, 891, 915, 916, 926, 951, 970, 993, 1000, 1003, 1004, 1007, 1014, 1024, 1032, 1033, 1035, 1036, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053], "fixed_classes_uniform_labelings_scor": 73, "fixed_vocabulary_": [590, 593], "fixedthresholdclassifi": [2, 167, 262, 326, 406, 825, 1052, 1053], "fixm": [379, 389], "fixtur": [363, 375], "fkaren27": 1048, "flach": [405, 1004], "flach2008": 1004, "flach2015": 1004, "flag": [174, 244, 247, 324, 373, 375, 376, 378, 398, 403, 464, 613, 614, 630, 676, 678, 731, 788, 923, 924, 1019, 1040, 1044, 1045, 1047, 1048, 1049, 1050, 1053], "flair": 1006, "flak": 1049, "flake8": 581, "flanagan": [1043, 1044], "flander": [1052, 1053], "flat": [2, 79, 121, 186, 230, 231, 232, 266, 407, 414, 415, 440, 446, 448, 461, 510, 1011, 1034, 1035, 1050], "flat_grid": 242, "flatnonzero": [130, 198, 267, 276, 277, 784], "flatten": [55, 69, 233, 242, 266, 312, 336, 347, 381, 503, 570, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 856], "flatten_transform": [570, 1041], "flatter": [44, 63], "flavanoid": [49, 372], "flaviomorelli": 1044, "flavor": [375, 1007], "flavour": 414, "flaw": [389, 414], "flaxman": [1036, 1038], "fledg": [364, 415], "fleet": 44, "fleme": 1049, "flennerhag": 1042, "fletcher": [1000, 1034, 1038], "flexibl": [44, 63, 144, 180, 210, 281, 309, 326, 336, 352, 382, 387, 401, 411, 417, 677, 907, 908, 993, 998, 1000, 1004, 1008, 1014, 1023, 1028, 1043, 1047], "flier": 50, "flink": 103, "flip": [125, 584, 745, 951, 1006, 1038, 1047], "flip_i": 516, "flip_sign": 951, "float": [2, 47, 50, 52, 77, 81, 82, 87, 94, 95, 99, 100, 101, 104, 124, 177, 185, 197, 201, 233, 262, 267, 268, 272, 276, 346, 352, 362, 369, 370, 375, 384, 389, 403, 406, 407, 408, 415, 416, 418, 419, 420, 424, 426, 430, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 454, 455, 456, 457, 458, 459, 461, 462, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 523, 525, 526, 528, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 585, 586, 590, 593, 594, 595, 596, 597, 598, 599, 600, 604, 605, 613, 614, 616, 617, 618, 619, 620, 622, 623, 625, 626, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 716, 717, 719, 720, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 737, 738, 739, 740, 741, 742, 743, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 758, 759, 760, 762, 769, 772, 778, 779, 780, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 817, 820, 823, 825, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 867, 870, 873, 874, 880, 881, 883, 885, 887, 888, 889, 890, 899, 900, 901, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 921, 930, 931, 933, 934, 937, 948, 949, 966, 978, 984, 989, 994, 1004, 1005, 1007, 1008, 1014, 1019, 1020, 1034, 1035, 1036, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1052], "float16": 1043, "float32": [56, 146, 233, 306, 322, 363, 370, 375, 376, 377, 389, 401, 403, 558, 559, 560, 561, 564, 565, 566, 567, 595, 596, 643, 644, 661, 702, 766, 872, 915, 916, 917, 918, 931, 979, 980, 981, 1020, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "float64": [46, 51, 53, 54, 87, 104, 106, 146, 147, 148, 149, 169, 185, 186, 243, 262, 276, 279, 321, 322, 323, 339, 363, 369, 375, 376, 377, 389, 415, 420, 458, 471, 472, 475, 478, 479, 480, 497, 498, 509, 510, 517, 518, 519, 521, 532, 538, 540, 543, 544, 546, 547, 549, 583, 584, 591, 593, 599, 644, 651, 653, 654, 657, 658, 659, 660, 661, 666, 672, 673, 676, 678, 683, 685, 686, 690, 697, 702, 709, 710, 711, 712, 713, 715, 719, 720, 722, 723, 724, 726, 728, 729, 734, 738, 739, 740, 741, 742, 743, 746, 751, 756, 758, 759, 789, 791, 796, 797, 798, 817, 872, 880, 881, 888, 900, 909, 910, 912, 913, 916, 918, 928, 931, 933, 949, 974, 977, 979, 980, 981, 1019, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052], "float_info": 58, "floch": 1051, "floor": 54, "floor_x": 54, "flore": 1047, "florian": [1028, 1034, 1038, 1040, 1044, 1051], "florin": 1052, "flow": 377, "flowchart": [395, 411], "flower": [127, 129, 277, 507, 508, 1004, 1023], "floyd": [370, 691, 1001], "floydsoft": 1038, "fluctuat": [52, 94, 150, 210, 275, 1042], "flush": 218, "fly": [146, 380, 509, 510, 584, 1034, 1036, 1043], "flyingdutchman23": 1047, "flyingimmidev": 1034, "flynn": [1047, 1049], "fmax": 228, "fmi": [407, 734], "fmin_l_bfgs_b": [613, 614], "fmt": [95, 221], "fn": [325, 407, 715, 721, 732, 733, 734, 785, 786, 787, 790, 1004, 1005], "fn_c": 277, "fna": [165, 372], "fnlwgt": [324, 497], "fnr": [265, 701, 730], "fo": 415, "focu": [44, 49, 121, 135, 169, 259, 298, 362, 380, 405, 414, 554, 555, 560, 562, 563, 681, 1001, 1004, 1007, 1014, 1023, 1024, 1027], "focus": [63, 110, 200, 285, 370, 375, 387, 1001, 1014, 1023], "fokow": 1051, "fold": [2, 44, 101, 107, 110, 141, 143, 146, 164, 185, 200, 255, 262, 263, 264, 266, 268, 269, 271, 278, 282, 315, 331, 346, 358, 370, 375, 378, 379, 388, 389, 398, 406, 407, 416, 437, 472, 494, 537, 568, 569, 596, 604, 650, 654, 656, 658, 662, 664, 666, 668, 676, 678, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 838, 841, 888, 909, 912, 993, 1000, 1004, 1014, 1019, 1034, 1036, 1038, 1039, 1040, 1042, 1043, 1045, 1046, 1051, 1053], "folder": [2, 105, 370, 373, 375, 379, 383, 393, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 504, 1007], "folkman": 1041, "folloni": 1045, "follow": [0, 26, 44, 47, 58, 64, 65, 69, 73, 88, 89, 91, 97, 101, 104, 105, 119, 121, 130, 135, 138, 147, 148, 152, 160, 174, 175, 180, 184, 185, 186, 187, 188, 192, 194, 196, 198, 200, 208, 210, 211, 225, 228, 238, 244, 245, 247, 259, 262, 268, 277, 278, 282, 285, 308, 314, 315, 317, 318, 320, 321, 322, 325, 336, 346, 350, 351, 352, 354, 357, 358, 362, 363, 369, 370, 372, 373, 374, 375, 377, 379, 380, 381, 382, 383, 384, 387, 388, 389, 390, 393, 395, 398, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 422, 424, 426, 428, 429, 430, 431, 437, 441, 443, 445, 446, 447, 448, 449, 453, 461, 462, 463, 464, 465, 468, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 516, 535, 539, 541, 542, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 571, 583, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 630, 631, 632, 633, 634, 636, 637, 649, 655, 661, 662, 673, 674, 683, 695, 697, 702, 708, 712, 716, 721, 791, 822, 844, 849, 850, 851, 853, 855, 857, 858, 859, 866, 870, 871, 872, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 896, 905, 907, 908, 912, 915, 916, 917, 918, 922, 929, 944, 946, 950, 993, 994, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1022, 1023, 1024, 1027, 1031, 1034, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "folwarczn\u00fd": 1051, "fonari": [1046, 1047], "fond": 1028, "fondat": 1028, "font": [147, 200, 224, 242, 919, 921], "font_manag": [113, 294, 338], "font_prop": 113, "font_siz": 312, "fontdict": [55, 75], "fontnam": [919, 1047], "fontproperti": [113, 294, 338], "fontsiz": [45, 48, 50, 55, 71, 84, 94, 124, 143, 160, 172, 173, 175, 178, 186, 193, 201, 209, 221, 231, 232, 256, 263, 272, 273, 274, 279, 280, 306, 312, 345, 921], "fontweight": [94, 206], "foo": [377, 583, 1008], "food": [0, 372], "foot": 1022, "footer": [55, 103, 269, 350, 351, 370, 488, 489], "footnot": [1011, 1023], "footprint": [319, 322, 362, 364, 407, 412, 542, 556, 557, 558, 559, 564, 565, 566, 567, 1036, 1039, 1040, 1045, 1046, 1049], "fopenmp": [373, 376], "foral": [407, 417, 616], "forbid": [407, 414], "forbidden": [186, 414], "forc": [135, 169, 214, 281, 288, 312, 350, 369, 373, 402, 411, 414, 450, 457, 464, 467, 497, 608, 611, 649, 650, 655, 656, 660, 663, 664, 665, 666, 675, 676, 677, 684, 687, 690, 757, 781, 784, 825, 847, 848, 849, 850, 851, 853, 855, 857, 858, 859, 909, 910, 911, 912, 913, 931, 933, 934, 1014, 1030, 1039, 1042, 1043, 1044, 1046, 1047, 1048, 1050], "force_all_finit": [781, 931, 933, 934, 1045, 1048, 1053], "force_alpha": [842, 843, 844, 846, 1049], "force_finit": [608, 611, 731, 788, 1004, 1048], "force_int_remainder_col": [464, 467], "force_writ": [933, 934, 1052], "ford": 52, "forecast": [43, 44, 147, 150, 168, 176, 182, 212, 268, 405, 406, 417, 492, 497, 563, 614, 618, 625, 626, 628, 704, 745, 748, 749, 751, 793, 824, 829, 830, 833, 1004, 1023, 1025], "foreground": [76, 100], "foreign_work": 262, "foreman": 1041, "forese": 387, "forest": [2, 14, 51, 65, 68, 134, 140, 143, 145, 146, 148, 149, 150, 151, 153, 155, 158, 180, 182, 183, 190, 237, 265, 267, 269, 301, 319, 326, 350, 356, 358, 368, 388, 389, 405, 416, 463, 464, 490, 491, 497, 499, 516, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 633, 637, 803, 808, 833, 840, 867, 881, 911, 915, 916, 917, 993, 994, 1005, 1012, 1020, 1025, 1026, 1030, 1031, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1043, 1051], "forest_import": 142, "forestclassifi": 1039, "forestcolumntransform": 155, "forestcov": 247, "forg": [317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 363, 376, 378, 379, 383, 393, 394], "forget": [186, 358, 363, 369, 379, 387, 412, 1001], "forget_factor": [412, 539], "forgiv": 737, "forina": 372, "fork": [322, 373, 375, 383, 387], "fork_exec": 322, "forkserv": 387, "form": [2, 44, 49, 58, 69, 78, 94, 101, 121, 158, 176, 177, 182, 185, 243, 244, 259, 268, 328, 358, 369, 372, 375, 377, 379, 389, 390, 404, 407, 410, 411, 412, 413, 414, 415, 417, 419, 421, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 456, 459, 463, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 571, 583, 584, 585, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 688, 690, 691, 692, 693, 694, 695, 696, 702, 800, 801, 802, 803, 806, 807, 808, 811, 813, 817, 825, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 939, 944, 945, 946, 960, 963, 993, 995, 997, 998, 1000, 1001, 1004, 1005, 1008, 1009, 1010, 1014, 1019, 1023, 1040, 1044, 1046, 1053], "formal": [389, 390, 407, 414, 847, 848, 1001, 1004, 1005, 1008], "format": [2, 48, 51, 52, 53, 60, 88, 92, 95, 103, 112, 121, 130, 138, 143, 146, 148, 160, 161, 190, 193, 197, 210, 228, 251, 263, 273, 275, 276, 279, 283, 292, 293, 296, 297, 312, 317, 325, 326, 345, 351, 354, 357, 362, 368, 374, 375, 377, 378, 383, 384, 388, 389, 401, 408, 411, 414, 415, 431, 442, 443, 445, 447, 449, 450, 452, 459, 464, 468, 482, 483, 484, 485, 487, 489, 497, 498, 499, 509, 510, 511, 524, 528, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 552, 558, 559, 565, 566, 567, 568, 569, 570, 571, 583, 584, 585, 586, 589, 591, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 630, 631, 632, 633, 638, 641, 642, 643, 644, 645, 649, 655, 661, 662, 663, 665, 669, 670, 671, 679, 680, 681, 691, 692, 695, 700, 714, 716, 723, 742, 743, 754, 771, 794, 795, 836, 849, 850, 851, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 894, 899, 900, 905, 907, 919, 933, 934, 957, 965, 969, 979, 980, 981, 982, 983, 984, 994, 1004, 1007, 1012, 1014, 1015, 1018, 1020, 1030, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1045, 1047, 1049, 1051, 1052, 1053], "format_func": 293, "formatter_result": 92, "former": [52, 352, 406, 414, 415, 566, 805, 812, 821, 1006, 1034, 1040, 1043], "formerli": [214, 1035, 1038, 1040, 1041], "formul": [135, 169, 178, 203, 214, 277, 375, 407, 409, 412, 415, 417, 420, 475, 550, 551, 558, 565, 653, 654, 657, 658, 659, 661, 662, 668, 673, 766, 772, 801, 909, 912, 915, 917, 1000, 1004, 1005, 1008, 1014, 1026, 1030, 1051], "formula": [110, 111, 404, 407, 409, 420, 473, 475, 517, 518, 519, 592, 646, 649, 650, 653, 654, 655, 656, 657, 658, 659, 663, 664, 665, 666, 667, 679, 681, 707, 732, 733, 758, 767, 824, 993, 998, 1000, 1004, 1009, 1010, 1014, 1018, 1039, 1041, 1043], "forrest": [1045, 1046], "forsal": [58, 352, 370], "forsyth": 1042, "forth": 383, "fortin": [1034, 1036, 1037, 1038], "fortran": [419, 542, 649, 650, 655, 656, 663, 664, 665, 666, 668, 684, 687, 688, 689, 933, 934, 1034, 1037, 1038, 1042], "fortun": [381, 414, 1047, 1048], "forward": [47, 135, 165, 244, 319, 362, 375, 398, 401, 416, 509, 510, 540, 544, 554, 560, 561, 604, 671, 688, 689, 867, 871, 1000, 1024, 1046], "foster": [0, 1042], "fouchet": 1040, "found": [0, 46, 53, 58, 59, 60, 131, 142, 164, 169, 173, 175, 177, 214, 238, 245, 262, 266, 269, 270, 271, 281, 313, 317, 320, 322, 323, 339, 352, 362, 364, 369, 372, 374, 375, 377, 387, 389, 390, 401, 404, 406, 407, 410, 411, 412, 414, 415, 417, 432, 441, 444, 445, 459, 472, 558, 559, 560, 561, 565, 566, 590, 592, 613, 614, 631, 639, 650, 654, 656, 658, 664, 666, 668, 674, 675, 677, 679, 681, 690, 691, 715, 722, 803, 806, 807, 817, 825, 844, 849, 850, 856, 878, 880, 881, 915, 916, 917, 918, 922, 930, 987, 991, 993, 996, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1014, 1018, 1019, 1020, 1024, 1034, 1037, 1038, 1041, 1042, 1044, 1048, 1051], "foundat": [0, 155, 262, 375, 405, 1007], "founder": 1028, "fouqu": 1034, "fouquet": [1050, 1051], "four": [65, 161, 177, 190, 195, 211, 255, 256, 262, 329, 336, 371, 375, 389, 558, 565, 722, 915, 917, 939, 1000, 1002, 1003, 1004, 1014, 1022], "fourier": [2, 24, 242, 641, 642, 643, 644, 645, 761, 762, 996], "fourier_approx_svm": 242, "fourier_scor": 242, "fourier_tim": 242, "fournier": 1043, "fourth": 143, "fowkl": [407, 734], "fowlk": [734, 1040], "fowlkes_mallows_scor": [2, 407, 1004, 1040, 1042], "fox": [325, 415, 1050], "fp": [48, 262, 325, 407, 715, 721, 732, 733, 734, 785, 786, 787, 790, 1004], "fp_c": 277, "fpgawesom": 1048, "fpr": [2, 51, 238, 247, 262, 265, 277, 278, 382, 594, 598, 701, 705, 709, 730, 792, 1004, 1031, 1034, 1050], "fpr_a": 277, "fpr_b": 277, "fpr_grid": 277, "fpr_score": 262, "fr": [532, 538, 661, 667, 688, 689, 761, 762, 1002, 1004], "fraa\u00df": 1051, "frac": [64, 112, 113, 135, 268, 275, 277, 320, 404, 405, 407, 409, 412, 413, 414, 415, 417, 430, 463, 465, 482, 483, 484, 555, 557, 559, 561, 563, 566, 569, 571, 614, 618, 622, 625, 626, 638, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 664, 665, 666, 667, 668, 670, 672, 673, 675, 676, 681, 682, 683, 699, 732, 733, 758, 772, 840, 841, 850, 858, 865, 908, 910, 913, 916, 918, 996, 998, 999, 1000, 1001, 1002, 1004, 1006, 1007, 1008, 1009, 1011, 1012, 1014, 1016, 1018, 1019, 1020], "frac12": [414, 996], "fractal": [165, 372], "fraction": [2, 44, 63, 65, 147, 150, 210, 218, 262, 275, 346, 351, 405, 411, 414, 438, 439, 449, 450, 456, 457, 516, 528, 558, 559, 560, 561, 565, 566, 567, 592, 595, 604, 669, 670, 671, 674, 679, 680, 681, 706, 724, 725, 726, 727, 737, 797, 799, 805, 809, 831, 832, 846, 874, 909, 910, 911, 915, 916, 917, 918, 969, 1000, 1004, 1007, 1011, 1012, 1014, 1019, 1020, 1024, 1035, 1036, 1037, 1048, 1051], "fragil": 658, "fragment": [89, 124, 379, 383], "frame": [44, 104, 127, 150, 174, 185, 186, 210, 262, 314, 324, 370, 375, 387, 390, 489, 490, 491, 493, 497, 501, 502, 503, 505, 506, 511, 1046], "frameon": [47, 216], "framework": [268, 362, 387, 389, 401, 407, 640, 691, 800, 1000, 1001, 1008, 1024, 1028, 1034, 1040], "fran": [1046, 1047, 1048], "franc": [314, 767], "francesco": [1046, 1049], "franci": [537, 661, 1000, 1040], "francia": 1048, "francidona": 1044, "francisco": [415, 1016], "franck": [1049, 1051, 1052], "franco": 1044, "francoi": [1034, 1047], "francoisgoupil": 1048, "frank": [268, 838, 1005, 1039, 1043, 1044], "frankhui": 1042, "franki": 1047, "franz": 1042, "franziska": 1045, "fran\u00e7oi": [0, 359, 1037], "fraud": [262, 325, 1000, 1028], "fraudul": [262, 1000, 1028], "fraudulent_accept": 262, "fraudulent_refus": 262, "fred": [103, 1034, 1047], "freddi": 1053, "freder": 1044, "frederick": 1047, "fredrik": 1042, "free": [0, 45, 65, 89, 174, 175, 181, 209, 258, 308, 369, 374, 375, 376, 383, 387, 393, 415, 452, 611, 674, 863, 913, 993, 996, 1000, 1004, 1024, 1042], "freebsd": 378, "freedom": [44, 123, 174, 198, 200, 202, 268, 542, 659, 800, 1000, 1037], "freeland": 1049, "freestand": 377, "freez": [167, 379, 393, 401, 612, 1028, 1042, 1053], "frei": [74, 440, 454, 1044], "freija": 1042, "freita": [1039, 1041, 1042], "frellwan": 1047, "fremtpl2": 228, "fremtpl2freq": 228, "fremtpl2sev": 228, "french": [228, 314], "freq": [185, 196, 352], "frequenc": [58, 65, 169, 186, 196, 205, 210, 241, 318, 319, 350, 351, 352, 370, 387, 405, 411, 412, 414, 415, 416, 552, 558, 560, 561, 562, 565, 590, 591, 592, 593, 606, 661, 662, 667, 669, 671, 677, 678, 679, 688, 689, 836, 871, 880, 881, 907, 909, 912, 915, 917, 939, 1000, 1001, 1006, 1014, 1018, 1020, 1036, 1038, 1039, 1045, 1052], "frequent": [73, 135, 181, 271, 278, 282, 351, 372, 375, 415, 552, 592, 633, 857, 880, 881, 884, 896, 994, 996, 1004, 1018, 1024, 1052], "frequentist": 529, "fresh": [539, 1024, 1044], "fresh_restart": 539, "fresh_restarts_max_it": 539, "freund": [414, 554, 555], "fri": [44, 150, 186, 370], "frid": [1028, 1037], "friedman": [2, 138, 139, 149, 267, 409, 411, 414, 478, 517, 518, 519, 521, 559, 560, 561, 566, 595, 596, 837, 854, 915, 916, 918, 998, 1000, 1005, 1011, 1020], "friedman2001": 414, "friedman2002": 414, "friedman_ms": [559, 560, 561, 566, 916, 918, 1020, 1050, 1051], "friend": [421, 1038], "friendli": [121, 363, 375, 383, 412, 900, 1016, 1017, 1023, 1024], "fring": [86, 407], "fritsch": [0, 397, 1034, 1035, 1037], "fritzk": 1049, "fro": [412, 539, 541, 548, 696, 1000], "fro_2": [664, 666], "frobeniu": [55, 124, 443, 447, 459, 469, 470, 471, 472, 473, 474, 475, 476, 532, 538, 539, 541, 546, 547, 548, 1000, 1041], "frobenius_norm": 691, "from": [0, 2, 38, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 184, 185, 186, 188, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 315, 318, 319, 320, 321, 322, 323, 324, 325, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 358, 362, 364, 367, 368, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 388, 389, 390, 392, 393, 398, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 927, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 960, 962, 964, 965, 966, 967, 968, 970, 972, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 993, 994, 996, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1022, 1023, 1024, 1025, 1028, 1030, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "from_dtyp": [44, 144, 262, 324, 387, 414, 562, 563, 1051], "from_estim": [46, 49, 63, 65, 67, 68, 71, 90, 137, 140, 150, 151, 152, 156, 186, 203, 219, 224, 243, 248, 250, 261, 262, 265, 270, 271, 275, 278, 281, 291, 296, 299, 313, 317, 318, 319, 320, 322, 323, 324, 325, 335, 336, 337, 338, 340, 341, 343, 355, 382, 405, 438, 634, 635, 636, 700, 701, 703, 704, 705, 721, 730, 785, 787, 790, 791, 792, 809, 826, 999, 1004, 1011, 1031, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "from_predict": [44, 53, 69, 108, 155, 185, 247, 264, 275, 277, 320, 328, 350, 382, 438, 634, 700, 701, 703, 704, 705, 721, 730, 785, 787, 790, 791, 792, 1004, 1031, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "frombuffer_empti": 1041, "fromkei": [269, 922], "fromnumer": 381, "front": 1041, "frontal": 370, "frontend": 381, "frontier": [49, 224, 294, 338, 1010], "frozen": [2, 64, 167, 262, 326, 437, 612, 1025], "frozen_clf": 612, "frozenestim": [2, 62, 63, 64, 166, 182, 262, 282, 325, 377, 405, 406, 437, 516, 661, 712, 802, 833, 1025, 1053], "frozenestimatorfrozenestim": 64, "frsi": 1042, "fruit": [375, 1005], "fr\u00e9minvil": [1051, 1052], "fs1995": 414, "ftfy": 415, "ftorres16": [1048, 1049], "ftp": [165, 372, 685, 686], "ftwo_scor": [745, 1004], "fu": [661, 1038], "fuck": [1046, 1047], "fuction": 987, "fuent": [1035, 1036], "fugled": 1051, "fujikawa": 1041, "fukatani": 1041, "fulfil": [375, 407, 414, 803, 806, 807, 817, 867, 871, 1000], "full": [0, 2, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 184, 185, 186, 187, 188, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 362, 363, 364, 368, 370, 373, 375, 377, 380, 383, 387, 389, 390, 393, 403, 407, 409, 411, 412, 415, 421, 424, 430, 431, 441, 445, 447, 449, 459, 488, 489, 492, 493, 497, 498, 501, 502, 503, 504, 505, 506, 508, 511, 536, 538, 542, 551, 560, 561, 568, 569, 635, 651, 653, 657, 661, 662, 672, 683, 724, 726, 731, 748, 749, 751, 753, 754, 756, 788, 793, 794, 800, 801, 814, 844, 939, 993, 1000, 1003, 1006, 1007, 1011, 1014, 1017, 1024, 1034, 1038, 1040, 1042, 1044, 1045, 1047, 1048, 1050, 1051, 1052, 1053], "full_data": 192, "full_lik": 99, "full_model": 290, "full_scor": 181, "fulli": [53, 80, 89, 142, 147, 362, 369, 370, 375, 389, 407, 413, 414, 416, 443, 447, 558, 559, 565, 566, 915, 916, 917, 918, 919, 921, 994, 1000, 1009, 1017, 1023, 1047, 1048], "fullpap": 1017, "fultz": 1047, "fun": [419, 534, 1028], "fun_arg": [419, 534], "func": [51, 108, 140, 185, 193, 228, 301, 375, 408, 465, 702, 871, 1014, 1038, 1040, 1042, 1043, 1051, 1052], "func_metr": 631, "func_min": [613, 614], "funcformatt": 293, "function": [2, 4, 28, 44, 45, 46, 47, 48, 53, 55, 59, 60, 65, 73, 81, 87, 88, 89, 91, 93, 100, 103, 104, 105, 108, 121, 124, 126, 127, 130, 133, 140, 141, 144, 145, 146, 147, 148, 149, 150, 161, 164, 165, 167, 169, 172, 173, 174, 175, 176, 177, 181, 182, 184, 185, 186, 188, 191, 192, 195, 196, 203, 204, 206, 208, 210, 211, 216, 217, 218, 223, 226, 227, 228, 230, 238, 240, 243, 244, 247, 248, 250, 251, 258, 260, 262, 266, 268, 269, 270, 271, 276, 277, 281, 283, 285, 288, 303, 306, 308, 315, 317, 318, 320, 321, 323, 325, 326, 331, 333, 336, 337, 338, 339, 340, 341, 343, 346, 348, 350, 351, 355, 358, 362, 363, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 387, 388, 389, 393, 398, 401, 402, 403, 405, 406, 407, 408, 409, 410, 412, 413, 415, 416, 418, 419, 422, 424, 426, 429, 430, 431, 437, 440, 443, 444, 445, 447, 448, 450, 452, 454, 457, 458, 459, 460, 461, 464, 465, 468, 469, 471, 472, 474, 478, 488, 489, 491, 493, 496, 497, 498, 504, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 573, 577, 583, 584, 590, 591, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 606, 609, 610, 611, 613, 614, 618, 622, 623, 625, 626, 630, 631, 634, 635, 636, 637, 638, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 690, 691, 692, 693, 694, 695, 696, 697, 701, 702, 703, 705, 706, 707, 709, 714, 715, 719, 722, 724, 725, 726, 727, 731, 735, 737, 738, 741, 743, 744, 745, 753, 758, 760, 764, 765, 766, 768, 771, 774, 777, 781, 782, 783, 784, 785, 786, 788, 792, 795, 796, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 814, 815, 817, 818, 819, 820, 821, 822, 823, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 841, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 876, 877, 879, 883, 884, 885, 886, 887, 888, 891, 893, 896, 899, 900, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 922, 931, 940, 942, 943, 944, 945, 950, 951, 962, 963, 969, 970, 973, 974, 977, 978, 987, 992, 993, 994, 995, 997, 999, 1001, 1002, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1017, 1018, 1020, 1023, 1024, 1025, 1026, 1030, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053], "functiontransform": [2, 44, 103, 140, 210, 228, 332, 401, 464, 465, 1014, 1039, 1040, 1042, 1047, 1048, 1049, 1051, 1053], "functiontransformerfunctiontransform": 140, "functool": 228, "fundament": [73, 83, 113, 203, 351, 379, 387, 388, 410, 497, 539, 541, 548, 711, 1000, 1004], "funder": 0, "fung": 411, "funnel": [46, 494, 495], "funni": 103, "furlanello": 746, "furrer": 1051, "further": [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 63, 78, 104, 110, 117, 121, 138, 143, 145, 164, 169, 174, 185, 187, 192, 196, 230, 235, 244, 262, 265, 268, 269, 275, 322, 339, 351, 357, 362, 375, 387, 389, 401, 406, 407, 409, 412, 414, 415, 417, 444, 452, 462, 516, 533, 536, 584, 617, 625, 631, 661, 662, 669, 670, 671, 679, 680, 681, 694, 698, 740, 777, 781, 784, 795, 796, 843, 849, 850, 857, 858, 885, 887, 907, 909, 912, 951, 1003, 1004, 1006, 1007, 1008, 1010, 1012, 1014, 1018, 1019, 1043, 1047], "furthermor": [44, 53, 73, 141, 186, 187, 247, 248, 250, 288, 350, 351, 362, 364, 382, 407, 412, 414, 415, 563, 592, 608, 622, 707, 739, 758, 760, 798, 907, 1000, 1012, 1037, 1041], "fuse": [376, 1040, 1050], "fusion": 387, "futur": [0, 53, 174, 211, 250, 320, 323, 375, 379, 383, 389, 390, 401, 411, 415, 497, 535, 638, 973, 1005, 1019, 1020, 1028, 1031, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "futurewarn": [375, 383, 1041, 1042, 1043, 1045, 1047, 1050, 1051, 1053], "fuxin": 645, "fw": 691, "fwe": 594, "f\u00e9lix": [1034, 1036, 1037, 1038, 1042], "g": [0, 26, 44, 48, 50, 52, 62, 63, 64, 65, 69, 87, 89, 99, 103, 114, 117, 128, 135, 138, 146, 147, 170, 171, 172, 177, 181, 184, 185, 195, 199, 210, 211, 212, 214, 228, 235, 243, 244, 253, 262, 268, 272, 273, 279, 287, 294, 313, 325, 331, 345, 346, 352, 358, 362, 367, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 387, 389, 398, 401, 403, 405, 407, 409, 411, 412, 414, 415, 416, 417, 419, 437, 443, 444, 447, 449, 464, 465, 482, 483, 484, 504, 529, 532, 534, 535, 537, 538, 542, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 583, 584, 590, 591, 592, 593, 595, 596, 599, 606, 613, 614, 620, 625, 626, 633, 636, 637, 638, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 689, 693, 695, 700, 723, 731, 741, 743, 766, 781, 788, 791, 802, 804, 805, 806, 807, 809, 810, 812, 821, 825, 826, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 854, 856, 857, 858, 859, 863, 864, 865, 867, 870, 872, 873, 874, 877, 879, 880, 883, 885, 886, 887, 888, 890, 892, 893, 894, 895, 896, 897, 898, 902, 903, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 950, 951, 963, 993, 994, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1014, 1018, 1019, 1020, 1024, 1027, 1028, 1034, 1038, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "g0g0gadget": 1044, "g2015": 1011, "g_": 407, "g_i": [414, 652], "g_j": [651, 672, 683], "ga": 0, "gaaca": 177, "gaatattaggccga": 387, "gabor": 1048, "gabriel": [1042, 1043, 1044, 1047, 1048], "gael": [0, 396, 1022, 1024, 1028, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "gaido": 1043, "gaidon": 1034, "gain": [2, 87, 150, 232, 275, 288, 290, 324, 325, 329, 350, 351, 357, 374, 381, 383, 387, 414, 497, 533, 558, 562, 563, 565, 729, 759, 800, 801, 836, 915, 917, 1005, 1009, 1017, 1020, 1037, 1041, 1044], "gain_matrix": 262, "galleri": [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 184, 185, 186, 187, 188, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 370, 375, 377, 389, 393, 400, 1025, 1034, 1038, 1041], "galli": 1046, "gallopoulo": 412, "galvez": 1039, "gambl": 52, "gameiro": 1048, "gamma": [2, 44, 45, 46, 47, 49, 51, 68, 69, 126, 156, 190, 224, 237, 242, 243, 266, 268, 270, 273, 279, 319, 328, 329, 331, 333, 336, 338, 339, 342, 343, 345, 348, 410, 412, 414, 417, 452, 536, 563, 622, 623, 642, 643, 644, 646, 647, 648, 651, 683, 688, 694, 727, 750, 755, 762, 769, 778, 779, 780, 800, 814, 817, 902, 903, 904, 909, 910, 911, 912, 913, 993, 996, 1000, 1002, 1017, 1019, 1034, 1035, 1037, 1038, 1039, 1041, 1042, 1044, 1045, 1048, 1049, 1050], "gamma_": [536, 1050], "gamma_0": [253, 259], "gamma_2d_rang": 339, "gamma_bound": 623, "gamma_k": 410, "gamma_rang": 339, "gammaregressor": [2, 228, 318, 321, 326, 683, 1000, 1045, 1048, 1049, 1053], "gandenberg": 1043, "ganesh": [1039, 1051], "ganevgv": 1044, "gangesh": 1046, "gangwar": 1041, "ganiev": [1039, 1040, 1041], "ganssl": 1041, "gap": [44, 53, 150, 350, 370, 411, 471, 472, 478, 590, 649, 650, 655, 656, 663, 664, 665, 666, 684, 687, 824, 915, 916, 917, 918, 1000, 1001, 1042, 1046, 1048], "garagecar": [144, 155], "garagefinish": 144, "garagetyp": 155, "garageyrblt": 108, "garbag": 1046, "garcia": 1047, "garc\u00eda": [1043, 1044, 1049], "gardin": 369, "gardner": [1042, 1043], "garg": [1044, 1045], "gargsya": 1044, "gari": [370, 1041], "garret": 1038, "garreta": [1036, 1037], "garrett": 1038, "garri": 372, "garriga": [274, 411, 832], "gasmi": 1048, "gaspari": 1053, "gasquez": 1041, "gate": [372, 1047], "gather": [321, 323, 383, 390, 407, 1014, 1028], "gatsbi": 1017, "gaug": 185, "gaull": 767, "gaurav": [1042, 1043, 1044, 1045, 1046, 1048], "gauravahlawat": [1042, 1043], "gaussian": [2, 8, 20, 29, 44, 45, 47, 49, 65, 67, 68, 71, 80, 81, 82, 89, 91, 95, 99, 110, 111, 112, 113, 114, 119, 122, 123, 124, 128, 130, 136, 137, 143, 147, 151, 153, 181, 192, 195, 196, 198, 201, 220, 221, 222, 223, 237, 241, 243, 255, 256, 279, 293, 298, 301, 303, 311, 312, 333, 336, 343, 344, 348, 367, 371, 377, 380, 389, 407, 409, 412, 413, 419, 452, 469, 470, 471, 472, 473, 474, 475, 476, 497, 505, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 525, 526, 531, 533, 545, 550, 551, 554, 564, 613, 614, 616, 617, 618, 620, 621, 622, 625, 626, 628, 630, 646, 647, 675, 680, 683, 706, 727, 744, 755, 779, 800, 801, 803, 817, 842, 843, 844, 845, 846, 847, 848, 852, 883, 887, 895, 899, 900, 901, 998, 1000, 1001, 1002, 1010, 1025, 1026, 1028, 1029, 1030, 1034, 1035, 1037, 1038, 1040, 1041, 1042, 1044, 1046, 1048], "gaussian_filt": [54, 81, 82, 88], "gaussian_process": [2, 67, 68, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 182, 389, 417, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 646, 1005, 1025, 1037, 1040, 1041], "gaussianhmm": 1034, "gaussianmixtur": [2, 80, 91, 254, 255, 256, 257, 258, 259, 413, 800, 1003, 1040, 1042, 1043, 1047, 1048, 1050, 1052], "gaussianmixturegaussianmixtur": 258, "gaussiannb": [2, 62, 63, 65, 68, 157, 270, 358, 405, 414, 437, 570, 842, 843, 844, 846, 868, 998, 1005, 1006, 1038, 1039, 1040, 1042, 1047, 1050], "gaussiannois": 377, "gaussianprocessclassifi": [2, 67, 68, 170, 171, 172, 173, 177, 389, 417, 614, 622, 623, 625, 626, 1005, 1040, 1042, 1044, 1048], "gaussianprocessregressor": [2, 169, 174, 175, 176, 177, 178, 417, 613, 616, 617, 618, 619, 620, 624, 627, 628, 646, 1005, 1037, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "gaussianprocessregressorifittedgaussianprocessregressor": 174, "gaussianrandomproject": [2, 900, 1016, 1035, 1048, 1050, 1051], "gauthier": 1048, "gauz": 1042, "gave": [65, 405, 803, 806, 807, 817, 874], "gavin": [631, 994], "gaynor": 401, "ga\u00ebl": [390, 1028], "gb": [158, 414, 554, 636], "gbc": 358, "gbdt": [140, 186, 262, 317, 318, 323, 380, 414], "gbdt_appli": 140, "gbdt_applyfunctiontransform": 140, "gbdt_cst": 318, "gbdt_leaves_yield": 140, "gbdt_model": 140, "gbdt_no_cst": [152, 318], "gbdt_pipelin": 155, "gbdt_with_monotonic_cst": 152, "gbdt_with_monotonic_cst_df": 152, "gbgradientboostingregressor": 158, "gbm": [146, 414, 1037], "gbm_early_stop": 145, "gbm_full": 145, "gbp": 1028, "gbr": 147, "gbr_l": 147, "gbrt": [44, 53, 210, 414], "gbrt_mean_poisson": 53, "gbrt_median": 53, "gbrt_percentile_5": 53, "gbrt_percentile_95": 53, "gbrt_predict": 44, "gbt": 362, "gc": 50, "gca": [48, 80, 96, 117, 123, 172, 215, 219, 221, 237, 250, 272, 296, 298, 309, 335, 337, 340, 341, 1011, 1031], "gcc": [373, 376, 381, 387], "gcf": [48, 1011], "gcv": [676, 678], "gcv_mode": [676, 1036], "gd": [52, 158], "gdb": [376, 378, 1027], "gdex1": 1044, "ge": [52, 995, 1006, 1046], "ge0": 1020, "gear": 1022, "geb": 58, "gebremichael": [1049, 1050], "gedeck": 1041, "geevarghes": 1049, "gefel": 1004, "gegr": 415, "gei": 1036, "geiger": [1051, 1052], "geist": 372, "gelavizh": 1045, "gelder": 1045, "gemm": 1052, "gen": 784, "gen_batch": [2, 384, 955], "gen_cov": 112, "gen_even_slic": [2, 210, 384, 954], "gender": [249, 880, 1014], "gender_femal": 880, "gender_mal": 880, "gene": [177, 369, 404, 451, 514, 595, 596, 854, 887], "gener": [0, 2, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 60, 63, 64, 65, 66, 67, 68, 69, 70, 73, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 90, 92, 93, 94, 95, 96, 99, 103, 104, 105, 106, 107, 108, 111, 113, 116, 117, 118, 121, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 160, 162, 163, 165, 167, 170, 171, 172, 173, 174, 177, 180, 181, 184, 185, 186, 187, 188, 190, 194, 195, 197, 198, 199, 200, 201, 202, 204, 206, 207, 208, 209, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 259, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 285, 287, 288, 290, 291, 292, 293, 294, 296, 297, 298, 299, 301, 303, 304, 305, 308, 309, 310, 311, 312, 313, 314, 315, 317, 319, 320, 321, 322, 323, 324, 325, 326, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 350, 351, 352, 354, 355, 356, 357, 362, 363, 367, 368, 370, 372, 376, 377, 378, 379, 380, 381, 383, 384, 387, 388, 401, 404, 405, 407, 411, 413, 415, 416, 417, 419, 423, 428, 430, 437, 440, 443, 446, 447, 449, 452, 454, 458, 459, 460, 462, 464, 465, 467, 469, 472, 474, 482, 483, 484, 488, 491, 493, 496, 497, 498, 504, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 537, 539, 541, 542, 544, 545, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 584, 585, 586, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 609, 610, 613, 614, 617, 618, 621, 622, 623, 625, 626, 630, 631, 632, 633, 635, 636, 637, 638, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 672, 673, 674, 675, 676, 678, 680, 681, 682, 683, 688, 689, 692, 693, 694, 695, 696, 697, 698, 704, 707, 709, 720, 724, 726, 727, 740, 746, 760, 781, 784, 788, 796, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 837, 838, 839, 840, 841, 847, 848, 850, 852, 853, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 870, 871, 872, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 892, 893, 895, 896, 897, 898, 899, 900, 907, 908, 909, 910, 912, 913, 916, 918, 919, 920, 921, 944, 945, 946, 950, 951, 954, 955, 968, 972, 974, 977, 992, 993, 994, 996, 998, 999, 1001, 1003, 1004, 1005, 1007, 1009, 1010, 1011, 1012, 1016, 1017, 1019, 1020, 1025, 1026, 1027, 1028, 1030, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053], "generalis": [791, 1004], "generaliz": [343, 414], "generate_data": [47, 70], "generate_dataset": 50, "generate_missing_valu": 150, "generate_onli": [944, 1044, 1053], "generate_synthetic_data": 54, "generickernelmixin": [177, 1044], "genericunivariateselect": [2, 416, 597, 598, 600, 601, 602, 604, 1048, 1050, 1051], "generos": 375, "genesi": [1048, 1050], "genet": 1023, "gennaro": 1053, "genoa": 372, "genom": [59, 514, 1023], "genotyp": 369, "gensim": 1023, "gentil": [372, 1046], "gentli": 412, "genvalen": [1046, 1047, 1048, 1049, 1050], "geodes": [230, 691, 1001], "geoff": [838, 1005], "geoffrei": [864, 865, 1008, 1045, 1046, 1047, 1048, 1050], "geograph": [44, 51, 301, 370, 499], "geometr": [123, 407, 691, 707, 734, 760, 1001, 1042], "geometri": [75, 407, 1001, 1007], "geomspac": 323, "georg": [46, 370, 407, 1040, 1046, 1047, 1048, 1049], "georgi": [1042, 1045], "georgiamaydai": 1049, "geospati": [301, 413], "geovan": [1047, 1048], "geq": [241, 405, 412, 414, 1000, 1004, 1014, 1018, 1019], "ger": 415, "gerhard": [46, 370], "german_credit": 262, "germer": [1049, 1050], "geroldcsend": 1047, "geron": [1042, 1047, 1048], "gerstein": 514, "gertrud": 1041, "gertz": 450, "gervai": [1036, 1037], "gesa": 1046, "gesdd": 951, "gessei": 1053, "gesvd": 951, "get": [2, 3, 44, 45, 49, 52, 53, 56, 58, 73, 86, 90, 122, 126, 147, 150, 157, 162, 165, 169, 174, 175, 180, 185, 186, 187, 188, 204, 212, 225, 228, 230, 244, 245, 266, 269, 270, 272, 276, 279, 281, 285, 288, 293, 301, 309, 317, 324, 329, 332, 336, 339, 341, 344, 348, 350, 352, 354, 356, 363, 368, 369, 370, 373, 375, 376, 377, 378, 380, 381, 382, 389, 393, 401, 403, 405, 406, 407, 408, 409, 411, 412, 414, 415, 416, 417, 421, 422, 423, 428, 430, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 462, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 583, 584, 585, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 691, 692, 693, 694, 695, 698, 702, 724, 725, 726, 727, 729, 735, 736, 745, 759, 766, 767, 772, 788, 791, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 828, 829, 830, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 922, 941, 942, 943, 950, 951, 956, 962, 993, 999, 1000, 1001, 1003, 1004, 1014, 1017, 1018, 1019, 1020, 1024, 1031, 1034, 1037, 1040, 1042, 1045, 1047, 1048, 1051], "get_adjacency_matrix": 56, "get_arrai": [847, 848], "get_bin_se": 448, "get_cmap": [63, 65, 344], "get_color": 47, "get_config": [2, 468, 784, 905, 970, 1049], "get_covari": [533, 535, 542], "get_data": [509, 510], "get_data_hom": [2, 48], "get_depth": [915, 916, 917, 918, 1043], "get_feature_nam": [320, 1042, 1043, 1045, 1046, 1047], "get_feature_names_out": [2, 55, 58, 185, 187, 320, 350, 351, 352, 370, 377, 389, 408, 415, 423, 428, 431, 442, 443, 445, 447, 449, 464, 467, 482, 483, 484, 485, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 567, 568, 569, 570, 571, 583, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 630, 631, 632, 633, 638, 641, 642, 643, 644, 645, 691, 692, 695, 851, 856, 859, 863, 866, 867, 870, 871, 872, 873, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 1014, 1047, 1048, 1049, 1050, 1051, 1052], "get_figur": 135, "get_full_scor": 181, "get_height": [48, 145], "get_impute_it": 181, "get_impute_knn_scor": 181, "get_impute_mean": 181, "get_impute_zero_scor": 181, "get_indic": [58, 422, 451, 453], "get_initial_mean": 256, "get_legend_handles_label": [150, 203, 243, 270, 275], "get_lin": 304, "get_metadata_rout": [244, 421, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 583, 584, 585, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 612, 613, 614, 630, 631, 632, 633, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 691, 692, 693, 694, 695, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 959, 960, 961, 962, 963, 1004, 1051], "get_metr": 702, "get_minibatch": 48, "get_n_cal": [847, 848], "get_n_leav": [915, 916, 917, 918, 1043], "get_n_split": [389, 804, 805, 808, 810, 811, 812, 813, 816, 818, 819, 820, 821, 822, 823, 824], "get_nam": 310, "get_output_feature_nam": 1048, "get_param": [269, 378, 389, 417, 421, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 583, 584, 585, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 691, 692, 693, 694, 695, 800, 801, 802, 803, 806, 807, 817, 825, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 993, 1044, 1045, 1046, 1048, 1049], "get_precis": [469, 470, 471, 472, 473, 474, 475, 476, 533, 535, 542], "get_redirect": 56, "get_routing_for_object": [2, 244, 960], "get_scor": [2, 324, 389, 736, 1041, 1050], "get_scorer_nam": [2, 406, 735, 1004, 1048, 1051], "get_scores_for_imput": 181, "get_shap": [58, 422, 451, 453], "get_stop_word": [590, 591, 593], "get_submatrix": [422, 451, 453], "get_subplotspec": 382, "get_support": [161, 165, 319, 583, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 1036], "get_tag": 2, "get_tree_stat": [847, 848], "get_untrusted_typ": 401, "get_width": [48, 145], "get_x": [48, 145], "get_xaxi": [253, 298, 308], "get_xlim": [112, 206, 215, 308], "get_xticklabel": 279, "get_yaxi": [298, 308], "get_ybound": 87, "get_ylim": [206, 281, 308, 309], "getattr": [44, 48, 262, 308, 377, 389, 1050], "getgaurav2": 1044, "getmoredataget": 395, "gettempdir": 1007, "getter": [469, 470, 471, 472, 473, 474, 475, 476, 595, 596, 599], "geurt": [414, 556, 557, 558, 559, 566, 567, 917, 918], "gewili": [1049, 1050], "gh": 375, "ghahramani": 902, "gharibi": 1044, "ghg": 1040, "ghislain": 1046, "gholdman1": 1045, "ghorai": 1042, "ghosh": [0, 397, 407, 1034, 1035, 1051, 1052], "gia": 1045, "giancarlo": 1048, "gianr": 1049, "gibb": [863, 1009, 1023], "gideon": 1044, "giessel": 1040, "gigant": [1042, 1044, 1049, 1050], "gijsber": 1048, "gil": [326, 362, 363, 376, 1037, 1042, 1043, 1046, 1047, 1051, 1053], "gilad": 1028, "gilberto": 1042, "gilbertson": [1048, 1049], "gilch": 1041, "gile": [1037, 1038], "gill": [0, 397, 1034, 1035, 1036, 1037, 1038, 1039, 1040], "gilliam": 1041, "gilmor": 1038, "gim": 1046, "gini": [65, 188, 210, 228, 249, 280, 319, 554, 555, 558, 559, 560, 561, 565, 566, 567, 791, 915, 916, 917, 918, 993, 1012, 1020, 1042, 1043, 1050, 1051], "gionanidi": 1048, "giorgio": [1039, 1040, 1041, 1053], "giorgiop": 1039, "giotto": 1023, "giovanni": [1040, 1042], "gist": [375, 383, 1027], "git": [373, 377, 379, 381, 383, 1027, 1034, 1050, 1052, 1053], "github": [0, 52, 64, 104, 105, 140, 142, 151, 152, 155, 158, 162, 174, 185, 186, 187, 194, 238, 239, 240, 244, 248, 249, 250, 251, 258, 262, 266, 268, 269, 275, 280, 282, 288, 306, 314, 318, 319, 321, 322, 324, 330, 356, 357, 373, 374, 378, 379, 380, 381, 383, 387, 389, 390, 401, 403, 695, 1022, 1023, 1027, 1044], "githubusercont": 52, "gitter": [1041, 1042], "giudic": 1046, "giusepp": [1042, 1043], "give": [2, 44, 52, 53, 54, 62, 63, 75, 80, 83, 94, 96, 98, 103, 104, 108, 123, 146, 169, 174, 178, 180, 185, 186, 200, 202, 210, 211, 212, 237, 259, 262, 265, 270, 277, 290, 294, 297, 306, 320, 321, 325, 326, 332, 362, 364, 370, 372, 374, 375, 377, 381, 383, 387, 388, 389, 390, 395, 401, 404, 405, 407, 408, 409, 412, 414, 415, 417, 419, 432, 446, 447, 449, 451, 459, 472, 497, 500, 504, 534, 539, 550, 551, 552, 553, 558, 559, 565, 566, 567, 595, 596, 599, 609, 610, 641, 650, 664, 668, 679, 723, 733, 739, 742, 797, 803, 806, 807, 817, 828, 829, 830, 832, 847, 848, 849, 850, 851, 853, 854, 855, 857, 858, 859, 884, 885, 887, 888, 896, 1000, 1004, 1007, 1008, 1009, 1011, 1012, 1014, 1018, 1019, 1020, 1023, 1028, 1034, 1038, 1041, 1042, 1044, 1045, 1046, 1048, 1050], "given": [2, 8, 31, 47, 50, 51, 53, 65, 67, 73, 83, 92, 94, 110, 116, 122, 126, 141, 150, 151, 153, 155, 167, 169, 176, 185, 186, 196, 207, 210, 211, 214, 228, 231, 237, 241, 242, 244, 246, 247, 248, 262, 264, 268, 269, 270, 271, 277, 282, 291, 294, 295, 296, 310, 314, 320, 325, 326, 350, 351, 352, 356, 357, 362, 364, 370, 374, 375, 377, 381, 383, 384, 387, 389, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 424, 433, 434, 435, 436, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 456, 458, 459, 460, 461, 463, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 478, 481, 482, 483, 484, 487, 497, 502, 504, 506, 524, 534, 537, 539, 540, 541, 544, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 590, 591, 592, 593, 595, 596, 603, 609, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 634, 635, 638, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 690, 691, 693, 694, 700, 701, 702, 703, 704, 705, 707, 708, 709, 715, 717, 720, 721, 723, 727, 729, 730, 737, 739, 740, 743, 755, 758, 759, 761, 762, 767, 777, 781, 784, 785, 787, 790, 791, 792, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 809, 810, 812, 815, 817, 821, 825, 826, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 864, 865, 866, 867, 868, 869, 870, 872, 873, 874, 877, 878, 879, 880, 881, 882, 883, 884, 886, 887, 893, 894, 896, 899, 900, 901, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 922, 926, 937, 938, 939, 959, 960, 962, 987, 991, 993, 996, 998, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1017, 1018, 1019, 1020, 1028, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053], "gkevinyen5418": 1042, "gkf": 411, "gkiasta": 1047, "gl": [165, 372], "glad": 375, "glanc": [285, 374], "glaser": [1042, 1043], "glass": 370, "glasso": [409, 478], "glaxosmithklin": 52, "gleb": [1047, 1049, 1050, 1051, 1053], "glemaitr": [1043, 1044, 1046], "glen": 1047, "glenn": 1040, "glennfrutiz": 1048, "glibc": 383, "glm": [210, 228, 318, 651, 672, 683, 1000, 1034, 1045], "glm_freq": 228, "glm_pure_premium": 228, "glm_sev": 228, "glmnet": [649, 650, 1034], "glob": 48, "global": [2, 3, 48, 50, 78, 91, 121, 210, 230, 231, 251, 277, 305, 318, 326, 358, 362, 363, 381, 387, 389, 407, 417, 442, 452, 462, 468, 592, 629, 635, 691, 694, 695, 698, 710, 732, 733, 741, 786, 787, 790, 791, 821, 888, 903, 905, 973, 993, 1001, 1004, 1010, 1014, 1020, 1028, 1042, 1049, 1053], "global_dtyp": 363, "global_random_se": 363, "globular": [96, 407], "glorot": [864, 865], "glossari": [2, 358, 375, 377, 381, 418, 419, 437, 440, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 457, 458, 459, 460, 461, 462, 464, 467, 469, 472, 474, 488, 491, 493, 496, 498, 504, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 585, 586, 596, 604, 609, 610, 613, 614, 630, 635, 637, 642, 643, 644, 645, 649, 650, 652, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 674, 675, 676, 677, 678, 679, 680, 681, 682, 690, 691, 692, 693, 694, 695, 696, 697, 698, 704, 777, 781, 784, 796, 800, 801, 803, 804, 805, 806, 807, 808, 809, 815, 817, 818, 819, 820, 821, 822, 823, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 849, 850, 852, 853, 855, 856, 857, 858, 860, 861, 863, 864, 865, 866, 869, 872, 884, 888, 896, 899, 900, 902, 903, 907, 908, 909, 912, 915, 916, 917, 918, 923, 927, 950, 951, 974, 977, 993, 994, 1000, 1042], "glu": [165, 372], "glushchenkov": 1048, "gl\u00f2ria": [1047, 1049], "gm": 801, "gmil": 370, "gmm": [80, 93, 182, 252, 254, 257, 258, 259, 505, 513, 801, 822, 1003, 1025, 1034, 1035, 1038, 1039, 1040], "gmm_": 1035, "gmm_bic_scor": 258, "gmmgmm": 395, "gmmhmm": [1034, 1035], "gnb": [62, 63, 65, 157, 414, 570, 1006], "gnb_isoton": 63, "gnb_sigmoid": 63, "gneit": 1004, "gneiting2007": 1004, "gneiting2009": 1004, "gneiting2014": 1004, "gnu": 373, "go": [0, 2, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 184, 185, 186, 187, 188, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 370, 375, 379, 380, 384, 390, 393, 408, 412, 414, 416, 443, 562, 563, 723, 886, 928, 954, 955, 1014, 1020, 1024, 1045], "goadrich": 1004, "goal": [50, 56, 59, 65, 86, 91, 117, 150, 180, 186, 190, 210, 225, 228, 246, 247, 262, 265, 266, 326, 350, 363, 364, 370, 377, 380, 381, 389, 390, 392, 398, 412, 416, 543, 549, 592, 595, 742, 1004, 1007, 1009, 1010, 1018, 1019, 1020, 1028, 1042], "god": [58, 350, 351], "godbol": 786, "goe": [44, 73, 140, 185, 357, 375, 414, 471, 472, 478, 558, 559, 565, 566, 567, 915, 916, 917, 918, 1014, 1018], "goetz": [1041, 1042], "goh": 1051, "gohlk": 1039, "goix": [0, 1038, 1040, 1041, 1042, 1043], "gold": [70, 205, 211, 213, 216, 220, 224, 227, 254, 259, 275, 294, 338, 381], "goldbaum": [1052, 1053], "goldberg": [856, 1007], "goldfarb": 1000, "goldman": 52, "goldstein": [186, 1011], "goldszmidt": 1016, "gollonet": [0, 397], "goltermann": 1046, "golub": [535, 845, 887], "golubin": 1041, "gome": [1047, 1048, 1052], "gomez": [1042, 1049, 1051], "gommer": [1037, 1040, 1041, 1049, 1050, 1052, 1053], "goncalo": [1041, 1042], "gone": [1034, 1035], "gonthier": 1045, "goo": [165, 372], "good": [44, 49, 59, 63, 65, 76, 80, 81, 83, 86, 87, 89, 92, 107, 113, 117, 130, 141, 143, 146, 147, 150, 170, 174, 180, 185, 196, 200, 210, 211, 216, 225, 235, 237, 241, 244, 247, 254, 256, 261, 262, 268, 274, 281, 306, 313, 314, 319, 325, 328, 333, 339, 350, 351, 358, 362, 363, 364, 374, 376, 377, 378, 381, 383, 387, 389, 404, 405, 407, 409, 411, 412, 414, 415, 416, 417, 437, 439, 444, 535, 560, 562, 563, 592, 633, 643, 650, 651, 659, 661, 662, 664, 672, 683, 693, 697, 726, 734, 745, 767, 832, 901, 926, 951, 993, 999, 1000, 1001, 1004, 1005, 1007, 1008, 1009, 1011, 1012, 1014, 1018, 1019, 1020, 1024, 1028, 1040], "goodby": 375, "goodman": [1034, 1039], "googl": [0, 56, 387, 407, 442, 951, 1022, 1034], "gool": 1004, "gorb": 1046, "gordon": [58, 1040, 1044, 1046, 1048], "gorelli": [1042, 1043, 1047, 1049, 1052, 1053], "gorgolewski": [0, 397, 1034, 1037], "gorilla": 350, "gorinevski": 1000, "gorodkin": 746, "gorro\u00f1o": [1045, 1047, 1048], "got": [175, 244, 275, 358, 380, 552, 652, 668, 1047, 1049, 1051, 1053], "gotten": [1000, 1014], "gou": 407, "gouillart": 1034, "goupil": [0, 359], "gov": [56, 372], "govern": [185, 358, 362, 375, 389, 1028], "govin": 1040, "go\u0144da": 1049, "gp": [172, 177, 417, 613, 614, 625, 1040], "gp_fix": 170, "gp_opt": 170, "gpapadok": [1044, 1048], "gpassino": 1038, "gpc": [2, 67, 68, 137, 143, 153, 168, 174, 175, 177, 182, 220, 221, 222, 223, 243, 257, 303, 311, 333, 344, 348, 505, 613, 614, 616, 617, 622, 623, 625, 626, 706, 744, 1025, 1026, 1030, 1044], "gpc_rbf_anisotrop": 171, "gpc_rbf_isotrop": 171, "gperftool": 378, "gplearn": 1023, "gpr": [2, 168, 169, 170, 176, 178, 182, 497, 613, 614, 616, 617, 618, 619, 624, 625, 626, 627, 628, 1025, 1026, 1030, 1044], "gpr_model": 178, "gprof": 378, "gpu": [322, 325, 403, 1008, 1024, 1051], "gr": 900, "grab": 375, "gracefulli": [1037, 1038], "grad": [381, 1028], "gradd": 381, "grade": 1004, "gradi": 1044, "gradient": [2, 14, 47, 53, 81, 100, 104, 134, 135, 136, 139, 140, 142, 152, 155, 158, 174, 175, 176, 182, 187, 188, 191, 193, 198, 207, 212, 233, 237, 242, 267, 269, 294, 304, 308, 309, 312, 314, 321, 324, 338, 389, 406, 407, 417, 452, 462, 466, 467, 488, 490, 497, 502, 504, 521, 554, 555, 560, 561, 562, 563, 565, 566, 588, 613, 614, 615, 616, 617, 618, 619, 622, 623, 624, 625, 626, 627, 628, 634, 635, 637, 638, 642, 651, 652, 661, 662, 671, 672, 675, 677, 679, 680, 681, 683, 690, 695, 697, 698, 744, 745, 751, 753, 793, 803, 806, 807, 808, 824, 830, 833, 863, 864, 865, 868, 880, 881, 911, 977, 1001, 1004, 1007, 1008, 1009, 1010, 1023, 1025, 1026, 1030, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1047, 1049, 1051], "gradient_boost": [140, 1036, 1037, 1043], "gradientboost": 1039, "gradientboostingclassifi": [2, 140, 146, 149, 310, 387, 554, 562, 635, 636, 1005, 1011, 1034, 1035, 1036, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1051], "gradientboostingclassifier__learning_r": 310, "gradientboostingregressor": [2, 47, 145, 147, 148, 155, 158, 362, 380, 387, 555, 563, 635, 636, 1000, 1004, 1005, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1051], "gradientboostingregressorgradientboostingregressor": 158, "gradual": [214, 864, 865, 944, 946, 1018], "graduat": 372, "graham": [1039, 1040], "grai": [46, 54, 81, 82, 84, 85, 87, 121, 124, 149, 165, 208, 210, 228, 241, 245, 246, 275, 305, 372, 412, 494, 495, 503, 522, 1045], "grain": [44, 68, 73, 203, 242, 259, 310, 381, 415, 446, 1024], "gram": [2, 182, 191, 244, 377, 412, 415, 489, 525, 549, 590, 591, 592, 593, 649, 650, 653, 654, 655, 656, 657, 658, 659, 663, 664, 665, 666, 667, 668, 684, 685, 686, 687, 688, 689, 770, 993, 1000, 1014, 1019, 1025, 1034, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1045, 1047, 1048], "gram_test": 1019, "gram_train": 1019, "gramfort": [0, 121, 390, 396, 1028, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "grammar": 375, "grant": [0, 247, 262, 375], "granular": 1053, "grape": 408, "graph": [2, 56, 63, 75, 80, 81, 100, 101, 177, 230, 265, 288, 290, 331, 362, 375, 378, 389, 404, 409, 418, 441, 444, 445, 452, 453, 457, 462, 463, 471, 472, 478, 512, 587, 588, 691, 694, 695, 698, 785, 849, 850, 851, 853, 855, 857, 858, 859, 860, 861, 862, 903, 957, 1001, 1004, 1007, 1009, 1017, 1020, 1023, 1028, 1034, 1041, 1042, 1044, 1047, 1049], "graph_laplacian": 1041, "graph_lasso": [478, 1042], "graph_model": 290, "graph_shortest_path": [384, 1047], "graphic": [8, 58, 113, 186, 332, 350, 351, 352, 370, 381, 407, 409, 412, 795, 796, 800, 837, 919, 1004, 1005, 1011, 1023], "graphical_lasso": [2, 384, 471, 472, 1042, 1050], "graphicallasso": [2, 114, 409, 469, 470, 472, 473, 474, 475, 476, 478, 1042, 1050], "graphicallassocv": [2, 52, 114, 398, 409, 471, 473, 474, 475, 476, 478, 1042, 1046, 1048, 1050, 1052], "graphicallassocvifittedgraphicallassocv": 52, "graphlasso": [471, 1039, 1042], "graphlassocv": [472, 1036, 1042], "graphviz": [919, 1020, 1053], "grasp": [282, 1019, 1024], "grassberg": [609, 610], "grate": 1028, "graviton": 383, "gray_r": [69, 124, 172, 231, 306, 328, 329], "grayscal": 69, "greasemonkei": 383, "great": [89, 184, 185, 208, 358, 375, 387, 412, 767, 1024, 1028, 1034, 1041], "greater": [63, 119, 135, 137, 185, 227, 242, 247, 256, 262, 274, 287, 294, 295, 354, 362, 380, 389, 405, 406, 407, 410, 414, 441, 445, 446, 449, 452, 463, 472, 537, 542, 558, 559, 560, 561, 562, 563, 565, 566, 567, 595, 596, 599, 613, 614, 631, 643, 645, 667, 669, 670, 674, 679, 680, 681, 695, 710, 712, 715, 723, 730, 738, 739, 742, 743, 745, 785, 791, 792, 798, 800, 801, 837, 849, 850, 857, 858, 864, 865, 870, 885, 897, 901, 904, 907, 908, 915, 916, 917, 918, 951, 972, 993, 999, 1000, 1001, 1004, 1005, 1010, 1014, 1019, 1020, 1037, 1042, 1045, 1047, 1048, 1049, 1051], "greater_is_bett": [147, 325, 745, 1004], "greatest": [89, 393, 407, 874, 1042], "greatli": [208, 242, 322, 375, 383, 452, 1007, 1020, 1040, 1048], "greedi": [165, 414, 416, 447, 449, 460, 560, 561, 604, 1000, 1020], "greedili": [117, 165, 407, 411, 416, 460], "greek": [52, 56, 60, 72, 87, 100, 124, 182, 407, 462, 1025], "green": [64, 113, 119, 138, 152, 157, 169, 190, 235, 304, 309, 313, 318, 324, 389, 1005, 1042, 1043, 1045, 1046], "greenhal": 1042, "greg": [1028, 1040, 1041, 1043, 1044], "gregori": [1040, 1044, 1045, 1046, 1047], "gregorystrubel": 1047, "gregov": 1042, "grei": [45, 278, 308, 346, 370], "grep": 375, "greyscal": 306, "grid": [2, 46, 48, 50, 51, 59, 63, 64, 65, 78, 88, 95, 104, 105, 106, 107, 110, 114, 143, 153, 160, 162, 164, 173, 182, 184, 185, 186, 200, 228, 235, 242, 243, 244, 248, 253, 258, 260, 262, 265, 267, 269, 272, 273, 275, 280, 287, 290, 292, 293, 301, 306, 310, 311, 313, 336, 338, 339, 345, 350, 370, 377, 382, 387, 389, 402, 408, 411, 413, 414, 415, 448, 461, 464, 472, 499, 503, 516, 523, 634, 635, 636, 650, 653, 656, 657, 659, 662, 664, 666, 679, 716, 731, 745, 788, 791, 803, 806, 807, 814, 817, 819, 833, 834, 867, 912, 997, 999, 1004, 1007, 1011, 1024, 1025, 1030, 1034, 1037, 1038, 1039, 1041, 1042, 1048, 1050, 1051, 1052, 1053], "grid_encod": 311, "grid_model": 290, "grid_posit": [63, 65], "grid_resolut": [186, 319, 337, 634, 635, 636], "grid_scores_": [1040, 1046, 1047], "grid_search": [107, 141, 249, 258, 266, 276, 324, 408, 1036, 1037, 1038, 1039, 1040, 1041], "grid_siz": [51, 95, 301, 370, 499], "grid_to_graph": [2, 82, 85, 88, 407, 415, 1047], "grid_tograph": 1037, "grid_valu": [186, 636, 1011, 1050], "gridsearch": [88, 110, 279], "gridsearchcv": [2, 44, 88, 102, 104, 106, 107, 110, 128, 141, 182, 243, 249, 258, 260, 262, 266, 267, 268, 269, 273, 276, 279, 285, 290, 292, 306, 310, 319, 323, 324, 326, 339, 343, 358, 363, 377, 387, 389, 398, 403, 408, 411, 414, 417, 421, 503, 521, 541, 542, 577, 601, 609, 656, 706, 745, 814, 817, 867, 877, 907, 915, 993, 1000, 1004, 1008, 1018, 1019, 1025, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1051, 1052, 1053], "gridsearchcvifittedgridsearchcv": [105, 258, 262, 266, 268], "gridsearchcvinot": 249, "gridsiz": 241, "gridspec": [63, 65, 99, 253, 382], "gridspecfromsubplotspec": 382, "griffith": [1042, 1043], "grigorev": 1039, "grigorio": 737, "grime": [692, 696, 1001], "grinsztajn": 1051, "grisel": [0, 390, 396, 1022, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "griva": [1048, 1049], "grlivarea": 144, "grobler": [0, 397, 1034, 1035, 1036, 1037], "groceryheist": 1047, "groenen": [693, 697, 1001], "grok": 487, "groothui": [630, 994], "grother": 372, "ground": [2, 28, 59, 69, 76, 83, 91, 92, 95, 110, 114, 117, 124, 151, 177, 196, 205, 210, 211, 247, 259, 271, 351, 389, 407, 706, 707, 708, 711, 715, 716, 717, 718, 720, 721, 724, 726, 727, 729, 731, 732, 733, 737, 739, 740, 741, 742, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 786, 787, 788, 789, 790, 793, 794, 798, 799, 1004, 1017, 1042], "ground_truth": [89, 295], "group": [0, 2, 52, 73, 76, 89, 92, 94, 157, 186, 188, 210, 231, 244, 259, 263, 314, 324, 330, 351, 357, 370, 377, 380, 389, 390, 398, 407, 413, 414, 415, 432, 446, 496, 590, 591, 593, 596, 721, 791, 803, 804, 805, 808, 809, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 828, 829, 830, 831, 832, 834, 880, 881, 917, 918, 944, 946, 1000, 1001, 1003, 1004, 1005, 1014, 1020, 1021, 1023, 1040, 1041, 1042, 1043, 1046, 1047, 1048, 1050, 1051, 1052, 1053], "group_1": 880, "group_2": 880, "group_3": 880, "group_by_dynam": 174, "group_df": 218, "group_kfold": 804, "group_prior": 263, "groupbi": [44, 150, 186, 218, 228], "groupkfold": [2, 263, 273, 324, 398, 411, 596, 808, 809, 810, 811, 812, 821, 826, 828, 829, 830, 831, 834, 1040, 1047, 1053], "groupshufflesplit": [2, 263, 411, 1040], "grow": [44, 53, 75, 190, 196, 290, 346, 352, 362, 387, 403, 409, 414, 415, 558, 559, 560, 561, 565, 566, 567, 813, 847, 848, 915, 916, 917, 918, 993, 1004, 1007, 1020, 1028, 1037, 1038], "grower": [150, 414, 562, 563], "grown": [372, 414, 554, 555, 556, 557, 558, 559, 565, 566, 915, 916, 917, 918, 1020], "growth": [1004, 1039, 1040], "grumman": 52, "grusak": 1044, "gryllo": [1039, 1042], "gryze": [1036, 1039], "grzegorz": [1041, 1044], "gs_time": 279, "gsh": 279, "gsh_time": 279, "gsiisg": 1049, "gsk": 52, "gss": [411, 805], "gt": [69, 104, 105, 140, 155, 185, 258, 266, 280, 375, 379, 395], "gu": [1045, 1046, 1048], "guan": 1044, "guangguo": 1040, "guarante": [47, 48, 65, 112, 113, 150, 185, 218, 241, 287, 288, 308, 351, 358, 364, 369, 375, 383, 384, 401, 407, 411, 412, 415, 446, 537, 648, 661, 662, 671, 675, 677, 679, 681, 690, 697, 805, 820, 823, 847, 848, 885, 887, 890, 892, 893, 894, 895, 896, 897, 898, 900, 901, 914, 933, 934, 996, 1000, 1001, 1003, 1004, 1007, 1012, 1016, 1020, 1044, 1052], "gubri": [1042, 1043], "gudmalwar": 1046, "gued": 1052, "guerin": [1040, 1041], "guess": [56, 135, 143, 411, 414, 415, 533, 539, 541, 542, 548, 791, 1004, 1018], "guestrin": 414, "guha": 1049, "gui": [1035, 1045], "guid": [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 53, 63, 65, 89, 102, 121, 141, 178, 182, 185, 186, 198, 230, 275, 294, 295, 298, 314, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 373, 374, 375, 380, 381, 382, 383, 388, 389, 390, 395, 398, 408, 414, 418, 419, 420, 421, 424, 430, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 457, 459, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 622, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 700, 701, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 730, 731, 732, 733, 734, 735, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 921, 947, 990, 1004, 1005, 1034, 1035, 1036, 1037, 1039, 1041, 1043, 1044, 1051, 1052, 1053], "guidanc": [387, 417, 1004], "guidelin": [2, 26, 374, 378, 380, 381, 383, 407, 414], "guiel": 495, "guilherm": 1037, "guillaum": [0, 396, 1028, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "guillem": [1043, 1044, 1049], "guillemot": [0, 1040, 1041], "guillermo": 1048, "guiniol": 1041, "guitar": 1049, "guitton": 1046, "guiweb": 1047, "gulati": [1039, 1040, 1041], "gun": [58, 370], "gunduz": 1052, "gunesbayir": [1049, 1050], "gunnar": [536, 951], "guntitat": 1053, "guo": 1047, "guoci": 1041, "gupta": [901, 1016, 1041, 1042, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053], "gustafson": [1049, 1050], "gustav": 1040, "gustavo": [1042, 1043, 1048], "gutierrez": 1044, "guttman": 697, "guyon": [516, 595, 596, 1004], "guyon2015": 1004, "gwulf": [1038, 1039], "gyeongja": 1052, "gz": [48, 379, 393, 509, 510], "gzip": 1034, "g\u00e9ron": 1042, "g\u00f3rski": [1045, 1046], "g\u00f6khan": [45, 412, 536], "g\u00f6n\u00fcl": 1052, "g\u00fcnther": [1047, 1051], "h": [45, 46, 53, 92, 121, 122, 135, 136, 153, 165, 171, 185, 255, 293, 296, 303, 310, 321, 333, 335, 352, 372, 381, 405, 407, 409, 412, 413, 414, 415, 418, 444, 520, 533, 536, 539, 541, 548, 554, 568, 569, 584, 592, 609, 610, 692, 696, 707, 711, 760, 842, 846, 847, 848, 853, 863, 878, 887, 996, 998, 1000, 1001, 1002, 1004, 1006, 1008, 1009, 1018, 1020, 1040, 1045, 1049, 1050, 1051], "h1998": 414, "h2009": 1011, "h4dr1en": 1044, "h5py": 369, "h_": 1000, "h_i": [412, 1009], "h_init": 381, "h_j": 1009, "h_l": 998, "h_m": 414, "h_pad": [121, 143, 355], "h_samples_": 863, "ha": [0, 44, 45, 48, 51, 52, 53, 63, 67, 71, 73, 80, 84, 89, 90, 91, 94, 107, 112, 113, 117, 121, 133, 140, 143, 145, 147, 148, 150, 152, 157, 163, 164, 169, 174, 175, 176, 181, 185, 186, 187, 188, 190, 204, 210, 211, 212, 216, 227, 228, 230, 237, 241, 243, 244, 247, 248, 251, 253, 254, 256, 258, 259, 262, 263, 266, 267, 268, 271, 272, 274, 279, 280, 287, 291, 294, 295, 296, 298, 305, 308, 309, 311, 313, 317, 318, 319, 320, 321, 323, 325, 326, 328, 331, 339, 343, 344, 345, 350, 357, 358, 362, 363, 364, 369, 370, 372, 373, 374, 375, 376, 377, 379, 380, 383, 384, 387, 388, 389, 390, 393, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 419, 432, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 461, 462, 463, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 478, 482, 483, 484, 485, 494, 495, 498, 499, 509, 510, 517, 527, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 612, 613, 614, 622, 630, 631, 632, 633, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 688, 690, 691, 692, 693, 694, 695, 698, 714, 716, 723, 725, 744, 766, 777, 781, 782, 783, 796, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 817, 821, 824, 825, 826, 831, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 867, 870, 871, 872, 873, 874, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 922, 924, 932, 933, 934, 953, 972, 988, 993, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1016, 1017, 1018, 1019, 1020, 1024, 1027, 1028, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "haan": 1043, "haar": [54, 1051], "haas": 1044, "habchi": 1044, "haberland": [1049, 1050], "haberth\u00fcr": 1041, "hack": [48, 50], "had": [44, 49, 82, 147, 150, 174, 244, 308, 314, 320, 358, 375, 376, 383, 398, 415, 418, 444, 994, 1004, 1028, 1034, 1035, 1041, 1042, 1043, 1044, 1045, 1049], "hadamard": 377, "haddad": 1041, "hadrien": [1041, 1044], "hadshirt": 1044, "haenel": 1037, "haesun": [1046, 1049, 1050, 1053], "hafner": 1047, "hagai": 800, "hagberg": 56, "hahn": [1041, 1042], "haiat": 1046, "haidar": [1047, 1048], "hail": 314, "hailei": [1044, 1045], "hain": 370, "haitz": [1045, 1047, 1048], "hakaa1": [1041, 1042], "hal": [548, 661, 761, 762, 1002], "halchenko": [0, 397, 1034, 1035, 1036, 1037, 1040, 1041, 1042, 1043, 1050], "hale": [1036, 1048], "half": [2, 44, 62, 124, 150, 242, 246, 266, 268, 280, 370, 371, 412, 414, 463, 523, 563, 595, 599, 604, 773, 866, 874, 916, 1004, 1007, 1020], "half_cal": 599, "half_selector": 599, "halfbath": 144, "halford": [1042, 1049, 1050], "halkidi": 407, "halko": [412, 536, 542, 545, 950, 951], "hall": [1000, 1041, 1045], "hallock": 1040, "halpert": [695, 1001], "halv": [2, 160, 182, 260, 272, 276, 345, 402, 516, 565, 581, 803, 806, 807, 912, 1025, 1030, 1046], "halvic": 1046, "halvinggridsearchcv": [2, 279, 280, 319, 398, 403, 581, 807, 993, 1046, 1048, 1049, 1051, 1052, 1053], "halvingrandomsearchcv": [2, 147, 280, 319, 398, 403, 581, 806, 993, 1046, 1048, 1049, 1050, 1051, 1052, 1053], "halvingrandomsearchcvifittedhalvingrandomsearchcv": 280, "halwai": 1040, "ham": [2, 47, 450, 457, 583, 702, 706, 712, 737, 744, 781, 782, 783, 799, 1007], "hamada": 1046, "hamdi": [1051, 1052], "hammerbach": 1038, "hamming_loss": [2, 47, 706, 799, 1004, 1036, 1040, 1043], "hammingdist": 702, "hammoudeh": 1043, "hamoumi": 1047, "hampu": 1038, "hamzeh": [0, 1037, 1038], "han": [407, 442, 450, 457, 1034, 1042, 1043, 1047], "hancock": 1044, "hand": [45, 66, 85, 87, 117, 123, 124, 126, 141, 147, 160, 163, 174, 182, 185, 186, 203, 204, 214, 217, 234, 240, 241, 243, 244, 247, 261, 262, 265, 270, 277, 282, 292, 328, 329, 339, 356, 362, 369, 370, 372, 375, 377, 381, 383, 388, 412, 413, 414, 416, 424, 430, 503, 646, 700, 716, 791, 833, 888, 912, 993, 997, 1000, 1004, 1006, 1008, 1012, 1017, 1019, 1025, 1028], "handbook": [723, 743, 1004], "handi": [83, 104, 351, 352, 376, 1050], "handk": 1050, "handl": [0, 2, 44, 49, 104, 141, 144, 148, 150, 151, 155, 190, 196, 203, 243, 244, 262, 270, 275, 277, 285, 287, 288, 295, 314, 317, 324, 350, 352, 357, 362, 367, 369, 375, 376, 377, 384, 387, 389, 414, 415, 417, 497, 545, 579, 583, 584, 590, 591, 593, 613, 638, 649, 650, 655, 661, 662, 663, 664, 665, 671, 678, 679, 681, 684, 723, 791, 871, 880, 881, 907, 908, 912, 919, 923, 952, 960, 963, 1001, 1004, 1005, 1006, 1007, 1010, 1012, 1019, 1020, 1023, 1024, 1028, 1030, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "handle_data": 48, "handle_endtag": 48, "handle_starttag": 48, "handle_unknown": [44, 104, 140, 144, 155, 186, 187, 239, 247, 249, 251, 314, 318, 321, 880, 881, 1014, 1038, 1042, 1046, 1047, 1053], "handler": 1045, "handler_map": 295, "handlerpathcollect": 295, "handletextpad": 355, "handpick": 237, "handprint": 372, "handwritten": [52, 72, 81, 86, 91, 93, 95, 98, 140, 163, 182, 229, 230, 232, 234, 241, 256, 266, 298, 305, 306, 328, 329, 351, 368, 407, 414, 447, 503, 542, 545, 550, 567, 691, 692, 693, 694, 695, 707, 708, 720, 740, 796, 798, 856, 868, 877, 887, 900, 1001, 1007, 1025, 1030], "hang": [375, 1044, 1045], "hanjun": 1053, "hank": 1037, "hanmin": [0, 397, 1041, 1042, 1043, 1044, 1045, 1053], "hann": 1034, "hanna": [1038, 1039, 1045], "hannah": [1044, 1046, 1048], "hannel": [1042, 1043], "hansen": 1042, "hansin": [1048, 1049], "hanu\u0161": 1051, "hanxiang": [682, 1000], "hao": [1045, 1046, 1048, 1049], "haoi": 1051, "haoran": 1042, "haoyin": [1045, 1047, 1048], "happen": [2, 45, 65, 140, 198, 262, 308, 314, 351, 358, 362, 363, 373, 374, 375, 377, 379, 380, 381, 387, 389, 390, 393, 401, 407, 409, 411, 414, 437, 516, 573, 661, 788, 885, 887, 907, 944, 1000, 1004, 1005, 1019, 1024, 1042, 1046, 1047, 1049, 1050, 1051, 1052], "happi": [185, 262, 350, 387, 390, 821, 822], "haqu": [1036, 1037, 1038], "harabasz": [2, 713], "harabaz": 1040, "hard": [49, 210, 237, 241, 268, 270, 364, 374, 387, 389, 406, 407, 412, 415, 535, 542, 570, 679, 909, 910, 911, 912, 913, 1000, 1017, 1019, 1020, 1024, 1043, 1044], "hardcod": [440, 454, 1042], "harder": [277, 278, 312, 370, 374, 377, 383, 387, 407, 516, 562, 563], "hardest": 395, "hardin": 113, "hardli": [89, 609, 610], "hardwar": [58, 332, 352, 362, 363, 370, 373, 387, 393, 401, 403, 1023, 1048, 1049], "hare": 1000, "harfouch": 1050, "harikrishnan": 1036, "harizo": [1040, 1041], "harm": [350, 377, 415, 798], "harmanan": [1051, 1052], "harmon": [44, 73, 351, 407, 536, 542, 732, 733, 739, 786, 798, 1004], "haroldfox": [1042, 1043], "harper": 1041, "harri": [1038, 1040, 1046, 1047], "harsanyi": 1050, "harsh": [424, 437, 469, 550, 551, 552, 554, 556, 558, 560, 562, 565, 568, 570, 613, 661, 669, 671, 677, 678, 679, 802, 825, 835, 836, 837, 838, 842, 843, 844, 845, 846, 849, 854, 857, 864, 902, 903, 907, 909, 912, 915, 917, 1044, 1046, 1049], "harshit5674": 1049, "hart": [372, 998, 1042], "hartong": 1045, "harutaka": 1047, "harvest": 314, "has_fit_paramet": [2, 384], "hasan": 1049, "hasattr": [80, 90, 96, 114, 133, 143, 228, 241, 303, 310, 350, 389, 422, 426, 432, 964, 1044], "haseeb": [1047, 1048], "hash": [2, 48, 53, 134, 182, 351, 352, 362, 364, 367, 375, 378, 387, 414, 515, 545, 558, 567, 583, 584, 591, 643, 842, 968, 996, 1025, 1030, 1035, 1038, 1041], "hashabl": [389, 875, 878, 1015], "hashcode55": 1040, "hasher": [153, 352, 415], "hashingvector": [2, 48, 352, 364, 415, 489, 590, 592, 593, 1035, 1041, 1042, 1043, 1044, 1047], "hashlib": 48, "hasil": 1038, "hasn": 398, "hassaan": [1042, 1043], "hassan": [1047, 1053], "hassen": 1034, "hassoun": 1049, "hasti": [2, 135, 138, 139, 149, 165, 198, 267, 372, 411, 414, 520, 521, 554, 560, 561, 631, 659, 724, 726, 727, 837, 854, 900, 915, 916, 994, 998, 1000, 1005, 1011, 1016, 1018, 1020], "hat": [113, 130, 264, 268, 293, 320, 373, 405, 409, 413, 414, 995, 1000, 1001, 1004, 1006, 1008], "hathidara": 1046, "hatwar": [1042, 1043], "hauck": 1040, "hausamann": [1042, 1043], "haussler": 177, "hav": 395, "have": [0, 2, 26, 44, 45, 47, 48, 49, 51, 52, 53, 54, 62, 63, 64, 65, 73, 75, 78, 79, 81, 82, 84, 87, 89, 91, 94, 96, 98, 99, 103, 104, 110, 112, 117, 119, 126, 135, 142, 143, 144, 145, 147, 150, 161, 162, 165, 169, 170, 174, 175, 176, 181, 184, 185, 186, 187, 188, 190, 192, 196, 210, 211, 212, 214, 228, 234, 237, 239, 244, 245, 247, 248, 254, 255, 256, 258, 261, 262, 268, 269, 271, 274, 275, 281, 282, 283, 285, 288, 290, 291, 294, 295, 308, 313, 314, 315, 317, 319, 320, 324, 326, 329, 330, 331, 336, 342, 343, 344, 346, 350, 351, 357, 358, 362, 363, 364, 369, 370, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 387, 388, 389, 390, 393, 398, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 432, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 487, 493, 495, 496, 497, 509, 510, 515, 524, 525, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 583, 584, 585, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 688, 690, 691, 692, 693, 694, 695, 702, 707, 708, 714, 715, 718, 723, 729, 734, 739, 759, 760, 761, 762, 785, 788, 789, 795, 798, 800, 801, 802, 803, 806, 807, 808, 809, 814, 817, 821, 825, 826, 828, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 892, 893, 895, 896, 897, 898, 899, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 926, 933, 935, 937, 939, 951, 978, 993, 994, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1023, 1024, 1027, 1028, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "havelabeleddatado": 395, "haversin": [2, 301, 413, 702, 765, 767, 1007, 1043, 1046], "haversine_dist": [2, 765, 1043], "haversinedist": 702, "hawaii": 174, "haxbi": 0, "haya": 1048, "hayashi": 1042, "hbgt": 150, "hd": 52, "hdb": [89, 446], "hdbscan": [2, 72, 80, 83, 99, 182, 241, 444, 513, 887, 994, 1023, 1025, 1029, 1030, 1050, 1051, 1052], "hdbscan_min_cluster_s": 80, "hdbscan_min_sampl": 80, "hdf5": 369, "hdl": [165, 372], "hdmetor": 1040, "he": [375, 729, 759, 864, 865, 897, 898, 1004, 1041, 1048, 1049], "head": [0, 53, 64, 104, 174, 185, 198, 200, 228, 251, 258, 314, 317, 322, 375, 383, 396, 412, 1028, 1039, 1040, 1049, 1050, 1051, 1052, 1053], "head_width": 64, "header": [55, 103, 269, 350, 351, 370, 373, 415, 488, 489, 803, 806, 807, 817], "heali": 407, "health": 325, "heap": 450, "heapq": 463, "heard": 375, "heart": 247, "heat": [155, 339, 407, 452, 462, 698], "heatingqc": 155, "heatmap": [186, 188, 192, 196, 279, 322, 339, 635, 1011], "heatmap_kw": 635, "heatmaps_": 635, "heavei": 1042, "heavi": [212, 387, 404, 1024], "heavier": [130, 409, 1000], "heavili": [200, 362, 363, 375, 383, 652, 658, 781, 1021], "heavy_rain": [44, 186], "hebei": 407, "hedlund": 1050, "hedyati": 1038, "hee": [1041, 1044], "heer": 1045, "hegd": 1051, "heidelberg": [174, 407, 412, 536, 699, 729, 759, 1004], "height": [48, 55, 87, 124, 144, 145, 165, 308, 314, 324, 350, 413, 446, 494, 495, 507, 588], "heightpet_catpet_dogf64f64f64": 324, "heikki": 1016, "heilman": [1038, 1039], "heitz": 314, "held": [44, 48, 104, 128, 148, 187, 218, 255, 271, 276, 287, 411, 414, 560, 561, 562, 563, 704, 803, 806, 807, 817, 864, 865, 877, 993, 994, 1003, 1012], "helder": [1038, 1047, 1048], "heldout": 217, "heldout_scor": 146, "helen": 322, "heli": 1041, "hello": [375, 383, 964, 968], "helloifeven": 964, "helm": [1052, 1053], "helmu": 1038, "help": [0, 42, 44, 49, 51, 89, 103, 107, 126, 131, 186, 196, 228, 230, 262, 269, 271, 281, 285, 306, 326, 336, 339, 351, 352, 358, 362, 363, 375, 376, 377, 378, 379, 380, 381, 383, 384, 389, 390, 392, 401, 407, 408, 411, 415, 417, 431, 537, 579, 630, 653, 657, 668, 688, 689, 695, 717, 843, 915, 916, 917, 918, 994, 998, 999, 1001, 1003, 1004, 1006, 1008, 1014, 1015, 1020, 1022, 1023, 1024, 1027, 1028, 1040, 1041, 1042, 1045, 1048, 1052], "helper": [45, 46, 124, 228, 279, 368, 377, 378, 388, 411, 468, 577, 905, 992, 1034, 1041, 1042, 1043, 1047], "helvetica": [919, 921], "heme": 1051, "hempstalk": 1041, "henc": [73, 94, 105, 185, 214, 241, 262, 277, 339, 350, 351, 362, 370, 377, 379, 381, 389, 393, 407, 411, 414, 415, 487, 509, 540, 542, 543, 544, 564, 592, 646, 649, 655, 663, 665, 675, 690, 707, 708, 712, 718, 734, 760, 789, 798, 819, 822, 823, 842, 843, 844, 845, 846, 882, 960, 1001, 1003, 1004, 1005, 1010, 1011, 1014, 1024, 1041, 1042, 1045, 1046, 1048], "hendrik": [0, 397, 1034, 1037, 1038, 1039, 1040], "henri": [1039, 1040, 1041, 1042, 1044, 1045, 1046, 1048, 1049], "henriqu": 1053, "henrymooresc": [1048, 1049], "hepe": [682, 1000], "here": [44, 48, 49, 52, 53, 54, 56, 62, 65, 91, 92, 100, 110, 114, 119, 123, 124, 126, 128, 129, 131, 135, 138, 141, 144, 148, 150, 155, 162, 165, 169, 177, 178, 185, 186, 187, 190, 192, 196, 200, 204, 210, 214, 216, 225, 226, 228, 230, 232, 237, 242, 244, 247, 248, 254, 255, 256, 261, 262, 265, 266, 268, 270, 271, 273, 275, 277, 278, 280, 281, 282, 285, 288, 290, 297, 300, 304, 305, 306, 310, 313, 319, 321, 324, 326, 328, 330, 339, 343, 346, 348, 352, 354, 356, 358, 362, 363, 364, 369, 370, 373, 374, 375, 376, 377, 380, 381, 383, 387, 388, 398, 401, 403, 404, 406, 407, 408, 410, 411, 412, 413, 414, 415, 418, 420, 437, 440, 441, 442, 443, 444, 445, 446, 447, 449, 452, 464, 472, 475, 537, 539, 540, 544, 545, 564, 568, 569, 570, 571, 583, 584, 586, 590, 593, 596, 604, 612, 631, 633, 650, 654, 656, 658, 664, 666, 668, 676, 678, 692, 694, 698, 702, 715, 729, 759, 797, 802, 803, 806, 807, 809, 817, 825, 826, 827, 828, 829, 830, 831, 832, 834, 843, 847, 848, 871, 879, 882, 885, 888, 899, 900, 910, 969, 993, 996, 1000, 1001, 1002, 1003, 1004, 1007, 1010, 1014, 1016, 1017, 1018, 1019, 1023, 1024, 1027, 1028, 1034, 1042, 1047], "hereaft": 390, "hereund": 1010, "herilalaina": [1041, 1042, 1044], "hermano": [1049, 1050], "hermida": [1043, 1047], "hernandez": 1004, "hern\u00e1ndez": 1004, "hero": [409, 420, 475], "herrou": 1048, "hershei": 1004, "hertel": 1051, "herv": 1038, "hervieu": 1034, "herv\u00e9": 1038, "heryanto": 1041, "hesit": 375, "hessian": [230, 231, 232, 414, 562, 563, 651, 661, 662, 672, 683, 692, 696, 1000, 1008, 1029, 1030, 1049, 1053], "hessian_tol": [692, 696], "heterogen": [44, 48, 49, 62, 89, 102, 104, 182, 186, 210, 251, 313, 317, 367, 369, 387, 464, 488, 542, 583, 593, 716, 867, 871, 907, 1001, 1011, 1014, 1023, 1025, 1030, 1038, 1042, 1044, 1045, 1052], "heteroscedast": [121, 128, 147, 212, 412, 883, 895], "heteroschedast": 1004, "heuer": 1037, "heurist": [52, 55, 146, 247, 350, 363, 407, 416, 449, 452, 461, 462, 509, 510, 538, 540, 547, 679, 680, 681, 694, 698, 806, 807, 909, 910, 911, 912, 913, 938, 1001, 1002, 1007, 1018, 1020, 1028, 1034, 1035, 1039, 1043, 1046, 1047], "hexbin": 241, "hexdigest": 48, "hgbdt": 141, "hgbdt_model": 186, "hgbdt_model_without_interact": 186, "hgbdt_preprocessor": 186, "hgbt": [141, 150, 414], "hgbt_cst": 150, "hgbt_no_cst": 150, "hgbt_quantil": 150, "hhchen1105": 1053, "hhu": 1043, "hi": [0, 408, 1004], "hibon": 1041, "hida": [1049, 1050], "hidden": [44, 186, 305, 306, 375, 383, 404, 412, 863, 864, 865, 1008, 1009, 1023, 1034, 1045], "hidden_layer_s": [186, 248, 303, 305, 864, 865, 1008], "hide": [53, 79, 375, 383, 842, 843, 844, 845, 846, 1037, 1042, 1050], "hideaki": 1048, "hierarch": [2, 54, 60, 72, 75, 76, 80, 81, 86, 87, 88, 90, 91, 182, 188, 234, 321, 357, 389, 415, 441, 443, 445, 446, 505, 513, 515, 523, 531, 548, 734, 860, 887, 1021, 1025, 1029, 1030, 1034, 1037, 1038, 1050], "hierarchi": [77, 188, 375, 450, 456, 463, 1009], "higgin": [1051, 1052], "high": [0, 38, 44, 49, 51, 52, 63, 65, 68, 73, 76, 80, 83, 89, 91, 96, 99, 103, 107, 112, 113, 123, 124, 138, 140, 141, 142, 147, 148, 150, 151, 153, 165, 169, 175, 181, 184, 186, 187, 188, 196, 206, 211, 212, 214, 224, 230, 231, 232, 237, 241, 253, 259, 266, 270, 274, 275, 294, 295, 303, 305, 310, 312, 313, 314, 315, 323, 331, 336, 338, 339, 350, 351, 356, 362, 370, 372, 375, 380, 383, 384, 387, 388, 404, 405, 406, 407, 411, 413, 414, 415, 416, 417, 444, 447, 449, 450, 452, 469, 482, 483, 484, 554, 555, 558, 559, 560, 561, 564, 565, 566, 567, 568, 569, 647, 673, 674, 682, 692, 695, 696, 729, 734, 745, 749, 759, 792, 795, 811, 813, 847, 848, 852, 881, 882, 886, 888, 909, 911, 912, 915, 916, 917, 918, 972, 993, 998, 999, 1000, 1001, 1003, 1004, 1007, 1008, 1010, 1012, 1014, 1016, 1019, 1020, 1021, 1023, 1024, 1034, 1035, 1037, 1038, 1042, 1045, 1046, 1047, 1048, 1049], "high_cardin": 314, "high_cardinality_featur": 314, "high_cardinalityindex": 314, "high_i": 206, "high_precision_cv_result": 266, "high_recall_cv_result": 266, "high_x": 206, "higher": [44, 53, 91, 112, 124, 128, 135, 138, 140, 141, 147, 151, 163, 169, 171, 176, 177, 185, 186, 187, 190, 203, 207, 210, 211, 214, 228, 234, 235, 259, 261, 262, 266, 268, 271, 283, 293, 313, 339, 343, 350, 351, 352, 356, 358, 362, 370, 373, 377, 404, 406, 407, 409, 414, 416, 417, 418, 444, 448, 449, 471, 478, 510, 533, 540, 544, 549, 554, 555, 558, 559, 560, 561, 562, 563, 565, 566, 567, 574, 590, 593, 609, 610, 622, 630, 634, 638, 640, 649, 650, 655, 656, 663, 664, 665, 666, 679, 681, 682, 707, 727, 731, 755, 788, 800, 803, 806, 807, 809, 817, 824, 826, 831, 834, 853, 856, 882, 899, 900, 901, 907, 908, 909, 910, 911, 912, 913, 920, 996, 1000, 1001, 1003, 1004, 1007, 1011, 1014, 1018, 1019, 1035, 1040, 1042, 1049, 1051], "highest": [2, 56, 64, 114, 161, 165, 214, 266, 268, 279, 319, 350, 375, 387, 405, 407, 411, 414, 416, 437, 556, 558, 565, 594, 597, 598, 600, 601, 602, 605, 606, 608, 638, 640, 729, 759, 797, 800, 803, 806, 807, 817, 904, 915, 953, 993, 1000, 1004, 1005, 1008, 1018, 1020, 1046], "highest_protocol": 401, "highli": [44, 49, 65, 105, 112, 113, 123, 131, 151, 196, 206, 215, 262, 268, 271, 277, 304, 343, 351, 362, 363, 375, 381, 387, 405, 407, 411, 414, 415, 452, 462, 497, 564, 674, 695, 815, 817, 863, 1000, 1004, 1007, 1008, 1010, 1018, 1019, 1022, 1023], "highlight": [44, 55, 89, 104, 112, 119, 133, 139, 140, 142, 152, 165, 167, 169, 170, 175, 180, 181, 186, 187, 190, 198, 203, 210, 211, 212, 228, 239, 244, 248, 250, 251, 262, 263, 280, 282, 290, 312, 314, 331, 350, 352, 375, 379, 380, 383, 387, 417, 443, 446, 447, 464, 467, 490, 491, 497, 502, 503, 505, 513, 516, 522, 525, 539, 542, 558, 562, 563, 565, 566, 568, 601, 604, 612, 631, 633, 635, 637, 643, 649, 651, 655, 661, 672, 679, 683, 691, 700, 704, 705, 720, 721, 735, 745, 751, 781, 791, 798, 802, 803, 804, 806, 807, 809, 817, 825, 826, 829, 830, 833, 849, 851, 868, 872, 877, 880, 881, 882, 886, 887, 888, 904, 905, 907, 912, 915, 916, 926, 934, 944, 946, 992, 1001, 1004, 1012, 1014, 1019, 1025, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "highlight_min": [147, 200], "higuera": 369, "hila": 407, "hilbert": [215, 873, 996, 1014], "hilferti": 112, "hill": [407, 448, 461, 1044], "him": 415, "himanshu": [1045, 1048], "hind": 1048, "hinder": 1044, "hing": [2, 63, 217, 220, 222, 276, 336, 337, 341, 343, 389, 669, 679, 738, 907, 914, 1000, 1018, 1019], "hinge_loss": [2, 343, 1004, 1038, 1046, 1047], "hinrich": 412, "hint": [185, 362, 376, 380, 398, 448, 1004], "hinton": [695, 856, 863, 864, 865, 1001, 1007, 1008, 1009], "hintz": 1040, "hiramatsu": 1051, "hirofumi": [1045, 1046], "hirsch": 1042, "hirschberg": [407, 720, 740, 798], "hirzel": 1047, "hispan": 185, "hist": [44, 63, 65, 87, 108, 137, 141, 210, 212, 241, 247, 262, 274, 293, 308, 312, 314, 321, 324, 414], "hist_drop": 144, "hist_n": 144, "hist_nbin": 308, "hist_no_interact": 322, "hist_one_hot": 144, "hist_ordin": 144, "hist_quantil": 321, "hist_x0": 308, "hist_x1": 308, "histgradientboost": 1046, "histgradientboostingclassifi": [2, 140, 141, 262, 317, 318, 319, 320, 322, 324, 358, 363, 387, 401, 560, 565, 635, 636, 994, 1023, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "histgradientboostingclassifierhistgradientboostingclassifi": 262, "histgradientboostingclassifierifittedhistgradientboostingclassifi": 262, "histgradientboostingregressor": [2, 44, 47, 53, 136, 141, 144, 147, 148, 150, 152, 155, 180, 186, 210, 314, 317, 318, 319, 320, 322, 323, 324, 387, 414, 561, 566, 635, 636, 638, 994, 1004, 1011, 1023, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "histgradientboostingregressor__interaction_cst": 186, "histgradientboostingregressor__max_depth": 144, "histgradientboostingregressor__max_it": 144, "histgradientboostingregressorhistgradientboostingregressor": [155, 314], "histgradientboostingregressorifittedhistgradientboostingregressor": [152, 322], "histogram": [2, 53, 63, 65, 87, 134, 136, 144, 145, 147, 148, 152, 182, 210, 218, 241, 267, 269, 274, 293, 308, 319, 321, 323, 324, 405, 490, 497, 560, 561, 562, 563, 565, 566, 635, 645, 745, 751, 761, 762, 793, 803, 808, 824, 830, 833, 996, 1002, 1014, 1025, 1029, 1030, 1046, 1049, 1051], "histor": [52, 210, 262, 1001, 1024], "histori": [52, 379, 560, 561, 1034], "hit": [212, 381], "hitesh": 1046, "hjortkj\u00e6r": 1048, "hkey_local_machin": 393, "hline": 123, "hlle": 1001, "hmasdev": 1048, "hmc": 52, "hmm": [1034, 1035, 1036, 1037, 1039], "hmmlearn": 1023, "hn": 381, "hnyk": [1040, 1041], "ho": [414, 556, 557, 1004, 1039, 1042, 1043, 1048], "hoang": [1043, 1044], "hobson": 1040, "hoc": [164, 165, 167, 182, 260, 262, 271, 285, 325, 331, 389, 406, 497, 661, 819, 825, 830, 868, 887, 1025], "hochberg": [597, 1040, 1041], "hochreit": [404, 722], "hockei": [58, 370], "hoctor": 1046, "hoda1394": 1046, "hoenig": 1034, "hoesli": 414, "hoffman": [412, 537, 1039, 1046], "hogan": 1042, "hoh": 1042, "hold": [0, 48, 53, 64, 65, 210, 214, 244, 262, 269, 357, 368, 375, 376, 377, 389, 405, 407, 411, 414, 415, 417, 504, 558, 562, 565, 591, 635, 636, 637, 739, 803, 806, 807, 817, 843, 874, 875, 880, 881, 888, 891, 915, 917, 994, 998, 1004, 1008, 1018, 1019, 1020, 1042, 1046, 1052], "holdgraf": 1042, "holdselig": 415, "hole": [182, 229, 230, 235, 531, 695, 696, 1025, 1048], "holger": 1041, "holidai": [44, 186], "holm": [838, 1005, 1051], "holman": 1049, "holmstr\u00f6m": 1036, "holohan": [1049, 1051], "holt": [0, 397, 1034], "holub": 535, "home": [0, 2, 7, 52, 53, 155, 173, 175, 177, 178, 238, 254, 306, 322, 370, 373, 383, 393, 486, 492, 500, 682, 1028], "homebrew": [378, 393], "homepag": [370, 531, 1020], "homm": 1049, "homo": 92, "homogen": [2, 73, 74, 75, 80, 81, 83, 89, 92, 351, 370, 387, 389, 409, 414, 417, 446, 617, 707, 720, 734, 739, 740, 760, 798, 1001, 1002, 1004, 1043], "homogeneity_completeness_v_measur": [2, 407, 1043], "homogeneity_scor": [2, 74, 83, 92, 351, 407, 720, 739, 798, 1004], "homomorph": 1023, "homoscedast": [128, 240, 312, 1004, 1042], "homoschedast": 1004, "honda": 52, "honei": 998, "hong": [1040, 1042, 1046, 1047, 1048, 1050, 1052], "hongh": 1042, "hongkahjun": 1041, "honglu": 1044, "hongshaoyang": 1049, "honl": [1046, 1047], "honolulu": 1004, "honor": 314, "hood": [401, 1000, 1019], "hoover": [1039, 1040, 1041, 1043], "hope": [31, 45, 175, 228, 389, 1043], "hopefulli": [271, 383, 1034], "hopfensperg": [1051, 1052, 1053], "hopper": 1039, "horizont": [67, 121, 230, 242, 308, 311, 380, 389, 464, 516, 700, 704], "horizontal_distance_to_hydrologi": 491, "horizontalalign": [52, 64, 68, 76, 80, 96, 237, 253, 303, 310], "hornik": 638, "hornstein": 1049, "horrel": 1041, "hoshia": 1048, "hossein": [1042, 1043, 1044], "host": [0, 141, 323, 350, 370, 375, 379, 383, 384, 492, 900, 1050], "hot": [2, 44, 104, 140, 155, 185, 210, 277, 309, 310, 314, 319, 326, 339, 389, 414, 415, 552, 567, 583, 651, 661, 662, 672, 683, 870, 872, 874, 875, 878, 880, 881, 888, 1000, 1014, 1042, 1048, 1049], "hot_r": [52, 308], "hotel": 1028, "hotspot": 381, "hour": [44, 150, 185, 186, 324, 375, 381, 497, 1001, 1022], "hour_co": 44, "hour_df": 44, "hour_sin": 44, "hour_workday_interact": 44, "hourli": [44, 150, 185], "hourly_wag": 184, "hous": [2, 108, 145, 155, 180, 181, 262, 308, 319, 368, 490, 1030], "house_pric": [108, 155], "houseag": [308, 319, 370, 490], "household": 370, "housestyl": [144, 155], "hover": 324, "hover_data": [141, 269], "how": [0, 44, 45, 47, 48, 49, 50, 53, 59, 60, 63, 64, 65, 69, 70, 73, 84, 85, 86, 87, 91, 94, 102, 103, 104, 107, 110, 112, 117, 130, 135, 136, 139, 143, 144, 145, 147, 148, 150, 153, 155, 162, 163, 167, 176, 182, 185, 186, 187, 188, 190, 194, 199, 200, 201, 203, 207, 211, 212, 213, 214, 217, 218, 224, 228, 234, 235, 239, 242, 244, 246, 247, 248, 250, 259, 262, 263, 264, 266, 268, 269, 270, 275, 277, 278, 280, 282, 283, 287, 288, 290, 291, 292, 294, 295, 300, 305, 313, 315, 318, 319, 320, 323, 324, 326, 336, 337, 339, 342, 343, 346, 350, 351, 354, 356, 357, 362, 363, 364, 370, 373, 374, 376, 377, 378, 380, 383, 388, 389, 390, 395, 398, 401, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 421, 431, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 505, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 583, 584, 585, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 612, 613, 614, 625, 626, 630, 631, 632, 633, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 691, 692, 693, 694, 695, 707, 723, 760, 795, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 830, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 987, 993, 994, 998, 999, 1000, 1001, 1003, 1004, 1010, 1011, 1012, 1014, 1016, 1017, 1019, 1020, 1022, 1024, 1028, 1030, 1034, 1036, 1039, 1045, 1048, 1049, 1050, 1053], "howel": 1041, "howev": [0, 44, 45, 47, 53, 54, 62, 63, 65, 73, 82, 83, 87, 89, 94, 105, 108, 110, 114, 116, 126, 128, 138, 140, 141, 144, 147, 148, 155, 162, 165, 167, 169, 174, 175, 186, 187, 194, 200, 210, 214, 231, 234, 235, 237, 243, 244, 247, 262, 268, 275, 281, 282, 283, 285, 287, 288, 293, 304, 308, 319, 325, 343, 346, 350, 351, 356, 358, 362, 363, 364, 369, 370, 372, 374, 375, 377, 381, 383, 387, 389, 398, 401, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 440, 443, 447, 449, 451, 454, 459, 497, 509, 533, 542, 552, 568, 583, 584, 585, 591, 608, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 633, 635, 636, 641, 646, 658, 659, 675, 690, 695, 698, 703, 766, 768, 803, 805, 806, 807, 817, 820, 823, 830, 834, 835, 846, 864, 865, 870, 879, 880, 885, 909, 910, 912, 929, 956, 972, 993, 994, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1007, 1008, 1009, 1011, 1012, 1014, 1018, 1019, 1020, 1043, 1044, 1046, 1047, 1050], "hoyer": [412, 1037], "hp": 52, "hpq": 52, "hrishikesh": [1035, 1036], "hristo": [1042, 1049], "hsiang": [661, 1038], "hsieh": 1040, "hspace": [46, 54, 55, 80, 96, 121, 228, 237, 253, 255, 256, 259, 293, 319, 329, 336], "hstack": [54, 70, 78, 157, 161, 235, 246, 263, 342, 411, 866], "hsuan": 1039, "ht2001": 1004, "htf": 414, "htm": [915, 916], "html": [2, 44, 48, 52, 64, 104, 105, 140, 142, 151, 152, 155, 158, 162, 165, 174, 185, 186, 187, 190, 194, 238, 240, 244, 248, 249, 250, 251, 258, 262, 266, 268, 269, 275, 280, 282, 306, 314, 318, 319, 321, 322, 324, 330, 356, 357, 370, 372, 375, 376, 378, 379, 383, 408, 411, 415, 421, 487, 509, 510, 661, 842, 846, 944, 946, 947, 1002, 1023, 1024, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053], "htmledit": [842, 846, 1002], "htmlparser": 48, "htsedebenham": 1049, "http": [44, 46, 48, 52, 53, 56, 62, 104, 165, 190, 210, 218, 226, 228, 235, 282, 285, 287, 288, 305, 322, 369, 370, 372, 373, 375, 379, 380, 381, 383, 387, 389, 393, 407, 411, 416, 442, 449, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 503, 509, 510, 511, 531, 532, 535, 538, 542, 597, 639, 644, 647, 661, 667, 669, 670, 671, 674, 679, 682, 685, 686, 688, 689, 695, 698, 708, 724, 726, 727, 761, 762, 772, 842, 844, 846, 849, 850, 855, 856, 857, 858, 863, 885, 900, 901, 902, 915, 916, 944, 946, 1000, 1002, 1004, 1017, 1020, 1044, 1053], "hu": [1039, 1042, 1044], "hua": [564, 1010], "huang": [370, 661, 1040, 1045], "huangk10": 1045, "huard": 1034, "huber": [26, 195, 220, 414, 561, 652, 679, 681, 1018, 1034, 1036, 1037, 1046], "huberlossfunct": 1047, "huberregressor": [2, 88, 169, 182, 191, 208, 214, 215, 216, 315, 525, 673, 674, 675, 681, 682, 1000, 1025, 1040, 1041, 1042, 1043], "hubert": [407, 708, 718, 789], "hubert1985": 708, "hudson": 322, "hue": [127, 150, 258, 268, 313, 372], "huerta": 1044, "hug": [0, 165, 396, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "huge": [212, 215, 362, 381, 630, 1037], "hugh": [882, 1036, 1047], "hugo": [46, 370, 1040, 1045, 1046, 1047, 1048, 1053], "hugorichard": 1046, "hugu": 1038, "hui": [198, 539, 541, 548, 659, 1000], "huiginn": 1034, "huilgolkar": [1035, 1036], "hujiahong726": 1050, "hull": 1051, "humahn": 1049, "human": [121, 186, 350, 375, 407, 412, 864, 865, 1004, 1011, 1043], "humid": [44, 186, 1011], "hunan": 1042, "hundr": [78, 146, 231, 312, 370, 411, 414, 562, 563, 1001, 1045], "hunt": 1049, "hunter": 1043, "hurt": [362, 535, 1042], "husak": 1048, "huszar": 1028, "hut": [695, 1001, 1039, 1041, 1044], "huynh": [1044, 1046], "hv": 415, "hvassard": 1048, "hwan": 1045, "hwang": 1040, "hybrid": [446, 652, 1023], "hye": 1045, "hyper": [2, 44, 65, 104, 141, 261, 262, 268, 273, 306, 339, 358, 377, 387, 388, 389, 402, 411, 414, 416, 468, 647, 648, 807, 815, 817, 863, 905, 999, 1000, 1004, 1007, 1018, 1019, 1023, 1030, 1034, 1048, 1053], "hyperband": 993, "hyperbol": [343, 645, 864, 865, 1002, 1008], "hypercub": [237, 516], "hyperlink": 1036, "hyperparamet": [2, 104, 106, 107, 150, 169, 170, 176, 177, 180, 182, 186, 192, 196, 200, 224, 228, 237, 247, 260, 262, 266, 271, 273, 279, 280, 290, 306, 326, 350, 377, 389, 407, 411, 412, 414, 417, 503, 536, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 646, 656, 662, 668, 676, 679, 731, 788, 803, 817, 912, 993, 998, 999, 1000, 1003, 1004, 1006, 1008, 1010, 1018, 1024, 1025, 1036, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1050], "hyperparameter_baseline_similar": 177, "hyperparameter_grid": 324, "hyperparameter_length_scal": 618, "hyperplan": [137, 172, 182, 191, 219, 245, 271, 334, 335, 336, 337, 338, 339, 343, 344, 513, 634, 661, 662, 669, 671, 677, 678, 679, 680, 907, 909, 911, 912, 1018, 1019, 1025], "hyperplane_handl": 203, "hyperplane_label": 203, "hyperspher": 371, "hypothes": 1000, "hypothesi": [147, 268, 274, 411, 693, 697, 832, 1001], "hypothet": 65, "hyunjin": 1034, "hyvarinen": [419, 534], "h\u00e9lion": 1045, "i": [0, 2, 8, 31, 38, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 71, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 167, 169, 170, 171, 173, 174, 175, 176, 177, 178, 180, 181, 182, 184, 185, 186, 187, 188, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 290, 291, 292, 293, 294, 295, 297, 298, 300, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 326, 328, 329, 330, 331, 332, 333, 337, 338, 339, 343, 344, 346, 347, 348, 350, 351, 352, 354, 355, 356, 358, 362, 363, 364, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 388, 389, 390, 392, 393, 395, 398, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 509, 510, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 527, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 574, 577, 578, 579, 580, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 769, 770, 771, 772, 773, 774, 776, 777, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 931, 932, 933, 934, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 949, 950, 951, 953, 956, 957, 958, 960, 961, 962, 963, 964, 965, 966, 968, 969, 970, 972, 973, 974, 975, 977, 978, 984, 987, 988, 989, 990, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1027, 1030, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "i_ax": 288, "i_dataset": [80, 96, 237], "i_j": 1012, "iain": [165, 372, 1000], "iampat": 1042, "ian": [1036, 1038, 1043, 1044, 1046, 1049, 1050, 1052], "iasoon": 1048, "ibay": 1034, "ibieta": 1047, "ibm": [52, 58, 332, 352, 370], "ibn": 1034, "ibnukhsein": 1051, "ibraheem": 1043, "ibrahima": 1044, "ibraim": [1039, 1040, 1041], "ib\u00e1\u00f1ez": [1042, 1043, 1046], "ic": [48, 285, 319, 369, 372, 392, 501, 503, 511, 635, 636, 1030, 1046, 1047], "ica": [11, 123, 419, 1020, 1029, 1030], "ica_estim": 121, "icann": 699, "icassp": 1004, "icdm": [564, 1010], "icdmw": 407, "ice_lines_kw": 635, "icml": [63, 65, 405, 407, 415, 437, 439, 842, 844, 863, 1004, 1006, 1018, 1022], "icml03": 844, "icon": [324, 377], "icyblad": 1041, "id": [2, 46, 53, 58, 228, 301, 357, 369, 370, 375, 383, 409, 411, 415, 421, 495, 496, 497, 919, 921, 946, 1042, 1043, 1046], "id3": [1026, 1030], "idea": [45, 87, 112, 113, 141, 165, 174, 185, 211, 230, 262, 293, 339, 354, 362, 363, 375, 380, 381, 409, 410, 411, 412, 413, 414, 416, 609, 610, 1000, 1001, 1004, 1007, 1010, 1022, 1028], "ideal": [210, 212, 228, 262, 265, 268, 275, 277, 278, 358, 374, 375, 376, 377, 379, 380, 383, 387, 389, 405, 406, 729, 759, 993, 1003, 1018, 1019, 1024, 1027], "idelberg": 1051, "ident": [53, 58, 98, 146, 206, 210, 228, 237, 241, 333, 350, 370, 377, 389, 404, 407, 408, 409, 411, 417, 420, 438, 439, 452, 464, 465, 473, 475, 476, 479, 480, 481, 488, 504, 552, 560, 561, 565, 566, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 646, 682, 683, 702, 707, 708, 739, 788, 798, 805, 808, 818, 819, 822, 823, 849, 850, 856, 864, 865, 871, 872, 884, 896, 915, 916, 997, 998, 1001, 1004, 1007, 1008, 1019, 1038, 1042, 1043, 1044, 1048, 1052], "identif": [370, 375, 407, 498, 993], "identifi": [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 184, 185, 186, 187, 188, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 317, 319, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 369, 370, 374, 375, 380, 389, 406, 407, 408, 411, 414, 415, 446, 450, 457, 487, 497, 509, 510, 556, 557, 558, 559, 564, 565, 566, 567, 608, 646, 652, 702, 715, 777, 832, 853, 854, 872, 902, 903, 993, 1000, 1004, 1010, 1017, 1028, 1041, 1043, 1048, 1049], "idf": [2, 55, 58, 241, 350, 351, 352, 370, 412, 522, 545, 590, 591, 592, 593, 846, 854, 879, 993, 1002, 1006, 1014, 1034], "idf_": [415, 592, 593, 1042, 1053], "idier": [412, 539, 541, 548], "idiom": 381, "idl": 1045, "ido": [1049, 1050], "idpol": [210, 228], "idx": [51, 58, 89, 130, 137, 141, 143, 150, 156, 178, 186, 188, 196, 209, 210, 219, 231, 262, 355, 408, 411], "idx_a": 277, "idx_avg_max_test_scor": 281, "idx_b": 277, "idx_r": 209, "idx_sort": 210, "idxmax": 346, "idxmin": 266, "ie": [76, 100, 122, 440, 707, 1000, 1014], "ieee": [97, 111, 113, 372, 407, 409, 416, 420, 448, 475, 535, 564, 667, 688, 689, 728, 772, 1000, 1004, 1010], "ieeexplor": 772, "ieic": [539, 541, 548], "iem": 661, "if_binari": [185, 251, 880, 1014, 1045], "if_delegate_has_method": [1047, 1048], "iff": [594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 878], "iforest": 247, "iforest_kw": 247, "iglesi": 1049, "ignacio": 1037, "ignor": [2, 44, 46, 48, 56, 80, 83, 89, 96, 104, 135, 140, 144, 152, 155, 186, 198, 210, 225, 238, 239, 244, 249, 251, 259, 304, 305, 313, 314, 318, 321, 343, 351, 363, 375, 377, 379, 381, 389, 393, 398, 407, 408, 414, 415, 425, 426, 429, 432, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 460, 461, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 488, 504, 509, 510, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 581, 583, 584, 585, 590, 591, 592, 593, 599, 604, 605, 612, 613, 614, 630, 631, 632, 633, 635, 636, 638, 642, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 691, 692, 693, 694, 695, 710, 714, 716, 717, 729, 732, 733, 741, 758, 759, 766, 772, 777, 781, 786, 787, 790, 791, 800, 801, 802, 804, 805, 806, 808, 810, 811, 812, 813, 816, 818, 819, 820, 821, 822, 823, 824, 825, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 864, 865, 866, 867, 870, 871, 872, 873, 874, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 899, 900, 902, 903, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 978, 987, 992, 1000, 1001, 1004, 1006, 1010, 1014, 1019, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1051, 1052], "ignore_attribut": 369, "ignore_error": 88, "ignore_implicit_zero": [884, 896], "ignore_ti": [729, 759], "ignore_warn": [218, 310, 1040], "ignored_new_col": 408, "ignorerevsfil": 375, "igor": [1040, 1041, 1047], "ih": 293, "ii": [51, 122, 186, 217, 263, 372, 415, 584, 585, 591, 641, 669, 670, 870, 879, 1000, 1014, 1022, 1051], "iid": 1042, "iii": [1048, 1051], "iijima": 1043, "iinfo": 1049, "ij": [268, 298, 404, 407, 412, 539, 541, 548, 649, 650, 655, 656, 663, 664, 665, 666, 684, 687, 1000, 1001, 1004, 1006, 1009, 1014, 1019], "ijcnn": 1004, "ijcv": 1004, "ijet": 407, "ik": [1000, 1004], "ikeda": 1046, "ikko": 1047, "il": [50, 667, 688, 689, 1000, 1004], "ilambharathi": [1037, 1038], "ili": [1050, 1051], "ilic": 1047, "ilion": 1048, "iliya": 1049, "iljin": [1049, 1050], "ill": [76, 114, 215, 306, 471, 472, 478, 653, 654, 657, 658, 659, 685, 686, 1000, 1003, 1044], "illustr": [49, 53, 61, 62, 64, 68, 70, 86, 90, 91, 103, 104, 107, 108, 110, 112, 117, 119, 123, 135, 138, 149, 150, 152, 154, 155, 160, 165, 168, 169, 170, 171, 172, 174, 175, 176, 177, 182, 184, 186, 187, 190, 200, 210, 212, 214, 218, 220, 221, 223, 224, 227, 228, 230, 231, 233, 235, 237, 239, 240, 242, 243, 244, 246, 257, 262, 268, 275, 280, 282, 289, 297, 311, 313, 316, 317, 319, 325, 331, 339, 340, 344, 346, 347, 348, 351, 352, 358, 362, 372, 375, 377, 380, 383, 388, 406, 410, 412, 414, 415, 516, 613, 614, 616, 617, 618, 622, 625, 626, 856, 993, 1000, 1004, 1007, 1010, 1016, 1017, 1018, 1019, 1023, 1025, 1028], "iloc": [44, 150, 155, 185, 186, 228, 268, 291], "ilya": [1041, 1052, 1053], "im": [121, 131, 279, 292], "im_": 700, "im_kw": [700, 1048], "imacul": 1040, "imag": [2, 43, 46, 54, 59, 60, 69, 72, 75, 76, 77, 80, 81, 85, 88, 90, 92, 96, 101, 103, 120, 121, 126, 130, 163, 165, 173, 182, 202, 231, 239, 242, 246, 266, 297, 305, 306, 318, 328, 329, 350, 351, 367, 368, 370, 372, 375, 380, 383, 389, 393, 400, 406, 407, 412, 441, 445, 452, 462, 494, 495, 496, 497, 503, 504, 507, 508, 535, 536, 538, 542, 585, 586, 587, 588, 589, 609, 610, 694, 700, 741, 833, 877, 1000, 1004, 1005, 1007, 1009, 1016, 1020, 1023, 1025, 1028, 1030, 1034, 1037, 1042, 1043, 1047, 1049, 1050], "image_height": [585, 586, 589], "image_index": [328, 329], "image_nam": 507, "image_patch": 589, "image_reconstruct": 589, "image_s": 589, "image_shap": [121, 246], "image_width": [585, 586, 589], "imagebox": 231, "imageio": 369, "imagenet": [864, 865], "images_restor": 85, "imagin": [122, 167, 169, 244, 326, 343, 411, 412, 415, 1000], "imamura": 1048, "imbal": [261, 271, 282, 411, 710, 732, 733, 741, 786, 787, 790, 791, 1004], "imbalanc": [210, 262, 271, 275, 277, 282, 351, 387, 405, 411, 706, 711, 790, 804, 808, 844, 1004, 1006, 1012, 1023], "imbert": [1041, 1043, 1046, 1048, 1051, 1052], "img": [45, 84, 100, 507, 588], "img_height": 585, "img_to_graph": [2, 81, 100, 415, 1037, 1047], "img_width": 585, "imit": 350, "immanuel": [0, 1034, 1035, 1039], "immedi": [89, 375, 387, 803, 817, 828, 829, 1042], "immens": 1028, "immensu": 1042, "immers": [693, 697], "immobil": 44, "immut": 401, "imp": 994, "imp_mean": [630, 633], "impact": [52, 53, 63, 72, 73, 78, 79, 92, 98, 108, 135, 161, 182, 184, 185, 186, 193, 212, 214, 228, 247, 261, 262, 285, 291, 313, 322, 346, 351, 358, 362, 363, 368, 387, 390, 405, 407, 412, 447, 449, 537, 541, 548, 592, 669, 670, 671, 675, 677, 679, 680, 681, 695, 797, 803, 806, 807, 817, 830, 847, 848, 849, 850, 884, 896, 907, 908, 936, 951, 974, 977, 993, 1003, 1011, 1019, 1025, 1041, 1044, 1047], "imped": 383, "imperfect": [731, 788, 1004, 1036], "imperfectli": [706, 737, 1004], "implant": 60, "implement": [2, 13, 31, 46, 47, 53, 54, 56, 81, 90, 113, 121, 141, 150, 181, 188, 190, 196, 200, 207, 224, 228, 230, 237, 243, 244, 262, 266, 268, 277, 285, 287, 288, 290, 293, 311, 317, 318, 319, 320, 321, 323, 326, 350, 352, 362, 363, 364, 369, 370, 372, 373, 375, 376, 377, 380, 381, 383, 384, 389, 393, 398, 403, 404, 407, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 437, 442, 443, 444, 446, 447, 448, 449, 450, 475, 494, 497, 509, 533, 534, 535, 536, 537, 539, 542, 543, 544, 554, 555, 556, 558, 559, 562, 563, 564, 568, 573, 584, 590, 591, 593, 595, 599, 603, 613, 614, 635, 636, 643, 644, 648, 649, 656, 660, 661, 662, 666, 667, 671, 674, 675, 677, 678, 679, 680, 681, 687, 688, 689, 690, 691, 694, 695, 698, 710, 714, 723, 738, 741, 745, 781, 785, 791, 792, 800, 802, 803, 806, 807, 809, 817, 821, 822, 825, 826, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 842, 843, 844, 845, 846, 849, 850, 852, 855, 857, 858, 863, 864, 865, 867, 889, 897, 898, 904, 907, 908, 909, 910, 911, 912, 913, 950, 951, 960, 963, 968, 972, 974, 993, 994, 996, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1014, 1016, 1017, 1020, 1021, 1023, 1024, 1026, 1028, 1030, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "impli": [44, 169, 185, 350, 351, 352, 412, 414, 417, 474, 574, 584, 613, 614, 625, 738, 937, 1000, 1001, 1045], "implic": [358, 375], "implicit": [2, 210, 389, 414, 415, 573, 685, 686, 998, 1003, 1023, 1043], "implicitli": [352, 384, 414, 599, 635, 636, 849, 857, 886, 994, 996, 1011, 1014, 1019, 1052], "import": [2, 16, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 358, 362, 363, 364, 369, 370, 371, 373, 374, 375, 377, 379, 380, 381, 382, 383, 384, 387, 388, 389, 392, 393, 394, 398, 401, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 957, 958, 964, 965, 966, 967, 968, 972, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 993, 994, 996, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1024, 1025, 1028, 1030, 1031, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1052, 1053], "importance_gett": [416, 595, 596, 599, 1046], "importances_mean": [142, 148, 187, 188, 317, 637, 1012], "importances_std": [142, 637, 1012], "important_word": 58, "importantli": [44, 54, 122, 175, 186, 190, 308, 375, 407, 1052], "importerror": [51, 87, 124, 288, 301, 383], "importlib": 1047, "impos": [75, 91, 152, 199, 205, 214, 314, 387, 407, 412, 414, 415, 528, 660, 1000], "imposs": [147, 352], "impract": 912, "impress": 1028, "improp": [389, 1041], "improv": [0, 31, 44, 62, 63, 70, 110, 111, 114, 126, 131, 135, 136, 141, 143, 145, 146, 147, 149, 150, 155, 161, 181, 185, 190, 197, 210, 218, 228, 262, 269, 271, 285, 288, 291, 306, 313, 323, 342, 343, 351, 358, 363, 373, 378, 380, 381, 383, 384, 387, 389, 390, 401, 412, 414, 416, 449, 450, 532, 533, 535, 538, 539, 540, 542, 543, 544, 547, 555, 558, 559, 560, 561, 562, 563, 565, 566, 613, 614, 646, 655, 667, 669, 670, 671, 675, 676, 677, 678, 679, 681, 688, 690, 695, 732, 733, 786, 787, 790, 791, 856, 864, 865, 881, 883, 895, 915, 916, 918, 951, 993, 998, 1000, 1001, 1004, 1007, 1008, 1018, 1019, 1020, 1022, 1023, 1024, 1028, 1034, 1035, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "improvis": [51, 301], "impur": [148, 188, 357, 392, 414, 416, 554, 555, 558, 559, 560, 561, 565, 566, 567, 915, 916, 917, 918, 919, 921, 1020, 1030, 1039, 1040, 1041, 1042], "imput": [2, 104, 150, 155, 187, 239, 249, 251, 318, 321, 367, 379, 388, 389, 398, 408, 414, 490, 502, 566, 582, 630, 631, 632, 633, 642, 648, 675, 829, 850, 868, 932, 934, 1023, 1025, 1030, 1036, 1037], "imputation_const": 249, "imputation_mean": 249, "imputation_ord": [630, 1044], "imputation_sequence_": 630, "impute_estim": 180, "impute_scor": 181, "imran": [1036, 1037, 1038], "imread": 69, "imshow": [45, 46, 54, 69, 76, 81, 82, 84, 85, 87, 88, 92, 114, 121, 124, 131, 171, 172, 173, 177, 188, 202, 226, 231, 246, 279, 292, 306, 328, 329, 339, 347, 369, 635, 700, 1048], "in1d": 1041, "in_bodi": 48, "in_titl": 48, "in_top": 48, "in_topic_d": 48, "inaccess": 89, "inaccur": 1053, "inact": [352, 369, 375], "inadvert": [184, 389], "inadvis": 401, "inappropri": [370, 411, 417, 712, 824], "inbuilt": 411, "inc": [0, 103, 267, 994, 1016, 1028], "incap": 89, "incentiv": 379, "incept": 1024, "includ": [0, 11, 18, 44, 69, 71, 89, 112, 141, 144, 145, 146, 184, 185, 187, 196, 210, 214, 228, 244, 269, 285, 288, 304, 308, 320, 321, 323, 326, 339, 344, 350, 352, 358, 362, 363, 369, 371, 373, 375, 376, 377, 379, 380, 381, 383, 384, 389, 390, 393, 401, 404, 407, 408, 410, 411, 412, 414, 415, 416, 417, 418, 444, 446, 450, 456, 466, 469, 470, 471, 472, 473, 474, 475, 476, 489, 490, 491, 497, 501, 502, 503, 505, 506, 511, 535, 542, 558, 565, 575, 612, 635, 641, 649, 650, 655, 663, 664, 665, 668, 684, 691, 692, 700, 716, 732, 733, 738, 740, 741, 774, 786, 787, 790, 798, 803, 805, 806, 807, 816, 817, 820, 823, 830, 833, 855, 857, 858, 859, 880, 881, 882, 886, 904, 907, 908, 915, 917, 919, 921, 933, 934, 937, 939, 942, 944, 945, 946, 960, 993, 1000, 1003, 1004, 1005, 1007, 1008, 1014, 1018, 1019, 1020, 1023, 1024, 1027, 1028, 1034, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "include_bia": [44, 192, 283, 882, 886, 1048], "include_boundari": [937, 1048], "include_self": [75, 80, 101, 698, 860, 861, 1038], "include_valu": 700, "inclus": [0, 375, 377, 383, 450, 456, 757, 789, 1004, 1005, 1034, 1048], "incom": [308, 370, 379, 440], "incoming_count": 56, "incompat": [497, 994, 1042, 1043], "incomplet": [375, 393, 403, 407, 708, 798, 994, 1001, 1038, 1040], "inconsist": [2, 389, 401, 415, 509, 510, 578, 909, 912, 937, 1010, 1019, 1030, 1034, 1039, 1040, 1041, 1042, 1044, 1047, 1049, 1050, 1051], "inconsistentversionwarn": [2, 401, 1050], "incorpor": [323, 375, 408, 414, 1003, 1023, 1028], "incorrect": [135, 184, 331, 358, 375, 407, 609, 610, 635, 636, 737, 1034, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1053], "incorrectli": [194, 275, 414, 415, 554, 560, 562, 737, 743, 1004, 1035, 1040, 1042, 1043, 1045, 1050], "incr_mean_variance_axi": [2, 1040, 1046], "increas": [2, 44, 47, 55, 64, 73, 79, 89, 91, 92, 95, 108, 124, 135, 136, 138, 141, 143, 145, 150, 152, 161, 165, 169, 173, 174, 175, 185, 186, 190, 193, 195, 202, 210, 211, 212, 214, 228, 235, 241, 254, 255, 262, 268, 269, 270, 275, 281, 282, 303, 309, 310, 313, 319, 325, 329, 339, 346, 351, 352, 354, 362, 363, 364, 374, 383, 384, 389, 405, 407, 409, 412, 414, 415, 418, 440, 444, 446, 452, 463, 471, 472, 478, 533, 537, 554, 555, 558, 559, 560, 561, 562, 563, 565, 566, 568, 569, 630, 638, 639, 640, 648, 653, 654, 657, 658, 659, 661, 662, 669, 670, 671, 679, 680, 681, 685, 686, 688, 689, 695, 709, 710, 715, 781, 785, 792, 806, 807, 836, 855, 857, 858, 859, 862, 864, 865, 881, 907, 915, 916, 917, 918, 951, 993, 995, 999, 1000, 1001, 1003, 1004, 1007, 1014, 1018, 1019, 1020, 1028, 1034, 1036, 1039, 1043, 1045, 1046, 1049, 1052], "increasing_": 638, "increasing_bool": 639, "increment": [2, 105, 120, 126, 127, 129, 182, 271, 274, 355, 379, 381, 442, 447, 463, 505, 534, 535, 536, 537, 540, 542, 545, 604, 649, 661, 669, 809, 831, 839, 840, 842, 843, 844, 845, 846, 876, 877, 887, 907, 908, 978, 1000, 1006, 1025, 1037, 1038], "incrementalpca": [2, 125, 364, 412, 534, 536, 540, 542, 545, 1038, 1041, 1042, 1044, 1045, 1048, 1053], "incur": [64, 622, 907, 1019, 1042], "ind": [54, 78, 146, 157, 351, 847, 848], "inde": [45, 47, 63, 65, 71, 75, 76, 87, 89, 92, 114, 117, 126, 135, 138, 164, 165, 169, 185, 187, 192, 196, 198, 200, 210, 212, 270, 271, 275, 277, 285, 288, 308, 313, 346, 351, 358, 362, 374, 380, 388, 389, 390, 407, 409, 414, 568, 569, 1000, 1014, 1018, 1048], "indecisiveus": [1045, 1046], "indefinit": 379, "indent": [377, 969], "independ": [2, 33, 53, 63, 65, 73, 81, 122, 123, 125, 140, 143, 176, 186, 203, 246, 247, 268, 271, 273, 277, 287, 308, 315, 317, 351, 358, 362, 363, 371, 388, 389, 393, 401, 404, 405, 407, 408, 409, 410, 411, 415, 419, 449, 464, 488, 504, 516, 517, 518, 519, 521, 533, 534, 536, 538, 540, 541, 547, 548, 552, 553, 606, 609, 610, 628, 643, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 659, 660, 663, 664, 665, 666, 667, 668, 675, 676, 677, 678, 707, 708, 720, 739, 740, 758, 760, 798, 805, 832, 836, 838, 840, 841, 879, 883, 884, 885, 887, 891, 892, 893, 894, 896, 897, 898, 901, 909, 910, 911, 912, 913, 993, 996, 998, 1000, 1001, 1004, 1005, 1006, 1009, 1011, 1014, 1019, 1020, 1029, 1030, 1034, 1035, 1040, 1042, 1044, 1049], "inder128": 1044, "inderjeet": 1045, "inderjit": [404, 453], "indeterminaci": 545, "index": [2, 52, 55, 56, 73, 74, 75, 76, 77, 83, 84, 92, 104, 105, 135, 140, 142, 150, 162, 165, 180, 184, 185, 186, 187, 188, 210, 214, 228, 248, 251, 254, 255, 259, 263, 266, 267, 268, 269, 271, 279, 280, 281, 282, 288, 308, 313, 314, 315, 321, 325, 328, 329, 351, 352, 370, 372, 373, 375, 377, 379, 384, 387, 389, 404, 408, 411, 412, 414, 415, 422, 443, 447, 448, 449, 450, 451, 453, 454, 457, 459, 460, 464, 467, 504, 510, 558, 559, 560, 561, 565, 566, 567, 589, 590, 591, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 620, 635, 636, 643, 700, 707, 708, 715, 719, 721, 734, 741, 760, 782, 783, 789, 791, 797, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 833, 847, 848, 849, 850, 851, 853, 855, 857, 858, 859, 880, 915, 916, 917, 918, 924, 955, 974, 977, 982, 983, 1004, 1006, 1007, 1008, 1018, 1020, 1023, 1034, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "index_alpha_path_a": 198, "index_alpha_path_b": 198, "index_map": 56, "indexerror": [1042, 1043], "indexhash": 643, "indexhash_": 643, "indian": 370, "indic": [2, 52, 58, 59, 63, 64, 93, 94, 100, 108, 117, 121, 127, 135, 140, 145, 174, 177, 181, 184, 186, 232, 241, 244, 261, 262, 270, 271, 274, 275, 288, 301, 328, 329, 332, 350, 351, 352, 357, 363, 370, 375, 376, 377, 379, 383, 384, 387, 389, 403, 404, 405, 407, 409, 411, 412, 414, 415, 418, 422, 427, 437, 440, 444, 450, 451, 452, 453, 455, 456, 457, 460, 464, 467, 472, 487, 509, 510, 512, 513, 514, 524, 533, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 583, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 609, 610, 623, 630, 631, 632, 633, 635, 636, 642, 649, 650, 653, 654, 655, 656, 657, 658, 664, 666, 668, 676, 678, 685, 686, 693, 695, 697, 699, 706, 710, 715, 716, 721, 722, 723, 725, 728, 730, 731, 732, 733, 734, 737, 741, 742, 743, 744, 757, 774, 781, 782, 783, 784, 785, 786, 787, 788, 790, 791, 792, 795, 796, 797, 799, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 838, 840, 841, 847, 848, 849, 850, 851, 853, 855, 857, 858, 859, 871, 874, 878, 880, 888, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 921, 923, 924, 929, 933, 934, 939, 955, 966, 967, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 994, 999, 1000, 1001, 1004, 1005, 1006, 1007, 1008, 1011, 1014, 1015, 1018, 1019, 1024, 1034, 1035, 1036, 1037, 1038, 1039, 1042, 1044, 1045, 1047, 1049, 1050, 1051, 1052, 1053], "indicator_": [630, 631, 633], "indicator_matrix_": 1039, "indigo": 227, "indirect": [271, 376, 389], "indirectli": [228, 343], "indispens": 1028, "indistinguish": 308, "individu": [2, 44, 81, 94, 112, 134, 136, 138, 154, 155, 160, 163, 178, 182, 183, 185, 188, 207, 210, 228, 238, 247, 248, 262, 271, 273, 277, 287, 317, 324, 325, 343, 346, 363, 376, 377, 379, 382, 384, 389, 392, 398, 404, 408, 411, 414, 415, 437, 452, 462, 464, 497, 502, 504, 510, 556, 557, 560, 561, 563, 564, 566, 568, 569, 570, 571, 605, 611, 613, 635, 636, 646, 648, 660, 661, 662, 671, 674, 675, 676, 677, 678, 679, 680, 681, 690, 715, 722, 731, 737, 753, 754, 788, 793, 794, 803, 817, 835, 839, 840, 842, 843, 844, 845, 846, 865, 868, 876, 877, 879, 880, 881, 884, 886, 887, 892, 893, 894, 907, 908, 1004, 1005, 1014, 1019, 1025, 1030, 1035, 1038, 1040, 1046, 1048, 1050], "indptr": [56, 288, 357, 978, 979, 980, 981, 982, 983, 984, 985, 986, 1042, 1050], "induc": [26, 64, 90, 185, 196, 202, 204, 208, 211, 225, 243, 247, 346, 352, 404, 412, 414, 446, 449, 540, 544, 554, 558, 559, 560, 561, 565, 566, 567, 646, 729, 759, 880, 915, 916, 917, 918, 997, 1004, 1018], "induct": [44, 72, 133, 147, 177, 182, 389, 407, 414, 421, 441, 513, 565, 630, 634, 902, 903, 964, 987, 1000, 1017, 1025, 1036], "inductive_learn": 90, "inductivecluster": 90, "industri": [407, 1023], "ineffect": [312, 405, 1014, 1042, 1043], "ineffici": [2, 414, 443, 575, 835, 836, 1007, 1009], "inequ": [357, 389, 407, 443, 447, 459, 702, 1001, 1002, 1007], "inertia": [91, 92, 95, 351, 407, 443, 447, 449, 452, 459, 460, 462, 463, 1045], "inertia_": [92, 95, 98, 443, 447, 449, 1045], "inessa": 1053, "inf": [108, 172, 298, 384, 407, 417, 446, 450, 455, 456, 457, 461, 471, 472, 478, 554, 555, 560, 561, 595, 596, 599, 608, 609, 610, 622, 630, 638, 640, 651, 652, 653, 655, 672, 674, 675, 679, 680, 681, 683, 690, 731, 733, 749, 781, 788, 792, 863, 872, 879, 931, 932, 933, 934, 949, 1004, 1014, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052], "infant": 1014, "infeas": [1000, 1007, 1009], "infer": [26, 182, 183, 185, 206, 254, 258, 259, 268, 355, 369, 377, 387, 401, 411, 412, 492, 497, 509, 510, 516, 535, 537, 539, 541, 548, 550, 551, 554, 560, 561, 635, 638, 660, 712, 725, 726, 744, 788, 800, 801, 809, 826, 833, 843, 854, 881, 888, 902, 903, 915, 916, 917, 918, 966, 994, 1000, 1003, 1004, 1009, 1014, 1017, 1020, 1023, 1024, 1025, 1035, 1039, 1040, 1045, 1048, 1051], "inferencesess": 401, "inferenti": 90, "inferior": [441, 445, 1045], "infin": [2, 268, 346, 542, 685, 686, 715, 828, 914, 932, 1007], "infinit": [65, 211, 253, 271, 343, 362, 417, 446, 625, 626, 781, 800, 931, 933, 934, 996, 1003, 1014, 1019, 1042, 1044, 1047, 1048, 1049, 1051, 1052], "inflammatori": 370, "inflat": [91, 184, 185, 187, 407, 411, 1004, 1014], "inflect": 270, "influenc": [43, 49, 53, 112, 113, 135, 182, 185, 195, 243, 253, 276, 308, 315, 339, 343, 346, 356, 358, 364, 409, 412, 414, 430, 440, 454, 465, 482, 483, 484, 489, 502, 555, 557, 559, 561, 563, 566, 569, 571, 614, 631, 638, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 664, 665, 666, 667, 668, 670, 673, 675, 676, 679, 681, 682, 737, 753, 833, 840, 841, 849, 850, 857, 858, 865, 884, 885, 896, 908, 910, 913, 916, 918, 933, 993, 998, 999, 1000, 1007, 1010, 1014, 1018, 1019, 1025, 1028, 1037, 1042, 1043], "influenti": [214, 351, 1028], "info": [2, 46, 78, 104, 121, 185, 186, 244, 262, 266, 372, 374, 379, 389, 415, 464, 497, 562, 563, 959], "inform": [2, 3, 44, 45, 48, 51, 52, 53, 54, 63, 65, 70, 71, 73, 74, 83, 87, 92, 100, 101, 103, 104, 117, 141, 142, 159, 161, 162, 164, 165, 169, 174, 182, 185, 186, 188, 190, 191, 192, 193, 196, 211, 214, 225, 227, 228, 244, 248, 255, 256, 258, 262, 263, 265, 268, 269, 270, 273, 275, 277, 281, 291, 294, 295, 298, 315, 320, 324, 342, 346, 350, 351, 352, 355, 357, 358, 362, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 381, 383, 387, 388, 389, 390, 398, 401, 404, 406, 411, 412, 414, 415, 416, 417, 421, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 462, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 493, 495, 496, 497, 498, 501, 502, 503, 504, 505, 506, 511, 516, 525, 529, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 583, 584, 585, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 608, 609, 610, 611, 612, 613, 614, 630, 631, 632, 633, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 690, 691, 692, 693, 694, 695, 698, 700, 704, 707, 708, 718, 729, 733, 746, 758, 759, 760, 789, 791, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 830, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 892, 893, 895, 896, 897, 898, 899, 900, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 921, 926, 960, 987, 992, 994, 996, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1014, 1015, 1018, 1020, 1024, 1025, 1027, 1028, 1034, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "informatik": 1004, "informed": 1004, "infrastructur": [305, 323, 1023, 1024], "infrequ": [880, 881, 888, 1004, 1034, 1048, 1049, 1050], "infrequent_categories_": [321, 323, 880, 881, 888, 1014], "infrequent_if_exist": [880, 1014], "infrequent_sklearn": [880, 1014], "infti": [228, 417, 622, 1000, 1014, 1041], "ing": 415, "ingela": 1048, "ingest": 415, "ingredi": 417, "ingrid": 1044, "inher": [131, 206, 358, 407, 412, 564, 994, 996, 998, 999, 1001, 1005], "inherit": [244, 375, 377, 388, 389, 421, 579, 679, 927, 942, 944, 956, 1000, 1034, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1049, 1050, 1051, 1053], "inhibit": [418, 444], "inhomogen": [417, 617], "ini": 256, "init": [2, 55, 78, 92, 93, 95, 98, 186, 193, 230, 231, 233, 234, 235, 254, 256, 288, 351, 377, 383, 407, 412, 414, 443, 447, 449, 451, 453, 459, 460, 539, 541, 548, 549, 560, 561, 635, 636, 693, 695, 697, 856, 1001, 1034, 1043, 1046, 1048, 1049, 1050], "init_": [560, 561], "init_param": [253, 256, 259, 800, 801], "init_s": [95, 351, 449], "init_size_": 1046, "init_tim": 256, "initi": [0, 47, 52, 56, 72, 78, 79, 91, 92, 94, 97, 98, 113, 148, 156, 157, 158, 170, 175, 182, 185, 193, 204, 225, 230, 231, 235, 252, 254, 255, 268, 288, 319, 330, 339, 351, 358, 363, 370, 375, 377, 383, 384, 387, 389, 407, 412, 414, 416, 417, 419, 442, 443, 447, 448, 449, 450, 451, 452, 453, 459, 460, 461, 462, 513, 516, 532, 533, 534, 538, 539, 541, 544, 546, 547, 548, 549, 554, 555, 560, 561, 564, 595, 609, 610, 613, 614, 622, 623, 630, 643, 648, 649, 650, 651, 655, 656, 661, 663, 664, 665, 666, 669, 670, 671, 672, 674, 679, 680, 681, 683, 684, 687, 693, 694, 695, 697, 698, 800, 801, 837, 856, 863, 864, 865, 903, 936, 950, 951, 972, 977, 978, 996, 1000, 1001, 1003, 1008, 1009, 1010, 1018, 1020, 1023, 1025, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "initial_imputer_": 630, "initial_strategi": 630, "initial_theta": [613, 614], "initialis": [121, 539, 541, 548, 1034, 1042, 1043], "initializedcheck": 376, "inject": [247, 370, 414], "inki": 1040, "inli": [237, 1000, 1010], "inlier": [112, 151, 213, 237, 247, 308, 389, 409, 429, 469, 564, 674, 680, 853, 884, 896, 910, 911, 913, 1000, 1010, 1041, 1042, 1047], "inlier_mask": 213, "inlier_mask_": [213, 674], "inlier_plot": 112, "inliers_mask": 113, "inlin": [221, 375, 376, 1020], "inner": [65, 126, 147, 150, 269, 273, 287, 326, 330, 362, 415, 443, 515, 584, 591, 612, 621, 651, 672, 683, 778, 780, 996, 1004, 1014, 1019, 1035, 1038, 1048, 1051], "inner_clf": 1004, "inner_cv": [273, 324], "inner_it": 381, "inner_max_num_thread": 971, "inner_numb": 330, "inner_stat": 1048, "inner_stats_": 1048, "inpaint": 412, "inplac": [2, 228, 247, 280, 454, 482, 483, 484, 485, 862, 870, 873, 876, 877, 879, 883, 884, 885, 887, 976, 979, 980, 981, 985, 986, 1043], "inplace_column_scal": 2, "inplace_csr_column_scal": [2, 384], "inplace_csr_row_normalize_l1": [2, 384], "inplace_csr_row_normalize_l2": [2, 384], "inplace_row_scal": 2, "inplace_swap_column": 2, "inplace_swap_row": 2, "inproceed": 0, "input": [2, 44, 46, 50, 65, 68, 70, 106, 121, 125, 143, 147, 148, 175, 176, 177, 185, 190, 192, 210, 213, 214, 218, 225, 228, 240, 241, 243, 244, 251, 263, 281, 285, 292, 293, 305, 309, 310, 311, 312, 317, 320, 322, 325, 326, 339, 343, 347, 352, 369, 372, 375, 378, 380, 384, 385, 387, 388, 389, 401, 404, 405, 408, 411, 412, 413, 414, 415, 416, 417, 419, 425, 428, 429, 430, 431, 432, 437, 438, 439, 440, 441, 442, 445, 448, 449, 450, 454, 457, 458, 461, 464, 465, 467, 468, 469, 471, 472, 482, 483, 484, 489, 504, 510, 517, 518, 519, 521, 525, 529, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 584, 585, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 614, 623, 625, 630, 631, 632, 633, 634, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 688, 689, 690, 691, 692, 693, 695, 696, 699, 700, 701, 702, 703, 704, 705, 724, 725, 726, 727, 731, 748, 749, 751, 753, 754, 756, 757, 764, 770, 774, 775, 777, 781, 782, 783, 784, 788, 793, 794, 800, 801, 802, 803, 806, 807, 809, 817, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 894, 895, 899, 900, 902, 903, 905, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 924, 926, 927, 928, 930, 931, 932, 933, 934, 935, 939, 944, 946, 948, 950, 960, 962, 963, 967, 976, 978, 984, 985, 986, 989, 990, 992, 994, 996, 998, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1011, 1012, 1016, 1017, 1018, 1019, 1020, 1023, 1024, 1028, 1030, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "input_featur": [192, 377, 389, 423, 428, 442, 443, 445, 447, 449, 464, 482, 483, 484, 485, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 567, 568, 569, 570, 571, 583, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 630, 631, 632, 633, 638, 641, 642, 643, 644, 645, 691, 692, 695, 851, 856, 859, 863, 866, 867, 870, 871, 872, 873, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 1050], "input_nam": [932, 934, 966, 1048], "input_tag": [926, 1053], "input_typ": [352, 415, 584], "inputtag": [2, 926], "inria": [0, 661, 1034], "insensit": [243, 646, 679, 681, 791, 908, 997, 1018, 1019, 1034], "insepar": [165, 372], "insert": [94, 185, 210, 387, 407, 487, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 922], "insid": [2, 56, 58, 64, 186, 212, 244, 268, 330, 339, 364, 369, 370, 377, 381, 398, 407, 415, 437, 443, 444, 447, 449, 465, 482, 483, 484, 534, 537, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 590, 591, 592, 593, 613, 614, 638, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 693, 802, 804, 805, 810, 812, 821, 825, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 852, 854, 857, 858, 864, 865, 867, 870, 872, 873, 874, 879, 886, 887, 902, 903, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 960, 963, 1011, 1028, 1051], "insight": [44, 47, 185, 186, 199, 211, 212, 228, 262, 305, 308, 350, 357, 405, 406, 803, 806, 807, 817, 830, 1011, 1020, 1028], "insist": 103, "inspect": [2, 44, 49, 67, 68, 71, 90, 95, 137, 142, 148, 150, 151, 152, 156, 162, 169, 174, 175, 185, 186, 187, 188, 203, 219, 224, 248, 262, 268, 271, 280, 291, 296, 299, 313, 317, 318, 319, 320, 322, 324, 335, 336, 337, 338, 340, 341, 343, 350, 355, 363, 377, 389, 407, 408, 414, 415, 464, 554, 555, 558, 559, 560, 561, 565, 566, 567, 634, 635, 636, 637, 836, 867, 868, 915, 916, 917, 918, 944, 991, 1004, 1005, 1008, 1011, 1012, 1019, 1023, 1025, 1030, 1037, 1053], "inspir": [111, 152, 186, 228, 375, 387, 414, 562, 563, 938, 994, 1004, 1043], "instabl": [75, 185, 298, 417, 452, 536, 540, 544, 698, 1041, 1044, 1047], "instal": [87, 251, 288, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 362, 363, 375, 376, 378, 379, 381, 383, 387, 388, 394, 400, 401, 403, 407, 415, 452, 462, 497, 694, 698, 1020, 1041, 1042, 1043, 1047, 1048, 1053], "installment_commit": 262, "instanc": [2, 44, 48, 50, 53, 62, 64, 65, 87, 90, 92, 138, 150, 162, 165, 167, 181, 186, 187, 196, 239, 244, 247, 262, 264, 266, 277, 279, 280, 299, 317, 324, 333, 335, 336, 342, 343, 350, 351, 352, 361, 362, 363, 369, 370, 372, 373, 374, 375, 377, 380, 381, 383, 384, 387, 389, 393, 398, 401, 403, 404, 405, 406, 407, 408, 411, 412, 414, 415, 416, 417, 418, 419, 421, 431, 432, 435, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 457, 458, 459, 460, 462, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 488, 491, 493, 496, 497, 498, 504, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 576, 579, 583, 584, 585, 586, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 609, 610, 612, 613, 614, 623, 630, 631, 632, 633, 635, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 705, 710, 723, 732, 733, 741, 774, 777, 781, 782, 783, 784, 786, 787, 790, 791, 792, 795, 796, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 815, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 896, 899, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 920, 933, 934, 936, 944, 945, 946, 950, 951, 959, 960, 961, 962, 972, 973, 974, 977, 987, 988, 992, 993, 994, 1000, 1001, 1004, 1006, 1007, 1010, 1012, 1014, 1018, 1019, 1020, 1024, 1030, 1034, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "instanci": 1043, "instant": [205, 375], "instantan": 509, "instanti": [105, 172, 320, 378, 398, 414, 450, 568, 569, 604, 633, 803, 806, 807, 809, 817, 826, 828, 829, 830, 831, 832, 834, 940, 1010, 1034, 1042, 1046, 1050], "instead": [0, 44, 45, 46, 53, 59, 87, 89, 90, 91, 104, 126, 138, 152, 162, 165, 169, 210, 212, 225, 228, 234, 247, 259, 264, 265, 269, 270, 281, 287, 293, 308, 317, 318, 319, 320, 321, 322, 326, 339, 341, 343, 350, 352, 357, 358, 362, 363, 369, 370, 373, 374, 375, 376, 377, 379, 380, 383, 384, 387, 388, 389, 398, 401, 403, 407, 408, 410, 411, 412, 413, 414, 415, 416, 418, 430, 437, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 456, 459, 465, 467, 482, 483, 484, 485, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 510, 511, 534, 536, 537, 539, 541, 542, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 584, 585, 591, 592, 609, 610, 613, 614, 615, 616, 617, 618, 619, 622, 623, 624, 625, 626, 627, 628, 630, 633, 635, 638, 641, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 690, 693, 695, 697, 710, 712, 749, 777, 781, 782, 783, 785, 786, 800, 801, 802, 803, 804, 805, 806, 807, 810, 812, 815, 817, 819, 821, 822, 823, 825, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 852, 854, 857, 858, 864, 865, 867, 868, 869, 870, 872, 873, 874, 879, 880, 885, 886, 887, 897, 898, 901, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 920, 921, 939, 944, 946, 951, 960, 978, 993, 994, 996, 1000, 1001, 1003, 1004, 1005, 1008, 1009, 1014, 1018, 1019, 1020, 1023, 1031, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "instinct": 350, "institut": [0, 262, 372, 1007], "instruct": [326, 362, 375, 376, 377, 378, 379, 380, 383, 387, 388, 389, 504, 590, 591, 593, 1027, 1034], "instrument": [52, 103, 122, 184], "insuffici": [392, 1003], "insur": [182, 191, 210, 406, 464, 497, 553, 651, 672, 683, 709, 748, 753, 755, 833, 868, 871, 872, 880, 887, 1000, 1025], "int": [48, 50, 53, 54, 56, 73, 80, 96, 113, 138, 146, 150, 151, 170, 171, 172, 178, 181, 184, 194, 202, 204, 210, 228, 235, 237, 243, 247, 253, 262, 263, 266, 267, 268, 288, 293, 295, 301, 315, 329, 352, 370, 375, 377, 387, 389, 405, 408, 411, 415, 418, 419, 422, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 482, 483, 484, 485, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 503, 504, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 583, 584, 585, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 609, 610, 613, 614, 620, 630, 631, 632, 633, 634, 635, 636, 637, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 703, 704, 705, 706, 707, 708, 710, 712, 716, 729, 730, 732, 733, 734, 737, 741, 759, 760, 772, 777, 781, 782, 783, 784, 785, 786, 787, 790, 792, 796, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 874, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 920, 921, 929, 933, 934, 936, 937, 950, 951, 953, 954, 955, 957, 968, 972, 974, 977, 982, 983, 1000, 1011, 1034, 1040, 1044, 1045], "int32": [247, 288, 315, 375, 389, 443, 447, 449, 451, 453, 459, 909, 910, 911, 912, 913, 968, 1019, 1043, 1049, 1050, 1051], "int64": [44, 54, 88, 104, 185, 186, 262, 277, 282, 285, 314, 324, 357, 389, 415, 425, 442, 448, 450, 497, 515, 516, 520, 587, 590, 643, 649, 650, 655, 656, 668, 717, 718, 721, 747, 797, 843, 872, 901, 931, 958, 989, 1005, 1042, 1045, 1047, 1049, 1050, 1051], "int64dtyp": 1051, "intact": 880, "integ": [2, 44, 56, 87, 104, 185, 210, 228, 318, 319, 358, 362, 369, 370, 372, 377, 380, 384, 388, 389, 407, 408, 411, 412, 414, 415, 432, 437, 462, 464, 467, 472, 487, 497, 499, 502, 503, 504, 506, 509, 510, 513, 515, 516, 520, 523, 551, 560, 561, 562, 563, 564, 568, 569, 573, 584, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 630, 631, 632, 633, 635, 636, 647, 654, 658, 662, 668, 676, 678, 679, 681, 702, 717, 738, 803, 805, 806, 807, 808, 810, 812, 817, 818, 819, 822, 823, 825, 827, 830, 838, 841, 843, 846, 847, 848, 872, 880, 881, 886, 887, 888, 891, 901, 903, 915, 916, 917, 918, 929, 966, 967, 968, 972, 994, 1000, 1005, 1007, 1014, 1017, 1019, 1020, 1034, 1036, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1053], "integr": [0, 53, 78, 104, 162, 177, 200, 305, 319, 326, 363, 373, 377, 378, 379, 381, 383, 389, 393, 412, 417, 446, 718, 758, 789, 978, 1003, 1011, 1028, 1035, 1037, 1038, 1046, 1047, 1051, 1053], "intel": [1004, 1023], "intelex": [393, 1023], "intellectu": 184, "intellig": [97, 165, 262, 350, 372, 407, 414, 448, 556, 557, 641, 699, 728, 837, 864, 865, 1005, 1016, 1024, 1028], "intend": [91, 92, 125, 211, 251, 343, 350, 375, 376, 382, 387, 389, 403, 407, 411, 468, 584, 676, 702, 876, 877, 887, 905, 924, 999, 1000, 1004, 1008, 1015, 1023, 1053], "intens": [100, 124, 288, 372, 376, 387, 389, 412, 443, 447, 459, 609, 610, 635, 636, 805, 993, 1011, 1028, 1042], "intention": 65, "inter": [2, 76, 142, 358, 414, 719], "interact": [2, 43, 148, 150, 182, 210, 235, 239, 269, 318, 374, 376, 377, 379, 381, 387, 389, 390, 401, 408, 560, 561, 562, 563, 635, 636, 882, 886, 993, 996, 1000, 1001, 1002, 1009, 1011, 1014, 1022, 1024, 1036, 1041, 1048, 1049], "interaction_cst": [186, 322, 414, 562, 563, 1049], "interaction_onli": [44, 882, 1000, 1014], "interactiveshellapp": 381, "intercept": [124, 203, 207, 219, 227, 347, 389, 482, 483, 484, 550, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 683, 690, 882, 886, 889, 907, 908, 914, 1000, 1002, 1004, 1009, 1018, 1019, 1037, 1039, 1043, 1044], "intercept_": [195, 201, 203, 219, 245, 337, 344, 347, 389, 482, 483, 484, 550, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 683, 907, 908, 909, 910, 911, 912, 913, 998, 1000, 1018, 1019, 1034, 1041, 1046, 1048, 1051], "intercept_hidden_": 863, "intercept_init": [669, 670, 671, 679, 681], "intercept_sc": [204, 661, 662, 907, 908, 914, 1000, 1019], "intercept_visible_": 863, "intercepts_": [864, 865, 1008], "interchang": [1023, 1051], "interclass": 76, "interdepend": 516, "interest": [0, 44, 46, 53, 78, 80, 84, 89, 96, 100, 105, 135, 147, 155, 162, 165, 174, 180, 185, 186, 187, 200, 210, 211, 212, 228, 231, 242, 261, 262, 265, 268, 269, 271, 277, 282, 285, 325, 326, 339, 346, 351, 357, 362, 370, 372, 375, 377, 380, 381, 383, 387, 390, 406, 407, 409, 412, 415, 417, 494, 495, 501, 505, 511, 649, 650, 907, 994, 1000, 1001, 1004, 1009, 1010, 1011, 1024, 1028, 1034, 1051], "interestingli": [110, 165, 1014], "interfac": [2, 43, 135, 182, 368, 369, 376, 377, 379, 384, 387, 389, 411, 417, 418, 441, 445, 450, 497, 554, 702, 803, 806, 807, 817, 867, 868, 893, 988, 993, 1007, 1019, 1023, 1024, 1028, 1034, 1036, 1039, 1040, 1042, 1043, 1048, 1050], "interfer": [324, 1044], "interim": 1041, "interior": [673, 1000, 1049], "interleav": [2, 371, 387, 523], "intermedi": [44, 47, 86, 89, 140, 147, 247, 339, 387, 415, 560, 561, 622, 867, 1004, 1046, 1052], "intern": [0, 44, 64, 104, 114, 126, 141, 145, 148, 150, 165, 170, 180, 182, 210, 244, 262, 282, 288, 290, 307, 314, 330, 352, 358, 363, 370, 372, 377, 381, 384, 387, 389, 398, 403, 404, 407, 411, 412, 414, 415, 416, 417, 418, 437, 439, 444, 465, 468, 512, 535, 536, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 595, 596, 613, 614, 643, 646, 649, 655, 671, 675, 679, 681, 699, 711, 734, 737, 761, 762, 786, 833, 847, 848, 863, 864, 865, 867, 868, 872, 886, 888, 902, 903, 905, 907, 908, 909, 912, 915, 916, 917, 918, 1000, 1001, 1002, 1004, 1007, 1010, 1014, 1016, 1019, 1020, 1025, 1028, 1034, 1037, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "internet": [370, 380, 1004, 1014], "interop": 1023, "interoper": [401, 403, 417, 1024], "interp": [277, 278, 339], "interp1d": [656, 666, 687], "interp_tpr": 278, "interpol": [44, 54, 69, 76, 84, 85, 88, 92, 114, 121, 124, 173, 176, 182, 191, 192, 202, 226, 240, 246, 277, 283, 292, 293, 300, 306, 329, 339, 417, 638, 648, 656, 666, 675, 687, 703, 710, 850, 858, 868, 882, 886, 995, 1000, 1004, 1014, 1025, 1041, 1046], "interpret": [44, 65, 150, 165, 176, 182, 183, 184, 186, 203, 210, 211, 215, 226, 228, 261, 268, 270, 271, 282, 306, 309, 312, 319, 326, 350, 352, 362, 373, 375, 376, 381, 383, 384, 389, 392, 405, 407, 408, 413, 415, 452, 464, 465, 467, 497, 542, 573, 614, 642, 646, 656, 675, 676, 694, 695, 698, 704, 732, 756, 761, 762, 786, 795, 796, 809, 818, 830, 831, 833, 836, 868, 880, 887, 998, 1000, 1004, 1005, 1011, 1012, 1014, 1020, 1023, 1025, 1034, 1035, 1039, 1042, 1047, 1048, 1049, 1053], "interquartil": [247, 885, 897], "interquartile_rang": 885, "interrog": 415, "interrupt": [1000, 1004], "intersect": [269, 336, 404, 407, 741], "interv": [2, 53, 65, 134, 150, 176, 182, 196, 210, 211, 212, 228, 268, 370, 389, 405, 411, 414, 417, 438, 439, 517, 518, 519, 558, 559, 561, 563, 565, 566, 638, 639, 641, 680, 745, 751, 753, 807, 824, 833, 870, 872, 886, 909, 910, 911, 937, 996, 1000, 1004, 1014, 1020, 1025, 1041, 1045], "intervent": [89, 185], "intl": [65, 411], "intp": [422, 451, 453], "intra": [44, 590, 593, 795, 796], "intract": [90, 412, 1001, 1009], "intric": [214, 513], "intricaci": 375, "intrins": [192, 389, 412, 414, 1007, 1012, 1018, 1046], "introduc": [44, 110, 112, 113, 126, 150, 164, 182, 187, 192, 196, 203, 214, 236, 241, 244, 247, 249, 275, 322, 323, 326, 352, 371, 373, 375, 377, 379, 380, 383, 387, 389, 398, 405, 407, 409, 411, 412, 414, 415, 431, 441, 442, 443, 445, 447, 449, 459, 464, 468, 482, 483, 484, 485, 497, 505, 516, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 556, 557, 567, 568, 569, 570, 571, 583, 584, 585, 591, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 609, 610, 630, 631, 632, 633, 638, 641, 642, 643, 644, 645, 661, 667, 688, 689, 691, 692, 695, 833, 851, 856, 859, 863, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 901, 905, 998, 1000, 1003, 1006, 1007, 1010, 1014, 1016, 1018, 1019, 1025, 1034, 1035, 1040, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1052, 1053], "introduct": [164, 228, 266, 375, 406, 411, 412, 415, 592, 791, 792, 842, 846, 1000, 1002, 1004, 1006, 1022, 1029, 1030], "introductori": [128, 147, 168, 169, 174, 175, 177, 178, 182, 236, 417, 614, 625, 1025, 1028], "introspect": [44, 46, 104, 381, 560, 561, 591, 1014], "intrus": 370, "intuit": [44, 53, 68, 80, 86, 96, 126, 135, 138, 144, 160, 169, 185, 186, 211, 212, 232, 237, 269, 285, 293, 310, 313, 336, 339, 343, 351, 375, 389, 405, 407, 409, 411, 413, 648, 785, 786, 787, 790, 878, 907, 909, 910, 912, 913, 996, 1000, 1001, 1004, 1005, 1011, 1014, 1015, 1019, 1028, 1034], "inv": [110, 114, 304], "inv_boxcox": 1053, "inv_kw_arg": 871, "invalid": [2, 48, 210, 389, 446, 580, 674, 715, 777, 992, 1000, 1004, 1040, 1042, 1044, 1045, 1047, 1048, 1050, 1053], "invalidparametererror": 1004, "invalu": 1028, "invari": [76, 372, 389, 407, 417, 617, 692, 750, 821, 822, 1000, 1001, 1004, 1019, 1024, 1042, 1045, 1046, 1047], "invent": 1007, "inventor": 1006, "inventori": 1028, "invers": [2, 8, 52, 88, 109, 110, 111, 135, 182, 258, 275, 277, 291, 339, 351, 352, 367, 389, 408, 410, 411, 412, 414, 415, 419, 445, 465, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 528, 534, 535, 536, 540, 542, 544, 558, 562, 565, 591, 592, 593, 631, 647, 648, 661, 662, 669, 671, 677, 678, 679, 680, 681, 683, 727, 746, 755, 800, 801, 849, 850, 857, 858, 864, 865, 867, 871, 874, 880, 881, 883, 899, 900, 907, 908, 909, 912, 913, 915, 917, 939, 998, 1000, 1004, 1007, 1008, 1014, 1018, 1019, 1025, 1029, 1030, 1034, 1037, 1042, 1045, 1046, 1048, 1052, 1053], "inverse_components_": [899, 900, 1016, 1048], "inverse_func": [108, 185, 408, 465, 871, 1014, 1042, 1052], "inverse_transform": [45, 85, 88, 126, 162, 292, 351, 398, 412, 415, 445, 465, 482, 483, 484, 534, 535, 536, 539, 540, 541, 542, 544, 545, 583, 590, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 633, 803, 806, 807, 817, 867, 871, 872, 874, 875, 876, 877, 878, 880, 881, 883, 884, 885, 887, 899, 900, 1014, 1015, 1016, 1036, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "invert": [114, 126, 162, 231, 351, 352, 387, 409, 415, 633, 692, 696, 1014, 1043], "invert_yaxi": [181, 352], "invest": [381, 1028], "investig": [126, 131, 135, 181, 346, 375, 401, 1000], "invok": [377, 532, 538, 540, 546, 547, 568, 570, 571, 802, 825, 828, 904, 1046, 1051], "involv": [313, 315, 317, 325, 339, 343, 362, 364, 370, 375, 389, 390, 401, 410, 417, 702, 835, 836, 1001, 1005, 1007, 1011, 1012, 1019, 1023, 1028, 1042], "invscal": [304, 679, 680, 681, 864, 865, 1018], "io": [369, 372, 375, 379, 381, 383, 389, 695, 1023, 1030, 1032], "ioangatop": 1051, "ioanni": 737, "ioerror": 1050, "iofal": 1048, "ion": 1049, "ionescu": [645, 996, 1044], "iowa": [144, 155, 247], "ipca": [2, 125, 534, 535], "ipdb": 383, "ipm": 673, "ipynb": [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 184, 185, 186, 187, 188, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357], "ipython": [377, 380, 381, 383], "ipython_config": 381, "iq": 184, "iqbal": 1046, "iqr": [247, 885, 897], "ir": [240, 412, 592, 729, 759, 842, 846, 1002, 1004], "iren": [1049, 1050], "iri": [2, 51, 56, 67, 68, 70, 77, 107, 120, 123, 125, 131, 134, 135, 136, 137, 139, 153, 156, 161, 168, 170, 173, 174, 177, 182, 190, 191, 204, 209, 242, 245, 251, 255, 261, 273, 274, 277, 278, 291, 297, 299, 303, 304, 310, 319, 327, 332, 334, 335, 337, 339, 341, 342, 343, 344, 353, 354, 356, 357, 368, 369, 388, 401, 407, 408, 411, 412, 414, 497, 505, 542, 550, 554, 558, 565, 613, 625, 634, 679, 803, 817, 902, 903, 904, 907, 912, 915, 919, 920, 921, 922, 993, 994, 998, 1003, 1004, 1007, 1011, 1014, 1017, 1018, 1019, 1020, 1025, 1030, 1047], "iris": [127, 274, 275], "iris_61": 369, "iris_969": 369, "iris_version_3": 369, "irreduc": [138, 1004], "irregular": [174, 343, 407, 1007], "irregularities_kernel": 174, "irrelev": [160, 196, 358, 381, 409, 414, 416, 606, 743, 1004], "irrespect": [210, 241, 262, 277, 288, 608], "irvin": 372, "is_categor": 635, "is_categorical_": [562, 563], "is_classifi": [2, 377, 389, 1053], "is_cluster": [2, 1053], "is_data_valid": [674, 1000], "is_fit": [2, 987], "is_fitted_": [421, 424, 426, 429, 430], "is_inli": [469, 564, 853], "is_leav": 357, "is_max_test_scor": 106, "is_model_valid": [674, 1000], "is_multilabel": [2, 384, 1051], "is_outlier_detector": [2, 1053], "is_paramet": 991, "is_pypi": 1052, "is_regressor": [2, 377, 389, 1053], "is_scalar_nan": 1047, "is_sh": 279, "is_split_nod": 357, "is_stationari": [177, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628], "isa": 58, "isaac": [1040, 1041, 1043, 1044, 1051], "isaack": 1047, "isaactrost": 1051, "isakov": 1046, "isbn": [372, 407, 1000], "isclos": 56, "isdigit": [58, 415], "ish": 70, "ishaan": 1047, "ishan": [1047, 1048], "ishank": [1039, 1040, 1041], "ishikawa": [1046, 1047], "isin": 329, "isinst": [71, 143, 203, 228, 377, 389], "islic": [48, 80, 96], "ism": 1038, "isn": [165, 317, 350, 352, 358, 363, 375, 379, 383, 516, 562, 563, 596, 797, 806, 807, 880, 1007, 1019, 1044, 1052], "iso": [137, 168, 182, 222, 232, 613, 616, 617, 1025], "iso_reg": 638, "isoformat": 56, "isol": [2, 144, 151, 237, 247, 351, 373, 381, 393, 564, 853, 911, 1043, 1044], "isolationforest": [2, 134, 182, 213, 237, 247, 308, 634, 833, 911, 1010, 1025, 1040, 1041, 1042, 1043, 1045, 1047, 1048, 1049, 1050, 1051, 1053], "isolationforestifittedisolationforest": 151, "isomap": [2, 52, 86, 140, 182, 229, 232, 234, 241, 298, 317, 321, 414, 503, 545, 550, 567, 692, 693, 694, 695, 856, 868, 877, 900, 1007, 1025, 1029, 1030, 1042, 1044, 1047, 1048, 1049, 1050, 1051], "isomap__n_neighbor": 317, "isometr": [230, 691, 693, 694, 695, 1001], "isoton": [2, 62, 63, 106, 108, 182, 236, 437, 638, 639, 640, 660, 936, 1025, 1026, 1030, 1035, 1036, 1037, 1038, 1040, 1047, 1050], "isotonic_regress": [2, 638, 1047], "isotonicregress": [2, 240, 995, 1035, 1036, 1037, 1038, 1040, 1042, 1043, 1044, 1046, 1048, 1049, 1050], "isotonicregression0": 638, "isotrop": [2, 71, 89, 91, 95, 126, 171, 173, 230, 232, 407, 409, 417, 513, 520, 533, 618, 622, 623, 625, 626], "isotropi": 412, "isr": 416, "issam": [0, 1040], "issu": [0, 2, 44, 63, 111, 117, 207, 210, 228, 273, 315, 326, 363, 369, 378, 379, 380, 384, 387, 389, 390, 392, 393, 398, 401, 403, 407, 409, 410, 415, 449, 452, 462, 473, 482, 483, 484, 535, 540, 544, 574, 590, 591, 593, 614, 630, 694, 698, 772, 878, 880, 883, 895, 940, 994, 1001, 1004, 1012, 1014, 1019, 1023, 1024, 1027, 1034, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1049, 1051, 1052, 1053], "issuenumb": 383, "ist": 416, "isupp": 415, "isuru": 1046, "itakura": [412, 539, 541, 548, 1041], "itali": 372, "item": [2, 48, 49, 50, 51, 52, 53, 56, 67, 79, 89, 108, 139, 141, 144, 147, 155, 185, 208, 212, 218, 231, 243, 244, 246, 255, 265, 271, 275, 321, 329, 351, 368, 375, 376, 377, 384, 408, 464, 527, 562, 563, 590, 591, 593, 635, 815, 880, 902, 903, 922, 929, 957, 996, 1017, 1024], "item_idx": 308, "iter": [2, 48, 55, 56, 68, 81, 105, 114, 121, 124, 135, 138, 141, 143, 145, 146, 148, 149, 150, 165, 180, 182, 192, 193, 218, 225, 255, 256, 260, 263, 276, 279, 303, 305, 306, 310, 319, 329, 331, 332, 339, 375, 381, 383, 384, 388, 389, 402, 407, 410, 412, 414, 416, 419, 437, 440, 441, 443, 445, 447, 448, 449, 452, 454, 459, 461, 462, 463, 471, 472, 478, 482, 483, 484, 516, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 560, 561, 562, 563, 565, 568, 569, 583, 584, 590, 591, 593, 595, 596, 604, 613, 630, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 838, 841, 856, 863, 864, 865, 866, 867, 871, 878, 880, 882, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 922, 945, 950, 951, 958, 959, 960, 961, 969, 993, 994, 1000, 1001, 1003, 1004, 1007, 1008, 1009, 1017, 1018, 1019, 1020, 1025, 1028, 1030, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1053], "iter_minibatch": 48, "iter_offset": 1048, "iter_offset_": 1048, "iterated_pow": [105, 533, 536, 542, 1040], "iterative_impute_scor": 181, "iterativeimput": [2, 179, 181, 182, 379, 398, 490, 566, 582, 631, 632, 633, 642, 648, 675, 829, 850, 868, 1025, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053], "itergrid": 1036, "itertool": [48, 78, 80, 96, 156, 186, 199, 254, 259, 268, 275, 277, 414], "ith": [497, 777, 781, 843, 864, 865, 880, 881], "ith_cluster_silhouette_valu": 94, "itk": [1044, 1045, 1046], "its": [0, 2, 7, 26, 44, 49, 52, 53, 54, 58, 64, 65, 71, 73, 89, 99, 100, 110, 112, 114, 117, 119, 126, 127, 133, 135, 141, 143, 145, 147, 150, 165, 169, 174, 176, 185, 186, 188, 190, 192, 200, 207, 223, 227, 228, 232, 237, 244, 246, 247, 249, 251, 253, 258, 259, 262, 267, 271, 273, 275, 277, 282, 288, 290, 294, 295, 310, 320, 326, 331, 336, 343, 348, 350, 351, 354, 357, 358, 363, 364, 368, 369, 370, 371, 375, 376, 377, 379, 380, 383, 387, 388, 389, 390, 393, 395, 398, 401, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 423, 440, 442, 444, 446, 450, 454, 456, 460, 463, 464, 465, 467, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 498, 504, 524, 532, 534, 535, 536, 538, 539, 541, 542, 543, 545, 551, 554, 556, 557, 558, 559, 560, 561, 565, 566, 567, 585, 589, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 609, 610, 614, 615, 616, 617, 618, 619, 622, 623, 624, 625, 626, 627, 628, 630, 647, 648, 674, 675, 677, 688, 689, 690, 691, 695, 699, 702, 711, 728, 732, 733, 739, 740, 744, 781, 784, 786, 800, 801, 803, 828, 835, 836, 838, 849, 850, 851, 853, 854, 855, 857, 858, 859, 866, 867, 871, 876, 879, 880, 882, 899, 900, 903, 907, 908, 909, 912, 915, 917, 933, 934, 939, 946, 973, 993, 996, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1010, 1011, 1012, 1017, 1018, 1019, 1020, 1023, 1028, 1036, 1037, 1038, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053], "itsaphel": 1052, "itself": [28, 62, 65, 83, 89, 135, 147, 151, 186, 196, 208, 244, 250, 262, 277, 288, 315, 339, 351, 362, 364, 374, 375, 377, 389, 398, 401, 405, 407, 418, 440, 441, 444, 445, 446, 469, 470, 471, 472, 473, 474, 475, 476, 528, 532, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 552, 567, 570, 585, 594, 597, 598, 600, 601, 602, 604, 605, 612, 642, 643, 644, 645, 646, 648, 658, 692, 694, 795, 796, 842, 843, 844, 845, 846, 847, 848, 852, 860, 861, 872, 873, 874, 902, 903, 960, 996, 1000, 1001, 1003, 1007, 1008, 1012, 1023, 1038, 1049], "iv": [184, 1004], "ivan": [1042, 1043, 1046, 1049, 1052, 1053], "ivanllt": 1049, "iver": 1040, "iverson": 1000, "ivicajov": 1037, "ivl": 188, "ivt": 535, "iv\u00e1n": [1041, 1047], "iwhalv": 1047, "iwona": 1051, "ix": [51, 277, 345], "iy_j": 1014, "iyer": 1045, "izadifar": 1052, "j": [0, 51, 56, 73, 74, 76, 79, 95, 103, 111, 112, 113, 135, 138, 139, 149, 163, 170, 181, 186, 222, 233, 246, 253, 267, 268, 273, 279, 292, 298, 301, 312, 322, 357, 363, 369, 370, 372, 379, 381, 387, 396, 404, 405, 407, 409, 411, 412, 414, 415, 417, 418, 437, 440, 444, 446, 453, 454, 469, 474, 499, 514, 517, 518, 519, 521, 529, 532, 535, 537, 538, 539, 541, 542, 548, 554, 560, 561, 595, 596, 635, 636, 640, 647, 648, 651, 652, 669, 670, 672, 683, 691, 692, 693, 695, 696, 697, 699, 708, 711, 713, 717, 719, 721, 724, 726, 727, 729, 758, 759, 761, 762, 777, 781, 791, 792, 795, 796, 836, 837, 844, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 878, 887, 888, 915, 916, 993, 994, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1014, 1016, 1018, 1019, 1020, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "j0rd1smit": 1046, "ja": [410, 1041], "jaccard": [2, 287, 404, 450, 457, 702, 706, 722, 732, 737, 741, 781, 782, 783, 799, 1007, 1042, 1043], "jaccard_scor": [2, 287, 706, 732, 737, 799, 1004, 1043, 1046], "jaccard_similarity_scor": [1036, 1038, 1043], "jaccarddist": 702, "jack": [1036, 1039, 1047, 1048, 1049, 1050, 1052], "jacklangerman": [1042, 1043], "jackman": 1035, "jackmartin": 1040, "jackson": [1040, 1041, 1043], "jacob": [0, 397, 1039, 1040, 1041], "jacobi": 1049, "jacobsen": 1037, "jacopo": [1042, 1043], "jacqu": [1035, 1037], "jaehong": 1044, "jaehyun": 1046, "jaewon": 1042, "jai": [1044, 1048], "jaidev": 1039, "jaim": 1044, "jaimin": 1053, "jain": [1040, 1041, 1042, 1046, 1048, 1049], "jair": 1041, "jake": [0, 397, 1022, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1046, 1048], "jakemick": 1036, "jakhar": 1046, "jakirkham": [1041, 1042, 1043, 1049, 1050], "jakob": 1053, "jakub": 1051, "jakubek": [1047, 1048], "jalali": [0, 390, 396, 401, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "jalexand3r": 1048, "jamaoui": [1042, 1043, 1046], "jame": [0, 372, 411, 837, 1005, 1034, 1035, 1036, 1037, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1050, 1051, 1053], "jamestwebb": [1036, 1037], "jami": 1042, "jamieson": 993, "jan": [0, 211, 285, 397, 886, 1034, 1037, 1038, 1039, 1040, 1042, 1043, 1046, 1050], "jana": 1044, "janet": 372, "janez": 1053, "jane\u017e": [1035, 1036], "janfidor": [1049, 1050], "janhang": 1044, "janin": 1041, "janna": 1040, "jannik": 1047, "janso": 1034, "jansson": [1037, 1049], "januari": [373, 375, 1034, 1035, 1044, 1046, 1049, 1051, 1053], "janvanrijn": [1042, 1043], "jaqu": [0, 397, 1034, 1035, 1036, 1037], "jardim": 1047, "jare": 1049, "jarfa": 1040, "jarir": 1047, "jarkko": 699, "jarosch": 1036, "jaroslaw": 1041, "jarrod": [0, 397, 1043, 1050, 1051], "jarvelin": [729, 759, 1004], "jaskowiak": 446, "jason": [45, 412, 536, 903, 1040, 1042, 1046, 1049], "jatin": [1038, 1040], "jauhar": 1048, "jauvin": 1035, "java": [407, 442], "javier": [1038, 1052], "jawahar": 996, "jax": 1051, "jay": 1041, "jaya": 1048, "jayaratn": [1045, 1046, 1049, 1050], "jayratn": 1046, "jayzed82": 1041, "jb": [1050, 1051], "jbdelafoss": 1041, "jbirch": [407, 442], "jblackburn": 1040, "jc": [1041, 1042], "jdcaballero": 1038, "jdethuren": [1042, 1043], "je": 1048, "jean": [1034, 1037, 1038, 1039, 1040, 1041, 1047], "jeann": 1048, "jeanselm": 1044, "jeb": 1042, "jeevan": 1046, "jeff": [1038, 1040, 1047, 1048], "jeffrei": [1037, 1040], "jeffrey04": [1039, 1040], "jelfner": 1048, "jell": 1037, "jen": [661, 1042], "jen09": 412, "jenatton": 412, "jenni": 1048, "jennif": 1047, "jensen": [1040, 1046], "jeong": 1044, "jeremi": [1028, 1039, 1040, 1041, 1042, 1045, 1046], "jeremiedbb": [1042, 1043, 1044], "jeremynixon": 1040, "jeroen": 1040, "jeroenpeterbo": 1046, "jeroko": 1041, "jeromedock": 1044, "jerphanion": [0, 396, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "jerryzhu": 902, "jesper": 1044, "jess": [838, 1005, 1047], "jess010": 1037, "jessica": 1040, "jessicakk0711": 1050, "jesu": [58, 350, 351], "jet": 101, "jevnik": 1039, "jewalikar": 1040, "jf": 1043, "jfraj": 1039, "jha": [1038, 1044, 1048, 1053], "jhay": 1046, "jhun": 474, "jia": 1040, "jiacheng": 1041, "jiali": 1039, "jian": 407, "jianbo": [407, 452, 462, 694], "jiang": [405, 1038, 1045], "jianzhu": 1047, "jiawei": [1050, 1051, 1052], "jiaxiang": 1046, "jiayi": 1053, "jie": [1042, 1043, 1046], "jiefangxuanyan": 1047, "jigna": 1046, "jihan": 1048, "jill": 1040, "jim": 1036, "jim0421": 1046, "jimenez": [1047, 1048], "jimmi": [864, 865, 1008, 1040, 1042], "jim\u00e9nez": [0, 365, 1042, 1045, 1046, 1047, 1048, 1049], "jin": [642, 1045, 1046], "jindal": 1046, "jinkun": 1042, "jiongyan": 1042, "jiquan": 1008, "jirair": 1053, "jirka": 1048, "jiten": 1049, "jitendra": [407, 452, 462, 694], "jitter": [135, 653, 657, 1045], "jiyuan": 1040, "jjabl": 1042, "jjmistri": 1045, "jk": 1001, "jkarolczak": 1049, "jkleint": [1041, 1042], "jl": [241, 900], "jmlr": [0, 407, 669, 670, 679, 707, 1000, 1019], "jmlr_2014": 695, "jmontoyam": 1041, "jnboehm": 1047, "jnt": 411, "joaak": [1042, 1043], "joan": [1041, 1042, 1043, 1044], "joanna": 1044, "joaquin": 1046, "job": [150, 185, 256, 262, 375, 379, 395, 414, 418, 437, 444, 446, 448, 450, 452, 457, 458, 461, 464, 467, 468, 472, 532, 536, 537, 538, 540, 543, 544, 546, 547, 549, 556, 557, 558, 559, 564, 565, 566, 567, 568, 569, 570, 571, 604, 609, 610, 613, 637, 642, 660, 691, 692, 693, 694, 695, 696, 697, 777, 781, 784, 803, 806, 807, 809, 817, 825, 826, 828, 829, 830, 831, 832, 834, 835, 836, 837, 839, 840, 849, 850, 851, 853, 855, 857, 858, 859, 860, 861, 866, 869, 902, 903, 905, 969, 1028, 1053], "joblib": [2, 42, 78, 88, 105, 141, 288, 318, 322, 370, 373, 375, 378, 384, 387, 389, 393, 400, 408, 418, 437, 441, 444, 445, 446, 448, 450, 452, 457, 458, 461, 464, 467, 472, 509, 510, 532, 536, 537, 538, 540, 543, 544, 546, 547, 549, 556, 557, 558, 559, 564, 565, 566, 567, 568, 569, 570, 571, 596, 604, 609, 610, 613, 635, 637, 642, 650, 654, 656, 658, 660, 661, 662, 664, 666, 668, 669, 671, 679, 682, 691, 692, 693, 694, 695, 696, 697, 777, 781, 784, 803, 806, 807, 809, 817, 825, 826, 828, 829, 830, 831, 832, 834, 835, 836, 837, 839, 840, 849, 850, 853, 855, 857, 858, 860, 861, 866, 867, 868, 869, 902, 903, 969, 970, 973, 988, 1004, 1024, 1030, 1034, 1035, 1037, 1039, 1041, 1042, 1043, 1045, 1046, 1049, 1051, 1052, 1053], "joblib_start_method": 387, "jochen": 1036, "jock": 103, "joe": [1039, 1052, 1053], "joei": 1050, "joel": [0, 390, 396, 415, 536, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1051, 1052, 1053], "johann": [1036, 1037, 1042, 1044, 1045, 1048], "johanna": [113, 1052], "johannah": 1040, "johanwork": 1047, "john": [372, 415, 537, 711, 738, 772, 882, 909, 910, 912, 913, 994, 1000, 1004, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1047, 1049, 1050, 1051, 1052, 1053], "johnathanpi": [1049, 1050], "johnson": [38, 89, 182, 236, 308, 312, 367, 489, 503, 883, 895, 899, 900, 901, 1014, 1021, 1025, 1030, 1042, 1048, 1050], "johnson_lindenstrauss_min_dim": [2, 241, 1016, 1035], "johnston": [165, 372, 1000, 1043], "johnstott": 1042, "johnthagen": 1049, "johnwon": 312, "join": [51, 52, 58, 89, 180, 228, 268, 310, 370, 390, 463, 1027, 1034, 1042], "joint": [147, 182, 186, 191, 196, 197, 199, 200, 209, 230, 262, 408, 614, 655, 665, 695, 842, 843, 844, 845, 846, 907, 1000, 1001, 1005, 1009, 1011, 1015, 1025, 1034], "jointli": [26, 205, 275, 407, 412, 1000], "joli": [0, 397, 1035, 1036, 1037, 1038, 1039, 1040], "jon": [350, 1041, 1044, 1045, 1047, 1048, 1051], "jona": [1046, 1051], "jonatan": 1042, "jonathan": [370, 1038, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1050], "joncral": 1040, "jone": [0, 370, 397, 1034, 1053], "jong": 1041, "jonker": [404, 722], "joona": 1034, "jordal": 1040, "jordan": [407, 412, 694, 800, 1044, 1045, 1048, 1049], "jordi": 1040, "jorg": [661, 1037, 1046, 1048], "jorgecardena": 1053, "jori": [0, 397, 1041, 1042, 1043, 1046, 1047], "jose": [165, 372, 661, 1004, 1042, 1044], "joseph": [1037, 1038, 1039, 1040, 1046, 1048, 1049, 1053], "josephsalmon": [1041, 1042, 1043], "josh": [415, 1041], "joshi": [1040, 1042, 1048, 1051, 1052], "joshua": [322, 370, 1036, 1037, 1039, 1040, 1046, 1049, 1050], "joshuakennethjon": 1043, "jos\u00e9": [726, 1037, 1047, 1052], "jotasi": 1042, "joudet": [1041, 1042], "journal": [0, 113, 186, 268, 274, 285, 369, 370, 372, 405, 407, 409, 414, 452, 462, 473, 535, 542, 630, 638, 648, 692, 695, 696, 708, 718, 734, 737, 738, 761, 762, 789, 832, 837, 883, 895, 993, 994, 998, 1000, 1001, 1002, 1004, 1005, 1011, 1016, 1018, 1019], "jovan": [1048, 1049], "joydeep": 407, "jo\u00e3o": [1049, 1052, 1053], "jo\u00ebl": 1042, "jpcar": 1052, "jpeg": [369, 370, 494, 495], "jpfrancoia": [1040, 1041], "jpg": [507, 586, 589], "jpienaar": [1052, 1053], "jpm": 52, "jpmml": 1023, "jpmorgan": [52, 1028], "jr": 1000, "jrenni": 844, "jrfiedler": 1040, "jschendel": [1041, 1042], "jschuerz": 1048, "json": [53, 369, 375, 393], "jth": [777, 781], "juan": [0, 365, 1034, 1045, 1046, 1047, 1048, 1049], "juanfe88": 1049, "judg": [92, 216, 407], "judgment": [259, 1004], "judithabk6": 1045, "juergen": [1044, 1049], "jul": 277, "juli": [165, 372, 416, 737, 888, 1014, 1037, 1041, 1042, 1043, 1052], "julia": [407, 720, 740, 798], "julian": [1041, 1042, 1052, 1053], "juliankahnert": 1040, "juliaschoepp": [1049, 1050], "juliathebrav": 1040, "julien": [0, 396, 661, 1000, 1028, 1034, 1037, 1041, 1042, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "juliet": 1042, "julietcl": 1042, "julio": 1047, "julyrashchenko": 1047, "jumon": 1045, "jump": [44, 211, 308, 372, 375, 415, 886], "jumpi": 415, "june": [407, 1001, 1040, 1050], "juneja": [1052, 1053], "jung": [1041, 1045, 1049], "jungkook": 1039, "jungl": 1001, "jupyt": [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 184, 185, 186, 187, 188, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 376, 377, 408, 468, 905, 1020, 1023, 1024, 1045, 1048], "jupyterlit": [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 184, 185, 186, 187, 188, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357], "jurgen": 1028, "juri": 567, "jurman": 746, "just": [44, 53, 68, 103, 117, 121, 141, 144, 150, 165, 201, 231, 242, 262, 268, 275, 279, 288, 303, 339, 350, 351, 357, 358, 370, 374, 375, 376, 377, 379, 380, 383, 387, 388, 389, 404, 406, 407, 408, 411, 414, 416, 419, 468, 534, 536, 543, 547, 556, 557, 558, 559, 560, 561, 564, 565, 566, 567, 581, 586, 613, 614, 649, 655, 660, 661, 663, 665, 669, 670, 671, 679, 680, 681, 809, 826, 856, 864, 865, 993, 1000, 1003, 1004, 1005, 1008, 1012, 1014, 1018, 1024, 1034, 1038, 1040, 1042, 1046, 1050], "justglow": 1043, "justif": 679, "justifi": [375, 381, 405, 566], "justin": [1036, 1042, 1046], "jvm": 1047, "jygerardi": [1049, 1050], "j\u00e9r\u00e9mie": [0, 396, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "j\u00e9r\u00f4me": [1043, 1044, 1045, 1051, 1052, 1053], "j\u00eann": 1040, "j\u00f6rg": [407, 450, 457, 1042], "j\u00f6rn": 1041, "j\u00f8rgensen": [1000, 1051], "k": [2, 34, 51, 52, 55, 56, 58, 62, 64, 67, 68, 72, 73, 74, 76, 78, 81, 83, 84, 87, 89, 90, 94, 97, 99, 107, 108, 112, 119, 121, 128, 135, 137, 143, 147, 151, 153, 154, 156, 157, 161, 162, 165, 170, 172, 173, 177, 178, 181, 182, 185, 186, 187, 188, 193, 195, 199, 203, 205, 212, 222, 224, 241, 243, 245, 246, 247, 253, 256, 264, 268, 271, 272, 277, 278, 281, 282, 288, 290, 293, 294, 295, 296, 297, 299, 300, 301, 309, 310, 311, 312, 315, 317, 321, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 349, 350, 352, 357, 358, 363, 370, 372, 375, 383, 384, 387, 389, 398, 403, 404, 405, 408, 409, 410, 412, 413, 414, 415, 416, 417, 419, 440, 443, 446, 447, 448, 449, 450, 451, 452, 453, 459, 460, 462, 469, 472, 488, 503, 513, 524, 532, 538, 542, 545, 546, 547, 550, 551, 554, 556, 558, 559, 560, 583, 591, 592, 593, 594, 596, 597, 598, 600, 601, 602, 608, 609, 610, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 634, 642, 643, 651, 653, 654, 656, 657, 658, 659, 661, 662, 666, 667, 668, 669, 670, 672, 682, 683, 685, 686, 687, 688, 689, 691, 694, 698, 699, 707, 708, 711, 720, 729, 740, 746, 759, 761, 762, 764, 769, 772, 777, 778, 779, 780, 782, 796, 797, 798, 800, 801, 804, 808, 810, 811, 812, 815, 818, 819, 821, 822, 824, 825, 831, 842, 847, 848, 849, 850, 851, 852, 853, 855, 857, 858, 859, 860, 861, 868, 872, 873, 874, 878, 879, 880, 882, 883, 887, 895, 900, 914, 922, 936, 946, 951, 977, 993, 994, 996, 997, 998, 1000, 1001, 1002, 1003, 1006, 1008, 1009, 1010, 1012, 1017, 1018, 1019, 1020, 1023, 1025, 1029, 1030, 1034, 1035, 1036, 1037, 1040, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1051, 1052, 1053], "k0": 998, "k1": [417, 624, 627], "k1__": 417, "k1__constant_valu": 173, "k1__k1": 417, "k1__k1__constant_valu": 417, "k1__k1__constant_value_bound": 417, "k1__k2": 417, "k1__k2__length_scal": [175, 417], "k1__k2__length_scale_bound": 417, "k2": [417, 624, 627], "k2__": 417, "k2__length_scal": 417, "k2__length_scale_bound": 417, "k_": [404, 417, 619, 622, 624, 627, 777, 996, 1014], "k_1": [2, 417, 624, 627], "k_2": [2, 417, 624, 627], "k_best": [594, 904, 1017, 1051], "k_diag": [615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628], "k_fit_all_": 873, "k_fit_rows_": 873, "k_gradient": [615, 616, 617, 618, 619, 622, 623, 624, 625, 626, 627, 628], "k_init": [443, 459], "k_mean": [2, 98, 384, 389, 1042, 1050], "k_means_cluster_cent": 98, "k_means_elkan": 1042, "k_means_label": 98, "k_new": 873, "k_ret": [847, 848], "k_true": [847, 848], "ka00ri": [1049, 1050], "kachaiev": 1051, "kaczmarzyk": 1051, "kadatatlu": 1047, "kadota": 1048, "kaggl": [155, 388, 1004], "kahni": 1046, "kai": [372, 564, 1010, 1041], "kaicheng": 1038, "kaichogami": 1040, "kailasa": [1048, 1049], "kaim": [864, 865], "kaiser": [412, 533], "kakati": 1049, "kalli": [1042, 1043], "kalyan": 1040, "kamalakerdadi": [1039, 1040], "kamar": 1042, "kamchyev": 1051, "kamel": 1034, "kamishima": [1040, 1041], "kamm": 1004, "kanai": [1040, 1041, 1042], "kanazu": [1049, 1050], "kanchimo": 1052, "kang": [1042, 1044], "kania": [1049, 1050], "kanika": 1044, "kanishk": 1049, "kanissh": 1049, "kanji": 1047, "kanniah": [1037, 1038], "kansal": 1040, "kapadni": 1049, "kapeln": [186, 1011], "kapoor": [1042, 1043], "kappa": [2, 537, 719], "kapur": 1041, "kar": 1040, "karan": [1041, 1042, 1043], "karayev": 1036, "karbownik": 1047, "karen": 1047, "karger": [844, 1006], "karhunen": 535, "karin": [630, 994], "karl": 1042, "karlo": [1051, 1052], "karnofski": 1041, "karnowski": 1046, "karol": 1037, "kartik": 1046, "karypi": 407, "kaseorg": 1044, "kashif": 1039, "kasim": 1038, "kaski": 699, "kasper": 1042, "kassa": [1049, 1050], "kastner": [0, 397, 1036, 1037, 1038, 1045, 1046], "kat": 1041, "kataev": [1042, 1043], "kataki": [723, 737, 743, 1004], "katarina": [1044, 1046], "katheleen": 369, "kathi": [1041, 1044], "kathleen": 1041, "kathryn": 1045, "kati": 1041, "katotten": 1048, "katrin": [1042, 1043], "katrina": 1045, "katriopla": 1042, "katyal": 1044, "katz": [1039, 1046, 1047], "katzfuss": 1004, "kaufmann": [1016, 1020, 1046], "kaushik": [1041, 1048, 1049, 1050, 1052], "kaushik94": 1037, "kawamura": 1047, "kawwa": 1047, "kayawari": 1047, "kaylani2": 1046, "kaynak": 372, "kazmar": 1038, "kb": [104, 185, 186, 262], "kbest": [105, 594], "kbin": [315, 322], "kbinsdiscret": [2, 44, 87, 119, 182, 193, 210, 228, 248, 307, 310, 315, 322, 347, 513, 606, 660, 870, 886, 916, 1014, 1025, 1042, 1046, 1047, 1048, 1050, 1052], "kbinsdiscretizer__n_bin": 310, "kcachegrind": 378, "kd": [293, 407, 413, 1007, 1042, 1043, 1044], "kd_tree": [418, 444, 446, 450, 457, 691, 692, 849, 850, 851, 852, 853, 855, 857, 858, 859, 1007, 1047, 1051], "kdd": [190, 370, 405, 437, 1016], "kdd06_rp": 900, "kddcup": [247, 368, 493, 1030], "kddcup99": [2, 370, 493], "kde": [184, 185, 282, 285, 292, 293, 301, 413, 852], "kdt": 1007, "kdtree": [2, 446, 450, 457, 691, 692, 847, 849, 850, 851, 852, 853, 855, 857, 858, 859, 1036, 1038, 1042, 1046, 1047, 1050, 1051], "ke": [414, 1045, 1046], "kearn": 1037, "keat": [1049, 1050], "keep": [0, 46, 53, 65, 78, 108, 124, 126, 141, 150, 164, 175, 180, 184, 185, 186, 187, 188, 196, 207, 210, 211, 212, 218, 228, 251, 258, 263, 266, 312, 313, 320, 329, 339, 350, 351, 354, 358, 362, 363, 367, 375, 377, 379, 388, 389, 405, 407, 408, 409, 410, 411, 412, 430, 450, 465, 482, 483, 484, 485, 494, 495, 535, 541, 542, 545, 548, 555, 557, 559, 561, 563, 566, 569, 571, 597, 600, 602, 605, 614, 637, 638, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 664, 665, 666, 667, 668, 670, 673, 675, 676, 679, 680, 681, 682, 711, 821, 840, 841, 850, 858, 864, 865, 903, 908, 910, 913, 916, 918, 1000, 1005, 1009, 1012, 1014, 1024, 1027, 1028, 1030, 1034, 1039, 1042, 1043, 1047, 1048, 1050, 1052], "keep_empty_featur": [630, 631, 633, 994, 1049, 1053], "keerti": 1049, "kegl": 1038, "kei": [2, 48, 50, 53, 56, 78, 127, 141, 144, 155, 180, 184, 228, 244, 247, 250, 269, 271, 272, 318, 319, 320, 321, 322, 323, 324, 325, 326, 364, 368, 377, 380, 381, 382, 387, 389, 390, 393, 398, 407, 408, 411, 417, 464, 472, 562, 563, 568, 569, 570, 571, 590, 593, 596, 612, 620, 629, 635, 637, 662, 714, 803, 806, 807, 815, 817, 825, 830, 866, 867, 922, 938, 968, 1012, 1024, 1030, 1031, 1040, 1046, 1047, 1049, 1050, 1052], "keidar": 1053, "keith": [350, 1034, 1039], "kekalainen": [729, 759, 1004], "kelkar": [1041, 1042, 1044], "kelleh": [711, 1004], "kelleher2015": 1004, "kellei": [370, 1036, 1037], "keller": 1046, "kellogg": 52, "kellycarmodi": 1044, "kemal": [0, 1036, 1037], "kemenad": 1045, "kemk": 1045, "ken": [372, 1036, 1043], "ken4git": 1048, "kendal": 1049, "kendrick": 1046, "kennedi": [1041, 1044, 1051], "kennel": 1045, "kenneth": [1016, 1034, 1035, 1040, 1041, 1048, 1049], "kenni": 1046, "kensuk": 1044, "kent": 58, "kenta": 1037, "kento": [1049, 1050], "kept": [65, 258, 288, 346, 369, 401, 417, 497, 536, 539, 541, 542, 548, 599, 612, 613, 614, 622, 623, 647, 698, 800, 801, 934, 1014, 1042, 1043], "kera": [387, 1023], "kerimov": [1041, 1042], "kernal": 126, "kernc": [1034, 1048, 1049], "kernel": [2, 24, 25, 28, 43, 46, 49, 50, 51, 67, 68, 69, 85, 100, 107, 117, 120, 122, 130, 133, 156, 163, 168, 170, 171, 172, 173, 176, 180, 195, 211, 219, 224, 236, 237, 245, 249, 261, 266, 268, 270, 273, 274, 278, 283, 289, 294, 299, 313, 320, 330, 333, 334, 336, 337, 339, 340, 341, 342, 344, 347, 358, 362, 367, 377, 387, 389, 395, 405, 407, 408, 411, 414, 415, 430, 440, 448, 452, 461, 462, 465, 482, 483, 484, 491, 497, 499, 503, 505, 515, 534, 535, 536, 542, 545, 555, 557, 559, 561, 563, 566, 569, 571, 595, 596, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 634, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 664, 665, 666, 667, 668, 670, 673, 675, 676, 679, 680, 681, 682, 691, 693, 694, 695, 698, 738, 761, 762, 764, 769, 770, 777, 778, 779, 780, 803, 809, 814, 817, 833, 835, 840, 841, 847, 848, 850, 852, 858, 865, 867, 868, 873, 877, 879, 880, 882, 887, 902, 903, 907, 908, 909, 910, 911, 912, 913, 916, 918, 924, 993, 999, 1000, 1001, 1004, 1005, 1007, 1010, 1017, 1018, 1025, 1026, 1029, 1030, 1034, 1035, 1036, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "kernel_": [169, 170, 171, 172, 173, 174, 175, 176, 178, 613, 614], "kernel__length_scal": 169, "kernel__period": 169, "kernel_approxim": [2, 44, 180, 182, 189, 190, 224, 237, 242, 319, 641, 642, 643, 644, 645, 680, 761, 762, 873, 996, 1025, 1035, 1041, 1051], "kernel_dens": [847, 848], "kernel_label": 345, "kernel_metr": [2, 642, 643, 644, 645], "kernel_param": [452, 536, 642, 646], "kernel_pca": [45, 126, 408], "kernel_pca_": 691, "kernel_pca_back_proj_ax": 126, "kernel_pca_proj_ax": 126, "kernel_ridg": [2, 169, 243, 646, 1005, 1038], "kernel_ridge_tun": 169, "kernel_svm": 242, "kernel_svm_scor": 242, "kernel_svm_tim": 242, "kernelapproximationkernel": 395, "kernelcenter": [2, 403, 1014, 1044, 1048, 1050, 1051], "kerneldens": [2, 292, 293, 301, 413, 1036, 1042, 1043, 1047, 1048, 1049], "kernelpca": [2, 45, 408, 412, 534, 535, 542, 545, 691, 693, 695, 873, 1014, 1035, 1036, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1051], "kernelridg": [2, 126, 169, 243, 675, 997, 1005, 1038, 1051], "kertesz": 1048, "keshat": [669, 670, 1000], "keshavan": 1044, "kesshi": [1044, 1045], "kevad": 1044, "kevin": [646, 1036, 1038, 1040, 1041, 1044, 1045, 1046, 1048, 1049, 1051, 1053], "kevlani": 1042, "keyber": 1052, "keyerror": [922, 1044], "keyword": [350, 369, 375, 377, 380, 382, 389, 407, 418, 421, 438, 444, 445, 450, 452, 457, 464, 467, 497, 504, 536, 539, 541, 560, 561, 568, 569, 570, 571, 612, 623, 634, 635, 642, 646, 649, 650, 655, 656, 663, 664, 665, 666, 684, 687, 691, 695, 700, 701, 702, 703, 704, 705, 777, 781, 782, 783, 784, 795, 796, 809, 826, 847, 848, 849, 850, 851, 853, 855, 857, 858, 859, 860, 861, 867, 871, 946, 970, 993, 1001, 1004, 1007, 1017, 1034, 1038, 1040, 1041, 1042, 1044, 1046, 1048, 1049, 1050, 1051, 1052, 1053], "kf": [411, 808], "kfold": [2, 88, 141, 146, 263, 273, 358, 411, 437, 472, 568, 569, 596, 604, 650, 654, 656, 658, 664, 666, 668, 676, 803, 806, 807, 809, 811, 813, 817, 822, 824, 826, 827, 828, 829, 830, 831, 832, 834, 838, 841, 888, 1035, 1036, 1037, 1039, 1040, 1042, 1044, 1052], "khaja": 1049, "khan": [1049, 1050], "khandelw": 1046, "khanduja": 1037, "khant": 1049, "kharsa": 1048, "khedkar": 1048, "khine": 1048, "kho": 1049, "khoo": 1046, "khosasi": 1047, "khosrow": 1004, "khoual": 1047, "khwaja": 1049, "ki": 1004, "kian": [1039, 1049, 1050, 1051], "kid": 1014, "kieker": [1042, 1043], "kielczewski": 1040, "kie\u00dfl": 1045, "kilian": [415, 1049, 1050], "kill": [350, 387], "killer": [375, 1028], "kilobyt": 87, "kilomet": 767, "kim": [1000, 1042, 1043, 1044, 1048, 1053], "kimayoung": 1048, "kimberli": 52, "kimbinyi": 1046, "kind": [44, 49, 52, 53, 62, 63, 108, 129, 141, 155, 160, 185, 186, 258, 261, 262, 264, 277, 315, 319, 322, 336, 339, 350, 363, 364, 368, 370, 375, 381, 387, 388, 405, 407, 410, 411, 412, 414, 415, 416, 488, 489, 504, 509, 510, 522, 525, 590, 635, 636, 704, 942, 1000, 1006, 1011, 1020, 1037, 1046, 1048, 1049, 1050], "king": 938, "kingjr": 1040, "kingma": [864, 865, 1008], "kink": 200, "kiragu": 1046, "kiran": 1046, "kirandevraj": 1049, "kiril": [1041, 1042, 1044, 1046], "kirkbi": [1041, 1042], "kirkham": [1039, 1040, 1042], "kirthi": 1044, "kishan": 1051, "kishimoto": 1046, "kishor": 1047, "kislovskii": 1051, "kit": 387, "kitchen": [644, 996], "kj": [369, 1006], "kjell": 1040, "kk": 1004, "kl": [412, 1001, 1042], "kl_divergence_": [695, 1041], "klarup": 1041, "klass": 99, "klau": [412, 536, 873], "kleczewski": [1041, 1042], "kleiber": 1048, "klevebr": 1042, "klima": 1049, "klopfer": 1043, "kluge": [1049, 1050], "kluger": [2, 404, 451, 514], "klusacek": 1004, "km": [95, 321, 351], "kmatt10": 1047, "kmb": 52, "kmean": [2, 58, 59, 72, 79, 81, 84, 87, 91, 92, 95, 182, 256, 259, 311, 321, 351, 384, 398, 407, 433, 434, 436, 440, 443, 448, 449, 452, 462, 513, 713, 795, 796, 800, 801, 872, 1007, 1014, 1025, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "kmeans_estim": 121, "kmeans_model": 407, "kmeans_plusplu": [2, 93, 407, 1046, 1051], "kmode": 1023, "kms15": [1042, 1043], "knee": 407, "kneighbor": [313, 321, 849, 850, 851, 853, 855, 1007, 1038, 1043, 1047, 1048, 1049, 1050], "kneighbors_graph": [2, 75, 80, 96, 101, 288, 389, 407, 441, 445, 698, 849, 850, 851, 853, 855, 857, 858, 859, 861, 1007, 1034, 1038, 1043], "kneighborsclassifi": [2, 68, 156, 290, 291, 296, 297, 313, 319, 321, 350, 414, 604, 850, 854, 855, 856, 857, 858, 1005, 1007, 1034, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "kneighborsclassifierkneighbor": 395, "kneighborsregressor": [2, 180, 246, 300, 321, 414, 571, 849, 855, 857, 858, 1005, 1007, 1034, 1036, 1038, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "kneighborstransform": [2, 288, 290, 317, 695, 859, 1007, 1044, 1048, 1049, 1053], "knight": 314, "knn": [138, 156, 180, 291, 296, 297, 300, 313, 319, 330, 350, 414, 604, 849, 856, 857, 902, 903, 1007, 1017, 1040], "knn__weight": 291, "knn_graph": 75, "knn_impute_scor": 181, "knnimput": [2, 181, 317, 630, 633, 994, 1044, 1045, 1048, 1049, 1050, 1051, 1053], "knnquerybatch": 288, "knot": [44, 211, 320, 886, 1014, 1047], "know": [87, 100, 162, 165, 169, 178, 185, 228, 244, 245, 262, 268, 281, 285, 287, 321, 322, 328, 346, 351, 362, 375, 387, 398, 401, 407, 410, 411, 412, 415, 501, 505, 511, 649, 655, 661, 662, 729, 759, 803, 817, 892, 893, 895, 896, 897, 898, 915, 916, 917, 918, 993, 1003, 1004, 1005, 1007, 1016, 1040, 1041, 1044, 1046], "knowledg": [91, 150, 185, 227, 247, 262, 268, 281, 282, 370, 375, 378, 381, 388, 389, 407, 411, 414, 418, 444, 512, 556, 557, 564, 723, 739, 743, 786, 836, 1004, 1005, 1016, 1052], "known": [2, 51, 56, 63, 65, 75, 83, 91, 92, 113, 127, 129, 130, 155, 174, 176, 181, 196, 210, 211, 228, 237, 262, 268, 270, 277, 297, 301, 309, 320, 325, 326, 328, 336, 343, 351, 364, 370, 372, 373, 375, 383, 387, 389, 403, 404, 405, 407, 408, 409, 410, 411, 412, 414, 415, 417, 438, 463, 482, 484, 499, 509, 510, 545, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 590, 591, 593, 596, 611, 625, 636, 661, 662, 675, 685, 686, 697, 707, 713, 716, 721, 732, 746, 758, 760, 798, 836, 842, 843, 844, 845, 846, 849, 854, 857, 863, 891, 915, 916, 917, 918, 951, 994, 996, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1014, 1019, 1020, 1053], "known_val": 630, "knox": 1046, "knp": 630, "knr": 414, "knyazev": [407, 452, 462, 698, 1044, 1047, 1048], "ko": [52, 64, 170], "kobak": [695, 1047, 1053], "kobaski": 1047, "kobayashi": [1046, 1047], "kober": 1042, "kobi": 738, "koch": [1036, 1042, 1043, 1045, 1046], "kocot": 1045, "koehler": 1038, "koen": [1042, 1043], "koenker": [726, 1000], "koh": [1000, 1028], "kohavi": 411, "kohli": [1051, 1052], "koi8": 415, "koivunen": 113, "kokhlikyan": [1041, 1042], "koki": 1046, "koko": [1042, 1048, 1049], "kolawol": 1047, "kolganov": 1039, "kolh": 1036, "kolstad": 58, "komarov": [1052, 1053], "komey": [1048, 1049], "kommireddi": 1048, "kondratyev": 1048, "kong": 1047, "konstantin": [1039, 1040, 1041], "konstantino": [1042, 1051], "konwar": 1045, "koonc": 1042, "korba": 370, "korean": 1023, "kornel": 1040, "kornev": 1049, "korobko": [1051, 1052, 1053], "korobov": [1035, 1036, 1037, 1040, 1041], "korolev": 1044, "kosic": 1046, "kosobrodov": 1042, "kossaifi": [1034, 1038, 1039], "kossen": [1049, 1050], "kossori": [1042, 1043], "kostelac": [1049, 1050], "kot271828": 1047, "kothari": 1045, "kotwalia": [1042, 1043], "koumenti": 1049, "koushik": 1048, "koustav": [1051, 1052], "kovalevskyi": 1040, "kowalski87": 1037, "koyama": 1048, "kozachenko": [609, 610], "kozynet": [1046, 1048], "kpca": [2, 534, 535, 536, 1029, 1030, 1034], "kr": [243, 268, 1048], "kr_fit": 243, "kr_predict": 243, "kraig": 1049, "kraktu": 1052, "kranthi": 1048, "kranz": 1028, "kraskov": [609, 610], "krasouli": [1041, 1042, 1043, 1044, 1046, 1047], "kratzwald": 1040, "krawczyk": 1048, "krawutschk": [1049, 1050], "krell": [1038, 1040], "kriegel": [407, 418, 444, 450, 457, 853, 1010], "krinitsyn": 1042, "krishna": [1040, 1041, 1042, 1043, 1044, 1045, 1048, 1049], "krishnachaitanya9": 1045, "krishnakalyan3": 1040, "krishnan": 1044, "krivich": [1040, 1041, 1043], "kronovet": 1039, "krr": [243, 646, 997], "krsto": 1052, "krum": [1046, 1048], "krumetoft": 1048, "krump": 1039, "kruskal": [638, 693, 697, 1001], "krzeminski": 1041, "krzysztof": 369, "ksemb": 1042, "kshitij": [1049, 1050, 1052], "ksvd": [667, 688, 689, 1000], "ksvm": 190, "ksvm_score": 190, "ksvm_time": 190, "kth": [58, 824], "ku": [1038, 1039], "kuai": [1042, 1043], "kubin": 1045, "kuhlmann": [1041, 1042], "kulbear": 1043, "kulkarni": 1042, "kull": [405, 1004], "kullback": [55, 230, 412, 539, 541, 548, 695, 1001, 1041], "kulsinski": [450, 457, 702, 781, 782, 783], "kulsinskidist": [702, 1050], "kumar": [0, 165, 370, 397, 407, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051], "kumaresshan": [1042, 1043, 1046], "kumawat": 1048, "kund": [1050, 1051], "kunj": 1047, "kuno": [1052, 1053], "kuo": 1038, "kurumeyuta": 1047, "kurz": [1048, 1049], "kusanagi": [1045, 1047], "kusanagi2": 1046, "kushal": [1042, 1043], "kushan": 1051, "kushwah": [1050, 1051], "kushwaha": 1046, "kusterl": 1044, "kuth": 1040, "kvam": [1035, 1037], "kvle": 1040, "kw_arg": [140, 871, 1014, 1040], "kwarg": [77, 124, 244, 377, 382, 421, 425, 429, 438, 442, 448, 450, 464, 469, 536, 539, 541, 564, 612, 634, 649, 650, 655, 656, 663, 664, 665, 666, 680, 684, 687, 701, 702, 703, 705, 745, 866, 867, 871, 911, 922, 963, 969, 992, 1041, 1045, 1047, 1051], "kwd": [774, 777, 781, 784, 795, 796], "kwei": [1037, 1038, 1039, 1040, 1041], "kxytim": 1047, "kybernetika": 372, "kye": 1042, "kyeongpil": 1042, "kyle": [0, 397, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1045, 1046], "kyledrogo": 1042, "kyler": 1039, "k\u00e4rkk\u00e4inen": 1000, "l": [0, 47, 54, 56, 76, 81, 82, 100, 101, 113, 138, 165, 187, 206, 214, 219, 220, 273, 274, 275, 285, 304, 312, 346, 372, 373, 381, 383, 404, 405, 407, 411, 412, 414, 417, 474, 517, 518, 519, 539, 541, 548, 556, 557, 558, 559, 566, 567, 592, 609, 610, 613, 614, 618, 622, 625, 626, 637, 651, 652, 661, 672, 675, 677, 683, 690, 692, 695, 696, 708, 718, 728, 729, 734, 759, 789, 844, 878, 915, 916, 917, 918, 993, 998, 1000, 1001, 1004, 1006, 1007, 1008, 1012, 1016, 1018, 1020, 1037, 1042, 1046, 1047, 1048, 1049, 1051, 1053], "l1": [2, 26, 43, 47, 56, 67, 76, 100, 114, 116, 182, 191, 192, 197, 199, 200, 205, 206, 214, 221, 225, 239, 269, 281, 288, 305, 320, 384, 387, 407, 409, 412, 441, 445, 450, 457, 464, 469, 470, 471, 472, 473, 474, 475, 476, 478, 497, 503, 505, 532, 538, 539, 540, 541, 543, 544, 548, 549, 559, 566, 591, 592, 593, 599, 647, 648, 649, 650, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 671, 673, 675, 679, 680, 681, 682, 684, 691, 738, 765, 771, 776, 781, 782, 783, 788, 817, 824, 833, 849, 850, 851, 853, 854, 855, 857, 858, 859, 860, 861, 879, 887, 894, 907, 908, 914, 916, 918, 936, 985, 1000, 1002, 1004, 1007, 1014, 1018, 1019, 1020, 1025, 1039, 1041, 1047, 1050], "l1_color": 221, "l1_contour": 221, "l1_distanc": 1034, "l1_min_c": [2, 204, 1000, 1019, 1034], "l1_plot": 226, "l1_ratio": [47, 50, 55, 196, 199, 202, 276, 281, 362, 387, 412, 539, 541, 548, 649, 650, 655, 661, 662, 663, 664, 665, 666, 671, 679, 681, 684, 1000, 1018, 1035, 1037, 1039, 1046, 1048], "l1_ratio_": [650, 662, 664], "l1_ratios_": 662, "l2": [2, 54, 67, 76, 114, 116, 182, 184, 185, 191, 192, 196, 199, 202, 204, 210, 215, 221, 225, 226, 228, 269, 281, 288, 308, 315, 332, 350, 351, 377, 384, 387, 407, 409, 412, 414, 415, 441, 445, 450, 457, 525, 539, 541, 548, 559, 562, 563, 566, 591, 592, 593, 646, 649, 650, 651, 652, 655, 660, 661, 662, 663, 664, 665, 666, 671, 672, 675, 679, 681, 683, 684, 689, 690, 691, 738, 753, 764, 765, 781, 782, 783, 817, 849, 850, 851, 853, 855, 857, 858, 859, 860, 861, 864, 865, 879, 887, 894, 907, 908, 912, 913, 914, 916, 918, 986, 993, 997, 1000, 1002, 1007, 1008, 1014, 1018, 1020, 1025, 1036, 1038, 1039, 1041, 1043], "l2014": 414, "l2_color": 221, "l2_contour": 221, "l2_regular": [320, 414, 562, 563], "l_": [404, 614, 655, 744, 1004], "l_i": 1014, "l_inf": 56, "l_m": 414, "l_p": [450, 457, 691, 849, 850, 851, 853, 855, 857, 858, 859, 860, 861], "l_x": 54, "la": [0, 314, 372, 397, 1028, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "lab": [0, 370, 468, 537, 905, 1028, 1045], "labb\u00e9": 1052, "label": [2, 31, 39, 44, 46, 47, 49, 51, 52, 53, 54, 59, 62, 63, 64, 65, 67, 69, 70, 74, 76, 78, 79, 81, 82, 83, 85, 86, 89, 90, 92, 94, 97, 98, 99, 100, 101, 106, 108, 110, 111, 112, 113, 116, 117, 119, 123, 125, 128, 129, 130, 135, 136, 137, 138, 139, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 158, 161, 163, 169, 170, 174, 175, 176, 177, 178, 180, 182, 185, 188, 190, 192, 193, 195, 196, 198, 200, 201, 203, 205, 207, 210, 211, 212, 213, 216, 217, 218, 219, 220, 224, 225, 227, 228, 231, 232, 233, 237, 238, 242, 243, 245, 247, 248, 255, 261, 262, 263, 266, 267, 269, 270, 271, 272, 274, 277, 278, 279, 280, 281, 282, 283, 287, 293, 295, 297, 300, 304, 306, 308, 309, 313, 317, 318, 321, 324, 327, 331, 332, 333, 341, 343, 345, 346, 350, 351, 354, 355, 356, 364, 367, 368, 369, 374, 375, 377, 380, 384, 389, 390, 404, 405, 406, 417, 418, 424, 425, 429, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 459, 461, 462, 465, 469, 487, 488, 489, 494, 495, 496, 497, 503, 504, 509, 510, 513, 515, 516, 520, 523, 524, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 568, 570, 571, 594, 595, 596, 597, 598, 600, 601, 602, 606, 607, 608, 611, 613, 634, 661, 662, 669, 670, 671, 676, 677, 678, 679, 680, 681, 700, 701, 703, 705, 706, 707, 708, 710, 712, 713, 715, 716, 717, 718, 719, 720, 721, 723, 725, 728, 729, 730, 732, 733, 734, 737, 738, 739, 740, 741, 742, 743, 744, 746, 757, 758, 759, 760, 785, 786, 787, 789, 790, 791, 792, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 810, 812, 817, 818, 819, 821, 822, 823, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 853, 854, 856, 857, 864, 865, 867, 871, 874, 875, 878, 880, 881, 888, 891, 902, 903, 904, 907, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 921, 923, 927, 933, 938, 939, 966, 967, 974, 993, 1000, 1001, 1005, 1006, 1007, 1008, 1010, 1011, 1014, 1018, 1019, 1020, 1023, 1025, 1026, 1030, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "label1": 389, "label2": 389, "label_a": 277, "label_b": 277, "label_binar": [2, 275, 277, 874, 1038], "label_binarizer_": 836, "label_distributions_": [328, 329, 902, 903, 1045], "label_im": 100, "label_out": 79, "label_pr": [720, 739, 740, 758, 760, 798], "label_prop_model": [902, 903], "label_propag": 1035, "label_ranking_average_precision_scor": [2, 1004, 1038, 1042, 1043, 1049], "label_ranking_loss": [2, 1004, 1039], "label_spread": 330, "label_tru": [707, 720, 740, 758, 760, 798], "labelbinar": [2, 277, 389, 725, 744, 836, 871, 880, 888, 891, 1005, 1037, 1038, 1039, 1043, 1048], "labelbottom": [158, 268], "labeled_iter_": [331, 904], "labelencod": [2, 389, 403, 570, 881, 1015, 1034, 1042, 1049, 1050, 1053], "labeling1": 1004, "labeling2": 1004, "labelkfold": [1039, 1040], "labelleft": 253, "labelpad": 268, "labelpropag": [2, 321, 330, 903, 904, 1005, 1017, 1035, 1040, 1041, 1044, 1045, 1046, 1048, 1049, 1050], "labels": [55, 312], "labels_": [74, 75, 76, 77, 78, 79, 80, 82, 83, 85, 86, 89, 92, 95, 96, 97, 99, 101, 321, 323, 351, 375, 377, 389, 407, 425, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 455, 713, 1039], "labels_050": 99, "labels_200": 99, "labels_a": 73, "labels_b": 73, "labels_pr": [407, 707, 708, 717, 718, 720, 734, 739, 740, 758, 760, 789, 798], "labels_tru": [74, 83, 89, 98, 407, 707, 708, 717, 718, 720, 734, 739, 740, 758, 760, 789, 798], "labels_uniqu": 97, "labelshufflesplit": [1039, 1040], "labelspread": [2, 321, 328, 329, 330, 332, 333, 902, 904, 1005, 1017, 1035, 1040, 1041, 1044, 1045, 1048, 1049, 1050], "labelspreadingifittedlabelspread": 330, "labex": 0, "labl": 150, "laboratori": [370, 1023], "lacchia": 1041, "lack": [44, 65, 343, 375, 387, 411, 832, 922, 1019, 1048], "lacost": [661, 1000], "lacouth": 1047, "lacrosse91": 1047, "lad": 1047, "lag": [43, 44, 147, 150, 182, 212, 492, 563, 704, 745, 748, 749, 751, 793, 824, 829, 830, 833, 1025], "lagacheri": 1038, "lagard": 1037, "lagat": 1044, "lagged_count_": 53, "lagged_count_1d": 53, "lagged_count_1d_1h": 53, "lagged_count_7d": 53, "lagged_count_7d_1h": 53, "lagged_df": 53, "lagged_max_24h": 53, "lagged_max_7d": 53, "lagged_mean_24h": 53, "lagged_mean_7d": 53, "lagged_min_24h": 53, "lagged_min_7d": 53, "lai": [52, 313, 343, 1010], "laid": [0, 184, 375], "lakhotia": [1044, 1045], "lakshmi": 1044, "lakshmikanth": 1041, "lakshya": [1042, 1043, 1044], "lal": 903, "lalliacqua": [1044, 1047], "lam": [318, 319, 1045, 1052], "lama": 495, "lamb": [1039, 1047, 1053], "lambda": [44, 47, 48, 50, 58, 90, 146, 193, 228, 268, 269, 312, 332, 401, 403, 407, 412, 414, 415, 647, 648, 649, 650, 871, 883, 996, 1000, 1014, 1042, 1048], "lambda_": [193, 647, 648, 883, 1000, 1041], "lambda_1": [647, 648, 1000], "lambda_2": [647, 648, 1000], "lambda_i": [1000, 1014], "lambda_init": [192, 193, 648, 1000, 1044], "lambdas_": [312, 883, 1047, 1050], "lami": 1042, "lamond": 1038, "lamp": 1028, "lamu": 1040, "lan": [661, 1049, 1050], "land": [51, 301, 379, 390, 414], "land_mask": 301, "land_refer": [51, 301], "landeau": 1051, "landmark": [884, 896, 1014], "landscap": 170, "lane": 1040, "langford": [415, 691, 1001], "langl": [996, 1004, 1018, 1019], "languag": [0, 352, 380, 412, 415, 1018, 1023, 1024, 1028], "language_level": 376, "lanigan": 1041, "lanl": 56, "lannuzel": 1046, "lanterni": 1048, "lanzani": 1040, "lapack": [362, 363, 373, 533, 536, 542, 691, 1049], "lapack_lit": 381, "lapack_svd_driv": 1049, "laplac": [2, 170, 417, 613, 614, 842, 843, 844, 846, 1006], "laplacian": [2, 230, 367, 404, 440, 452, 462, 623, 642, 646, 694, 698, 768, 769, 777, 903, 1000, 1001, 1017, 1030, 1035, 1040], "laplacian_kernel": [2, 768, 1002, 1039], "laptop": [53, 383, 468, 905, 1048, 1049, 1050], "lar": [0, 2, 124, 165, 182, 191, 196, 197, 200, 202, 205, 372, 397, 471, 472, 478, 502, 532, 538, 540, 543, 544, 546, 547, 549, 654, 655, 656, 657, 658, 659, 666, 667, 668, 681, 684, 685, 686, 687, 688, 689, 1005, 1025, 1026, 1030, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1045, 1047, 1052, 1053], "laradji": [0, 1040], "larg": [0, 2, 39, 44, 52, 53, 54, 60, 64, 65, 73, 75, 79, 82, 83, 84, 86, 87, 89, 106, 108, 121, 125, 138, 140, 141, 147, 150, 151, 153, 161, 174, 175, 187, 188, 192, 193, 200, 202, 210, 212, 214, 215, 216, 228, 242, 247, 262, 265, 271, 274, 277, 290, 297, 305, 308, 310, 320, 321, 324, 339, 344, 346, 351, 352, 362, 370, 375, 377, 381, 384, 387, 388, 389, 393, 401, 407, 409, 411, 412, 413, 414, 416, 418, 420, 442, 444, 446, 447, 450, 451, 452, 453, 458, 462, 473, 475, 500, 515, 535, 537, 539, 541, 542, 545, 548, 550, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 568, 569, 584, 591, 637, 644, 646, 649, 650, 653, 655, 656, 657, 660, 661, 662, 667, 674, 675, 677, 680, 682, 688, 690, 692, 694, 695, 696, 698, 749, 782, 783, 803, 811, 813, 817, 821, 832, 842, 843, 844, 845, 846, 847, 848, 853, 864, 865, 872, 876, 877, 885, 887, 899, 900, 907, 908, 912, 913, 915, 916, 917, 918, 950, 951, 993, 996, 998, 1000, 1001, 1003, 1006, 1007, 1008, 1012, 1014, 1017, 1018, 1019, 1020, 1023, 1024, 1028, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "larger": [44, 47, 65, 73, 75, 78, 82, 89, 112, 114, 119, 130, 138, 148, 150, 170, 175, 176, 181, 185, 186, 190, 193, 196, 225, 226, 227, 235, 241, 243, 253, 259, 262, 269, 271, 277, 278, 285, 288, 290, 303, 304, 306, 308, 339, 343, 351, 352, 368, 370, 375, 381, 389, 404, 405, 407, 408, 409, 411, 412, 414, 415, 417, 440, 443, 449, 450, 452, 454, 456, 516, 528, 542, 545, 562, 563, 564, 568, 569, 584, 591, 646, 655, 675, 676, 677, 678, 682, 690, 695, 707, 722, 739, 800, 852, 853, 884, 886, 887, 888, 896, 901, 950, 951, 974, 977, 996, 997, 1000, 1001, 1003, 1004, 1007, 1008, 1012, 1014, 1018, 1019, 1038, 1039, 1042, 1043, 1044, 1047, 1048, 1051, 1052, 1053], "largest": [114, 123, 141, 165, 212, 372, 407, 409, 412, 443, 528, 542, 558, 559, 560, 561, 565, 566, 590, 712, 800, 801, 822, 845, 877, 915, 916, 917, 918, 951, 1001, 1004, 1014, 1019, 1020], "largest_clust": [407, 443], "largest_coef": [114, 528], "larrald": 1051, "lars_path": [2, 199, 384, 532, 538, 540, 543, 544, 546, 547, 549, 653, 654, 655, 656, 657, 658, 659, 666, 667, 668, 686, 687, 688, 689, 1000, 1034, 1036, 1039, 1043, 1045], "lars_path_gram": [2, 685, 1000, 1043], "larscv": [2, 398, 653, 668, 685, 686, 1041, 1047, 1051], "larson": [1039, 1043, 1044, 1046, 1048, 1053], "larsson": [1046, 1047, 1048], "lasagna": 1040, "laska": 1040, "lasso": [2, 43, 56, 100, 130, 155, 182, 185, 191, 202, 207, 209, 218, 258, 320, 324, 346, 362, 387, 409, 410, 412, 414, 415, 416, 471, 472, 478, 502, 525, 532, 538, 540, 543, 544, 546, 547, 549, 599, 649, 650, 652, 653, 654, 656, 657, 658, 659, 660, 663, 664, 665, 666, 667, 668, 673, 675, 681, 684, 685, 686, 687, 688, 689, 724, 726, 727, 828, 829, 830, 868, 887, 993, 1004, 1005, 1018, 1025, 1026, 1030, 1034, 1038, 1039, 1040, 1042, 1043, 1045, 1047, 1048, 1052], "lasso_cd": [532, 538, 543, 549], "lasso_lar": [130, 532, 538, 543, 549, 1044], "lasso_lars_": [198, 200], "lasso_path": [2, 199, 654, 655, 656, 657, 658, 659, 666, 685, 686, 1000, 1034, 1036, 1038, 1047], "lasso_pipelin": 155, "lassocolumntransform": 155, "lassocv": [2, 54, 155, 185, 196, 200, 398, 414, 416, 654, 655, 657, 658, 659, 666, 687, 1000, 1034, 1037, 1041, 1044, 1045, 1047, 1048, 1051, 1052, 1053], "lassocvlassocv": 155, "lassolar": [2, 654, 655, 656, 658, 659, 666, 667, 668, 685, 686, 687, 1000, 1005, 1034, 1035, 1037, 1041, 1044, 1045, 1047], "lassolars": [2, 198, 200, 416, 654, 657, 658, 1000, 1034, 1041, 1043, 1047, 1048], "lassolarscv": [2, 200, 398, 416, 655, 656, 657, 659, 666, 668, 685, 686, 687, 1000, 1034, 1041, 1047, 1051], "lassolarsic__criterion": [198, 200], "last": [44, 59, 80, 92, 147, 185, 192, 210, 211, 218, 223, 237, 259, 271, 279, 280, 313, 319, 321, 331, 354, 362, 370, 373, 379, 380, 383, 389, 393, 401, 407, 408, 415, 419, 438, 442, 447, 459, 464, 467, 468, 516, 534, 560, 561, 562, 563, 585, 586, 589, 595, 596, 599, 613, 685, 686, 688, 689, 700, 701, 703, 704, 705, 710, 785, 800, 801, 806, 807, 822, 847, 848, 852, 867, 868, 872, 880, 886, 922, 954, 978, 992, 993, 999, 1000, 1001, 1003, 1005, 1008, 1018, 1024, 1034, 1040, 1041, 1042, 1043, 1048, 1050, 1051], "last_hour": [44, 53], "last_mean": 978, "last_n": 978, "last_var": 978, "lat": [51, 301, 499, 767], "late": [314, 364], "latenc": [43, 47, 48, 182, 361, 525, 566, 675, 681, 833, 887, 913, 968, 977, 1023, 1025, 1030, 1037], "latent": [2, 43, 46, 56, 131, 182, 306, 351, 410, 415, 417, 488, 533, 537, 539, 540, 541, 544, 545, 590, 593, 863, 1003, 1023, 1025, 1029, 1030, 1036, 1039], "latentdirichletalloc": [2, 55, 364, 380, 412, 1023, 1039, 1041, 1048, 1049, 1053], "later": [0, 51, 87, 135, 140, 148, 169, 186, 190, 192, 247, 262, 285, 301, 352, 358, 373, 377, 381, 387, 388, 401, 414, 853, 876, 877, 885, 887, 996, 1014, 1037, 1040, 1042, 1046], "latest": [317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 373, 375, 379, 381, 383, 1020, 1048], "latestst": 379, "latex": 1034, "latexpdf": 375, "latin": [48, 415], "latitud": [301, 308, 370, 499, 702, 767], "lattarini": 1036, "latter": [44, 55, 258, 268, 277, 278, 296, 313, 346, 364, 372, 389, 406, 411, 414, 415, 421, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 583, 584, 585, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 691, 692, 693, 694, 695, 745, 800, 801, 802, 803, 806, 807, 812, 817, 825, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 970, 1007, 1012, 1043], "laughlin": 1041, "launch": [350, 351, 393, 1028], "laur": 1034, "lauren": [0, 359, 695, 699, 1001, 1046, 1049], "laurent": [1037, 1038, 1041, 1042, 1049, 1050], "laurenz": 1046, "lauritzen": 1042, "laveen": 1047, "law": 1028, "lawrenc": 262, "lawson": [1041, 1042, 1043], "lawton": 1042, "layer": [2, 44, 68, 143, 153, 171, 173, 182, 217, 220, 223, 226, 248, 302, 305, 306, 310, 311, 333, 344, 347, 348, 362, 383, 414, 515, 516, 523, 568, 833, 863, 864, 865, 868, 887, 1009, 1025, 1026, 1030, 1040], "layout": [135, 308, 387, 907, 908, 909, 912, 934, 1019, 1037, 1039, 1051], "layton": [0, 397, 1034, 1035, 1036, 1037, 1039], "lazaru": 1052, "lazebnik": [761, 762, 1002], "lazi": [53, 390, 415, 1018, 1038], "lazyfram": 106, "lazz": 1049, "lb": [874, 1015], "lbfg": [303, 377, 651, 652, 661, 662, 672, 675, 677, 683, 690, 838, 841, 864, 865, 1000, 1008, 1038, 1039, 1041, 1042, 1047, 1048, 1049, 1051, 1053], "lbfgsb": 661, "lbfin": 1044, "lc": [52, 233, 240], "lceil": [404, 1010], "lda": [55, 70, 120, 123, 125, 127, 131, 182, 297, 358, 372, 403, 505, 537, 542, 550, 551, 856, 1023, 1025, 1026, 1029, 1030, 1039], "lda_featur": 380, "lda_model": 380, "lda_np": 403, "ldavid": 1040, "ldflag": 373, "ldirer": 1041, "ldl": [165, 372], "ldot": [1000, 1004, 1006, 1008, 1018], "ldwy4": [1051, 1052], "le": [661, 875, 995, 1000, 1007, 1015, 1017, 1042, 1046, 1047, 1051], "le_": 570, "lead": [0, 47, 63, 65, 68, 73, 86, 89, 95, 105, 141, 144, 145, 147, 164, 165, 185, 186, 187, 192, 196, 200, 202, 203, 207, 210, 214, 242, 244, 247, 262, 268, 269, 271, 275, 281, 293, 294, 305, 308, 310, 313, 314, 319, 339, 346, 351, 354, 358, 362, 363, 369, 374, 377, 383, 384, 388, 389, 404, 405, 406, 407, 409, 411, 412, 413, 414, 416, 452, 462, 465, 468, 497, 516, 528, 536, 539, 540, 541, 544, 548, 552, 558, 559, 560, 561, 564, 565, 566, 567, 608, 633, 649, 650, 653, 655, 656, 657, 663, 664, 665, 666, 682, 694, 698, 749, 800, 806, 807, 835, 847, 848, 852, 871, 878, 888, 899, 900, 905, 907, 915, 916, 917, 918, 993, 998, 1000, 1001, 1003, 1004, 1005, 1007, 1008, 1010, 1012, 1014, 1017, 1018, 1020, 1028, 1037, 1039, 1041, 1042, 1043, 1044, 1046, 1047, 1049, 1050, 1051, 1052, 1053], "leader": [375, 1028], "leadership": 0, "leaf": [77, 140, 151, 153, 354, 357, 407, 414, 418, 441, 442, 443, 444, 445, 446, 450, 457, 463, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 847, 848, 849, 850, 851, 852, 853, 855, 857, 858, 859, 915, 916, 917, 918, 919, 920, 1007, 1020, 1037, 1039, 1041, 1045, 1048], "leaf_id": 357, "leaf_rot": 188, "leaf_siz": [418, 444, 446, 450, 455, 456, 457, 847, 848, 849, 850, 851, 852, 853, 855, 857, 858, 859, 1007], "leagu": 370, "leak": [140, 273, 350, 358, 408, 411, 867, 892, 893, 895, 896, 897, 898, 1014, 1034, 1041, 1044, 1050, 1051, 1052], "leakag": [388, 389, 408, 1030], "lean": 401, "leandro": [1043, 1047], "lear": 1028, "learn": [2, 15, 27, 30, 31, 33, 39, 44, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 120, 122, 123, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 183, 187, 188, 189, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 327, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 358, 363, 367, 368, 369, 370, 372, 374, 378, 381, 382, 383, 384, 388, 389, 392, 394, 395, 398, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 413, 415, 416, 417, 421, 422, 424, 425, 426, 427, 429, 430, 431, 437, 438, 439, 442, 443, 446, 447, 449, 450, 457, 464, 465, 467, 468, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 509, 510, 511, 513, 515, 516, 517, 518, 519, 521, 522, 523, 525, 526, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 550, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 578, 583, 584, 585, 586, 589, 590, 591, 592, 593, 595, 596, 601, 604, 605, 612, 613, 614, 617, 622, 625, 629, 631, 633, 635, 637, 641, 643, 644, 646, 647, 648, 649, 651, 655, 660, 661, 671, 672, 679, 680, 681, 683, 691, 692, 693, 694, 695, 699, 700, 703, 704, 705, 711, 716, 720, 721, 724, 726, 727, 729, 735, 738, 744, 745, 746, 751, 759, 781, 782, 783, 787, 788, 790, 791, 798, 800, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 841, 842, 843, 844, 845, 846, 849, 851, 854, 856, 863, 864, 865, 866, 867, 868, 870, 872, 874, 877, 879, 880, 881, 882, 885, 886, 887, 888, 891, 899, 900, 902, 903, 904, 905, 907, 908, 909, 912, 915, 916, 917, 918, 923, 925, 926, 934, 936, 944, 946, 956, 969, 970, 992, 993, 994, 996, 997, 998, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1014, 1015, 1018, 1019, 1020, 1021, 1022, 1025, 1027, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "learn_rat": 1035, "learnalgorithm": 395, "learner": [2, 48, 136, 145, 155, 364, 555, 560, 561, 562, 563, 584, 591, 633, 849, 850, 855, 857, 858, 1006, 1009, 1020, 1023, 1050], "learning_curv": [2, 270, 322, 398, 809, 999, 1037, 1040, 1041, 1042, 1043, 1044, 1046, 1048, 1049, 1051, 1053], "learning_decai": 537, "learning_method": [55, 380, 537], "learning_offset": [55, 537], "learning_r": [47, 135, 145, 146, 147, 148, 149, 150, 235, 288, 304, 306, 318, 320, 414, 554, 555, 560, 561, 562, 563, 671, 679, 680, 681, 695, 863, 864, 865, 1001, 1011, 1018, 1035, 1043, 1047], "learning_rate_": [695, 865], "learning_rate_init": [186, 304, 305, 864, 865], "learningcurvedisplai": [2, 243, 270, 322, 999, 1049, 1050], "learnt": [150, 185, 315, 358, 389, 411, 888, 993, 1014], "least": [2, 38, 45, 53, 55, 112, 113, 115, 116, 123, 124, 138, 148, 158, 163, 165, 177, 182, 184, 191, 192, 195, 196, 201, 204, 210, 212, 214, 215, 218, 227, 228, 241, 247, 264, 268, 281, 285, 287, 313, 319, 320, 339, 351, 352, 362, 368, 370, 372, 374, 375, 379, 381, 383, 387, 389, 390, 398, 407, 409, 410, 411, 412, 414, 415, 416, 417, 418, 444, 448, 450, 456, 457, 458, 461, 474, 481, 482, 483, 484, 485, 495, 502, 517, 532, 538, 540, 542, 543, 544, 546, 547, 548, 549, 550, 558, 559, 560, 561, 563, 565, 566, 567, 595, 596, 604, 638, 646, 649, 651, 653, 654, 655, 656, 657, 658, 659, 660, 666, 667, 668, 669, 670, 671, 672, 674, 675, 677, 679, 681, 682, 683, 685, 686, 687, 688, 689, 690, 695, 700, 715, 719, 721, 753, 788, 804, 808, 809, 815, 817, 818, 819, 821, 822, 824, 828, 831, 832, 833, 864, 865, 868, 879, 887, 912, 915, 916, 917, 918, 942, 966, 994, 997, 1001, 1004, 1007, 1016, 1018, 1019, 1020, 1024, 1025, 1026, 1028, 1030, 1034, 1036, 1037, 1040, 1041, 1045], "least_absolute_devi": [1044, 1046, 1047], "least_angl": 384, "least_squar": 1047, "leastangle_2002": [165, 372], "leastsquareserror": 1043, "leav": [2, 87, 135, 140, 148, 186, 188, 228, 275, 313, 357, 358, 362, 372, 374, 380, 389, 407, 414, 441, 442, 445, 446, 463, 504, 558, 559, 560, 561, 562, 563, 565, 566, 567, 676, 678, 805, 810, 811, 812, 813, 821, 822, 847, 848, 849, 857, 915, 916, 917, 918, 993, 1001, 1007, 1011, 1020, 1034, 1041, 1043, 1045, 1046, 1050], "leaveonegroupout": [2, 273, 411, 804, 811, 812, 1040], "leaveonelabelout": 1040, "leaveoneout": [2, 273, 411, 849, 857, 1052], "leavepgroupsout": [2, 411, 805, 1040], "leaveplabelout": 1040, "leaveplabelsout": 1040, "leavepout": [2, 411, 811], "leaves_parallel": 919, "lebedev": [1040, 1041], "lebel": 1049, "lebourgeoi": 1028, "lectur": [407, 647, 996, 1022], "lecture2": 647, "lecun": [1008, 1018], "led": 1034, "ledoit": [2, 50, 55, 66, 71, 109, 110, 113, 114, 182, 241, 297, 473, 475, 479, 480, 513, 550, 998, 1025], "ledoit_wolf": [2, 114, 409, 1047], "ledoit_wolf_shrinkag": [2, 1047], "ledoitwolf": [2, 70, 109, 111, 114, 128, 149, 182, 299, 409, 469, 470, 474, 475, 476, 477, 803, 1025, 1038], "lee": [412, 1034, 1035, 1038, 1040, 1041, 1042, 1043, 1045, 1046, 1049, 1053], "leepei": 1038, "leereev": 1041, "leeuw": 638, "lefebvr": [1047, 1048], "lefevr": [412, 539], "left": [46, 47, 52, 54, 55, 62, 70, 71, 75, 78, 80, 85, 89, 96, 98, 105, 108, 113, 114, 119, 123, 124, 135, 138, 140, 141, 142, 144, 147, 150, 155, 157, 172, 178, 181, 185, 188, 204, 210, 211, 212, 214, 221, 223, 224, 227, 228, 237, 241, 245, 247, 248, 253, 255, 256, 259, 264, 265, 266, 267, 269, 277, 278, 280, 291, 293, 294, 301, 303, 306, 308, 321, 323, 324, 326, 329, 338, 339, 343, 357, 370, 375, 377, 379, 404, 407, 410, 411, 413, 414, 415, 417, 424, 430, 446, 472, 482, 483, 484, 485, 494, 499, 550, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 589, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 630, 638, 642, 646, 654, 658, 800, 801, 803, 806, 807, 810, 817, 824, 880, 887, 915, 916, 917, 918, 919, 937, 951, 974, 977, 993, 996, 998, 1000, 1002, 1004, 1006, 1011, 1016, 1018, 1020, 1041, 1043, 1048, 1053], "left_h": 308, "left_impur": [558, 559, 560, 561, 565, 566, 567, 915, 916, 917, 918], "leftarrow": [407, 1008, 1018], "leftmost": 1008, "legaci": [369, 379, 389, 944, 945, 946, 1034, 1041, 1046], "legarreta": [1045, 1047, 1048], "legend": [44, 47, 48, 49, 51, 53, 62, 64, 70, 73, 76, 95, 105, 106, 108, 110, 111, 112, 113, 116, 117, 123, 125, 127, 128, 129, 130, 135, 136, 137, 138, 139, 141, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 157, 158, 161, 169, 170, 174, 175, 176, 177, 178, 185, 186, 190, 192, 193, 195, 198, 199, 200, 201, 203, 205, 207, 210, 211, 212, 213, 216, 217, 218, 219, 220, 223, 224, 225, 227, 228, 233, 238, 240, 241, 242, 243, 245, 248, 255, 262, 263, 265, 267, 268, 270, 271, 272, 273, 275, 278, 280, 281, 282, 283, 285, 291, 293, 294, 295, 300, 304, 309, 313, 318, 321, 324, 330, 338, 341, 343, 345, 350, 354, 355, 356, 703, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "legend1": 127, "legend_el": [127, 151, 203, 223, 271, 291, 343], "legend_handl": 295, "legend_lin": 49, "legend_titl": 216, "legitim": [262, 1001], "legitimate_accept": 262, "legitimate_refus": 262, "lego": 1023, "lehoucq": 412, "leibler": [55, 230, 412, 539, 541, 548, 695, 1001, 1041], "leibniz": 1004, "leig": 1040, "leightonzhang": 1040, "leinweb": [1042, 1043], "leisur": 44, "lejeun": 1041, "lekhwani": 1043, "leland": [1040, 1041, 1042, 1044, 1045, 1050], "lemaitr": [0, 396, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "lemir": 1045, "lemma": [38, 241, 367, 535, 542, 550, 899, 900, 901, 998, 1030, 1037], "lemmat": 415, "lemmatoken": 415, "lemo": [1050, 1051, 1053], "len": [47, 48, 50, 51, 56, 58, 67, 68, 69, 73, 74, 77, 79, 80, 83, 84, 85, 89, 94, 95, 96, 97, 98, 99, 103, 105, 124, 130, 131, 133, 138, 141, 143, 144, 150, 163, 169, 177, 181, 186, 188, 209, 210, 228, 233, 237, 240, 241, 242, 244, 246, 247, 253, 255, 256, 263, 266, 268, 269, 276, 277, 279, 283, 287, 288, 295, 297, 298, 303, 309, 310, 311, 314, 323, 325, 328, 329, 332, 339, 345, 348, 350, 351, 352, 357, 387, 389, 414, 417, 425, 429, 431, 437, 445, 450, 456, 464, 508, 516, 551, 570, 571, 584, 599, 635, 636, 785, 803, 817, 829, 833, 835, 837, 838, 888, 902, 903, 1043, 1046], "lenail": [1042, 1046], "lend": 1028, "lene": 1050, "length": [2, 103, 119, 127, 129, 131, 143, 165, 169, 170, 171, 174, 175, 177, 190, 244, 245, 248, 251, 291, 319, 322, 336, 352, 368, 372, 375, 383, 384, 389, 408, 412, 414, 415, 417, 445, 490, 509, 510, 513, 516, 524, 552, 564, 583, 584, 591, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 635, 649, 650, 653, 654, 655, 656, 657, 659, 660, 663, 664, 665, 666, 684, 687, 784, 803, 806, 807, 817, 833, 835, 838, 839, 841, 849, 850, 851, 853, 855, 894, 920, 933, 935, 939, 957, 958, 974, 977, 1003, 1010, 1014, 1034, 1037, 1038, 1040, 1041, 1042, 1043, 1045, 1046, 1050], "length_scal": [169, 170, 173, 174, 175, 176, 178, 417, 615, 618, 621, 622, 624, 625, 626, 627], "length_scale_bound": [169, 175, 176, 178, 417, 614, 618, 622, 625, 626], "length_scale_grid": 175, "lengthi": [375, 387], "lenient": [881, 1024, 1051], "lenz": [1045, 1049], "leo": 1051, "leogrin": 1052, "leon": [679, 680, 681, 1034, 1052], "leonardo": 1047, "leonenko": [609, 610], "leonieborn": 1040, "leopoldo": 1047, "leq": [172, 412, 414, 1000, 1004, 1007, 1018, 1019, 1020], "lera": 1041, "leriqu": [1040, 1042], "lernen": 450, "lesne": 1048, "less": [44, 45, 48, 65, 86, 87, 94, 119, 121, 124, 131, 135, 142, 147, 148, 150, 169, 176, 185, 195, 196, 210, 212, 214, 243, 247, 254, 256, 262, 268, 269, 279, 282, 283, 309, 312, 313, 314, 319, 321, 325, 343, 350, 351, 358, 362, 364, 370, 375, 377, 387, 389, 401, 407, 411, 412, 414, 415, 419, 439, 441, 443, 445, 448, 450, 452, 457, 460, 462, 463, 482, 483, 484, 497, 516, 532, 536, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 592, 598, 622, 630, 637, 650, 664, 679, 681, 695, 704, 724, 725, 726, 727, 728, 739, 755, 767, 782, 783, 788, 798, 800, 801, 805, 806, 807, 813, 831, 842, 843, 844, 846, 847, 848, 849, 850, 851, 853, 855, 856, 857, 858, 859, 870, 882, 884, 885, 887, 890, 896, 897, 907, 908, 915, 916, 917, 918, 939, 954, 993, 994, 996, 997, 998, 1001, 1003, 1004, 1007, 1009, 1014, 1018, 1019, 1020, 1023, 1034, 1035, 1037, 1038, 1040, 1041, 1042, 1044, 1048, 1049, 1051, 1053], "lessen": [216, 661, 662], "lesser": [303, 389, 442, 542, 1000], "let": [44, 45, 53, 87, 89, 98, 104, 108, 121, 126, 127, 142, 144, 147, 148, 150, 152, 167, 169, 175, 176, 181, 185, 186, 187, 194, 200, 203, 210, 212, 228, 230, 234, 244, 251, 262, 263, 268, 271, 275, 281, 282, 325, 350, 352, 357, 358, 370, 375, 377, 381, 387, 401, 404, 406, 407, 411, 414, 415, 491, 501, 505, 511, 535, 649, 650, 653, 654, 655, 656, 657, 658, 659, 663, 664, 665, 666, 684, 687, 873, 880, 881, 1000, 1001, 1002, 1003, 1004, 1011, 1012, 1014, 1019, 1020, 1028, 1044, 1053], "letelli": 1040, "letter": [165, 177, 370, 372, 379, 415, 791, 792, 809, 826, 1004], "leu": 1048, "leung": 1045, "lev_metr": 387, "levarag": 324, "level": [44, 49, 51, 52, 65, 71, 77, 87, 121, 140, 143, 165, 168, 169, 170, 173, 176, 178, 182, 185, 186, 221, 222, 223, 224, 225, 228, 237, 241, 242, 257, 262, 268, 271, 277, 278, 294, 301, 337, 338, 340, 341, 343, 346, 351, 357, 362, 370, 372, 375, 377, 381, 387, 389, 392, 393, 398, 405, 412, 415, 417, 421, 454, 468, 494, 495, 497, 504, 522, 532, 537, 538, 546, 547, 548, 562, 563, 568, 569, 614, 618, 625, 626, 628, 669, 670, 671, 679, 680, 681, 690, 693, 695, 697, 703, 705, 719, 726, 731, 788, 828, 829, 830, 832, 835, 836, 863, 864, 865, 905, 920, 993, 1000, 1004, 1005, 1007, 1012, 1018, 1020, 1023, 1024, 1025, 1037, 1045, 1048, 1049, 1050, 1053], "levelnam": 121, "leven": 387, "levenshtein": [325, 387], "levenshtein_dist": 325, "levequ": [845, 887], "leverag": [44, 48, 73, 83, 117, 228, 325, 350, 351, 362, 363, 373, 389, 411, 414, 882, 993, 1000, 1037, 1049, 1052], "levesqu": 1040, "levi": [535, 1041], "levinson": [1042, 1043], "levitski": [1049, 1050, 1051, 1053], "levitskii": 1047, "lewi": [370, 1041, 1045], "lex": [407, 452, 462], "lexicograph": [389, 568, 791, 797, 849, 857], "lexicon": 1014, "lexsort": 62, "lf": 383, "lfw": [2, 46, 370, 494, 495, 1034], "lfw_home": 370, "lfw_pairs_train": [370, 494], "lfw_peopl": [46, 370, 495], "lg2012": 414, "lgtm": 1041, "li": [0, 331, 370, 396, 397, 642, 645, 699, 729, 759, 900, 993, 996, 1004, 1007, 1014, 1016, 1019, 1034, 1035, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "liabil": 228, "liac": [322, 369, 375, 497, 1049, 1050], "liam": [1042, 1043], "liang": [1040, 1045, 1046, 1051, 1052], "liau": 1037, "lib": [322, 363, 373, 393, 1023], "liberti": 259, "libisel": 1052, "liblinear": [204, 337, 381, 661, 662, 791, 907, 908, 909, 912, 913, 1000, 1004, 1019, 1034, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1050], "libomp": [373, 1046], "librari": [46, 262, 268, 320, 322, 358, 367, 369, 370, 373, 374, 375, 376, 381, 383, 387, 388, 389, 393, 401, 403, 464, 661, 907, 908, 909, 910, 912, 913, 1000, 1004, 1019, 1020, 1023, 1024, 1028, 1032, 1037, 1041, 1042, 1043, 1044, 1045, 1047, 1051], "libsvm": [2, 190, 337, 368, 381, 487, 509, 564, 907, 908, 909, 910, 911, 912, 913, 1019, 1030, 1034, 1036, 1042, 1045, 1048], "libsvmtool": [190, 369, 487, 509, 510], "licenc": 369, "licens": [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 184, 185, 186, 187, 188, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 317, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 369, 387, 389, 1020, 1028], "lichman": 372, "liddel": 1042, "lidston": [842, 843, 844, 846, 1006], "lie": [53, 94, 116, 164, 185, 242, 308, 330, 337, 339, 412, 414, 608, 855, 857, 858, 859, 907, 908, 998, 1001, 1004, 1014, 1019], "lieg": 414, "lieret": 1049, "lieu": [1040, 1041], "life": [53, 150, 261, 325, 383, 1001], "lifecycl": [1023, 1024], "lifo": 922, "lift": 393, "light": [138, 370], "lighter": [362, 703, 705, 785, 792, 1050], "lightfm": 1023, "lightgbm": [150, 414, 562, 563, 1023, 1043, 1050], "lightgreen": [157, 216, 227], "lightgrei": 50, "lightweight": [376, 803, 817, 828, 829], "ligo": 1041, "lihaitao": 1052, "lik_max": 110, "lik_min": 110, "like": [0, 2, 44, 52, 53, 86, 89, 92, 94, 103, 119, 124, 128, 130, 133, 135, 137, 142, 147, 150, 151, 169, 175, 185, 193, 210, 244, 259, 262, 268, 271, 272, 275, 276, 283, 297, 306, 308, 313, 314, 317, 322, 326, 331, 339, 343, 350, 351, 358, 362, 364, 367, 369, 370, 374, 375, 377, 379, 382, 383, 384, 387, 388, 389, 398, 401, 403, 405, 406, 407, 408, 410, 411, 412, 414, 415, 416, 418, 419, 420, 422, 423, 424, 425, 426, 428, 429, 430, 431, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 458, 459, 460, 461, 462, 463, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 513, 514, 516, 520, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 581, 583, 584, 585, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 737, 738, 739, 740, 741, 742, 743, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 769, 770, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 924, 929, 931, 938, 939, 953, 957, 966, 967, 974, 975, 976, 988, 990, 992, 993, 996, 998, 999, 1000, 1001, 1004, 1006, 1007, 1008, 1010, 1011, 1014, 1019, 1020, 1024, 1028, 1031, 1034, 1037, 1038, 1041, 1042, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053], "likelihood": [2, 70, 91, 109, 111, 112, 113, 114, 128, 149, 169, 170, 171, 173, 174, 175, 176, 178, 182, 198, 228, 257, 260, 268, 274, 299, 306, 308, 377, 389, 405, 409, 412, 414, 417, 437, 469, 470, 471, 472, 473, 474, 475, 476, 477, 516, 533, 537, 542, 550, 551, 552, 613, 614, 634, 648, 661, 715, 744, 800, 801, 803, 830, 833, 852, 854, 863, 883, 895, 909, 910, 912, 913, 1000, 1003, 1006, 1014, 1019, 1025, 1037, 1038, 1043, 1049], "likewis": [245, 407, 524], "lil": [389, 554, 555, 874, 929, 957, 1007], "lil_matrix": 56, "lili": [1042, 1043], "lilian": [1039, 1040, 1051], "lim": [172, 535], "lima": [1047, 1048], "limit": [44, 48, 56, 65, 73, 78, 91, 100, 114, 135, 142, 148, 155, 180, 185, 186, 187, 192, 210, 211, 227, 241, 275, 310, 314, 320, 326, 346, 352, 358, 363, 376, 380, 387, 389, 390, 405, 406, 407, 410, 412, 416, 446, 463, 468, 560, 561, 562, 563, 635, 653, 682, 685, 686, 691, 781, 824, 855, 857, 858, 859, 880, 881, 905, 909, 910, 911, 912, 913, 993, 1000, 1001, 1003, 1004, 1011, 1012, 1014, 1024, 1030, 1042, 1044, 1047, 1048, 1051, 1053], "limits_": 1007, "lin": [0, 535, 661, 1019, 1039, 1040, 1041, 1042], "lin_clf": 1019, "linalg": [71, 88, 110, 111, 114, 128, 130, 197, 253, 254, 255, 258, 259, 324, 375, 381, 412, 451, 452, 453, 462, 522, 533, 536, 542, 545, 660, 675, 677, 690, 694, 698, 949, 1053], "linalgerror": 1044, "linalgwarn": 1053, "lincoln": 370, "lindenbaum": 535, "lindenstrauss": [38, 89, 182, 236, 367, 489, 503, 899, 900, 901, 1021, 1025, 1030], "lindgren": 1052, "lindquist": 1049, "line": [49, 51, 53, 56, 76, 79, 94, 103, 112, 121, 126, 135, 137, 141, 146, 168, 180, 181, 182, 185, 186, 198, 200, 201, 203, 206, 208, 211, 213, 218, 219, 221, 222, 224, 237, 241, 242, 245, 247, 265, 272, 274, 275, 281, 294, 298, 301, 309, 319, 338, 341, 343, 344, 347, 348, 350, 369, 370, 373, 375, 376, 377, 379, 380, 381, 382, 383, 387, 412, 413, 414, 438, 487, 488, 489, 509, 510, 543, 554, 555, 556, 557, 613, 616, 617, 635, 673, 689, 703, 704, 705, 809, 826, 998, 1004, 1008, 1011, 1018, 1023, 1025, 1027, 1036, 1045, 1047, 1050, 1051, 1053], "line0": [52, 233], "line1": [47, 52, 233], "line2": [47, 52, 233, 347], "line2d": [49, 112, 224, 294, 338, 341, 809, 826], "line_": [382, 438, 701, 703, 704, 705, 809, 826], "line_bin": 309, "line_fig": 141, "line_i": 213, "line_kw": [150, 152, 248, 270, 318, 324, 635, 809, 826], "line_kwarg": [155, 704], "line_profil": 381, "line_trac": 141, "line_x": [213, 227], "line_y_ransac": 213, "linea": 395, "linear": [2, 12, 45, 49, 50, 52, 53, 54, 55, 65, 66, 67, 68, 73, 86, 91, 107, 108, 110, 111, 112, 113, 114, 117, 121, 126, 127, 129, 138, 140, 153, 155, 158, 160, 165, 173, 175, 180, 181, 183, 184, 186, 190, 193, 195, 196, 197, 198, 200, 201, 203, 206, 208, 211, 212, 214, 215, 218, 222, 224, 226, 227, 228, 229, 232, 234, 240, 241, 243, 245, 246, 249, 258, 261, 264, 265, 266, 268, 271, 273, 274, 275, 276, 277, 278, 281, 283, 293, 294, 296, 297, 298, 306, 308, 309, 310, 313, 315, 319, 320, 326, 334, 336, 339, 340, 341, 344, 346, 347, 350, 356, 363, 367, 371, 372, 373, 377, 378, 380, 389, 392, 395, 405, 407, 410, 411, 412, 413, 414, 415, 416, 417, 419, 442, 444, 455, 465, 467, 475, 482, 483, 484, 497, 503, 513, 516, 522, 525, 533, 534, 535, 536, 537, 540, 542, 544, 545, 549, 550, 551, 555, 567, 584, 591, 595, 596, 608, 611, 617, 623, 634, 638, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 687, 690, 691, 692, 693, 694, 695, 696, 704, 710, 719, 722, 753, 756, 768, 770, 777, 803, 814, 818, 830, 833, 847, 848, 852, 856, 863, 864, 865, 868, 872, 873, 874, 877, 880, 882, 884, 885, 886, 887, 896, 900, 907, 908, 909, 910, 911, 912, 913, 993, 995, 996, 997, 999, 1004, 1007, 1008, 1009, 1010, 1011, 1012, 1018, 1019, 1025, 1026, 1028, 1029, 1030, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1045, 1046, 1047, 1048, 1053], "linear_baselin": 319, "linear_kernel": [2, 403, 764, 768, 1002, 1042, 1053], "linear_model": [2, 44, 47, 48, 50, 54, 63, 65, 67, 88, 104, 106, 108, 117, 140, 155, 157, 158, 163, 164, 165, 167, 169, 180, 182, 184, 185, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 227, 228, 237, 238, 239, 240, 244, 246, 249, 251, 262, 264, 271, 276, 277, 281, 282, 283, 287, 306, 309, 310, 313, 315, 317, 318, 319, 320, 321, 323, 324, 325, 326, 332, 350, 358, 362, 364, 374, 375, 377, 381, 383, 384, 388, 389, 398, 403, 406, 408, 414, 427, 432, 438, 465, 538, 540, 543, 544, 546, 547, 549, 568, 569, 570, 571, 599, 612, 634, 635, 637, 638, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 703, 704, 791, 802, 817, 826, 828, 829, 830, 832, 834, 838, 839, 840, 841, 865, 882, 886, 907, 908, 911, 914, 942, 944, 946, 947, 987, 996, 1000, 1004, 1005, 1010, 1012, 1014, 1018, 1025, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041], "linear_model_preprocessor": 210, "linear_pca": 408, "linear_preprocessor": 155, "linear_regress": [212, 283], "linear_sum_assign": [404, 722], "linear_svc": 1019, "linear_svm": 242, "linear_svm_scor": 242, "linear_svm_tim": 242, "lineardiscriminantanalysi": [2, 70, 71, 129, 231, 297, 358, 403, 537, 551, 856, 998, 1005, 1007, 1034, 1037, 1038, 1039, 1040, 1041, 1043, 1046, 1048, 1049, 1050], "linearli": [68, 126, 137, 165, 185, 192, 224, 231, 237, 277, 278, 310, 313, 343, 350, 362, 372, 387, 412, 414, 516, 554, 645, 710, 876, 877, 1004, 1007, 1010, 1019, 1041, 1050], "linearly_separ": [68, 303], "linearmodel": 1047, "linearoper": [324, 690], "linearregress": [2, 117, 158, 184, 192, 201, 206, 207, 208, 213, 216, 227, 240, 244, 246, 264, 283, 309, 358, 375, 387, 388, 408, 414, 465, 571, 635, 638, 649, 652, 655, 657, 674, 675, 690, 1000, 1004, 1005, 1014, 1038, 1039, 1043, 1046, 1047, 1048, 1050, 1053], "linearregressionifittedlinearregress": 240, "linearregressionlinearregress": 158, "linearsvc": [2, 63, 65, 103, 105, 161, 162, 182, 190, 242, 265, 267, 275, 310, 317, 334, 335, 336, 340, 341, 346, 350, 362, 381, 405, 415, 416, 437, 513, 568, 579, 634, 642, 646, 655, 675, 676, 677, 678, 679, 690, 738, 745, 830, 835, 908, 909, 912, 914, 1000, 1004, 1005, 1019, 1025, 1034, 1035, 1036, 1040, 1042, 1045, 1050], "linearsvc__c": 310, "linearsvclinearsvc": [105, 162, 275], "linearsvr": [2, 569, 913, 1019, 1038, 1040, 1045, 1050], "linecollect": [52, 233, 240, 635], "linen": [52, 233], "lineno": 381, "lineplot": [150, 268], "liner": [377, 833], "lines_": [382, 635, 809, 826], "linestyl": [50, 51, 70, 94, 106, 112, 128, 130, 135, 146, 157, 169, 172, 174, 176, 178, 187, 188, 198, 199, 200, 210, 211, 212, 216, 220, 222, 223, 228, 245, 247, 262, 265, 267, 271, 272, 277, 281, 282, 293, 301, 304, 309, 337, 340, 341, 343, 344, 346, 1053], "linewidth": [62, 70, 71, 73, 76, 92, 106, 110, 117, 119, 123, 136, 147, 150, 152, 169, 173, 177, 200, 201, 203, 205, 206, 207, 208, 211, 213, 216, 224, 227, 237, 245, 247, 277, 281, 294, 298, 309, 318, 324, 337, 338, 340, 356], "linger": 212, "linguist": [719, 904, 1017], "lingyi1110": 1049, "link": [52, 56, 135, 185, 186, 192, 210, 214, 228, 253, 262, 271, 298, 354, 363, 369, 374, 375, 376, 377, 379, 383, 389, 405, 407, 409, 412, 414, 417, 562, 563, 613, 651, 672, 683, 691, 708, 932, 934, 1000, 1007, 1020, 1021, 1023, 1027, 1032, 1034, 1037, 1038, 1041, 1042, 1045, 1051], "link_thickness_i": 298, "linkag": [72, 75, 76, 77, 80, 82, 86, 89, 90, 91, 101, 182, 188, 440, 441, 445, 446, 463, 513, 515, 523, 887, 1023, 1025, 1037, 1042, 1045], "linkage_matrix": 77, "linkage_tre": 1038, "linkedin": 379, "linker": 376, "linnerrud": [368, 1030], "linnerud": [2, 372, 506], "linprog": [673, 1000], "linspac": [44, 48, 50, 51, 54, 62, 64, 73, 74, 76, 78, 83, 89, 112, 113, 122, 130, 136, 147, 169, 170, 172, 173, 174, 175, 176, 178, 186, 192, 193, 195, 196, 201, 203, 205, 210, 211, 212, 216, 220, 221, 222, 223, 224, 235, 237, 240, 241, 243, 245, 257, 268, 270, 271, 275, 276, 277, 278, 283, 293, 294, 300, 301, 309, 311, 321, 322, 338, 339, 342, 343, 344, 346, 347, 348, 634, 635, 809, 831, 847, 848], "lint": 375, "linter": 581, "linthresh": [192, 196], "linu": [1050, 1051, 1052], "linux": [322, 375, 377, 378, 383, 1023, 1034], "lipoprotein": [165, 372], "lippert": 1000, "lippmann": 370, "lipschitz": [38, 1016], "lisa": [1042, 1043, 1045, 1046, 1048, 1049], "lise": 1048, "list": [0, 2, 44, 48, 50, 52, 53, 54, 56, 58, 59, 63, 69, 76, 80, 83, 96, 103, 130, 131, 139, 141, 146, 155, 188, 214, 247, 248, 263, 266, 268, 269, 271, 272, 277, 297, 310, 314, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 332, 342, 351, 352, 364, 369, 370, 373, 374, 375, 377, 378, 380, 381, 382, 383, 384, 387, 388, 389, 390, 393, 394, 398, 405, 407, 408, 411, 413, 414, 415, 430, 432, 437, 450, 456, 457, 464, 465, 466, 467, 471, 472, 478, 482, 483, 484, 488, 489, 490, 491, 493, 494, 497, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 515, 516, 517, 518, 519, 520, 521, 524, 533, 551, 552, 554, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 583, 584, 590, 591, 593, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 630, 635, 637, 638, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 673, 675, 676, 681, 682, 684, 687, 689, 690, 695, 699, 700, 702, 713, 714, 715, 716, 719, 721, 728, 736, 745, 749, 757, 781, 784, 786, 791, 797, 800, 801, 803, 806, 807, 809, 814, 815, 817, 826, 828, 829, 830, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 857, 858, 859, 860, 861, 864, 865, 866, 867, 868, 869, 871, 875, 878, 880, 881, 886, 888, 904, 908, 910, 913, 915, 916, 917, 918, 921, 928, 929, 933, 934, 935, 939, 941, 942, 943, 944, 946, 954, 955, 958, 969, 974, 977, 987, 993, 994, 1000, 1004, 1006, 1007, 1008, 1011, 1012, 1015, 1020, 1023, 1024, 1028, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "list_param": 375, "listedcolormap": [68, 71, 143, 296, 299, 303, 310], "listen": 350, "listinfo": 383, "lite": 1034, "liter": [375, 944, 945, 1028], "literatur": [174, 268, 285, 351, 372, 375, 381, 383, 387, 388, 407, 410, 412, 414, 443, 447, 449, 502, 537, 539, 541, 548, 556, 557, 590, 593, 711, 800, 993, 996, 1000, 1004, 1044], "litsidi": [1049, 1050], "littl": [185, 186, 187, 188, 237, 370, 415, 462, 647, 803, 817, 951, 994, 1001, 1003, 1019, 1020, 1035, 1046, 1051], "lituiev": 1047, "liu": [0, 365, 386, 396, 564, 729, 759, 1004, 1010, 1037, 1040, 1041, 1042, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "liutong": 1042, "live": [51, 103, 185, 262, 301, 370, 375, 407, 499, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 1027], "livesei": 350, "livni": [407, 442], "lizao": 1042, "lizsz": 1040, "lj2017": 407, "lk": 1037, "lkjcalc": 1042, "lkubin": 1045, "ll": [51, 89, 263, 281, 301, 375, 379, 387, 533, 542, 996, 1007, 1020], "llcrnrlat": [51, 301], "llcrnrlon": [51, 301], "lle": [230, 231, 232, 234, 531, 692, 696, 1001, 1046], "lle_hessian": 230, "lle_ltsa": 230, "lle_method": 230, "lle_mod": 230, "lle_standard": 230, "lloyd": [407, 443, 447, 449, 459, 1048, 1049], "llvm": 373, "lm": 194, "lmbda": 312, "lmbda_bc": 312, "lmbda_yj": 312, "lml": [170, 171, 175, 417], "ln": [379, 1000, 1008, 1014, 1053], "loa": [168, 176, 182, 417, 497, 614, 618, 625, 626, 628, 1025], "load": [2, 10, 44, 46, 51, 52, 53, 55, 64, 69, 81, 87, 104, 105, 121, 131, 140, 142, 143, 145, 151, 152, 155, 156, 158, 162, 163, 174, 185, 186, 190, 194, 210, 218, 226, 239, 240, 244, 246, 247, 248, 249, 251, 258, 262, 264, 266, 268, 273, 275, 280, 282, 285, 288, 292, 297, 304, 305, 306, 318, 319, 321, 322, 324, 326, 330, 331, 332, 355, 356, 357, 362, 367, 370, 372, 378, 381, 388, 401, 410, 411, 412, 414, 482, 483, 484, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 533, 535, 544, 847, 848, 951, 1004, 1014, 1024, 1030, 1034, 1039, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "load_ames_h": 155, "load_boston": [1040, 1042, 1047], "load_breast_canc": [2, 165, 188, 331, 354, 380, 594, 597, 598, 600, 677, 678, 791, 1004, 1039, 1040, 1045], "load_cont": 504, "load_dataset": 350, "load_diabet": [2, 47, 148, 158, 165, 181, 198, 199, 200, 207, 248, 264, 322, 414, 559, 563, 569, 676, 704, 828, 829, 830, 916, 918, 1012, 1040, 1045, 1048], "load_digit": [2, 69, 85, 86, 92, 105, 106, 163, 202, 217, 231, 241, 242, 266, 267, 270, 276, 290, 292, 297, 304, 306, 323, 328, 329, 381, 408, 419, 445, 446, 533, 534, 535, 536, 601, 602, 641, 642, 671, 691, 692, 693, 694, 696, 698, 1040, 1045], "load_fil": [2, 369, 370, 1036, 1048], "load_iri": [2, 67, 77, 107, 125, 127, 129, 131, 143, 156, 161, 171, 204, 219, 251, 255, 261, 273, 274, 275, 277, 278, 291, 296, 299, 304, 317, 319, 322, 333, 335, 336, 339, 342, 355, 357, 388, 401, 407, 408, 411, 414, 416, 427, 562, 568, 603, 604, 613, 622, 623, 625, 626, 634, 661, 662, 714, 791, 803, 806, 807, 809, 817, 835, 856, 902, 903, 904, 915, 917, 919, 920, 921, 994, 999, 1004, 1005, 1006, 1007, 1011, 1014, 1020, 1040, 1042, 1045], "load_lfw_pair": 1039, "load_linnerud": [2, 840, 1040, 1045], "load_mnist": [218, 288], "load_mtpl2": 228, "load_sample_imag": [2, 585, 586, 589, 1043], "load_svmlight_fil": [2, 369, 1034, 1035, 1040, 1041, 1042, 1049], "load_win": [2, 49, 250, 313, 851, 859, 1031, 1045], "loader": [2, 269, 332, 350, 368, 369, 370, 499, 500, 509, 1034, 1039, 1041, 1042, 1045], "loan": [414, 535, 1000, 1028], "loayza": 1048, "lobpcg": [81, 452, 462, 691, 694, 698, 1044, 1047, 1048, 1049], "loc": [44, 47, 48, 49, 62, 64, 70, 76, 105, 108, 111, 112, 113, 116, 123, 125, 127, 128, 129, 130, 135, 137, 138, 139, 146, 147, 148, 149, 150, 152, 155, 157, 158, 161, 169, 170, 176, 178, 185, 186, 195, 199, 201, 205, 210, 211, 212, 213, 216, 217, 220, 223, 224, 227, 228, 233, 240, 241, 242, 243, 245, 247, 255, 256, 263, 266, 267, 268, 271, 272, 275, 278, 281, 282, 283, 291, 293, 294, 304, 309, 312, 313, 318, 321, 324, 330, 338, 341, 343, 345, 346, 350, 355, 356, 817, 884, 896], "loc_a": 312, "loc_b": 312, "local": [2, 44, 49, 52, 59, 75, 86, 91, 95, 121, 124, 140, 141, 152, 165, 174, 175, 182, 186, 211, 224, 229, 232, 234, 237, 241, 247, 289, 298, 326, 338, 356, 363, 372, 373, 375, 379, 381, 383, 393, 407, 412, 414, 415, 417, 447, 452, 462, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 503, 539, 541, 545, 548, 550, 560, 561, 564, 567, 613, 614, 691, 692, 693, 694, 695, 696, 698, 699, 761, 762, 850, 853, 856, 858, 868, 877, 900, 903, 911, 969, 1002, 1003, 1007, 1008, 1020, 1025, 1027, 1029, 1030, 1038, 1042, 1046, 1049, 1052, 1053], "local_filenam": 492, "localcach": 393, "locally_linear_embed": [2, 234, 1001, 1053], "locallylinearembed": [2, 52, 230, 231, 232, 321, 691, 693, 695, 1001, 1007, 1039, 1040, 1048, 1049, 1050, 1053], "localoutlierfactor": [2, 237, 247, 294, 295, 321, 389, 564, 911, 1010, 1041, 1042, 1044, 1048, 1049, 1050, 1051, 1053], "localoutlierfactor__n_neighbor": 247, "locat": [49, 63, 87, 88, 105, 112, 113, 205, 301, 319, 339, 368, 370, 373, 375, 377, 379, 380, 383, 384, 393, 394, 407, 409, 413, 448, 460, 461, 469, 470, 471, 472, 473, 474, 475, 476, 488, 501, 502, 505, 506, 513, 516, 988, 994, 1000, 1005, 1010, 1014, 1020, 1042], "location_": [112, 113, 469, 470, 471, 472, 473, 474, 475, 476], "location_reweight": [469, 474], "lock": [326, 378, 393, 400, 401, 969, 1052, 1053], "loev": 535, "lof": [2, 49, 182, 224, 237, 247, 289, 338, 564, 853, 911, 1010, 1025], "lof_kw": 247, "lofti": [1044, 1045], "log": [2, 44, 59, 63, 64, 65, 110, 121, 135, 145, 147, 155, 161, 165, 170, 171, 173, 174, 175, 178, 198, 200, 204, 210, 215, 220, 228, 241, 243, 257, 262, 298, 313, 350, 370, 372, 373, 375, 383, 384, 389, 404, 405, 407, 408, 409, 412, 414, 415, 417, 448, 451, 460, 465, 470, 471, 472, 473, 474, 475, 476, 533, 537, 542, 550, 551, 552, 554, 556, 558, 560, 563, 565, 592, 593, 595, 596, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 645, 648, 651, 661, 662, 672, 674, 679, 683, 725, 744, 758, 800, 801, 803, 806, 807, 817, 842, 843, 844, 845, 846, 847, 848, 852, 854, 863, 864, 871, 872, 901, 904, 909, 912, 914, 915, 917, 944, 949, 993, 996, 998, 1000, 1001, 1006, 1007, 1009, 1012, 1014, 1018, 1020, 1023, 1024, 1036, 1037, 1038, 1043, 1044, 1045, 1048, 1051, 1052, 1053], "log10": [161, 175, 185, 204, 269, 339], "log1p": [108, 240, 871, 1004, 1014], "log2": [139, 220, 249, 558, 559, 560, 561, 565, 566, 915, 916, 917, 918, 1005, 1053], "log_": 1004, "log_2": [404, 564, 1010], "log_bas": 729, "log_den": 293, "log_dens": 852, "log_likelihood": [110, 613, 614, 800, 801], "log_likelihood_gradi": [613, 614], "log_logist": 1051, "log_loss": [2, 63, 64, 146, 149, 170, 313, 332, 350, 389, 405, 414, 558, 560, 562, 565, 649, 661, 679, 915, 917, 993, 1000, 1004, 1018, 1020, 1036, 1038, 1040, 1048, 1049, 1050, 1051], "log_marginal_likelihood": [170, 171, 173, 175, 178, 417, 613, 614, 1044], "log_marginal_likelihood_value_": [613, 614], "log_prob": [800, 801, 802, 825], "log_reg": [251, 321], "log_reg_input_featur": 321, "log_scal": 1050, "log_scale_transform": [210, 228], "log_scaled_numer": [210, 228], "log_y_prob": 864, "logaddexp": 1051, "logan": [1048, 1049, 1050], "logarithm": [2, 108, 155, 185, 214, 241, 269, 339, 389, 416, 460, 592, 661, 662, 679, 707, 729, 744, 754, 758, 759, 760, 794, 802, 825, 838, 847, 848, 949, 1020, 1041], "logcosh": [419, 534], "logdet": 949, "logged_in": 370, "logger": 1045, "logic": [133, 363, 376, 377, 382, 403, 414, 1020, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "logical_and": [54, 147], "logical_not": [58, 98, 130, 213], "logical_or": [212, 218, 277, 381], "logical_xor": [54, 173, 343], "loginov": 1040, "logist": [2, 63, 65, 67, 102, 104, 108, 140, 163, 182, 191, 199, 206, 208, 214, 216, 221, 227, 238, 240, 251, 262, 276, 279, 281, 282, 285, 287, 305, 306, 313, 321, 346, 350, 389, 390, 405, 408, 414, 416, 417, 437, 489, 497, 503, 505, 513, 542, 560, 562, 613, 634, 649, 660, 661, 662, 669, 671, 679, 744, 803, 817, 833, 836, 863, 864, 865, 867, 887, 914, 936, 938, 1004, 1008, 1009, 1018, 1019, 1025, 1026, 1028, 1030, 1038, 1041, 1042, 1044, 1045], "logistic__c": 106, "logistic_regress": [262, 826, 834], "logistic_regression_multinomi": 203, "logistic_regression_ovr": 203, "logistic_regression_path": [1042, 1043], "logisticregress": [2, 63, 67, 104, 106, 140, 157, 163, 164, 165, 167, 201, 202, 203, 204, 217, 225, 226, 238, 239, 249, 251, 262, 271, 277, 282, 306, 310, 317, 318, 319, 320, 321, 323, 325, 350, 362, 375, 377, 381, 383, 388, 398, 405, 406, 408, 414, 416, 427, 432, 438, 568, 570, 599, 612, 634, 637, 646, 655, 662, 675, 676, 677, 678, 679, 690, 703, 791, 802, 817, 826, 832, 834, 838, 839, 841, 892, 893, 895, 896, 897, 898, 914, 944, 946, 947, 987, 1000, 1004, 1005, 1014, 1018, 1019, 1034, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "logisticregression__c": [262, 310], "logisticregressioncv": [2, 65, 313, 389, 398, 661, 1000, 1004, 1005, 1038, 1039, 1040, 1042, 1043, 1044, 1048, 1049, 1051, 1052, 1053], "logisticregressionifittedlogisticregress": 306, "logisticregressionlogisticregress": [104, 140, 238, 239, 249, 251, 262, 282, 318, 321], "logit": [2, 405, 417, 661, 662, 1000], "loglik_lw": 110, "loglik_oa": 110, "loglik_r": 110, "loglike_": 533, "loglog": [110, 241], "logloss": 1045, "lognorm": [147, 175, 194, 257, 312, 1014], "logo": [0, 411, 810], "logprob": 852, "logreg": 841, "logspac": [44, 52, 65, 106, 110, 128, 165, 170, 175, 185, 204, 214, 215, 241, 243, 257, 262, 269, 281, 292, 303, 310, 313, 339, 346, 826, 834, 999, 1000], "logsumexp": [298, 1041], "loguniform": [46, 169, 276, 993, 1044], "logx": [214, 346], "lohit": 1051, "loic": [1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "loki": [322, 363, 1004, 1042, 1045], "lomp": 373, "lon": 767, "london": [408, 415, 466], "londschien": [1047, 1051], "lone": [1049, 1050], "long": [0, 31, 44, 51, 52, 80, 96, 147, 174, 181, 185, 187, 210, 244, 245, 247, 271, 301, 308, 318, 350, 351, 358, 363, 373, 375, 383, 387, 389, 390, 401, 407, 453, 499, 539, 679, 680, 681, 806, 807, 842, 843, 844, 845, 846, 864, 865, 875, 1004, 1010, 1014, 1015, 1017, 1018, 1022, 1036, 1040, 1046, 1048], "long_term_trend_kernel": 174, "long_titl": 343, "longer": [0, 44, 71, 87, 138, 185, 186, 199, 305, 320, 375, 377, 407, 411, 414, 415, 449, 537, 564, 999, 1003, 1004, 1006, 1009, 1019, 1027, 1028, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "longest": [288, 1004], "longitud": [301, 308, 370, 499, 702, 767], "longpathsen": 393, "longstand": [1035, 1041], "loo": [389, 811, 1045], "look": [44, 45, 65, 87, 89, 121, 124, 126, 147, 148, 169, 174, 175, 181, 185, 186, 212, 230, 234, 237, 244, 259, 262, 263, 268, 270, 282, 305, 324, 350, 351, 358, 363, 364, 369, 370, 375, 376, 377, 379, 381, 383, 387, 388, 407, 410, 412, 413, 414, 415, 448, 488, 489, 558, 559, 560, 561, 565, 566, 604, 605, 634, 662, 695, 887, 915, 916, 917, 918, 1000, 1001, 1004, 1014, 1018, 1019, 1021, 1034, 1042, 1044], "lookup": [384, 968, 1043], "loop": [47, 48, 138, 147, 185, 263, 273, 350, 357, 362, 375, 376, 381, 407, 411, 416, 649, 650, 655, 656, 662, 663, 664, 665, 666, 993, 1017, 1018, 1037, 1038, 1041, 1046, 1047, 1050, 1051], "loopym": 1044, "loos": [259, 265, 1019, 1042], "looser": 204, "lopusz": 1045, "lorain": 322, "lorek": 1041, "lorentzen": [0, 396, 1004, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "lorenz": [210, 228, 1039, 1051], "lorenz_curv": [210, 228], "lose": [214, 227, 352, 370, 389, 410, 415, 417, 950, 951, 994, 1000], "losi": [0, 397, 1034], "loss": [2, 26, 47, 53, 62, 63, 64, 65, 130, 141, 146, 147, 148, 149, 169, 170, 182, 191, 195, 201, 203, 204, 212, 214, 215, 217, 218, 222, 228, 243, 262, 276, 304, 305, 313, 320, 324, 325, 332, 336, 337, 341, 343, 346, 350, 387, 389, 405, 412, 417, 464, 465, 497, 509, 510, 533, 539, 540, 541, 544, 548, 553, 554, 555, 559, 560, 561, 562, 563, 566, 646, 649, 652, 661, 662, 669, 670, 671, 672, 673, 674, 675, 679, 680, 681, 682, 706, 709, 712, 725, 726, 737, 738, 743, 744, 745, 748, 749, 750, 751, 752, 753, 754, 755, 756, 793, 794, 799, 803, 806, 807, 817, 829, 830, 833, 864, 865, 867, 868, 871, 872, 880, 881, 882, 887, 907, 908, 913, 914, 916, 918, 951, 955, 997, 1000, 1008, 1012, 1017, 1018, 1019, 1020, 1025, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053], "loss_": [304, 864, 865, 1008, 1048], "loss_curve_": [304, 864, 865], "loss_func": 53, "loss_funct": 53, "loss_function_": 1051, "lossfit_timemapermsemaepinball_loss_05pinball_loss_50pinball_loss_95strstrstrstrstrstrstrstr": 53, "lossfunct": 1043, "lossi": 407, "lossili": 389, "lost": [59, 91, 114, 370, 376, 387, 401, 1001, 1004], "lostanlen": 1044, "lostcoast": 1044, "lot": [44, 114, 150, 185, 214, 370, 375, 376, 383, 412, 414, 806, 807, 899, 900, 993, 1016, 1018, 1019, 1023, 1024, 1028, 1034, 1039, 1041, 1042, 1043, 1044, 1046], "lot_area": 247, "lotan": 1028, "lotconfig": 144, "lotfrontag": 108, "loui": [322, 1039, 1040, 1044, 1046, 1048, 1050, 1051], "louib": [1042, 1043], "loupp": [0, 397, 414, 556, 557, 1034, 1035, 1036, 1037, 1038, 1039, 1040], "lourida": 1040, "low": [2, 38, 44, 51, 52, 73, 84, 113, 117, 123, 125, 128, 135, 138, 151, 165, 187, 204, 206, 210, 212, 214, 224, 230, 232, 237, 241, 247, 253, 254, 256, 259, 261, 262, 268, 270, 274, 275, 294, 295, 305, 312, 314, 315, 323, 331, 338, 339, 350, 357, 371, 372, 375, 380, 383, 387, 389, 393, 404, 405, 406, 411, 412, 415, 442, 444, 449, 468, 522, 525, 536, 584, 591, 605, 682, 695, 699, 708, 729, 745, 792, 852, 881, 888, 905, 951, 968, 993, 999, 1000, 1001, 1003, 1004, 1007, 1009, 1010, 1011, 1012, 1014, 1016, 1019, 1020, 1026, 1030, 1035, 1038, 1039, 1040, 1042, 1043, 1048, 1049], "low_cardin": 314, "low_cardinality_featur": 314, "low_cardinalityindex": 314, "low_i": 206, "low_x": 206, "lower": [38, 45, 53, 64, 65, 68, 70, 92, 111, 117, 121, 123, 128, 135, 138, 141, 143, 147, 150, 151, 163, 169, 171, 173, 175, 177, 185, 186, 187, 196, 197, 199, 201, 210, 211, 212, 213, 223, 230, 234, 240, 241, 246, 255, 259, 262, 267, 268, 270, 271, 275, 276, 278, 281, 282, 291, 292, 294, 295, 310, 313, 321, 325, 331, 339, 350, 351, 352, 355, 370, 375, 389, 405, 406, 407, 410, 411, 412, 413, 414, 415, 418, 444, 448, 464, 467, 499, 510, 533, 535, 542, 545, 560, 561, 562, 563, 564, 590, 591, 593, 605, 614, 616, 617, 618, 620, 622, 623, 625, 626, 628, 635, 636, 638, 640, 680, 682, 715, 719, 728, 731, 737, 742, 800, 801, 853, 855, 857, 858, 859, 861, 888, 907, 908, 909, 910, 911, 914, 937, 999, 1000, 1001, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1016, 1018, 1019, 1020, 1036, 1037, 1042, 1049, 1051], "lower_bound": 267, "lower_bound_": [800, 801, 1042], "lowercas": [415, 423, 442, 443, 445, 447, 449, 482, 483, 484, 485, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 590, 591, 593, 642, 643, 644, 645, 691, 692, 695, 851, 856, 859, 863, 868, 873, 899, 900, 1047], "lowest": [2, 108, 117, 186, 196, 258, 369, 407, 411, 638, 640, 806, 807, 810, 914, 915, 1001, 1004, 1020, 1049], "loyal": 1039, "loyola": [0, 365, 1047, 1048], "lo\u00efc": [0, 396, 1042, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "lp_model": [328, 329], "lpgo": [411, 812], "lpo": 813, "lprun": 381, "lr": [63, 65, 140, 157, 158, 213, 239, 240, 264, 271, 388, 398, 414, 569, 570, 571, 715, 987], "lr_": 1004, "lr__c": 414, "lr_base": 271, "lrap": [742, 1004], "lrjball": [1044, 1045], "lrlinearregress": 158, "ls100": 333, "ls2010": 996, "ls30": 333, "ls50": 333, "ls_pipelin": 332, "lsa": [2, 412, 545, 1036], "lsa_vector": 351, "lshforest": [1038, 1041], "lsi": 412, "lsqr": [70, 315, 550, 675, 677, 690, 998, 1035, 1041, 1048], "lstrip": [68, 80, 96, 237, 303, 310], "lstsq": [130, 375, 660, 673, 1053], "lsturtew": 1047, "lsvc": 416, "lsvm": 190, "lsvm_score": 190, "lsvm_time": 190, "lt": [104, 105, 140, 155, 185, 258, 266, 280, 375, 395], "ltd": [262, 370], "ltg": [165, 372, 502], "ltorgo": 370, "ltsa": [230, 231, 232, 692, 696, 1001, 1053], "lu": [542, 545, 950, 951, 1040, 1041, 1042, 1043, 1050, 1051, 1052], "luangkot": 1041, "luca": [1034, 1044, 1045, 1046, 1047, 1053], "lucca": 1047, "luce": 1037, "lucen": 415, "lucgiffon": 1045, "luci": [0, 365, 386, 396, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "luciano": [1042, 1049], "lucieclair": 1048, "lucija": 1042, "lucio": 1043, "lucki": 358, "lucyleeow": 1045, "ludwig": 1034, "luessi": 1036, "lui": [661, 1035, 1037, 1038, 1042, 1051], "luiz": 1048, "luk": 1043, "luka": [1038, 1045, 1051, 1052], "luke": 1042, "lukowski": 1049, "luk\u00e1\u0161": 1051, "luna": 1048, "lunovian": 1053, "lunt": 1037, "luo": 1038, "lupo": 1046, "luqi": 1043, "luqu": 1044, "lurk": 1034, "lustig": 1000, "lutz": [1040, 1044, 1047, 1051], "luxburg": [407, 452, 462, 694], "luzgin": 1044, "lv_ep": 242, "lvdmaaten": [695, 1041], "lw": [94, 110, 111, 113, 125, 129, 130, 205, 211, 213, 216, 220, 227, 233, 256, 263, 278, 293, 308, 330, 345], "lw_cov_": 114, "lw_mse": 111, "lw_prec_": 114, "lw_score": 128, "lw_shrinkag": 111, "lwda": 450, "lx": 1007, "ly": [242, 855, 857, 858, 859, 1038], "ly648499246": 1047, "lynch": [1035, 1041], "lyon": [1040, 1041], "lyra": [1035, 1038, 1039], "lyrl2004": [370, 498], "l\u00e9o": 1042, "l\u00e9on": [1018, 1048, 1049, 1050, 1053], "l\u00e9onard": [1044, 1049], "l\u00e9one": 1040, "l\u00e9oni": 1040, "l\u00f3pez": [1038, 1042, 1043, 1046], "l\u00f6fstedt": 1041, "l\u00f6ning": 1046, "m": [0, 44, 48, 51, 58, 64, 65, 80, 92, 93, 97, 98, 99, 112, 113, 121, 135, 158, 195, 210, 228, 268, 272, 301, 324, 332, 335, 345, 350, 362, 363, 369, 370, 372, 373, 375, 379, 381, 389, 393, 404, 405, 407, 409, 412, 414, 416, 418, 444, 445, 446, 450, 457, 473, 474, 501, 514, 529, 533, 535, 537, 542, 642, 648, 652, 667, 674, 688, 689, 692, 696, 711, 719, 729, 744, 759, 761, 762, 800, 801, 853, 878, 951, 982, 983, 994, 996, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1012, 1014, 1018, 1020, 1028, 1042, 1043, 1044, 1045, 1048, 1049, 1050, 1051, 1052, 1053], "m1": [373, 403], "m11": 370, "m2": 403, "m2012": 997, "m2019": 1011, "m_max": 171, "ma": [114, 314, 339, 1000, 1040, 1045], "maascha": 1049, "maaten": [695, 699, 1001], "mabel": [1042, 1046], "mabu": 1047, "mac": [58, 314, 332, 370, 375, 711, 1004], "macaulei": 314, "macbook": 1042, "macdonald": [1044, 1045], "mach": [273, 405, 411, 595, 596], "machado": [405, 726], "machin": [0, 2, 40, 44, 46, 48, 49, 53, 65, 97, 106, 141, 161, 162, 165, 169, 174, 183, 187, 201, 203, 206, 222, 250, 262, 268, 271, 274, 285, 302, 308, 313, 315, 319, 322, 325, 335, 340, 343, 346, 350, 352, 362, 363, 368, 369, 370, 372, 375, 378, 382, 387, 388, 389, 392, 395, 401, 405, 407, 411, 412, 414, 415, 417, 437, 439, 448, 471, 472, 478, 503, 505, 511, 517, 518, 519, 531, 533, 535, 542, 545, 556, 557, 558, 559, 560, 561, 565, 566, 567, 595, 596, 613, 614, 617, 622, 625, 637, 641, 642, 644, 646, 647, 648, 653, 654, 657, 658, 659, 660, 661, 662, 679, 685, 686, 695, 711, 716, 728, 738, 744, 746, 788, 791, 800, 832, 833, 847, 848, 853, 856, 863, 864, 865, 867, 885, 887, 893, 907, 908, 909, 910, 912, 913, 917, 918, 993, 994, 996, 997, 1000, 1001, 1002, 1004, 1005, 1007, 1010, 1011, 1012, 1014, 1018, 1020, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1034, 1036, 1046, 1047, 1048, 1049, 1051], "machineri": [377, 956], "maciej": 1045, "maci\u00e0": [1004, 1047, 1049], "mackai": [647, 648, 1000], "mackenbach": 1045, "maco": [376, 377, 378, 393, 403, 1042, 1046, 1048], "macosx": 1034, "macro": [46, 69, 103, 162, 266, 306, 317, 328, 329, 370, 411, 710, 716, 732, 733, 741, 786, 787, 790, 791, 825, 1004, 1034, 1042, 1050], "macro_roc_auc_ovo": 277, "macro_roc_auc_ovr": 277, "macroscop": 407, "macsween": [1043, 1044], "mad": [674, 1040], "madan": 1046, "made": [0, 53, 65, 103, 113, 126, 127, 135, 141, 158, 176, 185, 186, 210, 228, 247, 259, 272, 314, 318, 339, 355, 362, 370, 372, 375, 379, 389, 390, 398, 407, 414, 415, 419, 443, 446, 447, 449, 459, 497, 504, 590, 591, 593, 633, 634, 659, 668, 682, 688, 689, 738, 786, 803, 806, 807, 817, 821, 822, 823, 844, 847, 848, 1004, 1005, 1010, 1020, 1023, 1028, 1034, 1035, 1036, 1037, 1038, 1041, 1043, 1044, 1047, 1048, 1052], "madelon": 516, "madhura": [1043, 1045, 1046, 1049, 1050], "madinak": 1049, "madsen": [1040, 1042], "mae": [44, 53, 155, 210, 212, 559, 566, 748, 916, 918, 1004, 1020, 1041, 1042, 1046, 1047], "mae_test": 185, "mae_train": 185, "maennel": 1049, "magali": 1048, "magazin": [113, 416], "magda": 1045, "magenta": [110, 149], "maggi": [1048, 1052, 1053], "maggiecheg": [1044, 1048], "maggio": [1045, 1046, 1047], "magic": [244, 376, 381, 417, 619, 624, 627], "magnesium": 372, "magnitud": [44, 130, 137, 170, 181, 185, 227, 247, 273, 308, 313, 320, 325, 362, 370, 381, 407, 414, 417, 616, 655, 707, 887, 1000, 1004, 1008, 1014, 1018, 1020, 1036, 1043, 1052], "mahajan": [1042, 1044, 1051], "mahal": 112, "mahal_emp_cov": 112, "mahal_robust_cov": 112, "mahalanobi": [109, 113, 128, 182, 213, 407, 409, 450, 457, 469, 470, 471, 472, 473, 474, 475, 476, 702, 781, 782, 783, 998, 1007, 1010, 1025, 1042, 1045, 1046], "mahalanobisdist": 702, "mahapatra": 1041, "mahdavi": 642, "maheshakya": [0, 1037, 1038, 1039], "mahieux": 1028, "mahimkar": 1052, "mahmood": 1052, "mahout": 844, "mai": [0, 2, 26, 48, 58, 63, 75, 80, 81, 90, 104, 117, 121, 144, 145, 150, 165, 173, 175, 177, 185, 188, 190, 193, 196, 200, 203, 214, 216, 235, 244, 247, 271, 273, 275, 276, 282, 303, 313, 329, 339, 343, 346, 350, 351, 352, 358, 362, 363, 364, 367, 369, 370, 371, 372, 374, 375, 377, 379, 380, 383, 387, 389, 390, 393, 398, 401, 404, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 430, 439, 440, 441, 443, 444, 445, 446, 447, 449, 451, 452, 453, 454, 459, 462, 465, 469, 472, 482, 483, 484, 487, 488, 489, 497, 509, 510, 516, 535, 536, 539, 541, 542, 545, 548, 549, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 573, 575, 583, 596, 599, 604, 613, 614, 620, 623, 637, 638, 640, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 675, 676, 677, 679, 680, 681, 682, 684, 687, 689, 691, 692, 694, 695, 696, 698, 700, 708, 714, 715, 718, 719, 721, 722, 724, 725, 726, 727, 729, 741, 759, 766, 788, 789, 803, 805, 806, 807, 808, 817, 818, 819, 822, 823, 828, 832, 835, 840, 841, 842, 843, 844, 846, 849, 850, 851, 853, 855, 857, 858, 859, 865, 866, 867, 870, 872, 882, 884, 885, 886, 887, 888, 890, 896, 899, 900, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 920, 931, 933, 934, 954, 955, 993, 994, 996, 998, 1000, 1001, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1024, 1034, 1036, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "maikia": [1042, 1043, 1045, 1046], "mail": [370, 375, 379, 383, 387, 390, 1042, 1043], "mailhot": 1034, "mailman": 383, "main": [2, 38, 49, 69, 96, 117, 125, 144, 182, 237, 277, 287, 316, 346, 350, 362, 363, 364, 368, 373, 375, 377, 379, 381, 383, 387, 388, 389, 392, 393, 405, 407, 412, 414, 415, 417, 504, 526, 531, 550, 551, 628, 716, 837, 907, 908, 993, 1001, 1003, 1004, 1011, 1016, 1024, 1027, 1034, 1037, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "mainak": 1041, "maingret": 1045, "mainli": [65, 87, 135, 138, 169, 277, 285, 362, 377, 405, 614, 1006, 1011], "maint": 379, "maintain": [89, 215, 228, 230, 244, 268, 363, 374, 378, 381, 382, 383, 387, 389, 390, 393, 407, 414, 440, 442, 876, 877, 883, 884, 887, 892, 895, 896, 898, 1000, 1001, 1004, 1014, 1023, 1024, 1030, 1049, 1053], "mainten": [0, 375, 383, 387, 393, 400, 1000, 1024, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "mainy": 1046, "mair": 638, "mairal": [412, 532, 538], "mairal_icml09": [532, 538], "maisonneuv": 1046, "maithreyi": 1044, "maj": 570, "major": [2, 50, 55, 71, 141, 262, 275, 277, 308, 312, 317, 318, 319, 320, 321, 322, 323, 324, 343, 352, 356, 362, 370, 374, 375, 377, 379, 381, 387, 390, 401, 407, 411, 413, 415, 552, 570, 571, 697, 919, 921, 1004, 1007, 1018, 1024, 1028, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "make": [0, 2, 44, 47, 48, 51, 53, 55, 56, 59, 60, 63, 64, 65, 75, 76, 79, 80, 90, 95, 96, 101, 106, 126, 135, 141, 144, 147, 150, 153, 162, 165, 169, 174, 177, 184, 185, 186, 187, 192, 196, 197, 200, 203, 204, 205, 210, 211, 212, 214, 216, 228, 231, 239, 241, 243, 244, 245, 247, 253, 255, 258, 259, 262, 263, 268, 270, 271, 277, 278, 279, 282, 287, 297, 305, 308, 309, 314, 321, 323, 325, 339, 348, 350, 351, 352, 356, 358, 362, 363, 364, 369, 370, 373, 374, 376, 377, 378, 379, 380, 381, 383, 387, 389, 393, 398, 401, 404, 405, 407, 408, 409, 411, 412, 414, 415, 416, 419, 440, 441, 442, 443, 445, 447, 449, 451, 452, 453, 458, 459, 460, 462, 488, 504, 515, 516, 523, 524, 528, 533, 535, 542, 552, 553, 556, 557, 562, 563, 585, 586, 609, 610, 634, 652, 658, 659, 674, 694, 698, 733, 740, 745, 771, 772, 784, 800, 801, 803, 805, 808, 814, 818, 819, 822, 823, 829, 830, 837, 838, 841, 874, 883, 886, 887, 891, 895, 897, 898, 899, 900, 913, 921, 933, 934, 944, 951, 958, 964, 989, 994, 996, 998, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1014, 1017, 1018, 1019, 1020, 1022, 1023, 1024, 1028, 1031, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "make_": 1043, "make_biclust": [2, 60, 514, 1036], "make_blob": [2, 62, 64, 70, 74, 78, 79, 80, 83, 89, 90, 91, 93, 94, 96, 97, 98, 203, 222, 237, 256, 311, 318, 321, 337, 340, 341, 347, 371, 378, 414, 516, 699, 713, 795, 796, 923, 1042, 1045, 1048], "make_cbar": 279, "make_checkerboard": [2, 59, 512, 1036], "make_circl": [2, 68, 80, 96, 126, 153, 235, 303, 304, 310, 330, 371, 1035, 1042, 1045], "make_classif": [2, 63, 65, 68, 139, 140, 142, 162, 164, 167, 265, 271, 279, 280, 298, 303, 310, 317, 319, 323, 325, 326, 346, 358, 371, 378, 403, 406, 414, 437, 438, 487, 513, 554, 556, 558, 565, 607, 609, 612, 669, 700, 701, 703, 705, 802, 825, 826, 831, 832, 834, 837, 864, 867, 907, 914, 993, 1004, 1005, 1014, 1019, 1040, 1041, 1042, 1044], "make_column_selector": [2, 104, 144, 155, 247, 408, 464, 467, 1044], "make_column_transform": [2, 144, 155, 185, 239, 318, 408, 464, 466, 1042], "make_data": [71, 95], "make_dataset": 1043, "make_default": 973, "make_ellips": 255, "make_estim": 247, "make_friedman1": [2, 371, 414, 540, 544, 595, 596, 635], "make_friedman2": [2, 371, 614, 616, 617, 618, 619, 620, 624, 627, 628], "make_friedman3": [2, 371], "make_gaussian_quantil": [2, 135, 137, 371, 470, 474, 475, 476, 481, 521], "make_hastie_10_2": [2, 149, 272, 371, 414, 560, 1011], "make_heatmap": 279, "make_low_rank_matrix": [2, 323, 325, 525], "make_ml_clf": 119, "make_moon": [2, 68, 80, 96, 237, 268, 303, 304, 310, 371, 993, 1041, 1045], "make_multilabel_classif": [2, 119, 245, 371, 516, 537, 791, 838, 839, 1004, 1036, 1037, 1039, 1045], "make_pipelin": [2, 44, 68, 92, 117, 140, 144, 155, 161, 162, 165, 180, 181, 185, 186, 190, 192, 198, 200, 210, 211, 216, 224, 228, 231, 237, 238, 239, 247, 248, 249, 251, 262, 265, 275, 282, 288, 297, 303, 310, 313, 314, 315, 317, 318, 319, 320, 321, 322, 351, 358, 388, 398, 408, 411, 568, 679, 681, 859, 867, 892, 893, 895, 896, 897, 898, 907, 908, 909, 910, 912, 913, 994, 1007, 1014, 1018, 1019, 1037, 1044, 1047], "make_plot": 308, "make_regress": [2, 50, 108, 192, 194, 195, 197, 213, 214, 281, 318, 324, 358, 371, 378, 388, 555, 557, 561, 566, 608, 610, 611, 638, 649, 650, 652, 654, 655, 656, 658, 663, 664, 665, 666, 667, 668, 670, 674, 682, 684, 685, 686, 688, 689, 690, 865, 908, 925, 1004, 1005, 1007], "make_s_curv": [2, 230, 235], "make_scor": [2, 53, 147, 150, 262, 272, 325, 398, 406, 411, 714, 803, 825, 829, 830, 1043, 1051, 1053], "make_sparse_coded_sign": [2, 209, 532, 538, 546, 547, 1048, 1050], "make_sparse_spd_matrix": [2, 114, 478, 530, 1051], "make_sparse_uncorrel": [2, 371], "make_spd_matrix": [2, 528], "make_subplot": 141, "make_swiss_rol": [2, 101, 234, 1048], "make_union": [2, 408, 866, 1037, 1041], "makedir": 1041, "maker": [184, 185], "makhija": 1049, "makoeppel": 1047, "maksym": 1049, "maladier": 1049, "maladi\u00e8r": [1049, 1050], "malcolm": 1042, "maldonado": [1044, 1047], "male": [104, 185, 322, 380, 880, 881, 1014], "malem": 1051, "malet": 1034, "malform": [56, 1038], "malic": [313, 372], "malic_acid": 49, "malici": 401, "malign": [165, 372, 501], "malik": [407, 452, 462, 694], "mallat": [667, 688, 689, 1000], "mallatpursuit93": [667, 688, 689], "mallow": [734, 1040], "maloo": [1042, 1043], "malt": [1047, 1048, 1049, 1051], "maltimor": 1044, "malu": 228, "malzer": 446, "mal\u00e9zieux": 1047, "mamba": 401, "mame": 1051, "mammal": 51, "mammalian": 412, "man": [412, 592, 772, 842, 846, 1002, 1004, 1006], "manag": [0, 2, 117, 251, 361, 369, 373, 376, 377, 379, 383, 387, 389, 390, 401, 414, 450, 468, 629, 905, 998, 1020, 1023, 1024, 1028, 1030, 1047, 1050, 1053], "manaileng": 1047, "manasimj": 1052, "mandal": 1044, "mandatori": [375, 415], "mandatorili": 1041, "mandera": 1037, "mandi": [1045, 1048], "mandjev": 1048, "mandyam": 1044, "mangasarian": [165, 372], "mangipudi": 1040, "manh": 1042, "manhattan": [407, 441, 445, 450, 457, 702, 765, 774, 781, 782, 783, 854, 1002, 1007, 1038, 1043, 1050], "manhattan_dist": [2, 450, 457, 691, 765, 849, 850, 851, 853, 855, 857, 858, 859, 860, 861, 1034, 1044, 1049, 1050], "manhattandist": 702, "mani": [44, 47, 50, 58, 89, 90, 107, 110, 114, 135, 141, 142, 143, 148, 161, 165, 187, 210, 230, 241, 254, 261, 262, 268, 276, 280, 281, 288, 308, 313, 314, 317, 318, 319, 320, 321, 323, 324, 325, 326, 350, 358, 362, 364, 370, 372, 374, 375, 377, 388, 389, 390, 393, 401, 404, 405, 407, 408, 409, 412, 414, 415, 416, 417, 419, 504, 542, 554, 555, 558, 559, 560, 561, 565, 566, 567, 608, 611, 630, 642, 653, 657, 661, 662, 669, 670, 671, 679, 680, 681, 695, 698, 777, 781, 803, 807, 817, 864, 865, 880, 885, 887, 907, 915, 916, 917, 918, 993, 994, 996, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1010, 1011, 1014, 1017, 1019, 1021, 1022, 1023, 1024, 1028, 1034, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1048, 1049, 1050], "manideep": 1052, "manifest": [383, 1001, 1007], "manifold": [2, 52, 75, 86, 101, 140, 233, 234, 235, 241, 288, 298, 317, 321, 322, 330, 368, 389, 407, 412, 414, 503, 526, 531, 545, 550, 567, 691, 692, 693, 694, 695, 696, 697, 698, 699, 856, 868, 877, 900, 936, 1007, 1025, 1029, 1030, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1051], "manimaran": [1043, 1045, 1046, 1047, 1048], "manipul": [2, 369, 403, 508, 1023, 1040], "manish": 1045, "maniteja": [1040, 1041, 1042], "mankoo": 1049, "mann": 1044, "mannbi": 1042, "manner": [44, 108, 121, 162, 186, 190, 255, 321, 322, 363, 375, 381, 407, 412, 414, 415, 712, 847, 848, 993, 1004, 1020, 1037, 1044], "mannila": 1016, "manning2008": 1004, "manoharan": [1041, 1042], "manoj": [0, 165, 397, 1037, 1038, 1039, 1040, 1041], "manraj": 1041, "mansi": 1049, "mansingh": 1048, "mansouri": 1050, "mantovani": 1049, "manu": 370, "manual": [2, 44, 81, 89, 185, 186, 188, 211, 221, 270, 288, 331, 337, 350, 352, 362, 363, 370, 375, 379, 380, 387, 388, 393, 401, 407, 411, 412, 413, 437, 449, 568, 802, 825, 857, 880, 886, 993, 998, 999, 1000, 1003, 1004, 1007, 1014, 1024, 1042, 1044, 1050, 1052], "manuel": [1034, 1038, 1042, 1043, 1046, 1047, 1052], "manufactur": [185, 414], "manvendra": [1040, 1041], "maocx": 1044, "map": [2, 24, 38, 44, 45, 50, 51, 56, 58, 64, 87, 117, 126, 139, 146, 149, 153, 169, 182, 190, 210, 228, 230, 232, 236, 241, 244, 247, 269, 272, 277, 296, 299, 301, 307, 308, 332, 339, 343, 351, 352, 369, 370, 376, 387, 389, 398, 401, 405, 407, 408, 411, 412, 414, 415, 421, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 497, 499, 503, 510, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 583, 584, 585, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 691, 692, 693, 694, 695, 765, 768, 800, 801, 802, 803, 806, 807, 814, 815, 817, 825, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 895, 896, 899, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 957, 960, 961, 993, 996, 1001, 1004, 1006, 1016, 1019, 1020, 1025, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1051], "mapd": 1004, "mape": [2, 53, 749, 1004], "mape_cv_mean": 144, "mape_cv_std": 144, "mapi": 53, "mar": 52, "marc": [1041, 1043, 1044, 1050, 1053], "march": [174, 729, 759, 1004, 1034, 1038, 1042, 1044, 1049], "marchand": 1048, "marchman": [1035, 1036], "marco": [1040, 1042, 1043, 1047, 1048, 1049, 1052, 1053], "marcofalk": 1041, "marcogorelli": [1042, 1043], "marcolini": 1047, "marcom": 1048, "marcu": [1042, 1051], "mare": 1051, "marek": [1034, 1051], "maren": [0, 365, 386, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "margeta": 1042, "margffoi": 1053, "margin": [31, 44, 52, 63, 65, 137, 170, 171, 172, 173, 174, 175, 182, 185, 186, 191, 220, 221, 223, 245, 247, 268, 285, 308, 311, 314, 334, 335, 337, 338, 339, 341, 343, 347, 348, 372, 405, 412, 414, 417, 513, 613, 614, 634, 648, 679, 738, 836, 884, 896, 909, 912, 1000, 1004, 1006, 1010, 1011, 1014, 1018, 1019, 1025, 1041, 1043], "marguli": 1044, "mari": [103, 1042, 1043, 1044, 1045, 1048, 1053], "maria": [165, 407, 1045, 1046, 1047, 1048, 1049], "mariam": 1046, "mariana": 1045, "mariangela": 1047, "mariano": 268, "mariel": 1045, "marielaraj": 1047, "marija": [1045, 1046, 1052], "marijn": 1046, "marin": [529, 1052], "marina": 407, "marinelm": 1043, "mario": [405, 1038, 1040, 1048, 1049, 1050], "marit": [324, 497], "mari\u00e9": [0, 365, 1043, 1044, 1045, 1046, 1047, 1048], "mark": [2, 71, 92, 119, 160, 181, 272, 279, 367, 375, 379, 383, 384, 389, 407, 536, 609, 610, 614, 635, 661, 860, 861, 902, 903, 920, 940, 945, 946, 951, 1000, 1028, 1030, 1034, 1035, 1040, 1042, 1043, 1050, 1051, 1052, 1053], "markdown": 378, "marker": [50, 51, 56, 65, 67, 71, 73, 74, 78, 86, 89, 92, 93, 94, 97, 98, 116, 119, 123, 141, 154, 176, 177, 190, 198, 204, 206, 208, 210, 212, 213, 225, 227, 231, 253, 255, 256, 262, 263, 268, 270, 271, 272, 295, 308, 313, 330, 354, 378, 379, 415, 1042, 1044, 1045, 1050], "markeredgecolor": [83, 89, 95, 97, 98], "markeredgewidth": [112, 272], "markerfacecolor": [83, 89, 95, 97, 98], "markers": [83, 89, 92, 95, 97, 98, 147, 172, 176, 240, 262, 321], "markerstyl": 262, "market": [43, 81, 86, 150, 182, 230, 231, 407, 409, 454, 471, 472, 692, 1001, 1025, 1028], "marketplac": 1028, "markham": [1038, 1045, 1046], "markiwanchyshyn": 1042, "marko": [1034, 1043, 1044, 1050], "markou": 1047, "markov": [417, 614, 1009, 1023, 1034], "markovtsev": 1042, "marktab": 1039, "marku": [407, 450, 457, 1042, 1044, 1045, 1046], "marmo": [0, 366, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "maron": [407, 442], "marr": 185, "marr_unmarri": 185, "marreddi": 1048, "marri": 185, "marriott": 52, "marsgui": 1042, "marsh": 1045, "marshal": 372, "marsi": 1037, "marsland": 531, "marslast": 531, "marszalek": [761, 762, 1002], "mart": [52, 1044], "martel": 1048, "martha": 314, "martian": 1044, "martin": [0, 365, 724, 726, 727, 1000, 1004, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1051, 1052, 1053], "martin1997": 1004, "martina": [1044, 1046], "martinbpr": [1039, 1040], "martinez": 1041, "martino": 1039, "martinosorb": 1039, "martinsson": [56, 536, 542, 951], "martynov": 1047, "mart\u00edn": [1047, 1048], "marufo": 1049, "marufur": 1041, "marvin": [1049, 1050], "marwaha": 1042, "marx": 1014, "maryanmorel": [1039, 1040], "marzinotto": [1042, 1043], "mar\u00eda": [1048, 1049, 1050, 1053], "mas_vnr_typ": 247, "masafumi": 1039, "masanori": [1049, 1050], "masashi": [1044, 1046], "masecchia": 1034, "mash": 415, "mask": [2, 54, 78, 100, 210, 218, 247, 266, 267, 332, 384, 389, 408, 414, 464, 469, 474, 562, 563, 583, 587, 588, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 609, 610, 632, 633, 635, 636, 652, 674, 803, 806, 807, 817, 975, 994, 1011, 1034, 1037, 1039, 1040, 1042, 1044, 1052], "mask_al": 994, "mask_false_neg": 262, "mask_false_posit": 262, "mask_missing_values_onli": 994, "mask_out": 54, "mask_test": 228, "mask_train": [186, 228], "mask_true_neg": 262, "mask_true_posit": 262, "mask_y_pr": 67, "maskani": [1042, 1044, 1045, 1046], "masked_arrai": [339, 803, 817], "masked_equ": 114, "maskedarrai": [272, 1040], "mason": 1038, "mass": [165, 248, 372, 446, 800, 1000, 1011], "massachusett": 370, "massia": [0, 1045, 1047, 1048], "massich": [1041, 1042, 1043, 1044], "massil": 1040, "masstran": 1043, "master": [52, 288, 322, 375, 1028], "masurel": 1035, "masvnrarea": [108, 155], "masvnrtyp": [144, 155], "mat": [369, 415], "match": [2, 44, 59, 73, 88, 121, 122, 124, 130, 141, 182, 190, 191, 210, 232, 240, 247, 343, 352, 370, 373, 377, 407, 412, 414, 415, 428, 449, 464, 466, 492, 509, 510, 516, 527, 532, 538, 543, 549, 552, 568, 569, 573, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 630, 631, 632, 633, 661, 667, 668, 688, 689, 702, 706, 707, 708, 716, 718, 722, 737, 781, 782, 783, 789, 847, 848, 852, 856, 870, 871, 872, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 907, 914, 920, 937, 1001, 1003, 1004, 1006, 1007, 1025, 1026, 1030, 1034, 1040, 1041, 1042, 1044, 1046, 1047, 1050, 1052], "matchingdist": 702, "matchmak": 1028, "matcovici": 1044, "mate": 350, "matem\u00e1tica": 1000, "mateo": 1047, "materi": [54, 185, 324, 390, 542, 583, 897, 898], "matern": [2, 178, 417, 1045, 1049], "mateusz": [1038, 1045, 1046, 1051, 1052], "math": [83, 103, 150, 165, 247, 268, 269, 372, 393, 767], "mathbb": [121, 138, 172, 410, 1004, 1011, 1019], "mathbf": [172, 343, 412, 1000, 1004, 1008, 1009, 1018], "mathcal": [214, 346, 412, 414, 630, 699, 996, 998, 1000, 1004, 1047], "mathemat": [38, 135, 185, 198, 227, 271, 367, 372, 375, 389, 392, 407, 409, 412, 413, 417, 550, 551, 558, 565, 638, 649, 659, 795, 796, 801, 865, 909, 912, 915, 917, 1000, 1004, 1008, 1014, 1016, 1026, 1028, 1030, 1048], "matheu": 1040, "mathew": [1049, 1053], "mathi": 1047, "mathia": 1048, "mathieu": [0, 397, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1047], "mathrm": [407, 409, 412, 416, 1000, 1020], "mathschi": 1046, "mathur": [1041, 1043, 1044, 1049, 1050, 1052], "mathurin": [0, 1045, 1047, 1048], "mathurinm": [1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "matjansen": 1048, "mato": 1046, "matplotlib": [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 105, 106, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 163, 164, 165, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 184, 185, 186, 188, 190, 192, 193, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 237, 238, 240, 241, 242, 243, 245, 246, 247, 248, 250, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 267, 268, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 321, 322, 324, 328, 329, 330, 331, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 369, 371, 375, 382, 393, 400, 438, 503, 634, 635, 700, 701, 703, 704, 705, 809, 826, 921, 999, 1023, 1031, 1043, 1046, 1047, 1048, 1049, 1052, 1053], "matric": [2, 38, 71, 75, 76, 112, 114, 121, 215, 254, 255, 257, 258, 259, 288, 301, 318, 324, 332, 350, 351, 367, 369, 377, 378, 387, 388, 389, 407, 408, 409, 410, 412, 415, 416, 422, 450, 451, 453, 464, 473, 481, 482, 483, 484, 527, 535, 536, 539, 541, 542, 545, 548, 550, 551, 556, 557, 564, 567, 583, 584, 591, 646, 649, 650, 655, 656, 661, 667, 675, 677, 690, 757, 763, 771, 777, 781, 782, 783, 784, 795, 800, 801, 833, 851, 854, 859, 870, 874, 876, 879, 882, 884, 885, 887, 890, 892, 894, 896, 897, 898, 899, 900, 909, 910, 912, 913, 929, 951, 958, 967, 974, 976, 977, 994, 996, 998, 1001, 1002, 1003, 1005, 1007, 1008, 1016, 1018, 1019, 1023, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "matrix": [2, 8, 11, 43, 46, 47, 49, 53, 54, 58, 59, 60, 69, 71, 75, 77, 80, 88, 96, 103, 111, 112, 113, 114, 116, 121, 122, 123, 131, 176, 182, 188, 191, 197, 211, 215, 238, 241, 242, 244, 258, 260, 262, 275, 305, 321, 324, 328, 329, 343, 350, 351, 352, 357, 362, 370, 371, 372, 375, 377, 381, 384, 387, 388, 389, 404, 408, 409, 410, 415, 416, 417, 418, 419, 429, 430, 438, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 452, 454, 457, 459, 460, 462, 463, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 482, 483, 484, 485, 487, 488, 489, 493, 497, 498, 501, 502, 503, 504, 505, 506, 509, 510, 511, 520, 522, 524, 525, 527, 528, 530, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 545, 546, 547, 548, 549, 550, 551, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 583, 584, 585, 587, 588, 590, 591, 592, 593, 595, 596, 605, 606, 607, 608, 609, 610, 611, 614, 623, 632, 633, 634, 636, 638, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 710, 715, 716, 717, 718, 719, 721, 725, 732, 733, 734, 737, 741, 742, 743, 744, 757, 758, 761, 762, 763, 764, 766, 767, 769, 770, 771, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 790, 791, 795, 796, 799, 800, 801, 802, 803, 806, 807, 817, 825, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 870, 871, 872, 873, 874, 876, 878, 879, 880, 882, 884, 885, 886, 887, 889, 890, 891, 892, 894, 896, 897, 898, 899, 900, 901, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 924, 929, 931, 932, 933, 934, 939, 948, 949, 950, 951, 952, 955, 957, 958, 966, 967, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 989, 992, 994, 996, 998, 1000, 1001, 1005, 1006, 1007, 1008, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1025, 1029, 1030, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "matrixorz": 1037, "matshow": [59, 60, 100, 163, 305, 503], "matsubara": 1004, "matt": [1037, 1038, 1039, 1044, 1045, 1049, 1050], "matteo": [1038, 1040, 1048], "matter": [130, 259, 343, 358, 407, 408, 414, 568, 671, 679, 681, 1000, 1038], "matthew": [2, 374, 380, 537, 746, 1034, 1037, 1041, 1043, 1047, 1048, 1052, 1053], "matthews_corrcoef": [2, 1004, 1034, 1040, 1041, 1048], "matthia": [1034, 1036, 1037, 1040, 1041, 1042, 1046, 1049], "matthieu": [0, 397, 1034, 1038, 1049], "matti": [1035, 1038, 1039], "matur": [375, 1023, 1024], "mat\u00e9rn": 622, "mat\u00eda": 1048, "maud": 1037, "mauna": 174, "maura": 1045, "mauroantonioserrano": 1049, "mav": 1052, "mavani": 1042, "mavroforaki": [1038, 1040], "max": [44, 48, 50, 51, 52, 53, 56, 58, 63, 65, 68, 70, 76, 80, 86, 92, 96, 101, 105, 106, 109, 111, 114, 121, 124, 128, 131, 135, 137, 143, 149, 153, 160, 161, 165, 171, 173, 174, 181, 182, 185, 195, 198, 200, 203, 204, 206, 212, 213, 216, 224, 226, 228, 233, 241, 245, 266, 267, 268, 279, 287, 288, 290, 294, 295, 299, 301, 303, 305, 308, 310, 311, 313, 320, 325, 331, 333, 347, 362, 407, 409, 412, 469, 470, 471, 472, 473, 474, 475, 476, 477, 513, 537, 556, 557, 558, 559, 560, 561, 564, 565, 566, 608, 630, 634, 635, 651, 652, 672, 675, 677, 683, 694, 695, 699, 702, 707, 708, 760, 795, 796, 803, 864, 865, 876, 877, 879, 886, 893, 894, 915, 916, 917, 918, 1000, 1002, 1007, 1014, 1018, 1019, 1025, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "max_": [407, 1004], "max_abs_": 876, "max_abs_scal": 1014, "max_bin": [320, 321, 414, 562, 563, 1051], "max_categori": [314, 321, 323, 880, 881, 1014, 1048, 1050], "max_cluster_s": 446, "max_column": 228, "max_degre": [882, 1047], "max_depth": [47, 68, 136, 137, 140, 143, 144, 145, 146, 147, 148, 149, 153, 154, 156, 180, 231, 265, 280, 285, 319, 320, 354, 356, 357, 388, 389, 406, 414, 554, 555, 558, 559, 560, 561, 562, 563, 565, 566, 567, 714, 806, 807, 831, 915, 916, 917, 918, 919, 920, 921, 993, 1011, 1020, 1043, 1045], "max_df": [55, 269, 332, 350, 351, 590, 593, 1045, 1052], "max_dist": 241, "max_doc_update_it": 537, "max_ep": [407, 450, 455, 456, 457], "max_error": [2, 403, 1004, 1043, 1053], "max_estim": 139, "max_featur": [55, 68, 139, 149, 246, 265, 280, 319, 414, 416, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 590, 593, 599, 915, 916, 917, 918, 993, 1000, 1034, 1036, 1037, 1041, 1042, 1045, 1048, 1051], "max_features_": [560, 561, 599, 915, 916, 917, 918, 1048], "max_fpr": [791, 1004, 1042], "max_fun": [864, 865, 1044], "max_i": [245, 1006], "max_idf": 1047, "max_it": [44, 48, 53, 55, 56, 63, 65, 67, 68, 105, 106, 121, 124, 140, 141, 144, 150, 157, 180, 181, 185, 186, 192, 197, 204, 217, 218, 219, 222, 223, 225, 230, 231, 232, 233, 235, 248, 249, 253, 254, 255, 256, 259, 281, 298, 303, 304, 305, 314, 319, 320, 321, 328, 329, 336, 350, 351, 381, 389, 414, 419, 440, 443, 447, 448, 449, 454, 459, 461, 471, 472, 478, 482, 483, 484, 532, 533, 534, 536, 537, 538, 539, 540, 541, 544, 546, 547, 548, 549, 562, 563, 630, 641, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 675, 677, 679, 680, 681, 682, 683, 685, 686, 690, 691, 692, 693, 695, 696, 697, 800, 801, 817, 856, 864, 865, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 994, 996, 1000, 1007, 1008, 1017, 1018, 1035, 1038, 1041, 1042, 1043, 1044, 1046, 1048, 1049, 1050, 1051, 1052], "max_iter": 329, "max_iter_list": 150, "max_iter_predict": 613, "max_j": [649, 655], "max_leaf_nod": [135, 141, 149, 210, 320, 357, 414, 558, 559, 560, 561, 562, 563, 565, 566, 567, 915, 916, 917, 918, 1037, 1043, 1045], "max_n": [590, 591, 593, 1034], "max_n_alpha": [654, 658], "max_nbyt": 969, "max_no_improv": [78, 95, 98, 449, 538, 539, 540, 547, 1048, 1049], "max_patch": [84, 415, 585, 586, 1042], "max_resourc": [147, 806, 807, 993], "max_resources_": [806, 807], "max_sampl": [151, 180, 414, 556, 557, 558, 559, 564, 565, 566, 637, 1044, 1047, 1050], "max_samples_": 564, "max_skip": 674, "max_subpopul": [227, 682, 1048], "max_thread": [363, 376], "max_train_s": [44, 53, 411, 824, 1041], "max_trial": [674, 1000], "max_val": 937, "max_valu": [630, 1045, 1046, 1053], "max_x": 245, "maxabs_scal": [2, 389, 876, 1042], "maxabsscal": [2, 364, 403, 871, 892, 994, 1014, 1039, 1042, 1043, 1044, 1045, 1050, 1051], "maxent": [2, 661, 662, 1000], "maxent_du": 661, "maxi": 1049, "maxim": [116, 117, 121, 127, 131, 147, 192, 258, 259, 262, 269, 273, 277, 278, 281, 282, 298, 313, 319, 339, 343, 354, 357, 372, 389, 404, 406, 407, 410, 412, 414, 416, 417, 550, 596, 613, 614, 647, 648, 651, 672, 682, 683, 723, 803, 806, 807, 817, 876, 882, 892, 998, 1000, 1003, 1004, 1007, 1009, 1019, 1037, 1039, 1044, 1047, 1049, 1052], "maxima": 407, "maximesaur": [1049, 1050], "maximis": [254, 296, 998, 1007], "maximum": [2, 44, 48, 51, 65, 70, 73, 91, 110, 111, 112, 113, 114, 123, 135, 137, 140, 141, 143, 150, 170, 172, 175, 176, 182, 191, 198, 247, 262, 278, 290, 294, 295, 301, 308, 334, 335, 337, 338, 341, 343, 351, 354, 356, 362, 370, 380, 381, 388, 389, 404, 405, 407, 409, 410, 412, 414, 415, 417, 418, 419, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 454, 457, 459, 461, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 482, 483, 484, 499, 510, 512, 513, 514, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 553, 554, 555, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 585, 586, 599, 613, 630, 634, 635, 638, 640, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 674, 675, 677, 679, 680, 681, 682, 685, 686, 688, 689, 690, 691, 692, 693, 695, 696, 697, 719, 747, 784, 800, 803, 806, 807, 809, 817, 824, 831, 856, 863, 864, 865, 871, 872, 876, 877, 879, 882, 883, 884, 886, 895, 896, 901, 902, 903, 904, 907, 908, 912, 915, 916, 917, 918, 919, 921, 930, 937, 993, 999, 1000, 1001, 1003, 1004, 1006, 1007, 1008, 1010, 1014, 1018, 1019, 1020, 1025, 1041, 1042, 1044, 1045, 1048, 1049, 1051], "maxin": [1044, 1045], "maxsiz": 620, "maxval": [512, 514], "maxwel": [0, 365, 1044, 1047, 1048, 1049, 1050, 1053], "maxwelllzh": 1049, "may_share_memori": 1051, "mayb": [107, 305, 389, 415, 1019, 1024], "mayer": [414, 1004, 1046, 1048, 1051, 1052], "mayer2022": 414, "mayilvahanan": 407, "mayorov": [1037, 1038, 1039, 1040], "mayur": 1042, "mazari": 1042, "mb": [48, 241, 262, 350, 352, 370, 381, 497, 909, 910, 911, 912, 913, 1019, 1025], "mbilling": 1039, "mbillingr": 1044, "mbk": [78, 98], "mbk_means_cluster_cent": 98, "mbk_means_label": 98, "mbk_means_labels_uniqu": 78, "mblondel": [369, 509], "mbnmf": 55, "mc4229": 1045, "mc_clf": 1011, "mcar": 150, "mcc": [2, 746, 1004, 1048], "mccall": 103, "mccallum": [842, 1006], "mccarthi": [0, 359, 1034, 1042], "mcclish": [277, 791], "mcconaghi": 1028, "mccullagh": 1000, "mcculloh": [1039, 1040], "mcd": [2, 52, 112, 113, 409, 469, 474], "mcdermott": [1036, 1051], "mcdonald": 52, "mcdowel": 1042, "mcfadden": 1004, "mcfee": [1039, 1040], "mcgibbon": [1036, 1037, 1040], "mcgushion": 1043, "mcinn": [407, 1040, 1041, 1042, 1044, 1045, 1050], "mcivor": [1049, 1050], "mcm": [757, 1004], "mcm_": 757, "mcmahon": 1051, "mcsherri": [729, 759, 1004], "mctiernan": [1048, 1049], "mcve": [380, 387], "md": [2, 230, 231, 232, 233, 375, 379, 383, 691, 695, 697, 1029, 1030, 1034, 1046, 1049], "md5": 1046, "md5_checksum": 369, "md_scale": 230, "mdarii": 1050, "mdbecker": 1028, "mdi": [142, 148, 182, 183, 188, 414, 416, 464, 497, 565, 633, 637, 833, 867, 881, 1012, 1025], "mdi_import": [187, 188], "mds_result": 697, "me": 350, "me1": 285, "me2": 285, "me3": 285, "mea": 92, "mean": [2, 44, 45, 48, 51, 53, 54, 55, 56, 58, 62, 63, 65, 71, 72, 73, 74, 76, 78, 80, 81, 83, 84, 87, 88, 89, 94, 104, 111, 112, 113, 114, 117, 119, 121, 124, 125, 126, 128, 135, 137, 138, 141, 143, 144, 147, 148, 150, 155, 156, 157, 164, 165, 169, 174, 175, 176, 178, 180, 182, 185, 186, 193, 195, 200, 202, 203, 204, 207, 210, 212, 216, 217, 219, 225, 226, 227, 228, 233, 235, 237, 240, 241, 242, 243, 244, 245, 247, 248, 249, 251, 253, 254, 255, 256, 258, 259, 262, 264, 265, 268, 269, 270, 271, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 299, 308, 311, 313, 314, 315, 317, 320, 323, 325, 326, 331, 339, 342, 343, 346, 348, 349, 350, 352, 358, 362, 367, 369, 370, 372, 373, 375, 376, 377, 379, 380, 381, 383, 384, 387, 388, 389, 398, 404, 405, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 424, 430, 437, 438, 439, 440, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 457, 458, 459, 460, 461, 462, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 488, 502, 503, 513, 520, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 585, 590, 591, 592, 593, 596, 599, 604, 608, 609, 610, 611, 613, 614, 616, 625, 630, 631, 633, 635, 636, 637, 638, 642, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 687, 691, 692, 693, 694, 695, 696, 697, 698, 707, 708, 710, 712, 715, 716, 719, 720, 727, 729, 732, 733, 734, 739, 740, 741, 744, 745, 748, 749, 750, 751, 752, 753, 754, 755, 756, 760, 777, 781, 782, 784, 786, 787, 788, 790, 791, 793, 794, 795, 796, 798, 800, 801, 802, 803, 806, 807, 809, 817, 821, 825, 826, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 853, 854, 855, 857, 858, 860, 861, 863, 864, 865, 866, 868, 869, 871, 872, 876, 877, 879, 883, 885, 887, 888, 893, 895, 896, 898, 900, 902, 903, 907, 908, 909, 910, 912, 913, 915, 916, 917, 918, 924, 929, 933, 934, 936, 977, 978, 984, 988, 993, 994, 995, 998, 1000, 1001, 1003, 1006, 1007, 1008, 1009, 1011, 1012, 1017, 1018, 1019, 1020, 1025, 1028, 1029, 1030, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "mean_": [122, 272, 533, 534, 535, 540, 542, 544, 887, 1014, 1042], "mean_absolute_error": [2, 53, 210, 212, 228, 403, 1004, 1035, 1037, 1053], "mean_absolute_percentage_error": [2, 53, 144, 403, 1004, 1046, 1048, 1053], "mean_auc": 278, "mean_change_tol": 537, "mean_fit_tim": [141, 290, 803, 817], "mean_fpr": 278, "mean_gamma_devi": [2, 403, 1004, 1044, 1053], "mean_impute_scor": 181, "mean_l1_ratio": 1037, "mean_pinball_loss": [2, 53, 147, 150, 320, 1000, 1004, 1047], "mean_pinball_loss_95p": 1004, "mean_poisson_devi": [2, 210, 403, 1004, 1044, 1053], "mean_precis": 266, "mean_precision_": 800, "mean_precision_prior": [253, 259, 800], "mean_precision_prior_": 800, "mean_predict": [53, 176], "mean_predictions_gpr": 169, "mean_prior": 800, "mean_prior_": 800, "mean_recal": 266, "mean_scor": [105, 277, 280, 351, 1047], "mean_score_tim": [141, 266, 269, 803, 817], "mean_shift": [2, 1039, 1042], "mean_square_error": 1035, "mean_squared_error": [2, 47, 145, 147, 148, 207, 210, 212, 214, 216, 228, 358, 403, 414, 755, 1004, 1035, 1037, 1044, 1045, 1051, 1053], "mean_squared_log_error": [2, 403, 714, 1004, 1041, 1047, 1051, 1053], "mean_test_": 272, "mean_test_precis": [266, 272], "mean_test_recal": 266, "mean_test_scor": [104, 105, 106, 114, 141, 164, 258, 267, 268, 269, 276, 279, 280, 290, 339, 472, 596, 803, 817, 993, 1040, 1047], "mean_tim": 1040, "mean_tpr": [277, 278], "mean_train_precis": [803, 817], "mean_train_scor": [803, 817, 1040], "mean_tweedie_devi": [2, 228, 403, 1004, 1044, 1053], "mean_variance_axi": [2, 384, 1040, 1047], "mean_y_pr": 174, "meaning": [73, 188, 203, 235, 297, 325, 352, 404, 406, 411, 415, 416, 549, 732, 733, 741, 786, 787, 790, 856, 1008, 1018, 1019, 1034, 1050], "meaningfulli": [210, 1004], "meaningless": [186, 415, 909, 912, 1037], "means_": [71, 253, 254, 255, 256, 258, 259, 550, 551, 800, 801], "means_init": [255, 256, 801], "meanshift": [2, 80, 321, 407, 440, 1037, 1038, 1039, 1042, 1044, 1045, 1048, 1049, 1050, 1052], "meant": [91, 150, 165, 247, 325, 370, 384, 474, 494, 680, 853, 926, 969, 970, 992, 994, 1008, 1010, 1014, 1035], "meanwhil": [387, 1019], "measur": [2, 28, 44, 47, 48, 50, 51, 53, 58, 63, 73, 74, 83, 92, 94, 95, 122, 138, 139, 147, 151, 158, 165, 169, 174, 182, 184, 185, 186, 190, 200, 205, 209, 210, 214, 216, 228, 260, 266, 268, 274, 275, 313, 343, 350, 351, 362, 370, 372, 377, 381, 389, 404, 409, 411, 412, 413, 414, 415, 449, 452, 462, 499, 516, 539, 541, 548, 552, 558, 559, 560, 561, 564, 565, 566, 606, 609, 610, 614, 630, 634, 661, 693, 695, 701, 705, 707, 708, 710, 712, 715, 716, 719, 720, 723, 728, 729, 730, 732, 734, 739, 740, 742, 743, 746, 750, 758, 759, 760, 785, 786, 787, 789, 790, 791, 792, 795, 798, 828, 830, 833, 853, 884, 896, 915, 916, 917, 918, 924, 994, 1000, 1002, 1007, 1009, 1010, 1012, 1018, 1020, 1025, 1034, 1037, 1039, 1040, 1042, 1044], "mechan": [75, 244, 326, 347, 350, 363, 375, 377, 401, 405, 407, 415, 421, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 583, 584, 585, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 612, 613, 614, 630, 631, 632, 633, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 691, 692, 693, 694, 695, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 1002, 1020, 1028, 1053], "mecopur": 1051, "med": [58, 103, 277, 370, 1014], "meda": [108, 185, 1004], "media": [407, 1028], "median": [2, 44, 53, 73, 104, 108, 112, 113, 147, 180, 181, 185, 212, 216, 227, 239, 247, 308, 318, 320, 321, 370, 409, 414, 416, 440, 454, 458, 461, 474, 553, 555, 559, 566, 599, 630, 633, 638, 673, 674, 682, 724, 756, 854, 885, 897, 916, 918, 994, 1014, 1020, 1037, 1038], "median_absolute_error": [2, 108, 185, 1004, 1038, 1044, 1046], "median_predict": 53, "medic": [271, 411, 715, 1000, 1028], "medicin": [271, 715, 1004], "medina": [1034, 1036], "medinc": [308, 319, 370, 490], "medium": [43, 182, 243, 315, 326, 339, 407, 646, 881, 997, 1000], "medoid": 446, "medoids_": 446, "medri": 1037, "meekail": [0, 396, 1048, 1049, 1050, 1051, 1053], "meer": [97, 407, 448], "meet": [375, 387, 390, 416, 573, 605, 864, 865, 904, 1004, 1017, 1028, 1042, 1043, 1044], "megabyt": 1048, "megasari": 1046, "meghann": [1042, 1044], "mehak": 1041, "mehdi": [1038, 1047], "mehgarg": 1049, "mehmet": [1041, 1047], "mehmetcanakbai": 1049, "mehrdad": 1048, "mehta": [1038, 1039, 1040, 1042, 1043, 1044, 1045, 1049, 1050], "mehul": 1041, "mei": [1039, 1044], "meier": 1041, "meila": 407, "mein": 415, "meinshausen": 196, "meirel": 1045, "meketon": 1041, "melani": [1028, 1041, 1042], "melderi": 1042, "melemo2": 1048, "meli": [1047, 1048, 1049], "melissa": 1042, "mellon": 902, "melnik": 1049, "melsyt": [1042, 1043], "mem": [88, 381, 509, 510, 1025], "member": [0, 350, 351, 370, 375, 378, 390, 407, 422, 442, 446, 448, 451, 453, 493, 556, 557, 558, 559, 564, 565, 566, 567, 583, 661, 662, 669, 670, 671, 679, 680, 681, 707, 708, 718, 720, 734, 739, 740, 760, 789, 798, 803, 907, 1000, 1007, 1034, 1046, 1049], "membership": [31, 90, 390, 404, 407, 512, 513, 514, 515, 516, 520, 523, 1019], "memit": 381, "memmap": [363, 370, 389, 412, 509, 535, 1042, 1051], "memoiz": [105, 370, 389], "memor": 187, "memori": [2, 48, 88, 104, 105, 125, 185, 186, 262, 290, 314, 317, 319, 321, 322, 325, 350, 351, 352, 363, 364, 369, 375, 378, 384, 387, 389, 401, 407, 408, 411, 412, 415, 418, 419, 441, 442, 443, 444, 445, 446, 447, 449, 450, 454, 457, 459, 468, 473, 479, 497, 504, 509, 510, 534, 535, 536, 539, 542, 556, 557, 558, 559, 564, 565, 566, 567, 583, 584, 590, 591, 593, 649, 650, 651, 655, 656, 661, 662, 663, 664, 665, 666, 669, 670, 671, 672, 679, 680, 681, 682, 683, 684, 687, 781, 782, 783, 784, 803, 809, 817, 826, 828, 829, 830, 831, 834, 835, 836, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 855, 857, 858, 859, 867, 868, 885, 887, 897, 898, 900, 905, 907, 908, 915, 916, 917, 918, 934, 972, 988, 1000, 1006, 1007, 1014, 1016, 1017, 1019, 1020, 1028, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "memory_profil": [381, 393, 400], "memoryerror": [1042, 1046], "memoryview": 376, "memorywis": 401, "men": 372, "menes": 1049, "meng": [1034, 1035, 1038, 1040, 1041], "menoci": 1052, "menon": 405, "mensch": [1039, 1040, 1041, 1042], "mention": [89, 117, 135, 228, 282, 318, 358, 362, 375, 377, 379, 380, 387, 407, 699, 899, 900, 993, 998, 1000, 1024, 1027, 1028, 1041, 1042, 1043], "menu": 393, "menuet": 1043, "mercer": 996, "mere": [44, 268, 389, 834, 1018], "merg": [75, 77, 81, 85, 320, 373, 375, 378, 383, 387, 390, 407, 440, 441, 442, 445, 446, 463, 823, 1034, 1041], "merit": [375, 379, 390], "meritocrat": 390, "merritt": 1040, "mersenn": 1045, "merz": 405, "mesfer": 1047, "mesh": [92, 143, 153, 171, 242, 296, 303, 310, 333, 335], "meshgrid": [51, 64, 78, 92, 112, 143, 153, 170, 171, 172, 173, 175, 186, 221, 222, 223, 224, 235, 237, 257, 294, 301, 303, 310, 311, 333, 338, 339, 343, 344, 347, 348, 634], "meshulam": 1037, "meson": [373, 378, 393, 400, 1053], "mess": 1048, "messag": [74, 80, 96, 103, 121, 244, 326, 350, 351, 370, 373, 374, 378, 379, 380, 383, 384, 407, 440, 454, 468, 540, 544, 549, 575, 630, 715, 803, 806, 807, 809, 817, 826, 831, 834, 836, 856, 864, 865, 905, 932, 933, 934, 937, 940, 966, 987, 992, 1004, 1014, 1034, 1038, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "met": [244, 377, 416, 535, 542, 630, 674, 1000, 1004, 1042], "meta": [2, 7, 31, 32, 90, 103, 134, 158, 167, 182, 210, 273, 277, 282, 284, 287, 323, 324, 326, 354, 356, 358, 369, 373, 377, 379, 387, 389, 398, 405, 416, 417, 427, 437, 443, 444, 447, 449, 465, 482, 483, 484, 497, 534, 537, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 577, 592, 599, 605, 612, 613, 614, 638, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 693, 802, 803, 804, 805, 810, 812, 819, 821, 825, 830, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 852, 854, 857, 858, 864, 865, 867, 870, 872, 873, 874, 879, 886, 887, 902, 903, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 924, 956, 963, 992, 993, 1005, 1024, 1025, 1026, 1030, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1045, 1046, 1048, 1049, 1051], "meta_clf_sample_weight": 244, "meta_est": 244, "meta_meta_est": 244, "metaclassifi": [244, 245], "metaclassifierifittedmetaclassifi": 244, "metadata": [2, 133, 182, 194, 236, 262, 325, 351, 369, 370, 377, 401, 421, 424, 427, 430, 431, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 488, 489, 497, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 583, 584, 585, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 612, 613, 614, 630, 631, 632, 633, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 691, 692, 693, 694, 695, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 959, 960, 961, 962, 963, 987, 1004, 1023, 1024, 1025, 1030, 1050], "metadata_rout": [2, 244, 437, 443, 444, 447, 449, 465, 482, 483, 484, 534, 537, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 592, 613, 614, 638, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 693, 802, 804, 805, 810, 812, 821, 825, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 852, 854, 857, 858, 864, 865, 867, 870, 872, 873, 874, 879, 886, 887, 902, 903, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 959, 960, 961, 962, 963], "metadatarequest": [2, 244, 421, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 469, 470, 471, 473, 474, 475, 476, 482, 483, 484, 485, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 558, 559, 560, 561, 562, 563, 565, 566, 567, 583, 584, 585, 590, 591, 592, 593, 594, 597, 598, 600, 601, 602, 605, 612, 613, 614, 631, 632, 633, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 655, 657, 659, 660, 661, 663, 665, 667, 669, 670, 671, 672, 673, 675, 677, 679, 680, 681, 682, 683, 691, 692, 693, 694, 695, 800, 801, 804, 805, 808, 810, 811, 812, 813, 816, 818, 819, 820, 821, 822, 823, 824, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 902, 903, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 960, 962, 1051], "metadatarout": [2, 244, 437, 464, 465, 472, 556, 557, 564, 568, 569, 570, 571, 595, 596, 599, 604, 630, 650, 654, 656, 658, 662, 664, 666, 668, 674, 676, 678, 802, 803, 806, 807, 817, 825, 835, 836, 837, 838, 839, 840, 841, 866, 867, 904, 962, 1051], "metaestim": [2, 90, 389, 904, 924, 964, 1038, 1047, 1048, 1051], "metaestimatormixin": [2, 244], "metaireau": [1034, 1037], "metal": 403, "metaregressor": 244, "metatransfom": 1039, "meteorologi": 405, "meth_nam": 312, "method": [2, 5, 8, 14, 18, 31, 33, 37, 44, 48, 52, 53, 56, 58, 59, 62, 63, 64, 65, 72, 73, 75, 76, 77, 80, 82, 83, 84, 86, 87, 88, 90, 91, 92, 93, 95, 99, 102, 105, 111, 112, 115, 117, 121, 124, 126, 129, 130, 131, 133, 135, 140, 142, 148, 155, 160, 161, 165, 180, 190, 199, 200, 203, 211, 218, 227, 229, 231, 233, 234, 235, 237, 243, 244, 245, 247, 251, 252, 255, 262, 270, 273, 275, 276, 277, 282, 285, 288, 294, 295, 297, 308, 312, 315, 317, 319, 320, 326, 342, 350, 351, 352, 357, 358, 362, 363, 364, 367, 372, 373, 375, 376, 377, 381, 382, 384, 387, 388, 392, 398, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 421, 422, 424, 425, 426, 429, 430, 431, 432, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 456, 457, 459, 462, 464, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 505, 513, 515, 523, 526, 529, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 583, 584, 585, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 708, 713, 714, 725, 734, 735, 738, 739, 744, 745, 766, 771, 772, 777, 781, 786, 791, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 895, 896, 899, 900, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 922, 924, 927, 936, 940, 951, 959, 960, 961, 962, 963, 964, 969, 972, 987, 988, 991, 992, 993, 994, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1012, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1023, 1025, 1028, 1029, 1030, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "method_map": [244, 960], "method_max_it": [546, 547, 1044], "method_nam": [244, 960, 963], "methodmap": [2, 244, 960], "methodmetadatarequest": 959, "methodol": 1014, "methodolog": [411, 1027], "methodologi": [542, 880, 994, 1004, 1028], "methodpair": 961, "metric": [2, 13, 44, 46, 47, 51, 53, 58, 59, 60, 62, 63, 64, 67, 69, 72, 74, 78, 80, 82, 83, 86, 92, 94, 98, 103, 108, 114, 135, 140, 145, 146, 148, 149, 150, 155, 162, 165, 167, 170, 180, 182, 184, 185, 187, 196, 200, 206, 207, 210, 212, 214, 216, 228, 233, 238, 241, 242, 247, 250, 260, 261, 264, 265, 266, 268, 269, 271, 275, 277, 278, 282, 287, 288, 290, 298, 301, 306, 308, 313, 317, 318, 320, 321, 322, 323, 324, 325, 326, 328, 329, 331, 332, 350, 351, 358, 362, 367, 370, 375, 377, 387, 388, 389, 392, 398, 402, 405, 406, 412, 413, 414, 417, 418, 424, 437, 441, 444, 445, 446, 450, 454, 455, 456, 457, 462, 469, 521, 536, 550, 551, 552, 554, 556, 558, 559, 560, 562, 565, 566, 568, 570, 580, 613, 623, 631, 634, 637, 641, 642, 643, 644, 645, 646, 661, 662, 666, 669, 671, 677, 678, 679, 691, 693, 695, 697, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 802, 803, 806, 807, 817, 825, 828, 829, 830, 835, 836, 837, 838, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 864, 873, 879, 902, 903, 907, 909, 912, 915, 917, 924, 994, 996, 999, 1001, 1005, 1007, 1010, 1012, 1023, 1025, 1030, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041], "metric_kwarg": [782, 783], "metric_obj": 702, "metric_param": [418, 444, 446, 450, 455, 456, 457, 691, 695, 849, 850, 851, 852, 853, 855, 857, 858, 859, 860, 861, 1038, 1041, 1048], "metsi": [842, 1006], "metzen": [0, 397, 1034, 1037, 1038, 1039, 1040], "mexican": 130, "meyer89": 1045, "mferrari3": [1042, 1043], "mgrid": 54, "mhadolkar": 1053, "mhg": 1039, "mi": [65, 73, 160, 407, 609, 610, 707, 758, 760, 994, 1004, 1018], "mia": 1049, "miao": 1047, "mib": [362, 468, 905], "mic": [888, 1014], "micah": 1044, "micci": [888, 1014], "mice": [369, 630, 994], "miceprotein": 369, "michael": [372, 405, 407, 450, 631, 640, 694, 800, 994, 1000, 1028, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1045, 1046, 1048, 1049, 1051, 1052, 1053], "michal": [1038, 1041, 1047, 1048], "michali": 407, "michalkrawczyk": [1047, 1048], "micha\u0142": 1045, "micha\u0142owski": 1043, "michel": [0, 397, 1034, 1036, 1037, 1039, 1041, 1048, 1049], "michelbach": 1038, "michiaki": 1040, "micka\u00ebl": [1042, 1043], "micky774": [1048, 1049], "micro": [50, 301, 332, 362, 379, 710, 716, 732, 733, 741, 786, 787, 790, 791, 1004, 1034, 1042, 1043, 1049, 1052], "micro_roc_auc_ovr": 277, "microarrai": [404, 451, 514, 631, 994], "microcontrol": 1023, "microphon": 122, "microryzomi": [51, 301, 370, 499], "microryzomys_minutu": 499, "microryzomys_minutus_0": 51, "microsoft": [0, 52, 373, 376, 393], "mid": [64, 339, 1004, 1006], "middl": [44, 62, 71, 94, 126, 196, 347, 372, 1011, 1014], "mideast": [58, 370], "midina": 1041, "midnight": 44, "midpoint": 339, "midpointnorm": 339, "midvidi": 1047, "midwest": [165, 372], "might": [0, 44, 45, 53, 68, 78, 80, 94, 96, 103, 143, 150, 153, 162, 167, 175, 181, 185, 186, 187, 190, 207, 210, 228, 237, 262, 268, 270, 282, 291, 304, 319, 325, 326, 343, 348, 358, 362, 363, 369, 373, 375, 376, 377, 379, 380, 381, 387, 389, 390, 393, 401, 405, 406, 408, 411, 412, 413, 414, 415, 417, 432, 443, 488, 497, 502, 504, 509, 516, 524, 537, 556, 557, 558, 562, 563, 565, 581, 582, 584, 613, 614, 630, 653, 657, 658, 659, 661, 662, 679, 681, 695, 760, 797, 805, 806, 807, 820, 823, 831, 856, 872, 887, 900, 919, 921, 923, 925, 929, 933, 934, 951, 972, 993, 994, 996, 998, 1000, 1001, 1003, 1004, 1006, 1007, 1011, 1012, 1014, 1019, 1020, 1035, 1037, 1042, 1043, 1045, 1048, 1049, 1050, 1051], "mignon": [1034, 1037, 1038, 1041], "migrat": [375, 379, 1034], "miguel": [1044, 1052, 1053], "miguelbarao": 1044, "miguelcsilva": 1052, "mihael": [407, 450, 457], "mihevc": 1044, "mike": 1041, "mikebenfield": 1041, "miketip": [535, 542], "mikhail": [1035, 1036, 1037, 1040, 1041, 1049, 1050], "miki": [1051, 1052], "mikulski": 1045, "milajev": 1038, "milan": 1046, "milana2": 1048, "mileag": 362, "milen": 1041, "mileston": 379, "militari": 103, "mill": 1044, "millawel": 1048, "miller": [370, 1042, 1043, 1047], "million": [78, 90, 174, 190, 415, 695, 1001, 1019, 1028, 1048, 1049], "millisecond": 326, "millman": [0, 397, 1043, 1050, 1051], "milman": 1042, "miln": 370, "miltenberg": 1049, "milton": 1051, "milutinov": 1043, "mimic": [180, 210, 350, 821], "mimicri": 350, "min": [44, 50, 51, 52, 53, 54, 63, 65, 68, 86, 92, 108, 121, 124, 135, 137, 143, 146, 147, 153, 165, 171, 173, 174, 175, 181, 185, 195, 198, 200, 203, 206, 212, 213, 216, 231, 241, 242, 245, 287, 294, 295, 301, 303, 305, 308, 310, 311, 313, 325, 333, 347, 384, 407, 410, 412, 482, 483, 485, 513, 535, 536, 539, 541, 542, 550, 551, 564, 630, 634, 635, 657, 658, 659, 660, 685, 686, 707, 760, 783, 806, 807, 856, 864, 865, 877, 886, 893, 951, 968, 995, 1000, 1004, 1007, 1014, 1040, 1043, 1045, 1046, 1049], "min_": [320, 407, 414, 877, 1000, 1014, 1018, 1019, 1020], "min_arg": 53, "min_batch_s": 954, "min_bin_freq": [448, 461], "min_c": 1006, "min_categori": [843, 1046], "min_cluster_s": [80, 99, 323, 407, 446, 450, 456, 1043], "min_degre": [882, 1047], "min_df": [55, 58, 103, 269, 332, 350, 351, 415, 590, 593, 1034, 1036, 1045, 1052], "min_dist": 241, "min_estim": 139, "min_faces_per_person": [46, 370, 495], "min_features_to_select": [164, 596, 1042], "min_frequ": [321, 323, 880, 881, 1014, 1048, 1050], "min_grad_norm": [695, 1040], "min_i": 245, "min_idf": 1047, "min_impurity_decreas": [558, 559, 560, 561, 565, 566, 567, 915, 916, 917, 918, 1020, 1041], "min_impurity_split": 1041, "min_max_axi": 1043, "min_max_scal": 1014, "min_n": [590, 591, 593, 1034], "min_n_compon": 241, "min_po": [2, 384], "min_resourc": [147, 806, 807, 993], "min_resources_": [806, 807], "min_sampl": [80, 83, 99, 387, 389, 407, 418, 444, 446, 450, 455, 456, 457, 674, 1000, 1043, 1047], "min_sample_split": 1049, "min_samples_leaf": [141, 146, 147, 187, 317, 320, 354, 414, 558, 559, 560, 561, 562, 563, 565, 566, 567, 915, 916, 917, 918, 1020, 1040], "min_samples_split": [147, 148, 149, 272, 280, 309, 319, 414, 558, 559, 560, 561, 565, 566, 567, 806, 807, 915, 916, 917, 918, 993, 1020, 1040], "min_val": [930, 937], "min_valu": [630, 1045, 1046, 1053], "min_w": 1000, "min_weight_fraction_leaf": [558, 559, 560, 561, 565, 566, 567, 915, 916, 917, 918, 1020, 1037, 1040, 1041], "min_x": 245, "mina": [1044, 1045], "mincovdet": [2, 112, 113, 409, 469, 470, 473, 475, 476, 1010, 1034, 1041, 1053], "mind": [126, 150, 184, 185, 186, 228, 312, 313, 350, 351, 358, 375, 401, 409, 411, 414, 649, 650, 707, 1000, 1019, 1023], "minden": [407, 452, 462], "mine": [0, 268, 351, 370, 407, 418, 444, 512, 564, 723, 737, 743, 786, 854, 1000, 1004, 1010, 1016], "ming": [564, 1010, 1038, 1042, 1043, 1044, 1048], "minghui": [1041, 1042], "mingw": 1037, "minh": 1042, "mini": [2, 48, 98, 121, 321, 364, 389, 415, 440, 442, 447, 449, 451, 453, 532, 534, 537, 538, 539, 540, 541, 543, 544, 546, 547, 1008, 1009, 1034, 1045, 1047], "mini_batch": [451, 453], "minibatch": [48, 80, 407, 412, 449, 535, 679, 863, 864, 865, 1034], "minibatch_iter": 48, "minibatch_kmean": 351, "minibatch_s": [48, 364], "minibatchdictionarylearn": [2, 121, 124, 364, 412, 532, 539, 543, 546, 547, 1035, 1037, 1044, 1045, 1047, 1048, 1049, 1050, 1051], "minibatchkmean": [2, 58, 72, 74, 79, 80, 84, 92, 93, 94, 95, 97, 182, 351, 364, 407, 412, 440, 442, 447, 513, 782, 1025, 1035, 1040, 1041, 1042, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "minibatchnmf": [2, 55, 364, 412, 1048, 1050, 1051, 1052], "minibatchsparsepca": [2, 532, 534, 538, 541, 543, 544, 546, 547, 1034, 1035, 1045, 1047, 1048, 1049, 1050, 1051], "miniforg": [373, 383, 393, 394], "miniforge3": [322, 373, 383], "minim": [2, 44, 52, 53, 65, 91, 100, 110, 111, 147, 169, 177, 192, 203, 207, 208, 210, 212, 214, 218, 228, 230, 240, 241, 253, 258, 262, 269, 277, 278, 308, 317, 320, 336, 343, 346, 354, 374, 375, 378, 383, 387, 389, 401, 405, 407, 409, 412, 414, 440, 441, 445, 446, 450, 463, 539, 541, 548, 558, 559, 560, 561, 565, 566, 611, 613, 614, 644, 649, 652, 660, 661, 662, 670, 674, 675, 677, 681, 682, 690, 695, 697, 698, 751, 783, 854, 856, 865, 883, 895, 901, 915, 916, 917, 918, 1000, 1001, 1004, 1007, 1008, 1014, 1016, 1017, 1018, 1019, 1023, 1026, 1030, 1038, 1043, 1044], "minima": [175, 198, 412, 447, 695, 1001, 1042], "minimal_reproduc": 383, "minimalist": [380, 415, 1027], "minimis": [53, 267, 407, 411, 661, 662, 1020], "minimum": [2, 49, 89, 91, 112, 147, 148, 150, 164, 200, 220, 241, 247, 278, 294, 295, 384, 393, 400, 404, 407, 414, 415, 441, 445, 446, 450, 454, 456, 469, 470, 473, 474, 475, 476, 512, 514, 542, 553, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 596, 630, 634, 635, 638, 640, 671, 674, 679, 681, 682, 685, 686, 695, 708, 728, 782, 783, 806, 807, 828, 843, 864, 865, 876, 877, 880, 881, 882, 886, 900, 901, 914, 915, 916, 917, 918, 930, 933, 934, 937, 954, 1001, 1004, 1008, 1010, 1014, 1016, 1020, 1034, 1037, 1041, 1042, 1046, 1047, 1051], "minimum_cluster_s": 407, "minka": [128, 542, 1000], "minknowski": 1047, "minkowski": [418, 444, 450, 455, 456, 457, 691, 702, 781, 782, 783, 847, 848, 849, 850, 851, 853, 855, 857, 858, 859, 860, 861, 1007, 1034, 1037, 1048, 1049, 1050], "minkowski_dist": [450, 457, 691, 849, 850, 851, 853, 855, 857, 858, 859, 860, 861], "minkowskidist": [702, 1047], "minmax_scal": [2, 306, 308, 877, 1039, 1042], "minmaxscal": [2, 44, 45, 105, 161, 163, 190, 231, 247, 304, 319, 364, 403, 408, 464, 893, 994, 1014, 1036, 1039, 1042, 1044, 1045, 1046, 1050, 1051, 1053], "minmaxscalerminmaxscal": 105, "minnesota": 407, "minor": [247, 262, 271, 275, 370, 379, 390, 497, 1004, 1034, 1036, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "minu": [268, 763, 1004], "minut": [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 184, 185, 186, 187, 188, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 370, 375, 1001, 1004, 1022], "minutu": [51, 301, 370, 499], "minval": [512, 514], "minwoo": 1034, "minyushkin": 1040, "miola": 1049, "miott": [1034, 1037], "miotto": 1045, "mir": 415, "miroslav": [1035, 1036, 1039], "mirror": [844, 993], "mirza": 1047, "misa": 1049, "misc": [58, 87, 124, 269, 322, 332, 350, 351, 352, 370], "misc_featur": 247, "miscalibr": 65, "miscellan": [368, 369, 1025, 1040, 1041, 1048, 1049, 1051, 1052, 1053], "miscfeatur": 155, "misclassif": [47, 135, 262, 343, 799, 1018, 1019, 1020, 1035], "misclassifi": [71, 135, 261, 262, 343, 350, 1019], "misclassification_error": 135, "misdetect": 1051, "mish": 415, "mishra": [1046, 1047], "mislabel": [261, 414, 1006], "mislead": [73, 142, 148, 185, 376, 392, 414, 554, 555, 558, 559, 560, 561, 565, 566, 567, 915, 916, 917, 918, 1030, 1047], "mismatch": [80, 1003, 1043], "misread": 235, "miss": [2, 21, 104, 155, 165, 187, 239, 249, 262, 268, 288, 318, 322, 325, 358, 362, 367, 370, 372, 374, 375, 380, 389, 403, 406, 407, 408, 409, 446, 472, 490, 497, 499, 502, 558, 559, 562, 563, 565, 566, 567, 630, 631, 632, 633, 642, 648, 675, 693, 697, 730, 772, 829, 850, 868, 876, 877, 881, 883, 884, 887, 888, 892, 895, 896, 898, 915, 916, 917, 918, 924, 1000, 1001, 1004, 1023, 1024, 1025, 1026, 1028, 1030, 1036, 1038, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "missclassif": 135, "missforest": [180, 994], "missing": [150, 414, 630, 631, 633, 1043], "missing_featur": [180, 181], "missing_fract": 150, "missing_fraction_list": 150, "missing_r": 181, "missing_sampl": [180, 181], "missing_valu": [180, 181, 249, 389, 630, 631, 632, 633, 772, 994, 1042, 1043], "missingind": [2, 630, 631, 633, 994, 1042, 1043, 1044, 1048, 1050], "mission": [0, 351, 1028], "misspecifi": 65, "misspel": 415, "mistak": [135, 162, 282, 329, 358, 407, 411, 738, 878, 892, 893, 895, 896, 897, 898, 1000, 1005], "misti": [44, 186], "mit": [285, 370, 381, 407, 417, 613, 614, 617, 622, 625, 646, 669, 670, 679, 844, 997], "mitar": 1043, "mitig": [65, 89, 150, 187, 315, 363, 364, 1001, 1004, 1020, 1046], "mitra": [1044, 1045, 1049], "mitrov": 1043, "mitzi": [1047, 1048], "miwojc": 1048, "mix": [2, 44, 96, 102, 103, 122, 123, 144, 182, 185, 210, 239, 249, 251, 269, 308, 314, 369, 377, 387, 389, 408, 412, 419, 464, 466, 467, 497, 534, 539, 541, 548, 602, 606, 633, 649, 650, 655, 661, 662, 663, 664, 665, 666, 671, 679, 681, 684, 803, 817, 833, 867, 880, 881, 887, 888, 967, 974, 977, 1000, 1009, 1025, 1046, 1048, 1049], "mixed_encoded_preprocessor": 314, "mixed_pip": 314, "mixed_target": 314, "mixin": [2, 375, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 603, 944, 1036, 1045, 1049], "mixing_": [122, 123, 534], "mixtur": [2, 47, 49, 71, 80, 89, 91, 99, 119, 172, 181, 198, 255, 256, 279, 298, 324, 370, 371, 389, 407, 412, 413, 417, 626, 800, 801, 803, 1024, 1025, 1029, 1030, 1034, 1038, 1039, 1040, 1041], "mizil": [63, 65, 405, 437, 439], "mizuki": 1048, "mk": 1020, "mkdir": [48, 381, 383], "mkdtemp": [88, 408], "mkl": [362, 363, 373, 383, 387, 1034], "mkl_num_thread": 363, "mksol": 103, "ml": [48, 165, 285, 369, 372, 380, 501, 503, 511, 1000, 1002, 1023, 1024, 1028], "ml_map": 395, "mlant": 1048, "mlb": [370, 878], "mlc": 372, "mlcomp": 1034, "mld": 48, "mldata": [1034, 1042], "mle": [112, 128, 542, 1042, 1045], "mlewis1729": 1041, "mlflow": 1023, "mlg": 1038, "mlinari\u0107": 1049, "mline": [49, 112, 224, 294, 338, 341], "mljar": 1023, "mlle": [692, 696, 1001], "mlliou112": 1041, "mlo": 174, "mlondschien": 1047, "mlop": 1023, "mlp": [182, 186, 248, 302, 304, 497, 833, 864, 865, 1008, 1025], "mlp_disp": 248, "mlp_model": 186, "mlp_preprocessor": 186, "mlpclassifi": [2, 68, 149, 182, 302, 303, 305, 364, 503, 505, 515, 523, 863, 865, 877, 1005, 1008, 1025, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "mlpregressor": [2, 44, 186, 248, 364, 863, 864, 1008, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1053], "mlpregressormlpregressor": 248, "mlxtend": 1023, "mm": 190, "mm_bunch": 51, "mmap_mod": [401, 969], "mmm": 52, "mmse": [111, 409, 420, 475], "mn193": 1051, "mnb": 1006, "mnist": [182, 191, 202, 204, 218, 225, 288, 302, 304, 497, 661, 833, 864, 887, 936, 1000, 1008, 1025], "mnist_10000": 288, "mnist_20000": 288, "mnist_784": [218, 226, 288, 305], "mo": [322, 1045], "mobil": 383, "mock": 1044, "mockdatafram": 1044, "modal": [2, 237, 474, 953], "mode": [2, 49, 50, 81, 82, 112, 210, 237, 288, 290, 306, 317, 373, 375, 379, 383, 384, 387, 404, 410, 414, 418, 443, 444, 447, 449, 452, 459, 462, 471, 472, 478, 482, 487, 509, 510, 558, 562, 565, 594, 597, 598, 600, 601, 602, 613, 630, 647, 648, 661, 662, 669, 671, 676, 677, 678, 679, 682, 685, 686, 692, 696, 849, 850, 851, 853, 855, 857, 858, 859, 860, 861, 863, 907, 909, 912, 915, 917, 939, 950, 951, 953, 1004, 1007, 1010, 1023, 1035, 1043, 1048, 1051], "model": [2, 7, 8, 22, 29, 35, 38, 41, 43, 45, 46, 49, 50, 52, 54, 55, 59, 60, 62, 63, 65, 71, 75, 76, 77, 83, 88, 89, 90, 92, 95, 102, 104, 105, 106, 110, 114, 117, 120, 121, 131, 134, 135, 136, 138, 140, 143, 146, 147, 149, 150, 152, 154, 155, 158, 159, 161, 162, 172, 173, 175, 176, 177, 178, 181, 183, 184, 188, 193, 195, 197, 199, 201, 202, 203, 204, 206, 211, 212, 214, 215, 216, 218, 222, 223, 225, 226, 227, 237, 240, 245, 253, 255, 256, 257, 261, 263, 264, 266, 269, 271, 272, 273, 274, 276, 277, 282, 283, 285, 288, 290, 291, 292, 294, 297, 301, 309, 312, 314, 315, 317, 319, 321, 322, 323, 325, 326, 328, 329, 336, 338, 339, 340, 341, 342, 344, 346, 348, 351, 352, 355, 358, 367, 369, 370, 377, 381, 389, 392, 398, 403, 404, 405, 406, 407, 408, 410, 412, 413, 414, 415, 416, 417, 426, 430, 432, 437, 442, 449, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 488, 489, 490, 497, 499, 501, 502, 503, 504, 510, 523, 525, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 549, 550, 551, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 590, 591, 595, 596, 599, 604, 608, 611, 612, 613, 614, 618, 630, 635, 636, 637, 638, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 694, 704, 709, 714, 724, 725, 726, 727, 737, 738, 744, 753, 756, 788, 791, 792, 795, 800, 801, 803, 806, 807, 808, 809, 817, 818, 819, 820, 824, 825, 826, 829, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 850, 852, 853, 854, 856, 858, 863, 864, 865, 867, 868, 870, 872, 874, 879, 880, 882, 883, 884, 886, 887, 888, 892, 893, 895, 896, 897, 898, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 922, 987, 994, 996, 997, 998, 1001, 1002, 1005, 1007, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1034, 1035, 1036, 1037, 1038, 1039], "model_1": 268, "model_1_scor": 268, "model_2": 268, "model_2_scor": 268, "model__estimator__max_depth": 993, "model_coef": 184, "model_color": 345, "model_detail": 143, "model_displai": 140, "model_fixed_threshold": 262, "model_from_prevision_vers": 401, "model_i": 268, "model_i_scor": 268, "model_idx": 247, "model_k": 268, "model_k_scor": 268, "model_l1": 346, "model_l2": 346, "model_nam": [141, 247, 287], "model_no_cf": 315, "model_param": 225, "model_prop": 44, "model_scor": [268, 287], "model_select": [2, 44, 45, 46, 47, 50, 53, 62, 63, 65, 68, 69, 88, 104, 105, 106, 107, 108, 110, 117, 126, 128, 135, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 161, 162, 164, 167, 169, 180, 181, 182, 184, 185, 187, 188, 190, 196, 206, 207, 210, 212, 217, 218, 225, 226, 228, 238, 243, 244, 247, 249, 250, 251, 255, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 290, 291, 292, 296, 297, 303, 305, 306, 310, 312, 313, 314, 315, 317, 318, 319, 322, 323, 324, 325, 326, 331, 332, 339, 342, 346, 354, 357, 358, 375, 380, 388, 389, 398, 403, 406, 408, 411, 414, 437, 438, 559, 561, 568, 569, 581, 662, 700, 701, 703, 705, 745, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 838, 856, 864, 865, 867, 915, 916, 917, 918, 993, 994, 999, 1004, 1006, 1007, 1012, 1014, 1019, 1025, 1031, 1038, 1040, 1041], "model_step": 44, "model_titl": 143, "model_with_cf": 315, "moder": [268, 375, 417, 454, 1010], "modern": [44, 150, 415, 468, 504, 592, 693, 697, 733, 905, 1001, 1023, 1024, 1050], "modif": [375, 410, 414, 415, 446, 1017, 1051, 1052], "modifi": [108, 196, 220, 230, 231, 232, 244, 247, 323, 348, 375, 377, 389, 404, 407, 414, 417, 443, 447, 454, 459, 468, 482, 483, 484, 485, 496, 511, 583, 613, 614, 616, 622, 679, 681, 692, 696, 722, 732, 733, 771, 786, 787, 790, 931, 985, 986, 1000, 1017, 1018, 1024, 1029, 1030, 1034, 1036, 1037, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1049, 1053], "modified_fil": 375, "modified_hub": [47, 679, 1018], "modified_huber_loss": 220, "modified_tol": [692, 696], "modrak": [1049, 1050], "modroiu": 1004, "modul": [7, 11, 16, 31, 32, 72, 73, 83, 87, 109, 115, 118, 120, 121, 134, 159, 166, 168, 179, 182, 183, 189, 191, 225, 229, 230, 252, 260, 284, 285, 286, 289, 302, 304, 305, 307, 322, 326, 327, 334, 349, 353, 369, 370, 373, 374, 375, 376, 377, 379, 380, 381, 383, 384, 387, 389, 392, 393, 401, 405, 407, 410, 414, 415, 416, 418, 444, 504, 536, 581, 582, 662, 942, 993, 998, 1000, 1002, 1004, 1005, 1008, 1010, 1011, 1014, 1016, 1018, 1020, 1021, 1028, 1035, 1036, 1037, 1039, 1040, 1044, 1048], "modulo": [415, 1045], "moeller": 1040, "mogavero": 1044, "moham": [1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1051, 1052], "mohamedbsh": 1049, "mohammad": [1042, 1043], "mohit": [1048, 1051], "mohn": [1042, 1046], "mohr": 1040, "moin": 1046, "moisel": 1053, "mois\u00e9": 1016, "moitra": [1034, 1035, 1036], "mojca": 1045, "mojdeh": 1051, "mokeeva": 1053, "mola": [1045, 1051, 1053], "molden": 1036, "molecul": 1001, "molin": 1049, "molla": [1035, 1036], "molnar": [186, 1011], "moment": [362, 412, 417, 440, 618, 626, 864, 865, 967, 1008, 1009], "momentum": [304, 864, 865, 1008], "mon": [44, 150, 186], "mona": [168, 176, 182, 417, 497, 614, 618, 625, 626, 628, 1025], "monaf": 1049, "monei": [0, 228, 1028], "monitor": [145, 196, 218, 378, 389, 554, 555, 560, 561, 562, 563, 1008, 1027, 1037, 1042, 1044, 1046], "mono": [649, 650, 655, 656, 663, 664, 665, 666, 684, 687], "monografia": 1000, "monomi": 211, "monotoinc": 318, "monoton": [2, 23, 44, 63, 134, 182, 186, 228, 240, 248, 318, 405, 558, 559, 560, 561, 562, 563, 565, 566, 635, 638, 639, 697, 709, 883, 895, 909, 912, 915, 916, 917, 918, 1001, 1005, 1014, 1019, 1025, 1041, 1045, 1049, 1051], "monotonic_cst": [150, 152, 318, 320, 324, 414, 558, 559, 562, 563, 565, 566, 915, 916, 917, 918, 1049, 1052], "mont": [242, 417, 614, 644, 645, 996, 1009], "montecchio": 1038, "montesel": 1052, "month": [0, 44, 174, 186, 314, 370, 375, 379, 390, 1034], "month_co": 44, "month_sin": 44, "monthli": [174, 390, 1004], "montoya": 1041, "montreal": 322, "moodi": 1039, "moon": [268, 304, 310, 350, 351, 523], "moonkyung94": 1048, "moor": [0, 738, 1004, 1028, 1051], "moosmann": 567, "moradizadeh": 1048, "morai": [1052, 1053], "moral": [58, 350, 661, 1042, 1046, 1047, 1052], "morawiec": [1041, 1042], "more": [0, 2, 11, 37, 44, 46, 47, 48, 51, 52, 53, 54, 58, 63, 64, 65, 67, 68, 73, 75, 76, 79, 80, 81, 83, 86, 87, 89, 91, 94, 101, 108, 112, 119, 121, 124, 128, 135, 136, 138, 141, 142, 144, 146, 147, 148, 149, 150, 151, 155, 163, 165, 169, 175, 178, 181, 182, 185, 186, 188, 190, 192, 193, 196, 197, 200, 202, 203, 205, 208, 210, 211, 212, 214, 225, 226, 227, 228, 230, 234, 237, 242, 243, 244, 245, 247, 249, 253, 255, 256, 258, 259, 261, 262, 266, 268, 269, 270, 271, 275, 282, 285, 287, 288, 290, 291, 298, 303, 304, 306, 308, 309, 310, 313, 314, 315, 317, 318, 319, 321, 322, 323, 324, 325, 326, 329, 336, 339, 343, 344, 346, 348, 350, 351, 352, 354, 355, 356, 357, 358, 362, 363, 364, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 379, 381, 382, 383, 388, 389, 390, 393, 398, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 424, 430, 432, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 575, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 874, 875, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 921, 923, 925, 926, 947, 949, 951, 953, 966, 969, 987, 990, 992, 993, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1023, 1024, 1026, 1028, 1030, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "moreau": [1040, 1041, 1042, 1043, 1044], "moreov": [175, 310, 321, 358, 407, 411, 417, 900, 973, 1004, 1012, 1028, 1042, 1048, 1049], "moreyra": 1047, "morgan": [1016, 1020], "mori": 1049, "morikko": 1041, "morina": 1047, "moritz": [1047, 1049], "morn": 44, "moroz": 1040, "morril": 1034, "mors": 1045, "moslei": 1004, "mosley2013": 1004, "mosold": 155, "most": [2, 11, 44, 46, 48, 52, 54, 58, 62, 65, 86, 87, 89, 96, 110, 116, 117, 127, 129, 135, 141, 142, 148, 150, 155, 160, 161, 162, 164, 165, 174, 181, 184, 185, 186, 187, 188, 190, 196, 210, 211, 228, 244, 248, 253, 259, 262, 265, 266, 271, 275, 276, 278, 282, 285, 287, 297, 308, 314, 315, 317, 320, 322, 323, 325, 329, 339, 343, 350, 351, 352, 358, 362, 363, 364, 370, 371, 373, 375, 376, 377, 379, 380, 381, 383, 387, 389, 390, 393, 398, 401, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 443, 444, 446, 450, 456, 457, 460, 468, 497, 504, 522, 525, 533, 535, 540, 544, 550, 552, 562, 563, 567, 568, 590, 591, 593, 595, 606, 614, 630, 633, 652, 661, 675, 677, 679, 681, 690, 691, 695, 698, 728, 731, 761, 762, 766, 788, 797, 800, 801, 806, 807, 822, 835, 836, 849, 850, 851, 853, 855, 856, 857, 858, 859, 882, 884, 892, 893, 895, 896, 897, 898, 905, 924, 950, 951, 953, 966, 993, 994, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1010, 1011, 1012, 1017, 1018, 1019, 1020, 1022, 1023, 1024, 1028, 1036, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1049, 1051, 1053], "most_common": 58, "most_frequ": [271, 552, 630, 633, 857, 994, 1004, 1042, 1044, 1046], "mostli": [0, 2, 81, 103, 210, 228, 313, 377, 383, 387, 389, 412, 414, 415, 522, 782, 783, 1019, 1023, 1028, 1042, 1043, 1044, 1050], "mother": 1001, "motiv": [130, 375, 377, 389, 996, 1004, 1014, 1028, 1047], "motmoti": 1044, "motoda": 407, "motor": 228, "motorcycl": [58, 370], "mottl": [1042, 1043], "moudgalya": [1050, 1051], "moufad": 1049, "moulavi": [407, 446], "mount": 383, "mountain": 1042, "mountford": [1050, 1051], "mous": 369, "mouseid": 369, "moussa": 1040, "move": [65, 143, 269, 306, 339, 374, 375, 381, 405, 407, 550, 551, 572, 573, 574, 577, 579, 580, 944, 945, 946, 970, 1034, 1035, 1039, 1042, 1044, 1047, 1048, 1053], "moveabl": 408, "movelikeriv": 1043, "movement": 370, "movi": 415, "movie_entri": 415, "moya": 1046, "mp": 1000, "mpce": 58, "mpl": [71, 253, 254, 255, 259, 308], "mpl_toolkit": [51, 101, 127, 186, 230, 232, 301], "mplot3d": [101, 127, 186, 230, 232], "mpoemsl": 1048, "mppca": [535, 542], "mprun": 381, "mpy": 415, "mr": [322, 1035, 1038, 1048], "mrandrewandrad": 1040, "mrastgoo": [1049, 1051, 1053], "mrg": 383, "mridul": 1040, "mrinal": 1048, "mrinaltyagi": 1048, "mrl09": 412, "mrmjauh": 1041, "mro": [377, 424, 430, 1044, 1045, 1053], "mrs2008": 592, "msabati": 1048, "msc": 372, "mschaffenroth": 1044, "mse": [45, 47, 110, 111, 145, 147, 148, 180, 181, 210, 212, 214, 216, 283, 324, 650, 656, 1004, 1020, 1045, 1047], "mse_path_": [200, 650, 654, 656, 658, 664, 666], "mse_valu": 47, "mses_california": 181, "mses_diabet": 181, "msft": 52, "msg": [288, 987], "msle": 1004, "msm": [165, 372], "mssubclass": 155, "mst": 407, "msvc": 1037, "msvcp140": 1048, "mt19937": [275, 280, 936, 1045], "mthorrel": [1041, 1044], "mtrand": 358, "mtse": 682, "mu": [55, 112, 113, 268, 412, 420, 473, 475, 476, 479, 480, 481, 541, 548, 998, 1000, 1041, 1044], "mu_i": 1006, "mu_j": 407, "mu_k": 998, "muayyad": 1042, "much": [38, 44, 46, 47, 49, 53, 58, 63, 76, 89, 112, 114, 119, 124, 130, 140, 147, 148, 155, 156, 157, 169, 180, 181, 185, 186, 187, 188, 190, 208, 212, 241, 244, 247, 262, 268, 270, 271, 274, 279, 281, 305, 309, 313, 314, 315, 319, 320, 322, 339, 344, 350, 351, 358, 362, 363, 364, 370, 375, 376, 377, 380, 383, 387, 388, 393, 401, 405, 406, 409, 410, 411, 412, 413, 414, 415, 416, 447, 448, 497, 535, 536, 537, 539, 560, 561, 562, 563, 661, 662, 669, 670, 671, 679, 680, 681, 695, 782, 783, 806, 807, 821, 849, 857, 882, 900, 907, 993, 996, 999, 1000, 1001, 1003, 1004, 1005, 1007, 1008, 1010, 1012, 1016, 1017, 1019, 1020, 1024, 1028, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "mudd": 1047, "mueller": [0, 396, 1028, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "muhammad": [1042, 1043, 1047], "mukherje": 1045, "mula": 1046, "multi": [2, 51, 68, 125, 127, 134, 143, 153, 156, 171, 173, 182, 191, 196, 197, 199, 200, 203, 209, 217, 220, 223, 226, 229, 232, 236, 237, 245, 248, 260, 265, 277, 287, 302, 304, 310, 311, 317, 322, 326, 333, 344, 347, 348, 350, 355, 357, 363, 370, 372, 378, 384, 389, 393, 407, 414, 415, 417, 424, 437, 452, 462, 469, 474, 496, 497, 505, 506, 511, 515, 516, 520, 521, 523, 542, 550, 551, 552, 554, 556, 558, 559, 560, 562, 565, 566, 568, 570, 613, 634, 636, 646, 649, 650, 655, 656, 660, 661, 663, 664, 665, 666, 669, 671, 675, 676, 677, 678, 679, 684, 687, 693, 706, 716, 723, 737, 743, 745, 786, 802, 803, 817, 825, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 854, 855, 857, 863, 864, 865, 868, 874, 887, 891, 902, 903, 907, 909, 912, 915, 917, 919, 920, 921, 923, 927, 933, 936, 939, 993, 1005, 1007, 1011, 1014, 1018, 1023, 1025, 1026, 1029, 1030, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1047, 1048, 1050, 1051, 1052, 1053], "multi_class": [277, 317, 613, 661, 662, 791, 907, 923, 1000, 1005, 1019, 1034, 1038, 1042, 1047, 1049, 1052, 1053], "multi_confus": 757, "multi_label": 923, "multi_layer_regressor": 414, "multi_output": [384, 927, 933, 992], "multi_target_forest": 1005, "multialign": 280, "multiarch": 383, "multiclass": [2, 32, 64, 67, 141, 191, 203, 226, 238, 245, 247, 250, 260, 265, 273, 275, 278, 287, 306, 336, 347, 354, 370, 371, 377, 378, 380, 389, 398, 407, 414, 437, 452, 462, 489, 497, 505, 558, 560, 562, 565, 568, 569, 596, 604, 613, 634, 635, 636, 661, 662, 669, 671, 676, 677, 678, 679, 705, 709, 711, 732, 733, 737, 738, 741, 746, 757, 786, 787, 790, 791, 792, 797, 803, 804, 806, 807, 808, 809, 817, 819, 821, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 874, 888, 907, 909, 912, 915, 917, 965, 966, 967, 998, 1000, 1014, 1015, 1019, 1020, 1025, 1026, 1030, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1049, 1050, 1051, 1053], "multicollinear": [142, 148, 182, 183, 187, 331, 410, 501, 565, 637, 658, 833, 1000, 1012, 1025], "multicor": [1046, 1047], "multidimension": [2, 410, 691, 693, 695, 697, 1001, 1007], "multigrid": 462, "multiindex": 1048, "multilabel": [2, 31, 32, 116, 118, 182, 236, 275, 286, 331, 370, 377, 378, 389, 402, 482, 487, 497, 498, 509, 510, 516, 524, 542, 558, 565, 568, 661, 677, 678, 706, 710, 716, 729, 732, 733, 737, 738, 741, 742, 757, 759, 786, 787, 790, 791, 797, 799, 833, 836, 838, 840, 864, 871, 874, 878, 880, 891, 912, 915, 917, 939, 965, 966, 967, 1015, 1025, 1026, 1030, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1047, 1048, 1049, 1050, 1051, 1052], "multilabel_": [836, 1039], "multilabel_confusion_matrix": [2, 403, 716, 732, 733, 741, 787, 790, 1004, 1043], "multilabelbinar": [2, 389, 836, 871, 880, 1005, 1037, 1039, 1040, 1042, 1043], "multilay": [387, 1002], "multilearn": 1023, "multimetr": [714, 993, 1044, 1049, 1053], "multimetric_": [803, 806, 807, 817], "multimod": 237, "multinomi": [2, 48, 67, 182, 191, 201, 202, 204, 225, 245, 263, 277, 285, 305, 326, 370, 371, 375, 412, 414, 497, 513, 524, 552, 554, 560, 562, 634, 661, 662, 744, 833, 836, 842, 843, 844, 845, 846, 887, 936, 1004, 1020, 1025, 1026, 1030, 1034, 1038, 1040, 1041, 1042, 1047, 1048, 1052, 1053], "multinomialdevi": 1045, "multinomialhmm": 1034, "multinomialnb": [2, 48, 364, 370, 415, 842, 843, 844, 845, 1006, 1036, 1038, 1041, 1042, 1046, 1047, 1049], "multiouput": 1044, "multioutput": [2, 42, 154, 277, 287, 389, 398, 430, 465, 482, 483, 484, 552, 555, 557, 558, 559, 561, 563, 565, 566, 569, 571, 614, 635, 636, 638, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 664, 665, 666, 667, 668, 670, 673, 675, 676, 681, 682, 724, 726, 731, 748, 749, 751, 753, 754, 756, 788, 791, 793, 794, 828, 836, 838, 839, 840, 841, 850, 858, 865, 874, 908, 910, 913, 915, 916, 917, 918, 939, 966, 967, 1004, 1025, 1026, 1030, 1034, 1035, 1036, 1040, 1041, 1047, 1048, 1053], "multioutput_arrai": 375, "multioutputclassifi": [2, 398, 791, 836, 838, 840, 1004, 1041, 1043, 1044, 1045, 1046, 1050, 1051], "multioutputregressor": [2, 154, 398, 430, 465, 482, 483, 484, 555, 557, 559, 561, 563, 566, 569, 571, 614, 638, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 664, 665, 666, 667, 668, 670, 673, 675, 676, 681, 682, 839, 841, 850, 858, 865, 908, 910, 913, 916, 918, 1040, 1041, 1043, 1045, 1046, 1050, 1051], "multipl": [2, 26, 53, 81, 102, 105, 119, 130, 135, 141, 143, 145, 161, 182, 185, 205, 242, 262, 268, 273, 276, 280, 285, 287, 290, 317, 323, 326, 342, 362, 363, 364, 369, 371, 372, 375, 377, 378, 379, 380, 387, 389, 401, 407, 408, 409, 410, 412, 414, 415, 416, 417, 418, 419, 444, 460, 464, 466, 467, 469, 474, 488, 491, 493, 496, 497, 498, 504, 505, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 552, 554, 555, 556, 557, 560, 561, 562, 563, 564, 583, 601, 609, 610, 613, 614, 630, 635, 637, 642, 643, 644, 645, 649, 650, 653, 655, 656, 657, 660, 663, 664, 665, 666, 669, 670, 671, 674, 676, 679, 681, 682, 692, 693, 695, 696, 697, 714, 724, 726, 731, 748, 749, 751, 753, 754, 756, 788, 791, 793, 794, 796, 800, 801, 803, 804, 805, 806, 807, 808, 809, 815, 817, 818, 819, 820, 821, 822, 823, 829, 830, 831, 833, 837, 838, 839, 840, 841, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 869, 872, 884, 888, 896, 899, 900, 907, 908, 909, 912, 929, 944, 950, 951, 974, 977, 996, 999, 1000, 1001, 1005, 1006, 1007, 1011, 1012, 1017, 1018, 1020, 1023, 1025, 1034, 1035, 1037, 1040, 1041, 1044, 1045, 1046, 1047, 1049, 1050, 1051], "multipleloc": [230, 293], "multiplex": 1020, "multipli": [185, 214, 228, 268, 357, 362, 384, 389, 412, 414, 415, 420, 464, 475, 516, 539, 541, 542, 548, 558, 562, 565, 649, 651, 655, 657, 661, 662, 663, 665, 671, 672, 673, 675, 679, 680, 681, 683, 689, 690, 692, 696, 767, 909, 912, 915, 917, 939, 979, 980, 981, 993, 996, 1000, 1004, 1018, 1045], "multiprocess": [322, 387, 389, 969, 1007, 1034, 1042, 1048], "multirespons": 1000, "multiscal": 462, "multisurfac": [165, 372], "multitarget": 384, "multitask": [287, 415, 1005], "multitaskelasticnet": [2, 649, 650, 655, 664, 665, 666, 684, 1000, 1005, 1034, 1041, 1042, 1045, 1047], "multitaskelasticnetcv": [2, 398, 649, 650, 655, 663, 665, 666, 684, 1000, 1005, 1037, 1044, 1045, 1047, 1051], "multitasklasso": [2, 205, 655, 663, 666, 1000, 1005, 1034, 1042, 1045, 1047], "multitasklassocv": [2, 398, 664, 665, 1005, 1037, 1044, 1045, 1047, 1051], "multithread": [362, 407, 777, 781, 907, 908, 909, 910, 911, 912, 913], "multivari": [2, 121, 185, 367, 409, 412, 415, 473, 517, 518, 519, 630, 631, 632, 633, 652, 674, 681, 682, 842, 843, 844, 845, 846, 998, 1000, 1003, 1006, 1023, 1030], "multivariate_norm": [114, 117, 253, 420, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481], "multiwai": 1020, "muma": 113, "mungui": 1047, "munoz": [1040, 1046], "muoki": 1046, "murad": 1037, "murashkin": 1038, "murata": [1047, 1048], "murder": 350, "murezzda": 1050, "murmurhash": 384, "murmurhash3": [2, 415, 584, 591, 968], "murmurhash3_32": [2, 384], "murmurhash3_x86_32": [384, 968], "murphi": [405, 646, 997], "murrai": [1040, 1041], "music": 1028, "must": [89, 185, 186, 188, 194, 196, 227, 228, 237, 248, 263, 294, 309, 314, 350, 358, 370, 374, 375, 376, 377, 379, 381, 383, 389, 390, 398, 403, 405, 407, 408, 411, 412, 414, 415, 416, 417, 418, 428, 438, 441, 444, 445, 446, 447, 449, 450, 451, 455, 457, 459, 461, 462, 464, 466, 467, 469, 474, 487, 509, 510, 513, 524, 532, 538, 539, 540, 541, 542, 544, 545, 548, 554, 555, 560, 561, 562, 563, 568, 569, 583, 584, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 613, 614, 620, 623, 630, 631, 632, 633, 634, 635, 636, 641, 645, 646, 651, 652, 655, 661, 662, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 685, 688, 689, 690, 691, 692, 695, 696, 697, 698, 699, 702, 706, 709, 712, 738, 749, 767, 774, 777, 781, 784, 791, 795, 796, 797, 799, 800, 801, 803, 804, 806, 807, 808, 810, 812, 813, 815, 817, 818, 819, 821, 822, 824, 828, 831, 833, 834, 842, 843, 844, 845, 846, 849, 850, 851, 853, 855, 856, 857, 858, 859, 862, 863, 864, 865, 867, 870, 871, 872, 874, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 891, 907, 908, 909, 910, 911, 912, 913, 914, 920, 924, 978, 987, 989, 992, 993, 994, 1000, 1001, 1002, 1004, 1007, 1008, 1010, 1011, 1018, 1019, 1020, 1034, 1037, 1041, 1045, 1047, 1048, 1051], "mutabl": 377, "mutat": [358, 992, 1042], "mutual": [2, 73, 74, 83, 89, 92, 159, 182, 389, 414, 416, 446, 594, 597, 598, 601, 602, 608, 609, 610, 611, 707, 708, 718, 758, 760, 789, 798, 805, 820, 823, 993, 1000, 1004, 1005, 1025, 1034, 1040, 1050], "mutual_info_classif": [2, 105, 416, 594, 597, 598, 601, 602, 1040, 1046, 1049, 1052], "mutual_info_regress": [2, 160, 321, 416, 594, 597, 598, 601, 602, 611, 1040, 1041, 1046, 1048, 1049, 1050, 1052], "mutual_info_scor": [2, 73, 407, 707, 1004, 1042, 1045, 1046], "mu\u00f1oz": [1047, 1049], "mwestt": 1043, "my": [369, 375, 380, 383, 497, 944, 946, 1004], "my_custom_loss_func": 1004, "my_data": 380, "my_dataset": 487, "my_estim": [377, 408], "my_extra_param": 377, "my_featur": 375, "my_fil": 381, "my_func": [376, 381], "my_g": [419, 534], "my_group": [244, 398], "my_kernel": [335, 1019], "my_memb": [95, 97, 98], "my_other_weight": [244, 398], "my_pipelin": 1043, "my_script": 363, "my_tag": 377, "my_test_script": 383, "my_token": 415, "my_weight": [244, 398], "myatt": [1043, 1044], "mycach": [509, 510], "mycluster": 425, "myenugula": 1052, "myer": [1037, 1041], "myestim": [377, 421, 423, 424, 426, 427, 428, 429, 430], "myestimator0": 423, "myestimator1": 423, "mymultioutputestim": 377, "mypi": [375, 379, 393, 400, 1045], "myself": 375, "mysteri": 322, "mysvmlightfil": 509, "mytag": 377, "mytransform": [377, 431], "m\u00e9hault": [1042, 1043], "m\u00f6rtberg": 1040, "m\u00fcller": [0, 390, 412, 536, 873, 1008, 1014, 1018, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1048], "n": [2, 44, 45, 47, 48, 50, 51, 55, 56, 58, 69, 70, 73, 75, 76, 92, 103, 108, 112, 116, 119, 121, 124, 126, 128, 130, 131, 135, 137, 138, 142, 157, 160, 163, 165, 167, 169, 173, 178, 186, 188, 193, 196, 203, 210, 211, 214, 225, 227, 228, 230, 240, 241, 242, 245, 253, 255, 256, 266, 268, 271, 273, 274, 275, 277, 278, 281, 288, 291, 293, 306, 310, 312, 313, 319, 322, 324, 329, 343, 346, 357, 362, 369, 372, 373, 375, 379, 381, 383, 384, 389, 393, 394, 398, 404, 405, 407, 410, 411, 412, 413, 414, 415, 417, 418, 444, 445, 447, 448, 450, 469, 471, 474, 478, 489, 516, 517, 518, 519, 524, 529, 539, 541, 542, 548, 558, 559, 560, 561, 564, 565, 566, 567, 590, 591, 592, 593, 609, 610, 617, 630, 652, 674, 682, 695, 699, 702, 709, 710, 758, 808, 811, 813, 818, 819, 822, 843, 847, 848, 852, 872, 899, 901, 915, 916, 917, 918, 930, 949, 954, 955, 978, 982, 983, 993, 996, 998, 1000, 1001, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1014, 1016, 1018, 1019, 1020, 1034, 1036, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1051, 1052], "n1": 124, "n2": 124, "n4": 124, "n_": [112, 113, 188, 268, 320, 407, 412, 414, 649, 655, 688, 699, 996, 1000, 1004, 1006, 1007, 1011, 1014, 1016, 1019, 1020], "n_alpha": [215, 472, 649, 650, 653, 654, 655, 656, 657, 658, 659, 663, 664, 665, 666, 676, 678, 684, 685, 686, 687, 1037], "n_atom": 1035, "n_averag": 70, "n_bar": 181, "n_batch_iter_": 537, "n_best": 451, "n_bin": [62, 63, 65, 87, 210, 228, 309, 311, 315, 438, 439, 872, 1014], "n_bins_": 872, "n_bootstrap": [271, 1035], "n_bulk_repeat": 50, "n_byte": 241, "n_c": [407, 662], "n_call": [847, 848], "n_candid": [806, 807, 993], "n_candidates_": [280, 806, 807, 993], "n_candidates_0": 993, "n_candidates_i": 993, "n_categori": [315, 843, 881, 1014], "n_categorical_featur": [144, 562, 563, 635, 636], "n_categories_": 843, "n_center": [78, 513], "n_channel": [585, 586, 589], "n_class": [2, 46, 73, 119, 135, 137, 142, 143, 162, 164, 225, 231, 242, 245, 255, 275, 276, 277, 297, 298, 317, 355, 357, 358, 371, 375, 377, 389, 414, 437, 488, 489, 503, 516, 520, 524, 550, 551, 552, 554, 556, 558, 560, 562, 565, 568, 570, 595, 596, 606, 613, 637, 642, 661, 662, 669, 670, 671, 677, 678, 679, 680, 700, 710, 719, 721, 725, 738, 741, 744, 757, 791, 797, 802, 803, 806, 807, 817, 825, 828, 835, 836, 837, 838, 839, 841, 842, 843, 844, 845, 846, 849, 854, 856, 857, 864, 867, 874, 875, 878, 881, 888, 891, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 917, 919, 920, 938, 939, 1000, 1004, 1005, 1008, 1015, 1018, 1019, 1039, 1040, 1041, 1043, 1044, 1045, 1051], "n_classes_": [552, 554, 556, 558, 560, 565, 613, 835, 836, 915, 917, 1035, 1044, 1046], "n_classes_pr": [717, 758], "n_classes_tru": [717, 758], "n_classifi": [67, 570, 571], "n_cluster": [2, 58, 59, 60, 73, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 88, 90, 91, 92, 93, 94, 95, 96, 98, 100, 101, 121, 321, 351, 375, 389, 407, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 459, 460, 461, 462, 463, 512, 514, 713, 795, 796, 1034, 1038, 1040, 1042, 1043, 1045, 1048], "n_clusters_": [74, 83, 89, 97, 441, 445], "n_clusters_list": 79, "n_clusters_per_class": [68, 139, 162, 164, 265, 298, 303, 310, 371, 380, 516, 607, 609], "n_clusters_rang": 73, "n_clusters_tru": 95, "n_col": [46, 58, 121, 246, 422, 451, 453, 512, 514, 635], "n_column": [404, 451, 453], "n_column_clust": [451, 453, 514], "n_comp": [131, 190], "n_comparison": 268, "n_compon": [44, 45, 46, 52, 55, 80, 86, 91, 92, 93, 103, 105, 106, 107, 116, 117, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 153, 190, 209, 230, 231, 232, 233, 234, 235, 237, 241, 242, 245, 249, 253, 254, 255, 256, 257, 258, 259, 267, 292, 297, 306, 313, 319, 321, 324, 325, 351, 377, 380, 381, 389, 408, 410, 412, 419, 451, 452, 462, 464, 482, 483, 484, 485, 527, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 642, 643, 644, 645, 691, 692, 693, 694, 695, 696, 697, 698, 699, 800, 801, 856, 863, 866, 899, 900, 901, 951, 996, 998, 1001, 1003, 1007, 1035, 1036, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1051, 1052, 1053], "n_components_": [106, 128, 389, 441, 445, 535, 539, 540, 541, 542, 543, 544, 899, 900, 1043, 1045], "n_components_fa": 128, "n_components_pca": 128, "n_components_pca_ml": 128, "n_components_rang": 241, "n_connected_compon": 463, "n_connected_components_": [441, 445, 1043], "n_core": 141, "n_core_sampl": [418, 444], "n_cpu": [363, 389], "n_cv": [411, 437], "n_cv_alpha": [654, 658], "n_cv_fold": [144, 314, 809, 826, 831, 834], "n_digit": 92, "n_dim": [478, 528, 530, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 1051], "n_dimens": [800, 801], "n_dimensions_of_x": [909, 910, 911, 912, 913], "n_dir": 54, "n_e": 407, "n_element": [417, 620], "n_encoded_featur": [880, 881], "n_error": 295, "n_error_outli": [224, 294, 338], "n_error_outliers_sgd": 224, "n_error_test": [224, 294, 338], "n_error_test_sgd": 224, "n_error_train": [224, 338], "n_error_train_sgd": 224, "n_estim": [47, 50, 64, 68, 135, 136, 137, 138, 139, 140, 141, 143, 145, 146, 147, 148, 149, 153, 154, 157, 180, 188, 231, 246, 250, 255, 265, 280, 310, 317, 319, 362, 388, 389, 414, 416, 554, 555, 556, 557, 558, 559, 560, 561, 564, 565, 566, 567, 568, 569, 570, 571, 635, 806, 807, 993, 1010, 1011, 1031, 1042, 1050], "n_estimators_": [145, 560, 561], "n_estimators_ful": 145, "n_exampl": 48, "n_face": 246, "n_featur": [46, 48, 55, 63, 64, 65, 67, 68, 69, 70, 71, 76, 86, 92, 94, 95, 110, 111, 112, 113, 114, 119, 121, 128, 135, 137, 139, 141, 142, 162, 164, 165, 180, 181, 190, 192, 195, 196, 197, 205, 206, 209, 213, 214, 225, 227, 231, 237, 241, 242, 244, 253, 258, 265, 271, 275, 277, 278, 280, 281, 298, 303, 310, 317, 318, 319, 321, 323, 324, 325, 346, 350, 351, 352, 358, 362, 368, 369, 371, 375, 377, 380, 387, 388, 389, 398, 407, 409, 410, 412, 414, 415, 418, 419, 420, 422, 424, 425, 426, 429, 430, 431, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 457, 458, 459, 460, 461, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 489, 490, 491, 493, 495, 502, 505, 509, 510, 513, 516, 517, 520, 522, 524, 525, 527, 529, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 583, 584, 585, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 699, 700, 701, 703, 704, 705, 713, 728, 761, 762, 763, 764, 766, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 795, 796, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 867, 870, 871, 872, 873, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 925, 951, 978, 979, 980, 981, 982, 983, 984, 985, 986, 992, 996, 1000, 1005, 1007, 1008, 1014, 1018, 1019, 1020, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "n_feature_influ": 50, "n_features_": [164, 595, 596, 1047, 1049], "n_features_a": 856, "n_features_b": 856, "n_features_in_": [377, 389, 428, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 613, 614, 630, 631, 632, 633, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 691, 692, 693, 694, 695, 800, 801, 802, 803, 806, 807, 817, 825, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 870, 871, 872, 873, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 992, 1045, 1047, 1049, 1052], "n_features_max": 70, "n_features_missing_ind": 633, "n_features_new": [431, 442, 445, 533, 535, 537, 538, 540, 543, 544, 550, 568, 570, 571, 584, 585, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 631, 633, 638, 641, 642, 643, 644, 645, 856, 863, 870, 871, 872, 873, 876, 877, 879, 880, 881, 882, 884, 885, 886, 887, 899, 900], "n_features_opt": 105, "n_features_out": 633, "n_features_out_": 886, "n_features_rang": 70, "n_features_to_comput": 1042, "n_features_to_select": [163, 165, 319, 416, 595, 604, 1046, 1048], "n_features_to_select_": 604, "n_features_with_miss": 632, "n_features_with_missing_": 630, "n_fold": [650, 654, 656, 658, 662, 664, 666, 1035, 1036, 1040], "n_gram_rang": 1034, "n_group": [411, 812, 1040], "n_i": [1006, 1014], "n_imag": 266, "n_index": [849, 850, 851, 853, 855, 857, 858], "n_inform": [63, 65, 68, 139, 142, 162, 164, 192, 196, 213, 214, 265, 271, 281, 298, 303, 310, 317, 346, 371, 380, 516, 525, 554, 555, 556, 557, 565, 566, 607, 608, 609, 610, 611, 649, 650, 655, 663, 664, 665, 668, 684, 685, 686, 837, 925, 1005, 1042], "n_init": [58, 78, 79, 84, 91, 92, 95, 98, 230, 231, 232, 233, 318, 321, 351, 407, 443, 447, 449, 451, 452, 453, 459, 462, 693, 697, 800, 801, 1034, 1042, 1048, 1049, 1050], "n_init_rang": 95, "n_inlier": 237, "n_input_features_": 1047, "n_instanc": [50, 636], "n_iter": [46, 56, 104, 150, 169, 218, 269, 276, 288, 306, 341, 381, 388, 419, 454, 478, 533, 534, 545, 546, 547, 548, 649, 650, 655, 656, 663, 664, 665, 666, 684, 685, 686, 687, 688, 689, 690, 695, 697, 806, 807, 815, 817, 863, 865, 950, 951, 993, 1018, 1035, 1040, 1041, 1042, 1046, 1048, 1049, 1050, 1052], "n_iter_": [44, 124, 150, 218, 256, 389, 440, 447, 448, 449, 471, 472, 482, 483, 484, 532, 533, 534, 537, 538, 539, 540, 541, 544, 562, 563, 630, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 677, 679, 680, 681, 682, 683, 693, 695, 800, 801, 856, 864, 865, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 1038, 1041, 1042, 1044, 1047, 1048, 1050], "n_iter_no_chang": [47, 141, 145, 150, 218, 320, 350, 380, 389, 414, 560, 561, 562, 563, 669, 670, 671, 679, 680, 681, 864, 865, 1018, 1042, 1045], "n_iter_search": 276, "n_iter_without_progress": [231, 695, 1039, 1040], "n_iterations_": [280, 806, 807], "n_iters_": 1040, "n_job": [53, 88, 105, 106, 141, 142, 147, 148, 155, 164, 165, 180, 185, 186, 187, 188, 231, 233, 249, 262, 267, 269, 270, 272, 281, 285, 288, 317, 318, 319, 322, 346, 363, 375, 389, 414, 418, 437, 444, 446, 448, 450, 452, 455, 456, 457, 458, 461, 464, 467, 472, 532, 536, 537, 538, 540, 543, 544, 546, 547, 549, 556, 557, 558, 559, 564, 565, 566, 567, 568, 569, 570, 571, 596, 604, 609, 610, 613, 635, 637, 642, 650, 654, 656, 658, 660, 661, 662, 664, 666, 668, 669, 671, 679, 682, 691, 692, 693, 694, 695, 696, 697, 777, 781, 784, 803, 806, 807, 809, 817, 825, 826, 828, 829, 830, 831, 832, 834, 835, 836, 837, 839, 840, 849, 850, 851, 853, 855, 857, 858, 859, 860, 861, 866, 869, 902, 903, 969, 971, 993, 1004, 1005, 1007, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1049, 1052], "n_k": [407, 551], "n_kernel": 615, "n_kernel_param": [613, 614], "n_knot": [44, 211, 320, 886, 1014, 1047], "n_l1_ratio": [650, 662, 664, 1037], "n_l1_ratios_": 662, "n_label": [52, 119, 245, 389, 487, 524, 716, 723, 729, 742, 743, 757, 759, 795, 796, 823, 1004, 1040, 1042], "n_labeled_point": [328, 329], "n_layer": [864, 865], "n_layers_": [864, 865], "n_leav": [463, 915, 916, 917, 918], "n_leaves_": [441, 445], "n_left": 564, "n_local_tri": 460, "n_m": 1020, "n_mask": 210, "n_missing_featur": 632, "n_missing_sampl": 181, "n_nearest_featur": [181, 630], "n_neighbor": [52, 80, 96, 101, 156, 180, 230, 231, 232, 234, 237, 247, 288, 290, 291, 294, 295, 296, 297, 300, 313, 317, 319, 350, 414, 452, 604, 609, 610, 631, 691, 692, 694, 696, 698, 699, 849, 850, 851, 853, 855, 856, 860, 902, 903, 994, 1001, 1007, 1010, 1017, 1041, 1048, 1050, 1051], "n_neighbors_": [694, 853], "n_neighbors_list": [247, 290], "n_neighbour": 1048, "n_node": [357, 441, 445, 463, 558, 559, 565, 566, 567, 915, 916, 917, 918, 957], "n_node_sampl": 357, "n_nodes_ptr": [558, 559, 565, 566, 567], "n_noise_": 83, "n_nonzero": 130, "n_nonzero_coef": [209, 527, 532, 538, 543, 546, 547, 549, 653, 667, 688, 689, 1052], "n_nonzero_coefs_": [667, 668, 1052], "n_nonzero_column": 352, "n_numerical_featur": 144, "n_order": 193, "n_original_featur": [594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605], "n_out": 567, "n_outlier": [112, 113, 151, 213, 237, 295], "n_output": [357, 389, 414, 424, 430, 431, 437, 442, 445, 465, 469, 482, 483, 484, 533, 535, 537, 538, 540, 543, 544, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 568, 569, 570, 571, 584, 585, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 613, 614, 631, 633, 636, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 675, 676, 677, 678, 679, 681, 682, 724, 726, 731, 748, 749, 751, 753, 754, 756, 757, 788, 791, 793, 794, 802, 803, 806, 807, 809, 817, 825, 826, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 854, 856, 857, 858, 863, 864, 865, 866, 870, 871, 872, 873, 876, 877, 879, 880, 881, 882, 884, 885, 886, 887, 899, 900, 902, 903, 907, 908, 909, 910, 912, 913, 915, 916, 917, 918, 939, 974, 1004, 1005, 1020, 1041, 1044], "n_output_featur": 631, "n_output_features_": 882, "n_outputs_": [552, 553, 558, 559, 565, 566, 567, 864, 865, 915, 916, 917, 918], "n_oversampl": [451, 453, 542, 545, 951, 1048], "n_pack": [2, 954, 955], "n_patch": [585, 586, 589], "n_permut": [274, 411, 832], "n_pixel": [246, 266], "n_point": [263, 847, 848], "n_points_per_clust": 99, "n_popul": [384, 972], "n_possible_iterations_": [806, 807], "n_predict": 50, "n_pt": 54, "n_q": 407, "n_quantil": [108, 186, 312, 884, 896, 1043], "n_quantiles_": 884, "n_queri": [691, 849, 850, 851, 853, 855, 857, 858, 859], "n_random_featur": 200, "n_redund": [63, 65, 68, 142, 162, 164, 265, 271, 298, 303, 310, 371, 380, 437, 516, 554, 556, 565, 837], "n_refin": 472, "n_region": 81, "n_regions_plu": 81, "n_regressor": 571, "n_relevant_featur": 205, "n_remaining_candidates_": [806, 807], "n_repeat": [138, 142, 148, 164, 185, 187, 188, 268, 282, 285, 317, 411, 516, 637, 818, 819, 1012], "n_required_iterations_": [806, 807], "n_resourc": 993, "n_resources_": [280, 806, 807, 993], "n_resources_0": 993, "n_resources_i": 993, "n_restarts_optim": [175, 176, 417, 613, 614], "n_retri": [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 1048, 1052], "n_row": [46, 58, 121, 404, 422, 451, 453, 512, 514], "n_row_clust": [451, 453, 514], "n_run": [73, 95, 190, 351], "n_sampl": [46, 47, 50, 55, 62, 63, 64, 65, 69, 70, 71, 73, 74, 75, 77, 78, 79, 80, 83, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 101, 103, 108, 110, 111, 112, 113, 114, 117, 119, 121, 122, 126, 128, 135, 137, 138, 139, 140, 141, 142, 146, 147, 148, 149, 151, 152, 164, 165, 167, 178, 180, 181, 184, 192, 194, 195, 196, 197, 198, 201, 203, 205, 206, 209, 210, 211, 213, 214, 218, 222, 225, 227, 228, 230, 231, 232, 233, 234, 235, 237, 241, 242, 244, 247, 254, 256, 257, 258, 259, 265, 266, 268, 271, 272, 275, 277, 278, 279, 280, 281, 283, 288, 298, 310, 311, 312, 315, 318, 319, 321, 323, 324, 325, 326, 330, 337, 340, 341, 346, 350, 351, 358, 368, 372, 375, 377, 380, 384, 387, 388, 389, 398, 406, 407, 409, 410, 411, 412, 414, 418, 419, 420, 422, 424, 425, 426, 429, 430, 431, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 482, 483, 484, 485, 487, 488, 489, 490, 491, 493, 495, 502, 505, 509, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 583, 584, 585, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 616, 617, 618, 619, 620, 621, 624, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 737, 738, 739, 740, 741, 742, 743, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 773, 774, 775, 776, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 923, 925, 938, 939, 951, 953, 955, 965, 972, 974, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 992, 993, 996, 1000, 1004, 1005, 1007, 1008, 1014, 1015, 1016, 1018, 1019, 1020, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "n_samples1": 873, "n_samples2": 873, "n_samples_": 542, "n_samples_1": [341, 1019], "n_samples_2": [341, 1019], "n_samples_a": [795, 796], "n_samples_fit": [430, 465, 482, 483, 484, 555, 557, 559, 561, 563, 566, 569, 571, 614, 638, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 664, 665, 666, 667, 668, 670, 673, 675, 676, 681, 682, 691, 840, 841, 849, 850, 851, 853, 855, 857, 858, 859, 865, 908, 910, 913, 916, 918], "n_samples_fit_": [288, 849, 850, 851, 853, 855, 857, 858, 859], "n_samples_i": [615, 616, 617, 618, 619, 622, 623, 624, 625, 626, 627, 628, 761, 762, 763, 764, 766, 767, 769, 770, 771, 772, 777, 778, 779, 780, 781, 782, 783, 784], "n_samples_per_cent": 95, "n_samples_rang": [111, 241], "n_samples_seen": 887, "n_samples_seen_": [535, 876, 877, 887, 1042], "n_samples_test": [281, 909, 910, 911, 912, 913, 1007, 1014], "n_samples_train": [281, 909, 910, 911, 912, 913], "n_samples_transform": [288, 851, 859], "n_samples_x": [614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 761, 762, 763, 764, 766, 767, 769, 770, 771, 772, 777, 778, 779, 780, 781, 782, 783, 784], "n_seed": 461, "n_selected_featur": [594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605], "n_skips_": 1041, "n_skips_invalid_data_": 674, "n_skips_invalid_model_": 674, "n_skips_no_inliers_": 674, "n_spline": [44, 886], "n_split": [44, 53, 141, 146, 150, 180, 181, 185, 255, 263, 268, 270, 273, 278, 282, 285, 324, 331, 339, 346, 358, 411, 804, 805, 806, 807, 808, 810, 811, 812, 813, 816, 818, 819, 820, 821, 822, 823, 824, 830, 1040, 1042, 1052], "n_splits_": [803, 806, 807, 817], "n_steps_": [124, 449, 538, 539, 1047], "n_subpopulation_": 682, "n_subsampl": [682, 939], "n_subsets_of_featur": 596, "n_support_": [909, 910, 911, 912, 913, 1019, 1044], "n_support_vector": 47, "n_sv": [909, 910, 911, 912, 913, 1019, 1044], "n_svd_vec": [451, 453], "n_t": [558, 559, 560, 561, 565, 566, 567, 915, 916, 917, 918], "n_t_l": [558, 559, 560, 561, 565, 566, 567, 915, 916, 917, 918], "n_t_r": [558, 559, 560, 561, 565, 566, 567, 915, 916, 917, 918], "n_target": [389, 410, 482, 483, 484, 485, 525, 557, 614, 646, 649, 650, 653, 654, 655, 656, 657, 659, 660, 663, 664, 665, 666, 667, 668, 674, 675, 676, 677, 678, 684, 687, 688, 689, 690, 1005, 1046, 1048, 1050], "n_task": [205, 1000], "n_test": [48, 50, 70, 138, 268, 1034, 1037], "n_test_docu": 48, "n_test_po": 48, "n_threshold": [638, 730, 785, 792], "n_tick": [809, 826, 831, 834], "n_top": 276, "n_top_word": 55, "n_topic": [380, 537, 1041], "n_tot": 702, "n_total_sampl": [328, 329], "n_train": [48, 50, 70, 138, 268, 1034, 1037], "n_train_po": 48, "n_transformed_featur": 867, "n_tree": 47, "n_trees_per_iter": 562, "n_trees_per_iteration_": [560, 561, 562, 563], "n_trials_": 674, "n_uncorrelated_featur": 274, "n_unequ": 702, "n_unique_categori": 314, "n_unique_label": [732, 733, 741, 786, 787, 790, 967], "n_unique_tick": [809, 831], "n_valu": [826, 834, 1042], "n_values_": 1042, "n_values_feature_j": 636, "n_x": [88, 587], "n_y": [88, 587, 1006, 1014], "n_z": 587, "na": [630, 631, 632, 633, 772, 781, 931, 933, 934, 1044, 1045, 1048, 1049, 1050, 1051], "nabarun": 1042, "nabla": 1008, "nabsolut": 216, "nacross": 282, "nada": 58, "nadeau": [268, 1042], "nadia": 1046, "nadim": 1047, "nadirhan": 1048, "nadya": 1040, "nagarajan": [648, 1000], "nagarjuna": [1041, 1042], "nagasaka": 1047, "naghshhnejad": [1044, 1045], "naipawat": [1048, 1049], "naiv": [2, 33, 65, 68, 153, 268, 270, 287, 350, 352, 370, 405, 414, 415, 437, 545, 842, 843, 844, 845, 846, 998, 999, 1007, 1012, 1026, 1030, 1034, 1035, 1036, 1037, 1042, 1044, 1047, 1049], "naive_bay": [2, 48, 62, 63, 65, 68, 153, 157, 269, 270, 350, 358, 364, 370, 414, 437, 570, 842, 843, 844, 845, 846, 868, 998, 1005, 1006, 1035, 1036, 1038, 1039, 1040, 1041], "naive_linear_pipelin": 44, "naive_linear_predict": 44, "naivebay": 364, "naivebayesna": 395, "naivelycalibratedlinearsvc": [63, 65], "najera": 1041, "najork": [729, 759, 1004], "naka": 1047, "nakamura": 1048, "nakano": [1041, 1042], "nalepa": 1041, "naman": 1051, "name": [2, 44, 46, 47, 49, 50, 51, 52, 56, 58, 63, 65, 67, 68, 73, 80, 92, 96, 104, 106, 108, 114, 122, 127, 138, 139, 140, 141, 144, 147, 150, 155, 185, 186, 187, 200, 208, 210, 212, 214, 216, 217, 225, 227, 228, 230, 231, 237, 243, 244, 246, 247, 251, 255, 262, 263, 265, 266, 269, 271, 272, 275, 277, 278, 282, 285, 288, 296, 297, 303, 304, 310, 312, 314, 321, 322, 325, 326, 332, 344, 350, 351, 352, 363, 364, 369, 370, 373, 375, 377, 379, 380, 382, 383, 389, 393, 398, 404, 407, 411, 414, 415, 417, 421, 423, 428, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 457, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 488, 489, 490, 491, 492, 493, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 511, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 576, 578, 583, 584, 585, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 690, 691, 692, 693, 694, 695, 700, 701, 702, 703, 705, 711, 712, 714, 716, 735, 736, 745, 782, 783, 800, 801, 802, 803, 804, 805, 806, 807, 809, 810, 812, 815, 817, 821, 825, 826, 830, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 920, 921, 932, 933, 934, 937, 941, 942, 943, 944, 946, 959, 960, 961, 963, 966, 973, 987, 991, 992, 993, 998, 1000, 1005, 1011, 1012, 1014, 1020, 1034, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "name_to_color": 314, "named_estim": [568, 569, 570, 571], "named_estimators_": [568, 569, 570, 571, 1042, 1044], "named_step": [106, 117, 163, 408, 595, 596, 599, 867, 868, 907, 908, 1000, 1041, 1043], "named_transform": [866, 1049], "named_transformers_": 464, "namedtupl": [2, 620, 1050], "namespac": 403, "namiya": 1041, "nan": [2, 108, 144, 150, 180, 181, 185, 228, 247, 249, 251, 263, 271, 314, 317, 322, 323, 324, 325, 326, 362, 367, 384, 389, 414, 446, 468, 497, 556, 557, 558, 562, 563, 565, 595, 596, 599, 605, 608, 611, 630, 631, 632, 633, 638, 715, 716, 717, 724, 725, 726, 727, 731, 732, 733, 772, 781, 786, 787, 788, 790, 803, 806, 807, 809, 817, 826, 829, 830, 831, 834, 876, 877, 881, 883, 884, 887, 888, 892, 895, 896, 898, 924, 931, 932, 933, 934, 978, 993, 1004, 1014, 1020, 1030, 1037, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1053], "nan_euclidean": [631, 765, 781, 782, 783, 1053], "nan_euclidean_dist": [2, 317, 765, 994, 1044], "nandana": [1040, 1041, 1042], "nandiyawar": 1053, "nanshan": 1047, "nanta": 1037, "nanxin": 1042, "nanyang": 372, "naois": [1049, 1051], "naoki": [1036, 1046], "naoya": [1040, 1041, 1042, 1043], "naozin555": 1047, "napa": 314, "narasimhan": 854, "nardelli": 1037, "narendra": [1045, 1051], "narendramukherje": 1045, "narendran": 1042, "narin": [1041, 1042], "narinek": [1041, 1042], "narr": [375, 389, 661, 907, 912, 1034, 1035], "narrai": 596, "narrow": [53, 138, 147, 308, 310, 380, 847, 848], "nartayxd": 1048, "nasa": [103, 350, 351, 372], "nasdaq": 52, "naser": 1044, "nasir": 1042, "nass": 1049, "nastegiano": 1048, "nat": [609, 610, 707, 758, 760, 1048], "natalia": 1053, "natasha": 1044, "natchiappan": [1047, 1048], "nate": [1040, 1041, 1047], "nath": [1042, 1053], "nathan": [536, 1042, 1046, 1049, 1052, 1053], "nathaniel": [1041, 1042, 1044], "nathansquan": 1048, "nati": 1049, "nation": [51, 112, 301, 370, 854], "nativ": [44, 150, 154, 174, 180, 262, 363, 370, 389, 401, 414, 497, 562, 563, 839, 840, 1000, 1004, 1005, 1023, 1044, 1046], "native_result": 144, "natl": [692, 696, 1001], "natur": [44, 65, 68, 141, 147, 176, 185, 186, 190, 196, 210, 211, 227, 228, 234, 247, 253, 259, 277, 287, 350, 375, 377, 389, 412, 414, 415, 418, 444, 450, 457, 552, 592, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 630, 695, 707, 744, 758, 760, 849, 850, 851, 853, 855, 857, 858, 859, 886, 949, 1000, 1001, 1003, 1004, 1007, 1009, 1014, 1018, 1023, 1034, 1042], "naul": [1039, 1040], "nav": 52, "navarret": [1042, 1043, 1044], "navarro": 1049, "navi": [70, 103, 111, 125, 129, 130, 154, 192, 213, 221, 233, 254, 255, 256, 259, 275, 277, 293, 300, 330], "navig": [383, 1036], "navin": 903, "navistar": 52, "navkal": 1042, "navractil": 1004, "navratil2007": 1004, "nawazish": [1049, 1050], "naziya": 1052, "nb": [48, 128, 153, 358, 844, 1006], "nbclaim": 228, "nber": 50, "nbr": [855, 1007], "nbrown": [1052, 1053], "nbrs_": [691, 692], "nbsp": [147, 200], "nbviewer": [52, 64, 104, 105, 140, 142, 151, 152, 155, 158, 162, 174, 185, 186, 187, 194, 238, 239, 240, 244, 248, 249, 250, 251, 258, 262, 266, 268, 269, 275, 280, 282, 306, 314, 318, 319, 321, 322, 324, 330, 356, 357], "nbyte": [87, 241], "nca": [231, 296, 297, 298, 856, 1007], "nca_pip": 1007, "ncall": 381, "ncanip": 856, "nclass": 263, "ncluster": 80, "ncol": [44, 45, 53, 67, 69, 71, 87, 91, 100, 121, 126, 131, 145, 186, 207, 210, 211, 212, 218, 228, 230, 231, 240, 247, 262, 264, 270, 271, 279, 281, 282, 288, 291, 304, 309, 310, 312, 313, 322, 345, 346, 351, 371], "ncorrect": 268, "ncsu": [165, 372], "ncv": [451, 453], "nd": [1047, 1051], "ndarrai": [87, 92, 210, 251, 266, 267, 268, 375, 376, 377, 381, 382, 403, 415, 418, 419, 422, 423, 425, 428, 429, 431, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 463, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 488, 489, 490, 491, 493, 494, 495, 496, 498, 501, 502, 503, 504, 505, 506, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 703, 704, 705, 718, 721, 724, 725, 726, 727, 730, 731, 741, 748, 749, 751, 754, 756, 757, 762, 763, 764, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 788, 792, 793, 794, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 930, 931, 932, 933, 938, 939, 948, 950, 951, 952, 953, 958, 965, 967, 968, 972, 975, 976, 978, 979, 980, 981, 984, 989, 990, 992, 1004, 1019, 1037, 1041, 1044, 1045, 1048, 1049, 1050, 1051], "ndata": 274, "ndataset": [225, 310], "ndbscan": 99, "ndcg": [729, 759, 1004, 1041], "ndcg_score": [2, 729, 1004, 1041, 1044, 1049, 1050], "ndenumer": 222, "ndepend": 186, "ndim": [649, 650, 655, 656, 663, 664, 665, 666, 684, 687, 933, 934], "ndimag": [54, 81, 82, 88, 306], "ndingwal": 1041, "ndirangu": [1044, 1048], "ne": [1004, 1007], "neal": [1000, 1047], "near_uniqu": 315, "nearbi": [407, 1007], "nearer": [2, 851, 859, 1007], "nearest": [2, 34, 52, 54, 68, 69, 75, 76, 84, 85, 88, 92, 95, 100, 110, 114, 121, 124, 151, 173, 181, 194, 202, 222, 226, 232, 235, 246, 247, 261, 292, 294, 297, 298, 305, 306, 313, 339, 344, 348, 367, 372, 384, 387, 389, 407, 413, 414, 418, 421, 431, 444, 446, 448, 450, 452, 457, 461, 462, 497, 503, 505, 609, 610, 630, 631, 633, 634, 638, 691, 692, 694, 695, 699, 795, 796, 803, 833, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 867, 868, 872, 887, 977, 1001, 1010, 1019, 1025, 1026, 1030, 1034, 1036, 1037, 1038, 1039, 1041, 1043, 1044, 1046], "nearest_neighbor": [80, 452, 694], "nearest_neighbor_algorithm": [849, 857, 858], "nearest_neighbors_algorithm": [850, 855], "nearestcentroid": [2, 299, 350, 1005, 1007, 1034, 1038, 1041, 1046, 1049, 1053], "nearestneighbor": [2, 288, 321, 393, 407, 418, 444, 446, 448, 461, 691, 692, 696, 849, 850, 851, 853, 857, 858, 859, 1007, 1034, 1038, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "nearli": [38, 63, 271, 370, 389, 767, 1004, 1007, 1016], "neat": 1034, "necess": [1001, 1007], "necessari": [47, 54, 139, 196, 210, 215, 253, 262, 268, 269, 275, 290, 326, 343, 362, 370, 373, 374, 375, 376, 378, 379, 383, 387, 407, 409, 414, 452, 462, 488, 489, 491, 493, 494, 495, 496, 498, 535, 647, 648, 649, 655, 659, 660, 663, 664, 665, 666, 667, 668, 674, 676, 678, 679, 694, 698, 798, 870, 879, 890, 894, 900, 993, 996, 1000, 1003, 1006, 1014, 1020, 1034, 1042], "necessarili": [44, 68, 105, 124, 185, 210, 218, 228, 242, 243, 254, 275, 310, 350, 351, 369, 401, 403, 405, 407, 414, 630, 855, 857, 858, 859, 998, 1001, 1003, 1004], "need": [0, 31, 44, 49, 52, 69, 81, 87, 89, 91, 114, 123, 133, 141, 144, 146, 147, 148, 150, 155, 165, 169, 174, 180, 181, 185, 198, 212, 227, 228, 231, 237, 240, 242, 244, 247, 248, 253, 254, 258, 259, 262, 266, 268, 270, 271, 273, 285, 287, 288, 290, 313, 317, 324, 331, 339, 350, 351, 356, 358, 362, 363, 364, 369, 370, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 388, 389, 390, 392, 393, 398, 401, 403, 404, 405, 406, 407, 408, 410, 411, 412, 414, 415, 416, 417, 423, 437, 441, 445, 449, 464, 465, 467, 504, 542, 552, 573, 584, 585, 590, 591, 592, 593, 606, 630, 638, 641, 642, 643, 645, 652, 669, 671, 674, 679, 682, 695, 714, 723, 724, 725, 726, 727, 784, 788, 800, 801, 803, 806, 807, 817, 818, 819, 828, 836, 839, 847, 848, 864, 867, 870, 874, 879, 880, 884, 902, 909, 912, 924, 944, 960, 993, 994, 996, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1014, 1015, 1017, 1018, 1019, 1020, 1024, 1028, 1034, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "needl": [165, 372], "needs_proba": [1043, 1051], "needs_threshold": 1051, "neeraj": 1041, "neg": [2, 43, 44, 46, 62, 94, 108, 110, 117, 141, 146, 147, 152, 175, 182, 184, 185, 191, 201, 207, 208, 210, 228, 257, 258, 262, 265, 268, 271, 275, 277, 278, 282, 288, 308, 312, 321, 325, 350, 381, 389, 390, 407, 411, 414, 415, 416, 418, 419, 430, 440, 444, 452, 465, 469, 482, 483, 484, 488, 532, 534, 536, 537, 538, 539, 541, 543, 545, 548, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 571, 590, 593, 594, 597, 598, 600, 601, 602, 604, 606, 607, 608, 609, 610, 611, 614, 638, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 664, 665, 666, 667, 668, 670, 672, 673, 675, 676, 680, 681, 682, 683, 690, 701, 702, 707, 708, 715, 716, 718, 719, 721, 722, 724, 725, 726, 727, 730, 732, 733, 734, 738, 741, 744, 746, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 761, 762, 785, 786, 787, 788, 790, 793, 794, 796, 800, 801, 809, 826, 828, 833, 840, 841, 850, 853, 858, 865, 874, 883, 885, 886, 891, 895, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 934, 949, 951, 1002, 1004, 1005, 1007, 1008, 1009, 1010, 1018, 1019, 1025, 1029, 1030, 1034, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1053], "neg_": [809, 826, 1040], "neg_brier_scor": [1004, 1044], "neg_label": [262, 282, 874, 891], "neg_log_loss": [65, 262, 1004], "neg_lr": 271, "neg_lr_bas": 271, "neg_lr_base_std": 271, "neg_max_error": [1004, 1053], "neg_mean_absolute_error": [44, 155, 212, 1004], "neg_mean_absolute_percentage_error": [53, 144, 1004, 1012], "neg_mean_gamma_devi": 1004, "neg_mean_pinball_loss_05p_scor": 147, "neg_mean_pinball_loss_95p_scor": 147, "neg_mean_poisson_devi": 1004, "neg_mean_squared_error": [180, 181, 212, 243, 283, 324, 830, 1004, 1012, 1040], "neg_mean_squared_log_error": 1004, "neg_median_absolute_error": 1004, "neg_root_mean_squared_error": [44, 150, 314, 1004], "neg_root_mean_squared_log_error": 1004, "neg_root_mean_squared_log_error_scor": 1051, "negat": [389, 809, 826, 1004], "negate_scor": [243, 809, 826], "negative_class": 715, "negative_likelihood_ratio": [271, 715], "negative_linestyl": 237, "negative_loglik": 110, "negative_mahal_dist": 469, "negative_outlier_factor": 853, "negative_outlier_factor_": [247, 295, 853, 1010], "neglig": [185, 1007, 1037, 1051], "neigh": [784, 849, 850, 851, 853, 855, 857, 858, 859], "neigh_dist": [849, 850, 851, 853, 855, 857, 858, 859], "neigh_ind": [849, 850, 851, 853, 855, 857, 858, 859], "neighbor": [2, 52, 68, 75, 80, 82, 94, 100, 150, 151, 153, 156, 180, 181, 194, 231, 232, 234, 235, 237, 246, 247, 261, 292, 293, 294, 295, 297, 298, 299, 301, 305, 319, 321, 322, 350, 367, 372, 384, 387, 389, 393, 407, 413, 414, 415, 418, 421, 431, 441, 444, 445, 446, 448, 450, 452, 457, 458, 461, 463, 497, 503, 505, 564, 571, 604, 609, 610, 630, 631, 634, 691, 692, 693, 694, 695, 696, 698, 699, 784, 803, 833, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 867, 868, 887, 903, 911, 977, 1005, 1010, 1025, 1026, 1029, 1030, 1034, 1036, 1037, 1038, 1039, 1040, 1041], "neighbor_feat_idx": 630, "neighborhood": [2, 89, 114, 129, 182, 230, 288, 289, 290, 291, 299, 300, 372, 389, 407, 412, 418, 444, 450, 457, 503, 505, 516, 542, 550, 631, 634, 699, 833, 849, 850, 853, 855, 856, 857, 858, 859, 861, 867, 868, 887, 1001, 1010, 1025, 1026, 1030, 1043], "neighborhoodcomponentanalysi": 297, "neighborhoodcomponentsanalysi": [2, 231, 296, 297, 298, 1007, 1043, 1048, 1052], "neighbors_algorithm": [691, 692], "neighborsbas": [1046, 1049], "neighborsclassifi": [855, 857, 858, 859, 1034], "neighborsregressor": 1034, "neighbour": [446, 462, 695, 1009], "neighbourhood": [856, 1007], "neighbourhood_components_analysi": 856, "neil": 1046, "neill": 1046, "neither": [181, 185, 317, 350, 358, 387, 405, 437, 596, 631, 937, 1007, 1020], "nelder": 1000, "nell": [0, 397, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1046], "nelson": [0, 1040, 1041, 1046, 1052], "nemour": 52, "neo": 1042, "nep": 1044, "neptun": 1023, "neq": [407, 1004, 1006, 1014], "ness": 181, "nest": [126, 135, 182, 200, 244, 260, 262, 263, 285, 324, 363, 381, 389, 393, 407, 411, 417, 421, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 456, 462, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 505, 520, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 583, 584, 585, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 691, 692, 693, 694, 695, 800, 801, 802, 803, 806, 807, 808, 817, 825, 829, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 993, 1004, 1007, 1025, 1034, 1035, 1038, 1040, 1041, 1042, 1048], "nested_lin": 273, "nested_scor": 273, "nesterov": [304, 864, 865, 1008, 1050, 1051], "nesterovs_momentum": [304, 864, 865], "nestor": 1049, "net": [2, 26, 68, 182, 191, 196, 197, 200, 202, 205, 221, 244, 281, 381, 411, 471, 472, 478, 502, 525, 558, 559, 560, 561, 565, 566, 567, 649, 650, 655, 660, 661, 662, 663, 664, 665, 666, 671, 679, 681, 684, 685, 687, 863, 915, 916, 917, 918, 993, 1004, 1009, 1018, 1025, 1026, 1028, 1030, 1034, 1039, 1043, 1044, 1046], "netbsd": 1034, "neto": [592, 733, 1052], "nettei": 1047, "network": [35, 46, 247, 305, 326, 362, 363, 364, 369, 370, 379, 389, 390, 401, 407, 412, 414, 419, 497, 534, 536, 568, 569, 699, 744, 864, 865, 1000, 1002, 1004, 1018, 1020, 1023, 1026, 1029, 1030, 1034, 1048, 1052], "networkx": [56, 384], "neural": [35, 45, 46, 68, 268, 305, 389, 401, 411, 412, 414, 419, 534, 536, 539, 541, 548, 568, 569, 642, 648, 699, 744, 800, 856, 863, 864, 865, 873, 996, 1000, 1001, 1002, 1004, 1007, 1010, 1014, 1018, 1020, 1023, 1026, 1028, 1029, 1030, 1034, 1046], "neural_network": [2, 68, 182, 186, 248, 302, 303, 304, 305, 306, 364, 387, 863, 864, 865, 1005, 1008, 1025, 1036, 1051], "neuro": 1023, "neurodebian": 0, "neuroimag": [1022, 1028], "neuron": [864, 865, 1002, 1008], "neutral": 719, "nevalu": 155, "never": [141, 245, 325, 358, 375, 377, 384, 387, 401, 406, 407, 408, 410, 411, 450, 457, 524, 556, 557, 558, 565, 867, 868, 992, 996, 1014, 1044, 1047], "nevertheless": [44, 188, 414], "new": [2, 44, 47, 48, 50, 84, 90, 92, 94, 103, 104, 127, 128, 135, 137, 139, 140, 141, 145, 147, 150, 154, 155, 162, 165, 169, 175, 181, 187, 188, 210, 216, 224, 237, 244, 251, 262, 267, 270, 275, 287, 292, 294, 314, 318, 321, 324, 325, 326, 329, 332, 338, 343, 358, 363, 364, 369, 370, 372, 373, 374, 377, 378, 379, 381, 383, 384, 388, 389, 390, 393, 401, 405, 406, 407, 408, 411, 412, 413, 414, 415, 416, 417, 432, 437, 438, 440, 442, 443, 445, 447, 448, 449, 452, 462, 463, 464, 472, 482, 483, 484, 505, 509, 510, 535, 542, 545, 556, 557, 558, 559, 564, 565, 566, 567, 583, 604, 633, 634, 638, 643, 644, 645, 648, 649, 655, 691, 692, 693, 700, 701, 703, 704, 705, 791, 800, 801, 802, 803, 806, 807, 809, 817, 825, 826, 837, 853, 854, 876, 877, 882, 883, 884, 886, 887, 888, 895, 896, 904, 922, 931, 936, 973, 978, 993, 994, 996, 1000, 1004, 1005, 1007, 1008, 1009, 1010, 1014, 1016, 1017, 1018, 1019, 1024, 1028, 1030, 1032, 1036, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "new_data": [292, 377], "new_valu": [568, 569, 570, 571], "newaxi": [52, 54, 58, 62, 78, 114, 130, 136, 170, 194, 201, 211, 212, 213, 215, 216, 227, 240, 242, 283, 293, 300, 356, 404, 537, 1000], "newei": 1042, "newer": [169, 374, 393, 412], "newgroups20": 225, "newli": [373, 377, 379, 388, 414, 463, 1011, 1040, 1041, 1049], "newsgroup": [2, 47, 55, 58, 241, 269, 332, 351, 352, 368, 404, 415, 488, 489, 1030], "newsgroups_test": 370, "newsgroups_train": [370, 488], "newsgroups_vector": 489, "newsl": [888, 1014], "newslett": 369, "newswir": 370, "newton": [210, 228, 306, 613, 651, 661, 662, 672, 683, 864, 865, 1000, 1038, 1039, 1041, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "newton_cg": 1044, "next": [47, 63, 94, 112, 143, 144, 148, 158, 176, 184, 188, 204, 210, 238, 244, 246, 250, 251, 255, 263, 274, 287, 313, 314, 315, 319, 329, 350, 354, 357, 358, 373, 375, 377, 379, 395, 401, 404, 407, 408, 411, 414, 509, 510, 613, 637, 695, 701, 703, 705, 784, 800, 801, 833, 969, 993, 997, 1003, 1004, 1014, 1028, 1031, 1034, 1047, 1048], "nezar": 1044, "nff": 702, "nfit": 329, "nfkd": [590, 591, 593, 1044], "nfor": 245, "nfrom": 174, "nft": 702, "ng": [407, 412, 694, 853, 1008, 1010, 1045], "ngiam": 1008, "ngo": 1046, "ngram_rang": [269, 332, 415, 590, 591, 593], "ngram_vector": 415, "ngroup": 263, "ngshya": 1045, "nguyen": [1044, 1045, 1048, 1049], "nguy\u1ec5n": 1049, "ni": [1040, 1045], "nic": 1047, "nice": [44, 101, 211, 244, 308, 362, 412], "nicer": 634, "nichol": 1038, "nichola": [1042, 1043, 1045], "nicholson": [1040, 1041, 1042], "nick": [165, 372, 1034, 1040, 1041, 1042, 1043], "nicki": 1048, "nickledav": 1040, "nicknam": 370, "nico": [1040, 1047], "nicol": 1041, "nicola": [0, 165, 396, 661, 1000, 1017, 1034, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "nicolashug": 1043, "nicolasservel": 1045, "nicolau": 1042, "nicula": [0, 121, 397, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043], "niculescu": [63, 65, 405, 437, 439], "nidhin": 1044, "niederb\u00fchl": 1042, "niederhut": [1042, 1044], "nielsen": [746, 1042], "nielsenmarkus11": [1041, 1042], "nigam": [842, 1006], "nigel": 1047, "night": 53, "nightli": [0, 363, 378, 379], "nightwalkx": 1050, "nihal": 1049, "nihar": 1042, "niket": 1048, "nikhil": 1048, "nikita": [1041, 1042, 1044, 1047, 1048, 1049, 1053], "nikla": [1044, 1045], "nikolai": [1037, 1038, 1039, 1040, 1042, 1043, 1048, 1050], "nil": 1046, "nilearn": 1023, "nilesh": 1042, "nilotp": [638, 640], "nima": 1049, "nima10khodaveisi": 1049, "ninertia": 98, "ning": 1053, "ningchi": 1040, "ninh": 190, "ninja": [373, 1028], "nip": [128, 372, 516, 542, 567, 644, 1004], "nipal": [410, 483, 484], "nipy_spectr": [52, 75, 81, 82, 85, 86, 94, 95], "nirvan": [1042, 1046], "nishan": 1044, "nishihara": 1046, "nishu": 1050, "nist": [372, 1004], "nistir": 372, "nit": 375, "nithish": [1052, 1053], "nitinramvelraj": 1049, "nitish": 1041, "nitya": 1044, "niuk": 1050, "niyogi": 1001, "nizam": 1042, "nizhibitski": 1035, "nk": 699, "nkish": 1045, "nkmean": 80, "nl": [53, 381], "nl1_ratio": 202, "nlasso": 196, "nlathia": 1040, "nlearn": 304, "nlog": 175, "nlogn": 695, "nlp": [370, 412, 415, 842, 846, 1002, 1028], "nls_max_it": 1039, "nltk": [415, 1022, 1023], "nm": 362, "nmcd": 112, "nmd": 233, "nmean": 125, "nmf": [2, 11, 55, 105, 381, 415, 536, 539, 545, 548, 1029, 1030, 1034, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1052], "nmf_estim": 121, "nmi": [73, 407, 720, 739, 740, 760], "nmixtur": 80, "nmle": 112, "nmse": [45, 283], "nmslib": 288, "nmslib_": 288, "nmslibtransform": 288, "nn": [246, 415, 698], "nn_candid": 280, "nn_compon": [241, 242], "nn_sampl": [241, 280], "nndsvd": [412, 539, 541, 548, 1043, 1046], "nndsvda": [55, 412, 539, 541, 548, 1043, 1046], "nndsvdar": [412, 539, 541, 548, 1043], "nneq": 702, "nnl": [206, 660], "nnlnr": [1049, 1050], "nnmf": [415, 1029, 1030, 1034], "nntp": [350, 370], "nnz": [197, 351, 370, 702], "no_chang": 904, "no_interact": [562, 563, 1049], "no_mathjax": 375, "no_structur": [80, 96], "no_valid": [926, 992], "no_weight": 223, "no_weights_handl": 223, "noa": [1045, 1051], "noah": 1000, "noam": 1053, "noc": 52, "noced": 661, "nodar": 1047, "node": [2, 52, 77, 144, 148, 196, 317, 323, 324, 354, 357, 383, 384, 407, 409, 412, 414, 441, 442, 445, 463, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 653, 657, 659, 685, 686, 695, 847, 848, 915, 916, 917, 918, 919, 921, 957, 1007, 1009, 1010, 1011, 1020, 1037, 1038, 1039, 1040, 1041, 1043, 1046, 1047, 1048, 1049, 1051, 1053], "node_count": [317, 354, 357, 915, 916, 917, 918], "node_depth": 357, "node_id": [357, 919, 921], "node_idx": 357, "node_ind": 357, "node_index": 357, "node_position_model": 52, "noel": [0, 397, 1034, 1035, 1036, 1037, 1038, 1046], "noelano": 1046, "nof": 151, "nogil": [326, 376, 1053], "noinfo": 247, "noir": 314, "nois": [45, 50, 54, 59, 60, 65, 68, 70, 76, 80, 83, 86, 88, 89, 95, 96, 101, 108, 117, 121, 122, 124, 126, 128, 136, 138, 147, 152, 153, 168, 169, 170, 174, 178, 182, 192, 194, 195, 196, 200, 201, 206, 208, 209, 212, 213, 214, 215, 227, 233, 235, 237, 239, 240, 243, 268, 276, 281, 283, 300, 303, 304, 310, 315, 318, 324, 345, 356, 358, 371, 377, 380, 405, 407, 412, 414, 416, 417, 418, 444, 446, 452, 512, 514, 515, 516, 517, 518, 519, 523, 525, 526, 531, 533, 535, 542, 608, 609, 610, 611, 614, 616, 617, 618, 619, 620, 624, 625, 627, 628, 647, 648, 652, 653, 654, 656, 657, 658, 659, 666, 667, 668, 674, 682, 688, 689, 695, 884, 896, 902, 925, 997, 999, 1000, 1001, 1004, 1007, 1017, 1025, 1035, 1040, 1045, 1047, 1048], "noise_coef": 88, "noise_kernel": 174, "noise_level": [169, 174, 175, 615, 628], "noise_level_bound": [174, 175, 628], "noise_level_grid": 175, "noise_std": 176, "noise_vari": [198, 533, 659, 1000, 1048], "noise_variance_": [121, 198, 533, 535, 542, 659, 1041, 1048], "noise_variance_init": 533, "noiseless": [124, 1002], "noisi": [45, 70, 83, 89, 96, 122, 135, 161, 169, 175, 196, 209, 212, 233, 240, 259, 269, 275, 277, 278, 281, 313, 356, 358, 407, 415, 417, 418, 444, 446, 450, 522, 525, 951, 999, 1001, 1007, 1019], "noisier": 1001, "noisili": 186, "noisy_circl": [80, 96], "noisy_moon": [80, 96], "noiz": 116, "nolan": 1051, "noll": [210, 228], "nomenclatur": [1000, 1040], "nomin": [186, 369, 389, 390, 414, 415, 583, 584, 719, 1014, 1024], "non": [0, 2, 26, 43, 45, 46, 49, 50, 53, 54, 62, 63, 65, 70, 71, 73, 83, 91, 96, 104, 108, 112, 114, 122, 123, 124, 126, 137, 144, 152, 153, 155, 161, 162, 164, 173, 175, 181, 182, 184, 185, 186, 187, 188, 191, 192, 196, 197, 199, 201, 204, 205, 207, 208, 209, 211, 212, 216, 224, 225, 226, 228, 233, 234, 238, 239, 240, 241, 243, 247, 253, 255, 259, 260, 261, 262, 263, 268, 277, 285, 288, 292, 294, 306, 308, 310, 312, 313, 318, 319, 320, 321, 323, 324, 332, 334, 336, 341, 342, 343, 346, 347, 350, 351, 352, 357, 358, 362, 363, 367, 370, 371, 375, 376, 377, 379, 380, 381, 383, 384, 387, 389, 390, 401, 405, 407, 408, 411, 413, 414, 415, 416, 417, 419, 437, 441, 445, 446, 450, 452, 456, 462, 463, 464, 465, 467, 468, 488, 497, 498, 504, 505, 509, 527, 533, 536, 537, 539, 541, 545, 548, 550, 552, 553, 554, 558, 559, 560, 561, 562, 563, 565, 566, 567, 573, 590, 591, 593, 594, 597, 598, 599, 600, 601, 602, 605, 606, 607, 608, 609, 610, 611, 613, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 633, 634, 638, 641, 646, 653, 655, 660, 661, 662, 663, 667, 668, 669, 670, 671, 672, 675, 679, 680, 681, 688, 689, 690, 691, 692, 693, 694, 695, 697, 701, 702, 705, 709, 710, 715, 718, 720, 722, 723, 729, 730, 731, 738, 740, 742, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 758, 759, 761, 762, 781, 785, 788, 791, 792, 793, 794, 797, 800, 801, 803, 804, 808, 810, 811, 812, 813, 815, 821, 829, 833, 836, 855, 857, 858, 859, 862, 867, 868, 870, 871, 872, 875, 879, 880, 881, 882, 883, 884, 886, 887, 894, 895, 896, 897, 898, 900, 905, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 932, 933, 934, 949, 951, 955, 958, 966, 993, 994, 995, 996, 997, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1015, 1016, 1017, 1018, 1019, 1020, 1025, 1029, 1030, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "non_determinist": [377, 926, 1048], "non_neg": [584, 1041], "non_negative_factor": [2, 1043, 1045, 1046, 1047, 1051], "non_nest": 273, "non_nested_scor": 273, "non_nested_scores_lin": 273, "non_noisy_label": 323, "non_outliers_mask": 308, "non_zero": [47, 52], "nonblasdotwarn": 1046, "none": [44, 48, 49, 50, 53, 56, 64, 67, 70, 75, 77, 78, 80, 86, 88, 89, 90, 96, 123, 126, 130, 139, 143, 144, 146, 149, 150, 165, 170, 176, 177, 188, 192, 210, 211, 218, 221, 228, 230, 243, 244, 245, 247, 261, 263, 268, 269, 280, 293, 295, 299, 312, 315, 319, 320, 329, 332, 337, 339, 340, 343, 344, 345, 350, 351, 370, 371, 372, 375, 377, 382, 384, 389, 398, 401, 407, 411, 414, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 504, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 583, 584, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 703, 704, 705, 706, 710, 711, 712, 714, 715, 716, 717, 719, 721, 723, 724, 725, 726, 727, 729, 730, 731, 732, 733, 735, 737, 738, 741, 742, 743, 744, 745, 746, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 761, 762, 763, 764, 766, 767, 769, 770, 771, 772, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 790, 791, 792, 793, 794, 796, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 896, 899, 900, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 920, 921, 922, 926, 930, 931, 932, 933, 934, 936, 937, 938, 939, 942, 944, 945, 946, 950, 951, 954, 955, 957, 958, 962, 963, 966, 969, 971, 972, 974, 977, 978, 984, 987, 988, 990, 992, 993, 1000, 1004, 1014, 1017, 1020, 1030, 1034, 1035, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "nonecheck": 376, "nonetheless": [389, 1004], "nonexist": 635, "nonflavanoid": 372, "nonlinear": [283, 320, 647, 691, 692, 696, 699, 873, 1000, 1001, 1009, 1014], "nonmetr": [693, 697, 1001], "nonneg": [407, 412, 453, 539, 541, 548, 884], "nonner": 1045, "nono": 395, "nonoclusteringclusteringkmeanskmeansyesyesspectralclusteringspectr": 395, "nonoisomapisomapspectralembeddingspectr": 395, "nonojustlookingjust": 395, "nonolassolassoelasticnetelasticnetyesyesridgeregressionridgeregressionsvr": 395, "nonolinearsvclinear": 395, "nonononoyesyesmeanshiftmeanshiftvbgmmvbgmmyesyesminibatchkmeansminibatch": 395, "nonopredict": 395, "nonopredictingstructurepredict": 395, "nonosvcsvcensembleclassifiersensembl": 395, "nonosvr": 395, "nonotoughlucktough": 395, "nonoverlap": 372, "nonparametr": [416, 417, 609, 610], "nonzero": [56, 58, 130, 209, 241, 272, 352, 404, 418, 444, 524, 525, 532, 538, 543, 549, 590, 593, 688, 689, 702, 849, 850, 853, 855, 857, 858, 1004], "nonzero_coef": 1000, "nopenguinsland": 1053, "noptic": 99, "noptimum": 175, "noqa": [101, 127, 147, 165, 180, 181, 186, 230, 232, 279, 280, 319, 350, 379, 581, 582, 630, 806, 807, 993, 1043], "nor": [147, 271, 350, 358, 362, 380, 387, 405, 415, 437, 446, 596, 937, 1008, 1020, 1045], "norbert": [0, 365, 1036, 1046, 1047, 1048, 1053], "nordbi": 1051, "nore\u00f1a": 1047, "norm": [2, 52, 54, 55, 56, 67, 71, 76, 88, 124, 172, 175, 192, 196, 197, 202, 233, 253, 254, 255, 257, 259, 265, 269, 293, 308, 339, 351, 381, 384, 389, 407, 415, 416, 442, 443, 447, 459, 460, 464, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 489, 532, 535, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 591, 592, 593, 599, 646, 649, 650, 655, 656, 660, 661, 662, 663, 664, 665, 666, 667, 675, 677, 679, 681, 684, 687, 688, 689, 693, 695, 696, 697, 773, 844, 879, 894, 907, 909, 912, 985, 986, 997, 1000, 1002, 1004, 1014, 1018, 1037, 1039, 1041, 1045], "norm1": 464, "norm2": 464, "norm_diag": 528, "norm_laplacian": 698, "norm_ord": [599, 1041], "norm_y_weight": 1046, "normal": [2, 26, 37, 45, 50, 52, 55, 56, 58, 59, 64, 66, 71, 73, 76, 80, 81, 91, 95, 96, 100, 106, 108, 110, 111, 112, 116, 117, 122, 135, 136, 138, 141, 146, 147, 150, 151, 152, 160, 172, 175, 176, 181, 182, 184, 185, 191, 192, 193, 194, 195, 196, 201, 204, 206, 208, 212, 213, 214, 216, 224, 228, 233, 241, 247, 253, 258, 259, 261, 262, 265, 268, 274, 293, 294, 297, 307, 309, 313, 318, 321, 324, 325, 331, 339, 351, 352, 358, 367, 370, 371, 372, 375, 380, 384, 388, 389, 403, 404, 405, 407, 408, 410, 413, 414, 415, 419, 440, 449, 451, 452, 453, 462, 464, 465, 475, 482, 483, 484, 489, 497, 513, 516, 520, 527, 528, 534, 537, 542, 543, 545, 549, 550, 553, 554, 555, 558, 559, 560, 561, 563, 564, 565, 566, 567, 581, 582, 584, 590, 591, 592, 593, 614, 628, 630, 642, 661, 662, 672, 675, 679, 683, 690, 694, 698, 700, 706, 707, 709, 721, 727, 729, 737, 739, 744, 748, 752, 753, 755, 758, 759, 760, 764, 773, 797, 798, 799, 806, 807, 833, 835, 844, 846, 852, 853, 856, 867, 868, 871, 872, 875, 877, 880, 881, 882, 883, 884, 885, 887, 892, 893, 895, 896, 897, 898, 902, 903, 915, 916, 917, 918, 950, 951, 955, 979, 980, 985, 986, 996, 998, 1000, 1001, 1002, 1003, 1006, 1010, 1015, 1017, 1019, 1020, 1025, 1030, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "normalis": [185, 614, 791], "normalization_": [642, 996], "normalize_compon": [1042, 1044], "normalize_i": [174, 178, 417, 614, 1048], "normalized_discounted_cumulative_gain": 759, "normalized_mutual_info_scor": [2, 73, 407, 739, 758, 798, 1004, 1042, 1048], "normalized_stress": [230, 693, 697, 1001, 1049], "normalized_weight": 194, "norms_squar": 689, "north": [372, 407], "northern": 314, "northrop": 52, "northwestern": 661, "norvan": 1044, "nose": [372, 1037, 1041], "nosetest": 1036, "not_memb": 185, "notabl": [203, 244, 308, 369, 389, 406, 497, 731, 880, 1001, 1003, 1007, 1038, 1041, 1048], "notarstefano": [1042, 1043], "notat": [151, 389, 408, 412, 415, 592, 715, 1000, 1004, 1043, 1050], "notch": 1028, "note": [0, 31, 44, 45, 47, 48, 51, 52, 54, 58, 59, 64, 65, 69, 73, 87, 100, 104, 105, 112, 114, 116, 117, 119, 124, 138, 139, 141, 143, 147, 148, 152, 165, 167, 169, 176, 180, 184, 185, 186, 187, 188, 190, 198, 200, 204, 207, 210, 211, 212, 214, 218, 224, 226, 228, 230, 231, 232, 234, 237, 238, 240, 242, 243, 244, 245, 247, 254, 262, 263, 264, 268, 271, 274, 276, 277, 282, 287, 288, 290, 294, 295, 304, 308, 309, 312, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 329, 331, 333, 339, 343, 350, 357, 362, 363, 369, 372, 373, 375, 376, 377, 379, 381, 382, 387, 388, 389, 393, 398, 401, 402, 405, 407, 409, 410, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 430, 432, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 459, 460, 461, 462, 464, 465, 468, 469, 472, 473, 475, 476, 478, 479, 480, 481, 482, 483, 484, 487, 490, 497, 499, 510, 516, 520, 528, 531, 534, 535, 537, 539, 540, 541, 542, 544, 545, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 583, 584, 585, 591, 592, 594, 595, 596, 599, 601, 602, 604, 605, 606, 608, 609, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 632, 633, 635, 636, 638, 639, 641, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 698, 699, 702, 703, 710, 711, 716, 718, 723, 724, 725, 726, 727, 731, 732, 733, 735, 737, 741, 744, 749, 757, 758, 761, 766, 767, 771, 773, 777, 781, 785, 786, 787, 788, 790, 791, 792, 795, 796, 797, 799, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 817, 818, 819, 820, 821, 822, 823, 824, 825, 828, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 905, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 920, 923, 924, 929, 939, 940, 944, 950, 951, 963, 966, 978, 987, 993, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1010, 1011, 1012, 1014, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1027, 1030, 1032, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052], "notebook": [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 184, 185, 186, 187, 188, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 376, 377, 381, 408, 468, 905, 1020, 1022, 1023, 1024, 1045, 1048], "notes_neighbor": 1034, "notfittederror": [2, 133, 389, 856, 987, 1038, 1040, 1043, 1044, 1050, 1051], "noth": [58, 103, 325, 350, 351, 380, 543, 717, 870, 879, 934, 1014], "nothman": [0, 390, 396, 415, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1051, 1052, 1053], "notic": [47, 53, 63, 64, 71, 87, 91, 112, 138, 140, 141, 147, 150, 164, 192, 196, 237, 250, 265, 266, 268, 269, 271, 277, 278, 288, 313, 343, 350, 351, 352, 358, 377, 380, 390, 406, 411, 414, 497, 542, 564, 993, 1003, 1004, 1010, 1031, 1047], "notif": [375, 379], "notifi": [2, 573, 574, 575, 1032, 1044, 1053], "notimplementederror": [554, 555, 894, 1041, 1051], "notin": 407, "notion": [277, 343, 351, 364, 387, 407, 412, 414, 1000, 1004], "notmatthancock": [1042, 1044], "noto": 1047, "notplancha": [1052, 1053], "noun": 389, "nouri": [362, 1035, 1037], "novak": 1037, "novarti": 52, "novaya": [1044, 1047], "novel": [224, 294, 338, 358, 405, 993], "novelti": [182, 224, 237, 247, 289, 295, 338, 853, 1025, 1026, 1029, 1030, 1034, 1042], "novemb": [165, 210, 228, 372, 379, 1039, 1040, 1042], "novic": 1036, "now": [44, 45, 47, 53, 56, 59, 87, 91, 104, 117, 126, 135, 136, 140, 142, 143, 144, 147, 148, 155, 158, 165, 167, 169, 174, 175, 176, 181, 184, 185, 186, 187, 190, 192, 194, 197, 198, 200, 211, 212, 214, 234, 242, 244, 262, 264, 268, 271, 279, 280, 281, 282, 285, 291, 313, 318, 319, 321, 322, 323, 324, 325, 326, 330, 339, 350, 351, 352, 358, 362, 364, 370, 375, 376, 381, 387, 388, 389, 393, 404, 407, 411, 412, 414, 415, 419, 427, 494, 509, 510, 513, 537, 550, 581, 582, 584, 630, 633, 652, 656, 661, 666, 687, 729, 759, 800, 801, 806, 807, 839, 854, 866, 867, 978, 994, 1000, 1004, 1010, 1013, 1014, 1019, 1020, 1024, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "nowadai": 375, "nozawa": [1049, 1050], "np": [2, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 70, 71, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 88, 89, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 108, 110, 111, 112, 113, 114, 116, 117, 119, 122, 123, 124, 125, 128, 130, 131, 136, 137, 138, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 160, 161, 165, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 184, 185, 186, 187, 188, 192, 193, 194, 195, 196, 198, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 231, 232, 233, 235, 237, 240, 241, 242, 243, 244, 245, 246, 247, 249, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 287, 288, 292, 293, 294, 295, 297, 298, 299, 300, 301, 303, 306, 308, 309, 310, 311, 312, 313, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 355, 356, 357, 358, 362, 369, 370, 375, 377, 380, 381, 384, 387, 389, 398, 404, 407, 408, 411, 412, 413, 414, 415, 417, 420, 421, 422, 423, 424, 425, 428, 429, 430, 431, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 485, 494, 497, 498, 501, 505, 509, 510, 511, 515, 516, 517, 518, 519, 520, 521, 532, 533, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 558, 559, 560, 561, 562, 564, 565, 566, 567, 570, 571, 583, 584, 587, 588, 590, 591, 595, 596, 599, 603, 606, 608, 611, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 639, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 683, 684, 685, 686, 687, 690, 694, 695, 697, 698, 702, 705, 706, 709, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 726, 728, 729, 730, 732, 733, 734, 735, 737, 738, 739, 740, 741, 742, 743, 746, 747, 751, 756, 757, 758, 759, 766, 772, 776, 781, 784, 785, 786, 787, 789, 790, 791, 792, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 829, 830, 831, 833, 834, 835, 836, 839, 840, 842, 843, 844, 845, 846, 847, 848, 852, 853, 854, 855, 857, 858, 859, 863, 864, 871, 872, 874, 875, 880, 881, 882, 883, 884, 886, 887, 888, 895, 896, 899, 900, 901, 902, 903, 904, 907, 909, 910, 912, 913, 915, 916, 917, 918, 924, 929, 930, 931, 932, 933, 934, 936, 938, 939, 949, 950, 951, 957, 958, 965, 966, 968, 972, 974, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 989, 993, 994, 999, 1000, 1002, 1004, 1005, 1007, 1008, 1010, 1014, 1015, 1016, 1018, 1019, 1020, 1035, 1037, 1040, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "npach": [1049, 1050], "npo": 233, "npolynomi": 44, "nprior": 253, "npropag": 80, "nqy18": 415, "nreceiv": 277, "nrow": [44, 45, 67, 69, 71, 91, 100, 106, 121, 150, 178, 186, 210, 212, 218, 228, 230, 231, 234, 247, 262, 270, 271, 288, 310, 312, 313, 322, 329, 345, 346, 371], "nsampl": [377, 800, 801], "nswdemand": 150, "nswprice": 150, "nt": 56, "nt_uri": 56, "ntest": 297, "ntf": 702, "nth": [275, 710, 1004], "nthe": [186, 266, 357], "ntime": [51, 279], "nto": [216, 277], "ntol": 165, "ntrain": 84, "ntree": 44, "ntrue": [46, 328, 329], "ntt": 702, "ntu": [190, 369, 487, 509, 510, 661], "ntwo": 371, "nu": [2, 47, 49, 51, 178, 224, 237, 338, 362, 414, 417, 622, 680, 909, 910, 911, 1010, 1018, 1019, 1045, 1049], "nuanc": [203, 389], "nuc": 285, "nuclear": [165, 372], "nuclei": [165, 372], "nudge_dataset": 306, "nuff": 1041, "nugmanov": [1042, 1043], "nuisanc": 417, "nukariya": [1046, 1047], "null": [80, 104, 185, 186, 187, 262, 268, 274, 407, 411, 497, 651, 672, 683, 707, 734, 760, 798, 832, 1000, 1001, 1004, 1019, 1044], "null_count": 53, "nullabl": [630, 631, 632, 633, 1045, 1049], "nullformatt": [230, 232, 235, 288], "nullloc": 293, "num": [44, 52, 104, 165, 169, 174, 175, 176, 186, 187, 212, 275, 276, 321, 323, 324, 414, 497, 635], "num_col": 251, "num_cor": 381, "num_depend": 262, "num_featur": [1002, 1049], "num_linear_processor": 155, "num_missing_cel": 150, "num_pip": 251, "num_preprocess": 464, "num_proc": [239, 318], "num_sampl": [803, 817, 1049], "num_selector": 155, "num_sent": 103, "num_thread": 288, "num_tree_processor": 155, "num_trial": 273, "numba": [288, 1024], "number": [2, 44, 45, 47, 48, 50, 52, 53, 54, 58, 59, 63, 64, 65, 69, 70, 72, 74, 75, 77, 79, 80, 81, 82, 83, 84, 87, 88, 89, 91, 95, 96, 97, 101, 103, 104, 105, 106, 108, 114, 116, 117, 119, 121, 123, 125, 126, 128, 135, 136, 138, 141, 143, 145, 146, 147, 148, 151, 155, 157, 161, 162, 163, 165, 177, 178, 181, 182, 185, 186, 190, 196, 200, 209, 210, 211, 212, 217, 218, 224, 225, 226, 227, 228, 230, 237, 241, 245, 247, 248, 253, 254, 256, 258, 259, 261, 262, 263, 266, 267, 268, 269, 270, 273, 274, 275, 276, 277, 281, 285, 288, 290, 294, 295, 308, 310, 311, 314, 317, 318, 319, 320, 321, 322, 323, 325, 326, 332, 339, 344, 346, 351, 352, 354, 357, 358, 363, 364, 367, 369, 370, 371, 372, 373, 375, 378, 379, 381, 382, 383, 384, 387, 388, 389, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 430, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 574, 583, 584, 585, 586, 590, 591, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 609, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 704, 706, 707, 708, 710, 715, 716, 717, 719, 721, 723, 727, 731, 732, 733, 734, 737, 738, 741, 743, 755, 758, 777, 781, 784, 785, 786, 787, 788, 789, 790, 791, 795, 796, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 923, 933, 934, 937, 950, 951, 954, 955, 972, 974, 977, 978, 993, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1016, 1018, 1019, 1020, 1021, 1023, 1024, 1025, 1030, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "number_norm": 58, "numbernormalizingvector": 58, "numer": [2, 44, 53, 58, 100, 104, 108, 144, 155, 165, 174, 177, 186, 187, 200, 210, 228, 247, 249, 251, 275, 298, 314, 320, 324, 352, 369, 370, 372, 378, 380, 381, 387, 388, 389, 403, 407, 409, 414, 415, 416, 417, 419, 420, 440, 443, 447, 459, 471, 472, 475, 478, 489, 490, 491, 497, 501, 502, 503, 505, 506, 511, 532, 534, 536, 541, 542, 548, 562, 563, 568, 583, 592, 614, 620, 623, 630, 633, 635, 636, 649, 655, 657, 675, 690, 693, 697, 717, 781, 791, 797, 803, 806, 807, 809, 817, 826, 829, 830, 831, 834, 842, 843, 844, 845, 846, 864, 865, 870, 875, 880, 881, 888, 919, 920, 921, 933, 934, 950, 951, 993, 994, 1000, 1001, 1005, 1012, 1014, 1015, 1020, 1027, 1028, 1034, 1035, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "numeric_featur": [104, 321], "numeric_onli": 186, "numeric_preprocessor": 249, "numeric_transform": [104, 321], "numerical_column": [185, 187, 467], "numerical_columns_subset": 144, "numerical_featur": [186, 314], "numerical_pip": 187, "numerical_transform": 104, "numfocu": 0, "numpi": [2, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 70, 71, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 128, 130, 131, 136, 137, 138, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 160, 161, 165, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 184, 185, 186, 187, 188, 192, 193, 194, 195, 196, 198, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 231, 232, 233, 235, 237, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 287, 288, 292, 293, 294, 295, 297, 298, 299, 300, 301, 303, 306, 308, 309, 310, 311, 312, 313, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 355, 356, 357, 358, 362, 368, 369, 370, 373, 375, 376, 377, 378, 381, 383, 384, 387, 388, 389, 393, 398, 400, 401, 403, 404, 407, 408, 411, 412, 413, 414, 415, 420, 421, 422, 423, 424, 425, 428, 429, 430, 431, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 485, 490, 494, 495, 497, 504, 507, 509, 510, 522, 528, 532, 535, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 570, 571, 583, 584, 587, 588, 590, 591, 593, 603, 606, 621, 630, 631, 632, 633, 634, 635, 636, 646, 649, 650, 652, 655, 656, 660, 661, 662, 663, 664, 665, 666, 669, 670, 671, 673, 675, 679, 680, 681, 687, 690, 691, 694, 695, 696, 697, 698, 702, 705, 706, 709, 710, 712, 715, 717, 729, 730, 732, 733, 735, 737, 738, 741, 742, 757, 759, 776, 782, 784, 785, 786, 787, 790, 791, 792, 797, 799, 800, 801, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 830, 833, 834, 835, 836, 839, 840, 842, 843, 844, 845, 846, 847, 848, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 870, 871, 874, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 902, 903, 904, 907, 909, 910, 912, 913, 915, 929, 930, 931, 932, 936, 938, 948, 949, 950, 951, 955, 957, 958, 965, 966, 972, 974, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 989, 990, 993, 994, 999, 1000, 1002, 1004, 1005, 1007, 1010, 1014, 1016, 1019, 1020, 1022, 1024, 1034, 1037, 1038, 1040, 1041, 1042, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "numpydoc": [375, 389, 393, 400], "nune": 1035, "nuniformli": 151, "nuniqu": 314, "nurseit": 1051, "nusvc": [2, 362, 437, 910, 1005, 1019, 1034, 1035, 1036, 1039, 1042, 1044, 1045, 1046, 1048], "nusvr": [2, 47, 362, 913, 1019, 1036, 1042, 1044, 1045, 1046, 1048, 1049], "nutshel": [1002, 1004], "nv": 52, "nvidia": [0, 387], "nvirginica": 277, "nwanna": 1049, "nweight": 157, "nwith": [73, 91, 95, 164, 351], "nx": [51, 301, 370, 499], "nxorabl": 1044, "ny": [51, 53, 267, 301, 370, 372, 499, 994, 1016], "nyc": [403, 1022, 1028], "nymark": 1049, "nystroem": [2, 44, 180, 224, 237, 242, 367, 643, 644, 645, 680, 873, 912, 913, 1030, 1035, 1041, 1044, 1046, 1047, 1048], "nystroem_approx_svm": 242, "nystroem_scor": 242, "nystroem_tim": 242, "nystrom": [882, 1043, 1044], "nystr\u00f6m": [44, 996], "nyu": [0, 856], "nz": 531, "nzw": 1042, "n\u00e1jera": [1038, 1039, 1040, 1041], "n\u00e1pole": 1047, "o": [0, 56, 58, 65, 67, 74, 83, 89, 94, 95, 97, 98, 114, 116, 123, 152, 165, 177, 198, 204, 208, 210, 225, 243, 253, 262, 268, 270, 277, 308, 309, 313, 318, 321, 324, 332, 343, 354, 362, 370, 372, 375, 383, 393, 407, 409, 412, 414, 418, 420, 444, 447, 448, 450, 473, 475, 500, 535, 606, 630, 669, 670, 695, 835, 863, 878, 919, 972, 996, 998, 1000, 1001, 1004, 1005, 1007, 1008, 1018, 1019, 1020, 1034, 1037, 1040, 1042, 1043, 1046, 1047, 1049, 1050, 1051], "oa": [2, 50, 55, 66, 71, 109, 113, 114, 128, 149, 182, 241, 297, 299, 409, 469, 470, 473, 474, 476, 477, 513, 550, 803, 998, 1025], "oa_ms": 111, "oa_shrinkag": 111, "oak": 314, "ob2019": 1004, "obaja": 1038, "obei": [389, 1002], "obj": [244, 401, 568, 569, 940, 960, 962, 963, 964, 969], "obj_func": [613, 614], "object": [2, 44, 51, 54, 55, 58, 64, 65, 80, 84, 96, 100, 103, 104, 124, 127, 133, 150, 155, 164, 174, 182, 186, 196, 210, 226, 228, 236, 244, 248, 250, 251, 262, 266, 275, 277, 278, 280, 301, 314, 320, 321, 323, 324, 328, 351, 352, 358, 368, 369, 370, 375, 376, 378, 380, 381, 382, 384, 388, 389, 390, 398, 401, 407, 408, 409, 412, 415, 416, 417, 421, 423, 428, 430, 432, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 457, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 478, 482, 483, 484, 485, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 576, 583, 584, 585, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 690, 691, 692, 693, 694, 695, 696, 697, 700, 701, 702, 703, 704, 705, 714, 721, 735, 736, 745, 761, 762, 784, 785, 792, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 899, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 920, 922, 933, 934, 935, 936, 937, 940, 944, 945, 947, 956, 958, 959, 960, 961, 962, 963, 964, 966, 968, 969, 988, 989, 990, 991, 1000, 1001, 1002, 1003, 1007, 1010, 1011, 1014, 1017, 1018, 1019, 1023, 1025, 1030, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "object_nam": [244, 960, 963], "obozinski": 412, "obscur": [1011, 1050], "observ": [2, 44, 45, 47, 49, 51, 53, 54, 59, 62, 65, 71, 73, 76, 79, 87, 96, 104, 110, 112, 113, 114, 122, 123, 126, 127, 128, 135, 138, 139, 141, 142, 147, 150, 151, 154, 165, 169, 172, 174, 175, 176, 178, 185, 186, 187, 192, 193, 203, 206, 208, 210, 211, 212, 214, 224, 228, 234, 235, 240, 241, 247, 262, 264, 268, 270, 271, 275, 281, 282, 288, 291, 294, 301, 313, 323, 325, 331, 338, 339, 343, 344, 350, 351, 352, 356, 370, 372, 389, 393, 405, 407, 409, 410, 411, 412, 413, 416, 417, 441, 443, 445, 446, 447, 449, 459, 460, 469, 470, 471, 472, 473, 474, 475, 476, 525, 533, 552, 553, 564, 613, 614, 649, 655, 660, 704, 719, 721, 761, 824, 845, 853, 886, 888, 1000, 1003, 1004, 1008, 1009, 1010, 1011, 1012, 1014, 1017, 1018, 1019, 1020, 1027, 1035, 1047, 1048, 1049, 1050], "observatori": 174, "obsolet": [1034, 1050], "obstruct": 1041, "obtain": [23, 44, 47, 49, 52, 53, 59, 65, 89, 91, 92, 104, 107, 108, 126, 128, 135, 144, 147, 148, 153, 165, 171, 173, 185, 186, 196, 207, 210, 212, 214, 224, 234, 247, 253, 254, 255, 262, 264, 268, 269, 270, 274, 277, 281, 291, 313, 320, 337, 343, 351, 352, 357, 358, 370, 372, 377, 389, 401, 405, 406, 407, 409, 410, 412, 414, 415, 416, 417, 437, 442, 469, 497, 533, 534, 556, 557, 558, 559, 560, 561, 564, 565, 566, 595, 608, 617, 648, 662, 664, 669, 671, 675, 677, 679, 680, 690, 711, 715, 729, 742, 759, 796, 809, 826, 832, 835, 836, 839, 853, 864, 884, 896, 909, 912, 915, 916, 951, 993, 994, 996, 998, 1000, 1001, 1003, 1004, 1005, 1007, 1008, 1010, 1011, 1014, 1018, 1019, 1040, 1042, 1045, 1047, 1048, 1049, 1050, 1051], "obviat": 996, "obviou": [185, 343, 358, 362, 375, 404, 412], "obvious": [181, 362], "oc": 1049, "occas": 375, "occasion": [390, 730, 1043], "occup": [185, 308, 324, 497], "occupation_cler": 185, "occupation_manag": 185, "occupation_oth": 185, "occupation_profession": 185, "occupation_sal": 185, "occupation_servic": 185, "occupi": [407, 1004], "occur": [55, 103, 145, 210, 214, 228, 346, 358, 375, 383, 390, 404, 407, 409, 411, 415, 444, 509, 510, 573, 583, 592, 630, 674, 801, 803, 806, 807, 809, 817, 826, 829, 830, 831, 834, 877, 938, 1004, 1006, 1014, 1034, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "occurr": [2, 210, 314, 351, 352, 370, 375, 379, 407, 415, 570, 571, 583, 591, 592, 620, 630, 631, 632, 633, 786, 842, 870, 1006, 1035, 1040], "ocean": 301, "ocsvm": [49, 224], "oct": [695, 772, 1001, 1007], "octob": [111, 370, 1034, 1041, 1047, 1048, 1050], "od280": 372, "od315": 372, "odd": [271, 414, 515, 715, 1004, 1041, 1042], "ofcategoriesknownnumb": 395, "off": [45, 52, 54, 73, 75, 76, 82, 86, 87, 110, 114, 116, 121, 141, 150, 164, 165, 167, 182, 203, 214, 231, 242, 246, 260, 261, 267, 269, 270, 271, 281, 285, 308, 325, 329, 331, 333, 339, 348, 350, 370, 375, 377, 389, 406, 407, 409, 416, 442, 497, 554, 555, 560, 561, 590, 593, 637, 659, 661, 695, 718, 800, 801, 803, 806, 807, 817, 819, 825, 830, 868, 887, 955, 1003, 1009, 1019, 1024, 1025, 1034, 1038, 1039, 1041], "offer": [44, 141, 199, 377, 383, 387, 388, 389, 393, 401, 411, 412, 414, 415, 993, 994, 1005, 1008, 1020, 1023, 1024, 1028, 1040, 1052, 1053], "offic": 1028, "offici": [370, 377, 387, 389, 393, 494, 498, 1023, 1042, 1043, 1046], "offlin": [262, 362, 375], "offset": [138, 190, 387, 409, 412, 469, 509, 510, 564, 635, 636, 644, 645, 647, 648, 680, 731, 778, 780, 853, 911, 1004, 1018, 1042, 1053], "offset_": [469, 564, 680, 853, 911, 1042], "offset_init": 680, "offsetbox": 231, "offsetimag": 231, "ofmulticlass": 1019, "often": [44, 58, 62, 63, 65, 70, 103, 107, 141, 150, 153, 173, 180, 185, 186, 211, 228, 231, 247, 255, 270, 273, 308, 313, 339, 348, 350, 351, 352, 362, 363, 369, 370, 372, 375, 377, 380, 383, 387, 388, 389, 392, 395, 401, 405, 407, 408, 409, 411, 412, 414, 415, 417, 419, 468, 522, 525, 534, 537, 635, 649, 650, 655, 656, 663, 664, 665, 666, 675, 677, 690, 731, 877, 885, 893, 905, 993, 994, 996, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1009, 1010, 1011, 1014, 1017, 1018, 1020, 1035, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "og": 415, "ogbonna": 1047, "ogordon100": 1047, "ogrid": 54, "ogu": 415, "ogura": 1049, "oh": [880, 1044], "ohad": 1048, "ohayon": [1042, 1043, 1050], "ohio": 370, "ohno": 405, "oj_lappi": 1046, "oja": [419, 534], "ojala": [274, 411, 832], "ojeda": 1048, "ok": [50, 375, 1010], "okal": 1038, "okbalefthand": 1040, "okhlopkov": [1040, 1041], "okon": 1048, "okroshiashvili": 1047, "ol": [192, 201, 206, 207, 208, 216, 227, 320, 659, 1000], "ol2001": 994, "olatunji": 1049, "old": [228, 375, 379, 381, 407, 468, 537, 649, 655, 905, 1001, 1024, 1034, 1039, 1040, 1042, 1047, 1048, 1049], "olden": 1042, "older": [244, 374, 379, 401, 464, 1027, 1032, 1037, 1044, 1046], "oldest": 497, "oldid": 1004, "oldja": 1046, "oleg": 1044, "oleggio": 1038, "olegovich": 1041, "oleh": [1046, 1048], "oleksandr": [1042, 1043, 1044, 1045, 1048], "oleksii": 1051, "olemiss": 682, "olga": [631, 994], "oli": 1041, "oliblum90": [1041, 1042], "olicairn": 1045, "olimpio": 1042, "oliph": 1034, "oliv": [1042, 1043, 1045, 1046, 1047], "oliveira": [1040, 1042, 1044, 1048], "olivetti": [2, 121, 368, 412, 496, 1030, 1034, 1042], "olivetti_fac": 496, "olivi": [0, 390, 396, 903, 1017, 1022, 1024, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "oll": 1049, "olr": 192, "olsen": 1041, "olshen": [915, 916, 1020], "olson": 1040, "olszewski": 1047, "olvi": [165, 372], "om": 1041, "omar": [0, 396, 1044, 1049, 1050, 1051, 1052, 1053], "omarmanzoor": 1050, "omega": [346, 410, 998], "omega_": 998, "omega_k": [410, 998], "omer": 1039, "omit": [142, 184, 185, 333, 380, 420, 475, 535, 669, 671, 679, 810, 812, 835, 836, 839, 842, 843, 844, 845, 846, 864, 1002, 1009], "omohundro": 1007, "omp": [2, 124, 130, 209, 412, 532, 538, 543, 549, 667, 668, 688, 689, 1026, 1030, 1034, 1042], "omp_cv": 209, "omp_get_max_thread": 376, "omp_num_thread": 363, "omtcyfz": 1041, "on_fail": [944, 1053], "on_skip": [944, 1053], "onc": [2, 44, 48, 84, 162, 165, 169, 174, 203, 231, 244, 247, 262, 266, 269, 281, 282, 285, 288, 314, 317, 321, 350, 352, 356, 357, 358, 362, 364, 369, 370, 373, 375, 377, 379, 380, 381, 382, 383, 388, 389, 390, 401, 406, 407, 408, 410, 411, 412, 414, 415, 416, 417, 449, 451, 453, 472, 509, 510, 539, 545, 552, 560, 561, 592, 593, 599, 614, 622, 630, 650, 654, 656, 658, 664, 666, 668, 669, 670, 671, 679, 680, 681, 700, 715, 719, 721, 739, 784, 804, 808, 811, 821, 825, 842, 843, 844, 845, 846, 919, 1000, 1001, 1004, 1007, 1014, 1018, 1019, 1020, 1031, 1034, 1042, 1044, 1045, 1046, 1047, 1051], "one": [0, 2, 31, 44, 48, 49, 50, 53, 55, 56, 63, 64, 65, 69, 70, 71, 73, 76, 82, 87, 89, 91, 92, 94, 95, 98, 100, 104, 113, 121, 124, 126, 127, 130, 140, 141, 145, 147, 150, 151, 155, 158, 164, 165, 167, 169, 176, 177, 180, 184, 185, 186, 187, 188, 190, 192, 193, 196, 200, 201, 203, 204, 205, 207, 210, 212, 219, 220, 225, 228, 232, 237, 244, 245, 247, 251, 255, 258, 262, 264, 265, 266, 268, 269, 271, 272, 275, 276, 277, 278, 285, 287, 288, 293, 306, 309, 310, 313, 314, 317, 319, 320, 321, 325, 326, 331, 338, 339, 347, 350, 351, 352, 354, 357, 358, 362, 363, 364, 369, 370, 371, 372, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 387, 389, 390, 392, 393, 395, 398, 401, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 444, 445, 446, 447, 449, 450, 451, 452, 453, 455, 456, 457, 460, 462, 464, 469, 474, 487, 488, 490, 491, 493, 494, 495, 496, 497, 501, 502, 503, 504, 505, 506, 509, 510, 511, 513, 515, 535, 540, 541, 542, 544, 548, 552, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 570, 583, 585, 586, 590, 591, 592, 593, 613, 614, 618, 619, 623, 630, 633, 635, 636, 637, 638, 646, 650, 651, 652, 653, 657, 660, 661, 662, 664, 669, 671, 672, 674, 676, 677, 678, 679, 681, 683, 691, 695, 698, 702, 706, 712, 714, 723, 732, 733, 737, 741, 753, 754, 757, 766, 774, 777, 781, 782, 783, 784, 786, 787, 790, 791, 793, 794, 795, 796, 799, 800, 801, 802, 803, 806, 807, 809, 810, 811, 813, 815, 817, 821, 822, 825, 826, 828, 830, 831, 833, 834, 835, 836, 837, 839, 840, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 863, 867, 870, 871, 872, 874, 875, 877, 878, 879, 880, 881, 886, 887, 888, 891, 893, 907, 909, 910, 911, 912, 913, 915, 916, 917, 918, 926, 929, 939, 942, 944, 953, 974, 993, 994, 996, 998, 999, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1018, 1019, 1020, 1021, 1022, 1023, 1028, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "one_class": 245, "one_d_arrai": 924, "one_d_label": 927, "one_hot": [314, 325], "one_hot_encod": [44, 144], "one_hot_encoder_": 567, "one_hot_linear_pipelin": 44, "one_hot_linear_predict": 44, "one_hot_poly_pipelin": 44, "one_hot_poly_predict": 44, "one_hot_result": 144, "one_hot_tim": 44, "one_imag": [415, 586, 589], "one_vs_on": [417, 613, 1005], "one_vs_rest": [613, 1005], "oneclasssvm": [2, 49, 51, 224, 237, 320, 338, 564, 680, 853, 1010, 1018, 1019, 1036, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049], "oned": 393, "onehot": [249, 309, 310, 408, 872, 1014], "onehot_categor": [210, 228], "onehotencod": [2, 44, 104, 140, 144, 155, 185, 186, 210, 228, 239, 247, 249, 251, 314, 318, 320, 323, 324, 325, 369, 389, 408, 414, 466, 467, 567, 583, 584, 870, 874, 875, 878, 881, 888, 994, 1014, 1035, 1038, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "onehotencoderonehotencod": [104, 140, 155, 185, 186, 239, 249, 318, 321], "ones": [44, 51, 71, 79, 89, 104, 113, 145, 151, 169, 190, 196, 214, 215, 237, 240, 244, 268, 276, 279, 295, 312, 329, 348, 362, 363, 375, 383, 389, 407, 409, 411, 414, 422, 425, 429, 450, 533, 567, 583, 613, 614, 621, 647, 648, 661, 662, 673, 679, 706, 799, 805, 810, 821, 849, 850, 851, 853, 855, 857, 858, 859, 860, 861, 882, 886, 957, 1000, 1004, 1009, 1010, 1014, 1019, 1034, 1042, 1043, 1044], "onetoonefeaturemixin": [2, 377, 431], "onevsoneclassifi": [2, 285, 398, 836, 837, 1035, 1037, 1038, 1040, 1041, 1043, 1046, 1048, 1051], "onevsrestclassifi": [2, 67, 203, 225, 245, 275, 277, 285, 398, 405, 661, 662, 835, 837, 907, 1035, 1036, 1038, 1040, 1041, 1047, 1048, 1051, 1052], "ong": 711, "ongari": 1051, "onggo": 1050, "ongo": [323, 376, 390], "onli": [2, 26, 31, 44, 47, 51, 54, 55, 59, 62, 63, 64, 65, 67, 70, 71, 73, 75, 76, 83, 87, 89, 92, 100, 103, 104, 105, 107, 108, 113, 124, 125, 127, 131, 135, 137, 142, 143, 144, 146, 154, 155, 160, 161, 162, 165, 169, 171, 176, 178, 181, 184, 185, 186, 190, 196, 200, 207, 210, 211, 213, 216, 218, 219, 228, 230, 231, 237, 239, 241, 243, 244, 248, 251, 253, 254, 255, 258, 259, 262, 264, 266, 268, 270, 271, 274, 275, 276, 277, 279, 280, 281, 282, 285, 287, 288, 294, 296, 299, 301, 305, 308, 309, 313, 314, 319, 320, 328, 329, 331, 335, 336, 339, 343, 344, 346, 347, 350, 351, 352, 354, 355, 357, 358, 362, 363, 364, 368, 369, 370, 372, 373, 375, 377, 379, 380, 381, 382, 383, 384, 387, 389, 390, 393, 398, 401, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 423, 427, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 459, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 482, 483, 484, 485, 489, 490, 491, 493, 495, 497, 498, 501, 502, 503, 504, 505, 506, 509, 510, 511, 513, 517, 520, 524, 525, 529, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 583, 584, 585, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 702, 710, 712, 716, 729, 732, 733, 737, 739, 740, 741, 744, 746, 759, 761, 763, 777, 781, 782, 783, 784, 786, 787, 790, 791, 795, 796, 797, 800, 801, 802, 803, 804, 805, 806, 807, 809, 810, 812, 817, 821, 824, 825, 826, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 920, 921, 923, 924, 926, 927, 928, 929, 931, 932, 933, 934, 937, 939, 942, 951, 953, 957, 959, 964, 969, 992, 993, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1018, 1019, 1020, 1023, 1024, 1028, 1031, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1046, 1048, 1049, 1050, 1051, 1052, 1053], "onlin": [2, 45, 46, 48, 55, 72, 85, 121, 124, 182, 191, 218, 224, 246, 262, 304, 326, 364, 370, 374, 380, 389, 407, 412, 415, 417, 442, 446, 447, 449, 496, 503, 532, 537, 538, 539, 540, 546, 547, 584, 586, 661, 669, 670, 671, 679, 681, 833, 842, 843, 844, 845, 846, 849, 850, 855, 857, 858, 876, 877, 887, 907, 908, 996, 1000, 1008, 1010, 1022, 1025, 1026, 1028, 1030, 1034, 1038, 1039, 1041, 1049], "onlineldavb": 537, "only_non_neg": 1047, "only_physical_cor": 141, "onnx": [1023, 1024, 1030], "onnxruntim": 401, "onto": [117, 231, 232, 242, 308, 387, 412, 415, 419, 446, 448, 461, 534, 540, 544, 630, 631, 633, 691, 998, 1002, 1007], "onward": [881, 1038, 1052, 1053], "onx": 401, "oob": [134, 146, 182, 414, 516, 565, 1025, 1036, 1047, 1051], "oob_best_it": 146, "oob_color": 146, "oob_decision_function_": [556, 558, 565], "oob_error": 139, "oob_improvement_": [146, 414, 560, 561, 1036], "oob_lin": 146, "oob_prediction_": [557, 559, 566], "oob_scor": [139, 414, 556, 557, 558, 559, 565, 566, 1039, 1041], "oob_score_": [139, 556, 557, 558, 559, 560, 561, 565, 566, 1036, 1050], "oob_scores_": [560, 561, 1050], "op": [379, 426, 612, 661, 662, 669, 670, 671, 679, 680, 681, 864, 865, 907, 1014], "opaqu": 1012, "open": [0, 48, 52, 56, 232, 369, 370, 373, 374, 375, 379, 381, 387, 388, 390, 401, 408, 415, 487, 497, 509, 510, 994, 1023, 1028, 1037, 1041, 1042, 1044, 1050], "open_pric": 52, "openbla": [362, 363, 373, 383, 387, 1047, 1051, 1052], "openblas_num_thread": 363, "opencv": 370, "opengraph": [375, 393, 400], "openml": [2, 44, 53, 104, 155, 174, 185, 210, 218, 226, 228, 238, 262, 282, 285, 287, 305, 368, 393, 497, 1030, 1042, 1044, 1047], "openml1": 53, "openml100": 369, "openmp": [318, 373, 378, 387, 389, 407, 414, 1045, 1047, 1050, 1052], "opentsn": 695, "oper": [2, 20, 54, 165, 177, 182, 238, 243, 250, 260, 262, 263, 265, 270, 275, 326, 352, 362, 363, 372, 373, 375, 378, 381, 387, 389, 390, 393, 401, 403, 406, 411, 412, 414, 415, 416, 420, 442, 448, 461, 468, 475, 482, 483, 484, 485, 505, 534, 535, 542, 552, 553, 567, 573, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 619, 624, 627, 633, 638, 646, 661, 692, 696, 705, 709, 710, 711, 730, 777, 784, 785, 791, 792, 822, 833, 836, 847, 848, 870, 874, 879, 890, 891, 905, 912, 915, 953, 976, 1000, 1007, 1014, 1019, 1023, 1025, 1028, 1038, 1040, 1041, 1042, 1044, 1045, 1050, 1053], "operand": 417, "operation": [228, 1028], "operatornam": [412, 744, 1000, 1004, 1020], "opinion": 390, "opitz": 1004, "opportun": [535, 1018], "oppos": [101, 244, 377, 403, 407, 903, 1007, 1019, 1034, 1052], "opposit": [63, 87, 101, 126, 185, 186, 200, 262, 275, 389, 405, 409, 411, 416, 443, 447, 449, 469, 539, 541, 548, 564, 715, 733, 853, 911, 1034], "opposite_lof_scor": 853, "opt": [373, 377], "opta": 900, "optic": [2, 72, 80, 182, 321, 368, 418, 444, 446, 455, 456, 457, 503, 1025, 1029, 1030, 1043, 1047, 1048, 1049, 1050, 1051, 1052], "optim": [47, 53, 54, 65, 87, 88, 91, 94, 105, 110, 111, 121, 145, 146, 148, 150, 164, 165, 169, 170, 173, 174, 175, 176, 177, 196, 198, 200, 203, 204, 218, 226, 243, 247, 262, 266, 273, 276, 281, 282, 285, 287, 292, 306, 308, 313, 321, 325, 331, 341, 346, 350, 351, 352, 358, 362, 369, 372, 375, 377, 378, 387, 389, 393, 402, 404, 406, 407, 409, 411, 412, 414, 416, 417, 418, 444, 447, 448, 449, 450, 452, 457, 461, 462, 472, 473, 479, 532, 535, 536, 538, 540, 544, 558, 559, 560, 561, 575, 613, 614, 622, 623, 638, 641, 643, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 675, 676, 677, 679, 680, 681, 683, 684, 685, 686, 687, 690, 693, 695, 697, 698, 704, 722, 726, 733, 802, 803, 817, 825, 849, 850, 851, 853, 855, 856, 857, 858, 859, 864, 865, 883, 895, 899, 900, 907, 908, 909, 910, 911, 912, 913, 996, 997, 998, 999, 1000, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1018, 1019, 1020, 1023, 1028, 1030, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1048, 1049, 1050], "optima": 417, "optimis": [377, 407, 1007, 1037, 1047, 1049], "optimist": [53, 200, 273, 350, 358, 710, 1000, 1004], "optimum": [95, 175, 185, 190, 262, 281, 406, 412, 472, 1000, 1003], "option": [2, 44, 67, 81, 86, 128, 141, 148, 175, 181, 194, 196, 211, 247, 262, 271, 277, 318, 325, 350, 354, 358, 364, 369, 370, 371, 373, 375, 376, 377, 380, 381, 383, 384, 387, 389, 390, 393, 401, 407, 408, 410, 411, 412, 414, 415, 418, 431, 437, 441, 442, 443, 444, 445, 446, 447, 448, 449, 452, 459, 461, 462, 463, 464, 465, 468, 482, 483, 484, 485, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 583, 584, 585, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 613, 614, 615, 616, 617, 618, 619, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 690, 691, 692, 693, 695, 697, 698, 714, 716, 720, 732, 733, 738, 739, 740, 760, 761, 762, 767, 769, 770, 774, 777, 778, 779, 780, 781, 784, 786, 787, 790, 795, 796, 798, 802, 804, 805, 806, 807, 809, 810, 812, 821, 825, 826, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 856, 857, 858, 859, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 896, 899, 900, 902, 903, 905, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 921, 940, 989, 993, 994, 1000, 1003, 1004, 1007, 1014, 1017, 1019, 1020, 1024, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "option_context": 228, "ora": 1047, "oracl": [2, 70, 210, 228, 420, 469, 470, 473, 474, 475, 476, 998, 1034], "orallo": 1004, "orang": [47, 49, 87, 112, 119, 122, 123, 128, 135, 149, 150, 152, 176, 181, 198, 200, 207, 220, 245, 256, 262, 299, 318, 324, 395, 1005, 1051], "orazbayev": 1048, "orbit": [350, 351], "order": [2, 44, 54, 59, 62, 65, 82, 89, 98, 99, 105, 110, 130, 143, 144, 148, 150, 174, 184, 185, 188, 190, 200, 204, 210, 211, 216, 224, 228, 232, 241, 244, 247, 251, 255, 263, 266, 268, 275, 287, 306, 308, 313, 314, 315, 319, 320, 325, 346, 350, 352, 358, 362, 363, 370, 375, 376, 377, 380, 381, 384, 389, 393, 394, 398, 401, 407, 408, 409, 411, 412, 413, 414, 415, 417, 419, 437, 440, 443, 446, 447, 449, 450, 455, 456, 457, 459, 464, 488, 489, 490, 496, 498, 516, 535, 536, 540, 541, 542, 544, 548, 552, 554, 556, 557, 558, 559, 560, 564, 565, 566, 567, 568, 583, 590, 593, 595, 596, 599, 608, 609, 610, 613, 625, 630, 634, 643, 661, 662, 668, 679, 688, 689, 691, 692, 696, 700, 702, 703, 705, 707, 715, 716, 721, 725, 729, 732, 733, 741, 743, 744, 745, 757, 759, 781, 785, 786, 787, 790, 791, 792, 797, 802, 803, 804, 806, 807, 808, 810, 814, 817, 821, 822, 825, 828, 835, 836, 838, 839, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 854, 857, 864, 867, 878, 880, 881, 882, 886, 887, 888, 891, 892, 893, 895, 896, 897, 898, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 920, 921, 922, 933, 934, 939, 951, 967, 972, 994, 1000, 1001, 1004, 1005, 1007, 1008, 1014, 1017, 1018, 1019, 1020, 1024, 1034, 1036, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "order_": [838, 841], "order_centroid": 351, "ordereddict": 139, "ordering_": [99, 407, 450, 455, 456, 457], "ordin": [44, 87, 104, 155, 247, 311, 314, 315, 319, 322, 369, 389, 414, 497, 568, 712, 872, 875, 880, 881, 888, 1000, 1001, 1014, 1024, 1042, 1048], "ordinal_encod": [144, 247], "ordinal_result": 144, "ordinalencod": [2, 144, 155, 186, 187, 210, 247, 314, 322, 369, 389, 583, 843, 875, 880, 888, 994, 1006, 1014, 1042, 1043, 1046, 1047, 1048, 1049, 1050, 1051], "ordinalencoderordinalencod": [155, 186, 187, 314], "ordinari": [2, 123, 138, 158, 182, 191, 192, 195, 196, 210, 212, 213, 215, 227, 264, 320, 502, 638, 649, 655, 657, 658, 659, 660, 675, 681, 685, 686, 690, 753, 788, 833, 1018, 1025, 1026, 1030], "ordinarili": [387, 389], "ordowski": 1004, "oregon": 314, "oren": 1042, "oresti": 1043, "orfano": [1047, 1048, 1049, 1050, 1051], "org": [44, 52, 53, 56, 62, 64, 104, 105, 140, 142, 151, 152, 155, 158, 162, 174, 185, 186, 187, 190, 194, 210, 218, 226, 228, 238, 239, 240, 244, 248, 249, 250, 251, 258, 262, 266, 268, 269, 275, 280, 282, 287, 305, 306, 314, 318, 319, 321, 322, 324, 330, 356, 357, 363, 368, 373, 375, 378, 381, 383, 390, 411, 597, 639, 671, 674, 679, 698, 708, 772, 849, 850, 855, 856, 857, 858, 885, 901, 915, 916, 944, 946, 1000, 1004, 1020, 1030, 1042, 1046], "organ": [0, 51, 53, 103, 112, 350, 369, 374, 375, 390, 855, 1023], "orgera": 1053, "ori": 1040, "orient": [67, 121, 185, 230, 308, 389, 919, 1001], "orig": [54, 295], "orig_coin": [81, 82], "orig_data_ax": 126, "origin": [44, 45, 54, 59, 60, 81, 82, 85, 90, 92, 107, 108, 121, 123, 124, 127, 130, 150, 153, 161, 162, 165, 169, 171, 173, 174, 180, 181, 186, 190, 198, 200, 214, 230, 231, 232, 234, 235, 241, 242, 243, 247, 259, 262, 265, 271, 281, 291, 296, 306, 309, 313, 323, 326, 329, 343, 350, 352, 358, 363, 370, 372, 374, 375, 377, 379, 380, 387, 389, 401, 404, 407, 408, 411, 412, 414, 415, 417, 418, 419, 420, 432, 437, 441, 443, 444, 445, 446, 447, 449, 450, 459, 463, 464, 465, 475, 482, 483, 484, 494, 495, 496, 502, 520, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 574, 578, 583, 586, 592, 596, 609, 610, 612, 613, 614, 617, 633, 635, 638, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 693, 695, 699, 704, 731, 766, 772, 802, 804, 805, 810, 812, 821, 825, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 852, 853, 854, 857, 858, 864, 865, 867, 870, 871, 872, 873, 874, 875, 876, 879, 880, 881, 883, 884, 885, 886, 887, 896, 899, 900, 901, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 931, 933, 934, 938, 939, 962, 974, 977, 997, 998, 1000, 1001, 1003, 1004, 1007, 1010, 1015, 1016, 1017, 1018, 1021, 1023, 1028, 1037, 1038, 1040, 1042, 1044, 1046, 1048, 1050], "original_param": 149, "original_sklearn_vers": [401, 578], "original_space_centroid": 351, "orii": 1036, "orphan": [448, 461, 1034], "orr": [1008, 1018], "orr\u00f9": 1037, "orthogon": [2, 38, 88, 122, 123, 124, 130, 182, 191, 412, 527, 532, 538, 540, 543, 544, 549, 667, 668, 688, 689, 1016, 1025, 1026, 1030, 1034], "orthogonal_mp": [2, 549, 667, 668, 689, 1000], "orthogonal_mp_gram": [2, 667, 668, 688, 1048], "orthogonalmatchingpursuit": [2, 209, 668, 688, 689, 1000, 1005, 1034, 1036, 1039, 1042, 1047, 1052], "orthogonalmatchingpursuitcv": [2, 209, 398, 667, 1036, 1047, 1051], "orthonorm": [2, 46, 384, 950, 996], "orthotrop": 1007, "ortiz": [1044, 1050], "os": 1052, "osa": 1042, "osaid": 1042, "osborn": [1037, 1038], "oscar": [1037, 1041], "oscil": [152, 186, 215, 407, 440], "oscillatori": [211, 1014], "osei": 1048, "osendorf": [1034, 1035], "oserror": [393, 488, 489, 490, 491, 493, 494, 495, 496, 498, 499], "osindero": [863, 1009], "osman": [1043, 1049], "osx": 362, "other": [0, 2, 26, 44, 48, 52, 53, 62, 65, 67, 68, 70, 73, 76, 80, 86, 91, 100, 102, 104, 105, 117, 123, 124, 126, 128, 138, 140, 141, 143, 144, 147, 148, 150, 151, 157, 160, 180, 181, 182, 184, 185, 186, 187, 190, 192, 199, 203, 204, 210, 214, 228, 230, 231, 232, 234, 237, 238, 239, 241, 243, 244, 247, 248, 249, 255, 258, 262, 263, 265, 268, 269, 270, 277, 278, 282, 285, 293, 294, 295, 307, 308, 312, 313, 315, 317, 318, 320, 324, 325, 328, 339, 343, 345, 348, 350, 351, 354, 356, 357, 358, 362, 367, 368, 370, 371, 372, 373, 375, 377, 379, 380, 381, 383, 384, 388, 389, 390, 393, 398, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 437, 443, 444, 446, 447, 448, 449, 450, 452, 457, 464, 465, 469, 482, 483, 484, 488, 497, 498, 504, 534, 535, 536, 537, 542, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 583, 590, 591, 592, 593, 599, 604, 612, 613, 614, 615, 616, 623, 630, 631, 633, 638, 642, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 690, 693, 695, 699, 702, 707, 721, 766, 777, 781, 788, 795, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 817, 820, 821, 822, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 852, 854, 857, 858, 862, 864, 865, 867, 868, 870, 872, 873, 874, 876, 877, 879, 880, 881, 883, 884, 885, 886, 887, 888, 895, 902, 903, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 944, 946, 960, 992, 993, 994, 996, 997, 998, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1017, 1018, 1019, 1020, 1024, 1025, 1026, 1027, 1028, 1030, 1035, 1037, 1038, 1040, 1041, 1042, 1043, 1047, 1048, 1049, 1050, 1051, 1053], "other_parti": 262, "other_payment_plan": 262, "other_scor": 380, "otherwis": [51, 90, 96, 137, 178, 181, 194, 212, 218, 262, 301, 343, 346, 358, 364, 377, 379, 381, 389, 398, 407, 409, 411, 415, 417, 432, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 449, 451, 453, 454, 464, 465, 467, 482, 483, 484, 485, 497, 528, 534, 536, 537, 539, 541, 542, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 590, 592, 593, 599, 604, 613, 614, 617, 634, 635, 636, 638, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 688, 689, 693, 695, 699, 700, 701, 703, 705, 706, 710, 712, 716, 717, 727, 729, 730, 731, 732, 733, 741, 744, 755, 757, 758, 759, 769, 777, 781, 784, 785, 786, 787, 788, 790, 791, 792, 795, 796, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 817, 821, 822, 825, 826, 831, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 862, 864, 865, 867, 870, 871, 872, 873, 874, 878, 879, 886, 887, 888, 889, 892, 893, 894, 896, 897, 898, 902, 903, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 920, 922, 933, 934, 936, 950, 951, 962, 964, 987, 989, 992, 999, 1000, 1001, 1004, 1007, 1008, 1010, 1011, 1014, 1016, 1018, 1019, 1023, 1028, 1036, 1042, 1043, 1044, 1047, 1050], "ott": 1038, "oudshoorn": [630, 994], "ought": 362, "our": [0, 44, 45, 47, 51, 52, 53, 78, 87, 90, 103, 104, 112, 113, 117, 121, 122, 135, 136, 142, 144, 145, 147, 148, 160, 165, 169, 174, 175, 176, 182, 184, 185, 186, 187, 188, 210, 214, 228, 232, 234, 244, 261, 262, 268, 271, 274, 275, 281, 291, 305, 308, 314, 318, 320, 325, 326, 333, 336, 342, 344, 346, 350, 351, 352, 358, 363, 374, 377, 379, 380, 383, 387, 388, 389, 390, 398, 407, 411, 414, 415, 417, 418, 444, 450, 564, 647, 695, 711, 723, 729, 741, 759, 849, 850, 851, 853, 855, 857, 858, 859, 993, 994, 1000, 1001, 1004, 1010, 1014, 1017, 1018, 1019, 1024, 1027, 1028, 1041, 1042, 1044, 1045, 1048, 1049, 1051, 1053], "our_rand_r": 1043, "oura": [1047, 1048, 1049], "ourselv": 1028, "ouss1508": [1049, 1050], "out": [0, 2, 43, 44, 47, 49, 50, 52, 53, 55, 56, 64, 67, 76, 84, 89, 103, 104, 128, 134, 139, 141, 142, 148, 149, 182, 184, 185, 187, 196, 210, 212, 214, 218, 228, 247, 253, 255, 262, 266, 268, 271, 276, 280, 281, 285, 287, 313, 314, 320, 326, 331, 333, 335, 336, 339, 346, 350, 361, 370, 372, 373, 375, 377, 378, 379, 381, 387, 389, 395, 401, 407, 410, 412, 414, 415, 417, 423, 433, 434, 435, 436, 442, 443, 445, 446, 447, 449, 454, 472, 482, 483, 484, 485, 500, 516, 517, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 548, 550, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 590, 591, 593, 606, 609, 610, 637, 642, 643, 644, 645, 654, 658, 669, 671, 676, 678, 679, 691, 692, 695, 704, 730, 744, 803, 805, 806, 807, 808, 810, 811, 812, 813, 817, 833, 842, 843, 844, 845, 846, 849, 851, 856, 857, 859, 863, 864, 865, 873, 877, 884, 896, 899, 900, 922, 965, 967, 972, 992, 994, 998, 999, 1003, 1004, 1005, 1007, 1012, 1014, 1024, 1025, 1026, 1028, 1030, 1034, 1036, 1038, 1040, 1042, 1043, 1046, 1047, 1050, 1052], "out_activation_": [864, 865], "out_bounds_predict": 212, "out_fil": [919, 1020], "out_of_bound": [240, 638], "out_of_cluster_doc": 58, "outcom": [44, 141, 185, 277, 281, 389, 395, 414, 570, 661, 712, 745, 797, 835, 902, 903, 904, 909, 912, 1000, 1004, 1020, 1027, 1038, 1042, 1044], "outdat": 378, "outer": [59, 126, 273, 330, 451, 515, 643, 653, 654, 657, 996, 1035], "outer_cv": [273, 324], "outer_numb": 330, "outermost": 343, "outli": [49, 112, 389, 469, 474, 1000, 1010], "outlier": [2, 43, 71, 80, 88, 112, 113, 147, 151, 169, 182, 191, 208, 212, 213, 214, 215, 216, 224, 236, 289, 307, 312, 315, 338, 348, 370, 389, 407, 409, 414, 429, 435, 446, 464, 466, 469, 470, 473, 474, 475, 476, 490, 491, 493, 497, 511, 513, 523, 525, 564, 634, 642, 652, 673, 674, 675, 679, 680, 681, 682, 695, 705, 833, 853, 857, 868, 876, 877, 879, 880, 881, 883, 884, 885, 886, 887, 892, 893, 894, 895, 896, 897, 898, 910, 911, 913, 1004, 1018, 1019, 1023, 1025, 1026, 1029, 1030, 1034, 1039, 1040, 1042, 1053], "outlier_detector": [247, 429, 926], "outlier_label": [857, 1044], "outlier_label_": 857, "outlier_mask": 213, "outlier_plot": 112, "outliermixin": [2, 1051, 1053], "outliers_": 652, "outliers_cov": 112, "outliers_fract": 237, "outliers_index": 113, "outliers_offset": 113, "outlin": [100, 143, 375, 377, 389, 390, 392, 407, 993, 1030], "outlying": 1010, "outperform": [110, 117, 150, 155, 285, 313, 387, 411, 414, 452, 462, 1006, 1014], "output": [2, 31, 32, 52, 55, 63, 65, 73, 87, 93, 124, 134, 135, 138, 143, 155, 169, 177, 180, 181, 182, 185, 236, 244, 251, 256, 261, 262, 266, 268, 271, 275, 277, 278, 282, 285, 288, 309, 312, 314, 315, 317, 320, 321, 323, 325, 351, 352, 357, 368, 369, 370, 372, 375, 377, 381, 383, 387, 388, 389, 405, 406, 407, 408, 410, 411, 414, 415, 416, 417, 423, 428, 431, 437, 441, 442, 443, 445, 446, 447, 449, 450, 452, 459, 460, 462, 463, 464, 465, 466, 467, 468, 482, 483, 484, 485, 488, 491, 493, 494, 495, 496, 497, 498, 504, 506, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 583, 584, 585, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 614, 630, 631, 632, 633, 634, 635, 636, 638, 641, 642, 643, 644, 645, 649, 650, 653, 655, 656, 657, 660, 661, 663, 664, 665, 666, 669, 670, 671, 674, 676, 677, 679, 681, 682, 684, 685, 686, 687, 691, 692, 693, 695, 697, 699, 702, 703, 716, 717, 724, 726, 727, 729, 731, 738, 748, 749, 751, 753, 754, 755, 756, 757, 759, 764, 770, 775, 788, 791, 793, 794, 800, 801, 802, 804, 805, 806, 807, 808, 809, 815, 817, 818, 819, 820, 821, 822, 823, 825, 828, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 850, 851, 852, 856, 857, 859, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 891, 895, 896, 899, 900, 904, 905, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 920, 921, 922, 923, 927, 928, 933, 934, 936, 939, 951, 952, 959, 960, 962, 970, 990, 993, 994, 996, 998, 1000, 1001, 1004, 1005, 1006, 1007, 1008, 1011, 1014, 1019, 1025, 1026, 1030, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "output_dict": [716, 1042, 1046], "output_distribut": [108, 308, 312, 408, 883, 884, 895, 896, 1014], "output_fil": 487, "output_indices_": [464, 1047], "output_label": 330, "output_label_arrai": 330, "outputcodeclassifi": [2, 285, 398, 835, 836, 1041, 1046, 1050, 1051], "outputs_2d_": [849, 857, 1044], "outreach": 390, "outsid": [46, 49, 58, 143, 211, 212, 240, 251, 401, 415, 446, 638, 886, 1010, 1042], "outward": 308, "outweigh": 1038, "ouvert": [761, 762, 1002], "ova": [219, 669, 671, 679, 1018], "ovb": [184, 185], "over": [0, 2, 31, 44, 47, 48, 49, 59, 62, 64, 65, 68, 73, 84, 89, 90, 105, 106, 107, 121, 138, 141, 145, 150, 151, 160, 164, 169, 177, 180, 184, 186, 195, 203, 205, 210, 218, 228, 237, 247, 262, 268, 269, 271, 273, 275, 276, 277, 280, 293, 301, 303, 304, 310, 320, 321, 323, 328, 350, 351, 362, 363, 364, 370, 371, 374, 375, 376, 377, 381, 388, 389, 403, 405, 407, 408, 411, 412, 413, 414, 415, 419, 446, 449, 464, 472, 510, 534, 535, 537, 538, 539, 540, 547, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 583, 584, 590, 591, 593, 596, 604, 633, 635, 636, 637, 647, 648, 649, 650, 655, 656, 661, 663, 664, 665, 666, 668, 669, 670, 671, 679, 680, 681, 688, 689, 700, 719, 721, 742, 766, 791, 796, 800, 803, 806, 807, 809, 814, 815, 817, 826, 828, 829, 830, 831, 832, 834, 863, 864, 865, 866, 882, 886, 907, 915, 917, 924, 930, 939, 944, 945, 946, 993, 1000, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1017, 1018, 1019, 1020, 1023, 1024, 1028, 1034, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1047], "overal": [44, 79, 135, 138, 141, 145, 155, 174, 203, 228, 262, 265, 277, 288, 313, 314, 351, 362, 374, 375, 381, 404, 405, 414, 447, 449, 464, 471, 472, 478, 550, 854, 888, 1001, 1004, 1020, 1028, 1044], "overallqu": 155, "overcom": [142, 214, 362, 415], "overcomplet": 412, "overconstrain": 150, "overestim": [128, 358, 411], "overfit": [44, 65, 140, 145, 147, 150, 182, 186, 187, 188, 192, 207, 211, 214, 237, 255, 260, 262, 263, 269, 273, 281, 282, 303, 309, 310, 312, 313, 314, 315, 339, 346, 354, 356, 370, 389, 405, 406, 411, 414, 437, 488, 489, 562, 563, 568, 569, 660, 803, 806, 807, 817, 825, 829, 830, 864, 865, 867, 882, 886, 999, 1008, 1010, 1012, 1014, 1020, 1025, 1028, 1037], "overflow": [374, 383, 387, 403, 1027, 1037, 1041, 1042, 1043, 1044, 1045, 1047], "overflowerror": 1044, "overhead": [48, 288, 363, 364, 375, 381, 384, 387, 389, 414, 441, 445, 449, 535, 702, 839, 840, 842, 843, 844, 845, 846, 847, 848, 1006, 1007, 1037, 1042, 1043, 1046], "overlai": [383, 635], "overlaid": 1011, "overlap": [2, 52, 53, 73, 89, 127, 148, 164, 203, 233, 255, 351, 404, 407, 411, 414, 415, 589, 795, 796, 804, 805, 808, 810, 811, 812, 813, 820, 821, 823, 1001, 1014, 1040], "overli": [53, 63, 64, 200, 273, 358, 412, 1004], "overlin": [268, 404], "overparameter": 1000, "overrid": [326, 377, 415, 446, 450, 457, 543, 549, 590, 591, 593, 595, 596, 599, 659, 667, 688, 689, 809, 826, 849, 850, 851, 853, 855, 857, 858, 859, 1034, 1042, 1044, 1048, 1050], "overridden": [377, 389, 417, 543, 549, 619, 624, 627, 697, 1042, 1043, 1050], "oversampl": [545, 1034], "oversc": 1049, "overset": [412, 1011], "overst": 185, "oversubscript": [781, 1048], "overview": [108, 182, 273, 284, 287, 354, 376, 378, 388, 389, 402, 403, 497, 737, 746, 803, 819, 830, 835, 836, 837, 915, 1006, 1018, 1025, 1029, 1030], "overwhelm": 375, "overwrit": [150, 446, 497, 634, 1034, 1045, 1050, 1051], "overwrite_": 1034, "overwritten": [442, 533, 534, 535, 537, 542, 549, 609, 610, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 659, 660, 663, 664, 665, 666, 675, 677, 682, 684, 685, 686, 687, 689, 973, 1047], "ovo": [285, 317, 791, 835, 909, 912, 1004, 1005, 1019], "ovo_tpr": 277, "ovo_tre": 285, "ovr": [2, 67, 225, 285, 287, 317, 347, 661, 662, 791, 836, 907, 909, 912, 1004, 1005, 1019, 1034, 1039, 1040, 1042, 1043, 1044, 1048, 1049], "ovr_jaccard_scor": 287, "ovr_tre": 285, "ow": 94, "owen": [652, 1043, 1044], "own": [2, 16, 53, 71, 141, 228, 244, 258, 288, 290, 330, 351, 363, 369, 378, 380, 383, 384, 393, 406, 407, 419, 423, 440, 454, 534, 558, 565, 649, 800, 801, 849, 850, 851, 853, 855, 857, 858, 859, 881, 915, 917, 939, 944, 1000, 1004, 1006, 1007, 1010, 1014, 1019, 1023, 1028, 1041, 1042, 1044, 1051, 1053], "own_telephon": 262, "owner": [244, 370, 372, 959, 960], "ownership": 377, "oyamada": 1039, "oyindamola": 1049, "oywa": 1044, "ozga": 1042, "ozsvald": 1036, "p": [0, 2, 51, 54, 62, 64, 65, 77, 95, 112, 113, 116, 119, 128, 146, 161, 165, 172, 190, 222, 227, 228, 230, 232, 241, 268, 274, 275, 301, 369, 370, 372, 373, 380, 383, 404, 405, 406, 407, 409, 410, 412, 414, 416, 417, 418, 420, 442, 444, 446, 447, 450, 455, 456, 457, 469, 471, 474, 475, 478, 499, 529, 535, 539, 541, 542, 548, 550, 551, 552, 554, 556, 557, 558, 559, 560, 562, 565, 566, 567, 592, 594, 595, 596, 597, 598, 600, 601, 602, 606, 607, 608, 609, 610, 611, 618, 619, 630, 643, 646, 652, 691, 693, 695, 697, 702, 708, 718, 727, 744, 755, 789, 791, 805, 811, 812, 813, 816, 832, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 857, 858, 859, 860, 861, 863, 867, 868, 883, 895, 901, 917, 918, 919, 997, 998, 1000, 1001, 1002, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1014, 1018, 1019, 1034, 1035, 1037, 1040, 1042, 1049, 1050, 1051, 1053], "p0": 64, "p1": [64, 157], "p1d": 64, "p2": [64, 157, 228], "p3": 157, "p4": 157, "p5": 951, "p592": 139, "p_": [161, 1004, 1007, 1020], "p_c": [119, 524], "p_e": 719, "p_grid": 273, "p_i": [1004, 1007], "p_k": [275, 1004], "p_n": [275, 710, 1004], "p_o": 719, "p_val": 268, "p_val_uncorrect": 268, "p_valu": [606, 607, 608], "p_w": 119, "p_w_c": [119, 524], "pa": [669, 670, 904, 1000, 1004, 1017], "pab": [1049, 1050], "pablo": [1044, 1047, 1048], "pabloduque0": 1047, "pace": 370, "pacha": 1042, "pacif": 268, "pack": [384, 1042], "packag": [0, 81, 87, 180, 244, 288, 322, 363, 368, 369, 372, 373, 375, 376, 377, 379, 383, 384, 387, 389, 393, 394, 401, 409, 414, 415, 452, 478, 649, 650, 994, 1000, 1003, 1007, 1014, 1020, 1028, 1034, 1040, 1042, 1043, 1044], "packet": 362, "packg": 393, "pacman": 393, "paczuski": [1042, 1043], "pad": [121, 143, 180, 186, 230, 247, 350, 355, 415, 590, 591, 593], "page": [0, 52, 56, 64, 104, 105, 140, 142, 151, 152, 155, 158, 162, 165, 174, 185, 186, 187, 194, 230, 238, 239, 240, 244, 248, 249, 250, 251, 258, 262, 266, 268, 269, 275, 280, 282, 306, 314, 318, 319, 321, 322, 324, 326, 330, 356, 357, 362, 370, 372, 375, 377, 379, 381, 383, 390, 407, 409, 473, 517, 518, 519, 631, 647, 837, 902, 951, 994, 1000, 1004, 1005, 1032, 1034, 1038, 1039], "page_links_en": 56, "page_links_filenam": 56, "page_links_url": 56, "pagerank": [56, 951], "pagh": [190, 996], "pai": [0, 185, 228, 262, 375], "paid": 1000, "pain": 387, "paint": [919, 921], "pair": [2, 50, 53, 73, 80, 92, 98, 126, 137, 139, 143, 147, 173, 177, 193, 219, 222, 228, 241, 263, 268, 275, 277, 333, 335, 337, 339, 340, 341, 343, 351, 355, 370, 387, 389, 404, 405, 408, 411, 415, 417, 437, 440, 441, 445, 450, 457, 463, 471, 472, 478, 494, 509, 510, 584, 594, 597, 598, 600, 601, 602, 613, 616, 617, 618, 620, 622, 623, 625, 626, 628, 630, 635, 636, 646, 648, 695, 702, 703, 708, 709, 710, 718, 734, 743, 761, 762, 766, 769, 772, 773, 774, 775, 776, 777, 779, 781, 782, 783, 784, 785, 789, 835, 847, 848, 922, 1004, 1005, 1006, 1007, 1014, 1020, 1034, 1046, 1047, 1049, 1050, 1051], "pair_confusion_matrix": [2, 407, 1046], "pair_list": 277, "pair_scor": 277, "paired_cosine_dist": [2, 403, 1053], "paired_dist": [2, 766, 772, 781, 1038], "paired_euclidean_dist": [2, 403, 1053], "paired_manhattan_dist": 2, "pairidx": 355, "pairplot": [127, 184, 185], "pairwis": [2, 38, 98, 184, 185, 241, 247, 277, 317, 321, 322, 350, 362, 367, 389, 403, 407, 412, 417, 441, 446, 454, 458, 461, 462, 468, 487, 509, 510, 536, 562, 563, 623, 641, 642, 643, 644, 645, 646, 691, 693, 695, 697, 699, 702, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 791, 795, 796, 835, 851, 855, 859, 873, 905, 924, 996, 1004, 1007, 1016, 1019, 1030, 1034, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1048, 1049, 1050, 1051, 1052, 1053], "pairwise_bayesian": 268, "pairwise_bayesian_df": 268, "pairwise_comp_df": 268, "pairwise_dist": [2, 76, 325, 389, 407, 418, 444, 446, 450, 457, 691, 699, 765, 774, 782, 783, 795, 796, 851, 853, 855, 859, 1002, 1034, 1038, 1040, 1042, 1043, 1045, 1046, 1051, 1052, 1053], "pairwise_dist_chunk_s": [468, 905], "pairwise_distance_funct": [695, 699, 781, 784, 1007], "pairwise_distances_argmin": [2, 98, 321, 783, 1042, 1048, 1049, 1050, 1051], "pairwise_distances_argmin_min": [2, 321, 782, 1037, 1042, 1048, 1049, 1050, 1051], "pairwise_distances_chunk": [2, 362, 781, 1042, 1045, 1051], "pairwise_indices_": 835, "pairwise_kernel": [2, 389, 417, 452, 462, 646, 768, 873, 1002, 1034, 1041, 1051], "pairwise_kernel_funct": [623, 646, 777], "pairwise_kernels_kwarg": 623, "pairwise_t_test": 268, "pairwisedistancesreduct": 363, "pairwisekernel": [2, 417], "paislei": [412, 537], "pakdd": 407, "pal": [1042, 1048], "palacio": 1047, "palafox": 1034, "palett": [185, 268], "palevioletr": [224, 294, 338], "palioura": [842, 1006], "paliw": 1042, "palladium": 1028, "palmol": 52, "pami": [372, 407, 728], "pamnani": 1042, "pan": [395, 1053], "panchal": 1046, "pancholi": 1041, "panda": [2, 44, 52, 63, 103, 104, 105, 135, 141, 142, 144, 147, 150, 152, 164, 174, 180, 184, 185, 186, 187, 188, 192, 196, 200, 210, 214, 218, 228, 247, 248, 251, 258, 262, 266, 268, 269, 271, 279, 280, 282, 285, 313, 314, 315, 317, 320, 321, 326, 346, 350, 351, 369, 370, 373, 374, 375, 377, 378, 383, 387, 389, 393, 400, 408, 431, 442, 443, 445, 447, 449, 464, 466, 468, 482, 483, 484, 485, 489, 490, 491, 493, 497, 501, 502, 503, 505, 506, 511, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 562, 563, 567, 568, 569, 570, 571, 583, 584, 585, 591, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 630, 631, 632, 633, 635, 636, 638, 641, 642, 643, 644, 645, 691, 692, 695, 803, 806, 807, 817, 833, 851, 856, 859, 863, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 905, 929, 993, 994, 1014, 1023, 1024, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "pandata": [1049, 1050], "pandei": [1041, 1046], "panel": [259, 293, 308, 413, 1023], "panga": [1049, 1050], "panico": [1042, 1046], "pankaj": 1046, "pano": 1040, "panpiort8": [1044, 1046], "paolo": [0, 397, 1034, 1038, 1044, 1052], "papadopoulo": [1047, 1048, 1049, 1050, 1051], "papapanagiot": 1041, "paper": [0, 165, 190, 262, 268, 372, 381, 387, 407, 409, 414, 442, 449, 478, 505, 535, 542, 564, 644, 661, 669, 670, 674, 679, 682, 695, 791, 844, 853, 856, 899, 900, 1000, 1004, 1007, 1010, 1019, 1034, 1041, 1042], "paper355": 674, "papier": [667, 688, 689], "par": 1014, "paraboloid": 1000, "paradi": 1049, "paradigm": 1000, "paragraph": [415, 504], "paralel": 1050, "parallel": [2, 54, 139, 141, 143, 186, 212, 269, 318, 319, 321, 344, 357, 361, 367, 373, 375, 376, 378, 387, 389, 408, 418, 419, 437, 444, 446, 448, 449, 450, 452, 457, 458, 461, 464, 467, 472, 532, 534, 535, 536, 538, 540, 542, 543, 544, 546, 547, 549, 556, 557, 558, 559, 564, 565, 566, 567, 568, 569, 570, 571, 591, 596, 604, 609, 610, 613, 635, 637, 642, 661, 691, 692, 693, 694, 695, 696, 697, 784, 803, 806, 807, 809, 814, 817, 825, 826, 828, 829, 830, 831, 832, 834, 835, 836, 837, 839, 840, 849, 850, 851, 853, 855, 857, 858, 859, 860, 861, 866, 869, 902, 903, 970, 973, 1024, 1030, 1034, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1049, 1050, 1053], "parallel_backend": [2, 363, 418, 437, 444, 446, 448, 450, 452, 457, 458, 461, 464, 467, 472, 532, 536, 537, 538, 540, 543, 544, 546, 547, 549, 556, 557, 558, 559, 564, 565, 566, 567, 568, 569, 570, 571, 596, 604, 609, 610, 613, 635, 637, 642, 650, 654, 656, 658, 660, 661, 662, 664, 666, 668, 669, 671, 679, 682, 691, 692, 693, 694, 695, 696, 697, 777, 781, 784, 803, 806, 807, 809, 817, 825, 826, 828, 829, 830, 831, 832, 834, 835, 836, 837, 839, 840, 849, 850, 853, 855, 857, 858, 860, 861, 866, 869, 902, 903, 1042, 1052], "parallel_batch_queri": 288, "parallel_coordin": 269, "parallel_help": 1044, "parallelbackendbas": 973, "parallelis": [269, 468, 905, 1041], "param": [80, 89, 95, 96, 104, 145, 146, 148, 149, 230, 243, 244, 266, 268, 276, 280, 292, 304, 324, 371, 375, 377, 389, 398, 414, 417, 421, 424, 430, 431, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 583, 584, 585, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 687, 691, 692, 693, 694, 695, 800, 801, 802, 803, 806, 807, 815, 817, 825, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 959, 960, 963, 992, 993, 1040, 1044, 1045, 1047, 1048, 1051, 1052, 1053], "param1": 377, "param2": 377, "param3": 377, "param_": 141, "param_c": [279, 803], "param_classifier__c": 104, "param_covariance_typ": 258, "param_degre": 803, "param_dist": [276, 280, 319], "param_distribut": [104, 169, 269, 276, 280, 319, 388, 807, 815, 817, 1050], "param_gamma": [279, 803, 817], "param_grid": [44, 46, 104, 105, 106, 107, 141, 147, 243, 249, 258, 262, 266, 267, 268, 272, 273, 276, 279, 285, 290, 310, 324, 326, 339, 389, 398, 408, 414, 745, 803, 806, 814, 815, 993, 1004], "param_kernel": [803, 817], "param_list": 815, "param_min_samples_split": 272, "param_n_compon": 258, "param_nam": [141, 269, 281, 323, 346, 398, 826, 834, 999], "param_pca__n_compon": 106, "param_preprocessor__cat__selector__percentil": 104, "param_preprocessor__num__imputer__strategi": 104, "param_rang": [281, 323, 346, 826, 834, 999, 1050], "param_reduce_dim__n_compon": 267, "param_valu": 47, "paramet": [2, 26, 28, 44, 45, 49, 50, 51, 54, 55, 65, 71, 80, 88, 89, 92, 94, 95, 96, 104, 105, 106, 111, 113, 114, 119, 121, 127, 133, 135, 139, 141, 143, 144, 145, 148, 149, 150, 162, 165, 169, 170, 173, 174, 175, 176, 177, 178, 180, 181, 182, 185, 186, 192, 193, 194, 195, 196, 198, 199, 200, 202, 207, 210, 212, 214, 215, 218, 227, 228, 234, 235, 237, 239, 242, 243, 244, 253, 254, 255, 256, 258, 259, 261, 262, 267, 268, 269, 270, 272, 273, 276, 279, 280, 285, 288, 290, 291, 294, 295, 301, 303, 304, 306, 308, 309, 310, 312, 313, 317, 318, 320, 321, 322, 323, 326, 332, 334, 336, 341, 343, 344, 345, 347, 348, 350, 351, 352, 354, 355, 356, 358, 362, 363, 364, 367, 368, 370, 377, 378, 380, 382, 383, 384, 387, 398, 402, 405, 406, 407, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 576, 578, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 942, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 994, 995, 996, 997, 998, 999, 1001, 1003, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1016, 1017, 1018, 1020, 1023, 1024, 1025, 1030, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "parameter": [354, 417, 617, 618, 625, 626, 800, 801, 1000, 1001, 1009, 1014, 1020], "parameter_grid": 269, "parameter_nam": [568, 569, 570, 571], "parametergrid": [2, 803, 1036, 1042], "parameters_str": 89, "parametersampl": [2, 817, 1036, 1042, 1046], "parametr": [2, 49, 62, 63, 114, 240, 292, 312, 320, 405, 408, 413, 414, 437, 552, 554, 638, 688, 699, 883, 895, 944, 946, 1000, 1003, 1006, 1007, 1014, 1017, 1020, 1042, 1044, 1047], "parametrize_with_check": [2, 317, 326, 377, 389, 944, 1044, 1045, 1053], "params_str": 280, "parcel": [88, 101, 407], "parch": [187, 322], "pardeep": 1046, "parel": 1038, "parent": [48, 184, 244, 357, 375, 379, 389, 407, 442, 463, 960, 961, 1034, 1051], "parent_hourly_wag": 184, "parenthes": 940, "parenthesi": [77, 375], "paresh": [1043, 1044], "pareto": 212, "pargent": 1014, "pari": [0, 372, 408, 466, 767, 875, 1015, 1048], "pariet": [1028, 1034], "parikh": [1043, 1048, 1049, 1050, 1051, 1052, 1053], "parimi": [1052, 1053], "paris_in_radian": 767, "paristech": 0, "pariti": 1020, "parizi": 1049, "park": [1039, 1044, 1046, 1049, 1050, 1053], "parmet": 1051, "parmind": 1041, "parquet": 53, "parra": 1042, "parri": [1039, 1040, 1041], "parrot": 350, "pars": [48, 56, 362, 369, 370, 376, 509], "parse_vers": [148, 188, 317, 673], "parser": [48, 150, 262, 282, 317, 321, 497, 1049, 1050], "parsifalxu": [1052, 1053], "parsimoni": [412, 1014], "parsing_tim": 48, "parson": [1045, 1047], "part": [0, 45, 46, 68, 72, 85, 95, 104, 114, 121, 124, 127, 138, 141, 143, 147, 153, 162, 174, 182, 192, 244, 246, 256, 262, 263, 265, 283, 303, 310, 313, 315, 326, 352, 364, 370, 372, 375, 377, 381, 383, 388, 389, 393, 395, 403, 405, 406, 407, 411, 412, 414, 415, 417, 446, 449, 494, 495, 496, 522, 532, 538, 543, 575, 586, 587, 588, 616, 628, 796, 872, 890, 892, 893, 894, 895, 896, 897, 898, 993, 994, 996, 1001, 1005, 1022, 1023, 1024, 1025, 1026, 1028, 1030, 1034, 1042, 1043, 1045, 1047, 1049, 1053], "part3": 411, "part_of_speech": 415, "partev": [1048, 1049, 1050, 1051], "parthiv": 1046, "parti": [228, 285, 323, 363, 374, 377, 387, 401, 805, 812, 1034, 1045, 1050, 1051, 1053], "partial": [2, 44, 48, 52, 84, 115, 116, 152, 182, 183, 228, 236, 319, 322, 372, 375, 389, 392, 409, 410, 412, 414, 417, 464, 482, 483, 484, 485, 497, 502, 535, 537, 542, 563, 591, 635, 636, 660, 791, 833, 835, 836, 863, 864, 865, 868, 880, 881, 884, 887, 916, 1001, 1008, 1018, 1025, 1030, 1031, 1035, 1042, 1043, 1047, 1051], "partial_correl": 52, "partial_depend": [2, 186, 635, 1011, 1035, 1043, 1044, 1045, 1046, 1049, 1050], "partial_fit": [48, 84, 121, 321, 364, 377, 389, 407, 412, 442, 449, 535, 537, 538, 539, 591, 599, 661, 662, 669, 670, 671, 679, 680, 681, 835, 836, 839, 840, 842, 843, 844, 845, 846, 863, 864, 865, 876, 877, 887, 907, 992, 1000, 1006, 1008, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1045, 1047, 1048, 1049, 1050, 1051, 1053], "partial_fit_": 1047, "partial_fit_classifi": 48, "partial_fit_param": [599, 835, 836, 839, 840], "partialdependencedisplai": [2, 150, 152, 186, 248, 318, 319, 320, 322, 324, 382, 636, 1011, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "particip": [374, 375, 390, 1028], "particl": 1009, "particular": [0, 44, 51, 54, 65, 73, 75, 76, 94, 104, 110, 119, 126, 129, 144, 147, 150, 151, 173, 180, 185, 186, 210, 212, 218, 242, 262, 265, 269, 271, 277, 288, 297, 301, 308, 317, 318, 321, 326, 351, 352, 358, 362, 363, 369, 370, 373, 374, 375, 377, 379, 380, 381, 383, 384, 388, 389, 393, 407, 408, 411, 412, 414, 415, 416, 417, 446, 469, 473, 497, 545, 564, 611, 656, 661, 666, 675, 677, 687, 690, 715, 731, 788, 839, 932, 934, 994, 996, 998, 1000, 1004, 1007, 1008, 1009, 1010, 1012, 1014, 1028, 1034, 1037, 1041, 1042, 1043, 1045, 1047, 1048, 1049, 1051, 1053], "particularli": [59, 68, 103, 104, 107, 130, 153, 185, 211, 239, 268, 277, 282, 310, 318, 325, 326, 348, 358, 362, 375, 377, 384, 389, 407, 408, 410, 413, 415, 497, 612, 809, 826, 844, 951, 972, 1000, 1001, 1004, 1006, 1012, 1024, 1028, 1034, 1039, 1041, 1042, 1048], "partit": [81, 100, 103, 151, 153, 268, 305, 389, 404, 405, 407, 411, 414, 449, 451, 453, 462, 512, 558, 559, 560, 561, 564, 565, 566, 707, 708, 718, 789, 855, 915, 916, 917, 918, 1003, 1007, 1010, 1014, 1020], "partli": [81, 401, 772], "partnership": 1028, "parvu": 372, "pasbi": [1041, 1042], "pascal": 1004, "pascual": 1037, "paskov": 1041, "pass": [2, 44, 47, 48, 59, 60, 71, 74, 141, 150, 152, 162, 167, 194, 196, 211, 238, 240, 241, 244, 247, 248, 250, 258, 262, 266, 269, 315, 317, 320, 325, 326, 344, 352, 358, 362, 363, 364, 370, 375, 376, 377, 380, 381, 382, 383, 384, 387, 389, 398, 401, 403, 406, 407, 408, 411, 412, 414, 415, 417, 418, 419, 424, 425, 429, 430, 437, 438, 440, 442, 443, 444, 446, 447, 448, 449, 450, 452, 454, 457, 459, 460, 462, 464, 465, 467, 468, 469, 472, 474, 482, 483, 484, 488, 491, 493, 496, 497, 498, 504, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 583, 584, 590, 591, 592, 593, 595, 596, 599, 604, 609, 610, 613, 614, 620, 623, 629, 634, 635, 637, 638, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 687, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 705, 714, 735, 736, 745, 766, 777, 781, 782, 783, 784, 791, 795, 796, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 815, 817, 818, 819, 820, 821, 822, 823, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 878, 879, 880, 881, 882, 884, 886, 887, 888, 896, 897, 898, 899, 900, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 927, 932, 933, 934, 940, 944, 946, 950, 951, 953, 955, 958, 960, 963, 964, 973, 974, 977, 987, 992, 993, 994, 1000, 1002, 1004, 1005, 1006, 1007, 1008, 1011, 1014, 1017, 1018, 1019, 1024, 1028, 1031, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "passiv": [2, 48, 217, 669, 670, 1026, 1030, 1035], "passiveaggress": [364, 415], "passiveaggressiveclassifi": [2, 48, 217, 362, 364, 1000, 1005, 1035, 1038, 1039, 1041, 1042, 1045, 1047, 1052], "passiveaggressiveregressor": [2, 364, 1000, 1035, 1038, 1041, 1042, 1045, 1047, 1052], "passo": [0, 397, 1034, 1035], "passthrough": [44, 105, 144, 185, 186, 210, 228, 247, 314, 322, 408, 464, 467, 568, 569, 866, 867, 1014, 1043, 1045, 1048, 1049, 1051], "passthrough_numer": [210, 228], "passthroughpassthrough": [186, 314], "past": [51, 53, 379, 380, 383, 387, 390, 411, 412, 414, 539, 556, 557, 681, 1028, 1050], "pat": [631, 994], "patch": [2, 71, 84, 247, 253, 254, 255, 258, 259, 263, 370, 387, 412, 414, 556, 557, 585, 586, 589, 1034, 1042], "patch_height": [585, 586, 589], "patch_siz": [84, 124, 415, 585, 586, 589], "patch_width": [585, 586, 589], "patchextractor": [2, 415, 1050], "patel": [1042, 1044, 1045, 1046, 1048, 1053], "path": [2, 48, 56, 182, 191, 196, 197, 200, 202, 205, 214, 226, 281, 346, 354, 369, 373, 375, 379, 383, 384, 389, 401, 441, 445, 450, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 505, 506, 509, 510, 549, 558, 559, 564, 565, 566, 567, 595, 596, 599, 649, 650, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 684, 685, 686, 687, 688, 689, 691, 867, 868, 914, 915, 916, 917, 918, 957, 993, 1000, 1001, 1010, 1025, 1034, 1035, 1038, 1040, 1041, 1043, 1044, 1046, 1047, 1049, 1050], "path_length": 957, "path_method": [691, 1001], "pathak": [1049, 1050], "patheffect": 76, "pathlib": [48, 1049, 1050], "pathlik": [497, 1050], "patholog": [86, 1003, 1040], "pathwai": 376, "pati": 1036, "patienc": [383, 389], "patient": [47, 158, 165, 181, 372, 383, 406, 411, 1000], "patil": [1048, 1051], "paton": 1047, "patric": [1046, 1047], "patricio": 1048, "patrick": [1041, 1042, 1047, 1048, 1051, 1052], "patrini": [1039, 1040, 1041], "pattaniyil": 1044, "pattern": [44, 53, 59, 97, 114, 120, 121, 127, 128, 169, 180, 182, 186, 196, 214, 244, 247, 320, 343, 350, 351, 352, 358, 372, 375, 377, 390, 404, 407, 408, 412, 414, 415, 448, 464, 466, 505, 533, 535, 542, 556, 557, 641, 711, 728, 744, 772, 791, 792, 800, 887, 996, 998, 1000, 1004, 1005, 1011, 1019, 1021, 1024, 1025, 1028, 1046], "patterson": [495, 1039], "paul": [370, 1037, 1040, 1041, 1042, 1043, 1047, 1048], "paula": [1044, 1045, 1052], "pauli": 1039, "paulo": [1041, 1047, 1049], "paus": 81, "pava": 638, "pavel": [1035, 1043], "pavlo": [1042, 1043], "pavlyk": [1042, 1043, 1044, 1045], "pawel": 1043, "pawe\u0142": [1037, 1041, 1046, 1047], "pawson": 1053, "payn": 1044, "pazzani": 65, "pb_q": [320, 1000], "pbl": 147, "pc": [58, 332, 352, 370], "pca": [2, 11, 43, 46, 56, 69, 70, 85, 100, 102, 103, 105, 107, 108, 117, 120, 123, 131, 182, 219, 231, 233, 240, 242, 245, 249, 255, 261, 267, 274, 276, 279, 288, 291, 292, 297, 306, 320, 355, 358, 367, 377, 389, 403, 407, 408, 413, 423, 473, 476, 484, 497, 503, 505, 515, 533, 534, 535, 536, 540, 541, 544, 545, 550, 646, 661, 691, 693, 695, 699, 803, 829, 833, 856, 863, 866, 867, 869, 877, 885, 887, 922, 996, 998, 1001, 1007, 1014, 1018, 1020, 1025, 1029, 1030, 1034, 1036, 1037, 1038, 1040, 1041, 1042, 1045, 1047, 1048, 1049, 1051, 1052], "pca0": 423, "pca1": [408, 423], "pca2": [408, 423], "pca_2": 117, "pca__n_compon": 106, "pca_back_proj_ax": 126, "pca_estim": 121, "pca_proj_ax": 126, "pca_scor": 128, "pcapca": [105, 249], "pcd": [863, 1009], "pchelintsev": 1046, "pclass": [104, 187, 251, 317, 321, 322], "pcolor": 170, "pcolormesh": [71, 153, 291, 296, 335, 339, 343, 634], "pcr": [117, 410], "pd": [44, 52, 63, 104, 105, 135, 141, 142, 147, 152, 164, 180, 184, 185, 186, 187, 188, 192, 196, 200, 210, 214, 218, 228, 248, 251, 258, 266, 268, 269, 271, 279, 280, 282, 285, 313, 314, 315, 320, 321, 346, 350, 351, 380, 389, 408, 464, 466, 630, 631, 632, 633, 635, 781, 931, 933, 934, 993, 994, 1011, 1014, 1045, 1047, 1048, 1049, 1051], "pd2000": 1004, "pd_": 1011, "pd_line_kw": 635, "pd_result": 635, "pdb": 383, "pdbcl": 383, "pdf": [165, 268, 293, 308, 372, 375, 407, 416, 442, 449, 532, 535, 538, 542, 644, 647, 661, 667, 669, 670, 674, 679, 682, 685, 686, 688, 689, 695, 844, 856, 863, 900, 902, 1000, 1004, 1017, 1020, 1027, 1034], "pdist": [695, 781, 784], "pdp": [2, 635, 1011, 1048], "pdp_lim": 635, "pdp_line_kw": 635, "pe": 585, "pe_tran": 585, "peai": 1043, "peak": [44, 53, 65, 186, 405, 411, 1048], "pear": 1005, "pearson": [2, 608, 611, 1047], "pearu": 1034, "pedersen": [1038, 1050], "pedigo": [1046, 1047], "pedregosa": [0, 397, 1034, 1035, 1036, 1037, 1038, 1040], "pedro": [1035, 1037, 1038, 1042], "peek": [186, 375, 1011], "peer": 1028, "peev": [1042, 1045], "pegaso": 1018, "pei": [407, 1041], "peixinho": 1048, "pelennor": 1048, "penal": [2, 54, 67, 114, 155, 196, 200, 204, 210, 214, 226, 228, 281, 313, 346, 407, 409, 412, 414, 416, 469, 470, 471, 472, 473, 474, 475, 476, 478, 562, 563, 650, 655, 656, 664, 666, 679, 708, 718, 737, 789, 798, 880, 907, 908, 914, 1000, 1004, 1006, 1008, 1018, 1019], "penalis": [208, 225, 699], "penalti": [2, 26, 47, 50, 67, 114, 182, 191, 192, 196, 199, 200, 204, 210, 214, 217, 225, 226, 239, 276, 281, 303, 320, 332, 344, 350, 362, 383, 387, 409, 412, 416, 471, 472, 473, 474, 475, 476, 478, 503, 532, 538, 539, 540, 541, 543, 544, 548, 549, 599, 646, 649, 650, 651, 652, 655, 656, 657, 660, 661, 662, 663, 664, 665, 671, 672, 673, 675, 679, 681, 683, 684, 690, 817, 887, 907, 908, 910, 912, 913, 914, 993, 1000, 1003, 1008, 1014, 1018, 1019, 1025, 1036, 1039, 1041, 1043, 1044, 1046, 1047, 1049, 1050], "peng": [682, 1000, 1040, 1041, 1042, 1044, 1046], "peopl": [2, 46, 103, 185, 246, 271, 350, 351, 363, 364, 370, 372, 374, 375, 379, 390, 413, 494, 495, 644, 844, 1023, 1053], "pep": [52, 1034], "pep073": 376, "pep257": 389, "pep440": 379, "pep8": [377, 379], "pepsi": 52, "per": [44, 50, 59, 71, 87, 98, 140, 141, 144, 174, 176, 185, 186, 210, 225, 228, 247, 251, 254, 262, 264, 275, 277, 308, 314, 319, 324, 325, 346, 350, 352, 362, 370, 371, 375, 380, 381, 384, 387, 389, 405, 407, 411, 412, 413, 414, 415, 417, 446, 448, 450, 457, 461, 464, 468, 487, 497, 501, 503, 504, 505, 509, 511, 513, 516, 524, 533, 535, 536, 537, 540, 542, 544, 550, 551, 562, 563, 570, 585, 590, 593, 613, 614, 635, 636, 644, 645, 661, 662, 669, 670, 671, 674, 676, 677, 678, 679, 681, 695, 699, 716, 719, 723, 725, 744, 757, 761, 762, 784, 786, 800, 801, 828, 835, 836, 837, 839, 840, 843, 845, 854, 863, 866, 872, 874, 876, 877, 880, 881, 887, 888, 905, 907, 908, 909, 910, 911, 912, 913, 938, 939, 951, 978, 993, 996, 1000, 1003, 1004, 1005, 1008, 1011, 1018, 1019, 1020, 1024, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1046, 1047, 1048, 1050, 1051], "perc": 263, "percal": 381, "percent": [135, 493, 602, 1017], "percent10": [247, 493], "percentag": [2, 53, 88, 129, 144, 202, 228, 263, 271, 274, 411, 416, 535, 542, 545, 550, 595, 596, 651, 672, 683, 706, 737, 749, 821, 822, 823, 837, 919, 921, 1005, 1020, 1036, 1040, 1046, 1047], "percentil": [2, 50, 53, 104, 147, 150, 247, 251, 308, 362, 594, 597, 598, 600, 601, 602, 605, 608, 635, 636, 751, 1014, 1039, 1047], "percentile_5_predict": 53, "percentile_95_predict": 53, "percentile_perf_in_u": 50, "percentiles_class": 263, "percept": [160, 186, 1011], "perceptron": [2, 48, 68, 143, 153, 171, 173, 182, 217, 220, 223, 226, 248, 302, 310, 311, 333, 344, 347, 348, 364, 387, 415, 515, 516, 523, 669, 679, 833, 863, 864, 865, 868, 887, 1002, 1005, 1009, 1018, 1025, 1026, 1030, 1038, 1040, 1041, 1042, 1046], "percol": 75, "perdisci": [407, 442], "perdok": 1049, "pere": 1051, "peredachi": [609, 610], "pereira": [1039, 1042, 1043, 1053], "peretti": 1049, "perez": [1042, 1049], "perf_count": 247, "perfect": [59, 64, 73, 103, 113, 124, 126, 210, 350, 351, 375, 407, 411, 554, 555, 693, 697, 707, 708, 711, 720, 729, 731, 734, 740, 746, 759, 760, 788, 789, 798, 1000, 1004, 1007, 1019, 1028, 1048], "perfectli": [64, 65, 73, 271, 283, 343, 392, 407, 414, 438, 568, 608, 707, 708, 718, 720, 739, 740, 760, 789, 798, 880, 999, 1001, 1004, 1019, 1047, 1048], "perform": [2, 26, 28, 30, 31, 42, 44, 47, 53, 58, 62, 63, 64, 69, 72, 74, 76, 83, 87, 91, 92, 93, 94, 95, 96, 98, 100, 101, 103, 104, 107, 110, 117, 124, 130, 133, 135, 141, 144, 145, 146, 148, 149, 150, 154, 155, 160, 163, 164, 165, 170, 178, 180, 181, 182, 185, 186, 187, 188, 190, 196, 200, 207, 210, 212, 214, 216, 217, 218, 227, 228, 231, 232, 234, 237, 242, 245, 247, 254, 255, 258, 260, 262, 263, 264, 265, 266, 268, 269, 270, 273, 274, 276, 277, 279, 281, 282, 285, 287, 288, 301, 306, 308, 310, 312, 314, 315, 317, 323, 324, 326, 327, 329, 330, 339, 342, 343, 346, 350, 352, 356, 358, 361, 363, 364, 370, 372, 377, 378, 379, 381, 383, 384, 387, 388, 389, 392, 398, 401, 402, 403, 404, 405, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 425, 429, 440, 442, 443, 444, 446, 447, 448, 450, 452, 454, 455, 459, 461, 468, 469, 482, 483, 484, 485, 495, 503, 513, 516, 532, 533, 534, 536, 538, 543, 544, 545, 546, 547, 549, 551, 552, 553, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 583, 584, 585, 590, 591, 592, 593, 596, 603, 604, 605, 613, 614, 630, 633, 634, 641, 643, 648, 654, 657, 658, 659, 661, 667, 668, 669, 670, 671, 673, 676, 678, 679, 680, 681, 685, 686, 688, 690, 692, 693, 696, 697, 700, 706, 707, 708, 710, 711, 715, 716, 729, 732, 733, 741, 743, 745, 758, 759, 760, 781, 786, 787, 789, 790, 791, 797, 798, 799, 800, 801, 803, 806, 807, 814, 815, 817, 821, 828, 829, 830, 832, 833, 836, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 854, 856, 857, 862, 863, 864, 865, 867, 868, 870, 873, 874, 876, 877, 879, 880, 881, 883, 884, 887, 888, 890, 892, 893, 894, 896, 897, 898, 902, 903, 905, 909, 910, 911, 912, 913, 915, 916, 917, 918, 933, 934, 976, 987, 992, 993, 994, 996, 998, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1017, 1018, 1019, 1020, 1023, 1024, 1025, 1028, 1029, 1030, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "performancetip": 381, "perhap": [103, 143, 372, 374, 383, 389, 413], "perimet": [165, 372], "period": [2, 53, 150, 169, 174, 178, 379, 389, 390, 405, 417, 618, 824, 886, 1042, 1047, 1049], "periodic_spline_transform": 44, "periodicity_bound": [169, 174, 178, 618], "peripheri": 407, "perla": 1037, "perm_scores_iri": 274, "perm_scores_rand": 274, "perm_sorted_idx": 188, "permalink": 379, "perman": 383, "permiss": [374, 379, 390, 393, 394, 1028, 1049], "permit": [408, 467, 590, 591, 593, 803, 806, 807, 817, 829, 868, 869, 1004, 1005, 1006, 1040], "permut": [2, 59, 60, 73, 113, 148, 160, 182, 183, 226, 260, 268, 315, 331, 392, 402, 407, 414, 416, 464, 497, 501, 505, 560, 561, 565, 566, 630, 633, 637, 682, 707, 708, 720, 739, 740, 758, 760, 798, 820, 822, 832, 833, 867, 881, 912, 915, 916, 951, 972, 974, 977, 1004, 1018, 1025, 1030, 1034, 1040, 1047, 1049], "permutation_import": [2, 142, 148, 187, 188, 317, 414, 554, 555, 558, 559, 560, 561, 565, 566, 567, 915, 916, 917, 918, 1012, 1044, 1046, 1047, 1051], "permutation_scor": 832, "permutation_test_scor": [2, 274, 398, 411, 1034, 1041, 1046, 1053], "permuted_categori": 315, "perp_tol": 537, "perpendicular": [71, 344], "perperogl": 1014, "perplex": [182, 229, 230, 232, 234, 288, 515, 526, 537, 695, 1001, 1025, 1039, 1041, 1048], "perri": 1044, "perrin": 1040, "perrot": [0, 1034], "persian": 1023, "persist": [383, 387, 412, 446, 613, 614, 863, 1009, 1023, 1030, 1040, 1043], "persola": 1042, "person": [46, 185, 262, 271, 370, 374, 411, 415, 494, 495, 496, 1014, 1042], "personal_statu": 262, "perspect": [89, 94, 210, 282, 362, 370, 387, 390, 531, 646, 907, 997], "pertin": 210, "perturb": [185, 227, 306, 412, 414, 1003], "peru": [51, 301, 370, 499], "pervas": [358, 375], "pessimist": [146, 414], "pessoa": 1047, "pestrickland": 1040, "pet": [320, 324, 791, 1004], "pet_cat": 320, "pet_dog": 320, "pet_fish": 320, "petal": [127, 129, 131, 143, 251, 319, 322, 372, 408, 920, 1020], "petal_col": 322, "petar": 1049, "pete": [1041, 1045, 1046], "peter": [0, 97, 397, 407, 448, 450, 457, 652, 795, 796, 1000, 1004, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1047, 1049, 1050, 1051], "peterlongo": 1051, "peterson": [1034, 1036], "petfood": 1028, "petrov": [1041, 1042, 1050], "petrushev": 1043, "pe\u00f1a": 1038, "pfaffel": 1047, "pfahring": [838, 1005], "pfe": 52, "pfister": 1014, "pfizer": 52, "pft": 211, "pg": [52, 381, 1039], "pg_i": 652, "pgithub": 1046, "ph": 1046, "pham": [190, 996, 1041], "phan": 412, "pharmaceut": 372, "phase": [44, 196, 205, 362, 630, 996, 1001, 1007, 1028, 1042, 1044], "phase_nois": 76, "phd": [0, 407, 414, 1024, 1028], "phenol": 372, "phenomena": 174, "phenomenon": [351, 1014], "phi": [76, 412, 414, 746, 873, 996, 1004, 1014, 1019], "phi_coeffici": 1004, "phil": [1039, 1050], "philipp": [1036, 1037, 1040, 1049], "phillip": [2, 51, 301, 370, 499], "phlypo": 1037, "phongpanagnam": 1047, "phongpanangam": 1047, "photogrammetr": 1000, "php": 1004, "phrase": 415, "phy": [609, 610], "phyo": 1048, "physic": [2, 103, 141, 363, 506, 968, 1000, 1050], "physician": 406, "physiolog": [271, 372], "pi": [44, 54, 71, 75, 76, 122, 130, 152, 154, 160, 169, 193, 196, 198, 205, 211, 232, 253, 254, 255, 258, 259, 283, 301, 318, 324, 356, 393, 413, 417, 517, 518, 519, 618, 645, 998, 999, 1000, 1006], "pianomania": 1039, "pick": [89, 94, 188, 245, 276, 321, 328, 370, 375, 379, 407, 414, 443, 460, 524, 676, 917, 918, 993, 1000, 1001, 1003, 1018, 1045], "pickl": [379, 389, 415, 591, 847, 848, 1023, 1024, 1030, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1047, 1048, 1049, 1050, 1051], "pickleabl": [871, 1040], "pickup": 1042, "pico": [1037, 1038], "pict": [837, 1005], "pictur": [52, 56, 60, 72, 87, 100, 124, 182, 241, 259, 370, 390, 407, 412, 415, 462, 494, 495, 522, 1024, 1025], "piec": [71, 82, 167, 211, 363, 1003], "piecewis": [130, 320, 404, 995, 1000, 1014, 1020], "pierr": [1034, 1042, 1043, 1045, 1047, 1049, 1051, 1052], "pierreablin": 1042, "pierreattard": [1047, 1048], "pierretallott": [1042, 1043, 1044], "pierron": 1037, "piet": [1048, 1049], "pieter": [56, 1040, 1041, 1048], "pietro": [1034, 1037, 1051], "pietruh": 1042, "pig": 786, "pillow": [375, 393, 400], "pim": 1043, "pin": [381, 401], "pinaki": 1042, "pinbal": [2, 53, 147, 150, 320, 414, 563, 673, 726, 751, 1000, 1047, 1048], "pinball_loss_05": 53, "pinball_loss_50": 53, "pinball_loss_95": 53, "ping": [900, 1016, 1040, 1041], "pink": 193, "pinki": 1048, "pinot": 314, "pinto": 1034, "pintor": 1045, "pinvh": [1041, 1043], "piontek": 1050, "piotr": [1042, 1043, 1052, 1053], "pip": [288, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 363, 373, 375, 379, 381, 383, 393, 401, 403, 1020], "pip3": [373, 393], "pipe": [105, 106, 144, 163, 244, 249, 267, 314, 319, 320, 388, 398, 408, 415, 592, 867, 892, 893, 895, 896, 897, 898, 993, 1014], "pipe_sgd": 224, "pipegraph": 387, "pipelin": [2, 7, 44, 68, 88, 92, 104, 107, 108, 117, 140, 141, 144, 159, 161, 163, 164, 165, 180, 181, 186, 187, 190, 192, 198, 200, 210, 211, 216, 224, 228, 231, 236, 237, 238, 240, 242, 247, 248, 251, 260, 262, 265, 267, 268, 275, 276, 279, 282, 283, 288, 290, 291, 296, 297, 303, 306, 310, 313, 315, 317, 318, 319, 320, 321, 322, 323, 332, 350, 351, 358, 362, 367, 369, 370, 375, 377, 389, 398, 401, 411, 415, 417, 421, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 488, 503, 516, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 583, 584, 585, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 607, 609, 612, 613, 614, 630, 631, 632, 633, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 691, 692, 693, 694, 695, 700, 701, 703, 704, 705, 716, 800, 801, 802, 803, 804, 805, 806, 807, 810, 812, 817, 821, 825, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 993, 994, 996, 1000, 1007, 1008, 1013, 1014, 1018, 1019, 1023, 1024, 1025, 1026, 1028, 1030, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1051], "pipelineifittedpipelin": [104, 140, 162, 185, 187, 238, 248, 251, 275, 321], "pipelineinot": [155, 239, 249, 269, 282, 314, 318], "pipelinepipelin": [104, 105, 249, 262], "pita": 1051, "pitfal": [165, 182, 183, 184, 187, 214, 215, 268, 319, 388, 389, 392, 411, 465, 467, 497, 656, 675, 676, 704, 756, 818, 830, 833, 868, 880, 887, 1000, 1025, 1030], "pitkin": [186, 1011], "pitt": 58, "pitter": 1049, "pivot": [81, 279, 280], "pivot_t": 279, "pixel": [2, 45, 46, 54, 59, 69, 82, 87, 121, 163, 190, 241, 266, 305, 306, 372, 407, 412, 415, 416, 494, 495, 496, 587, 588, 609, 610, 1007, 1009, 1020], "pixelwis": 121, "pixi": 401, "piyg": 310, "pkdd": 0, "pkg": 373, "pkgsrc": 393, "pkl": 401, "pl": [2, 53, 106, 117, 174, 324, 372, 410, 482, 483, 484, 485, 1039], "place": [2, 44, 94, 238, 248, 292, 362, 375, 376, 377, 380, 382, 390, 405, 411, 415, 417, 441, 442, 445, 446, 482, 483, 484, 516, 583, 592, 631, 633, 634, 771, 784, 800, 890, 892, 893, 894, 895, 896, 897, 898, 982, 983, 1023, 1034, 1041, 1044, 1045, 1047, 1051, 1052, 1053], "placehold": [58, 379, 630, 631, 632, 633, 818, 819, 822, 823, 992, 994], "plagre": 1041, "plai": [122, 148, 171, 219, 261, 299, 335, 336, 362], "plain": [341, 417, 660, 1018], "plan": [52, 369, 373, 375, 376, 390, 401, 1014, 1037], "planar": 407, "plane": [52, 165, 222, 242, 294, 341, 343, 344, 348, 372, 452, 462, 998, 1000, 1019], "plant": [274, 277, 278, 368, 1004, 1030], "plasma": 308, "plasma_r": 308, "plateau": [141, 145, 164, 262, 266, 270], "platform": [326, 378, 389, 390, 1023, 1027, 1028, 1039, 1042, 1043, 1045, 1047, 1048, 1051, 1052, 1053], "platt": [405, 437, 909, 910, 912, 913, 1019], "platypu": 350, "pldtc325": 1041, "pleas": [0, 2, 52, 56, 64, 104, 105, 140, 142, 148, 151, 152, 155, 158, 162, 167, 174, 185, 186, 187, 194, 214, 238, 239, 240, 242, 244, 247, 248, 249, 250, 251, 258, 262, 266, 268, 269, 275, 280, 282, 288, 298, 306, 314, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 330, 343, 356, 357, 363, 369, 370, 373, 375, 376, 377, 379, 383, 387, 388, 389, 393, 398, 401, 403, 407, 414, 415, 421, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 497, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 583, 584, 585, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 612, 613, 614, 630, 631, 632, 633, 634, 635, 636, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 691, 692, 693, 694, 695, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 830, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 896, 899, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 993, 1004, 1008, 1014, 1018, 1019, 1023, 1024, 1027, 1034, 1037, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "pleasant": [374, 1028], "plenti": 63, "plgreenliru": 1045, "plo": [369, 609, 610], "plot": [2, 44, 45, 46, 51, 52, 53, 55, 63, 64, 65, 66, 68, 69, 70, 72, 73, 76, 78, 79, 88, 89, 90, 92, 93, 94, 95, 96, 99, 105, 106, 107, 108, 111, 112, 113, 117, 118, 121, 124, 125, 128, 129, 130, 131, 134, 135, 137, 138, 139, 140, 142, 145, 146, 147, 149, 150, 152, 153, 154, 160, 161, 163, 169, 170, 171, 172, 173, 174, 175, 176, 178, 180, 182, 183, 184, 185, 187, 188, 190, 191, 195, 198, 199, 200, 201, 203, 206, 208, 209, 210, 211, 212, 213, 216, 217, 218, 220, 222, 223, 225, 226, 227, 228, 232, 233, 234, 235, 236, 237, 240, 241, 243, 245, 246, 251, 253, 254, 255, 257, 259, 260, 261, 262, 263, 268, 269, 271, 273, 274, 278, 279, 280, 281, 282, 283, 285, 288, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 303, 304, 305, 308, 309, 310, 311, 312, 313, 315, 318, 321, 322, 323, 324, 329, 330, 331, 333, 334, 335, 339, 340, 341, 344, 345, 346, 347, 348, 351, 352, 353, 354, 357, 375, 378, 384, 387, 389, 392, 393, 402, 405, 407, 409, 411, 413, 414, 438, 441, 446, 450, 456, 464, 471, 497, 502, 503, 505, 513, 524, 554, 558, 561, 563, 565, 566, 570, 571, 613, 625, 634, 635, 636, 660, 661, 675, 679, 700, 701, 703, 704, 705, 706, 721, 730, 738, 764, 785, 787, 790, 791, 792, 803, 809, 820, 826, 828, 829, 830, 831, 834, 836, 845, 849, 865, 868, 880, 881, 882, 884, 887, 907, 909, 912, 915, 916, 921, 997, 998, 1000, 1001, 1003, 1004, 1005, 1007, 1008, 1010, 1018, 1019, 1020, 1023, 1024, 1025, 1030, 1035, 1037, 1038, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "plot_": [320, 393], "plot_2d": [119, 230], "plot_3d": 230, "plot_accuraci": 48, "plot_adaboost_multiclass": [135, 1025], "plot_adaboost_regress": [136, 1025], "plot_adaboost_twoclass": [137, 1025], "plot_adjusted_for_chance_measur": [73, 1025], "plot_affinity_propag": [74, 1025], "plot_agglomerative_clust": [75, 1025], "plot_agglomerative_clustering_metr": [76, 1025], "plot_agglomerative_dendrogram": [77, 1025], "plot_all_sc": [308, 1025], "plot_anomaly_comparison": [237, 1025], "plot_ard": [192, 647, 1025], "plot_arg": 304, "plot_bayesian_ridge_curvefit": [193, 1025], "plot_benchmark_throughput": 50, "plot_bias_vari": [138, 1025], "plot_bicluster_newsgroup": [58, 1025], "plot_birch_vs_minibatchkmean": [78, 1025], "plot_bisect_kmean": [79, 1025], "plot_caching_nearest_neighbor": [290, 1025], "plot_calibr": [62, 375, 1025], "plot_calibration_curv": [63, 1025], "plot_calibration_multiclass": [64, 1025], "plot_causal_interpret": [184, 1025], "plot_chance_level": [247, 262, 275, 277, 278, 703, 705, 1050], "plot_classif": [291, 1025], "plot_classification_prob": [67, 1025], "plot_classifier_chain_yeast": [287, 1025], "plot_classifier_comparison": [68, 1025], "plot_clust": 86, "plot_cluster_comparison": [80, 1025], "plot_coin_segment": [81, 1025], "plot_coin_ward_segment": [82, 1025], "plot_color": [137, 355], "plot_column_transform": [103, 1025], "plot_column_transformer_mixed_typ": [104, 1025], "plot_compare_calibr": [65, 1025], "plot_compare_cross_decomposit": [116, 1025], "plot_compare_gpr_krr": [169, 1025], "plot_compare_method": [230, 1025], "plot_compare_reduct": [105, 1025], "plot_concentration_prior": [253, 1025], "plot_confusion_matrix": [261, 317, 1025, 1044, 1045, 1046, 1047], "plot_cost_complexity_prun": [354, 1025], "plot_cost_sensitive_learn": [262, 1025], "plot_covariance_estim": [110, 1025], "plot_custom_kernel": [335, 1025], "plot_cv_indic": [263, 1025], "plot_cv_predict": [264, 1025], "plot_cyclical_feature_engin": [44, 1025], "plot_dbscan": [83, 1025], "plot_decision_funct": 348, "plot_dendrogram": 77, "plot_det": [265, 1025], "plot_det_curv": [1046, 1047], "plot_dict_face_patch": [84, 1025], "plot_digit": 45, "plot_digits_agglomer": [85, 1025], "plot_digits_classif": [69, 1025], "plot_digits_denois": [45, 1025], "plot_digits_kde_sampl": [292, 1025], "plot_digits_linkag": [86, 1025], "plot_digits_pip": [106, 1025], "plot_discret": [309, 1025], "plot_discretization_classif": [310, 1025], "plot_discretization_strategi": [311, 1025], "plot_display_object_visu": [238, 1025], "plot_distribut": 308, "plot_document_classification_20newsgroup": [350, 1025], "plot_document_clust": [351, 1025], "plot_elastic_net_precomputed_gram_matrix_with_weighted_sampl": [194, 1025], "plot_ellips": [71, 253], "plot_embed": 231, "plot_ensemble_oob": [139, 1025], "plot_estimator_represent": [239, 1025], "plot_f_test_vs_mi": [160, 1025], "plot_face_compress": [87, 1025], "plot_face_recognit": [46, 1025], "plot_faces_decomposit": [121, 1025], "plot_feature_agglomeration_vs_univariate_select": [88, 1025], "plot_feature_effect": 350, "plot_feature_select": [161, 1025], "plot_feature_selection_pipelin": [162, 1025], "plot_feature_transform": [140, 1025], "plot_feature_union": [107, 1025], "plot_forest_hist_grad_boosting_comparison": [141, 1025], "plot_forest_import": [142, 1025], "plot_forest_iri": [143, 1025], "plot_frozen_exampl": [167, 1025], "plot_galleri": [46, 121], "plot_gmm": [254, 1025], "plot_gmm_covari": [255, 1025], "plot_gmm_init": [256, 1025], "plot_gmm_pdf": [257, 1025], "plot_gmm_select": [258, 1025], "plot_gmm_sin": [259, 1025], "plot_gpc": [170, 1025], "plot_gpc_iri": [171, 1025], "plot_gpc_isoprob": [172, 1025], "plot_gpc_xor": [173, 1025], "plot_gpr_co2": [174, 1025], "plot_gpr_noisi": [175, 1025], "plot_gpr_noisy_target": [176, 1025], "plot_gpr_on_structured_data": [177, 1025], "plot_gpr_prior_posterior": [178, 1025], "plot_gpr_sampl": 178, "plot_gradient_boosting_categor": [144, 1025], "plot_gradient_boosting_early_stop": [145, 1025], "plot_gradient_boosting_oob": [146, 1025], "plot_gradient_boosting_quantil": [147, 1025], "plot_gradient_boosting_regress": [148, 1025], "plot_gradient_boosting_regular": [149, 1025], "plot_grid_search_digit": [266, 1025], "plot_grid_search_refit_cal": [267, 1025], "plot_grid_search_stat": [268, 1025], "plot_grid_search_text_feature_extract": [269, 1025], "plot_hashing_vs_dict_vector": [352, 1025], "plot_hdbscan": [89, 1025], "plot_hgbt_regress": [150, 1025], "plot_huber_vs_ridg": [195, 1025], "plot_hyperplan": [203, 219, 245], "plot_ica_blind_source_separ": [122, 1025], "plot_ica_vs_pca": [123, 1025], "plot_idx": 143, "plot_image_denois": [124, 1025], "plot_incremental_pca": [125, 1025], "plot_indic": 271, "plot_inductive_clust": [90, 1025], "plot_influ": 47, "plot_info": 144, "plot_iris_dtc": [355, 1025], "plot_iris_svc": [336, 1025], "plot_isolation_forest": [151, 1025], "plot_isotonic_regress": [240, 1025], "plot_iterative_imputer_variants_comparison": [180, 1025], "plot_johnson_lindenstrauss_bound": [241, 1025], "plot_kde_1d": [293, 1025], "plot_kernel_approxim": [242, 1025], "plot_kernel_pca": [126, 1025], "plot_kernel_ridge_regress": [243, 1025], "plot_kind": 44, "plot_kmeans_assumpt": [91, 1025], "plot_kmeans_digit": [92, 1025], "plot_kmeans_plusplu": [93, 1025], "plot_kmeans_silhouette_analysi": [94, 1025], "plot_kmeans_stability_low_dim_dens": [95, 1025], "plot_label_propagation_digit": [328, 1025], "plot_label_propagation_digits_active_learn": [329, 1025], "plot_label_propagation_structur": [330, 1025], "plot_lasso_and_elasticnet": [196, 1025], "plot_lasso_dense_vs_sparse_data": [197, 1025], "plot_lasso_lars_": [198, 1025], "plot_lasso_lasso_lars_elasticnet_path": [199, 649, 650, 655, 656, 663, 664, 665, 666, 684, 687, 1025], "plot_lasso_model_select": [200, 650, 656, 1025], "plot_lda": [70, 1025], "plot_lda_qda": [71, 1025], "plot_learning_curv": [270, 1025], "plot_likelihood_ratio": [271, 1025], "plot_linear_model_coefficient_interpret": [185, 1025], "plot_linearsvc_support_vector": [337, 1025], "plot_linkage_comparison": [96, 1025], "plot_lle_digit": [231, 1025], "plot_lof_novelty_detect": [294, 1025], "plot_lof_outlier_detect": [295, 1025], "plot_logist": [201, 1025], "plot_logistic_l1_l2_spars": [202, 1025], "plot_logistic_multinomi": [203, 1025], "plot_logistic_path": [204, 1025], "plot_lw_vs_oa": [111, 1025], "plot_mahalanobis_dist": [112, 1025], "plot_manifold_spher": [232, 1025], "plot_map_data_to_norm": [312, 1025], "plot_md": [233, 1025], "plot_mean_shift": [97, 1025], "plot_metadata_rout": [244, 1025], "plot_method": [49, 71, 224, 291, 296, 335, 337, 338, 340, 341, 343, 634], "plot_mini_batch_kmean": [98, 1025], "plot_missing_valu": [181, 1025], "plot_mlp_alpha": [303, 1025], "plot_mlp_training_curv": [304, 1025], "plot_mnist_filt": [305, 1025], "plot_model_complexity_influ": [47, 1025], "plot_monotonic_constraint": [152, 1025], "plot_multi_metric_evalu": [272, 1025], "plot_multi_task_lasso_support": [205, 1025], "plot_multiclass_overview": [285, 1025], "plot_multilabel": [245, 1025], "plot_multioutput_face_complet": [246, 1025], "plot_n_features_influ": 50, "plot_nca_classif": [296, 1025], "plot_nca_dim_reduct": [297, 1025], "plot_nca_illustr": [298, 1025], "plot_nearest_centroid": [299, 1025], "plot_nested_cross_validation_iri": [273, 1025], "plot_nnl": [206, 1025], "plot_num": [80, 96, 237], "plot_obs_pr": 228, "plot_ol": [207, 1025], "plot_ols_ridge_vari": [208, 1025], "plot_omp": [209, 1025], "plot_on_dataset": 304, "plot_oneclass": [338, 1025], "plot_opt": [99, 1025], "plot_out_of_core_classif": [48, 1025], "plot_outlier_detection_bench": [247, 1025], "plot_outlier_detection_win": [49, 1025], "plot_partial_depend": [186, 317, 318, 319, 1025, 1039, 1043, 1044, 1045, 1046, 1047, 1048], "plot_partial_dependence_visualization_api": [248, 1025], "plot_pca_iri": [127, 1025], "plot_pca_vs_fa_model_select": [128, 1025], "plot_pca_vs_lda": [129, 1025], "plot_pcr_vs_pl": [117, 1025], "plot_permutation_import": [187, 188, 1025], "plot_permutation_importance_multicollinear": [188, 1025], "plot_permutation_tests_for_classif": [274, 1025], "plot_pipeline_displai": [249, 1025], "plot_poisson_regression_non_normal_loss": [210, 1025], "plot_polynomial_interpol": [211, 882, 886, 1025], "plot_precision_recal": [275, 1025], "plot_precision_recall_curv": [317, 1044, 1046, 1047], "plot_prediction_lat": [50, 1025], "plot_quantile_regress": [212, 1025], "plot_random_forest_embed": [153, 1025], "plot_random_forest_regression_multioutput": [154, 1025], "plot_random_multilabel_dataset": [119, 1025], "plot_randomized_search": [276, 1025], "plot_rang": 137, "plot_ransac": [213, 1025], "plot_rbf_paramet": [339, 1025], "plot_rbm_logistic_classif": [306, 1025], "plot_regress": [300, 1025], "plot_release_highlights_0_22_0": [317, 1025], "plot_release_highlights_0_23_0": [318, 1025], "plot_release_highlights_0_24_0": [319, 1025], "plot_release_highlights_1_0_0": [320, 1025], "plot_release_highlights_1_1_0": [321, 1025], "plot_release_highlights_1_2_0": [322, 1025], "plot_release_highlights_1_3_0": [323, 1025], "plot_release_highlights_1_4_0": [324, 1025], "plot_release_highlights_1_5_0": [325, 1025], "plot_release_highlights_1_6_0": [326, 1025], "plot_result": [71, 144, 253, 254, 259], "plot_rfe_digit": [163, 1025], "plot_rfe_with_cross_valid": [164, 1025], "plot_ridge_coeff": [214, 1025], "plot_ridge_path": [215, 1025], "plot_robust_fit": [216, 1025], "plot_robust_vs_empirical_covari": [113, 1025], "plot_roc": [277, 1025], "plot_roc_crossv": [278, 1025], "plot_roc_curv": [317, 1044, 1046], "plot_roc_curve_visualization_api": [250, 1025], "plot_roc_pr_curv": 262, "plot_sampl": [123, 259], "plot_scalable_poly_kernel": [190, 1025], "plot_scaling_import": [313, 1025], "plot_scatt": 90, "plot_segmentation_toi": [100, 1025], "plot_select_from_model_diabet": [165, 1025], "plot_self_training_varying_threshold": [331, 1025], "plot_semi_supervised_newsgroup": [332, 1025], "plot_semi_supervised_versus_svm_iri": [333, 1025], "plot_separating_hyperplan": [340, 1025], "plot_separating_hyperplane_unbalanc": [341, 1025], "plot_set_output": [251, 1025], "plot_sgd_comparison": [217, 1025], "plot_sgd_early_stop": [218, 1025], "plot_sgd_iri": [219, 1025], "plot_sgd_loss_funct": [220, 1025], "plot_sgd_penalti": [221, 1025], "plot_sgd_separating_hyperplan": [222, 1025], "plot_sgd_weighted_sampl": [223, 1025], "plot_sgdocsvm_vs_ocsvm": [224, 1025], "plot_sparse_cod": [130, 1025], "plot_sparse_cov": [114, 1025], "plot_sparse_logistic_regression_20newsgroup": [225, 1025], "plot_sparse_logistic_regression_mnist": [226, 1025], "plot_species_distribut": 51, "plot_species_distribution_model": [51, 1025], "plot_species_kd": [301, 1025], "plot_spectral_biclust": [59, 1025], "plot_spectral_coclust": [60, 1025], "plot_stack_predictor": [155, 1025], "plot_step": [137, 143, 355], "plot_step_coars": 143, "plot_stock_market": [52, 1025], "plot_subfigur": 245, "plot_successive_halving_heatmap": [279, 1025], "plot_successive_halving_iter": [280, 1025], "plot_surfac": 186, "plot_svm_anova": [342, 1025], "plot_svm_kernel": [343, 1025], "plot_svm_margin": [344, 1025], "plot_svm_regress": [345, 1025], "plot_svm_scale_c": [346, 1025], "plot_svm_tie_break": [347, 1025], "plot_swissrol": [234, 1025], "plot_t_sne_perplex": [235, 1025], "plot_target_encod": [314, 1025], "plot_target_encoder_cross_v": [315, 1025], "plot_theilsen": [227, 1025], "plot_time_series_lagged_featur": [53, 1025], "plot_titl": 253, "plot_tomography_l1_reconstruct": [54, 1025], "plot_top_word": 55, "plot_topics_extraction_with_nmf_lda": [55, 1025], "plot_train_error_vs_test_error": [281, 1025], "plot_training_data_with_decision_boundari": 343, "plot_transformed_target": [108, 1025], "plot_tre": [2, 355, 357, 1020, 1043, 1045, 1046, 1047, 1049, 1050, 1052], "plot_tree_regress": [356, 1025], "plot_tuned_decision_threshold": [282, 1025], "plot_tweedie_regression_insurance_claim": [228, 1025], "plot_underfitting_overfit": [283, 1025], "plot_unveil_tree_structur": [357, 1025], "plot_varimax_fa": [131, 1025], "plot_voting_decision_region": [156, 1025], "plot_voting_proba": [157, 1025], "plot_voting_regressor": [158, 1025], "plot_ward_structured_vs_unstructur": [101, 1025], "plot_weighted_sampl": [348, 1025], "plotli": [141, 269, 375, 393, 400], "pls1": [410, 484], "pls2": [410, 484], "plsca": [116, 483], "plscanon": [2, 116, 482, 484, 485, 1005, 1026, 1030, 1038, 1042, 1044, 1046, 1048, 1052], "plsregress": [2, 116, 117, 1005, 1026, 1030, 1041, 1044, 1046, 1048, 1050, 1052, 1053], "plssvd": [2, 482, 483, 1026, 1030, 1046, 1048, 1052], "plsw2a": 410, "plt": [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 105, 106, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 163, 164, 165, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 184, 185, 186, 188, 190, 192, 193, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 237, 238, 240, 241, 242, 243, 245, 246, 247, 248, 250, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 267, 268, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 321, 322, 324, 328, 329, 330, 331, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 371, 382, 438, 503, 634, 635, 700, 701, 703, 704, 705, 809, 826, 921, 1011, 1031], "plu": [275, 372, 380, 682, 838, 841, 1005, 1018], "plug": [412, 1000, 1028], "plugin": 393, "plural": 1040, "pm": [178, 186, 278, 414, 1004], "pmlr": 699, "pmml": 1023, "png": [0, 69, 919], "pnucci": 1050, "po": [148, 233, 415], "podshumok": [1040, 1041], "poesio": 719, "poetri": 401, "poh": [1042, 1043], "point": [2, 8, 38, 44, 49, 51, 53, 54, 64, 68, 73, 74, 76, 77, 83, 86, 89, 92, 94, 98, 101, 112, 113, 116, 119, 120, 122, 124, 126, 127, 135, 137, 141, 143, 144, 145, 150, 153, 164, 165, 167, 171, 176, 177, 182, 185, 186, 187, 192, 200, 205, 207, 208, 210, 211, 212, 214, 216, 219, 222, 223, 227, 228, 230, 231, 232, 233, 234, 237, 240, 242, 255, 259, 260, 261, 265, 269, 270, 271, 275, 277, 278, 285, 287, 288, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 303, 309, 310, 312, 314, 325, 328, 329, 331, 333, 335, 339, 340, 341, 343, 344, 347, 348, 350, 351, 352, 355, 356, 358, 362, 363, 364, 369, 370, 371, 372, 373, 374, 375, 377, 379, 380, 381, 383, 387, 389, 390, 403, 406, 407, 412, 413, 414, 415, 418, 419, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 452, 454, 455, 456, 457, 458, 460, 461, 469, 472, 474, 497, 499, 505, 513, 515, 516, 520, 523, 526, 531, 534, 536, 542, 553, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 613, 614, 631, 634, 635, 636, 640, 641, 642, 647, 648, 654, 658, 660, 661, 673, 674, 676, 678, 679, 681, 682, 685, 686, 691, 692, 693, 694, 695, 696, 697, 704, 709, 710, 713, 716, 720, 726, 728, 734, 739, 740, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 767, 782, 783, 793, 794, 800, 801, 803, 817, 819, 825, 828, 830, 837, 847, 848, 849, 850, 851, 852, 853, 855, 857, 858, 859, 860, 861, 864, 865, 868, 872, 877, 886, 887, 901, 902, 903, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 921, 923, 931, 996, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1014, 1016, 1017, 1019, 1020, 1023, 1024, 1025, 1030, 1034, 1035, 1036, 1038, 1040, 1041, 1042, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "pointer": [375, 383, 442, 1043], "pointplot": 150, "points_color": 230, "pointwis": [138, 176, 418, 444], "poisson": [2, 44, 53, 182, 191, 245, 371, 414, 464, 465, 497, 524, 553, 559, 563, 566, 651, 672, 675, 683, 709, 727, 748, 752, 753, 755, 833, 867, 868, 871, 872, 880, 881, 882, 887, 916, 918, 955, 1000, 1020, 1025, 1044, 1045, 1046, 1047, 1048, 1050, 1051], "poisson_gbrt": 210, "poisson_glm": 210, "poissonregressor": [2, 210, 228, 318, 321, 326, 651, 683, 1000, 1045, 1048, 1049, 1053], "pokorni": 1049, "pola": [53, 322], "polar": [106, 174, 322, 375, 377, 387, 393, 400, 431, 442, 443, 445, 447, 449, 464, 468, 482, 483, 484, 485, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 562, 563, 567, 568, 569, 570, 571, 583, 584, 585, 591, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 630, 631, 632, 633, 638, 641, 642, 643, 644, 645, 691, 692, 695, 851, 856, 859, 863, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 905, 1051, 1052], "polars_allow_forking_thread": 322, "pole": 232, "poli": [44, 190, 268, 336, 343, 345, 452, 536, 623, 768, 777, 803, 882, 909, 910, 911, 912, 913, 1000, 1014], "polici": [150, 184, 185, 210, 228, 262, 378, 389, 536, 542, 1000, 1049], "policyhold": [210, 228, 1000], "polit": [58, 350, 370, 374, 1000, 1005], "pollak": [1052, 1053], "polli": 350, "pollut": [350, 731, 788, 1004, 1010], "polmauri": 1041, "poloso": 1048, "polycollect": [809, 826], "polynomi": [2, 55, 180, 182, 189, 191, 210, 216, 242, 249, 268, 283, 293, 319, 320, 336, 345, 367, 371, 452, 491, 623, 642, 643, 644, 646, 648, 675, 768, 777, 778, 833, 868, 877, 879, 882, 886, 907, 909, 910, 911, 912, 913, 999, 1019, 1025, 1026, 1030, 1046, 1047], "polynomial_featur": 283, "polynomial_kernel": [2, 403, 768, 1002, 1051, 1053], "polynomialcountsketch": [2, 190, 642, 644, 996, 1046, 1048, 1051], "polynomialfeatur": [2, 44, 192, 210, 211, 216, 249, 283, 319, 343, 886, 1000, 1014, 1038, 1042, 1043, 1044, 1047, 1048, 1050, 1051], "polynomialfeaturespolynomialfeatur": 249, "polysemi": 412, "polytop": 516, "pomegran": 1023, "ponc": [412, 532, 538], "poncho": 1028, "pone": 369, "ponnuthurai": 372, "ponzi": 314, "pooch": [87, 375, 393, 400], "pooja": [1049, 1050, 1051], "pool": [387, 445, 638, 854, 972, 1024, 1045], "pooling_func": [445, 1042], "poolqc": 144, "poolsawat": [1048, 1049], "poor": [186, 190, 274, 331, 405, 411, 412, 693, 697, 741, 844, 847, 848, 998, 999, 1001, 1006, 1041, 1042, 1043, 1045, 1047], "poor_scor": [923, 925], "poorer": [144, 358, 412], "poorest": 1006, "poorli": [63, 65, 96, 110, 117, 138, 149, 234, 363, 407, 414, 529, 633, 1000, 1001, 1040], "poorna": [1044, 1046], "pop": [357, 387, 922, 1042], "popa": [1044, 1045], "popitem": 922, "popo": 1037, "popul": [105, 110, 112, 150, 185, 210, 247, 271, 277, 308, 370, 384, 389, 409, 440, 490, 715, 721, 849, 850, 851, 853, 855, 857, 858, 859, 972, 1004, 1010, 1014, 1020], "popular": [6, 10, 180, 234, 370, 373, 380, 383, 387, 389, 413, 414, 415, 417, 452, 462, 994, 996, 1000, 1002, 1009, 1018, 1024], "port": [373, 393, 1044], "portabl": [401, 1023], "portfolio": [210, 228, 998], "portion": [46, 48, 113, 145, 165, 277, 362, 370, 372, 375, 381, 389, 791, 828, 845, 993, 1003, 1007], "portland": [407, 418, 444], "portnoi": [1000, 1051], "portrait": [46, 412], "pos_class": 48, "pos_label": [238, 247, 262, 282, 389, 406, 438, 439, 701, 703, 705, 709, 710, 712, 730, 732, 733, 741, 785, 786, 787, 790, 792, 802, 874, 891, 1004, 1042, 1046, 1048, 1052], "pos_lr": 271, "pos_lr_bas": 271, "pos_lr_base_std": 271, "pos_tagg": 415, "pos_vector": 415, "pos_window": 415, "pose": [214, 276, 1000], "posit": [0, 2, 44, 46, 48, 51, 52, 62, 63, 65, 101, 131, 150, 152, 157, 163, 178, 184, 185, 196, 199, 206, 210, 211, 212, 214, 228, 233, 241, 247, 262, 265, 268, 271, 275, 277, 278, 281, 282, 308, 318, 319, 323, 325, 350, 357, 362, 370, 374, 375, 377, 382, 384, 389, 390, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 419, 438, 439, 442, 446, 447, 449, 464, 467, 495, 499, 501, 505, 509, 510, 511, 526, 528, 530, 531, 532, 534, 536, 537, 538, 543, 546, 547, 549, 550, 551, 558, 562, 563, 564, 565, 594, 595, 596, 597, 598, 600, 601, 602, 604, 608, 612, 613, 614, 623, 634, 635, 646, 649, 650, 651, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 672, 675, 676, 677, 678, 680, 683, 684, 685, 686, 687, 690, 693, 701, 703, 705, 710, 712, 715, 716, 718, 719, 721, 723, 725, 727, 730, 732, 733, 734, 738, 739, 741, 742, 743, 744, 746, 747, 755, 757, 761, 769, 785, 786, 787, 790, 791, 792, 800, 801, 802, 806, 807, 830, 847, 848, 849, 851, 853, 854, 855, 857, 859, 860, 870, 871, 874, 880, 883, 886, 891, 895, 899, 900, 902, 903, 907, 908, 911, 912, 913, 915, 917, 924, 927, 930, 949, 951, 968, 970, 995, 996, 1000, 1002, 1004, 1005, 1007, 1008, 1009, 1011, 1014, 1019, 1035, 1037, 1038, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "position": 389, "positive_class": [48, 715], "positive_cod": [121, 532, 538, 543, 546, 547], "positive_dict": [121, 532, 538, 546, 547], "positive_featur": 380, "positive_likelihood_ratio": [271, 715], "positive_onli": [924, 927], "posix": [363, 387], "posixpath": 53, "possa": 1041, "possibl": [31, 44, 53, 56, 64, 65, 73, 83, 89, 104, 110, 121, 138, 141, 150, 152, 169, 185, 186, 187, 188, 203, 210, 227, 228, 242, 244, 262, 268, 269, 270, 271, 273, 274, 275, 277, 278, 287, 317, 339, 346, 350, 351, 358, 362, 363, 364, 368, 369, 370, 375, 376, 377, 378, 379, 381, 383, 387, 388, 389, 393, 398, 401, 404, 405, 406, 407, 408, 410, 411, 412, 414, 415, 417, 419, 421, 430, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 462, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 482, 483, 484, 485, 497, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 583, 584, 585, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 635, 636, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 690, 691, 692, 693, 694, 695, 712, 724, 725, 726, 727, 731, 745, 759, 781, 786, 788, 791, 800, 801, 802, 803, 805, 806, 807, 809, 815, 816, 817, 821, 822, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 891, 899, 900, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 931, 933, 934, 937, 942, 974, 977, 993, 996, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1012, 1014, 1019, 1020, 1024, 1028, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1047, 1048, 1049, 1050], "possibli": [91, 117, 165, 210, 225, 343, 351, 372, 374, 383, 401, 407, 414, 415, 451, 453, 591, 842, 843, 844, 845, 846, 912, 913, 915, 916, 917, 918, 993, 996, 1001, 1007, 1014, 1049, 1053], "post": [2, 47, 55, 58, 103, 164, 165, 167, 182, 238, 260, 272, 275, 285, 321, 325, 331, 350, 351, 352, 353, 357, 362, 370, 374, 375, 380, 388, 402, 407, 448, 488, 489, 497, 501, 552, 558, 559, 560, 561, 562, 565, 566, 612, 661, 703, 705, 715, 721, 745, 787, 790, 802, 803, 819, 825, 830, 833, 868, 887, 905, 915, 916, 917, 918, 1004, 1020, 1025, 1027, 1028, 1030, 1045], "post1": [373, 393, 399, 400, 1032], "poster": [350, 374, 375], "posterior": [168, 169, 170, 175, 182, 192, 262, 268, 282, 412, 417, 550, 551, 553, 613, 614, 616, 617, 618, 622, 625, 626, 630, 647, 648, 711, 800, 802, 825, 998, 1023, 1025, 1040, 1043], "posteriori": [1000, 1006], "postfit_hook": 47, "postiv": 275, "postpon": [377, 379], "postprocess": [62, 405, 536, 542], "postprocessor": 1045, "postscript": 919, "potenti": [2, 44, 65, 89, 110, 150, 181, 184, 186, 192, 203, 262, 294, 295, 303, 323, 324, 326, 343, 352, 362, 363, 373, 375, 389, 393, 398, 406, 407, 411, 414, 415, 468, 482, 483, 484, 485, 497, 525, 550, 558, 559, 562, 563, 565, 566, 574, 608, 614, 637, 766, 825, 897, 898, 905, 915, 916, 917, 918, 1010, 1018, 1020, 1023, 1037, 1044, 1045, 1048, 1051, 1052], "poughon": 1041, "poundal": 103, "pour": 1004, "pourbozorg": [1042, 1043, 1044], "pow": [679, 680, 681, 864, 865], "powel": [46, 370], "power": [2, 44, 47, 56, 141, 145, 184, 211, 228, 259, 271, 276, 292, 308, 309, 312, 328, 336, 362, 363, 388, 405, 407, 410, 413, 414, 415, 418, 444, 482, 483, 484, 533, 536, 542, 545, 633, 683, 697, 727, 750, 752, 755, 849, 850, 857, 858, 860, 861, 882, 883, 884, 895, 896, 950, 951, 1000, 1001, 1004, 1012, 1014, 1018, 1019, 1028, 1037, 1040, 1042, 1044, 1045, 1047, 1051], "power_iteration_norm": [403, 542, 545, 950, 951, 1048], "power_t": [679, 680, 681, 864, 865, 1018], "power_transform": [2, 883, 896, 1042], "powers_": 882, "powershel": 373, "powertransform": [2, 312, 884, 895, 994, 1014, 1042, 1045, 1048, 1050, 1053], "pox": 285, "poznik": [1047, 1048, 1049], "pp": [0, 97, 165, 267, 372, 407, 409, 415, 418, 419, 444, 448, 452, 462, 512, 534, 535, 542, 592, 638, 646, 667, 688, 689, 723, 729, 733, 743, 759, 772, 786, 842, 844, 846, 863, 883, 895, 997, 1004, 1006, 1007, 1017], "pp2013": 996, "pp84": 417, "ppc64le": 383, "ppf": 268, "ppm": 174, "pprint": [56, 147, 244, 269, 370, 946], "pq": [53, 322], "pr": [0, 157, 363, 375, 378, 379, 383, 415, 744, 1004, 1027, 1044, 1046], "pr_displai": 238, "pr_number": 383, "prabakaran": [1042, 1043, 1046, 1048, 1049], "prabhakar": 412, "practic": [65, 87, 104, 112, 117, 124, 141, 144, 145, 150, 169, 184, 185, 190, 196, 203, 212, 237, 243, 269, 276, 294, 295, 319, 325, 339, 343, 363, 375, 377, 378, 379, 381, 383, 388, 389, 407, 409, 411, 412, 413, 414, 415, 417, 447, 452, 462, 522, 525, 591, 635, 636, 673, 800, 846, 900, 907, 993, 994, 998, 1000, 1003, 1004, 1005, 1006, 1007, 1010, 1011, 1014, 1023, 1024, 1026, 1028, 1029, 1030, 1036, 1040, 1042, 1044, 1046], "practicalswift": 1040, "practis": 215, "practition": [139, 214], "pradeep": [1042, 1043], "pragmat": 375, "prakash": [1039, 1041, 1047], "pramod": 1048, "pranayanchuri": 1047, "prang": 376, "prasanth": 1049, "pratama": 1045, "pratap": [1038, 1041, 1048], "prathmesh": 1043, "pratik": 1041, "pratiqu": 372, "pravar": 1042, "pravarmahajan": [1041, 1042], "pre": [45, 104, 185, 200, 281, 308, 326, 352, 373, 375, 389, 393, 406, 409, 411, 412, 414, 415, 416, 418, 419, 443, 444, 447, 459, 534, 536, 612, 693, 715, 766, 870, 912, 1004, 1009, 1014, 1019, 1020, 1023, 1030, 1037, 1042, 1048, 1052], "pre_dispatch": [803, 809, 817, 826, 828, 829, 830, 831, 834, 969, 1037], "preambl": 89, "prec": [114, 238, 528, 1004], "prec_": 114, "prec_macro": 411, "preced": [363, 375, 379, 487, 1004, 1034], "precipit": 405, "precis": [2, 8, 46, 53, 63, 69, 103, 108, 114, 121, 162, 175, 176, 182, 190, 238, 260, 261, 262, 266, 306, 308, 328, 329, 375, 389, 403, 404, 405, 406, 407, 409, 412, 414, 443, 469, 470, 471, 472, 473, 474, 475, 476, 478, 505, 524, 533, 535, 542, 545, 647, 648, 649, 651, 653, 654, 655, 657, 658, 659, 672, 675, 677, 683, 685, 686, 690, 702, 703, 709, 710, 711, 716, 730, 732, 733, 734, 742, 744, 766, 785, 786, 787, 790, 791, 800, 801, 825, 833, 836, 847, 848, 853, 868, 887, 891, 907, 912, 919, 921, 951, 998, 1000, 1007, 1008, 1019, 1025, 1034, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051], "precision_": [52, 114, 469, 470, 471, 472, 473, 474, 475, 476], "precision_macro": 411, "precision_recall_curv": [2, 238, 275, 703, 709, 710, 730, 1004, 1035, 1036, 1040, 1047, 1048, 1050, 1052], "precision_recall_fscore_support": [2, 403, 716, 732, 733, 787, 790, 1004, 1038, 1042, 1044, 1050], "precision_scor": [2, 63, 262, 275, 711, 790, 1004, 1034, 1036, 1037, 1038, 1039, 1044, 1050], "precision_threshold": 266, "precisionrecalldisplai": [2, 262, 275, 320, 785, 787, 790, 1004, 1044, 1047, 1050, 1051, 1052, 1053], "precisions_": [800, 801], "precisions_cholesky_": [800, 801, 1048], "precisions_init": [801, 1048, 1050], "precompil": 373, "precomput": [120, 121, 122, 182, 191, 233, 244, 288, 290, 377, 384, 387, 389, 407, 415, 418, 430, 440, 441, 444, 445, 446, 450, 452, 457, 465, 471, 482, 483, 484, 525, 532, 536, 538, 541, 542, 543, 549, 555, 557, 559, 561, 563, 566, 569, 571, 613, 614, 623, 638, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 664, 665, 666, 667, 668, 670, 673, 675, 676, 681, 682, 684, 685, 687, 688, 691, 693, 694, 695, 699, 777, 781, 784, 795, 796, 803, 817, 840, 841, 849, 850, 851, 853, 854, 855, 857, 858, 859, 865, 908, 909, 910, 911, 912, 913, 916, 918, 924, 979, 980, 981, 996, 1000, 1002, 1007, 1019, 1025, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052], "precompute_dist": [1038, 1045], "precompute_gram": 1036, "precomputed_nearest_neighbor": [452, 694], "precondit": [407, 452, 462, 698, 1020, 1050], "pred": [44, 47, 51, 53, 69, 347, 350, 370, 651, 672, 683, 700, 705, 709, 721, 732, 733, 741, 786, 787, 790, 791, 1004], "pred1": 158, "pred2": 158, "pred3": 158, "pred4": 158, "pred_background": 51, "pred_decis": [738, 1004, 1047], "pred_entropi": [328, 329], "pred_nam": 46, "pred_ort": 401, "pred_scor": 47, "pred_test": 51, "pred_typ": 50, "predecessor": [135, 450, 455, 456, 457, 1051], "predecessor_": [450, 457], "predecessor_correct": [450, 456], "predefin": [2, 272, 816, 993, 1007, 1049, 1051], "predefinedsplit": [2, 411, 1038], "predetermin": [407, 1001], "predict": [2, 5, 13, 28, 43, 46, 47, 48, 51, 61, 63, 64, 65, 67, 69, 71, 73, 80, 90, 91, 92, 96, 103, 104, 105, 106, 108, 116, 131, 133, 134, 135, 137, 138, 139, 141, 143, 144, 145, 148, 150, 151, 152, 153, 154, 155, 156, 157, 162, 163, 165, 167, 168, 169, 171, 172, 174, 175, 176, 177, 178, 180, 181, 182, 185, 186, 187, 188, 190, 192, 195, 196, 203, 206, 207, 208, 211, 212, 213, 214, 216, 217, 218, 219, 224, 225, 227, 228, 237, 238, 240, 242, 244, 246, 254, 255, 256, 257, 258, 259, 260, 261, 266, 268, 270, 271, 274, 277, 278, 282, 283, 285, 287, 291, 294, 295, 296, 299, 300, 306, 308, 309, 313, 314, 317, 318, 319, 320, 321, 323, 324, 325, 326, 329, 331, 332, 333, 335, 336, 338, 339, 343, 345, 346, 347, 350, 351, 355, 357, 358, 361, 363, 367, 370, 372, 375, 377, 382, 384, 389, 392, 398, 401, 402, 403, 405, 407, 408, 410, 412, 414, 415, 416, 421, 424, 429, 430, 437, 438, 439, 440, 442, 443, 444, 447, 448, 449, 465, 469, 482, 483, 484, 487, 502, 509, 525, 535, 542, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 579, 584, 595, 596, 604, 608, 612, 613, 614, 616, 617, 618, 619, 625, 628, 630, 631, 633, 634, 635, 636, 637, 638, 640, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 700, 701, 703, 704, 705, 706, 708, 709, 710, 711, 712, 713, 715, 717, 718, 721, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 737, 738, 741, 744, 745, 746, 749, 751, 753, 755, 759, 785, 786, 787, 788, 789, 790, 791, 792, 796, 797, 799, 800, 801, 802, 803, 806, 807, 809, 817, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 853, 854, 857, 858, 864, 865, 867, 874, 887, 888, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 923, 926, 977, 993, 994, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1014, 1017, 1018, 1019, 1020, 1022, 1023, 1024, 1025, 1028, 1030, 1031, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "predict_ecoc": 1038, "predict_joint_log_proba": [842, 843, 844, 845, 846, 1049], "predict_log_proba": [377, 389, 550, 551, 552, 554, 556, 558, 560, 565, 595, 596, 661, 662, 679, 802, 803, 806, 807, 817, 825, 828, 838, 842, 843, 844, 845, 846, 854, 864, 867, 904, 909, 912, 915, 917, 1019, 1034, 1047, 1051, 1053], "predict_ovo": 1038, "predict_ovr": 1038, "predict_param": [244, 465, 568, 569, 595, 596, 1047], "predict_proba": [31, 62, 63, 64, 65, 67, 71, 153, 157, 165, 167, 170, 171, 172, 173, 262, 277, 282, 287, 303, 310, 313, 317, 319, 325, 350, 377, 382, 389, 405, 406, 414, 437, 438, 550, 551, 552, 554, 556, 558, 560, 562, 565, 568, 570, 595, 596, 613, 622, 623, 625, 626, 634, 635, 636, 661, 662, 679, 701, 703, 705, 725, 744, 745, 791, 800, 801, 802, 803, 806, 807, 817, 825, 828, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 849, 854, 857, 864, 867, 874, 902, 903, 904, 909, 912, 915, 917, 926, 1000, 1004, 1006, 1008, 1011, 1017, 1018, 1019, 1020, 1034, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053], "predict_proba_ovr": 1038, "predicted_label": [328, 329], "prediction_df": 150, "prediction_perform": 47, "prediction_performance_comput": 47, "prediction_performance_label": 47, "prediction_pow": 47, "prediction_tim": [47, 48], "prediction_titl": 46, "predictionerrordisplai": [2, 44, 53, 108, 155, 185, 264, 322, 1004, 1049, 1051, 1053], "predictions_kr": 169, "predictive_analyt": 1020, "predictive_word": 350, "predictor": [2, 108, 134, 136, 144, 158, 180, 182, 210, 228, 239, 377, 388, 389, 408, 410, 411, 414, 417, 466, 467, 482, 483, 484, 497, 517, 518, 519, 556, 557, 563, 566, 569, 604, 613, 633, 635, 636, 651, 656, 660, 672, 676, 683, 704, 828, 830, 839, 840, 867, 868, 880, 881, 887, 977, 1000, 1005, 1025, 1035, 1041, 1044], "predispatch": [809, 826, 831, 834], "predit": 117, "predomin": [377, 1035], "prefer": [74, 80, 89, 150, 259, 277, 308, 358, 362, 363, 364, 375, 376, 377, 389, 407, 411, 412, 414, 415, 440, 454, 471, 472, 478, 487, 509, 510, 630, 635, 636, 657, 661, 662, 704, 729, 731, 745, 760, 761, 838, 856, 882, 907, 908, 957, 969, 993, 996, 998, 1000, 1004, 1009, 1019, 1020, 1023, 1027, 1035, 1041, 1043, 1047, 1048, 1051], "prefetch": 969, "prefit": [262, 389, 406, 416, 437, 568, 569, 599, 825, 1046, 1047, 1048, 1053], "prefix": [2, 56, 103, 269, 290, 317, 375, 379, 381, 383, 417, 423, 442, 443, 445, 447, 449, 464, 467, 482, 483, 484, 485, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 642, 643, 644, 645, 691, 692, 695, 809, 831, 851, 856, 859, 863, 866, 867, 873, 899, 900, 1040, 1041, 1047, 1049, 1052], "prein": [0, 365, 1046, 1047, 1048, 1053], "preiss": 1047, "preliminari": [326, 462, 1053], "prematur": 1047, "prepar": [211, 244, 350, 362, 379, 381, 383, 1020, 1028, 1042, 1050], "prepend": [185, 1034], "preprint": 372, "preprocess": [2, 44, 45, 46, 50, 65, 68, 78, 80, 83, 87, 89, 92, 96, 103, 104, 105, 106, 108, 117, 121, 131, 140, 144, 161, 163, 165, 174, 187, 190, 192, 194, 198, 200, 202, 210, 211, 216, 226, 228, 231, 238, 239, 248, 251, 262, 265, 275, 277, 282, 283, 291, 296, 297, 303, 304, 306, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 332, 339, 342, 351, 364, 367, 369, 372, 375, 380, 388, 389, 401, 403, 404, 407, 408, 411, 414, 415, 416, 464, 465, 466, 467, 489, 568, 583, 584, 590, 591, 593, 633, 661, 662, 675, 677, 679, 681, 690, 836, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 907, 908, 909, 910, 912, 913, 994, 1000, 1005, 1008, 1015, 1018, 1019, 1021, 1023, 1025, 1027, 1028, 1030, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041], "preprocessor": [104, 155, 185, 210, 239, 247, 249, 314, 318, 320, 321, 322, 324, 408, 415, 590, 591, 593, 1023, 1034, 1037, 1042, 1044], "preprocessor__cat__selector__percentil": 104, "preprocessor__num__imputer__strategi": 104, "preprocessor_list": 247, "prescrib": 389, "presenc": [2, 49, 94, 96, 112, 113, 133, 184, 188, 196, 214, 247, 308, 373, 376, 389, 409, 412, 715, 729, 759, 772, 836, 870, 878, 880, 887, 987, 994, 1000, 1004, 1005, 1018, 1027, 1037, 1038, 1040, 1044, 1046, 1048], "present": [0, 2, 44, 45, 53, 79, 83, 119, 121, 128, 140, 141, 147, 150, 151, 164, 165, 175, 178, 192, 195, 196, 200, 210, 237, 240, 244, 258, 262, 266, 271, 274, 277, 278, 288, 308, 311, 313, 351, 372, 373, 380, 387, 389, 398, 405, 407, 409, 412, 414, 415, 425, 426, 429, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 464, 468, 469, 470, 471, 472, 473, 474, 475, 476, 489, 490, 491, 492, 493, 497, 501, 502, 503, 504, 505, 506, 511, 532, 534, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 550, 551, 562, 563, 564, 567, 570, 571, 583, 584, 585, 590, 591, 593, 612, 620, 630, 631, 632, 633, 653, 657, 680, 691, 692, 693, 694, 715, 732, 733, 741, 772, 786, 787, 790, 800, 801, 803, 806, 807, 815, 817, 831, 849, 850, 851, 853, 855, 857, 858, 859, 866, 871, 879, 880, 881, 882, 883, 885, 888, 899, 900, 911, 919, 921, 922, 951, 987, 1003, 1004, 1005, 1006, 1011, 1014, 1022, 1024, 1037, 1042, 1044, 1045, 1046, 1048, 1049, 1051, 1053], "preserv": [38, 44, 126, 234, 241, 263, 378, 411, 412, 414, 415, 583, 590, 591, 593, 633, 649, 655, 699, 777, 781, 821, 822, 823, 891, 928, 933, 934, 994, 1000, 1001, 1014, 1016, 1023, 1034, 1037, 1038, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1052, 1053], "preserves_dtyp": 928, "preservs": 1048, "preset": [669, 671, 679, 1008], "presort": [1039, 1044], "press": [370, 407, 412, 417, 418, 444, 592, 613, 614, 617, 622, 625, 646, 842, 846, 997, 1000, 1002, 1006], "pressur": [165, 372], "preston": [1039, 1040, 1041], "presum": [185, 287, 407, 415, 842], "prettenhof": [0, 397, 1034, 1035, 1036, 1037, 1038, 1039], "pretti": [186, 234, 266, 350, 362, 375, 387, 864, 865, 1008, 1043], "preuss": 1050, "prev_scor": 56, "preval": [135, 317, 389, 703, 715, 1004], "prevalence_pos_label": [275, 703], "prevent": [2, 44, 89, 145, 147, 162, 184, 207, 211, 214, 308, 314, 315, 339, 350, 354, 358, 375, 377, 379, 387, 388, 401, 403, 407, 412, 415, 442, 449, 488, 489, 562, 563, 592, 593, 612, 614, 731, 788, 864, 865, 892, 893, 895, 896, 897, 898, 1004, 1006, 1009, 1010, 1014, 1020, 1036, 1037, 1039, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1052], "previou": [44, 79, 87, 104, 121, 138, 144, 145, 147, 155, 169, 174, 175, 184, 185, 186, 196, 197, 211, 241, 243, 244, 262, 268, 271, 275, 308, 313, 321, 350, 351, 352, 358, 362, 370, 375, 377, 379, 380, 381, 383, 387, 389, 390, 393, 406, 407, 414, 415, 468, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 633, 649, 651, 655, 656, 661, 663, 665, 669, 670, 671, 672, 679, 680, 681, 683, 710, 822, 838, 841, 856, 864, 865, 904, 921, 1000, 1004, 1008, 1014, 1024, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "previous": [47, 87, 91, 104, 135, 175, 185, 262, 266, 275, 282, 321, 326, 370, 383, 387, 393, 407, 412, 415, 440, 443, 454, 525, 535, 542, 652, 661, 662, 669, 670, 671, 679, 680, 681, 907, 1000, 1014, 1023, 1031, 1034, 1035, 1036, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "previous_loss": [669, 670, 671, 680], "previs": 238, "price": [52, 108, 144, 145, 150, 155, 247, 314, 994, 1000, 1001, 1028], "priceless": 375, "prieur": 1047, "primal": [661, 662, 680, 907, 908, 1018, 1019], "primari": [389, 412, 516, 924, 1011, 1027, 1028], "primarili": [259, 273, 375, 389, 403, 407, 961, 1028, 1043, 1044], "primat": 350, "primdal": 1042, "primit": 1049, "princ": 1047, "princip": [2, 43, 115, 116, 120, 123, 125, 126, 129, 131, 153, 182, 219, 230, 242, 245, 255, 261, 274, 291, 297, 313, 319, 355, 367, 407, 410, 419, 484, 505, 532, 533, 534, 535, 536, 538, 540, 541, 542, 543, 544, 545, 546, 547, 551, 660, 691, 692, 693, 695, 696, 833, 856, 868, 887, 922, 950, 951, 1001, 1007, 1025, 1029, 1030, 1034], "principl": [135, 176, 293, 352, 375, 387, 389, 390, 403, 411, 414, 951, 993, 1003, 1007, 1018, 1041], "print": [2, 44, 46, 47, 48, 50, 51, 52, 53, 55, 56, 58, 59, 60, 62, 64, 67, 69, 74, 78, 79, 81, 82, 83, 84, 86, 87, 92, 94, 95, 97, 101, 103, 104, 106, 107, 108, 112, 116, 117, 119, 121, 124, 127, 128, 129, 131, 135, 138, 141, 142, 143, 144, 146, 148, 150, 161, 162, 164, 165, 167, 169, 170, 172, 174, 178, 184, 186, 187, 188, 190, 196, 197, 199, 202, 206, 207, 210, 212, 213, 214, 217, 218, 225, 226, 228, 231, 232, 235, 239, 241, 243, 244, 247, 251, 256, 261, 262, 266, 267, 268, 269, 271, 273, 276, 277, 281, 288, 292, 299, 301, 304, 305, 306, 310, 313, 315, 317, 318, 319, 321, 323, 324, 325, 326, 328, 329, 332, 339, 350, 351, 352, 354, 357, 358, 362, 369, 370, 373, 376, 377, 383, 389, 398, 401, 408, 411, 414, 415, 417, 464, 467, 468, 472, 478, 490, 495, 503, 513, 514, 542, 545, 550, 551, 560, 561, 562, 563, 565, 566, 570, 571, 579, 585, 586, 587, 589, 590, 591, 593, 615, 620, 621, 633, 649, 650, 652, 653, 655, 656, 657, 659, 663, 664, 665, 666, 669, 670, 679, 680, 687, 699, 716, 720, 740, 798, 800, 801, 802, 804, 805, 808, 810, 811, 812, 813, 816, 818, 819, 820, 821, 822, 823, 824, 825, 829, 830, 831, 832, 834, 836, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 864, 865, 866, 867, 868, 869, 877, 883, 887, 895, 905, 906, 907, 908, 909, 912, 914, 920, 932, 937, 964, 987, 994, 1004, 1005, 1006, 1007, 1012, 1020, 1034, 1036, 1042, 1043, 1045, 1049, 1053], "print_changed_onli": [468, 905, 1043, 1045, 1046], "print_datafram": 266, "print_progress": 969, "print_rout": 244, "printabl": 1027, "prior": [2, 43, 47, 56, 81, 82, 91, 99, 100, 101, 119, 168, 169, 175, 181, 182, 187, 192, 194, 196, 252, 254, 258, 259, 262, 268, 279, 298, 375, 377, 389, 393, 398, 407, 410, 412, 414, 416, 417, 465, 524, 537, 549, 550, 551, 552, 560, 614, 616, 617, 618, 622, 625, 626, 633, 647, 648, 649, 650, 654, 655, 657, 658, 659, 663, 664, 665, 675, 681, 684, 719, 800, 842, 843, 844, 845, 846, 854, 867, 868, 882, 909, 912, 970, 993, 996, 998, 1000, 1003, 1004, 1006, 1012, 1020, 1021, 1025, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1047, 1050], "prior_k": 550, "priori": [210, 227, 277, 287, 308, 389, 407, 414, 590, 596, 1003, 1050], "priorit": [406, 1024, 1041], "prioriti": [374, 635, 835, 836, 1024, 1037], "prioritis": 375, "priors_": [550, 551], "privaci": 1023, "privat": [0, 326, 377, 379, 389, 390, 929, 1028, 1034, 1042, 1044, 1045, 1047, 1048, 1053], "privileg": [247, 383], "priyam": 1049, "priyank": [1052, 1053], "priyansh": [1052, 1053], "priyash": 1052, "prng": 114, "pro": [401, 1003], "proanthocyanin": 372, "prob_pos_calibr": 167, "prob_pos_clf": [62, 167], "prob_pos_isoton": 62, "prob_pos_sigmoid": 62, "prob_pr": [438, 439], "prob_tru": [438, 439], "proba": [63, 65, 157, 437, 915, 917], "proba_": [909, 912, 1045], "proba_map": 89, "proba_neg_class": [63, 65], "proba_pos_class": [63, 65], "probabilist": [55, 65, 67, 114, 120, 131, 168, 169, 172, 175, 176, 182, 243, 262, 350, 389, 405, 413, 414, 437, 473, 476, 533, 535, 536, 542, 560, 590, 591, 613, 625, 646, 648, 679, 706, 744, 803, 829, 874, 909, 910, 912, 913, 997, 998, 1000, 1003, 1004, 1009, 1014, 1019, 1020, 1023, 1025, 1028, 1034, 1037, 1041], "probabilisticpca": [1034, 1037], "probabilities_": [89, 446], "probabilities_or_label": 570, "probabl": [0, 2, 5, 31, 53, 61, 65, 66, 71, 89, 108, 119, 134, 137, 148, 150, 156, 160, 167, 168, 169, 170, 171, 182, 185, 188, 203, 222, 225, 226, 230, 234, 238, 240, 241, 262, 268, 270, 271, 274, 275, 278, 282, 285, 287, 306, 308, 312, 317, 319, 325, 331, 333, 345, 346, 362, 370, 371, 377, 381, 387, 389, 406, 407, 411, 412, 415, 416, 417, 433, 434, 435, 436, 437, 438, 439, 446, 447, 449, 505, 513, 516, 524, 528, 550, 551, 552, 554, 556, 558, 560, 562, 565, 568, 570, 571, 595, 596, 612, 613, 616, 617, 625, 630, 634, 635, 636, 661, 662, 674, 679, 695, 701, 703, 705, 706, 709, 710, 712, 715, 719, 723, 725, 729, 730, 732, 742, 743, 744, 759, 785, 787, 790, 791, 792, 797, 800, 801, 802, 803, 806, 807, 817, 825, 832, 833, 836, 838, 839, 842, 843, 844, 845, 846, 849, 852, 854, 857, 863, 864, 888, 900, 901, 902, 903, 904, 907, 909, 912, 915, 917, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1014, 1016, 1017, 1018, 1020, 1024, 1025, 1026, 1030, 1034, 1036, 1038, 1040, 1042, 1043, 1044, 1045, 1046, 1048], "probable_clust": 90, "probas_pr": [785, 1052], "probb_": [909, 912, 1045], "probe": 1012, "probinette4": 1046, "probl": [609, 610], "problem": [2, 11, 26, 43, 44, 45, 46, 51, 53, 54, 55, 64, 73, 88, 89, 91, 100, 121, 135, 138, 141, 147, 148, 169, 182, 187, 190, 192, 196, 197, 200, 203, 204, 205, 210, 212, 214, 227, 228, 232, 237, 238, 245, 247, 250, 266, 268, 273, 277, 278, 282, 283, 285, 287, 288, 293, 300, 312, 320, 324, 325, 336, 339, 343, 346, 347, 350, 351, 357, 358, 362, 370, 371, 372, 373, 374, 376, 377, 380, 381, 383, 384, 387, 389, 395, 405, 406, 407, 409, 411, 413, 414, 415, 416, 417, 418, 419, 444, 447, 449, 450, 452, 457, 462, 465, 478, 504, 509, 510, 516, 517, 518, 519, 524, 525, 529, 532, 534, 538, 540, 543, 544, 545, 546, 547, 548, 549, 552, 553, 558, 562, 565, 568, 572, 574, 591, 613, 634, 646, 651, 653, 655, 657, 658, 659, 660, 661, 662, 667, 668, 669, 671, 672, 675, 676, 677, 678, 679, 680, 682, 683, 688, 689, 690, 691, 692, 694, 696, 698, 711, 719, 722, 732, 733, 738, 741, 742, 786, 787, 790, 791, 800, 801, 804, 805, 806, 807, 808, 810, 811, 812, 813, 818, 819, 820, 821, 822, 823, 827, 835, 836, 837, 847, 848, 849, 850, 851, 852, 853, 855, 857, 858, 859, 873, 874, 880, 888, 891, 897, 898, 907, 908, 915, 917, 939, 951, 994, 995, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1012, 1014, 1018, 1021, 1024, 1026, 1028, 1029, 1030, 1034, 1035, 1037, 1039, 1040, 1041, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051], "problemat": [44, 185, 262, 264, 408, 994, 1042], "proc": [65, 111, 405, 415, 450, 692, 696, 842, 993, 1001, 1006, 1010], "proce": [84, 162, 194, 373, 379, 410, 411, 414, 440, 880, 1000], "procedur": [26, 81, 90, 141, 147, 165, 193, 198, 258, 270, 311, 315, 339, 350, 358, 375, 387, 388, 389, 390, 405, 409, 411, 412, 414, 416, 532, 538, 539, 541, 546, 547, 548, 554, 555, 556, 557, 560, 561, 595, 597, 604, 611, 647, 675, 677, 690, 731, 788, 849, 857, 864, 865, 884, 896, 924, 974, 993, 1000, 1006, 1014, 1017, 1018, 1019, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "proceed": [112, 165, 370, 372, 407, 418, 439, 444, 512, 699, 711, 729, 759, 854, 904, 1004, 1016, 1017, 1018], "process": [0, 2, 20, 38, 44, 45, 58, 64, 67, 68, 71, 81, 82, 84, 100, 103, 105, 107, 111, 113, 122, 123, 125, 128, 135, 137, 143, 145, 147, 152, 153, 184, 192, 195, 212, 214, 220, 221, 222, 223, 243, 244, 245, 247, 253, 254, 257, 259, 262, 268, 270, 271, 280, 285, 303, 308, 311, 319, 322, 323, 329, 333, 343, 344, 348, 351, 352, 354, 362, 363, 364, 370, 374, 375, 377, 379, 381, 384, 387, 388, 389, 401, 407, 408, 409, 411, 412, 413, 414, 415, 416, 420, 448, 449, 475, 497, 505, 524, 535, 536, 537, 538, 539, 562, 563, 564, 590, 591, 593, 613, 614, 616, 617, 618, 620, 621, 622, 625, 626, 628, 630, 635, 636, 642, 646, 667, 675, 688, 689, 706, 726, 744, 784, 800, 802, 803, 806, 807, 817, 825, 828, 829, 830, 839, 840, 856, 870, 874, 876, 877, 878, 887, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 969, 993, 996, 1000, 1004, 1007, 1014, 1016, 1018, 1020, 1023, 1024, 1025, 1026, 1028, 1030, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1050, 1051, 1053], "process_rout": [2, 244, 1051], "processor": [104, 155, 185, 418, 437, 444, 446, 448, 450, 452, 457, 458, 461, 464, 467, 472, 532, 536, 537, 538, 540, 543, 544, 546, 547, 549, 556, 557, 558, 559, 564, 565, 566, 567, 568, 569, 570, 571, 596, 604, 609, 610, 613, 635, 637, 642, 650, 654, 656, 658, 660, 661, 662, 664, 666, 668, 669, 671, 679, 682, 691, 692, 693, 694, 695, 696, 697, 777, 781, 784, 803, 806, 807, 809, 817, 825, 826, 828, 829, 830, 831, 832, 834, 835, 836, 837, 849, 850, 853, 855, 857, 858, 860, 861, 866, 869, 902, 903], "procter": 52, "prod": [351, 624], "prod_": 1006, "prod_i": 996, "proding": 1050, "produc": [53, 54, 63, 64, 80, 91, 103, 124, 147, 148, 149, 151, 196, 203, 274, 306, 331, 358, 363, 370, 371, 375, 377, 380, 389, 390, 407, 408, 411, 412, 414, 440, 443, 446, 452, 520, 537, 560, 564, 583, 590, 595, 596, 635, 636, 805, 806, 807, 815, 820, 823, 828, 872, 882, 909, 912, 995, 996, 1000, 1002, 1003, 1004, 1007, 1010, 1011, 1015, 1017, 1018, 1019, 1036, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "product": [2, 59, 104, 121, 156, 169, 174, 186, 343, 358, 362, 377, 378, 381, 384, 404, 412, 414, 451, 539, 541, 548, 584, 591, 592, 593, 616, 617, 636, 643, 667, 668, 688, 689, 764, 766, 778, 780, 879, 882, 899, 900, 952, 993, 996, 1000, 1002, 1014, 1016, 1018, 1019, 1023, 1028, 1030, 1042], "production": 1028, "prof": 381, "profession": 185, "professor": 1028, "profil": [210, 362, 375, 378, 522, 525, 1000, 1028], "profile_default": 381, "profit": [0, 262, 325, 1051], "prog": [165, 372], "prognosi": [165, 372], "program": [0, 84, 165, 351, 358, 363, 364, 372, 373, 375, 377, 381, 387, 509, 638, 673, 897, 898, 1000, 1019, 1020, 1023, 1024, 1027, 1034, 1036], "programmat": [377, 500, 1043], "progress": [44, 47, 48, 121, 158, 165, 181, 204, 207, 293, 321, 326, 372, 379, 380, 390, 398, 403, 407, 560, 561, 695, 836, 838, 841, 856, 864, 865, 1028, 1034, 1036, 1043, 1048], "prohibit": [184, 247, 411, 414, 630, 1009, 1017, 1041], "proj": [54, 652], "proj_gradi": 381, "proj_oper": 54, "project": [2, 38, 46, 48, 51, 54, 56, 70, 89, 92, 101, 120, 121, 123, 125, 127, 131, 173, 175, 177, 178, 182, 186, 230, 231, 232, 234, 236, 238, 242, 245, 254, 292, 297, 301, 306, 336, 351, 362, 367, 369, 373, 374, 375, 380, 381, 384, 389, 390, 393, 404, 410, 412, 413, 419, 440, 446, 451, 452, 462, 474, 482, 483, 484, 485, 489, 503, 505, 532, 534, 535, 536, 538, 540, 542, 543, 544, 545, 549, 550, 574, 584, 591, 644, 645, 652, 675, 677, 691, 694, 698, 699, 837, 856, 884, 899, 900, 901, 950, 951, 998, 1000, 1001, 1002, 1005, 1007, 1008, 1010, 1017, 1020, 1025, 1028, 1030, 1034, 1035, 1037, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "projected_data": 241, "projected_dist": 241, "projectedgradientnmf": 1039, "prokopi": [1039, 1042], "prolin": [58, 313, 372], "promin": [124, 389], "promis": [389, 1004, 1024], "promot": [185, 442, 711, 1023, 1045, 1047, 1051], "prompt": [373, 375, 379, 393, 400, 415], "prone": [65, 210, 255, 312, 387, 405], "pronounc": [75, 76, 86, 174], "proof": [387, 414, 901, 1016], "prop": [106, 113, 216, 255, 294, 338, 357], "propag": [2, 59, 69, 72, 73, 83, 85, 97, 163, 182, 327, 370, 440, 454, 503, 513, 515, 700, 707, 708, 716, 717, 720, 721, 740, 796, 798, 867, 881, 902, 903, 904, 969, 970, 1008, 1025, 1026, 1029, 1030, 1034, 1046, 1049], "proper": [65, 89, 200, 203, 228, 262, 364, 377, 381, 405, 414, 449, 542, 554, 679, 951, 978, 999, 1000, 1001, 1004, 1019, 1034, 1044, 1045, 1046, 1047, 1048, 1049, 1051], "properli": [44, 53, 63, 89, 152, 174, 263, 281, 317, 364, 373, 375, 379, 383, 413, 907, 908, 909, 910, 911, 912, 913, 993, 1037, 1039, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "properti": [52, 63, 176, 177, 212, 227, 254, 290, 313, 326, 357, 362, 368, 375, 377, 393, 404, 405, 407, 409, 412, 414, 416, 417, 422, 442, 445, 451, 452, 453, 464, 465, 543, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 593, 595, 596, 599, 613, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 635, 649, 655, 658, 663, 665, 677, 678, 702, 707, 708, 711, 802, 803, 806, 807, 817, 825, 835, 836, 866, 867, 880, 881, 882, 888, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 993, 996, 999, 1000, 1001, 1004, 1005, 1007, 1010, 1014, 1017, 1019, 1020, 1021, 1024, 1039, 1043, 1044, 1047, 1048, 1051, 1052, 1053], "property_magnitud": 262, "propon": 103, "proport": [55, 64, 76, 150, 164, 197, 210, 217, 223, 228, 237, 247, 262, 271, 275, 291, 295, 298, 346, 348, 357, 362, 370, 405, 407, 409, 411, 412, 414, 415, 438, 439, 446, 469, 474, 516, 550, 551, 556, 558, 560, 561, 562, 563, 564, 565, 585, 586, 590, 593, 630, 635, 661, 662, 669, 670, 671, 677, 678, 679, 681, 699, 704, 715, 725, 804, 805, 806, 807, 820, 823, 833, 853, 854, 864, 865, 881, 907, 908, 909, 912, 913, 915, 917, 919, 921, 939, 993, 1003, 1004, 1007, 1010, 1018, 1019, 1020, 1039, 1051], "propos": [91, 110, 111, 288, 370, 375, 377, 387, 389, 407, 409, 414, 419, 450, 536, 609, 610, 679, 680, 681, 864, 865, 1000, 1003, 1007, 1018, 1041], "proprietari": 1020, "propto": [413, 1006], "prorokovi\u0107": 1052, "protect": [376, 379, 969], "protein": 369, "protocol": [401, 1004, 1023, 1037, 1050, 1051], "protocol_typ": 247, "prototyp": 1028, "prove": [122, 1028], "proven": [268, 998, 1002, 1028], "provenc": 314, "provid": [0, 2, 31, 32, 45, 48, 51, 53, 62, 65, 67, 71, 73, 78, 89, 94, 113, 121, 142, 150, 153, 155, 169, 175, 185, 186, 192, 197, 198, 200, 203, 211, 214, 231, 235, 238, 239, 244, 258, 262, 268, 269, 270, 274, 298, 301, 305, 308, 312, 317, 318, 320, 322, 326, 337, 343, 346, 350, 351, 354, 357, 358, 362, 364, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 381, 383, 384, 387, 388, 389, 392, 393, 398, 401, 403, 404, 406, 407, 408, 409, 411, 412, 414, 415, 416, 417, 418, 419, 421, 428, 437, 440, 442, 443, 444, 446, 447, 449, 450, 452, 459, 460, 464, 465, 482, 483, 484, 492, 494, 495, 497, 499, 502, 533, 534, 535, 536, 537, 539, 541, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 590, 592, 593, 595, 596, 603, 607, 613, 614, 630, 635, 636, 637, 638, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 693, 697, 702, 714, 725, 738, 744, 745, 767, 777, 781, 791, 795, 797, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 815, 816, 817, 819, 821, 822, 823, 824, 825, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 864, 865, 867, 870, 872, 873, 874, 877, 878, 879, 882, 884, 886, 887, 902, 903, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 922, 923, 925, 939, 944, 956, 960, 962, 979, 980, 981, 992, 993, 994, 996, 999, 1000, 1001, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1017, 1018, 1019, 1020, 1021, 1023, 1024, 1027, 1028, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "provinc": 314, "provost": [791, 1004], "proxi": [184, 185, 412, 416, 863, 1039], "prun": 381, "prune": [182, 353, 357, 416, 501, 558, 559, 560, 561, 565, 566, 595, 647, 833, 915, 916, 917, 918, 1007, 1025, 1026, 1030, 1034, 1037, 1044, 1045], "przybocki": 1004, "ps_lsvm_score": 190, "ps_lsvm_time": 190, "pseudo": [211, 306, 377, 411, 419, 440, 452, 454, 462, 469, 470, 471, 473, 474, 475, 476, 534, 562, 563, 564, 630, 637, 642, 644, 645, 649, 650, 655, 656, 663, 664, 665, 666, 680, 694, 698, 806, 807, 815, 817, 856, 863, 899, 900, 904, 907, 908, 909, 912, 950, 951, 1000, 1016, 1039, 1048], "pseudo_likelihood": 863, "pseudocount": [537, 1042], "psf": 375, "psi": 412, "psi_1": 412, "psi_2": 412, "psi_n": 412, "pspachtholz": [1044, 1045, 1046], "psycholog": [407, 708, 719], "psychometrica": 638, "psychometrika": [693, 697, 1001], "pt": [51, 370, 416, 883, 1014], "pt_i": 298, "pt_j": 298, "ptocca": 1044, "ptp": 52, "pts_": 51, "pts_test": 51, "pts_train": 51, "pub": [235, 902], "public": [0, 111, 326, 369, 375, 377, 379, 380, 387, 388, 389, 390, 411, 414, 468, 667, 674, 688, 689, 695, 905, 1000, 1008, 1034, 1039, 1040, 1045, 1046, 1047, 1050], "publicli": [375, 1044], "publish": [369, 370, 377, 379, 383, 389, 1016, 1024, 1046], "pubu": [224, 241, 294, 338], "pubu_r": 112, "puerta": 1049, "puggioni": 1038, "puhuk": [1048, 1049], "pujalt": 1048, "pulapakura": [1051, 1052], "pulchritud": 350, "pulido": 1047, "pulkit": [1042, 1043, 1045], "pull": [103, 320, 326, 363, 373, 378, 389, 390, 1027, 1044], "puls": 372, "punctuat": [415, 590, 591, 593], "puneet": 1041, "puneeth": [1051, 1052], "puor": 124, "puor_r": 173, "pure": [112, 113, 117, 196, 210, 389, 407, 473, 479, 497, 558, 559, 560, 561, 565, 566, 567, 708, 718, 789, 798, 915, 916, 917, 918, 1014], "pure_emp_cov": 113, "pure_loc": 113, "pure_x": 113, "purepremium": 228, "puriti": [137, 919, 921], "purna": 1048, "purpl": [110, 119, 234], "purport": 1041, "purpos": [49, 52, 73, 117, 145, 150, 180, 207, 224, 225, 226, 230, 232, 245, 256, 258, 262, 264, 265, 339, 340, 346, 350, 351, 358, 370, 375, 388, 389, 390, 393, 400, 404, 407, 408, 412, 414, 415, 416, 417, 829, 830, 867, 924, 1001, 1004, 1005, 1007, 1010, 1023, 1046, 1048, 1052], "pursu": 185, "pursuit": [2, 88, 122, 124, 130, 182, 191, 412, 474, 527, 532, 538, 543, 549, 667, 668, 688, 689, 1025, 1026, 1030, 1034], "push": [65, 375, 379, 405, 1027], "pushd": 383, "put": [76, 92, 169, 171, 238, 242, 249, 253, 282, 303, 310, 321, 333, 344, 348, 364, 377, 379, 380, 383, 401, 417, 443, 447, 459, 516, 617, 650, 664, 800, 884, 888, 896, 909, 910, 911, 912, 913, 940, 994, 1001, 1003, 1004, 1005, 1011, 1014], "putnam": 1040, "putschblo": 1047, "pvalu": [2, 594, 597, 598, 600, 601, 602, 832], "pvalue_iri": 274, "pvalue_rand": 274, "pvalues_": [161, 594, 597, 598, 600, 601, 602, 1034], "pvnguyen": 1038, "pwalchessen": 1046, "pwd": 383, "px": [141, 269], "pxd": 375, "py": [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 184, 185, 186, 187, 188, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 363, 375, 376, 379, 381, 383, 389, 393, 415, 531, 647, 649, 650, 655, 656, 663, 664, 665, 666, 684, 687, 882, 886, 946, 1004, 1023, 1025, 1034, 1036, 1040, 1044, 1048, 1053], "py3": 393, "py39": 393, "pyamg": [81, 393, 400, 407, 452, 462, 694, 698], "pyarrow": [393, 400], "pybrain": 1034, "pycon": [401, 1022], "pyd": 376, "pydata": [44, 375, 383, 393, 400, 401, 403, 1022, 1028], "pydata_2013": 1028, "pydebug": 381, "pyflak": 377, "pyfunc": [702, 1007], "pyfuncdist": 702, "pymc": 1023, "pynndesc": 288, "pynndescenttransform": 288, "pyodid": 375, "pyoxid": 1047, "pypi": [363, 373, 377, 379, 381, 393, 1020, 1042, 1046, 1048, 1049, 1051], "pyplot": [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 105, 106, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 163, 164, 165, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 184, 185, 186, 188, 190, 192, 193, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 237, 238, 240, 241, 242, 243, 245, 246, 247, 248, 250, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 267, 268, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 321, 322, 324, 328, 329, 330, 331, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 371, 375, 382, 438, 503, 634, 635, 700, 701, 703, 704, 705, 809, 826, 1031, 1048], "pyplpt": 369, "pyproject": 379, "pypy3": 1042, "pysniak": 1037, "pystruct": 387, "pytabl": 369, "pytb": 383, "pytest": [2, 317, 363, 373, 375, 377, 378, 393, 400, 403, 944, 945, 946, 1044, 1047], "python": [0, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 184, 185, 186, 187, 188, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 362, 364, 369, 373, 375, 376, 377, 378, 379, 380, 383, 384, 387, 389, 393, 394, 400, 401, 403, 408, 415, 497, 509, 510, 583, 702, 814, 881, 1004, 1014, 1019, 1020, 1024, 1027, 1028, 1030, 1034, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1051, 1053], "python2": 1042, "python3": [322, 373, 393], "python37": 393, "pythonsoftwarefound": 393, "pythonx": 373, "pytorch": [46, 325, 326, 387, 1023, 1024, 1050, 1051, 1053], "pytorch_enable_mps_fallback": 403, "pyx": [375, 376, 381, 383], "p\u00e9rez": 1042, "p\u00f6lsterl": [1041, 1044, 1047], "q": [52, 104, 116, 147, 210, 320, 404, 407, 412, 950, 1000, 1019], "q1": 510, "q327": 372, "q_": 1019, "q_m": 1020, "q_max": [885, 897], "q_min": [885, 897], "qaiser": 1051, "qda": [68, 372, 550, 551, 1026, 1030, 1039], "qdeffens": [1044, 1047], "qemu": 383, "qi": [510, 1046], "qian": [1040, 1045], "qiang": 1038, "qianm": 1046, "qid": [487, 509, 510, 1035, 1040], "qimu": 1040, "qin": [0, 372, 397, 415, 1041, 1042, 1043, 1044, 1045, 1053], "qingi": 1042, "qizhi": 1045, "qmarcou": 1051, "qn": 510, "qodari": [1052, 1053], "qp": 1019, "qr": [81, 212, 403, 535, 542, 545, 950, 951, 1001, 1040, 1051], "qt": [312, 884], "qtconsol": 381, "quad": [417, 1007, 1018], "quadcontourset": 634, "quadmesh": 634, "quadrant": 308, "quadrat": [2, 12, 44, 49, 66, 70, 112, 113, 114, 174, 182, 224, 247, 258, 270, 320, 440, 458, 461, 550, 551, 626, 634, 651, 661, 662, 672, 679, 683, 719, 912, 913, 1000, 1001, 1004, 1007, 1010, 1014, 1018, 1019, 1025, 1026, 1030, 1035], "quadraticdiscriminantanalysi": [2, 68, 71, 550, 998, 1005, 1007, 1034, 1039, 1041, 1049, 1053], "quadro": 1047, "quadv": 1048, "qualifi": 380, "qualit": [45, 46, 87, 89, 95, 141, 147, 210, 322, 370, 407, 439, 704, 1049], "qualiti": [0, 13, 28, 46, 59, 62, 73, 81, 83, 92, 124, 143, 150, 185, 216, 261, 266, 275, 276, 277, 343, 375, 383, 387, 389, 402, 407, 409, 412, 452, 462, 469, 474, 558, 559, 560, 561, 565, 566, 746, 817, 899, 900, 915, 916, 917, 918, 951, 999, 1001, 1009, 1016, 1020, 1023, 1024, 1028, 1030], "quang": 1045, "quansight": 0, "quantifi": [13, 28, 44, 73, 83, 110, 174, 228, 262, 275, 325, 377, 389, 402, 574, 870, 999, 1012, 1014, 1030], "quantil": [2, 80, 87, 97, 135, 137, 182, 191, 308, 311, 312, 371, 387, 414, 438, 439, 458, 520, 553, 554, 561, 563, 660, 673, 726, 748, 751, 753, 830, 872, 884, 885, 886, 896, 897, 1004, 1014, 1025, 1026, 1030, 1034, 1038, 1041, 1043, 1047, 1048, 1050, 1052], "quantile_list": 53, "quantile_rang": [308, 885, 897, 1040], "quantile_regress": 212, "quantile_transform": [2, 108, 884, 895, 1014, 1041, 1042, 1043, 1052], "quantileregressor": [2, 320, 1000, 1004, 1047, 1048, 1049], "quantiles_": [884, 1014, 1044], "quantiletransform": [2, 108, 186, 312, 408, 465, 883, 896, 994, 1014, 1041, 1042, 1043, 1044, 1045, 1050, 1052], "quantiletransformerquantiletransform": 186, "quantit": [44, 45, 46, 53, 63, 95, 147, 150, 158, 165, 264, 283, 372], "quantiti": [52, 144, 203, 268, 319, 362, 389, 407, 414, 724, 725, 726, 727, 788, 863, 993, 995, 998, 1000, 1039], "quantiz": [72, 124, 182, 370, 443, 447, 449, 872, 1014, 1025], "quantum": 1002, "quartil": 885, "quartimax": [533, 1046], "quasi": [377, 864, 865, 1000], "quazi": [1041, 1042], "queensland": 372, "quentin": [1041, 1042, 1043, 1050, 1051, 1053], "queqichao": 1038, "queri": [192, 291, 301, 362, 413, 418, 444, 446, 450, 457, 553, 613, 614, 631, 647, 648, 729, 759, 847, 848, 849, 850, 851, 852, 853, 855, 857, 858, 859, 1004, 1007, 1020, 1023, 1027, 1036, 1038, 1039, 1042], "query_id": [487, 509, 510], "query_radiu": [847, 848], "question": [0, 184, 262, 268, 346, 374, 375, 380, 383, 401, 411, 414, 836, 909, 912, 1000, 1003, 1004, 1010, 1028], "queue": [48, 1007, 1037], "quick": [44, 126, 250, 375, 377, 381, 393, 608, 833, 1004, 1005, 1014, 1028, 1031], "quicker": 1003, "quickest": 373, "quickli": [75, 248, 304, 317, 372, 375, 376, 411, 414, 695, 781, 1000, 1007, 1008, 1028, 1045], "quinlan": 1020, "quinonez": 1042, "quintana": 1004, "quit": [44, 53, 65, 87, 91, 117, 138, 165, 185, 186, 203, 208, 228, 262, 276, 285, 320, 350, 362, 380, 388, 407, 415, 999, 1001, 1006, 1028, 1042], "quiver": 123, "quot": [38, 52, 53, 55, 103, 269, 350, 351, 363, 369, 370, 373, 375, 379, 393, 394, 403, 488, 489, 497, 1004, 1016, 1019, 1049, 1053], "quota": [1047, 1048], "quotat": 370, "quotient": 1004, "r": [0, 2, 48, 50, 51, 52, 53, 54, 62, 63, 64, 65, 75, 79, 99, 108, 110, 111, 112, 113, 117, 121, 128, 131, 135, 138, 139, 143, 147, 148, 149, 158, 161, 170, 171, 172, 176, 177, 178, 180, 181, 185, 195, 196, 199, 200, 210, 217, 220, 228, 235, 240, 243, 253, 256, 259, 267, 268, 271, 273, 274, 275, 278, 281, 287, 290, 291, 295, 299, 301, 314, 321, 322, 341, 343, 352, 358, 370, 372, 376, 379, 387, 389, 401, 404, 405, 407, 409, 410, 411, 412, 414, 415, 424, 430, 437, 446, 451, 453, 465, 469, 474, 478, 482, 483, 484, 499, 505, 514, 521, 535, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 568, 569, 570, 571, 590, 591, 592, 593, 596, 608, 611, 613, 614, 630, 638, 642, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 688, 689, 695, 699, 719, 724, 725, 726, 727, 731, 733, 784, 788, 791, 802, 803, 817, 820, 825, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 856, 857, 858, 864, 865, 878, 883, 895, 902, 903, 907, 908, 909, 910, 912, 913, 915, 916, 917, 918, 920, 969, 994, 996, 998, 1000, 1001, 1004, 1005, 1006, 1007, 1008, 1011, 1012, 1014, 1018, 1019, 1020, 1023, 1034, 1038, 1041, 1044, 1045, 1046, 1047, 1049, 1051], "r0": [806, 807], "r1": 571, "r11": [210, 228], "r2": [108, 136, 141, 155, 184, 186, 206, 243, 281, 408, 414, 555, 571, 676, 830, 865, 925, 1004, 1012, 1043], "r2007": 414, "r22": 210, "r25": 228, "r26": 210, "r2_score": [2, 108, 184, 196, 206, 207, 377, 403, 414, 430, 465, 482, 483, 484, 555, 557, 559, 561, 563, 566, 569, 571, 614, 638, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 664, 665, 666, 667, 668, 670, 673, 675, 676, 681, 682, 727, 731, 840, 841, 850, 858, 865, 908, 910, 913, 916, 918, 993, 1004, 1035, 1037, 1043, 1047, 1048, 1052], "r2_score_ard": 196, "r2_score_enet": 196, "r2_score_lasso": 196, "r2_score_nnl": 206, "r2_score_ol": 206, "r2_with_abl": 184, "r2_without_": 184, "r3": 571, "r72": 210, "r73": 228, "r82": 210, "r93": 210, "r_": [51, 130, 223, 224, 254, 275, 294, 295, 338, 344, 348, 407, 710, 1004, 1020], "r_0": 993, "r_k": 275, "r_multi": 1012, "r_n": [275, 710, 1004], "r_regress": [2, 416, 608, 1047, 1048, 1051], "r_squar": 388, "raamana": [1042, 1043], "rabbit": [321, 323, 1014], "raccoon": [87, 124, 412], "raccoon_fac": [87, 124], "race": [185, 324, 370, 497, 1037], "race_hispan": 185, "race_oth": 185, "race_whit": 185, "rachel": [1046, 1049], "rachelcjordan": 1045, "rachez": [1039, 1040], "rachit": [1040, 1046, 1049], "rachit23110261": 1053, "rachum": 1046, "radar": 1028, "radford": 1000, "radhakrishnan": 1042, "radial": [2, 45, 126, 169, 174, 176, 339, 343, 367, 452, 625, 694, 1002, 1019, 1030], "radian": [301, 702, 767], "radii": [847, 848], "radiu": [2, 165, 295, 339, 372, 407, 442, 450, 691, 767, 784, 847, 848, 849, 850, 851, 855, 857, 858, 859, 861, 1007, 1036, 1038, 1048, 1051], "radius1": 100, "radius2": 100, "radius3": 100, "radius4": 100, "radius_neighbor": [321, 855, 857, 858, 859, 1038, 1043, 1044, 1046, 1047, 1048, 1049], "radius_neighbors_graph": [2, 407, 418, 444, 849, 850, 851, 853, 855, 857, 858, 859, 860, 1007, 1038, 1043, 1046], "radiusneighborsclassifi": [2, 321, 849, 850, 855, 858, 1005, 1007, 1034, 1036, 1040, 1042, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "radiusneighborsregressor": [2, 321, 849, 850, 855, 857, 1005, 1007, 1034, 1036, 1042, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "radiusneighborstransform": [2, 317, 851, 1007, 1044, 1046, 1048, 1049, 1053], "radostin": [1042, 1043], "raduspaimoc": 1045, "raf": 1043, "rafael": [1028, 1035, 1036, 1038, 1041], "rafal": [1049, 1050], "rafei": 1046, "raff": 1037, "raffaello": 1043, "rafiqu": [1042, 1043], "rafteri": 1004, "raghav": [0, 397, 1038, 1039, 1040, 1041, 1042, 1046], "raghavan": [412, 592, 842, 846, 1002, 1004, 1006], "raghu": [407, 442], "raghunathan": [1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1052], "raghuv": [1049, 1050], "raghuwanshi": 1048, "rah": 644, "rahiel": 1038, "rahil": [1048, 1049, 1050, 1051, 1052, 1053], "rahimi": [644, 996], "rahmaan": 1044, "rahman": [1041, 1042, 1046], "rahn": [1041, 1044], "rahul": [1046, 1051], "rai": [0, 397, 1004, 1034, 1044, 1046, 1047], "raimundo": 1042, "rain": [44, 53, 186, 406, 1000, 1004], "rainbow": [62, 232], "rainfal": 1000, "rais": [2, 133, 211, 244, 245, 262, 271, 312, 320, 326, 375, 377, 379, 380, 381, 384, 387, 389, 398, 401, 408, 411, 437, 443, 444, 447, 449, 465, 482, 483, 484, 488, 489, 490, 491, 493, 494, 495, 496, 498, 499, 510, 534, 537, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 574, 576, 578, 579, 590, 591, 592, 593, 605, 613, 614, 620, 632, 635, 638, 639, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 693, 699, 701, 705, 712, 714, 715, 716, 717, 730, 732, 733, 741, 781, 785, 786, 787, 790, 791, 792, 800, 801, 802, 803, 804, 805, 806, 807, 809, 810, 812, 817, 821, 825, 826, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 852, 854, 856, 857, 858, 862, 864, 865, 866, 867, 870, 871, 872, 873, 874, 879, 880, 881, 885, 886, 887, 894, 902, 903, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 922, 931, 933, 934, 936, 937, 944, 945, 955, 960, 964, 966, 987, 988, 989, 990, 992, 993, 1004, 1014, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "raisadz": [1052, 1053], "raise_exc": [714, 1053], "raise_except": 989, "raise_unknown": 966, "raise_warn": [271, 715, 989], "raj": [1051, 1052], "rajagopalan": [0, 397, 1042, 1046], "rajaona": [1040, 1041], "rajat": [1037, 1044], "rajath": 1053, "rajdeep": 1043, "rajendra": 1042, "raji": [1049, 1050], "rakotoarison": [1041, 1042, 1044], "ralf": [1037, 1040, 1041, 1049, 1050, 1052, 1053], "ralph": 1052, "ram": [56, 87, 364, 401, 414, 899, 900, 1006, 1019, 1040, 1046, 1049, 1050], "ramakrishnan": [407, 442], "ramana": [1040, 1041], "ramanath": 1039, "ramesh": [370, 1028, 1037, 1040, 1044], "rameshwar": [1041, 1042], "ramil": [1042, 1043], "rammig": [1028, 1040], "ramo": 1049, "rampin": 1041, "ramyanp": [1046, 1047], "ramzi": 1046, "ram\u00edrez": 1004, "rand": [2, 54, 62, 73, 74, 75, 76, 80, 83, 92, 96, 128, 138, 152, 154, 160, 192, 196, 232, 233, 237, 243, 244, 283, 300, 318, 319, 324, 332, 333, 345, 351, 356, 384, 398, 545, 707, 708, 718, 760, 784, 789, 899, 900, 902, 903, 904, 1016, 1034, 1045, 1046], "rand_index": 708, "rand_scor": [2, 73, 407, 718, 1004, 1046], "randal": [887, 1038, 1048], "randi": 1040, "randint": [51, 73, 113, 119, 146, 181, 187, 233, 240, 244, 246, 280, 319, 324, 377, 380, 388, 398, 807, 824, 842, 843, 844, 846, 993, 994], "randn": [54, 70, 71, 75, 88, 99, 100, 112, 113, 124, 128, 151, 160, 169, 173, 184, 187, 200, 205, 206, 209, 223, 224, 227, 254, 257, 258, 263, 275, 277, 278, 283, 294, 295, 315, 318, 319, 324, 338, 343, 344, 348, 377, 380, 646, 673, 675, 681, 690, 824, 910, 913], "randolf": 1052, "random": [2, 14, 38, 44, 45, 46, 47, 51, 52, 53, 54, 59, 60, 62, 63, 64, 65, 68, 70, 71, 73, 75, 76, 80, 84, 86, 88, 89, 91, 92, 94, 95, 96, 98, 99, 100, 104, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 122, 123, 124, 128, 134, 136, 138, 140, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 155, 158, 160, 161, 164, 169, 170, 173, 175, 176, 178, 180, 181, 182, 183, 184, 192, 193, 194, 195, 196, 200, 201, 205, 206, 208, 209, 210, 211, 212, 213, 216, 217, 219, 223, 224, 227, 228, 230, 231, 233, 234, 235, 236, 237, 242, 243, 244, 246, 247, 253, 254, 256, 257, 258, 259, 260, 263, 265, 266, 267, 268, 269, 271, 273, 275, 277, 278, 279, 280, 283, 287, 288, 293, 294, 295, 300, 303, 309, 311, 312, 315, 318, 319, 321, 323, 325, 328, 329, 332, 333, 338, 339, 341, 342, 343, 344, 345, 348, 350, 351, 362, 363, 367, 371, 378, 380, 387, 388, 389, 398, 402, 403, 405, 407, 415, 416, 420, 432, 440, 443, 447, 449, 451, 452, 453, 454, 458, 459, 460, 462, 464, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 488, 489, 490, 491, 493, 496, 497, 498, 503, 504, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 536, 537, 539, 540, 541, 542, 545, 548, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 574, 584, 585, 586, 591, 609, 610, 613, 614, 630, 633, 635, 637, 642, 643, 644, 645, 646, 649, 650, 652, 653, 655, 656, 657, 661, 663, 664, 665, 666, 673, 674, 675, 679, 680, 681, 682, 690, 692, 693, 694, 695, 696, 697, 698, 704, 707, 708, 711, 734, 746, 784, 791, 796, 800, 801, 803, 804, 805, 806, 807, 808, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 832, 833, 838, 840, 841, 842, 843, 844, 846, 847, 848, 852, 856, 863, 864, 865, 867, 870, 872, 881, 884, 888, 896, 899, 900, 901, 902, 903, 904, 907, 908, 909, 910, 912, 913, 915, 916, 917, 918, 936, 948, 950, 951, 972, 974, 977, 994, 996, 999, 1001, 1003, 1004, 1008, 1009, 1010, 1012, 1014, 1019, 1020, 1025, 1026, 1030, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "random_": 200, "random_02": 200, "random_05": 200, "random_08": 200, "random_11": 200, "random_cat": [187, 1012], "random_choice_csc": 1044, "random_forest": 140, "random_from_data": [256, 800, 801, 1003], "random_label": 73, "random_num": [187, 1012], "random_offset_": [644, 645], "random_project": [2, 231, 241, 899, 900, 901, 1016, 1021, 1035, 1040, 1050, 1051], "random_sampl": [196, 847, 848, 852], "random_se": [50, 119, 143], "random_search": [269, 276], "random_st": [44, 45, 46, 47, 50, 52, 53, 55, 58, 59, 60, 62, 63, 64, 65, 67, 68, 74, 78, 79, 80, 81, 83, 84, 87, 89, 90, 91, 92, 93, 94, 95, 96, 103, 104, 108, 114, 117, 119, 121, 123, 126, 135, 136, 137, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 157, 158, 161, 162, 164, 167, 169, 175, 178, 180, 181, 184, 185, 186, 187, 188, 190, 192, 194, 195, 197, 203, 209, 210, 213, 214, 216, 217, 218, 222, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 237, 238, 242, 245, 246, 247, 248, 250, 251, 253, 255, 256, 259, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 285, 287, 288, 291, 292, 296, 297, 298, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 331, 337, 339, 340, 341, 346, 347, 350, 351, 354, 357, 358, 371, 377, 380, 384, 388, 389, 403, 406, 407, 408, 411, 412, 414, 415, 419, 432, 437, 438, 440, 443, 447, 449, 451, 452, 453, 454, 458, 459, 460, 462, 469, 474, 478, 487, 488, 491, 493, 496, 498, 504, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 585, 586, 595, 596, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 630, 635, 636, 637, 638, 641, 642, 643, 644, 645, 649, 650, 652, 653, 654, 655, 656, 657, 658, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 674, 675, 677, 679, 680, 681, 682, 684, 685, 686, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 713, 738, 791, 795, 796, 800, 801, 802, 804, 805, 806, 807, 808, 809, 815, 817, 818, 819, 820, 821, 822, 823, 825, 826, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 852, 856, 863, 864, 865, 867, 872, 884, 888, 896, 899, 900, 907, 908, 909, 912, 914, 915, 916, 917, 918, 920, 921, 923, 925, 926, 948, 950, 951, 972, 974, 977, 993, 994, 996, 999, 1004, 1005, 1006, 1007, 1008, 1011, 1012, 1014, 1019, 1020, 1031, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "random_state_": [377, 537, 630, 856, 1048], "random_tre": 567, "random_tree_embed": 140, "random_unlabeled_point": [319, 902, 903, 904], "random_weights_": [644, 645], "randomforest": [50, 143, 362, 414, 915, 916, 1039], "randomforestclassifi": [2, 64, 65, 68, 90, 139, 140, 141, 142, 143, 157, 187, 188, 249, 250, 265, 280, 317, 319, 324, 350, 358, 377, 388, 389, 405, 414, 416, 558, 559, 560, 562, 567, 568, 570, 806, 807, 825, 837, 917, 993, 994, 1005, 1012, 1028, 1031, 1038, 1039, 1042, 1043, 1044, 1047, 1048, 1049, 1050, 1051], "randomforestclassifierifittedrandomforestclassifi": [64, 142, 324], "randomforestclassifierinot": 324, "randomforestclassifierrandomforestclassifi": [64, 187, 249, 280], "randomforestregressor": [2, 50, 141, 154, 155, 158, 180, 181, 319, 324, 388, 414, 558, 559, 561, 563, 567, 569, 571, 635, 636, 917, 994, 1005, 1039, 1040, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051], "randomforestregressorrandomforestregressor": [155, 158], "randomgeek78": 1048, "randomized_range_find": [2, 384, 1035, 1040], "randomized_svd": [2, 56, 384, 451, 453, 533, 542, 545, 547, 1034, 1035, 1040, 1047, 1048, 1049], "randomized_svd_low_rank": 1041, "randomizedlasso": 1041, "randomizedlogisticregress": 1041, "randomizedpca": [1028, 1034, 1036, 1037, 1039, 1040, 1041], "randomizedsearchcv": [2, 46, 104, 169, 269, 276, 319, 358, 388, 398, 403, 577, 993, 1004, 1018, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1049, 1051, 1052, 1053], "randomizedsearchcvinot": 104, "randomli": [2, 53, 73, 84, 95, 104, 118, 138, 150, 151, 180, 182, 186, 227, 241, 245, 258, 263, 274, 285, 287, 328, 331, 358, 363, 384, 387, 388, 407, 411, 414, 417, 449, 458, 516, 524, 532, 538, 546, 547, 552, 560, 561, 562, 563, 564, 565, 566, 613, 614, 674, 682, 693, 697, 719, 800, 801, 863, 901, 915, 916, 917, 918, 1003, 1005, 1007, 1010, 1012, 1016, 1020, 1025, 1045, 1049, 1051, 1053], "randomst": [2, 45, 54, 59, 60, 62, 68, 71, 73, 80, 84, 95, 96, 113, 114, 117, 121, 123, 128, 136, 146, 147, 150, 151, 152, 154, 161, 169, 170, 173, 175, 176, 178, 180, 181, 184, 187, 192, 193, 194, 195, 196, 200, 205, 211, 212, 217, 224, 233, 237, 243, 244, 253, 256, 263, 271, 274, 275, 277, 278, 279, 280, 300, 303, 309, 311, 312, 315, 318, 319, 321, 323, 324, 328, 329, 333, 342, 356, 377, 380, 384, 389, 398, 412, 419, 420, 440, 443, 447, 449, 451, 452, 453, 454, 458, 459, 460, 462, 469, 470, 474, 475, 476, 478, 479, 480, 481, 488, 491, 493, 496, 498, 504, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 585, 586, 609, 610, 613, 614, 630, 635, 637, 642, 643, 644, 645, 646, 649, 650, 652, 653, 655, 656, 657, 661, 662, 663, 664, 665, 666, 669, 670, 671, 673, 674, 675, 677, 679, 680, 681, 682, 690, 692, 693, 694, 695, 696, 697, 698, 704, 784, 796, 800, 801, 804, 805, 806, 807, 808, 809, 815, 817, 818, 819, 820, 821, 822, 823, 825, 831, 832, 833, 837, 838, 841, 842, 843, 844, 846, 847, 848, 852, 856, 863, 864, 865, 872, 884, 888, 896, 899, 900, 902, 903, 904, 907, 908, 909, 912, 913, 915, 916, 917, 918, 936, 950, 951, 972, 974, 977, 1014, 1030], "randomtreesembed": [2, 140, 153, 231, 414, 917, 994, 1035, 1042, 1043, 1047, 1048, 1049], "randomtreesembedding_": 567, "randomtreesembeddingrandomtreesembed": 140, "rang": [2, 44, 45, 46, 47, 48, 50, 52, 56, 58, 59, 63, 64, 65, 69, 70, 73, 74, 76, 78, 81, 82, 84, 85, 89, 94, 95, 97, 98, 110, 111, 113, 114, 135, 137, 138, 139, 142, 147, 150, 154, 160, 163, 164, 170, 185, 186, 190, 196, 200, 201, 203, 205, 208, 210, 211, 214, 217, 218, 226, 228, 231, 233, 240, 241, 246, 247, 253, 255, 258, 259, 262, 263, 267, 268, 269, 271, 272, 273, 275, 276, 277, 279, 280, 281, 283, 287, 292, 298, 300, 301, 306, 308, 313, 314, 317, 321, 322, 326, 329, 339, 346, 350, 351, 355, 357, 363, 369, 370, 372, 375, 377, 381, 384, 389, 401, 407, 411, 414, 417, 440, 461, 469, 471, 472, 473, 474, 475, 476, 478, 481, 491, 495, 496, 515, 528, 542, 554, 555, 560, 561, 564, 590, 591, 593, 632, 635, 641, 643, 651, 652, 672, 674, 679, 680, 681, 683, 695, 715, 734, 749, 791, 833, 839, 853, 855, 857, 858, 863, 877, 884, 885, 886, 892, 893, 896, 897, 900, 901, 950, 951, 993, 1000, 1004, 1008, 1018, 1024, 1028, 1039, 1040, 1041, 1042, 1044, 1047, 1050], "range_n_clust": 94, "range_n_outli": 113, "rangeindex": [185, 262, 497], "rangl": [996, 1004, 1018, 1019], "ranjanikrishnan": 1047, "rank": [2, 44, 56, 63, 112, 125, 128, 142, 163, 187, 188, 228, 266, 268, 276, 371, 402, 404, 405, 409, 410, 412, 414, 415, 509, 510, 522, 525, 550, 551, 595, 596, 608, 651, 660, 672, 683, 699, 723, 729, 730, 742, 743, 759, 791, 797, 806, 807, 951, 993, 995, 996, 1001, 1012, 1014, 1028, 1030, 1035, 1040, 1043, 1044, 1048, 1049, 1052, 1053], "rank_": 660, "rank_t": 803, "rank_test_": 272, "rank_test_precis": [266, 272], "rank_test_recal": 266, "rank_test_scor": [268, 276, 803, 817, 1040], "rankdata": 1041, "ranked_exposur": [210, 228], "ranked_frequ": 210, "ranked_pure_premium": 228, "ranking_": [163, 595, 596], "rankylau": 1042, "ransac": [2, 182, 191, 216, 227, 525, 652, 660, 674, 681, 682, 1025], "ransacregressor": [2, 213, 216, 227, 398, 652, 681, 682, 1000, 1005, 1037, 1039, 1040, 1041, 1042, 1045, 1047, 1048, 1052], "rao": [411, 1046, 1049], "raphael": 1051, "rapha\u00ebl": 1044, "raphson": [651, 672, 683], "rapid": 1028, "rapidli": [214, 270, 1019, 1028], "rare": [65, 186, 314, 358, 379, 387, 389, 392, 405, 407, 411, 591, 651, 661, 662, 672, 683, 907, 938, 1000, 1014, 1028, 1041, 1042, 1043, 1047, 1049, 1052], "rarer": [350, 352, 415], "raschka": [1039, 1040, 1041, 1042, 1043, 1046], "rashchedrin": 1041, "rasmu": [190, 1041], "rasmussen": [174, 417, 613, 614, 617, 622, 625], "raspberri": 393, "raster": 103, "rastgoo": 1051, "rastogi": 1042, "rastrojo": [407, 708], "rasul": [1039, 1041, 1042], "rat": [51, 301, 370, 499], "rate": [2, 44, 135, 139, 144, 150, 160, 186, 210, 217, 228, 241, 247, 262, 265, 268, 277, 278, 304, 305, 306, 364, 375, 406, 407, 408, 412, 416, 446, 466, 537, 554, 555, 560, 561, 562, 563, 594, 597, 598, 600, 601, 602, 608, 647, 648, 671, 679, 680, 681, 695, 701, 705, 730, 785, 792, 863, 864, 865, 901, 993, 1000, 1001, 1004, 1007, 1008, 1018, 1020, 1028, 1038, 1042, 1043], "rather": [52, 65, 87, 114, 135, 138, 150, 180, 185, 210, 211, 224, 247, 282, 312, 313, 350, 351, 358, 363, 371, 373, 375, 377, 380, 381, 383, 387, 388, 389, 390, 407, 411, 412, 414, 415, 417, 448, 461, 463, 464, 467, 566, 583, 590, 591, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 632, 649, 650, 655, 656, 663, 664, 665, 666, 784, 817, 838, 840, 841, 870, 907, 908, 919, 924, 951, 998, 1000, 1001, 1004, 1006, 1007, 1011, 1024, 1034, 1035, 1036, 1037, 1041, 1042, 1043, 1044, 1049, 1050, 1052, 1053], "ratio": [2, 47, 87, 100, 106, 129, 182, 241, 243, 256, 260, 362, 375, 407, 409, 411, 414, 450, 456, 494, 495, 516, 542, 550, 551, 552, 634, 661, 713, 715, 719, 728, 733, 739, 742, 785, 786, 787, 790, 798, 830, 833, 853, 854, 900, 972, 998, 1010, 1020, 1025, 1049, 1051], "ration": [2, 174, 262, 626, 1002], "rationalquadrat": [2, 174, 178, 417, 619], "raton": 1000, "raul": [1036, 1037], "rausch": [1042, 1043, 1046], "rauwuckl": 1046, "ravel": [2, 45, 54, 56, 58, 64, 78, 87, 88, 92, 112, 130, 136, 138, 143, 147, 153, 154, 155, 169, 171, 173, 174, 175, 176, 185, 192, 201, 202, 204, 210, 223, 224, 231, 235, 237, 241, 243, 247, 251, 255, 257, 262, 271, 275, 277, 282, 288, 293, 294, 300, 301, 303, 304, 305, 306, 310, 311, 321, 325, 333, 339, 344, 345, 347, 348, 350, 356, 465, 494, 495, 496, 634, 721, 990, 1004, 1050], "ravi": [1046, 1049], "raw": [2, 17, 44, 52, 53, 55, 73, 113, 123, 155, 174, 185, 190, 306, 315, 330, 352, 362, 370, 377, 383, 389, 405, 407, 409, 412, 415, 469, 474, 502, 503, 504, 560, 561, 562, 564, 584, 590, 591, 592, 593, 637, 680, 693, 697, 708, 789, 853, 911, 1001, 1004, 1008, 1010, 1011, 1014, 1017, 1035, 1039, 1042, 1045, 1051], "raw_coef_": [907, 908], "raw_covariance_": [409, 469, 474], "raw_data": 352, "raw_docu": [590, 593], "raw_location_": [409, 469, 474], "raw_model": 315, "raw_pixel_classifi": 306, "raw_support_": [469, 474], "raw_target_regr": 408, "raw_valu": [724, 726, 731, 748, 749, 751, 753, 754, 756, 788, 793, 794, 1004, 1042, 1045], "raw_x": [415, 584], "raytheon": 52, "raz": 1048, "ra\u00fal": 1043, "rb": [48, 401], "rbf": [2, 45, 46, 47, 50, 51, 67, 68, 126, 156, 169, 170, 171, 173, 174, 175, 176, 177, 178, 182, 190, 224, 236, 237, 243, 266, 268, 270, 273, 294, 333, 334, 336, 345, 367, 395, 408, 412, 414, 452, 462, 503, 505, 536, 542, 613, 614, 615, 616, 619, 621, 622, 623, 624, 626, 627, 634, 642, 643, 644, 645, 646, 679, 694, 768, 777, 779, 803, 814, 817, 823, 867, 887, 902, 903, 907, 909, 910, 911, 912, 913, 993, 996, 997, 1001, 1004, 1010, 1014, 1017, 1025, 1030, 1040, 1045], "rbf_featur": [644, 996], "rbf_kernel": [2, 403, 768, 1002, 1038, 1053], "rbf_svc": [333, 1019], "rbfsampler": [2, 242, 642, 643, 645, 996, 1038, 1048, 1049], "rbm": [2, 306, 863, 864, 865, 1009], "rbm_features_classifi": 306, "rc": [224, 379], "rceil": [404, 1010], "rcond": 130, "rcparam": [48, 237, 242, 315], "rcv1": [2, 368, 498, 1030, 1039], "rcwoolston": 1045, "rd": 415, "rd9e56ef97513": 2, "rda": 372, "rdbu": [68, 71, 121, 226, 303, 339, 344], "rdbu_r": [88, 114, 131, 339], "rdownload": 48, "rdylbu": [143, 355], "re": [2, 44, 48, 54, 64, 65, 90, 103, 104, 135, 144, 172, 184, 185, 228, 244, 254, 258, 271, 273, 277, 318, 350, 352, 363, 375, 376, 377, 383, 388, 390, 398, 405, 411, 415, 469, 470, 471, 472, 473, 474, 475, 476, 492, 556, 557, 558, 559, 562, 563, 564, 565, 566, 567, 612, 649, 655, 663, 665, 805, 820, 823, 915, 916, 917, 918, 1000, 1005, 1007, 1014, 1019, 1024, 1028, 1034, 1038, 1039, 1041, 1043], "reach": [95, 141, 145, 165, 175, 210, 212, 226, 228, 262, 270, 321, 339, 357, 380, 390, 393, 407, 412, 416, 450, 457, 509, 510, 595, 596, 630, 647, 648, 649, 650, 655, 656, 657, 658, 659, 663, 664, 665, 666, 669, 670, 671, 679, 680, 681, 682, 684, 685, 686, 687, 732, 733, 786, 800, 801, 864, 865, 904, 993, 1004, 1008, 1018, 1020, 1028, 1045, 1049, 1050, 1051], "reachability_": [99, 407, 450, 455, 456, 457], "reachabl": [2, 89, 99, 446, 450, 455, 456, 457, 853, 957], "react": 300, "reactiv": 381, "read": [48, 53, 56, 121, 230, 275, 317, 318, 319, 321, 323, 362, 369, 376, 377, 378, 379, 380, 382, 383, 387, 388, 389, 395, 401, 407, 418, 419, 420, 421, 424, 430, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 457, 459, 461, 462, 463, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 613, 614, 616, 617, 618, 619, 622, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 700, 701, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 730, 731, 732, 733, 734, 735, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 859, 860, 861, 863, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 921, 947, 993, 1000, 1004, 1005, 1023, 1028, 1035, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1051, 1052], "read_byt": 48, "read_csv": [52, 326, 380, 497, 1049], "read_csv_kwarg": [497, 1050], "read_parquet": [53, 326], "readabl": [114, 269, 320, 380, 381, 383, 535, 1043, 1046, 1047, 1048, 1049], "reader": [46, 78, 320, 364, 375], "readi": [44, 47, 174, 211, 262, 370, 375, 379, 383, 464], "readili": [321, 412, 1020, 1028], "readm": [375, 383, 415, 494], "readonli": [907, 908, 1047, 1049, 1050], "readonly_memmap": 1051, "readthedoc": 389, "real": [53, 68, 71, 89, 91, 103, 107, 110, 112, 113, 135, 150, 172, 185, 214, 234, 237, 247, 261, 262, 274, 283, 292, 295, 309, 310, 338, 343, 352, 356, 362, 368, 369, 372, 379, 381, 384, 387, 388, 389, 404, 405, 407, 409, 411, 412, 414, 415, 469, 489, 490, 494, 495, 496, 497, 498, 501, 502, 505, 511, 552, 553, 556, 557, 558, 559, 560, 561, 565, 566, 594, 596, 597, 598, 599, 600, 601, 602, 634, 702, 707, 727, 731, 755, 758, 760, 788, 798, 832, 864, 865, 909, 910, 911, 912, 913, 916, 918, 994, 995, 996, 1001, 1004, 1006, 1008, 1009, 1010, 1020, 1022, 1025, 1030, 1034, 1047, 1051], "real_cov": [110, 111, 420, 470, 473, 474, 475, 476, 479, 480, 481], "real_data": 292, "realist": [44, 48, 270, 277, 278, 336, 370, 1004], "realiti": 371, "realiz": [210, 1028], "realli": [110, 187, 200, 322, 379, 380, 381, 1004, 1010, 1028, 1048], "reappli": 414, "rearrang": [59, 60, 404], "reason": [44, 48, 52, 65, 78, 87, 103, 147, 150, 165, 185, 186, 190, 210, 211, 218, 228, 237, 241, 242, 244, 247, 262, 265, 268, 269, 274, 281, 285, 288, 309, 313, 322, 343, 351, 352, 358, 362, 363, 364, 370, 374, 375, 376, 377, 379, 383, 387, 388, 389, 390, 406, 407, 408, 409, 412, 414, 415, 509, 533, 575, 576, 641, 649, 655, 657, 675, 690, 695, 766, 803, 817, 851, 856, 863, 882, 904, 923, 925, 926, 944, 945, 946, 993, 994, 999, 1000, 1001, 1004, 1006, 1007, 1008, 1010, 1014, 1018, 1019, 1020, 1028, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "reassign": [84, 375, 447, 449, 1035, 1039], "reassignment_ratio": 449, "rebalanc": 389, "rebas": [375, 379], "rebecca": 1041, "rebekah": [1042, 1043, 1044], "reboul": 1044, "rebuild": [362, 373, 401, 415, 442], "rebuilt": [69, 373, 847, 848], "rec": [58, 352, 370, 644], "rec_l1": 54, "rec_l2": 54, "rec_macro": 411, "recal": [2, 46, 63, 69, 103, 114, 126, 162, 182, 238, 247, 260, 262, 266, 285, 306, 328, 329, 375, 389, 406, 407, 505, 606, 703, 709, 710, 711, 715, 716, 730, 732, 733, 734, 785, 786, 787, 790, 791, 825, 833, 836, 868, 887, 891, 907, 1000, 1020, 1025, 1037, 1038, 1041, 1043, 1044, 1046, 1047, 1048, 1050, 1051], "recalcul": [248, 250, 407, 1031, 1034], "recall_macro": [411, 1004], "recall_scor": [2, 63, 262, 275, 411, 711, 787, 1004, 1034, 1036, 1037, 1038, 1039, 1044, 1050], "recant": 390, "receiv": [0, 2, 58, 182, 238, 244, 250, 260, 262, 263, 265, 270, 352, 358, 375, 377, 383, 389, 406, 411, 414, 505, 661, 705, 709, 711, 730, 785, 791, 792, 822, 833, 835, 836, 874, 912, 1005, 1008, 1009, 1018, 1025, 1044, 1045], "recent": [53, 244, 373, 380, 383, 387, 389, 407, 468, 539, 566, 1018, 1028, 1037, 1046], "recht": [644, 996], "recip": [322, 379, 401, 1001, 1028], "reciproc": [371, 1004], "reckon": 370, "recogn": [44, 45, 66, 85, 87, 117, 124, 163, 182, 211, 261, 292, 320, 328, 329, 381, 398, 407, 415, 503, 700, 716, 833, 912, 1004, 1025, 1051], "recognit": [43, 49, 55, 121, 182, 246, 306, 313, 368, 380, 412, 495, 503, 533, 535, 542, 700, 711, 716, 744, 772, 791, 792, 800, 817, 833, 887, 912, 996, 1000, 1004, 1005, 1009, 1019, 1021, 1025, 1030, 1034], "recommend": [117, 180, 203, 227, 238, 244, 264, 277, 312, 319, 326, 343, 362, 363, 369, 370, 373, 375, 377, 381, 383, 387, 393, 401, 410, 411, 412, 414, 416, 438, 447, 449, 451, 460, 497, 509, 536, 539, 545, 550, 562, 563, 570, 584, 585, 591, 608, 614, 634, 635, 641, 661, 662, 673, 679, 695, 700, 701, 703, 705, 809, 815, 817, 826, 863, 870, 872, 879, 886, 887, 892, 893, 895, 896, 897, 898, 900, 909, 912, 951, 992, 993, 1001, 1004, 1006, 1008, 1011, 1014, 1016, 1018, 1019, 1020, 1022, 1028, 1030, 1036, 1037, 1043, 1044, 1045, 1046, 1048, 1050], "recompil": [376, 381, 393], "recomput": [89, 90, 248, 250, 290, 317, 469, 474, 1000, 1016, 1039, 1050], "reconstruct": [2, 43, 56, 59, 100, 121, 122, 126, 182, 209, 233, 234, 321, 401, 412, 415, 416, 482, 483, 484, 532, 534, 536, 538, 539, 540, 541, 543, 544, 546, 547, 549, 585, 589, 655, 675, 691, 692, 696, 899, 900, 1000, 1001, 1025, 1048], "reconstruct_from_patches_2d": [2, 124, 415, 585], "reconstruction_err_": [539, 541], "reconstruction_error": 691, "reconstruction_error_": 692, "record": [2, 51, 122, 139, 150, 187, 244, 262, 314, 352, 362, 375, 401, 407, 409, 450, 457, 499, 623, 646, 695, 774, 777, 781, 782, 783, 784, 830, 853, 1047, 1048], "recov": [76, 99, 114, 122, 123, 128, 144, 169, 184, 196, 209, 210, 214, 230, 281, 352, 409, 413, 416, 419, 460, 534, 560, 1000, 1001, 1003, 1024, 1040], "recoveri": [52, 114, 196, 209, 409, 416], "recreat": 248, "rect": [48, 86, 192], "rect_colorbar": 308, "rect_histi": 308, "rect_histx": 308, "rect_scatt": 308, "rectangl": 48, "rectangular": [370, 389, 951, 1024], "rectifi": [864, 865], "recurs": [2, 18, 53, 151, 159, 162, 165, 182, 263, 266, 267, 271, 273, 292, 354, 407, 411, 440, 441, 442, 445, 463, 503, 516, 564, 595, 596, 599, 604, 635, 636, 661, 822, 867, 877, 1004, 1007, 1010, 1011, 1020, 1025, 1026, 1030, 1034, 1044, 1045], "recursionerror": 1052, "red": [49, 50, 51, 64, 70, 71, 94, 112, 119, 121, 122, 123, 138, 155, 158, 178, 190, 192, 193, 201, 208, 235, 248, 263, 274, 301, 304, 309, 313, 314, 330, 339, 356, 373, 389, 407, 412, 1005], "reda": 1040, "redden": 1045, "reddi": [1041, 1042, 1043, 1048, 1051, 1053], "redefin": [59, 147, 185], "redesign": [387, 1034], "redirects_en": 56, "redirects_filenam": 56, "redirects_url": 56, "redistribut": 442, "redo": 351, "reduc": [2, 38, 44, 47, 78, 81, 82, 87, 104, 105, 110, 138, 147, 149, 150, 153, 162, 185, 192, 193, 196, 208, 214, 215, 218, 239, 241, 244, 247, 269, 275, 285, 297, 310, 313, 314, 322, 351, 352, 358, 367, 369, 372, 375, 381, 387, 389, 401, 405, 406, 407, 409, 411, 412, 414, 415, 416, 418, 444, 445, 450, 457, 460, 494, 535, 545, 550, 556, 557, 558, 559, 564, 565, 566, 567, 574, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 609, 610, 613, 630, 646, 655, 675, 676, 677, 678, 690, 695, 698, 784, 803, 806, 807, 809, 817, 826, 828, 829, 830, 831, 834, 876, 877, 884, 896, 899, 900, 907, 908, 915, 916, 917, 918, 993, 996, 998, 999, 1000, 1001, 1004, 1007, 1016, 1017, 1019, 1021, 1034, 1036, 1037, 1038, 1039, 1040, 1043, 1044, 1045, 1046, 1048, 1050, 1052], "reduce_dim": [105, 249, 267, 408], "reduce_dim__k": 105, "reduce_dim__n_compon": [105, 267, 408], "reduce_func": [784, 1045], "reduced_data": 92, "reducer_label": 105, "reduct": [2, 11, 46, 58, 88, 91, 102, 106, 117, 121, 129, 138, 153, 182, 229, 231, 232, 235, 241, 245, 289, 296, 298, 321, 336, 358, 362, 367, 407, 408, 410, 412, 414, 416, 468, 482, 483, 484, 485, 503, 531, 533, 535, 536, 539, 540, 541, 542, 545, 548, 550, 554, 555, 558, 559, 560, 561, 565, 566, 567, 601, 609, 691, 692, 693, 694, 695, 696, 784, 803, 833, 849, 856, 863, 867, 868, 877, 887, 905, 907, 915, 916, 917, 918, 996, 1001, 1016, 1020, 1023, 1024, 1025, 1026, 1028, 1030, 1035, 1036, 1037, 1040, 1048, 1049, 1050], "redund": [63, 65, 131, 164, 254, 259, 324, 358, 371, 374, 375, 380, 389, 405, 516, 637, 1046], "redundantli": 389, "ref": [375, 383, 994, 1040], "ref_lin": 438, "refactor": [321, 427, 1034, 1036, 1037, 1038, 1044, 1047, 1048, 1049], "refer": [44, 45, 73, 74, 94, 97, 104, 112, 127, 135, 148, 150, 155, 165, 167, 174, 178, 187, 198, 228, 244, 247, 262, 268, 273, 274, 275, 282, 291, 298, 308, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 351, 363, 369, 370, 372, 373, 375, 376, 377, 378, 380, 381, 382, 383, 387, 388, 389, 390, 393, 398, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 418, 419, 420, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 457, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 499, 504, 512, 514, 516, 517, 518, 519, 520, 521, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 545, 548, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 592, 595, 596, 597, 604, 609, 610, 613, 614, 617, 622, 625, 626, 630, 631, 634, 635, 637, 638, 639, 640, 641, 642, 645, 646, 647, 648, 650, 652, 654, 656, 658, 659, 661, 664, 666, 668, 669, 670, 671, 674, 676, 678, 679, 681, 682, 685, 686, 691, 692, 693, 694, 695, 696, 697, 698, 699, 704, 707, 708, 710, 711, 712, 713, 715, 717, 718, 719, 720, 721, 722, 723, 724, 726, 727, 728, 729, 730, 732, 733, 734, 737, 738, 739, 740, 741, 743, 744, 746, 759, 761, 762, 772, 786, 788, 789, 791, 792, 795, 796, 798, 800, 801, 803, 804, 805, 806, 807, 808, 809, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 837, 838, 842, 843, 844, 846, 849, 852, 853, 854, 856, 863, 864, 865, 867, 872, 873, 874, 876, 877, 879, 880, 881, 883, 884, 885, 887, 888, 895, 900, 901, 902, 903, 904, 905, 907, 909, 910, 912, 913, 915, 916, 917, 918, 938, 944, 946, 951, 969, 993, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1024, 1027, 1034, 1038, 1039, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "referenc": [372, 375, 377, 383, 389, 899, 900, 1007, 1041, 1047], "references_": 884, "refin": [63, 114, 472, 712, 1004], "refit": [142, 162, 164, 167, 182, 260, 267, 269, 272, 275, 276, 280, 389, 406, 411, 417, 503, 568, 569, 630, 662, 668, 716, 803, 806, 807, 817, 825, 833, 912, 993, 1000, 1004, 1025, 1041, 1042, 1043, 1052], "refit_strategi": 266, "refit_time_": [803, 806, 807, 817, 1042], "reflect": [52, 76, 81, 82, 112, 119, 122, 144, 186, 187, 210, 228, 292, 351, 371, 374, 375, 379, 389, 392, 404, 450, 456, 924, 1001, 1004, 1010, 1012, 1035, 1043, 1052], "reformul": 374, "refrain": [211, 375], "refurbish": 7, "refus": [262, 387, 897, 898], "reg": [148, 185, 193, 244, 309, 318, 344, 414, 559, 561, 569, 653, 654, 656, 657, 658, 659, 660, 666, 667, 668, 673, 674, 681, 682, 692, 696, 918, 1000, 1039], "reg1": [158, 414], "reg2": [158, 414], "reg3": [158, 414], "reg_covar": [253, 800, 801], "reg_nnl": 206, "reg_ol": 206, "reg_param": [551, 1053], "regard": [0, 11, 45, 47, 51, 53, 87, 89, 104, 126, 127, 169, 174, 186, 187, 200, 212, 232, 243, 247, 270, 277, 278, 291, 351, 370, 375, 376, 380, 387, 389, 395, 401, 407, 412, 414, 415, 417, 443, 447, 452, 459, 462, 502, 617, 622, 659, 661, 704, 746, 801, 809, 825, 826, 831, 849, 850, 997, 1000, 1004, 1006, 1007, 1009, 1011, 1018, 1019, 1020, 1041, 1044], "regardless": [228, 269, 270, 271, 277, 363, 375, 407, 536, 635, 636, 661, 707, 718, 1004, 1016, 1042, 1049, 1050], "regedit": 393, "regener": 872, "regex": [268, 352, 464, 466], "regexp": [590, 591, 593], "regim": [44, 389, 907, 908, 1003], "region": [52, 56, 60, 63, 72, 82, 83, 87, 90, 100, 124, 156, 176, 182, 185, 210, 228, 237, 241, 242, 259, 300, 311, 339, 346, 372, 382, 389, 407, 414, 417, 448, 450, 456, 462, 589, 1001, 1004, 1007, 1010, 1014, 1018, 1020, 1025], "region_1": 314, "region_2": 314, "regist": [2, 196, 350, 381, 973], "register_parallel_backend": [2, 1042, 1052], "registri": [373, 393, 1023], "regr": [408, 555, 557, 566, 649, 650, 670, 840, 865, 908, 910, 913, 1019], "regr_1": [136, 356], "regr_2": [136, 356], "regr_3": 356, "regr_multirf": 154, "regr_rf": 154, "regress": [2, 14, 20, 23, 25, 32, 41, 47, 50, 54, 63, 65, 67, 88, 102, 104, 112, 113, 115, 122, 123, 124, 128, 134, 135, 138, 140, 141, 142, 145, 146, 149, 150, 151, 154, 155, 163, 165, 168, 170, 178, 180, 181, 182, 184, 185, 186, 187, 188, 191, 194, 195, 196, 197, 199, 201, 205, 206, 211, 213, 214, 215, 216, 221, 226, 233, 236, 238, 246, 247, 251, 262, 264, 276, 279, 281, 282, 283, 285, 287, 289, 291, 305, 306, 308, 309, 313, 319, 320, 321, 322, 324, 326, 334, 346, 350, 353, 354, 357, 363, 364, 367, 368, 370, 372, 375, 377, 380, 383, 384, 387, 388, 389, 402, 405, 409, 410, 411, 412, 414, 416, 430, 437, 464, 465, 474, 484, 489, 490, 493, 497, 502, 503, 505, 506, 513, 517, 518, 519, 525, 529, 532, 536, 538, 540, 542, 543, 544, 546, 547, 549, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 565, 566, 567, 568, 571, 594, 595, 596, 597, 598, 599, 600, 601, 602, 606, 607, 608, 611, 613, 614, 617, 618, 625, 626, 628, 634, 635, 636, 637, 638, 640, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 697, 704, 709, 724, 726, 727, 731, 744, 745, 748, 749, 750, 751, 752, 753, 754, 755, 756, 788, 793, 794, 803, 806, 807, 809, 817, 826, 830, 831, 833, 834, 836, 838, 840, 841, 849, 850, 855, 857, 858, 864, 865, 867, 868, 871, 872, 874, 880, 881, 882, 884, 887, 888, 891, 896, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 919, 921, 925, 927, 933, 936, 938, 955, 993, 994, 996, 999, 1001, 1011, 1012, 1014, 1015, 1023, 1024, 1025, 1026, 1027, 1028, 1030, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "regression_data": 47, "regression_model": 1041, "regression_test": 383, "regressioncriterion": 1042, "regressionregressionramdomizedpcaramdom": 395, "regressor": [2, 31, 44, 108, 117, 148, 154, 155, 158, 169, 174, 181, 182, 185, 191, 193, 195, 196, 207, 210, 211, 213, 216, 227, 228, 244, 271, 283, 293, 313, 318, 319, 362, 375, 377, 387, 389, 405, 408, 417, 430, 433, 434, 436, 465, 482, 483, 484, 485, 525, 552, 553, 554, 555, 556, 557, 558, 559, 561, 563, 566, 567, 568, 569, 570, 571, 607, 608, 611, 614, 635, 636, 638, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 664, 665, 666, 667, 668, 670, 672, 673, 675, 676, 681, 682, 704, 835, 836, 839, 840, 841, 850, 858, 863, 864, 865, 868, 874, 882, 887, 888, 908, 910, 913, 915, 916, 917, 918, 921, 925, 926, 927, 942, 944, 993, 994, 1000, 1004, 1005, 1007, 1012, 1018, 1023, 1025, 1026, 1030, 1034, 1035, 1039, 1040, 1041, 1043, 1044, 1047, 1048, 1049, 1051, 1053], "regressor_": [185, 465, 595, 596, 599], "regressor__sample_weight": 210, "regressor_tag": 926, "regressor_with_": 184, "regressor_without_": 184, "regressorchain": [2, 398, 838, 840, 1042, 1045, 1049], "regressormixin": [2, 244, 377, 389, 465, 927, 1045, 1053], "regressortag": [2, 926], "regul": 0, "regular": [2, 63, 65, 68, 72, 76, 91, 92, 93, 94, 95, 104, 106, 111, 126, 134, 143, 145, 146, 148, 153, 169, 170, 171, 173, 176, 178, 180, 182, 184, 191, 192, 193, 195, 196, 198, 199, 200, 202, 206, 207, 208, 210, 217, 220, 223, 224, 226, 228, 243, 254, 260, 261, 264, 269, 270, 272, 293, 294, 302, 304, 305, 306, 310, 311, 312, 313, 314, 315, 333, 334, 336, 338, 339, 340, 343, 344, 347, 348, 350, 352, 354, 362, 375, 387, 388, 405, 407, 409, 410, 412, 413, 414, 417, 437, 443, 447, 471, 472, 476, 478, 479, 480, 481, 505, 513, 515, 516, 521, 523, 525, 529, 539, 540, 541, 544, 548, 549, 551, 560, 562, 563, 590, 591, 593, 641, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 690, 692, 696, 738, 744, 753, 800, 801, 820, 826, 833, 834, 864, 865, 868, 887, 907, 908, 909, 910, 912, 913, 914, 993, 994, 996, 997, 998, 999, 1001, 1003, 1009, 1010, 1014, 1017, 1018, 1019, 1025, 1026, 1028, 1030, 1034, 1035, 1036, 1038, 1039, 1043, 1044, 1046, 1047, 1052], "regularis": [214, 420, 473, 475], "regularli": [143, 285, 387, 1006], "regulatori": 150, "rehan": 1049, "rehman": 1042, "reiichiro": [1041, 1042], "reilli": 1051, "reimburs": 262, "reimplement": [381, 387, 389, 1040, 1044], "reinforc": 1024, "reinit": 383, "reiniti": 387, "reinstal": 393, "reintroduc": 1050, "reitsam": 1046, "reject": [245, 262, 389, 390, 524, 674, 730, 933, 934, 1000, 1004, 1042], "rel": [44, 46, 48, 56, 59, 65, 89, 95, 126, 142, 174, 188, 190, 193, 210, 228, 256, 281, 294, 295, 309, 318, 321, 339, 343, 350, 351, 370, 374, 377, 383, 389, 405, 407, 411, 414, 415, 417, 440, 443, 447, 449, 459, 522, 525, 532, 535, 538, 542, 546, 547, 558, 559, 560, 561, 565, 566, 567, 606, 652, 661, 662, 674, 675, 677, 693, 697, 732, 749, 750, 803, 806, 807, 809, 817, 826, 831, 834, 847, 848, 852, 864, 865, 876, 877, 887, 903, 907, 908, 909, 912, 914, 915, 916, 917, 918, 1000, 1001, 1004, 1006, 1007, 1008, 1010], "relabel": [374, 821, 822, 904], "relat": [8, 43, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 369, 370, 371, 374, 375, 377, 379, 380, 382, 383, 384, 387, 389, 390, 392, 398, 401, 406, 407, 408, 409, 410, 411, 412, 414, 417, 450, 464, 469, 497, 550, 551, 563, 564, 642, 676, 680, 695, 704, 726, 746, 824, 830, 854, 865, 866, 868, 871, 872, 877, 880, 882, 883, 886, 895, 911, 993, 996, 998, 1004, 1005, 1007, 1008, 1011, 1014, 1019, 1020, 1021, 1024, 1025, 1027, 1030, 1034, 1038, 1039, 1040, 1042, 1043, 1046, 1047, 1050], "relate_point": 298, "relationship": [2, 44, 53, 59, 135, 136, 150, 175, 184, 185, 192, 196, 199, 203, 210, 212, 213, 275, 282, 287, 309, 315, 324, 389, 407, 409, 411, 462, 497, 639, 717, 1001, 1004, 1006, 1007, 1011, 1012, 1039], "relative_tim": 256, "relax": [47, 407, 415, 453, 1017, 1041], "releas": [0, 55, 89, 104, 133, 139, 140, 142, 152, 165, 167, 180, 181, 186, 187, 190, 198, 210, 211, 212, 239, 244, 248, 250, 251, 262, 263, 280, 282, 290, 314, 331, 363, 373, 375, 376, 378, 383, 387, 389, 415, 443, 446, 447, 464, 467, 490, 491, 497, 502, 503, 505, 513, 516, 522, 525, 539, 542, 558, 562, 563, 565, 566, 568, 601, 604, 612, 631, 633, 635, 637, 643, 649, 651, 655, 661, 672, 679, 683, 691, 700, 704, 705, 720, 721, 735, 745, 751, 781, 791, 798, 802, 803, 804, 806, 807, 809, 817, 825, 826, 829, 830, 833, 849, 851, 868, 872, 877, 880, 881, 882, 886, 887, 888, 904, 905, 907, 912, 915, 916, 926, 934, 944, 946, 992, 1020, 1025, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "release_highlight": 1025, "relev": [47, 49, 58, 109, 113, 128, 165, 182, 192, 205, 213, 268, 269, 275, 358, 362, 364, 370, 372, 374, 375, 377, 380, 381, 389, 390, 398, 409, 410, 416, 417, 437, 443, 444, 447, 449, 465, 470, 474, 482, 483, 484, 534, 535, 537, 542, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 592, 613, 614, 638, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 693, 729, 743, 759, 802, 804, 805, 806, 807, 810, 812, 821, 825, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 852, 854, 857, 858, 864, 865, 867, 870, 872, 873, 874, 879, 885, 886, 887, 902, 903, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 920, 921, 1004, 1005, 1010, 1021, 1024, 1025, 1037, 1042, 1048], "reli": [126, 141, 144, 165, 188, 198, 200, 285, 288, 318, 322, 350, 362, 363, 377, 380, 383, 384, 387, 389, 403, 404, 407, 412, 414, 415, 550, 595, 599, 609, 610, 781, 831, 834, 872, 956, 969, 993, 996, 998, 1000, 1004, 1007, 1012, 1014, 1019, 1028, 1042, 1043, 1044, 1048, 1050, 1051], "reliabl": [2, 63, 65, 326, 405, 411, 438, 439, 649, 1004, 1020, 1028], "relianc": [126, 214], "religion": [58, 269, 350, 351, 352, 370, 1005], "reloc": 1043, "relova": 1047, "relu": [864, 865], "remain": [48, 63, 65, 104, 135, 142, 146, 148, 164, 185, 210, 214, 226, 253, 266, 270, 274, 277, 326, 404, 407, 408, 409, 411, 415, 446, 464, 467, 516, 517, 522, 529, 535, 571, 613, 614, 766, 772, 806, 807, 808, 811, 813, 842, 843, 844, 846, 955, 993, 994, 996, 1003, 1004, 1008, 1014, 1020, 1024, 1036, 1042, 1048, 1051], "remaind": [44, 144, 185, 200, 210, 212, 228, 247, 322, 354, 408, 464, 467, 1034, 1041, 1042, 1043, 1046, 1047, 1050, 1052], "remaining_column": 464, "remark": [89, 117, 165, 262, 364, 375, 1014], "remedi": 227, "rememb": [89, 326, 377, 379, 380, 393, 415, 1007, 1011, 1020], "remi": 1041, "remind": [244, 390], "reminisc": 124, "remot": [190, 329, 375, 378], "remov": [1, 2, 45, 55, 56, 88, 89, 103, 108, 163, 165, 180, 181, 185, 188, 269, 308, 315, 317, 318, 319, 324, 326, 350, 351, 354, 358, 367, 370, 374, 375, 376, 377, 379, 380, 384, 389, 393, 400, 407, 408, 411, 414, 415, 417, 418, 427, 442, 444, 445, 450, 457, 482, 483, 484, 485, 488, 489, 535, 536, 539, 541, 542, 554, 568, 569, 570, 571, 581, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 609, 610, 614, 633, 647, 657, 658, 659, 661, 662, 676, 678, 682, 695, 703, 705, 712, 745, 781, 782, 783, 785, 803, 806, 807, 809, 817, 826, 831, 832, 834, 854, 866, 867, 871, 872, 884, 885, 887, 896, 904, 922, 931, 933, 934, 944, 945, 946, 994, 1001, 1007, 1020, 1026, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "remove_zero_eig": [536, 1036, 1043], "rempfler": 1045, "renaissance0n": [1052, 1053], "renam": [127, 148, 188, 258, 269, 317, 375, 379, 407, 447, 459, 464, 471, 472, 478, 528, 537, 554, 555, 556, 557, 558, 559, 564, 565, 566, 567, 781, 880, 931, 933, 934, 1034, 1035, 1036, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "rename_axi": 268, "render": [52, 64, 87, 104, 105, 140, 142, 151, 152, 155, 158, 162, 174, 185, 186, 187, 194, 206, 214, 238, 239, 240, 244, 248, 249, 250, 251, 258, 262, 266, 268, 269, 275, 280, 282, 306, 314, 318, 319, 321, 322, 324, 330, 356, 357, 375, 377, 379, 380, 381, 389, 552, 591, 634, 703, 705, 884, 896, 919, 921, 1003, 1020, 1047, 1051, 1053], "rene": 1047, "renni": [2, 842, 844, 1006, 1042], "renorm": 64, "rent": 44, "rental": [44, 53, 186, 1011], "reorder": [59, 389, 700, 721, 1042], "reordered_data": 59, "reordered_row": 59, "reorgan": 1040, "rep": 372, "reparameter": 1019, "reparametr": 346, "repartit": 44, "repeat": [2, 50, 70, 100, 111, 113, 146, 165, 169, 175, 176, 186, 190, 212, 262, 263, 268, 269, 280, 285, 329, 351, 352, 377, 384, 389, 390, 404, 405, 407, 412, 415, 416, 590, 595, 609, 610, 618, 630, 637, 662, 808, 818, 819, 822, 939, 994, 1003, 1020, 1030, 1042, 1044, 1053], "repeatedkfold": [2, 185, 411, 808, 819, 1041], "repeatedli": [135, 321, 358, 389, 407, 414, 417, 509, 547, 669, 670, 679, 680, 681, 784, 994, 1008], "repeatedstratifiedkfold": [2, 268, 282, 285, 411, 818, 822, 1041, 1053], "repercuss": 313, "repetit": [268, 282, 285, 380, 411, 818, 819, 1012, 1048], "replac": [2, 44, 63, 112, 125, 135, 150, 169, 174, 176, 180, 186, 197, 211, 251, 271, 288, 310, 315, 319, 326, 341, 373, 375, 379, 381, 384, 389, 401, 408, 411, 414, 415, 441, 445, 464, 504, 516, 556, 557, 564, 584, 590, 591, 592, 593, 609, 610, 630, 633, 637, 642, 644, 731, 788, 809, 815, 817, 826, 866, 867, 870, 890, 903, 904, 910, 923, 925, 972, 974, 977, 993, 994, 996, 1000, 1004, 1014, 1019, 1020, 1023, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1053], "replai": [806, 807], "repli": [55, 350, 374, 375, 378], "replic": [268, 374, 1030], "repo": [375, 379, 1024, 1027], "report": [0, 2, 44, 48, 53, 69, 103, 108, 162, 177, 198, 262, 266, 276, 282, 285, 317, 326, 328, 358, 370, 374, 376, 377, 378, 381, 383, 387, 389, 393, 401, 407, 411, 614, 652, 661, 667, 688, 689, 703, 716, 732, 733, 741, 786, 787, 790, 836, 845, 864, 865, 902, 920, 1000, 1007, 1012, 1023, 1024, 1027, 1035, 1038, 1041, 1042, 1044, 1045, 1047, 1049, 1050, 1053], "reporthook": 48, "repositori": [44, 48, 53, 190, 262, 323, 368, 370, 372, 373, 375, 377, 379, 383, 387, 390, 393, 505, 1023, 1027, 1030], "repr": [579, 1045, 1046, 1048], "repreat": 268, "repres": [44, 48, 50, 52, 53, 55, 59, 64, 69, 71, 80, 83, 84, 87, 121, 123, 129, 130, 142, 151, 185, 192, 203, 212, 214, 215, 219, 232, 234, 242, 247, 256, 261, 262, 265, 268, 271, 275, 277, 293, 310, 343, 350, 352, 357, 364, 367, 370, 372, 377, 387, 388, 389, 390, 401, 405, 407, 411, 412, 413, 414, 415, 416, 438, 442, 446, 452, 463, 464, 470, 471, 472, 473, 474, 475, 476, 488, 490, 491, 493, 495, 497, 499, 501, 502, 503, 505, 506, 511, 528, 535, 537, 539, 541, 542, 548, 551, 556, 564, 583, 590, 593, 596, 632, 635, 637, 643, 679, 681, 700, 702, 704, 714, 733, 746, 792, 803, 805, 816, 817, 820, 823, 825, 830, 832, 833, 836, 837, 843, 849, 850, 851, 853, 854, 855, 857, 858, 859, 864, 865, 874, 880, 881, 904, 907, 908, 933, 934, 955, 994, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1012, 1014, 1015, 1017, 1018, 1020, 1040, 1042, 1045, 1046, 1049, 1052], "represent": [2, 44, 52, 56, 59, 64, 87, 104, 105, 121, 124, 140, 142, 151, 152, 153, 155, 158, 162, 174, 185, 187, 190, 194, 196, 230, 231, 232, 238, 240, 244, 248, 249, 250, 251, 258, 262, 266, 268, 269, 275, 280, 282, 285, 298, 306, 314, 319, 321, 322, 324, 330, 351, 352, 356, 357, 358, 367, 369, 378, 389, 401, 407, 408, 412, 413, 414, 421, 463, 532, 536, 538, 541, 543, 549, 567, 590, 592, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 633, 646, 649, 655, 661, 662, 663, 665, 669, 670, 671, 679, 680, 681, 772, 800, 801, 809, 826, 863, 876, 880, 881, 885, 887, 900, 907, 919, 921, 924, 930, 947, 969, 996, 1001, 1003, 1005, 1007, 1008, 1009, 1011, 1014, 1019, 1024, 1034, 1035, 1038, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "reproduc": [45, 52, 94, 135, 185, 190, 198, 277, 285, 306, 363, 374, 375, 377, 378, 383, 387, 389, 407, 411, 412, 415, 419, 440, 454, 460, 469, 474, 488, 491, 493, 496, 498, 504, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 552, 554, 555, 556, 557, 560, 561, 562, 563, 564, 609, 610, 613, 614, 637, 642, 643, 644, 645, 649, 650, 653, 655, 656, 657, 663, 664, 665, 666, 669, 670, 671, 674, 679, 681, 682, 692, 693, 695, 696, 697, 796, 800, 801, 804, 805, 806, 807, 808, 809, 815, 817, 818, 819, 820, 821, 822, 823, 831, 832, 833, 837, 838, 841, 852, 856, 863, 864, 865, 872, 884, 888, 896, 899, 900, 907, 908, 909, 912, 950, 951, 974, 977, 996, 1023, 1027, 1034, 1042, 1047, 1048], "reproduct": [387, 1000], "request": [2, 48, 56, 81, 210, 228, 244, 320, 326, 363, 369, 373, 374, 378, 389, 390, 398, 401, 412, 415, 416, 437, 443, 444, 447, 449, 465, 482, 483, 484, 534, 537, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 592, 601, 602, 613, 614, 635, 638, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 693, 702, 802, 804, 805, 810, 812, 821, 825, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 852, 854, 857, 858, 864, 865, 867, 870, 872, 873, 874, 879, 886, 887, 902, 903, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 959, 960, 962, 1004, 1007, 1027, 1040, 1041, 1042, 1051, 1052, 1053], "request_rout": 244, "requir": [31, 32, 44, 47, 54, 63, 81, 87, 89, 91, 92, 101, 103, 125, 127, 140, 141, 144, 145, 148, 150, 151, 155, 165, 186, 196, 200, 210, 230, 232, 238, 241, 244, 247, 251, 262, 269, 277, 279, 282, 288, 290, 308, 313, 319, 320, 326, 350, 351, 352, 369, 372, 373, 375, 376, 377, 381, 383, 387, 389, 390, 393, 394, 398, 401, 403, 407, 408, 409, 411, 412, 414, 415, 416, 418, 424, 430, 437, 438, 439, 444, 446, 450, 452, 457, 462, 464, 467, 469, 482, 483, 484, 497, 509, 522, 525, 536, 542, 550, 551, 552, 554, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 573, 581, 582, 583, 604, 613, 614, 622, 630, 635, 636, 637, 646, 649, 650, 655, 656, 661, 662, 669, 670, 671, 674, 677, 678, 679, 680, 681, 689, 692, 694, 695, 696, 698, 702, 727, 732, 733, 750, 752, 755, 766, 786, 787, 790, 802, 803, 806, 807, 810, 812, 817, 825, 830, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 857, 858, 859, 864, 867, 868, 869, 871, 881, 882, 883, 887, 895, 899, 900, 902, 903, 907, 908, 909, 912, 915, 916, 917, 918, 924, 926, 927, 933, 934, 944, 946, 960, 963, 969, 989, 992, 993, 998, 999, 1000, 1001, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1014, 1018, 1019, 1020, 1024, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "requires_fit": [926, 987, 1053], "requires_i": [424, 430, 992, 1045], "requires_positive_x": [1044, 1049], "requires_vector_input": [615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628], "rerais": 1051, "rerun": [52, 64, 78, 104, 105, 140, 142, 151, 152, 155, 158, 162, 174, 185, 186, 187, 194, 238, 239, 240, 244, 248, 249, 250, 251, 258, 262, 266, 268, 269, 275, 280, 282, 306, 314, 318, 319, 321, 322, 324, 330, 356, 357, 383], "resampl": [2, 86, 147, 185, 228, 292, 384, 387, 389, 556, 557, 977, 1024, 1043, 1047], "resampled_arrai": 974, "rescal": [44, 81, 82, 89, 126, 194, 198, 233, 247, 308, 348, 409, 414, 419, 469, 470, 471, 472, 473, 474, 475, 476, 534, 539, 649, 652, 655, 879, 885, 909, 910, 911, 912, 913, 1004, 1014, 1038, 1039, 1053], "rescaled_coin": [81, 82], "rescu": [401, 415], "research": [0, 165, 184, 262, 268, 274, 285, 370, 372, 387, 407, 502, 514, 638, 648, 695, 738, 832, 837, 993, 1001, 1005, 1007, 1019, 1024, 1028], "resembl": [75, 214, 244], "reserv": [262, 314, 375, 562, 563, 1028], "reserva": 314, "reservoir": 972, "reservoir_sampl": 972, "reset": [251, 358, 377, 383, 535, 679, 680, 681, 847, 848, 876, 877, 887, 992, 1036], "reset_n_cal": [847, 848], "reshama": [0, 360, 365, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1052, 1053], "reshap": [2, 44, 45, 46, 54, 62, 69, 81, 82, 84, 85, 87, 88, 92, 105, 112, 116, 121, 124, 130, 138, 143, 153, 163, 169, 171, 172, 173, 174, 175, 176, 178, 192, 202, 223, 224, 226, 227, 231, 233, 235, 237, 242, 246, 257, 266, 292, 294, 301, 303, 305, 306, 309, 310, 311, 315, 317, 320, 321, 323, 324, 326, 333, 338, 339, 344, 347, 348, 387, 404, 412, 414, 415, 445, 465, 586, 634, 735, 833, 882, 886, 1000, 1014, 1020, 1039], "resid": 370, "residence_sinc": 262, "residenti": 155, "residu": [2, 108, 212, 264, 430, 465, 482, 483, 484, 553, 555, 557, 559, 561, 563, 566, 569, 571, 614, 638, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 664, 665, 666, 667, 668, 670, 673, 674, 675, 676, 677, 681, 682, 688, 689, 704, 747, 788, 840, 841, 850, 858, 865, 908, 910, 913, 916, 918, 1000, 1004, 1046, 1047, 1049], "residual_metr": 1040, "residual_threshold": [227, 674, 1000, 1047], "residual_vs_predict": [44, 53, 108, 264, 322, 704], "residues_": 1039, "resign": 390, "resili": 415, "resist": [112, 113, 375], "resiz": [46, 81, 82, 248, 370, 494, 495], "resolut": [44, 51, 56, 130, 186, 300, 301, 339, 390, 405, 1044], "resolv": [56, 374, 378, 379, 383, 390, 415, 446, 452, 462, 694, 698, 951, 994, 1004, 1041, 1043, 1044, 1047, 1052], "resort": [270, 370, 401, 556, 1044], "resourc": [56, 78, 147, 150, 180, 210, 305, 319, 361, 378, 387, 389, 406, 414, 806, 807, 993, 1005, 1024, 1028, 1030, 1042, 1047, 1048, 1053], "resourcewarn": 1037, "resp": [370, 414, 599, 800, 801, 1018, 1042], "respect": [65, 89, 101, 126, 127, 135, 139, 141, 143, 152, 167, 177, 190, 192, 196, 200, 212, 224, 227, 230, 232, 238, 241, 243, 247, 258, 262, 277, 294, 295, 306, 313, 321, 326, 336, 343, 357, 362, 363, 370, 371, 375, 405, 407, 410, 412, 414, 415, 417, 446, 464, 467, 470, 471, 472, 473, 474, 475, 476, 535, 541, 542, 548, 554, 562, 563, 599, 613, 614, 615, 616, 617, 618, 619, 622, 623, 624, 625, 626, 627, 628, 631, 639, 646, 674, 693, 697, 715, 731, 785, 788, 800, 801, 843, 853, 864, 865, 919, 921, 992, 993, 997, 998, 1000, 1001, 1004, 1007, 1008, 1009, 1010, 1014, 1019, 1023, 1027, 1028, 1037, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "respond": [185, 375, 407], "respons": [0, 26, 165, 186, 210, 213, 244, 278, 281, 350, 372, 375, 377, 389, 407, 408, 414, 446, 464, 482, 483, 484, 568, 569, 634, 635, 636, 677, 678, 701, 703, 705, 745, 800, 801, 1004, 1005, 1011, 1051], "response_method": [49, 67, 71, 90, 137, 151, 156, 203, 219, 224, 262, 271, 291, 296, 299, 313, 325, 335, 336, 338, 343, 355, 634, 635, 636, 701, 703, 705, 745, 802, 825, 1004, 1051, 1053], "rest": [2, 31, 63, 67, 144, 148, 182, 191, 196, 201, 225, 244, 247, 256, 285, 317, 332, 336, 381, 389, 417, 513, 613, 634, 647, 661, 662, 679, 757, 791, 835, 836, 837, 856, 907, 909, 912, 1000, 1004, 1005, 1008, 1011, 1019, 1025, 1028, 1038, 1039, 1048, 1049, 1050, 1052], "restart": [91, 175, 378, 383, 447, 532, 538, 539, 544, 546, 547, 613, 614, 1001, 1047], "restor": [1037, 1042, 1043, 1044, 1045, 1049], "restrict": [2, 65, 100, 101, 106, 180, 182, 201, 203, 227, 302, 377, 381, 405, 407, 414, 415, 465, 494, 503, 533, 583, 613, 656, 657, 658, 659, 661, 685, 686, 716, 785, 791, 792, 833, 855, 857, 858, 859, 861, 863, 864, 865, 867, 893, 1004, 1020, 1025, 1029, 1030, 1034, 1036, 1044, 1046, 1051, 1053], "restructuredtext": 375, "result": [0, 2, 28, 38, 44, 45, 46, 49, 53, 54, 58, 62, 63, 64, 67, 69, 71, 73, 76, 78, 79, 80, 81, 87, 88, 89, 94, 96, 100, 104, 106, 108, 113, 117, 121, 124, 126, 131, 138, 139, 140, 142, 144, 145, 147, 148, 151, 153, 154, 164, 165, 169, 171, 173, 175, 177, 180, 185, 186, 187, 188, 193, 197, 199, 200, 201, 203, 206, 211, 212, 214, 218, 224, 225, 228, 230, 231, 234, 237, 240, 242, 248, 253, 258, 259, 261, 262, 263, 266, 268, 269, 271, 274, 275, 276, 277, 279, 280, 282, 285, 288, 290, 294, 303, 304, 305, 308, 309, 310, 313, 317, 319, 321, 322, 323, 324, 325, 326, 328, 331, 333, 339, 343, 344, 346, 350, 352, 357, 362, 363, 364, 369, 370, 372, 375, 379, 380, 381, 383, 387, 388, 389, 390, 401, 403, 404, 405, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 432, 440, 441, 443, 445, 446, 447, 450, 451, 452, 453, 454, 455, 457, 459, 462, 464, 467, 469, 470, 471, 472, 473, 474, 475, 476, 479, 489, 509, 510, 512, 514, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 552, 553, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 570, 581, 582, 583, 584, 586, 590, 591, 593, 609, 610, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 633, 634, 635, 637, 639, 643, 646, 655, 656, 661, 667, 668, 669, 670, 678, 679, 680, 681, 689, 692, 693, 694, 695, 696, 697, 698, 711, 713, 714, 715, 720, 728, 729, 731, 732, 733, 734, 735, 739, 740, 741, 757, 759, 760, 767, 774, 777, 781, 782, 783, 784, 786, 787, 788, 790, 796, 797, 800, 801, 803, 805, 806, 807, 808, 813, 817, 818, 819, 822, 823, 828, 834, 835, 836, 838, 839, 840, 841, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 869, 871, 872, 880, 881, 884, 885, 888, 896, 900, 904, 907, 909, 912, 915, 916, 917, 918, 919, 920, 933, 934, 944, 950, 951, 953, 958, 968, 969, 974, 977, 994, 996, 998, 999, 1000, 1001, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1016, 1018, 1019, 1020, 1023, 1024, 1027, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "results_df": [218, 268, 314], "results_for_preval": 271, "results_sc": 346, "retail": 1028, "retain": [2, 192, 389, 407, 410, 411, 415, 437, 443, 444, 447, 449, 465, 482, 483, 484, 495, 534, 537, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 613, 614, 638, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 693, 698, 699, 802, 804, 805, 810, 812, 821, 825, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 852, 854, 857, 858, 864, 865, 867, 870, 872, 873, 874, 879, 880, 886, 887, 902, 903, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 993, 1017, 1034], "retbin": 1014, "retent": [594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605], "retrac": 244, "retract": 375, "retrain": [401, 1024, 1050, 1052], "retri": [187, 326, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 1042, 1048, 1052, 1053], "retriev": [2, 117, 185, 214, 275, 351, 357, 379, 389, 412, 415, 416, 468, 497, 592, 595, 596, 629, 656, 666, 687, 702, 729, 733, 735, 736, 759, 784, 842, 846, 879, 905, 1000, 1002, 1004, 1006, 1023, 1024, 1039, 1044, 1046, 1048, 1051], "return": [2, 31, 44, 46, 47, 48, 50, 51, 53, 54, 56, 58, 62, 63, 65, 70, 71, 73, 76, 87, 90, 95, 103, 108, 119, 127, 128, 130, 133, 135, 138, 140, 146, 147, 150, 151, 155, 165, 167, 172, 175, 177, 181, 188, 192, 193, 198, 200, 203, 210, 211, 218, 219, 220, 228, 244, 247, 250, 251, 256, 258, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 275, 283, 288, 293, 298, 301, 306, 308, 310, 313, 317, 325, 335, 339, 350, 352, 354, 357, 362, 368, 369, 370, 375, 376, 377, 381, 382, 384, 387, 389, 405, 406, 407, 408, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 929, 930, 931, 933, 934, 936, 937, 938, 939, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 969, 970, 972, 973, 974, 975, 976, 977, 978, 984, 987, 988, 989, 990, 991, 992, 994, 1004, 1007, 1011, 1012, 1019, 1020, 1031, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "return_a": [587, 588, 969, 1037], "return_cent": [513, 1045], "return_cod": 547, "return_cost": [471, 472, 478], "return_count": [331, 351, 859], "return_cov": [389, 568, 569, 614, 867], "return_dist": [88, 463, 847, 848, 849, 850, 851, 853, 855, 857, 858, 859, 1007, 1038], "return_distribut": [119, 524], "return_estim": [44, 185, 282, 324, 411, 830, 1042], "return_ind": 524, "return_indic": [411, 830, 1050], "return_inner_stat": 1048, "return_intercept": [690, 1043], "return_invers": [149, 377], "return_log": [847, 848], "return_model": [1036, 1038], "return_n_it": [419, 454, 459, 478, 546, 547, 649, 650, 655, 656, 663, 664, 665, 666, 684, 685, 686, 687, 688, 689, 690, 697, 1048], "return_norm": [894, 1041], "return_path": [685, 686, 688, 689], "return_std": [169, 174, 175, 176, 178, 192, 193, 389, 553, 568, 569, 614, 616, 617, 618, 619, 628, 630, 647, 648, 867, 1041, 1042, 1046, 1051], "return_sum_weight": 984, "return_tim": [270, 831, 1044], "return_train_scor": [141, 272, 282, 314, 411, 803, 806, 807, 817, 830, 1040, 1041, 1043], "return_x_i": [45, 47, 55, 92, 103, 104, 105, 106, 121, 141, 144, 158, 161, 180, 181, 187, 188, 190, 198, 199, 200, 202, 207, 217, 225, 226, 238, 246, 247, 250, 251, 264, 267, 270, 275, 276, 285, 287, 290, 297, 304, 305, 306, 313, 317, 319, 321, 322, 323, 324, 331, 342, 352, 354, 368, 380, 381, 388, 401, 407, 408, 411, 414, 416, 419, 427, 446, 488, 489, 490, 491, 493, 495, 496, 497, 498, 501, 502, 503, 505, 506, 511, 533, 534, 535, 536, 559, 562, 563, 568, 569, 594, 597, 598, 600, 601, 602, 603, 604, 613, 622, 623, 625, 626, 641, 642, 661, 662, 671, 676, 677, 678, 691, 692, 693, 694, 696, 698, 704, 714, 791, 806, 807, 809, 835, 840, 851, 856, 859, 916, 917, 918, 994, 999, 1004, 1005, 1006, 1007, 1014, 1031, 1040, 1042, 1044, 1047], "return_x_mean": 419, "reuben": 1034, "reus": [53, 169, 204, 262, 269, 317, 352, 377, 389, 407, 408, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 637, 649, 651, 652, 655, 661, 663, 665, 669, 670, 671, 672, 679, 680, 681, 683, 864, 865, 1012, 1016, 1028, 1041, 1051], "reuter": [362, 370], "reuters21578": 48, "reuterspars": 48, "rev": [375, 609, 610], "revamp": [326, 377, 1044], "reveal": [44, 53, 185, 187, 350, 381, 404, 1001, 1050], "revers": [108, 165, 215, 268, 535, 542, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 614, 792, 867, 1004, 1034, 1035, 1044, 1046, 1050], "revert": [122, 403, 633, 635, 636, 1041, 1046, 1051], "review": [285, 314, 362, 370, 377, 378, 380, 381, 387, 390, 411, 412, 536, 542, 1004, 1014], "revillet": 1034, "revis": [390, 673], "revisit": [407, 418, 444], "revolv": 1001, "reward": 375, "reweight": [135, 351, 389, 409, 414, 592, 593, 651, 672, 683, 1053], "reweight_covari": [469, 474], "rewrit": [381, 387, 1020, 1034], "rewritten": [375, 652, 1036, 1038], "rey": 1049, "reza": 1044, "rezazadeh": 1047, "rf": [140, 141, 154, 157, 158, 187, 317, 358, 414, 568, 570, 571], "rf_123": 358, "rf__n_estim": 414, "rf_appli": 140, "rf_applyfunctiontransform": 140, "rf_cst": 324, "rf_inst": 358, "rf_leaves_yield": 140, "rf_model": 140, "rf_no_cst": 324, "rf_pipelin": 155, "rfc": [65, 250, 317, 1031], "rfc_disp": [250, 317, 1031], "rfe": [2, 163, 164, 398, 416, 596, 599, 604, 1034, 1038, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1053], "rfecv": [2, 164, 398, 416, 595, 599, 604, 1038, 1040, 1042, 1044, 1045, 1046, 1047, 1050, 1051, 1052, 1053], "rfrandomforestregressor": 158, "rgb": [370, 415, 494, 495, 585, 586, 589], "rgr_lasso": 54, "rgr_ridg": 54, "rhinehart": 1041, "rho": [221, 412, 680, 1000, 1018, 1035], "rho_k": 413, "ri": [407, 708, 789], "ribeiro": [592, 733, 1047], "ricardo": [1037, 1047, 1048, 1051], "ricardojnf": 1047, "riccadonna": 746, "riccardo": [1045, 1051], "rice": [51, 301, 370, 499, 1047], "rich": [86, 150, 383, 387, 407, 439, 1028, 1045, 1048], "richard": [370, 416, 661, 1035, 1044, 1046, 1048, 1049, 1052], "richardscottoz": 1047, "richer": [86, 130, 407], "richi": 1042, "rick": 1045, "ricker": 130, "ricker_funct": 130, "ricker_matrix": 130, "rickiepark": 1041, "rid": [49, 1018], "riddel": [1037, 1039, 1041], "ridg": [2, 25, 45, 50, 54, 88, 108, 122, 123, 138, 155, 165, 168, 174, 175, 176, 180, 182, 184, 185, 186, 191, 192, 196, 204, 207, 210, 211, 236, 246, 281, 309, 345, 346, 350, 362, 387, 403, 412, 414, 417, 525, 536, 540, 544, 614, 618, 625, 628, 646, 647, 648, 650, 652, 660, 664, 676, 677, 678, 681, 690, 704, 753, 803, 809, 817, 840, 913, 1004, 1005, 1012, 1014, 1018, 1019, 1025, 1026, 1030, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1043, 1044, 1047, 1048, 1049, 1050, 1052, 1053], "ridge_alpha": [540, 544, 1041], "ridge_cv": 108, "ridge_cv_with_trans_target": 108, "ridge_glm": 210, "ridge_regress": [2, 1042, 1043, 1049], "ridgeclassifi": [2, 350, 362, 675, 676, 678, 1000, 1005, 1039, 1043, 1047, 1048, 1049, 1052], "ridgeclassifiercv": [2, 398, 676, 677, 791, 1000, 1004, 1005, 1042, 1044, 1045, 1047, 1048, 1052, 1053], "ridgecv": [2, 44, 108, 155, 165, 185, 246, 389, 398, 414, 569, 646, 675, 678, 1000, 1005, 1034, 1036, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1052, 1053], "ridgecvridgecv": [155, 185], "ridgeridg": 185, "ridgewai": [146, 414], "riedmann": 1046, "ries": 1048, "rifkin": 1000, "right": [46, 47, 51, 52, 54, 55, 68, 71, 75, 78, 79, 80, 85, 87, 94, 96, 98, 111, 112, 114, 119, 123, 124, 126, 127, 128, 130, 135, 137, 138, 139, 147, 148, 149, 150, 157, 161, 169, 172, 181, 188, 199, 201, 211, 212, 213, 214, 216, 217, 220, 221, 237, 240, 241, 253, 255, 256, 258, 259, 262, 263, 264, 268, 271, 275, 278, 279, 281, 282, 293, 301, 303, 306, 308, 310, 313, 323, 324, 329, 339, 341, 343, 346, 348, 350, 355, 357, 358, 375, 377, 383, 387, 388, 390, 404, 406, 407, 410, 412, 413, 414, 417, 464, 482, 483, 484, 485, 535, 542, 545, 558, 559, 560, 561, 562, 563, 565, 566, 567, 589, 615, 616, 617, 618, 619, 622, 623, 624, 625, 626, 627, 628, 630, 638, 679, 681, 703, 705, 872, 915, 916, 917, 918, 919, 937, 951, 993, 996, 998, 1000, 1002, 1004, 1006, 1007, 1011, 1016, 1018, 1019, 1020, 1028, 1030, 1036, 1042, 1048, 1050, 1051, 1053], "right_impur": [558, 559, 560, 561, 565, 566, 567, 915, 916, 917, 918], "rightarrow": [417, 622, 1008], "rijn": [369, 1042], "rileran": 1048, "rio": [1044, 1046, 1047, 1048], "riou": 1053, "ripe": 314, "rise": 174, "rishabh": 1048, "rishi": 1046, "rishikesh": 1041, "risk": [16, 49, 89, 150, 210, 214, 228, 309, 346, 358, 374, 375, 389, 401, 406, 411, 414, 568, 569, 892, 893, 895, 896, 897, 898, 1000, 1004, 1028, 1041], "riski": 228, "riskiest": [210, 228], "ritchi": 1045, "rithvik": 1046, "ritter": [1048, 1049], "ritual": 350, "rival": [44, 904, 1017], "rk": 99, "rkf": [411, 818], "rl2007": 1000, "rlm": 1044, "rm": [112, 172, 379, 383, 409], "rmse": [44, 53, 113, 150, 314, 1004, 1045], "rmse_": 314, "rmse_test_mean": 314, "rmse_test_scor": 314, "rmse_test_std": 314, "rmse_train_mean": 314, "rmse_train_scor": 314, "rmse_train_std": 314, "rmsle": 1004, "rmtree": [88, 105, 408], "rna": 387, "rnd": 309, "rng": [45, 59, 60, 68, 71, 73, 80, 84, 96, 113, 117, 121, 123, 128, 136, 147, 150, 151, 152, 154, 169, 170, 173, 175, 176, 178, 180, 181, 184, 187, 192, 193, 194, 195, 196, 200, 205, 211, 212, 217, 224, 237, 243, 244, 246, 253, 263, 271, 274, 279, 280, 300, 303, 312, 315, 318, 319, 321, 323, 324, 328, 329, 333, 342, 356, 358, 363, 377, 380, 398, 420, 470, 474, 475, 476, 478, 479, 480, 481, 646, 652, 673, 675, 681, 690, 815, 842, 843, 844, 846, 847, 848, 852, 855, 857, 858, 859, 884, 896, 899, 900, 902, 903, 904, 913], "ro": 64, "road": 387, "rob": [1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1046, 1049], "robert": [0, 165, 198, 285, 372, 397, 412, 529, 536, 631, 659, 724, 726, 727, 738, 873, 994, 1000, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1044, 1049, 1052, 1053], "roberto": [407, 442, 1052, 1053], "robertson": 1047, "robin": [180, 181, 630, 994, 1040, 1043, 1048, 1049], "robinson": 1047, "robl": 1041, "robson": 1044, "robust": [2, 49, 71, 95, 97, 109, 111, 128, 145, 147, 165, 181, 182, 185, 186, 191, 201, 212, 214, 227, 237, 247, 283, 308, 323, 364, 372, 383, 407, 414, 415, 446, 448, 469, 470, 473, 474, 475, 476, 525, 535, 560, 561, 652, 660, 673, 674, 681, 682, 753, 837, 868, 882, 884, 885, 896, 902, 949, 1004, 1008, 1010, 1014, 1017, 1018, 1023, 1025, 1026, 1028, 1029, 1030, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1050, 1053], "robust_contour": 112, "robust_cov": 112, "robust_mah": 112, "robust_scal": [2, 885, 896, 1042], "robustli": [8, 213], "robustscal": [2, 247, 884, 897, 994, 1014, 1039, 1040, 1042, 1044, 1045, 1046, 1050], "roc": [2, 51, 63, 140, 165, 182, 236, 238, 247, 248, 260, 262, 263, 270, 324, 325, 382, 405, 406, 411, 505, 511, 565, 661, 705, 709, 710, 711, 730, 785, 791, 792, 822, 833, 836, 874, 912, 1010, 1025, 1031, 1036, 1037, 1039, 1040, 1044, 1046, 1050], "roc_auc": [51, 165, 268, 272, 277, 278, 382, 637, 705, 736, 1004, 1031], "roc_auc_ovo": [1004, 1044], "roc_auc_ovo_weight": [1004, 1044], "roc_auc_ovr": [1004, 1044], "roc_auc_ovr_weight": [1004, 1044], "roc_auc_scor": [2, 63, 165, 268, 277, 317, 324, 705, 709, 710, 711, 792, 1004, 1036, 1037, 1042, 1044, 1048, 1049, 1053], "roc_curv": [2, 51, 238, 265, 277, 705, 709, 730, 785, 791, 1004, 1034, 1035, 1036, 1039, 1040, 1042, 1047, 1050, 1052], "roc_displai": 238, "rocchio": [350, 854], "rocco": [1047, 1048, 1049], "roccurvedisplai": [2, 140, 247, 250, 262, 265, 277, 278, 317, 382, 791, 792, 1010, 1031, 1044, 1050, 1051, 1052, 1053], "rock": 113, "rocklin": [374, 380], "roddi": [1043, 1044], "rodent": [51, 301, 370, 499], "roderick": 994, "rodion": 1047, "rodrigo": [1042, 1052], "rodrigu": [1041, 1042, 1047], "rodr\u00edguez": 314, "roeder": 1044, "roehr": [1050, 1051], "roei": 1046, "roeschk": 1043, "roger": [726, 1041, 1042, 1046], "rogerstanimoto": [450, 457, 702, 781, 782, 783, 1007], "rogerstanimotodist": 702, "rohan": [1039, 1040, 1042, 1043, 1047], "rohit": [1037, 1038, 1042, 1043], "roi": [1034, 1048], "roi_siz": 88, "roic": 1049, "rok": 1044, "rokem": [1034, 1040], "rokhlin": [536, 542, 951], "roland": [1036, 1037], "rolando": [1035, 1036], "role": [0, 277, 362, 374, 412], "roll": [2, 101, 182, 229, 230, 235, 378, 407, 531, 695, 696, 944, 1025, 1028, 1044, 1049], "rolling_max": 53, "rolling_mean": 53, "rolling_min": 53, "romain": [1041, 1046], "roman": [0, 397, 630, 921, 1036, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1051], "roman4oo": 1049, "romaniuk": 1038, "romero": 1052, "romijnd": 1046, "romuald": 1043, "ron": [0, 397, 1034], "ronald": [370, 1008, 1037, 1047], "ronan": [1034, 1037, 1042], "ronchetti": [652, 1000], "rong": 1019, "ronrubin": [667, 688, 689, 1000], "ronsin": [1042, 1043, 1051], "room": [308, 370, 380, 407, 1027], "roopam": [1042, 1043], "root": [2, 44, 112, 150, 165, 194, 357, 372, 375, 383, 407, 442, 502, 542, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 642, 793, 794, 915, 916, 917, 918, 919, 921, 1004, 1010, 1020, 1036, 1042, 1043, 1044, 1045, 1048, 1049, 1053], "root_": 442, "root_mean_squared_error": [2, 53, 150, 403, 1004, 1051, 1053], "root_mean_squared_log_error": [2, 403, 1004, 1051, 1053], "rope": 268, "rope_interv": 268, "rope_prob": 268, "rori": 1045, "rosa": 1049, "rosal": 411, "rosati": [1052, 1053], "rose": 370, "rosenberg": [407, 720, 740, 798], "rosenfeld": 1042, "ross": [535, 609, 610, 1020, 1048, 1049], "rosset": [135, 414, 520, 554], "rossi": 1037, "rosslimlinyang_ijcv": 535, "rostamizadeh": 993, "rostomyan": 1042, "rotat": [48, 76, 120, 121, 123, 126, 128, 146, 157, 182, 188, 233, 279, 280, 287, 339, 345, 410, 412, 417, 419, 505, 533, 542, 551, 617, 700, 887, 919, 1000, 1025, 1045, 1046], "rotation_mod": 279, "rotations_": 551, "roth": [1039, 1042, 1049], "rough": [26, 395, 1010], "roughli": [135, 147, 200, 259, 278, 288, 313, 362, 389, 412, 415, 520, 1001, 1034], "rouli": 1037, "round": [47, 49, 63, 116, 141, 150, 167, 180, 181, 217, 228, 268, 274, 310, 312, 350, 389, 450, 456, 457, 565, 566, 595, 596, 599, 630, 695, 716, 805, 815, 872, 904, 919, 921, 994, 1008, 1020, 1036, 1038, 1040, 1042, 1043, 1045, 1047, 1048, 1050, 1051], "rounded_list": 815, "rouseeuw1984": 474, "rousseeuw": [112, 113, 407, 409, 469, 474, 795, 796, 1010], "rousseuw": [112, 113], "rout": [2, 133, 182, 194, 236, 262, 325, 377, 421, 424, 427, 430, 431, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 583, 584, 585, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 612, 613, 614, 630, 631, 632, 633, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 691, 692, 693, 694, 695, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 960, 961, 962, 963, 987, 1025, 1030, 1048, 1050], "route_param": [244, 960], "routed_param": [244, 963], "routemappingpair": 960, "router": [2, 244, 389, 398, 960, 961, 962, 963], "routerconsumerclassifi": 244, "routerconsumerclassifierifittedrouterconsumerclassifi": 244, "routin": [324, 364, 369, 372, 375, 376, 377, 378, 383, 387, 389, 416, 675, 677, 690, 850, 909, 910, 911, 912, 913, 1001, 1007, 1014, 1015, 1018, 1028, 1034, 1048, 1049, 1050], "routing_info": 960, "routlei": 1040, "rouvinen": 1039, "roux": [661, 1000, 1017], "row": [2, 44, 58, 59, 60, 63, 65, 71, 80, 94, 108, 119, 141, 143, 153, 156, 180, 210, 211, 212, 238, 241, 247, 248, 262, 310, 357, 362, 370, 377, 384, 388, 389, 404, 407, 410, 415, 422, 442, 443, 447, 449, 450, 451, 453, 456, 457, 459, 464, 468, 488, 490, 491, 493, 494, 495, 496, 501, 502, 503, 505, 506, 511, 512, 514, 527, 535, 543, 549, 552, 592, 593, 623, 631, 635, 646, 649, 650, 655, 656, 663, 664, 665, 666, 684, 687, 695, 699, 700, 713, 721, 722, 728, 761, 762, 766, 769, 771, 772, 773, 774, 776, 777, 779, 781, 782, 783, 784, 800, 801, 836, 842, 843, 844, 845, 846, 852, 855, 856, 857, 858, 859, 862, 873, 877, 879, 880, 882, 892, 893, 894, 897, 898, 901, 905, 924, 929, 933, 934, 951, 974, 977, 981, 983, 985, 986, 989, 990, 993, 994, 996, 998, 1000, 1002, 1004, 1005, 1007, 1014, 1015, 1018, 1019, 1024, 1041, 1042, 1043, 1044, 1049], "row_compl": 58, "row_id_attribut": 369, "row_idx": [60, 210], "row_idx_shuffl": 59, "row_ind": [422, 451, 453], "row_indic": 150, "row_labels_": [58, 59, 60, 404, 451, 453], "row_norm": 256, "rowan": 1049, "rowei": [692, 696, 856, 1001, 1007], "rows_": [58, 404, 422, 451, 453], "royal": [542, 630, 883, 895, 1018], "rp": 241, "rpath": 373, "rr2007": 996, "rragundez": 1042, "rsalakhu": 647, "rsh": [280, 319], "rskf": 819, "rsme": 1004, "rsnegrin": 1048, "rsplit": [46, 56, 269], "rst": [363, 375, 379, 383, 1034], "rstride": 186, "rt": 140, "rt_model": 140, "rtn": 52, "rtol": [377, 847, 848, 852], "ruben": 1049, "rubi": 1046, "rubia": 1037, "rubial": 1047, "rubin": 994, "rubinstein": [667, 688, 689], "rubric": 1001, "ruchitagard": 1044, "rudi": 1040, "rudresh": 1049, "ruff": [375, 393, 400], "ruifeng": [1040, 1041, 1046], "ruin": 375, "ruiter": 1049, "rule": [2, 13, 28, 44, 65, 141, 190, 203, 262, 355, 357, 358, 362, 372, 375, 376, 377, 387, 389, 390, 402, 405, 406, 407, 411, 412, 414, 416, 537, 550, 551, 552, 553, 554, 562, 563, 570, 571, 596, 604, 637, 648, 661, 662, 669, 670, 671, 676, 678, 679, 680, 681, 709, 710, 714, 803, 806, 807, 809, 817, 825, 826, 829, 830, 831, 832, 834, 856, 907, 920, 993, 998, 1006, 1007, 1018, 1020, 1030, 1036, 1039, 1046, 1051], "ruleset": 1020, "rumelhart": 1008, "rumsfeld": [46, 370], "run": [44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 184, 185, 186, 187, 188, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 358, 362, 363, 373, 375, 376, 377, 379, 380, 381, 382, 383, 387, 389, 390, 393, 394, 401, 403, 407, 409, 411, 414, 417, 418, 419, 437, 443, 444, 446, 447, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 462, 464, 467, 468, 471, 472, 532, 533, 534, 535, 536, 538, 540, 542, 543, 544, 546, 547, 549, 556, 557, 558, 559, 564, 565, 566, 567, 568, 569, 570, 571, 584, 594, 596, 597, 598, 600, 601, 602, 604, 613, 614, 633, 637, 643, 649, 650, 652, 654, 655, 656, 658, 659, 663, 664, 665, 666, 685, 686, 691, 692, 693, 694, 695, 696, 697, 784, 803, 806, 807, 809, 817, 825, 826, 828, 829, 830, 831, 832, 834, 839, 840, 849, 850, 851, 853, 855, 857, 858, 859, 860, 861, 864, 865, 866, 869, 902, 903, 905, 907, 908, 909, 910, 911, 912, 913, 915, 916, 924, 944, 946, 974, 977, 993, 1003, 1005, 1008, 1017, 1019, 1020, 1023, 1024, 1028, 1034, 1037, 1039, 1041, 1042, 1043, 1044, 1048, 1049, 1050, 1053], "run_histori": 48, "run_id": 95, "run_tim": [225, 226], "rung": 1014, "runnabl": [55, 379, 380], "runner": 1053, "runtim": [31, 48, 50, 92, 135, 197, 225, 227, 242, 306, 310, 363, 377, 378, 387, 389, 401, 407, 414, 450, 564, 682, 817, 907, 908, 909, 910, 911, 912, 913, 1018, 1019, 1037, 1041, 1042, 1048, 1049, 1051, 1052, 1053], "runtime_histori": 48, "runtimewarn": [178, 322], "runxfail": 383, "rupesh": 1037, "rush": [44, 53, 375], "rushabh": 1045, "rushil": [1049, 1050], "russ": [631, 994], "russel": [1040, 1041], "russellrao": [450, 457, 702, 781, 782, 783, 1007], "russellraodist": 702, "russian": 415, "ruth": 1044, "rutter": 1047, "ruusmann": 1040, "rv": [0, 807, 815, 817, 993, 1034, 1035, 1038, 1039, 1040, 1041, 1042], "rv_discrete_frozen": 280, "rvd": [469, 474], "rvdriessen": [469, 474], "rw2006": [417, 613, 614], "rwelsch427": [1052, 1053], "ryad": 1040, "ryan": [1037, 1040, 1042, 1043], "ryb": 355, "ryder": 52, "ryotaro": 1046, "r\u00e9my": 1040, "r\u00fcdiger": [1042, 1043, 1045], "s1": [122, 165, 177, 198, 200, 372], "s2": [122, 165, 177, 198, 200, 372, 551], "s22": 499, "s3": [58, 122, 165, 198, 200, 372], "s4": [165, 198, 200, 372], "s5": [165, 198, 200, 372, 1012], "s6": [165, 198, 200, 372], "s_": [122, 272, 1000, 1001, 1012, 1014], "s__p": 867, "s_color": 230, "s_hessian": 230, "s_i": [407, 1000, 1014], "s_ica_": 123, "s_isomap": 230, "s_j": 407, "s_ltsa": 230, "s_mod": 230, "s_pca_": 123, "s_point": 230, "s_scale": 230, "s_spectral": 230, "s_standard": 230, "s_t_sne": 230, "sa": [370, 493], "saaba": 1039, "saad": 1052, "sabharw": 1044, "sabri": 1049, "sach": 52, "sachdev": 1049, "sachdeva": 1041, "sachin": [1041, 1042, 1048], "sackei": 1044, "saclai": 0, "sacr": 1023, "sad": [821, 822], "sadak": 1046, "sadhana": 1042, "sadli": 147, "sadra": 1050, "sad\u0142ocha": 1047, "saeed": 1004, "saeger": [1039, 1040, 1041], "safari": 1014, "safe": [2, 73, 185, 200, 262, 351, 375, 377, 407, 408, 432, 465, 509, 510, 568, 569, 595, 599, 777, 781, 831, 832, 834, 866, 901, 969, 975, 1007, 1040, 1041, 1042, 1047, 1048], "safe_copi": 1041, "safe_index": [384, 1044], "safe_mask": [2, 384], "safe_realloc": 1037, "safe_sparse_dot": [2, 384, 1044], "safe_sqr": [2, 384], "safeguard": 401, "safer": [351, 358, 373, 407, 411, 1034], "safest": [210, 228, 358, 369], "safeti": [103, 387, 408, 969, 1024, 1044], "safikh": 1049, "safiuddin": 1049, "sag": [217, 661, 662, 675, 677, 690, 1000, 1018, 1039, 1040, 1041, 1043, 1044], "sag_solv": 1043, "saga": [67, 202, 225, 226, 661, 662, 675, 677, 690, 817, 1000, 1041, 1043], "sagar": 1044, "sagnik": 1042, "saha": [1048, 1053], "sahil": 1050, "sahin": 1044, "sahu": 1046, "sai": [197, 237, 346, 350, 351, 375, 405, 407, 408, 412, 414, 415, 446, 447, 501, 505, 511, 680, 993, 1004, 1010, 1017, 1028, 1051, 1052], "said": [150, 185, 237, 269, 351, 370, 375, 795, 1002, 1010], "saihttam": 1040, "sailesh": [1041, 1042], "saint": 1040, "saito": [412, 539, 541, 548, 1041], "saiw": 1040, "sake": [44, 65, 147, 150, 181, 185, 210, 313, 343, 350, 352, 383, 387, 673], "saket": [1038, 1039, 1046], "sakinaouisrani": 1048, "salahuddin": 1049, "salakhutdinov": [647, 856, 1007], "salamin": 1038, "saldanha": 1053, "sale": [144, 247, 268, 1004, 1028], "saleem": 1044, "salerno": 372, "salim": [1051, 1052], "sallisaw": [408, 466], "salman": [0, 396, 1049, 1050, 1051, 1052, 1053], "salt": [68, 242, 310, 1048], "salvator": [1034, 1048, 1049, 1051, 1052], "salz": 1041, "salzmann": [210, 228], "sam": [1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049], "sambhav": 1045, "same": [2, 26, 44, 47, 48, 53, 59, 64, 71, 73, 76, 80, 87, 89, 91, 92, 98, 103, 104, 105, 119, 121, 123, 126, 128, 130, 136, 138, 142, 144, 147, 148, 150, 153, 165, 167, 169, 185, 186, 188, 197, 198, 200, 205, 210, 211, 212, 218, 228, 244, 248, 258, 262, 263, 264, 265, 266, 268, 269, 271, 273, 274, 276, 281, 282, 288, 291, 293, 305, 308, 309, 311, 313, 314, 317, 319, 326, 331, 339, 350, 351, 352, 357, 358, 362, 363, 364, 369, 370, 372, 374, 375, 377, 379, 381, 383, 384, 387, 388, 389, 390, 398, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 428, 432, 438, 439, 446, 450, 456, 465, 469, 470, 471, 472, 473, 474, 475, 476, 478, 494, 496, 497, 499, 505, 509, 510, 532, 533, 536, 537, 538, 539, 540, 541, 544, 548, 550, 552, 553, 554, 555, 558, 560, 561, 562, 563, 565, 566, 568, 569, 591, 592, 604, 605, 608, 613, 614, 616, 625, 630, 631, 632, 635, 636, 649, 652, 655, 656, 658, 661, 662, 666, 669, 670, 671, 675, 676, 677, 678, 679, 680, 681, 687, 690, 702, 707, 708, 715, 716, 718, 720, 729, 734, 735, 739, 758, 759, 760, 781, 782, 783, 789, 791, 795, 797, 798, 800, 801, 803, 804, 806, 807, 809, 811, 812, 817, 821, 822, 825, 826, 828, 829, 830, 831, 832, 833, 834, 849, 850, 851, 855, 857, 858, 859, 870, 871, 872, 876, 877, 879, 881, 882, 883, 884, 885, 886, 887, 889, 896, 907, 908, 915, 917, 928, 935, 939, 951, 969, 974, 977, 978, 988, 993, 994, 996, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1018, 1019, 1020, 1023, 1024, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "same_kind": 1051, "samesh": [1044, 1045], "samm": [135, 414, 554, 1050, 1051], "samoocha": 1042, "sampl": [2, 28, 31, 38, 44, 45, 48, 51, 54, 62, 63, 64, 65, 69, 70, 71, 73, 75, 77, 78, 79, 81, 83, 87, 90, 91, 92, 93, 94, 99, 112, 113, 114, 117, 119, 121, 125, 126, 129, 130, 135, 136, 137, 138, 139, 140, 141, 143, 144, 146, 147, 148, 150, 151, 156, 157, 158, 162, 164, 165, 167, 169, 173, 174, 175, 176, 178, 180, 182, 185, 186, 190, 191, 196, 197, 198, 200, 203, 210, 212, 214, 217, 218, 220, 221, 222, 224, 226, 227, 228, 230, 237, 241, 242, 244, 245, 247, 253, 254, 256, 257, 258, 259, 260, 262, 263, 267, 268, 270, 271, 272, 274, 276, 280, 282, 283, 287, 288, 292, 293, 294, 295, 297, 298, 299, 301, 305, 306, 308, 310, 311, 312, 313, 315, 317, 319, 320, 322, 324, 325, 328, 330, 331, 332, 333, 334, 335, 337, 339, 341, 343, 344, 346, 347, 350, 351, 355, 357, 362, 368, 370, 371, 374, 375, 377, 378, 387, 388, 398, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 424, 425, 426, 429, 430, 431, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 454, 456, 457, 458, 461, 462, 463, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 487, 488, 489, 490, 491, 493, 494, 495, 496, 498, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 583, 584, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 613, 614, 630, 631, 632, 633, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 690, 691, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 710, 711, 712, 713, 715, 716, 717, 718, 719, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 737, 738, 739, 740, 741, 742, 743, 744, 746, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 763, 764, 766, 767, 771, 772, 773, 774, 776, 777, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 870, 871, 872, 873, 876, 877, 878, 879, 880, 881, 882, 884, 885, 886, 887, 888, 892, 893, 894, 896, 897, 898, 899, 900, 901, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 924, 929, 933, 934, 938, 939, 951, 955, 972, 974, 977, 978, 981, 984, 992, 993, 994, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1023, 1024, 1025, 1027, 1030, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "sample_i": [178, 417, 614, 1048], "sample_id": [357, 370, 498], "sample_interv": 641, "sample_interval_": 1050, "sample_posterior": [181, 630, 994], "sample_s": [92, 242, 351, 796], "sample_score_mean": 272, "sample_score_std": 272, "sample_silhouette_valu": 94, "sample_step": 641, "sample_weight": [62, 194, 210, 223, 228, 244, 318, 323, 324, 348, 375, 377, 389, 398, 407, 414, 418, 424, 430, 437, 443, 444, 447, 449, 459, 460, 465, 469, 482, 483, 484, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 613, 614, 635, 636, 637, 638, 640, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 690, 700, 701, 703, 705, 706, 710, 711, 712, 715, 716, 719, 721, 723, 724, 725, 726, 727, 729, 730, 731, 732, 733, 737, 738, 741, 742, 743, 744, 746, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 785, 786, 787, 788, 790, 791, 792, 793, 794, 797, 799, 802, 803, 817, 825, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 852, 854, 857, 858, 864, 865, 867, 872, 886, 887, 902, 903, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 921, 963, 991, 1004, 1018, 1019, 1020, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1052], "sample_weight1": 244, "sample_weight2": 244, "sample_weight_const": 348, "sample_weight_last_ten": 348, "sample_weight_vect": 939, "sample_without_replac": [2, 384, 1040], "samples_weight": 223, "samplewis": [757, 1004], "samson": 1041, "samuel": [699, 1028, 1037, 1038, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1051], "samuela": 1037, "samu\u00ebl": 1041, "san": [165, 372, 415, 1016], "sanchez": [1042, 1043], "sandbox": 401, "sandeep": 1046, "sander": [407, 418, 444, 446, 450, 457, 853, 1010, 1043, 1044], "sandi": 1047, "sandip": [1051, 1052], "sandra": [1043, 1049], "sandro": [1042, 1049], "sandrocasagrand": [1042, 1043], "sandrovskii": 1041, "sane": 377, "sangam": 1049, "sangamswadik": 1049, "sangeeth": 1043, "saniti": [378, 871, 1004, 1034, 1035], "sanjabi": 1044, "sanjai": 1048, "sanjai_3": [1049, 1050], "sanjoi": [901, 1016], "sano": 1048, "sanofi": 52, "santa": [177, 1049], "santana": [1045, 1048], "santhanam": 1042, "santhosh": 1045, "santhoshbala18": 1045, "santi": [1039, 1041, 1042], "santiago": [1045, 1053], "sap": 52, "sapiro": [412, 532, 538], "saqib": 1042, "sara": 1047, "sarah": [1041, 1043, 1046], "sarahremu": [1049, 1052], "sarajpoor": 1049, "sarat": 1045, "sarawagi": 786, "sarra": 1044, "sartaj": 1040, "sasank": 1040, "sashka": [1049, 1050], "sass": [375, 393, 400], "sassenhagen": [1046, 1051], "sat": [44, 150, 186, 415], "satellit": 1007, "satisfi": [407, 653, 657, 702, 720, 739, 740, 847, 848, 1004], "satish": 1042, "sato": 1037, "satrajit": [0, 397, 1034, 1035], "satur": [73, 185, 308], "sauerbrei": 1014, "sauerkraut": 415, "saul": [692, 696, 1001, 1041, 1042, 1044], "saurabh": [1038, 1039, 1040, 1041, 1042, 1046], "sauvignon": 314, "saval": 1043, "savard": 1034, "save": [87, 103, 105, 247, 306, 374, 375, 379, 381, 382, 383, 389, 401, 411, 419, 468, 492, 535, 536, 630, 847, 848, 905, 1000, 1004, 1014, 1020, 1028, 1034, 1037, 1041, 1044, 1052], "savings_statu": 262, "savkomax": 1049, "saw": [122, 211, 214], "sawadwuthikul": 1053, "sawtooth": 122, "say_hello": 964, "sc": [369, 407], "scaja": 1051, "scala": 1024, "scalabl": [78, 80, 96, 182, 189, 242, 260, 322, 351, 375, 407, 414, 415, 448, 491, 503, 591, 643, 809, 820, 831, 833, 845, 868, 877, 879, 907, 909, 912, 913, 996, 999, 1001, 1004, 1017, 1019, 1025, 1028, 1034, 1037, 1038, 1044, 1045, 1048, 1049], "scalar": [2, 121, 320, 325, 381, 389, 403, 408, 417, 419, 464, 467, 525, 534, 618, 619, 620, 625, 626, 630, 631, 633, 741, 745, 929, 937, 996, 1008, 1010, 1014, 1018, 1023, 1044, 1045, 1048, 1050, 1053], "scalarmapp": 67, "scale": [2, 37, 44, 45, 52, 63, 65, 73, 76, 79, 81, 82, 90, 92, 95, 104, 105, 111, 114, 117, 123, 126, 145, 152, 165, 169, 170, 171, 174, 175, 176, 182, 186, 190, 193, 194, 198, 202, 210, 212, 214, 224, 225, 226, 228, 229, 232, 237, 243, 247, 258, 265, 268, 269, 270, 271, 275, 291, 293, 304, 305, 306, 307, 308, 312, 318, 321, 323, 324, 333, 334, 336, 339, 343, 358, 361, 362, 367, 368, 369, 372, 375, 380, 384, 387, 388, 389, 407, 408, 412, 414, 415, 416, 417, 446, 447, 450, 451, 457, 464, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 502, 511, 515, 516, 525, 535, 539, 541, 542, 548, 550, 551, 562, 563, 584, 592, 593, 599, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 634, 635, 644, 647, 648, 649, 650, 652, 655, 661, 662, 663, 664, 665, 675, 677, 679, 680, 681, 684, 690, 691, 692, 693, 695, 697, 702, 706, 719, 744, 750, 760, 762, 772, 778, 780, 817, 820, 833, 834, 835, 847, 848, 849, 864, 865, 868, 871, 876, 877, 879, 882, 884, 885, 887, 892, 893, 894, 896, 897, 899, 900, 907, 908, 909, 910, 911, 912, 913, 978, 979, 980, 981, 984, 993, 996, 997, 1000, 1004, 1005, 1006, 1007, 1008, 1012, 1018, 1019, 1024, 1025, 1028, 1029, 1030, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "scale_": [652, 876, 877, 885, 887, 897, 1014, 1039], "scaled_clf": 313, "scaled_pca": 313, "scaled_x_train": 313, "scaler": [46, 104, 106, 163, 182, 226, 227, 242, 247, 249, 251, 282, 291, 296, 307, 312, 313, 322, 339, 342, 358, 380, 408, 411, 490, 661, 662, 675, 677, 690, 867, 876, 877, 879, 883, 884, 885, 887, 892, 893, 894, 895, 896, 897, 898, 1008, 1014, 1018, 1025, 1034, 1039, 1042, 1047], "scaler2": 251, "scalewai": 383, "scaling_": 551, "scalings_": [550, 551], "scanpi": 1051, "scatter": [44, 49, 51, 52, 62, 67, 68, 71, 74, 75, 78, 79, 80, 83, 86, 90, 91, 92, 93, 94, 96, 101, 112, 117, 119, 123, 125, 126, 127, 129, 136, 137, 141, 143, 151, 153, 154, 156, 160, 169, 170, 171, 173, 175, 176, 177, 178, 184, 185, 190, 193, 201, 203, 207, 208, 211, 212, 213, 219, 222, 223, 224, 227, 230, 231, 232, 233, 234, 235, 237, 242, 243, 245, 253, 254, 255, 256, 257, 258, 259, 263, 269, 271, 283, 288, 291, 294, 295, 296, 297, 298, 299, 300, 303, 308, 310, 311, 313, 321, 330, 333, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 347, 348, 350, 355, 356, 371, 409, 634, 704, 998, 1000], "scatter_": 704, "scatter_fig": 141, "scatter_handl": 203, "scatter_kwarg": [44, 53, 108, 155, 185, 704], "scatter_label": 203, "scatter_trac": 141, "scatterplot": [116, 192, 268], "scatterpoint": [125, 129, 233, 255, 330], "scenario": [91, 103, 150, 169, 190, 214, 271, 358, 382, 393, 406, 411, 414, 538, 544, 546, 547, 998, 1004, 1014, 1044], "scene": [372, 383, 1007, 1009, 1047], "schapir": [51, 285, 301, 370, 414, 499, 554, 555], "schedul": [150, 304, 363, 379, 679, 680, 681, 864, 865, 1018, 1028, 1041], "scheidegg": 1034, "scheme": [277, 293, 314, 315, 370, 379, 389, 407, 411, 413, 415, 567, 592, 661, 662, 708, 816, 850, 874, 875, 878, 880, 884, 888, 891, 896, 907, 912, 993, 1000, 1014, 1018, 1034, 1042, 1045, 1046, 1051, 1052], "scherer": 1040, "scheubrein": 1046, "schloss": 1004, "schl\u00fcter": [1034, 1042], "schmerler": 1049, "schmid": [761, 762, 1002], "schmidt": [661, 1000, 1037], "schmitt": [1044, 1045], "schmitz": 1051, "schneider": [350, 1047, 1052, 1053], "schoelkopf": 903, "schoentgen": [1042, 1043], "schofield": 1034, "schole": 1046, "scholkopf1997": 412, "scholkopf1998": 1014, "scholz": 1052, "school": [103, 174, 185, 372, 407, 791, 1004], "schreiber": [0, 397, 1039, 1040, 1041], "schroeder": [46, 370], "schubert": [407, 418, 444, 450, 1038, 1039, 1042, 1043, 1045, 1046, 1047, 1048, 1052], "schucker": 1040, "schuder": [1042, 1043, 1044], "schuetz": [842, 846], "schuldt": 1038, "schult": 56, "schulz": 1034, "schumach": [1037, 1038, 1039, 1053], "schut": 1034, "schwardt": 1034, "schwartz": [1034, 1036, 1048], "schwetlick": [1045, 1046], "sch\u00f6lkopf": [45, 412, 536, 873, 1010, 1014, 1019], "sch\u00f6nberger": [1036, 1037], "sch\u00fctze": [412, 592, 1002, 1004, 1006], "sci": [58, 103, 350, 351, 352, 370, 387, 488, 692, 696, 878, 1001, 1014], "scibol": 1045, "scienc": [0, 74, 112, 165, 177, 185, 285, 369, 372, 387, 407, 440, 454, 539, 541, 548, 691, 692, 696, 854, 994, 996, 1000, 1001, 1004, 1007, 1016, 1024, 1028, 1042], "scientif": [0, 69, 242, 369, 373, 387, 393, 407, 452, 462, 502, 1028, 1030, 1053], "scientist": [994, 1028], "scikera": 1023, "scikit": [2, 15, 31, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 184, 185, 186, 187, 188, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 358, 363, 364, 367, 369, 370, 371, 372, 374, 375, 378, 381, 382, 383, 384, 388, 389, 394, 395, 398, 400, 401, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 421, 422, 424, 425, 426, 427, 429, 430, 431, 438, 443, 446, 447, 450, 457, 464, 465, 467, 468, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 513, 516, 522, 525, 539, 542, 558, 562, 563, 565, 566, 568, 578, 583, 584, 585, 591, 601, 604, 612, 614, 629, 631, 633, 635, 637, 641, 643, 649, 651, 655, 661, 672, 679, 683, 691, 700, 703, 704, 705, 720, 721, 735, 745, 751, 781, 782, 783, 791, 798, 802, 803, 804, 805, 806, 807, 808, 809, 817, 820, 821, 822, 823, 824, 825, 826, 829, 830, 833, 835, 836, 849, 851, 867, 868, 870, 872, 874, 877, 879, 880, 881, 882, 886, 887, 888, 891, 904, 905, 907, 912, 915, 916, 923, 925, 926, 934, 944, 946, 956, 969, 970, 992, 993, 994, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1014, 1017, 1018, 1019, 1020, 1022, 1025, 1027, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "scikit_learn": 1023, "scikit_learn_data": [53, 370, 486, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500], "scipi": [0, 2, 46, 54, 56, 58, 77, 81, 82, 87, 88, 110, 111, 114, 122, 124, 128, 146, 169, 185, 188, 197, 201, 254, 258, 259, 265, 268, 276, 280, 288, 293, 298, 306, 318, 319, 324, 325, 328, 329, 362, 369, 370, 373, 375, 377, 381, 383, 384, 387, 388, 389, 393, 400, 401, 403, 404, 407, 412, 415, 450, 451, 452, 453, 457, 462, 463, 497, 504, 509, 533, 535, 536, 542, 545, 583, 584, 587, 588, 590, 591, 613, 614, 651, 652, 656, 660, 661, 662, 666, 669, 670, 671, 672, 673, 675, 677, 679, 680, 681, 683, 687, 690, 694, 695, 698, 722, 763, 766, 781, 782, 783, 784, 795, 796, 807, 815, 817, 833, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 864, 870, 879, 880, 885, 886, 887, 890, 894, 897, 898, 907, 909, 910, 912, 913, 948, 952, 953, 958, 974, 975, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 989, 993, 994, 1000, 1002, 1005, 1007, 1008, 1014, 1018, 1019, 1022, 1024, 1036, 1038, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1053], "scipy_array_api": 403, "sckit": 1050, "scls19fr": 1039, "scognamiglio": 414, "scope": [46, 58, 262, 362, 364, 375, 387, 415, 1023, 1024], "score": [0, 2, 13, 28, 44, 46, 48, 51, 53, 59, 60, 62, 63, 64, 65, 68, 69, 70, 73, 92, 94, 103, 104, 105, 106, 107, 108, 110, 114, 117, 128, 133, 135, 137, 143, 144, 145, 146, 147, 150, 151, 154, 155, 160, 161, 162, 165, 180, 182, 184, 185, 186, 187, 188, 190, 196, 202, 203, 206, 210, 212, 216, 218, 226, 228, 237, 242, 243, 244, 247, 251, 257, 260, 262, 266, 268, 269, 270, 271, 272, 273, 276, 277, 279, 280, 281, 282, 283, 285, 287, 295, 296, 297, 303, 304, 305, 306, 310, 313, 314, 315, 317, 318, 319, 320, 324, 325, 328, 329, 331, 332, 339, 346, 350, 351, 354, 358, 370, 375, 377, 380, 388, 389, 401, 402, 403, 404, 405, 406, 408, 410, 412, 414, 416, 424, 426, 430, 437, 443, 447, 449, 452, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 503, 505, 533, 537, 542, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 594, 595, 596, 597, 598, 600, 601, 602, 604, 605, 606, 608, 611, 613, 614, 616, 617, 618, 619, 622, 623, 624, 625, 626, 627, 628, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 701, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 716, 718, 719, 720, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 737, 739, 740, 741, 742, 743, 745, 758, 759, 760, 785, 786, 787, 788, 789, 790, 791, 792, 797, 798, 799, 800, 801, 802, 803, 806, 807, 809, 817, 822, 825, 826, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 852, 853, 854, 856, 857, 858, 863, 864, 865, 867, 887, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 923, 925, 953, 993, 996, 1000, 1002, 1007, 1010, 1012, 1014, 1018, 1025, 1030, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "score_clf1": 70, "score_clf2": 70, "score_clf3": 70, "score_df": 63, "score_differ": 273, "score_estim": [210, 228], "score_full_data": 180, "score_func": [73, 104, 105, 416, 594, 597, 598, 600, 601, 602, 745, 1034, 1036, 1051], "score_iri": 274, "score_iterative_imput": 180, "score_label": [228, 274], "score_mean": 342, "score_nam": [63, 73, 243, 270, 323, 351, 809, 826], "score_param": [595, 596, 662, 1051], "score_rand": 274, "score_sampl": [257, 293, 294, 295, 301, 389, 413, 469, 533, 542, 564, 680, 800, 801, 803, 806, 807, 817, 852, 853, 863, 867, 911, 1010, 1037, 1042, 1044, 1046], "score_simple_imput": 180, "score_std": 342, "score_tim": [270, 411, 830, 831], "score_times_nb": 270, "score_times_svm": 270, "score_typ": [243, 270, 281, 323, 809, 826, 1050], "score_valu": 351, "scorer": [2, 150, 155, 228, 244, 262, 272, 324, 389, 398, 406, 411, 414, 416, 562, 563, 596, 604, 637, 662, 676, 678, 714, 735, 736, 745, 803, 806, 807, 809, 817, 825, 826, 829, 830, 831, 832, 834, 961, 993, 1000, 1012, 1038, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "scorer1_nam": 411, "scorer2_nam": 411, "scorer_": [803, 806, 807, 817], "scorer_nam": [272, 803, 817], "scores_": [192, 193, 594, 597, 598, 600, 601, 602, 647, 648, 662, 1034, 1044], "scores_df": 53, "scores_glm_pure_premium": 228, "scores_matrix": 279, "scores_max": 56, "scores_product_model": 228, "scoring_cal": 714, "scoring_inner_cv": 324, "scoring_on_bootstrap": 271, "scoring_weight": 398, "scott": [413, 852, 1034, 1035, 1040, 1042, 1043, 1044, 1049, 1050], "scottlog": [1052, 1053], "scratch": [376, 442, 1004, 1036], "screen": [49, 1047], "screenporch": 144, "screenshot": 373, "script": [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 184, 185, 186, 187, 188, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 358, 363, 375, 376, 377, 378, 379, 381, 387, 389, 393, 401, 415, 1024, 1027], "scroll": 395, "scrollbar": 380, "scrutin": 277, "scsi": 58, "scullei": 407, "sdenton4": 1037, "sdg_param": 332, "se": [165, 232, 372, 393], "seabold": [1037, 1039, 1040], "seaborn": [73, 127, 136, 150, 184, 185, 192, 196, 258, 268, 375, 393, 400, 1023], "seagreen": 205, "seal": 1040, "seamu": 1036, "sean": [1046, 1047, 1049, 1053], "seanpwilliam": 1041, "sear": 1040, "search": [2, 46, 53, 65, 81, 88, 104, 105, 106, 107, 147, 160, 162, 164, 165, 169, 182, 228, 243, 244, 258, 260, 262, 267, 269, 272, 273, 275, 280, 287, 288, 290, 292, 306, 310, 322, 339, 345, 350, 358, 372, 373, 375, 377, 387, 389, 402, 407, 408, 411, 414, 415, 416, 418, 443, 448, 450, 452, 457, 458, 461, 464, 471, 472, 478, 503, 516, 523, 558, 559, 560, 561, 565, 566, 567, 581, 601, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 631, 656, 679, 691, 692, 695, 696, 716, 731, 788, 791, 803, 806, 807, 814, 815, 817, 819, 833, 834, 847, 848, 849, 850, 851, 853, 855, 857, 858, 859, 860, 861, 867, 912, 915, 916, 917, 918, 957, 991, 997, 999, 1001, 1004, 1007, 1008, 1018, 1020, 1024, 1025, 1030, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1046, 1048, 1049, 1051, 1053], "search_05p": 147, "search_95p": 147, "search_cv": 104, "searchcv": [388, 1049], "searchforpass": 1050, "searchgrid": 1024, "searchsort": 51, "season": [44, 53, 174, 186, 211, 374], "seasonal_kernel": 174, "seasoncountcatu32": 53, "sebastian": [1035, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1051], "sebastien": 1042, "sebastin": [1041, 1042], "sebasti\u00e1n": 1040, "seberg": 1035, "sec": [50, 218, 232, 235, 288], "sec65": 1049, "secant": 645, "second": [44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 184, 185, 186, 187, 188, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 358, 362, 370, 377, 381, 389, 404, 406, 407, 411, 412, 414, 415, 417, 464, 467, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 503, 505, 511, 554, 585, 590, 591, 592, 593, 624, 627, 634, 635, 702, 715, 719, 761, 762, 766, 767, 769, 770, 777, 778, 779, 780, 781, 784, 803, 806, 807, 817, 831, 837, 838, 841, 844, 855, 857, 858, 859, 864, 865, 993, 994, 998, 999, 1000, 1001, 1004, 1005, 1006, 1007, 1008, 1011, 1014, 1015, 1020, 1049], "secondari": [638, 1038], "secondli": [373, 387, 407, 414, 660, 1000], "sect": 45, "section": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 73, 121, 126, 138, 145, 150, 155, 174, 178, 184, 185, 186, 188, 192, 196, 198, 200, 212, 234, 238, 244, 247, 249, 262, 266, 268, 271, 277, 313, 314, 315, 319, 350, 351, 352, 358, 368, 370, 373, 375, 376, 377, 379, 380, 381, 382, 383, 390, 398, 405, 406, 408, 410, 411, 412, 414, 415, 416, 417, 439, 443, 459, 535, 617, 622, 625, 640, 648, 791, 801, 909, 912, 993, 998, 1000, 1004, 1005, 1007, 1008, 1010, 1011, 1018, 1019, 1020, 1021, 1034, 1036, 1037, 1038, 1041], "sector": 185, "sector_construct": 185, "sector_manufactur": 185, "sector_oth": 185, "secur": [379, 389, 1023, 1024, 1028, 1030], "sed": [379, 1034], "sedamaki": 1048, "sedykh": 1049, "see": [0, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 53, 59, 62, 63, 65, 73, 80, 83, 84, 87, 89, 91, 92, 96, 98, 99, 101, 102, 112, 117, 121, 126, 127, 131, 135, 136, 137, 138, 141, 142, 143, 144, 146, 147, 148, 150, 152, 155, 161, 162, 163, 165, 167, 169, 174, 175, 176, 180, 182, 185, 186, 188, 190, 192, 193, 194, 196, 202, 203, 211, 212, 213, 214, 216, 227, 228, 230, 232, 239, 241, 244, 247, 248, 249, 251, 254, 255, 256, 261, 262, 263, 265, 267, 268, 269, 270, 271, 273, 275, 277, 278, 279, 282, 283, 285, 288, 294, 295, 297, 301, 308, 314, 315, 317, 318, 319, 320, 321, 322, 323, 326, 330, 339, 343, 346, 350, 351, 352, 354, 355, 356, 357, 358, 362, 363, 364, 367, 368, 369, 370, 372, 373, 374, 375, 377, 379, 381, 382, 383, 387, 388, 389, 395, 401, 403, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 431, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 482, 483, 484, 485, 487, 488, 491, 493, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 583, 584, 585, 586, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 609, 610, 611, 613, 614, 617, 622, 625, 626, 630, 631, 632, 633, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 702, 704, 708, 709, 711, 714, 716, 746, 766, 777, 781, 782, 783, 784, 791, 795, 796, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 892, 893, 894, 895, 896, 897, 898, 899, 900, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 923, 926, 927, 950, 951, 972, 974, 977, 987, 990, 993, 994, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1024, 1028, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "seed": [2, 47, 51, 64, 65, 71, 75, 76, 80, 86, 88, 91, 93, 94, 98, 99, 104, 110, 111, 112, 119, 122, 138, 143, 160, 187, 201, 206, 208, 213, 216, 219, 223, 227, 233, 254, 256, 257, 258, 259, 271, 274, 283, 293, 294, 295, 343, 344, 348, 351, 358, 363, 377, 384, 387, 389, 407, 411, 412, 443, 447, 448, 450, 452, 457, 459, 460, 461, 462, 471, 472, 473, 537, 545, 554, 555, 556, 557, 560, 561, 630, 649, 650, 655, 656, 663, 664, 665, 666, 680, 692, 694, 696, 698, 800, 801, 807, 838, 841, 856, 910, 936, 950, 951, 968, 972, 993, 994, 999, 1001, 1038, 1039, 1043, 1044, 1050], "seeger": [642, 996], "seek": [230, 232, 234, 374, 375, 387, 390, 509, 510, 1001], "seel": 1048, "seem": [44, 49, 53, 81, 89, 147, 150, 175, 186, 210, 234, 237, 269, 285, 304, 312, 346, 350, 351, 374, 375, 380, 406, 411, 502, 1000, 1004], "seemingli": [228, 358, 387], "seen": [56, 63, 76, 89, 100, 114, 124, 130, 142, 147, 150, 185, 186, 234, 240, 244, 304, 308, 326, 339, 350, 370, 377, 379, 388, 389, 405, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 423, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 522, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 613, 614, 626, 630, 631, 632, 633, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 691, 692, 693, 694, 695, 800, 801, 802, 803, 806, 807, 817, 825, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 870, 871, 872, 873, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 978, 984, 993, 999, 1004, 1007, 1008, 1014, 1020, 1028, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "segfault": [363, 376, 1034, 1042, 1047], "segment": [52, 54, 56, 60, 72, 82, 87, 124, 182, 233, 240, 370, 383, 407, 415, 452, 462, 509, 510, 694, 863, 1004, 1025, 1028, 1042, 1044, 1046], "seguin": 1039, "sei": 415, "seismic_r": [192, 196], "sejourn": 1043, "sel": [398, 416], "seladu": 1050, "seldom": 907, "sele": [1048, 1049], "selecci\u00f3n": 314, "select": [2, 18, 30, 44, 47, 49, 50, 53, 59, 71, 72, 80, 89, 91, 96, 102, 104, 107, 114, 119, 120, 131, 135, 137, 144, 147, 150, 155, 160, 162, 174, 176, 185, 186, 188, 190, 191, 193, 195, 196, 197, 199, 209, 214, 218, 225, 228, 231, 237, 241, 243, 247, 252, 253, 254, 262, 266, 267, 268, 269, 273, 277, 281, 282, 292, 308, 313, 314, 319, 323, 325, 328, 329, 332, 334, 339, 346, 350, 351, 352, 358, 362, 370, 372, 373, 375, 377, 379, 383, 388, 389, 404, 407, 408, 409, 412, 414, 415, 417, 443, 445, 446, 447, 449, 451, 453, 458, 459, 460, 464, 466, 467, 472, 473, 476, 488, 489, 493, 494, 497, 498, 501, 502, 503, 505, 513, 516, 533, 535, 536, 541, 542, 545, 550, 552, 559, 560, 561, 564, 566, 583, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 614, 630, 634, 635, 648, 649, 650, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 674, 676, 679, 681, 685, 686, 694, 695, 700, 715, 719, 721, 757, 791, 795, 796, 800, 801, 803, 806, 807, 808, 809, 817, 829, 830, 831, 833, 835, 849, 850, 851, 853, 855, 857, 858, 859, 867, 868, 872, 877, 883, 887, 904, 907, 908, 912, 915, 916, 917, 918, 929, 972, 973, 998, 999, 1001, 1003, 1004, 1005, 1007, 1008, 1010, 1014, 1017, 1018, 1019, 1020, 1021, 1023, 1024, 1025, 1026, 1028, 1030, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052], "select__k": 993, "select_dtyp": [108, 144, 322, 466], "selected_featur": 188, "selected_features_nam": 188, "selectfdr": [2, 416, 594, 598, 600, 601, 602, 608, 1038, 1040, 1041, 1050], "selectfpr": [2, 375, 416, 594, 597, 600, 601, 602, 608, 1050], "selectfrommodel": [2, 165, 389, 398, 595, 604, 605, 1026, 1030, 1039, 1040, 1041, 1042, 1044, 1046, 1047, 1048, 1050, 1051], "selectfw": [2, 416, 594, 597, 598, 601, 602, 608, 1050], "selectkbest": [2, 105, 107, 161, 162, 321, 358, 375, 398, 408, 416, 583, 594, 597, 598, 600, 602, 608, 993, 1035, 1040, 1050, 1051], "selectkbestselectkbest": [162, 321], "selector": [2, 53, 104, 161, 162, 247, 346, 383, 415, 416, 466, 583, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 1036, 1044, 1046, 1050], "selectormixin": [2, 1045], "selectpercentil": [2, 88, 104, 251, 342, 416, 594, 597, 598, 600, 601, 605, 608, 1035, 1040, 1050, 1051], "selectpercentileselectpercentil": [104, 251], "self": [2, 48, 58, 63, 65, 90, 99, 119, 133, 177, 182, 188, 244, 282, 288, 327, 333, 339, 350, 369, 375, 376, 377, 380, 381, 382, 383, 407, 415, 417, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 501, 509, 510, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 583, 584, 585, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 691, 692, 693, 694, 695, 706, 800, 801, 802, 803, 804, 805, 806, 807, 810, 812, 817, 821, 822, 825, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 956, 960, 961, 963, 964, 969, 977, 992, 1007, 1024, 1025, 1026, 1028, 1030, 1036, 1041, 1048], "self_request": 244, "self_training_clf": 331, "self_training_model": [319, 904], "selftrain": 332, "selftrainingclassifi": [2, 319, 331, 332, 333, 398, 1017, 1046, 1051, 1053], "selftrainingclassifierifittedselftrainingclassifi": 319, "seljak": 1049, "sell": 108, "selvan": 1046, "semant": [55, 350, 351, 389, 545, 1029, 1030, 1036], "semi": [2, 39, 58, 68, 116, 143, 153, 171, 242, 245, 303, 310, 319, 335, 336, 339, 343, 352, 370, 389, 488, 505, 536, 590, 592, 679, 732, 833, 867, 871, 902, 903, 904, 912, 1002, 1007, 1010, 1025, 1026, 1030, 1034, 1046, 1049], "semi_supervis": [2, 182, 319, 321, 327, 328, 329, 330, 331, 332, 333, 398, 902, 903, 904, 1005, 1017, 1025, 1035, 1040, 1041, 1048, 1049], "semiconductor": 1028, "semidefinit": [178, 1014, 1019], "semilogi": [199, 241], "semilogx": [199, 200], "semin": 414, "seminar": 1004, "semisupervis": [328, 389], "sen": [2, 151, 182, 191, 213, 216, 308, 652, 660, 674, 681, 682, 1025], "send": [375, 379, 390, 407, 419, 534], "sender": [350, 370], "sendyk": 1043, "seng": 1046, "senger": [0, 365, 1050, 1051, 1052, 1053], "senior": [1014, 1028], "sens": [43, 44, 53, 56, 63, 89, 100, 175, 182, 185, 190, 241, 308, 314, 329, 339, 350, 358, 362, 375, 376, 389, 407, 409, 411, 416, 462, 469, 470, 471, 472, 473, 474, 475, 476, 612, 655, 658, 659, 675, 804, 814, 904, 998, 1000, 1004, 1007, 1008, 1010, 1014, 1017, 1025], "sensibl": [86, 180, 281, 285, 351, 1000, 1014], "sensit": [44, 80, 89, 112, 113, 138, 147, 167, 182, 186, 212, 213, 214, 237, 238, 247, 260, 272, 275, 282, 308, 325, 339, 363, 364, 390, 406, 409, 414, 452, 462, 497, 552, 562, 612, 661, 695, 703, 705, 715, 716, 721, 745, 787, 790, 791, 802, 803, 825, 833, 868, 887, 905, 999, 1000, 1001, 1003, 1004, 1008, 1010, 1018, 1019, 1025, 1038, 1052], "sensor": 196, "sent": [150, 407, 836, 1020], "sentenc": [103, 350, 352, 370, 390, 415], "seoeun": 1050, "sep": [119, 277], "sepal": [127, 129, 131, 143, 171, 251, 291, 319, 322, 336, 372, 1014], "sepal_col": 322, "separ": [53, 54, 62, 63, 67, 68, 76, 89, 94, 96, 100, 106, 112, 120, 121, 123, 126, 135, 137, 140, 153, 165, 172, 181, 182, 186, 187, 190, 191, 203, 209, 211, 231, 245, 255, 268, 271, 277, 278, 308, 310, 313, 319, 331, 334, 335, 337, 338, 339, 343, 344, 350, 358, 362, 371, 372, 377, 380, 383, 387, 389, 401, 405, 407, 408, 409, 412, 414, 415, 417, 464, 513, 520, 534, 539, 541, 542, 548, 550, 583, 590, 591, 593, 613, 634, 641, 649, 650, 676, 679, 680, 693, 697, 728, 735, 748, 749, 751, 756, 795, 822, 839, 840, 866, 867, 909, 911, 912, 917, 918, 993, 994, 996, 998, 1000, 1001, 1003, 1010, 1011, 1014, 1018, 1019, 1025, 1034, 1037, 1039, 1040, 1044, 1046, 1047, 1050, 1051], "seper": 554, "septemb": [737, 1004, 1034, 1037, 1040, 1042, 1047, 1050, 1052], "seq": 636, "seq_dataset": [1034, 1044], "seqlearn": 387, "sequenc": [2, 52, 135, 143, 198, 233, 377, 389, 408, 411, 412, 414, 415, 504, 513, 554, 555, 562, 563, 570, 571, 583, 584, 590, 591, 593, 649, 803, 806, 814, 833, 867, 891, 954, 955, 966, 974, 977, 1034, 1037, 1039, 1040], "sequencekernel": 177, "sequenti": [2, 53, 143, 159, 162, 182, 205, 269, 319, 373, 412, 414, 415, 501, 502, 535, 595, 599, 604, 605, 607, 608, 649, 650, 655, 656, 661, 663, 664, 665, 666, 676, 791, 867, 868, 887, 994, 1012, 1018, 1025, 1026, 1030, 1034, 1043, 1046], "sequentialfeatureselector": [2, 165, 398, 416, 595, 599, 605, 1046, 1047, 1048, 1049, 1050, 1053], "sergei": [407, 1036, 1040, 1041, 1042, 1043, 1044], "sergeyf": 1036, "sergio": [1034, 1036, 1037, 1046, 1049], "sergiodsr": 1045, "sergul": [1041, 1042, 1045], "seri": [2, 43, 44, 52, 59, 114, 142, 147, 150, 182, 184, 187, 188, 195, 210, 212, 214, 230, 251, 273, 282, 315, 321, 328, 367, 370, 380, 389, 407, 489, 490, 491, 492, 493, 497, 501, 502, 503, 505, 506, 511, 542, 563, 693, 697, 704, 745, 748, 749, 751, 793, 824, 829, 830, 833, 929, 995, 1000, 1001, 1005, 1007, 1018, 1023, 1025, 1037, 1040, 1041, 1042, 1046, 1049, 1051, 1052], "serial": [389, 401, 421, 959, 1023, 1024, 1034, 1042, 1046, 1051], "serializetostr": 401, "serious": 1006, "serum": [165, 372, 1004], "serv": [103, 125, 135, 175, 262, 271, 343, 408, 552, 996, 1030, 1048], "server": [0, 165, 362, 372, 373, 375, 497, 1027, 1042], "servic": [0, 44, 238, 247, 375, 379, 401, 1028, 1042], "sess": 401, "session": [377, 381, 387, 393, 1022, 1028], "set": [2, 3, 8, 20, 28, 38, 43, 44, 45, 46, 47, 48, 51, 53, 54, 59, 63, 64, 65, 67, 68, 71, 73, 77, 78, 80, 81, 83, 84, 87, 88, 89, 91, 92, 94, 96, 98, 99, 100, 103, 104, 106, 112, 113, 114, 117, 121, 126, 127, 133, 135, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 157, 161, 162, 165, 169, 175, 176, 177, 182, 184, 185, 186, 187, 188, 192, 196, 198, 199, 200, 202, 203, 204, 206, 207, 209, 210, 211, 212, 215, 218, 223, 224, 228, 230, 231, 232, 237, 238, 239, 240, 242, 243, 244, 247, 251, 253, 255, 257, 258, 261, 263, 266, 268, 269, 270, 271, 272, 273, 276, 277, 278, 279, 281, 283, 285, 287, 290, 294, 295, 296, 297, 298, 301, 304, 305, 306, 308, 310, 312, 313, 314, 315, 317, 319, 320, 322, 324, 326, 328, 329, 332, 333, 336, 338, 341, 343, 346, 350, 351, 352, 356, 357, 358, 362, 363, 364, 367, 368, 370, 372, 373, 375, 377, 379, 380, 382, 383, 388, 389, 390, 393, 398, 401, 403, 404, 405, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 421, 424, 425, 426, 429, 430, 431, 432, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 482, 483, 484, 485, 488, 489, 494, 496, 497, 498, 500, 503, 504, 509, 510, 511, 516, 524, 525, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 581, 582, 583, 584, 585, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 700, 701, 702, 703, 704, 705, 706, 714, 716, 717, 722, 724, 726, 729, 730, 731, 732, 733, 734, 737, 741, 743, 748, 749, 751, 753, 754, 756, 759, 782, 783, 785, 786, 787, 788, 790, 792, 793, 794, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 891, 892, 893, 895, 896, 897, 898, 899, 900, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 925, 933, 934, 944, 946, 951, 955, 959, 960, 972, 973, 974, 977, 978, 984, 987, 992, 993, 994, 995, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1023, 1024, 1025, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "set1": [268, 297, 298], "set_": [244, 398, 1052, 1053], "set_alpha": [71, 253, 254, 255, 258, 259], "set_arrai": [52, 233, 240], "set_aspect": [44, 123, 172, 221, 255, 347], "set_autoscaley_on": 78, "set_axis_bgcolor": 114, "set_axis_off": 69, "set_axisbelow": 50, "set_box_aspect": 71, "set_clim": 292, "set_clip_box": [71, 253, 254, 255, 258, 259], "set_color": [47, 221], "set_config": [2, 244, 249, 251, 262, 315, 318, 324, 326, 362, 363, 398, 408, 437, 443, 444, 447, 449, 464, 465, 468, 472, 482, 483, 484, 534, 537, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 592, 595, 596, 599, 604, 613, 614, 629, 630, 638, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 693, 802, 804, 805, 810, 812, 821, 825, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 852, 854, 857, 858, 864, 865, 867, 868, 870, 872, 873, 874, 879, 886, 887, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 1043, 1045, 1048, 1050], "set_constrained_layout_pad": 121, "set_edgecolor": 121, "set_facecolor": [114, 253], "set_fit_request": [244, 324, 326, 398, 437, 443, 444, 447, 449, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 638, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 693, 839, 840, 842, 843, 844, 845, 846, 852, 872, 886, 887, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918], "set_fmt_str_length": 53, "set_i": 91, "set_index": [63, 135, 147, 200, 228, 268, 314, 351], "set_inverse_transform_request": [534, 874, 887], "set_label": [76, 172, 241], "set_label_posit": 47, "set_linewidth": [52, 233, 240], "set_major_formatt": [230, 232, 235, 288, 293], "set_major_loc": [230, 293], "set_output": [182, 186, 236, 249, 313, 314, 378, 387, 431, 442, 443, 445, 447, 449, 464, 468, 482, 483, 484, 485, 497, 505, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 567, 568, 569, 570, 571, 583, 584, 585, 591, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 630, 631, 632, 633, 638, 641, 642, 643, 644, 645, 661, 691, 692, 695, 833, 851, 856, 859, 863, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 905, 1025, 1049, 1050, 1051, 1053], "set_param": [124, 131, 139, 144, 147, 186, 187, 193, 198, 200, 204, 214, 218, 242, 247, 251, 262, 281, 291, 317, 342, 351, 378, 389, 407, 408, 414, 417, 421, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 583, 584, 585, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 691, 692, 693, 694, 695, 800, 801, 802, 803, 806, 807, 817, 825, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 994, 1010, 1034, 1040, 1041, 1042, 1047, 1048], "set_partial_fit_request": [449, 669, 670, 671, 679, 680, 681, 835, 836, 839, 840, 842, 843, 844, 845, 846, 864, 887], "set_path_effect": 76, "set_posit": [101, 221, 308], "set_predict_request": [244, 482, 483, 484, 553, 614, 647, 648], "set_printopt": 261, "set_prop_cycl": 211, "set_score_request": [244, 262, 324, 398, 437, 443, 447, 449, 465, 482, 483, 484, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 568, 569, 570, 571, 613, 614, 638, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 681, 682, 683, 802, 825, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 849, 850, 854, 857, 858, 864, 865, 867, 902, 903, 907, 908, 909, 910, 912, 913, 915, 916, 917, 918, 1004], "set_siz": 295, "set_size_inch": [94, 248], "set_split_request": [804, 805, 810, 812, 821], "set_start_method": 387, "set_stat": 993, "set_tick_param": 253, "set_ticklabel": [127, 350], "set_titl": [48, 50, 55, 63, 65, 67, 68, 69, 71, 78, 79, 87, 89, 91, 94, 98, 99, 105, 108, 112, 119, 126, 131, 135, 140, 142, 145, 151, 153, 155, 156, 178, 180, 181, 184, 185, 186, 187, 188, 192, 193, 200, 202, 203, 208, 210, 211, 212, 218, 230, 231, 234, 235, 240, 242, 243, 247, 248, 253, 261, 262, 263, 264, 265, 268, 270, 271, 275, 279, 280, 282, 285, 287, 288, 291, 292, 293, 298, 303, 304, 308, 309, 310, 311, 312, 313, 317, 321, 328, 329, 336, 343, 346, 347, 348, 350, 354, 371], "set_transform_request": [244, 482, 483, 484, 534, 537, 592, 870, 873, 879, 887], "set_vis": [55, 71, 292, 298, 308], "set_xlabel": [47, 50, 87, 94, 105, 106, 108, 119, 126, 145, 178, 180, 181, 184, 186, 187, 188, 190, 200, 206, 208, 210, 212, 225, 226, 242, 262, 268, 270, 274, 279, 280, 282, 285, 293, 308, 309, 313, 331, 351, 352, 354], "set_xlim": [68, 78, 94, 108, 112, 119, 140, 153, 181, 186, 208, 210, 215, 242, 253, 272, 274, 285, 293, 303, 308, 310, 311, 312, 313, 318, 324, 347], "set_xscal": [200, 215], "set_xtick": [44, 48, 50, 68, 79, 94, 98, 131, 153, 157, 186, 188, 202, 226, 242, 253, 279, 280, 287, 303, 305, 310, 311, 336], "set_xticklabel": [48, 50, 112, 131, 157, 172, 186, 188, 279, 280, 287], "set_ylabel": [47, 48, 50, 67, 71, 87, 94, 99, 105, 106, 108, 112, 119, 126, 131, 135, 142, 145, 178, 186, 190, 200, 202, 206, 208, 210, 212, 214, 225, 242, 253, 262, 268, 270, 274, 279, 280, 282, 287, 293, 308, 309, 313, 317, 331, 346, 351, 354], "set_ylim": [48, 50, 68, 78, 94, 105, 119, 140, 152, 153, 178, 186, 193, 208, 210, 211, 242, 253, 272, 287, 293, 303, 308, 310, 311, 313, 318, 324, 331, 347], "set_yscal": [145, 210], "set_ytick": [44, 68, 79, 94, 98, 131, 153, 180, 181, 188, 202, 226, 253, 279, 303, 305, 310, 311, 336, 352], "set_yticklabel": [131, 172, 180, 181, 188, 279, 352], "set_zord": 123, "setdefault": [56, 922], "setdiff1d": 345, "seth": 1040, "sethdandridg": 1038, "setminu": 1020, "setosa": [127, 129, 277, 278, 372, 505], "setp": [48, 50, 279, 283], "settabl": 1004, "settingwithcopywarn": 186, "settl": 1004, "setup": [275, 277, 362, 373, 377, 381, 383, 1007], "setuptool": 1052, "seuclidean": [450, 457, 702, 781, 782, 783, 1007, 1042, 1045, 1046], "seuclideandist": 702, "seung": 412, "seven": [370, 997], "seventh": [512, 1016], "sever": [0, 44, 49, 52, 53, 63, 65, 68, 71, 73, 89, 90, 91, 95, 107, 138, 150, 153, 155, 158, 162, 165, 169, 174, 175, 182, 185, 190, 196, 200, 210, 214, 229, 230, 233, 234, 235, 241, 255, 263, 268, 273, 282, 288, 290, 304, 308, 320, 346, 350, 351, 362, 369, 370, 372, 375, 377, 380, 383, 387, 389, 404, 407, 408, 411, 413, 414, 415, 417, 447, 449, 464, 487, 500, 509, 510, 539, 556, 557, 560, 561, 564, 565, 566, 571, 590, 591, 593, 613, 648, 649, 655, 691, 692, 693, 694, 695, 696, 800, 801, 803, 806, 807, 817, 835, 836, 842, 843, 844, 845, 846, 866, 867, 874, 891, 915, 916, 917, 918, 936, 993, 996, 1001, 1004, 1005, 1007, 1012, 1014, 1018, 1020, 1021, 1022, 1023, 1025, 1027, 1028, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1047, 1050, 1051], "sevin": 1042, "sewook": 1044, "sex": [104, 165, 185, 187, 198, 200, 251, 322, 324, 372, 497, 1012], "sex_mal": 185, "seyedsaman": 1048, "sf": [165, 268, 319, 370, 416, 493, 604], "sfm": 165, "sfs_backward": 165, "sfs_forward": 165, "sfu": [407, 442], "sgd": [2, 47, 48, 51, 125, 127, 130, 137, 146, 147, 156, 172, 173, 182, 191, 194, 202, 209, 217, 224, 237, 244, 257, 276, 301, 304, 305, 320, 340, 341, 344, 348, 350, 355, 358, 364, 505, 513, 634, 652, 669, 670, 671, 674, 679, 680, 681, 682, 864, 865, 993, 1008, 1025, 1026, 1030, 1034, 1037, 1038, 1039, 1041, 1045, 1047], "sgdclassifi": [2, 26, 47, 48, 217, 218, 219, 220, 221, 222, 223, 242, 276, 326, 332, 341, 350, 358, 362, 364, 377, 381, 389, 405, 415, 641, 643, 644, 645, 649, 661, 669, 671, 907, 912, 996, 1000, 1005, 1018, 1019, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1047, 1048, 1049, 1050, 1051, 1052], "sgdoneclasssvm": [2, 224, 237, 320, 911, 1010, 1018, 1047, 1049, 1050, 1051, 1052, 1053], "sgdregressor": [2, 26, 50, 221, 362, 364, 387, 649, 652, 670, 674, 679, 682, 865, 908, 913, 1000, 1018, 1036, 1038, 1040, 1041, 1042, 1045, 1047, 1048, 1049, 1050, 1052], "sgi": 350, "sgkf": [411, 821], "sgm": 48, "sgml": [48, 362], "sh": [279, 383, 993], "sh_color": 234, "sh_err": 234, "sh_lle": 234, "sh_point": 234, "sh_tsne": 234, "sha256": [48, 53, 326, 492, 1049, 1053], "shack": [1044, 1045, 1046], "shade": [59, 87, 163, 291, 296, 335, 412], "shader": 403, "shadi": [1049, 1050], "shadow": [125, 129, 130, 233, 330, 345, 352, 415], "shafer": 103, "shagun": 1040, "shah": [1038, 1039, 1040, 1046, 1052], "shaharyar": 1052, "shahebaz": 1042, "shahriar": 1036, "shaikh": [0, 360, 365, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1052, 1053], "shail": 1046, "shakerimoff": 1048, "shalev": [669, 670, 1000, 1018], "shalil": 1042, "shall": 174, "shallow": [381, 414, 562, 563, 922], "shamsi": 1042, "shandeng123": 1048, "shane": [1043, 1046, 1049], "shanghai": [692, 696, 1001], "shangwu": [1042, 1043], "shankar": 1044, "shanmuga": 1040, "shanno": 1000, "shannon": [558, 565, 915, 917, 1001, 1020], "shantanu": 786, "shao": [1046, 1047, 1048], "shape": [2, 44, 45, 46, 48, 49, 50, 51, 53, 54, 56, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 77, 81, 82, 85, 86, 87, 88, 89, 92, 94, 95, 100, 103, 107, 108, 112, 121, 122, 124, 136, 141, 142, 143, 144, 147, 148, 149, 150, 153, 154, 161, 163, 170, 171, 173, 174, 175, 176, 180, 181, 182, 186, 187, 198, 200, 203, 210, 212, 217, 219, 222, 223, 224, 225, 226, 229, 231, 232, 233, 237, 240, 241, 242, 243, 244, 246, 247, 253, 255, 257, 258, 259, 266, 268, 270, 271, 274, 275, 277, 278, 288, 293, 294, 298, 301, 303, 305, 310, 311, 317, 319, 322, 323, 324, 330, 331, 333, 336, 339, 342, 343, 344, 347, 348, 350, 351, 357, 362, 368, 369, 370, 375, 377, 389, 404, 405, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 489, 490, 491, 493, 494, 495, 496, 498, 499, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 737, 738, 739, 740, 741, 742, 743, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 930, 935, 938, 939, 944, 949, 951, 953, 957, 958, 965, 967, 972, 974, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 989, 992, 994, 999, 1000, 1004, 1005, 1006, 1007, 1008, 1010, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1025, 1034, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1048, 1050, 1051, 1053], "shape_fit_": [909, 910, 911, 912, 913], "shape_img": 587, "sharad": 1042, "sharan": [1041, 1042], "share": [71, 116, 153, 185, 258, 350, 357, 358, 362, 363, 377, 383, 401, 407, 412, 415, 550, 671, 707, 711, 800, 801, 806, 807, 998, 1011, 1027, 1034, 1036, 1042, 1044, 1046, 1049], "shared_yax": 141, "sharedmem": 1042, "sharei": [44, 53, 71, 108, 119, 126, 131, 156, 178, 186, 203, 207, 210, 212, 218, 270, 279, 281, 282, 293, 309, 314, 345, 346, 351, 371], "sharex": [44, 47, 55, 71, 106, 119, 126, 156, 178, 186, 203, 207, 212, 270, 281, 282, 293, 331, 371], "sharma": [1038, 1040, 1042, 1043, 1045, 1046, 1048, 1051, 1052, 1053], "sharmadharmp": 1048, "sharon": [46, 370], "sharova": 1041, "sharp": [44, 186, 1011, 1014], "sharper": 729, "shashank": [1040, 1046], "shaun": 1035, "shawpan": 1040, "shaymernaturalint": 1048, "she": [375, 897, 898, 1044], "shea": [1042, 1043], "shebanov": [1042, 1043], "sheep": 1028, "sheer": [375, 1028], "sheerman": 1034, "sheet": 1036, "sheetscikit": 395, "shekhar": 1040, "shell": [376, 383, 387], "shellyfung": 1049, "shen": [1047, 1053], "sheng": 1044, "shengxiduan": 1040, "shenhanc78": 1042, "sheni": 1046, "shenk": 1042, "shenoi": 1041, "sherlock": [631, 994], "sheth": 1042, "shetti": 1047, "shevchenko": 1053, "shi": [407, 452, 462, 694], "shibata": 1044, "shiebler": 1040, "shield": 389, "shift": [2, 53, 72, 74, 80, 83, 98, 182, 192, 233, 258, 293, 306, 308, 343, 409, 413, 440, 448, 458, 461, 469, 513, 516, 692, 696, 853, 876, 1014, 1025, 1029, 1030, 1034, 1038, 1042], "shifted_gaussian": 257, "shifted_opposite_lof_scor": 853, "shih": [844, 1006], "shiki": 1045, "shilt": 1037, "shinehid": 1047, "shinitski": 1051, "shinnar": 1047, "shinsuk": 1049, "ship": [58, 155, 181, 355, 363, 373, 393, 415, 1000, 1034, 1043], "shiqiao": [0, 397, 1034, 1035], "shirsat": 1049, "shiva": [1049, 1050], "shivam": [1042, 1043, 1044], "shivamgargsya": [1041, 1045, 1047], "shivan": 1039, "shivram": 1042, "shiyu": 1043, "shleifer": [1040, 1041], "shmelkov": 1039, "shoaib": 1049, "shoemak": 1045, "shogo": [1049, 1050], "shooter23": [1046, 1047], "shop": 1028, "short": [45, 127, 144, 151, 202, 266, 305, 326, 350, 375, 383, 411, 415, 419, 1000, 1001, 1007, 1027, 1039, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "short_nam": 56, "shortcom": 1000, "shortcut": [383, 401, 417], "shorten": [375, 1019, 1047], "shorten_param": 269, "shorter": [44, 175, 256, 387, 407, 412, 450, 457, 564, 700, 1006, 1010, 1045], "shortest": [2, 75, 380, 384, 691, 957, 1001, 1047], "shortest_path": 1047, "shorthand": [92, 389, 408, 467, 562, 563, 868, 869, 1037], "shortli": 377, "shortlog": 379, "shortname_slic": 56, "shota": 1040, "should": [44, 45, 46, 48, 49, 53, 55, 56, 63, 65, 68, 73, 87, 133, 135, 138, 141, 144, 147, 150, 165, 180, 185, 190, 192, 193, 196, 203, 210, 228, 237, 242, 243, 244, 247, 262, 268, 271, 274, 275, 277, 282, 285, 288, 309, 310, 315, 326, 330, 339, 346, 351, 358, 362, 363, 364, 370, 373, 374, 375, 377, 379, 380, 382, 383, 384, 388, 389, 393, 398, 401, 402, 403, 405, 406, 407, 409, 411, 412, 414, 415, 416, 417, 418, 419, 421, 424, 430, 437, 440, 442, 443, 444, 445, 447, 449, 450, 452, 454, 457, 458, 459, 462, 463, 464, 465, 467, 474, 482, 483, 484, 485, 487, 497, 504, 509, 510, 517, 522, 524, 525, 528, 533, 534, 537, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 583, 584, 590, 591, 592, 593, 595, 596, 599, 604, 609, 610, 613, 614, 623, 630, 631, 632, 634, 635, 636, 638, 641, 642, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 687, 690, 692, 693, 694, 695, 696, 697, 698, 699, 704, 710, 712, 723, 730, 731, 742, 743, 745, 769, 774, 777, 781, 782, 783, 784, 785, 788, 791, 792, 795, 802, 804, 805, 810, 811, 812, 813, 820, 821, 822, 823, 825, 829, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 858, 864, 865, 867, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 886, 887, 888, 890, 894, 897, 898, 899, 900, 901, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 933, 937, 939, 942, 951, 956, 960, 964, 969, 972, 974, 977, 978, 979, 980, 981, 982, 983, 984, 992, 993, 994, 998, 999, 1000, 1001, 1005, 1007, 1009, 1010, 1011, 1014, 1017, 1018, 1019, 1020, 1024, 1027, 1028, 1030, 1031, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "shouldn": [254, 259, 375, 1053], "show": [2, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 170, 171, 172, 173, 174, 175, 177, 180, 181, 184, 185, 186, 187, 188, 190, 192, 193, 194, 195, 197, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 279, 280, 281, 282, 283, 285, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 324, 328, 329, 330, 331, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 354, 355, 356, 357, 363, 364, 371, 375, 381, 387, 388, 393, 394, 398, 404, 405, 406, 409, 411, 412, 413, 414, 416, 417, 438, 503, 560, 595, 596, 634, 635, 700, 701, 703, 704, 705, 716, 809, 826, 849, 867, 919, 920, 921, 993, 996, 998, 999, 1001, 1003, 1004, 1006, 1007, 1008, 1010, 1011, 1012, 1014, 1018, 1019, 1036, 1038, 1039, 1041, 1043, 1044, 1045, 1046, 1048, 1050, 1051, 1052, 1053], "show_top10": 370, "show_vers": [2, 362, 373, 375, 383, 393, 394, 1042], "show_weight": 920, "show_with_diff": 124, "showcas": [133, 136, 141, 144, 147, 148, 150, 167, 182, 377], "shown": [63, 91, 133, 137, 141, 147, 178, 184, 186, 196, 201, 208, 228, 235, 237, 242, 247, 255, 268, 271, 274, 277, 285, 293, 304, 305, 308, 309, 310, 326, 328, 346, 350, 351, 375, 380, 390, 405, 407, 408, 411, 412, 413, 415, 417, 438, 460, 635, 701, 703, 704, 705, 716, 803, 817, 919, 921, 1000, 1001, 1004, 1007, 1014, 1018, 1019, 1020, 1038, 1043, 1044, 1045, 1048], "shown_imag": 231, "shrankhla": 1049, "shreekant": 1053, "shreesha": [1050, 1051], "shreya": 1044, "shrink": [64, 114, 121, 148, 186, 196, 206, 208, 214, 230, 257, 281, 308, 346, 412, 560, 561, 679, 681, 854, 864, 865, 909, 910, 911, 912, 913, 1007, 1019], "shrink_threshold": [299, 854, 1007, 1034, 1046], "shrinkag": [2, 70, 109, 111, 114, 128, 149, 182, 299, 420, 469, 470, 473, 474, 475, 476, 477, 479, 480, 481, 540, 544, 550, 562, 563, 803, 854, 1000, 1014, 1025, 1026, 1030, 1034, 1038, 1039, 1041], "shrinkage_": [110, 111, 473, 475], "shrinkage_coeffici": 480, "shrinking_threshold": 1053, "shroff": [1052, 1053], "shrunk": [2, 110, 128, 308, 315, 323, 420, 473, 475, 476, 479, 480, 481, 550, 888, 998, 1018, 1029, 1030], "shrunk_cov": [420, 479, 481], "shrunk_cov_scor": 128, "shrunk_covari": [2, 409, 1051], "shrunkcovari": [2, 110, 128, 409, 469, 470, 473, 474, 475], "shrunken": [854, 1034], "shruti": 1053, "shu": [1035, 1038, 1042], "shuangchi": [1048, 1049], "shubernetskii": 1036, "shubh": 1045, "shubhal": 1051, "shubham": [1041, 1044, 1052], "shubhanshu": 1046, "shubhraneel": 1048, "shuckle16": 1040, "shuffl": [2, 50, 53, 55, 59, 60, 62, 65, 69, 94, 95, 121, 141, 142, 143, 150, 155, 181, 196, 207, 218, 219, 224, 237, 269, 273, 274, 281, 288, 315, 328, 329, 330, 331, 341, 350, 351, 358, 370, 384, 389, 402, 469, 474, 488, 489, 491, 493, 496, 498, 504, 512, 513, 514, 515, 516, 520, 523, 525, 532, 538, 540, 541, 547, 548, 554, 555, 556, 557, 565, 566, 568, 569, 604, 607, 609, 661, 662, 669, 670, 671, 675, 677, 679, 680, 681, 690, 803, 804, 805, 806, 807, 808, 809, 817, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 837, 864, 865, 888, 907, 908, 909, 912, 950, 951, 972, 974, 999, 1000, 1005, 1012, 1018, 1019, 1030, 1034, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1053], "shuffle_param": 346, "shuffled_arrai": 977, "shufflesplit": [2, 263, 270, 346, 411, 805, 811, 813, 823, 833, 1034, 1035, 1037, 1039, 1040], "shuhei": 1047, "shuhua": 1046, "shutil": [88, 105, 408], "shuttl": 351, "shuzh": 1044, "shwartz": [669, 670, 1000, 1018], "shwed": 1042, "shyam": 1047, "si": 103, "siam": [407, 411, 452, 460, 462, 536, 542], "siang": 1037, "siavash": 1047, "siavrez": 1048, "sibsp": [187, 322], "sid": 1041, "siddharth": [1041, 1045], "siddiqui": 1052, "side": [44, 65, 93, 147, 204, 214, 228, 232, 240, 262, 308, 343, 350, 358, 370, 387, 405, 408, 411, 412, 415, 424, 430, 516, 803, 817, 1000, 1001, 1004, 1006, 1019, 1043], "sidebar": 375, "sidhpura": 1049, "siebert": 1042, "sievert": 1044, "siftikha": 1042, "sig": 122, "sigh": 350, "sigkdd": [369, 370, 512, 679, 888, 1014, 1016], "sigma": [54, 81, 82, 88, 112, 128, 147, 266, 268, 404, 409, 412, 414, 617, 652, 998, 1000, 1002, 1006, 1009], "sigma2": [535, 542], "sigma_": [409, 647, 648, 1047, 1051], "sigma_0": [172, 173, 178, 417, 617], "sigma_0_bound": [178, 617], "sigma_i": [1006, 1014], "sigma_k": [412, 998], "sigmod": [407, 450, 457, 853, 1010], "sigmoid": [2, 62, 63, 64, 65, 367, 414, 437, 452, 536, 562, 623, 642, 646, 768, 777, 780, 864, 865, 909, 910, 911, 912, 913, 1009, 1019, 1030, 1047, 1051], "sigmoid_kernel": [2, 403, 768, 1002, 1053], "sign": [76, 111, 117, 122, 125, 137, 196, 258, 303, 346, 375, 407, 412, 415, 545, 584, 591, 608, 638, 639, 661, 662, 669, 671, 677, 678, 679, 680, 738, 745, 907, 911, 949, 951, 968, 1000, 1004, 1009, 1014, 1018, 1019, 1034, 1038, 1043, 1047, 1049, 1052], "signal": [2, 11, 54, 113, 121, 122, 123, 130, 145, 147, 169, 174, 175, 182, 191, 192, 197, 199, 200, 205, 206, 209, 211, 259, 281, 320, 407, 409, 415, 416, 417, 420, 475, 504, 522, 527, 532, 535, 538, 542, 546, 547, 628, 647, 648, 649, 650, 655, 656, 666, 667, 675, 687, 688, 689, 788, 824, 833, 881, 1000, 1004, 1021, 1025, 1028, 1029, 1030], "signatur": [244, 350, 351, 370, 488, 489, 558, 559, 565, 566, 596, 613, 614, 662, 676, 678, 714, 745, 809, 826, 829, 831, 834, 880, 944, 963, 993, 1041, 1047, 1051], "signif": [46, 996], "signifi": [407, 583, 814, 1009], "signific": [2, 44, 89, 141, 147, 160, 161, 163, 182, 214, 228, 260, 268, 287, 288, 350, 358, 369, 370, 387, 407, 410, 411, 414, 505, 533, 535, 550, 630, 661, 662, 669, 670, 671, 679, 680, 681, 822, 832, 907, 909, 910, 911, 912, 913, 993, 1003, 1004, 1007, 1025, 1034, 1036, 1037, 1038, 1042], "significantli": [44, 62, 63, 65, 73, 110, 111, 135, 141, 145, 147, 150, 165, 185, 186, 187, 210, 214, 218, 226, 228, 262, 268, 288, 318, 319, 351, 352, 358, 363, 379, 407, 412, 414, 415, 420, 469, 474, 479, 480, 539, 541, 548, 559, 566, 649, 650, 655, 656, 663, 664, 665, 666, 687, 695, 847, 848, 996, 1000, 1001, 1007, 1012, 1019, 1034, 1036, 1037, 1041, 1042, 1047, 1048, 1049], "sijaranamu": 1040, "silenc": [244, 322, 1053], "silent": [244, 415, 583, 863, 1014, 1039, 1040, 1042, 1043, 1047, 1048], "silhouett": [2, 59, 72, 74, 83, 91, 92, 182, 351, 447, 513, 795, 796, 1025, 1034, 1038], "silhouette_avg": 94, "silhouette_sampl": [2, 94, 796, 1038, 1040, 1042, 1050], "silhouette_scor": [2, 74, 83, 92, 94, 351, 375, 407, 1034, 1038, 1040, 1042, 1044, 1048], "silicon": 373, "silk": 1048, "sillanp\u00e4\u00e4": 1034, "silva": [405, 691, 1001, 1045, 1047, 1052], "silverman": [413, 852, 1049], "silverthorn": 1034, "silvestrin": 1051, "sim": 412, "sim4n6": 1049, "simd": [389, 1049], "similar": [2, 44, 45, 47, 52, 56, 59, 63, 64, 71, 73, 83, 85, 91, 94, 108, 117, 121, 125, 135, 147, 164, 169, 176, 184, 185, 186, 187, 196, 203, 210, 212, 224, 230, 232, 233, 234, 237, 243, 244, 259, 262, 265, 268, 271, 274, 275, 276, 285, 287, 288, 308, 320, 338, 343, 346, 351, 352, 358, 362, 367, 369, 371, 374, 375, 377, 380, 381, 383, 384, 387, 389, 401, 404, 405, 407, 410, 411, 412, 414, 415, 416, 417, 418, 440, 443, 444, 450, 452, 454, 455, 504, 509, 510, 537, 584, 591, 592, 593, 612, 613, 680, 695, 698, 706, 708, 718, 722, 728, 731, 732, 734, 737, 741, 743, 758, 763, 764, 789, 795, 796, 799, 800, 801, 829, 834, 879, 900, 903, 907, 908, 909, 910, 924, 934, 993, 996, 997, 999, 1000, 1001, 1003, 1005, 1007, 1008, 1010, 1011, 1014, 1016, 1017, 1018, 1019, 1020, 1023, 1024, 1030, 1034, 1038, 1039, 1040, 1042, 1046, 1047], "similarli": [44, 52, 73, 89, 119, 151, 186, 188, 196, 200, 210, 238, 247, 262, 268, 303, 308, 323, 325, 339, 358, 363, 371, 373, 377, 380, 387, 389, 401, 403, 404, 410, 411, 415, 732, 733, 741, 786, 787, 790, 825, 999, 1001, 1002, 1004, 1011, 1018, 1019, 1021, 1042, 1048, 1050, 1053], "simmon": 1028, "simon": [1000, 1028, 1037, 1038, 1047, 1048, 1049, 1050, 1053], "simona": [1045, 1046, 1047], "simonamaggio": [1045, 1046, 1047], "simoncw": 1044, "simonpl": 1039, "simpl": [2, 13, 38, 44, 65, 89, 104, 108, 110, 116, 117, 121, 141, 145, 176, 182, 186, 196, 211, 227, 250, 269, 285, 289, 292, 301, 321, 335, 350, 352, 355, 358, 373, 375, 377, 378, 379, 380, 382, 387, 388, 389, 390, 398, 404, 407, 408, 409, 411, 412, 413, 414, 415, 416, 421, 428, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 462, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 515, 523, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 583, 584, 585, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 691, 692, 693, 694, 695, 789, 791, 800, 801, 802, 803, 806, 807, 817, 825, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 891, 899, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 959, 996, 998, 999, 1000, 1001, 1003, 1004, 1007, 1014, 1016, 1018, 1020, 1024, 1025, 1028, 1031, 1034], "simplefilt": 401, "simpleimput": [2, 104, 155, 180, 181, 187, 239, 249, 251, 318, 321, 358, 389, 630, 631, 632, 994, 1014, 1042, 1043, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053], "simpleimputersimpleimput": [104, 155, 187, 239, 249, 318, 321], "simplepipelin": 244, "simpler": [148, 188, 203, 228, 317, 339, 362, 374, 407, 412, 1000, 1005, 1039], "simplest": [87, 411, 1001], "simplex": [64, 673, 800, 882], "simpli": [75, 117, 153, 169, 177, 234, 245, 247, 277, 301, 319, 320, 362, 370, 375, 377, 380, 387, 389, 409, 410, 411, 412, 414, 415, 485, 698, 765, 768, 874, 953, 996, 1004, 1005, 1006, 1007, 1018, 1041, 1042, 1043], "simplic": [44, 54, 68, 196, 207, 343, 350, 352, 389, 413, 1007, 1008, 1009, 1019], "simplif": [371, 374, 380, 1034, 1040], "simplifi": [44, 104, 198, 244, 339, 374, 376, 380, 407, 410, 516, 563, 866, 867, 1004, 1006, 1014], "simplist": [210, 415], "simul": [111, 123, 150, 185, 205, 245, 268, 1028], "simultan": [59, 89, 122, 203, 272, 276, 323, 346, 356, 367, 404, 407, 993, 1004, 1005, 1020, 1028, 1041], "sin": [44, 54, 58, 75, 122, 136, 146, 147, 152, 154, 160, 169, 175, 176, 178, 192, 193, 196, 205, 211, 216, 232, 243, 259, 300, 309, 318, 324, 345, 356, 417, 517, 618, 702, 767], "sin_transform": 44, "sina": 1047, "sinayev": 1036, "sinc": [0, 44, 45, 51, 53, 63, 71, 73, 83, 87, 89, 100, 103, 104, 105, 122, 144, 162, 165, 167, 169, 174, 185, 186, 188, 190, 195, 203, 210, 212, 214, 227, 238, 242, 243, 244, 255, 258, 262, 264, 268, 270, 271, 277, 278, 281, 282, 285, 287, 288, 290, 291, 314, 320, 321, 326, 333, 336, 339, 346, 350, 351, 352, 358, 363, 370, 373, 375, 376, 377, 379, 380, 383, 387, 388, 389, 393, 398, 401, 405, 407, 408, 409, 410, 411, 412, 414, 415, 417, 424, 427, 437, 442, 445, 446, 450, 453, 456, 469, 482, 483, 484, 485, 497, 537, 539, 541, 548, 550, 551, 552, 553, 554, 556, 558, 560, 562, 563, 564, 565, 568, 570, 590, 591, 593, 613, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 635, 636, 641, 654, 658, 661, 662, 669, 671, 676, 677, 678, 679, 682, 695, 710, 712, 738, 745, 781, 785, 792, 802, 803, 806, 807, 817, 825, 831, 832, 834, 835, 836, 837, 838, 842, 843, 844, 845, 846, 849, 854, 857, 864, 865, 867, 872, 897, 898, 902, 903, 904, 907, 909, 912, 915, 917, 931, 933, 934, 944, 951, 960, 993, 996, 997, 998, 1000, 1001, 1005, 1006, 1007, 1008, 1010, 1012, 1014, 1018, 1019, 1020, 1028, 1034, 1035, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "sinclert": 1042, "sind": 415, "sine": [2, 44, 169, 174, 175, 182, 205, 216, 252, 253, 254, 255, 257, 258, 356, 371, 618, 800, 801, 1003, 1020, 1025], "singer": [285, 669, 670, 738, 1000, 1004, 1018, 1019], "singh": [1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051], "singl": [2, 31, 32, 71, 75, 86, 87, 89, 92, 95, 96, 105, 123, 134, 135, 136, 143, 144, 154, 165, 169, 175, 180, 182, 186, 188, 190, 196, 207, 210, 212, 214, 248, 250, 258, 262, 264, 277, 285, 305, 321, 323, 339, 350, 351, 352, 355, 356, 358, 362, 363, 369, 370, 375, 380, 382, 383, 384, 387, 388, 389, 398, 405, 406, 408, 410, 411, 412, 414, 415, 416, 432, 437, 440, 441, 445, 446, 447, 449, 454, 464, 466, 467, 494, 495, 497, 507, 510, 535, 554, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 584, 594, 601, 602, 604, 608, 630, 635, 637, 646, 669, 670, 676, 679, 680, 681, 693, 695, 697, 713, 714, 724, 725, 726, 727, 728, 739, 740, 741, 744, 777, 788, 800, 801, 803, 806, 807, 817, 824, 825, 829, 830, 832, 833, 836, 844, 847, 848, 852, 864, 865, 866, 876, 877, 880, 881, 882, 887, 888, 902, 903, 915, 916, 917, 918, 927, 929, 967, 990, 993, 999, 1000, 1001, 1004, 1005, 1007, 1009, 1011, 1012, 1014, 1018, 1019, 1020, 1023, 1025, 1028, 1034, 1035, 1036, 1038, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "single_output": [377, 927], "single_prior": 178, "single_source_shortest_path_length": [2, 384], "singleton": [363, 811, 936, 1047, 1050], "singular": [2, 121, 384, 404, 407, 410, 451, 453, 482, 483, 484, 485, 522, 525, 535, 539, 541, 542, 545, 548, 550, 551, 660, 675, 676, 677, 690, 951, 1000, 1001, 1003, 1029, 1030, 1040, 1041, 1052], "singular_": 660, "singular_values_": [535, 542, 545, 1041], "sinha": [1042, 1051, 1052], "sinhrk": [1038, 1039], "sink": [644, 996], "sinoisoid": 147, "sinusoid": [122, 136, 147, 196, 243, 648, 997], "sio": 401, "siola": [1049, 1050], "sip\u0151cz": [1044, 1045, 1046, 1050, 1052, 1053], "siqi": 1048, "siqueira": 1044, "sir": 372, "sister": 1023, "site": [322, 373, 375, 383, 393, 414, 488, 489, 490, 491, 493, 494, 495, 496, 498, 499, 1028, 1042], "situat": [63, 80, 91, 105, 184, 185, 216, 237, 271, 375, 383, 401, 409, 411, 412, 414, 468, 529, 535, 584, 880, 883, 895, 905, 998, 1000, 1006, 1007, 1017, 1020, 1042], "situp": 372, "sivamani": 1044, "sivaprasad": [1037, 1038], "six": [165, 211, 231, 312, 372, 1043], "sixteenth": 1016, "sixth": 370, "size": [38, 43, 44, 45, 46, 48, 51, 52, 53, 54, 62, 65, 68, 70, 73, 75, 76, 78, 80, 81, 82, 86, 88, 89, 91, 92, 94, 95, 96, 100, 101, 106, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 128, 130, 138, 146, 147, 150, 151, 152, 161, 169, 171, 172, 175, 176, 182, 184, 186, 187, 192, 193, 194, 195, 197, 201, 206, 208, 211, 212, 213, 216, 223, 224, 230, 235, 237, 240, 241, 242, 243, 244, 246, 247, 255, 261, 264, 266, 268, 270, 271, 273, 274, 275, 285, 294, 295, 296, 303, 306, 309, 310, 311, 312, 315, 318, 321, 323, 324, 326, 329, 333, 335, 337, 338, 339, 346, 348, 350, 351, 352, 354, 362, 363, 364, 370, 371, 375, 380, 384, 387, 388, 389, 393, 398, 404, 405, 407, 409, 411, 412, 415, 417, 418, 420, 444, 445, 446, 448, 449, 450, 457, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 494, 495, 496, 516, 528, 535, 537, 539, 541, 548, 558, 559, 560, 561, 562, 563, 565, 566, 585, 589, 590, 596, 635, 636, 646, 660, 669, 670, 682, 686, 695, 698, 708, 722, 741, 743, 746, 784, 796, 805, 808, 809, 813, 820, 823, 824, 825, 828, 831, 833, 842, 843, 844, 846, 849, 850, 851, 852, 853, 855, 857, 858, 859, 864, 865, 882, 884, 896, 901, 905, 909, 910, 911, 912, 913, 915, 916, 917, 918, 921, 950, 954, 955, 966, 967, 969, 972, 978, 994, 996, 997, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1011, 1014, 1016, 1018, 1019, 1020, 1027, 1028, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1049, 1050, 1052, 1053], "size_cluster_i": 94, "size_mb": 350, "sizeabl": [805, 820, 823], "sk": 551, "skaft": 1048, "skeleton": 1037, "sketch": [2, 24, 190, 364, 367, 384, 642, 643, 644, 968, 1030, 1046], "skew": [2, 49, 147, 213, 241, 247, 308, 323, 367, 405, 411, 642, 643, 644, 645, 883, 895, 1000, 1014, 1030, 1037, 1041, 1050], "skewed": [645, 1041], "skewedchi2sampl": [2, 641, 642, 643, 644, 996, 1041, 1048, 1049], "skf": [255, 411, 822], "skfold": 331, "skforecast": 1023, "skill": 1004, "skimag": [81, 82, 369], "skip": [326, 363, 375, 384, 403, 415, 468, 649, 650, 655, 663, 664, 665, 674, 684, 905, 926, 944, 945, 1038, 1041, 1044, 1046, 1048, 1050, 1053], "skip_check_arrai": 992, "skip_complet": 630, "skip_comput": 1044, "skip_parameter_valid": [468, 905, 1050], "skipper": [1037, 1039, 1040], "skiptest": 945, "skiptestwarn": 944, "skl2onnx": 401, "sklear": 376, "sklearn": [2, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 362, 363, 364, 368, 369, 370, 371, 373, 374, 375, 376, 377, 379, 380, 381, 383, 384, 387, 388, 389, 392, 393, 394, 398, 401, 403, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1023, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041], "sklearn2pmml": 1023, "sklearn_api": 0, "sklearn_assume_finit": 362, "sklearn_cache_": 317, "sklearn_enable_debug_cython_direct": 376, "sklearn_fail_no_openmp": 373, "sklearn_graph_cache_": 290, "sklearn_is_fit": [133, 1025], "sklearn_run_float32_test": 375, "sklearn_site_joblib": 1042, "sklearn_warning_as_error": 363, "sklearnex": 393, "skop": [1023, 1030], "skorch": 1023, "sktime": [53, 1023], "sl": 210, "slack": 1018, "slai": 350, "slama": [1044, 1046], "slep": [375, 389], "slep000": 390, "slep007": 377, "slep009": [1045, 1047, 1048], "slep010": [377, 1045], "slep018": [251, 377, 1049], "slep020": 390, "slice": [2, 44, 53, 56, 143, 150, 219, 232, 242, 296, 299, 320, 321, 335, 370, 376, 384, 408, 464, 467, 494, 495, 509, 547, 642, 777, 781, 784, 924, 929, 954, 955, 974, 1046, 1048, 1052], "slice_": [494, 495, 1049], "sliceabl": 958, "slide": [269, 647, 1000, 1022], "slight": [144, 215, 319, 401, 414, 449, 1044], "slightli": [44, 63, 65, 98, 114, 138, 141, 144, 147, 151, 155, 165, 169, 170, 171, 187, 192, 210, 228, 233, 235, 244, 247, 276, 282, 288, 317, 336, 352, 374, 375, 405, 407, 414, 415, 417, 419, 446, 590, 591, 593, 641, 661, 806, 807, 907, 909, 912, 950, 951, 993, 1000, 1014, 1018, 1019, 1020, 1043, 1047, 1048, 1050, 1052, 1053], "slishak": 1048, "sloan": 0, "slogdet": 949, "slope": [186, 208, 212, 227, 407, 491, 726, 751, 1002, 1004], "sloppili": 415, "sloth": [51, 301, 370, 499], "slow": [290, 308, 350, 362, 369, 373, 375, 412, 415, 447, 702, 881, 882, 886, 909, 912, 951, 1001, 1007, 1041], "slower": [105, 124, 141, 144, 180, 243, 277, 352, 389, 414, 415, 416, 446, 451, 453, 539, 541, 548, 556, 557, 558, 559, 564, 565, 566, 567, 590, 591, 593, 634, 635, 636, 646, 662, 675, 677, 690, 695, 707, 835, 839, 840, 997, 1001, 1002, 1003, 1005, 1007, 1020, 1038, 1045], "slowest": [144, 950, 951], "slowli": [387, 389, 545, 951], "slug": 103, "smacof": [2, 693, 1049], "small": [38, 39, 42, 45, 51, 53, 60, 65, 75, 83, 87, 89, 103, 110, 114, 117, 126, 136, 138, 144, 146, 147, 174, 176, 185, 186, 193, 197, 201, 202, 211, 214, 216, 225, 227, 228, 255, 262, 268, 275, 280, 282, 290, 301, 304, 306, 308, 310, 312, 319, 326, 328, 333, 339, 344, 346, 350, 351, 364, 368, 370, 372, 375, 378, 384, 387, 389, 401, 404, 405, 407, 409, 410, 411, 412, 413, 414, 415, 416, 420, 441, 443, 445, 446, 447, 449, 458, 459, 463, 475, 497, 499, 539, 541, 542, 548, 556, 557, 558, 562, 563, 564, 565, 584, 591, 592, 604, 609, 610, 653, 657, 658, 659, 661, 662, 682, 685, 686, 806, 807, 821, 832, 835, 864, 865, 872, 900, 909, 912, 951, 993, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1014, 1016, 1017, 1020, 1023, 1024, 1028, 1034, 1035, 1037, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053], "smaller": [2, 38, 48, 62, 76, 81, 89, 114, 135, 150, 165, 174, 175, 180, 199, 200, 202, 214, 241, 285, 294, 295, 303, 308, 325, 339, 346, 351, 375, 404, 407, 409, 411, 412, 414, 416, 439, 440, 446, 450, 454, 456, 515, 535, 536, 558, 559, 560, 561, 562, 563, 565, 566, 595, 613, 622, 636, 649, 650, 652, 653, 655, 656, 657, 659, 661, 662, 663, 664, 665, 666, 675, 677, 685, 686, 695, 712, 800, 806, 807, 853, 856, 880, 881, 899, 900, 907, 915, 916, 917, 918, 951, 998, 1000, 1001, 1003, 1004, 1005, 1007, 1008, 1010, 1014, 1016, 1018, 1019, 1020, 1024, 1042, 1047, 1051], "smallest": [112, 113, 210, 288, 325, 354, 370, 407, 409, 416, 528, 542, 633, 657, 658, 659, 685, 686, 693, 697, 698, 803, 806, 807, 817, 822, 877, 930, 1020, 1047], "smallest_ab": 325, "smallest_coef": [114, 528], "smari": [1043, 1044, 1045], "smart": [244, 443, 459, 460, 592], "smartphon": 1028, "smedbergm": 1040, "smedemark": 1044, "smile": [108, 370, 1048], "sminchisescu": [645, 996], "smirnov": 1046, "smith": [1040, 1041, 1042, 1043, 1044, 1046], "sml": [863, 1009], "smo": [907, 908], "smola": [412, 415, 536, 873, 1014, 1019], "smolskii": 1049, "smooth": [44, 81, 82, 88, 165, 174, 204, 211, 226, 314, 339, 372, 390, 407, 413, 414, 417, 448, 449, 538, 539, 540, 547, 558, 559, 560, 561, 565, 566, 567, 592, 593, 622, 625, 679, 842, 843, 844, 846, 884, 888, 896, 915, 916, 917, 918, 1000, 1006, 1014, 1018, 1019, 1020], "smooth_idf": [415, 592, 593], "smoothened_coin": [81, 82], "smoother": [44, 45, 147, 186, 305, 413], "smoothli": 369, "smt": 1050, "smtp": [370, 493], "smujjiga": 1044, "sn": [73, 127, 136, 150, 184, 185, 192, 196, 258, 268], "snake": [321, 323, 584, 888, 1014], "snapshot": [401, 560, 561, 1024], "sne": [52, 182, 229, 230, 231, 232, 234, 288, 515, 526, 695, 1025, 1029, 1030], "snippet": [133, 358, 375, 380, 383, 387, 403, 414, 415, 416, 994, 1014, 1027, 1047], "snowhit": 1045, "snr": 88, "snuderl": 1038, "sny": 52, "snyder": [695, 1001], "so": [31, 38, 44, 49, 52, 53, 56, 65, 78, 89, 90, 95, 99, 113, 141, 143, 144, 145, 146, 150, 154, 169, 174, 185, 187, 190, 193, 210, 211, 237, 244, 247, 262, 268, 281, 285, 288, 294, 295, 298, 304, 305, 309, 314, 315, 318, 331, 339, 350, 352, 357, 358, 362, 363, 364, 369, 370, 373, 374, 375, 377, 379, 380, 381, 383, 384, 389, 398, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 420, 421, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 456, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 497, 509, 510, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 583, 584, 585, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 609, 610, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 691, 692, 693, 694, 695, 698, 708, 711, 719, 729, 759, 781, 791, 800, 801, 802, 803, 806, 807, 809, 810, 817, 825, 826, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 891, 897, 899, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 951, 969, 978, 993, 994, 996, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1014, 1016, 1017, 1018, 1019, 1023, 1024, 1028, 1034, 1036, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1050, 1051], "soar": 1049, "sobkevich": 1046, "sobolev": 1038, "soc": [58, 370], "socastro": [1044, 1050], "socg2006": 447, "social": [185, 379, 390, 407, 1028], "societi": [165, 372, 407, 409, 469, 474, 542, 630, 883, 895, 1000, 1018], "sodhani": 1040, "soft": [2, 130, 156, 157, 375, 389, 570, 571, 903, 911, 1018, 1028, 1039], "softmax": [414, 562, 661, 662, 1000, 1007, 1008], "softw": 1000, "softwar": [0, 165, 362, 372, 375, 383, 387, 389, 401, 415, 630, 638, 661, 994, 1028], "soil_typ": 247, "sokalmichen": [450, 457, 702, 781, 782, 783, 1007], "sokalmichenerdist": 702, "sokalsneath": [450, 457, 702, 781, 782, 783, 1007], "sokalsneathdist": 702, "sok\u00f3\u0142": [1051, 1052], "solar": 351, "sole": [101, 375, 387, 407], "soledad": 1046, "soler": [0, 397], "solid": [51, 68, 70, 146, 172, 222, 223, 237, 247, 301, 310, 1028], "solntz": 350, "solosil": 1047, "solut": [81, 192, 196, 200, 202, 215, 224, 237, 243, 281, 320, 339, 373, 389, 401, 404, 406, 407, 409, 411, 412, 415, 416, 449, 451, 453, 532, 538, 539, 540, 541, 543, 544, 546, 547, 548, 549, 550, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 613, 649, 651, 653, 655, 657, 658, 659, 661, 663, 665, 667, 668, 669, 670, 671, 672, 675, 677, 679, 680, 681, 682, 683, 685, 686, 688, 689, 690, 800, 801, 817, 856, 864, 865, 997, 998, 1000, 1001, 1003, 1008, 1010, 1018, 1019, 1022, 1028, 1034, 1037, 1047, 1048, 1049], "solutu": 1042, "solutusimmensu": 1042, "solv": [2, 45, 46, 100, 169, 200, 242, 268, 287, 374, 375, 376, 377, 380, 387, 395, 407, 409, 411, 412, 417, 447, 453, 462, 478, 532, 538, 539, 540, 544, 546, 547, 548, 549, 638, 640, 649, 655, 657, 658, 667, 668, 673, 675, 677, 680, 688, 689, 690, 722, 837, 907, 908, 911, 951, 995, 998, 1000, 1001, 1004, 1005, 1018, 1019, 1020, 1022, 1023, 1028, 1040, 1044, 1047], "solvabl": 407, "solver": [55, 67, 70, 71, 81, 100, 182, 191, 200, 202, 204, 210, 218, 225, 226, 228, 303, 304, 305, 306, 315, 324, 325, 350, 381, 387, 389, 393, 403, 407, 419, 452, 462, 471, 472, 478, 503, 534, 536, 541, 542, 545, 548, 550, 649, 650, 651, 655, 656, 661, 662, 663, 664, 665, 666, 669, 671, 672, 673, 675, 677, 679, 683, 684, 687, 690, 691, 692, 694, 696, 698, 791, 817, 833, 838, 841, 864, 865, 909, 910, 911, 912, 913, 998, 1001, 1004, 1005, 1008, 1018, 1019, 1025, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "solver_": [675, 677], "solver_opt": 673, "somani": 1046, "some": [0, 43, 44, 45, 48, 49, 53, 58, 62, 63, 65, 73, 80, 84, 87, 89, 90, 92, 96, 101, 104, 107, 110, 112, 113, 117, 121, 136, 137, 141, 144, 147, 148, 150, 151, 152, 155, 156, 161, 167, 169, 171, 174, 175, 176, 177, 178, 180, 181, 182, 185, 186, 187, 188, 190, 192, 194, 196, 198, 199, 200, 201, 203, 205, 206, 210, 211, 214, 218, 219, 224, 227, 228, 230, 232, 237, 241, 244, 247, 254, 255, 256, 261, 262, 263, 268, 269, 270, 271, 274, 276, 282, 285, 287, 291, 294, 299, 304, 305, 308, 313, 318, 319, 320, 321, 322, 323, 324, 325, 326, 335, 336, 338, 339, 346, 348, 350, 351, 352, 357, 358, 362, 363, 364, 368, 369, 370, 372, 373, 375, 376, 377, 379, 380, 381, 382, 383, 384, 387, 388, 389, 393, 398, 401, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 430, 437, 443, 444, 447, 449, 451, 453, 459, 463, 465, 468, 482, 483, 484, 497, 500, 509, 510, 516, 524, 525, 534, 535, 537, 542, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 575, 590, 592, 606, 608, 611, 613, 614, 635, 636, 638, 642, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 692, 693, 695, 696, 700, 701, 703, 704, 705, 710, 711, 718, 723, 729, 730, 741, 742, 743, 749, 757, 759, 760, 766, 785, 787, 790, 791, 792, 797, 800, 802, 804, 805, 810, 812, 821, 822, 825, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 852, 854, 857, 858, 864, 865, 867, 868, 870, 872, 873, 874, 879, 886, 887, 902, 903, 905, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 933, 934, 960, 993, 994, 996, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1014, 1017, 1018, 1019, 1020, 1022, 1023, 1024, 1027, 1028, 1031, 1034, 1035, 1036, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "some_funct": [375, 940], "some_integ": 411, "some_iter": 375, "some_param": 375, "somebodi": 390, "someestim": 374, "somehow": 186, "someon": [375, 379, 389, 1034], "someth": [185, 231, 285, 350, 375, 378, 379, 383, 415, 923, 925, 1004, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "sometim": [105, 155, 184, 262, 268, 305, 351, 358, 363, 364, 375, 377, 381, 388, 389, 407, 409, 412, 414, 415, 449, 535, 536, 539, 541, 542, 872, 873, 874, 922, 999, 1000, 1001, 1004, 1009, 1014, 1015, 1019, 1031, 1035, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1050], "somewhat": [346, 358, 364, 375, 412, 414, 909, 912, 1000, 1019, 1020], "somewher": [381, 1004], "sommer": 1052, "somya": 1042, "son": [372, 994], "song": 1001, "soni": [52, 1044, 1046], "sonni": 1039, "sonniv": [1049, 1050], "sonoiya": 1044, "sonoma": 314, "soon": [113, 389, 1053], "sooner": 1051, "sophist": [994, 1006], "sorbaro": 1039, "sorensen": 412, "soriano": 1043, "sornarajah": 1039, "sorri": 1042, "sorro": 1043, "sorski": [1048, 1049], "sort": [2, 44, 48, 50, 52, 59, 62, 94, 103, 106, 133, 138, 144, 147, 154, 165, 174, 192, 196, 210, 211, 228, 246, 268, 269, 272, 283, 300, 345, 350, 356, 375, 379, 383, 384, 389, 411, 414, 415, 417, 535, 542, 556, 567, 583, 596, 613, 620, 700, 715, 721, 732, 733, 741, 757, 786, 787, 790, 792, 803, 830, 842, 843, 844, 845, 846, 847, 848, 855, 857, 858, 859, 862, 872, 878, 880, 881, 884, 886, 888, 896, 909, 912, 951, 957, 1000, 1007, 1010, 1014, 1028, 1034, 1038, 1044, 1045, 1046, 1048, 1049, 1052], "sort_graph_by_row_valu": [2, 384, 1049], "sort_index": 285, "sort_result": [847, 848, 855, 857, 858, 859, 1046], "sort_valu": [104, 187, 188, 251, 258, 268, 279, 314, 315], "sorted_idx": [148, 317], "sorted_importances_idx": 187, "sortofamudkip": [1049, 1050], "sought": 784, "soumirai": 1044, "sound": [165, 358], "sounder": 1040, "sourav": [1041, 1044], "sourc": [0, 2, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 184, 185, 186, 187, 188, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 358, 369, 372, 374, 375, 376, 378, 379, 381, 383, 384, 387, 388, 393, 401, 404, 408, 412, 414, 415, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 969, 970, 971, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 987, 988, 989, 990, 991, 992, 1001, 1014, 1020, 1023, 1025, 1028, 1044, 1048, 1052, 1053], "south": [51, 150, 185, 301, 370, 413], "south_y": 185, "sp": [44, 185, 324, 994], "sp_version": 673, "space": [2, 38, 44, 48, 50, 58, 68, 81, 87, 91, 92, 94, 95, 97, 99, 103, 104, 107, 117, 121, 123, 127, 129, 131, 140, 143, 147, 153, 162, 165, 169, 175, 190, 196, 211, 230, 231, 232, 234, 241, 242, 243, 247, 248, 254, 259, 276, 279, 280, 288, 297, 298, 310, 319, 343, 350, 351, 352, 357, 358, 362, 367, 370, 371, 372, 375, 382, 387, 388, 389, 404, 407, 410, 412, 413, 414, 415, 417, 443, 447, 448, 449, 452, 462, 464, 465, 466, 467, 482, 483, 484, 488, 499, 533, 535, 536, 539, 540, 541, 542, 544, 545, 550, 574, 584, 590, 591, 593, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 635, 636, 641, 643, 644, 645, 646, 691, 692, 693, 695, 696, 697, 699, 702, 803, 806, 807, 809, 817, 826, 837, 847, 848, 855, 856, 857, 858, 867, 872, 873, 879, 884, 899, 900, 901, 920, 955, 996, 997, 998, 999, 1000, 1002, 1004, 1005, 1007, 1008, 1009, 1010, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1023, 1024, 1029, 1030, 1034, 1035, 1037, 1042, 1043, 1044, 1048, 1049, 1050], "spacek": 1039, "spain": 314, "spam": [583, 712, 744, 842, 1004, 1006, 1028], "span": [53, 89, 110, 147, 242, 262, 265, 370, 407, 415, 550, 639, 803, 806, 1004], "spanish": 1023, "spannbauer": 1046, "sparciti": 351, "spare": [369, 677, 678], "spark": [370, 1024], "sparrai": 1051, "spars": [2, 26, 46, 47, 48, 52, 54, 56, 58, 67, 75, 76, 88, 89, 91, 103, 109, 110, 111, 120, 122, 140, 153, 182, 191, 192, 199, 200, 203, 205, 206, 209, 226, 241, 243, 269, 275, 281, 288, 306, 318, 322, 325, 332, 349, 352, 357, 362, 367, 369, 370, 371, 375, 377, 378, 379, 380, 387, 388, 389, 401, 407, 408, 414, 415, 417, 418, 422, 429, 438, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 457, 459, 460, 462, 463, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 487, 488, 489, 497, 498, 504, 509, 524, 525, 527, 528, 529, 530, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 554, 555, 556, 557, 558, 559, 560, 561, 564, 565, 566, 567, 568, 569, 570, 571, 583, 584, 587, 588, 590, 591, 592, 593, 595, 596, 605, 606, 607, 608, 609, 610, 611, 632, 633, 634, 636, 641, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 696, 698, 699, 700, 701, 703, 704, 705, 706, 715, 716, 717, 732, 733, 734, 737, 741, 742, 743, 757, 758, 763, 764, 766, 767, 769, 770, 771, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 790, 795, 796, 799, 802, 803, 806, 807, 817, 824, 825, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 849, 850, 851, 853, 854, 855, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 870, 871, 872, 874, 876, 877, 878, 879, 880, 882, 884, 885, 886, 887, 889, 890, 891, 892, 894, 896, 897, 898, 899, 900, 901, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 924, 929, 931, 932, 933, 934, 939, 948, 951, 952, 955, 957, 958, 966, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 989, 992, 994, 997, 1000, 1001, 1002, 1004, 1005, 1007, 1017, 1019, 1020, 1025, 1026, 1029, 1030, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053], "sparse_cg": [350, 675, 677, 690, 1000, 1035, 1041, 1043, 1044, 1048, 1050], "sparse_coef_": [649, 655, 663, 665, 1034], "sparse_encod": [2, 543, 653, 654, 655, 656, 657, 658, 659, 666, 667, 668, 685, 686, 687, 688, 689, 1034, 1041, 1042, 1044, 1048], "sparse_encode_parallel": 1034, "sparse_format": [528, 1051], "sparse_func": [1040, 1046], "sparse_input_": 874, "sparse_lasso": 197, "sparse_output": [44, 144, 251, 314, 321, 324, 567, 874, 878, 880, 886, 891, 1014, 1049, 1050], "sparse_output_": [464, 552], "sparse_symmetric_arrai": 989, "sparse_threshold": [186, 464, 467, 1042], "sparsearrai": 1045, "sparsecod": [2, 130, 412, 532, 538, 541, 549, 1041, 1042, 1044, 1046, 1048], "sparsecodingmixin": 1034, "sparsefunc": [2, 384, 978, 979, 980, 981, 982, 983, 984, 1047], "sparsefuncs_fast": [2, 384, 985, 986], "sparsepca": [2, 121, 532, 534, 535, 536, 538, 540, 541, 542, 543, 546, 547, 1034, 1041, 1042, 1044, 1045, 1047, 1048, 1049, 1052], "sparser": [89, 192, 202, 281, 412, 471, 478, 540, 544, 1000, 1007, 1018], "sparserandomproject": [2, 231, 241, 899, 1016, 1035, 1040, 1048, 1050, 1051], "sparsetool": 1041, "sparsifi": [47, 196, 362, 661, 662, 669, 670, 671, 679, 680, 681, 907, 987, 1036], "sparsiti": [2, 54, 67, 114, 182, 191, 196, 199, 204, 221, 225, 226, 243, 346, 351, 362, 389, 409, 412, 414, 416, 503, 528, 532, 538, 539, 540, 541, 544, 546, 547, 548, 649, 655, 661, 679, 681, 724, 726, 727, 876, 882, 887, 892, 997, 1000, 1007, 1014, 1025, 1036], "sparsity_en_lr": 202, "sparsity_l1_lr": 202, "sparsity_l2_lr": 202, "sparsity_ratio": 362, "spatial": [82, 83, 89, 188, 196, 227, 305, 370, 389, 407, 418, 444, 446, 450, 452, 457, 682, 695, 763, 766, 781, 782, 783, 784, 795, 796, 847, 848, 849, 850, 851, 852, 853, 855, 857, 858, 859, 860, 861, 1000, 1007, 1014, 1036, 1040, 1047, 1050], "spawn": [322, 362, 387, 803, 817, 828, 829, 830, 1045], "spdx": [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 184, 185, 186, 187, 188, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 317, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357], "speak": [351, 362, 375, 1018], "spearman": [188, 638, 639, 995], "spearmanr": 188, "spec": [1049, 1050], "speci": [2, 43, 127, 182, 247, 289, 350, 368, 413, 499, 709, 792, 852, 911, 922, 1004, 1010, 1025, 1030, 1034], "special": [146, 185, 201, 228, 285, 298, 314, 339, 369, 371, 377, 381, 387, 389, 407, 410, 412, 464, 467, 554, 556, 560, 828, 919, 993, 998, 1000, 1002, 1003, 1004, 1005, 1007, 1020, 1041, 1044, 1046, 1048, 1053], "special_charact": [919, 1020], "species_nam": [51, 301], "specif": [2, 44, 51, 52, 59, 65, 71, 80, 89, 96, 99, 103, 105, 141, 150, 155, 174, 177, 182, 185, 186, 190, 214, 228, 262, 263, 268, 285, 308, 317, 318, 322, 325, 326, 343, 350, 351, 352, 358, 362, 363, 370, 375, 377, 378, 380, 381, 383, 387, 389, 393, 401, 403, 407, 408, 411, 412, 414, 415, 416, 417, 431, 497, 504, 535, 552, 558, 565, 568, 569, 570, 571, 575, 590, 593, 595, 615, 616, 617, 618, 620, 621, 622, 623, 625, 626, 628, 643, 646, 649, 650, 655, 661, 675, 690, 700, 702, 715, 716, 803, 804, 805, 810, 811, 812, 817, 830, 843, 924, 942, 944, 945, 946, 966, 979, 980, 981, 998, 1000, 1001, 1003, 1004, 1006, 1007, 1009, 1011, 1012, 1014, 1018, 1020, 1021, 1022, 1024, 1027, 1034, 1038, 1042, 1043, 1044, 1045, 1048, 1049, 1051], "specifi": [2, 44, 59, 65, 89, 121, 144, 145, 150, 170, 173, 175, 176, 177, 200, 211, 218, 253, 262, 276, 326, 362, 363, 369, 375, 383, 384, 388, 389, 398, 401, 405, 407, 408, 411, 412, 414, 416, 417, 419, 421, 437, 441, 445, 450, 452, 463, 464, 467, 469, 470, 472, 473, 474, 475, 476, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 504, 516, 528, 532, 534, 538, 539, 541, 542, 547, 548, 553, 558, 560, 561, 562, 563, 565, 568, 569, 585, 586, 595, 596, 599, 604, 613, 614, 623, 634, 635, 636, 641, 646, 649, 650, 651, 654, 655, 656, 658, 659, 661, 662, 663, 664, 665, 666, 668, 671, 672, 675, 676, 677, 678, 679, 680, 683, 684, 685, 686, 687, 690, 694, 701, 703, 705, 712, 714, 732, 733, 741, 745, 757, 774, 782, 783, 786, 787, 790, 803, 806, 807, 809, 810, 812, 816, 817, 820, 825, 826, 827, 828, 829, 830, 831, 832, 834, 838, 841, 842, 843, 845, 846, 847, 848, 852, 857, 880, 881, 882, 885, 886, 888, 903, 907, 908, 909, 910, 911, 912, 913, 914, 915, 917, 946, 953, 987, 994, 1000, 1001, 1003, 1004, 1007, 1011, 1012, 1014, 1017, 1018, 1019, 1034, 1040, 1041, 1042, 1043, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053], "spector": 411, "spectral": [2, 54, 57, 72, 80, 81, 83, 89, 103, 182, 231, 232, 330, 332, 350, 351, 352, 375, 415, 449, 451, 452, 453, 462, 469, 470, 471, 472, 473, 474, 475, 476, 488, 512, 514, 593, 691, 692, 693, 694, 695, 698, 722, 798, 1007, 1017, 1025, 1029, 1030, 1034, 1035], "spectral_clust": [2, 81, 100, 1042, 1044, 1046, 1047, 1048, 1049, 1051], "spectral_embed": [2, 389, 1001, 1035, 1038, 1040, 1042, 1044, 1047, 1048, 1049, 1051], "spectralbiclust": [2, 404, 453, 1036, 1040, 1041, 1045], "spectralclust": [2, 80, 321, 407, 440, 1007, 1034, 1035, 1044, 1046, 1047, 1048, 1049, 1050, 1051], "spectralcoclust": [2, 58, 60, 404, 451, 1036, 1041, 1045], "spectralembed": [2, 86, 230, 231, 232, 691, 692, 693, 695, 1001, 1035, 1040, 1044, 1048, 1049, 1051], "spectrum": [106, 525, 545, 698, 951, 1028, 1042], "speech": [415, 1004], "speed": [81, 82, 91, 103, 124, 133, 141, 181, 186, 197, 200, 204, 247, 288, 319, 329, 350, 352, 364, 375, 378, 384, 387, 389, 403, 405, 407, 412, 414, 415, 418, 443, 444, 447, 448, 449, 450, 452, 457, 459, 460, 461, 462, 532, 533, 613, 630, 635, 636, 637, 642, 649, 650, 653, 654, 655, 656, 657, 658, 659, 663, 664, 665, 666, 667, 684, 687, 695, 800, 801, 809, 831, 847, 848, 849, 850, 851, 853, 855, 857, 858, 859, 882, 951, 993, 996, 1001, 1003, 1005, 1018, 1028, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "speedi": 362, "speedup": [324, 362, 412, 414, 653, 657, 660, 1034, 1035, 1036, 1037, 1049, 1053], "speer": 1036, "spell": 415, "spend": 415, "spent": [288, 314, 376, 381, 831, 1049], "sperret6": 1052, "sphere": [135, 182, 229, 230, 233, 234, 235, 288, 351, 413, 520, 591, 691, 692, 693, 694, 695, 767, 936, 998, 1002, 1007, 1025], "sphere_data": 232, "spheric": [71, 91, 116, 151, 232, 255, 257, 258, 301, 371, 767, 800, 801, 1000, 1003, 1007], "sphinx": [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 184, 185, 186, 187, 188, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 363, 379, 389, 393, 400, 1034, 1041], "sphinxcontrib": [375, 393, 400], "sphinxext": [375, 393, 400], "sphx_glr_auto_examples_mlcomp_sparse_document_classif": 1034, "spidlen": [695, 1001], "spie": [165, 372], "spielman": 1044, "spike": 186, "spikebh": 1048, "spikhalskii": 1039, "spiki": 44, "spin": 383, "spine": [47, 55, 71, 221, 308, 703, 705, 1053], "spirit": 412, "spite": 1006, "spline": [2, 182, 191, 192, 283, 293, 517, 518, 519, 675, 868, 882, 886, 1023, 1025, 1047], "spline_": 44, "splines_df": 44, "splinetransform": [2, 44, 211, 247, 320, 882, 1014, 1047, 1049, 1050], "split": [2, 44, 45, 46, 51, 53, 55, 56, 62, 64, 65, 68, 69, 103, 126, 135, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 161, 184, 185, 188, 196, 206, 207, 210, 213, 218, 228, 238, 247, 254, 255, 261, 262, 263, 266, 268, 273, 275, 278, 282, 285, 291, 297, 303, 305, 309, 310, 315, 321, 323, 331, 339, 350, 352, 357, 370, 382, 388, 389, 393, 398, 405, 406, 407, 412, 414, 415, 416, 437, 442, 443, 472, 473, 479, 480, 498, 532, 538, 540, 543, 547, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 590, 591, 593, 596, 604, 650, 654, 656, 658, 664, 666, 668, 676, 678, 698, 707, 708, 720, 734, 740, 760, 798, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 838, 841, 847, 848, 864, 865, 888, 892, 893, 895, 896, 897, 898, 915, 916, 917, 918, 974, 993, 996, 1000, 1001, 1007, 1010, 1011, 1012, 1014, 1018, 1020, 1024, 1030, 1034, 1037, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "split0_test_precis": [803, 817], "split0_test_scor": [803, 817, 1040], "split0_train_scor": [803, 817, 1040], "split1_test_scor": [803, 817], "split1_train_scor": [803, 817], "split2_test_scor": 803, "split_cod": 412, "split_sign": [532, 538, 543], "splitter": [44, 244, 323, 324, 389, 398, 411, 437, 472, 565, 566, 568, 569, 596, 604, 650, 654, 656, 658, 662, 664, 666, 668, 676, 678, 803, 805, 806, 807, 808, 809, 817, 818, 819, 822, 823, 826, 827, 828, 829, 830, 831, 832, 834, 838, 841, 915, 916, 917, 918, 1020, 1040, 1041, 1042, 1043, 1050, 1051, 1052, 1053], "splot": [254, 259], "splt": 211, "sply88": 1048, "spmatrix": 1051, "spolski": 415, "sport": [58, 370], "spot": [87, 239, 407], "spottabl": 381, "spread": [44, 76, 232, 269, 308, 328, 329, 330, 333, 346, 362, 375, 407, 452, 462, 516, 884, 896, 904, 1004], "spring": [44, 53, 186], "springboard": 1023, "springer": [138, 139, 149, 174, 267, 405, 407, 411, 412, 414, 521, 536, 560, 561, 693, 697, 699, 708, 723, 729, 743, 744, 759, 800, 854, 915, 916, 1001, 1004, 1005, 1011, 1020], "sprint": [374, 375, 1034], "spuriou": [339, 383, 1014, 1047, 1048, 1049], "spy": 205, "sq": 772, "sqeuclidean": [74, 450, 457, 781, 782, 783], "sqft": 247, "sql": 369, "sqr": 76, "sqrt": [52, 112, 113, 114, 124, 130, 139, 188, 192, 194, 233, 235, 249, 253, 254, 255, 258, 259, 268, 344, 346, 407, 414, 415, 417, 463, 469, 470, 471, 472, 473, 474, 475, 476, 539, 541, 548, 558, 559, 560, 561, 565, 566, 622, 649, 650, 655, 656, 663, 664, 665, 666, 684, 687, 702, 734, 766, 767, 772, 887, 900, 915, 916, 917, 918, 996, 1000, 1001, 1004, 1006, 1016, 1048], "squar": [2, 44, 45, 53, 95, 104, 111, 112, 113, 115, 116, 122, 123, 131, 138, 148, 150, 151, 158, 165, 169, 174, 182, 184, 185, 191, 192, 194, 195, 196, 200, 201, 210, 212, 215, 220, 227, 228, 240, 241, 243, 256, 264, 283, 312, 319, 320, 322, 336, 350, 367, 372, 375, 381, 384, 389, 407, 409, 410, 412, 413, 414, 418, 419, 430, 440, 442, 443, 444, 446, 447, 449, 450, 454, 457, 459, 460, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 502, 532, 538, 540, 542, 544, 546, 547, 548, 550, 553, 555, 557, 559, 560, 561, 563, 566, 569, 571, 592, 593, 594, 597, 598, 600, 601, 602, 606, 607, 608, 611, 614, 618, 625, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 664, 665, 666, 667, 668, 670, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 685, 686, 688, 689, 690, 691, 693, 695, 697, 699, 712, 724, 725, 726, 727, 753, 754, 761, 762, 766, 772, 773, 788, 793, 794, 833, 840, 841, 849, 850, 853, 854, 855, 857, 858, 865, 868, 887, 907, 908, 910, 912, 913, 914, 916, 918, 949, 976, 989, 995, 997, 998, 1007, 1008, 1012, 1018, 1020, 1025, 1026, 1030, 1034, 1037, 1039, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1053], "square_dist": 1046, "squared_epsilon_insensit": [670, 679, 681, 908, 1000, 1040], "squared_error": [47, 53, 130, 147, 148, 320, 414, 559, 560, 561, 563, 566, 674, 679, 681, 696, 916, 918, 1018, 1020, 1047, 1050, 1051], "squared_hing": [217, 346, 669, 679, 907, 914, 1000, 1019], "squared_loss": [387, 1047], "squareform": 188, "squash": [247, 379, 417, 532, 538, 543, 549], "squeez": [108, 175, 176, 247, 288, 308, 1053], "sr": 1028, "sr_color": 234, "sr_err": 234, "sr_lle": 234, "sr_point": 234, "sr_tsne": 234, "srajan": 1042, "sre": 1049, "srebro": 1018, "srep30750": 407, "sri": [674, 1000, 1041, 1042], "sridharan": 1039, "sriharsha": [1042, 1043], "srikantan": 1000, "srimukh": 1046, "srinath": [1048, 1049], "srinivasan": [1042, 1045], "sripada": 1046, "srivastava": [1037, 1049, 1052], "srivatsan": [1040, 1041, 1044], "srvanrel": 1040, "sr\u0161e\u0148": [1052, 1053], "ss": 411, "sse": 443, "sseg": 1039, "ssrn": [210, 228], "sss": 823, "ssvm": 387, "st": [82, 101, 268, 322, 1037, 1040, 1042], "st30": 333, "st50": 333, "st_pipelin": 332, "sta4273": 647, "stabil": [73, 139, 145, 185, 231, 273, 308, 346, 351, 389, 404, 446, 653, 657, 673, 845, 864, 865, 883, 895, 950, 994, 1000, 1003, 1014, 1024, 1034, 1038, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "stabilis": 192, "stabl": [44, 65, 185, 205, 208, 212, 288, 318, 346, 351, 373, 375, 377, 379, 384, 389, 393, 411, 415, 419, 471, 472, 478, 534, 542, 658, 675, 677, 690, 695, 727, 755, 950, 951, 1000, 1004, 1006, 1007, 1014, 1024, 1034, 1035, 1040, 1045, 1047, 1051], "stack": [2, 14, 108, 134, 136, 144, 158, 180, 182, 239, 293, 357, 374, 383, 387, 389, 413, 464, 466, 467, 497, 516, 563, 566, 568, 569, 615, 630, 631, 633, 656, 676, 704, 828, 830, 868, 872, 880, 881, 887, 977, 994, 1025, 1026, 1027, 1030, 1034, 1037, 1041, 1042, 1043, 1044, 1045], "stack_method": [414, 568], "stack_method_": [414, 568, 569], "stacking_regressor": 155, "stackingclassifi": [2, 317, 358, 389, 398, 414, 569, 994, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1053], "stackingregressor": [2, 155, 317, 389, 398, 414, 568, 994, 1044, 1045, 1046, 1047, 1048, 1051, 1053], "stackingregressorinot": 155, "stackoverflow": [380, 383, 387], "stade": 1038, "stage": [0, 47, 64, 105, 135, 140, 145, 148, 262, 379, 389, 403, 407, 414, 448, 554, 555, 560, 561, 562, 563, 590, 591, 593, 604, 1001, 1014, 1022, 1042, 1046], "staged_decision_funct": [554, 560, 562], "staged_predict": [135, 145, 148, 414, 554, 555, 560, 561, 562, 563, 1034, 1046], "staged_predict_proba": [146, 149, 554, 560, 562, 1034], "staged_scor": [554, 555], "stagewis": 135, "stagg": 1047, "stai": [44, 53, 64, 73, 130, 167, 185, 351, 374, 375, 379, 389, 390, 1009, 1027, 1040], "stairstep": 275, "stalei": [1043, 1044], "stall": [374, 378], "stallei": 1046, "stan": [845, 1051], "stand": [271, 352, 379, 387, 412, 532, 538, 546, 547, 598, 611, 681, 708, 720, 739, 740, 760, 789, 791, 798, 1003, 1004, 1010], "standalon": [381, 661, 907], "standard": [2, 51, 52, 53, 59, 64, 69, 71, 89, 95, 103, 104, 106, 112, 113, 117, 122, 135, 138, 140, 141, 142, 143, 151, 155, 165, 169, 174, 176, 178, 185, 192, 199, 200, 208, 210, 219, 230, 231, 232, 242, 247, 258, 262, 263, 266, 267, 268, 269, 271, 308, 313, 337, 350, 362, 363, 367, 368, 369, 371, 372, 373, 375, 377, 378, 380, 381, 384, 387, 389, 393, 401, 403, 407, 409, 410, 411, 415, 417, 446, 464, 468, 472, 488, 497, 502, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 523, 525, 526, 531, 533, 536, 542, 553, 592, 596, 614, 637, 647, 648, 675, 676, 677, 678, 679, 681, 690, 692, 696, 791, 809, 824, 826, 844, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 871, 876, 877, 880, 883, 884, 885, 887, 895, 896, 897, 898, 905, 907, 908, 933, 993, 996, 1000, 1001, 1004, 1006, 1007, 1008, 1010, 1018, 1019, 1024, 1028, 1030, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1052], "standard_coef_": 1045, "standard_intercept_": 1045, "standard_norm": [358, 690], "standard_scal": 249, "standard_t": 123, "standardscal": [2, 46, 50, 68, 80, 83, 89, 92, 96, 104, 106, 117, 131, 155, 165, 185, 192, 198, 200, 202, 210, 226, 228, 238, 239, 247, 248, 249, 251, 262, 265, 275, 282, 291, 296, 297, 303, 310, 313, 317, 318, 320, 321, 322, 324, 325, 326, 339, 342, 358, 364, 375, 377, 380, 384, 388, 408, 411, 428, 466, 467, 568, 679, 681, 867, 868, 871, 884, 898, 907, 908, 909, 910, 912, 913, 994, 1001, 1008, 1014, 1018, 1019, 1021, 1036, 1038, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1050], "standardscalerifittedstandardscal": 251, "standardscalerstandardscal": [104, 155, 185, 238, 239, 248, 249, 251, 262, 275, 282, 318, 321], "standpoint": 84, "stanford": [165, 372, 685, 686, 842, 845, 846, 900, 1002], "stanislav": [1049, 1050], "stanlei": [1048, 1049, 1050], "stap": 1042, "stapl": 1038, "star": [71, 119, 158, 375], "stareh": 1045, "start": [0, 44, 47, 50, 52, 53, 59, 64, 87, 92, 98, 101, 107, 117, 124, 140, 145, 147, 162, 165, 174, 176, 186, 190, 193, 194, 200, 210, 211, 212, 218, 228, 230, 234, 238, 242, 244, 256, 262, 268, 276, 288, 321, 323, 326, 329, 350, 357, 358, 362, 363, 364, 375, 376, 377, 379, 380, 381, 387, 389, 393, 404, 407, 411, 412, 416, 417, 440, 442, 450, 454, 456, 539, 613, 620, 635, 648, 656, 662, 669, 670, 671, 679, 680, 681, 693, 697, 784, 785, 792, 800, 801, 803, 806, 807, 817, 849, 850, 851, 853, 855, 863, 957, 987, 993, 1000, 1003, 1004, 1008, 1009, 1018, 1028, 1037, 1039, 1042, 1044, 1046, 1047, 1048, 1049, 1050], "start_": 48, "start_bodi": 48, "start_d": 48, "start_idx": [52, 233], "start_reut": 48, "start_tim": [47, 50, 58, 142, 145, 155, 169, 200, 231], "start_titl": 48, "start_top": 48, "startstart": 395, "startswith": [53, 103, 231, 301], "startup": 1028, "stat": [2, 46, 48, 50, 103, 112, 165, 169, 188, 265, 268, 276, 280, 293, 319, 328, 329, 372, 384, 388, 409, 474, 594, 597, 598, 600, 601, 602, 606, 607, 608, 611, 685, 686, 807, 815, 817, 915, 916, 953, 993, 1000, 1014, 1041, 1043, 1047], "state": [38, 87, 91, 103, 105, 112, 150, 212, 241, 249, 254, 262, 274, 319, 358, 363, 364, 375, 377, 381, 383, 387, 389, 390, 406, 414, 415, 420, 440, 443, 447, 449, 454, 459, 475, 545, 591, 682, 806, 807, 815, 817, 819, 847, 848, 854, 902, 903, 936, 993, 1000, 1006, 1009, 1016, 1028, 1036, 1038, 1040, 1042, 1044, 1047, 1050], "state_to_print": 376, "stateless": [103, 351, 364, 389, 415, 584, 585, 591, 641, 870, 871, 879, 926, 987, 1014, 1050, 1053], "statement": [185, 377, 380, 383, 387, 389, 412], "static": [375, 377, 381, 383, 649, 650, 655, 656, 663, 664, 665, 666], "station": 174, "stationari": [173, 417, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628], "statist": [2, 48, 53, 113, 135, 138, 139, 149, 160, 164, 165, 182, 184, 185, 186, 187, 196, 198, 214, 228, 260, 262, 265, 267, 270, 285, 287, 308, 314, 319, 358, 368, 370, 372, 381, 389, 405, 406, 407, 408, 409, 411, 412, 414, 416, 432, 469, 474, 494, 495, 517, 518, 519, 521, 523, 542, 554, 560, 561, 563, 606, 607, 608, 611, 630, 633, 637, 638, 647, 652, 659, 693, 697, 699, 713, 719, 724, 726, 727, 734, 746, 791, 803, 819, 837, 854, 864, 865, 883, 884, 885, 887, 892, 895, 896, 898, 912, 915, 916, 978, 993, 994, 998, 1000, 1001, 1003, 1004, 1005, 1006, 1011, 1012, 1014, 1018, 1019, 1020, 1021, 1022, 1025, 1039, 1042, 1045, 1046, 1048, 1049, 1052], "statistician": [389, 887], "statisticmonthhourtempfeel_temphumiditywindspeedcountstrf64f64f64f64f64f64f64": 53, "statistics_": 633, "statlearnspars": [724, 726, 727], "statlib": 370, "statnikov": 1004, "statsmodel": [1000, 1023], "statu": [53, 133, 324, 369, 393, 497, 576, 847, 848, 944, 1052], "statweb": [685, 686], "staub": 1040, "staubda": 1037, "std": [44, 51, 52, 53, 73, 81, 84, 88, 95, 100, 111, 113, 114, 122, 123, 124, 142, 143, 144, 150, 155, 175, 178, 180, 181, 185, 193, 199, 219, 241, 266, 267, 268, 270, 271, 273, 276, 278, 282, 283, 314, 331, 342, 351, 358, 389, 407, 411, 414, 516, 608, 611, 832, 887, 898, 1014, 1042, 1046], "std_": [272, 1039], "std_auc": 278, "std_display_styl": [243, 270, 809, 826], "std_fit_tim": [141, 290, 803, 817], "std_i": 185, "std_precis": 266, "std_predict": 176, "std_predictions_gpr": 169, "std_recal": 266, "std_scaler": 325, "std_score": [351, 1047], "std_score_tim": [141, 269, 803, 817], "std_test_precis": 266, "std_test_recal": 266, "std_test_scor": [104, 106, 141, 164, 267, 268, 269, 276, 290, 472, 596, 803, 817, 1040, 1047], "std_time": 1040, "std_tpr": 278, "std_train_scor": [803, 817, 1040], "std_y_pr": 174, "stderr": [52, 836], "stdin": 383, "stdout": [48, 121, 218, 836, 856, 864, 865], "stds_california": 181, "stds_diabet": 181, "steadi": [902, 903], "steelblu": [122, 123, 157], "steep": [2, 170, 186, 277, 278, 407, 411, 417, 450, 456], "stef": [630, 994], "stefan": [1037, 1038, 1042, 1044], "stefani": [0, 365, 1047, 1049, 1050, 1051, 1052, 1053], "stefanini": 1048, "stefano": [1036, 1053], "steffen": [1052, 1053], "stehl": [1048, 1049], "stein": 1040, "steinbach": [407, 1049, 1051], "steinfurt": [1044, 1046], "steingold": [1041, 1042], "steinlei": [407, 708], "steinley2004": 708, "stella": [407, 452, 462], "stellalin7": 1049, "stem": [138, 145, 187, 203, 209, 259, 281, 411, 415, 996, 1006], "step": [53, 59, 64, 70, 78, 88, 89, 92, 101, 103, 104, 105, 106, 107, 113, 117, 124, 128, 135, 140, 143, 144, 145, 155, 162, 163, 164, 171, 174, 185, 187, 210, 218, 228, 238, 239, 242, 248, 251, 259, 262, 266, 269, 275, 277, 282, 288, 290, 291, 296, 303, 306, 310, 313, 314, 318, 321, 326, 333, 335, 339, 351, 352, 354, 358, 362, 370, 373, 374, 375, 377, 378, 380, 383, 387, 389, 401, 404, 405, 407, 409, 410, 412, 414, 415, 416, 442, 447, 449, 537, 538, 539, 540, 547, 564, 590, 591, 593, 595, 596, 599, 608, 612, 630, 647, 651, 669, 670, 672, 679, 681, 682, 683, 697, 703, 800, 801, 803, 806, 807, 817, 838, 839, 840, 841, 863, 864, 865, 867, 868, 870, 907, 908, 909, 910, 912, 913, 950, 951, 974, 978, 994, 1000, 1003, 1004, 1008, 1009, 1014, 1018, 1020, 1021, 1023, 1027, 1034, 1038, 1039, 1041, 1042, 1043, 1045, 1046, 1047, 1050, 1052, 1053], "stephan": [711, 1037, 1043, 1044, 1046], "stephani": 1045, "stephen": [1028, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1047], "stepwis": [150, 638, 657, 658, 659, 685, 686, 1000], "stern": [791, 1004], "steve": [1036, 1038, 1042, 1047, 1049], "steven": [1036, 1037, 1039, 1041, 1042, 1047, 1049, 1050, 1052, 1053], "steward": 1041, "stewart": [1039, 1044, 1047, 1049, 1052, 1053], "stick": [49, 800, 1003], "stijn": 1041, "stikhin": 1044, "still": [44, 53, 65, 69, 80, 87, 89, 91, 96, 114, 125, 127, 147, 150, 155, 169, 175, 184, 185, 187, 188, 192, 196, 199, 210, 212, 228, 242, 271, 277, 281, 308, 319, 320, 323, 326, 350, 351, 358, 364, 369, 374, 375, 379, 380, 381, 383, 389, 407, 411, 414, 415, 418, 440, 444, 454, 474, 497, 630, 635, 638, 640, 661, 662, 720, 759, 781, 784, 795, 796, 805, 806, 807, 820, 823, 885, 887, 907, 931, 956, 993, 994, 998, 1000, 1003, 1004, 1007, 1010, 1012, 1019, 1020, 1022, 1024, 1027, 1028, 1034, 1036, 1039, 1040, 1042, 1043, 1044, 1047, 1048, 1049, 1050, 1052, 1053], "stine": [1042, 1043], "stochast": [2, 47, 92, 145, 146, 149, 182, 190, 191, 198, 232, 234, 237, 242, 294, 296, 297, 302, 305, 320, 338, 407, 412, 414, 462, 488, 497, 503, 504, 505, 515, 523, 537, 545, 560, 561, 606, 630, 634, 642, 661, 662, 671, 675, 677, 679, 680, 681, 682, 690, 691, 692, 693, 695, 833, 856, 863, 864, 865, 868, 877, 911, 950, 951, 977, 993, 1007, 1008, 1010, 1025, 1026, 1029, 1030, 1034, 1035, 1038, 1039, 1041, 1043, 1045], "stochastic_gradi": [1036, 1037, 1043], "stock": [43, 81, 86, 182, 230, 231, 407, 409, 454, 471, 472, 692, 1001, 1025], "stogbauer": [609, 610], "stojanov": [1048, 1049], "stolbunov": 1039, "stone": [375, 915, 916, 1020], "stop": [44, 47, 52, 56, 80, 96, 134, 135, 141, 174, 176, 182, 186, 191, 198, 212, 312, 318, 375, 377, 383, 384, 389, 407, 412, 414, 416, 440, 441, 443, 445, 447, 449, 452, 454, 462, 463, 471, 472, 478, 482, 483, 484, 490, 497, 509, 510, 533, 537, 538, 539, 540, 541, 544, 546, 547, 548, 554, 555, 558, 559, 560, 561, 562, 563, 565, 566, 590, 591, 593, 604, 620, 630, 647, 648, 649, 651, 652, 655, 659, 661, 662, 669, 670, 671, 672, 674, 679, 680, 681, 683, 694, 695, 698, 717, 753, 800, 801, 833, 864, 865, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 957, 977, 993, 1000, 1008, 1009, 1019, 1020, 1024, 1025, 1026, 1028, 1030, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1048, 1049, 1050, 1051], "stop_n_inli": [674, 1000], "stop_prob": 674, "stop_scor": [674, 1000], "stop_word": [55, 58, 350, 351, 415, 590, 591, 593], "stop_words_": 1052, "stopiter": 1046, "stopword": 489, "storag": [0, 352, 389, 661, 662, 669, 670, 671, 679, 680, 681, 907, 1007, 1019, 1037, 1042], "storch": 1043, "store": [2, 69, 87, 88, 103, 105, 113, 162, 177, 190, 197, 200, 214, 231, 238, 248, 258, 262, 273, 277, 328, 352, 357, 362, 369, 370, 375, 377, 382, 383, 384, 387, 389, 401, 403, 408, 410, 412, 414, 415, 417, 418, 438, 440, 444, 446, 450, 457, 464, 467, 469, 470, 473, 474, 475, 476, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 504, 509, 535, 536, 542, 550, 551, 556, 557, 558, 559, 564, 565, 566, 567, 570, 571, 587, 591, 613, 614, 630, 634, 635, 638, 652, 653, 657, 663, 664, 665, 666, 669, 670, 676, 678, 679, 680, 681, 691, 692, 693, 695, 700, 701, 703, 704, 705, 784, 800, 801, 803, 809, 817, 825, 826, 847, 848, 849, 850, 851, 853, 855, 856, 857, 858, 859, 862, 878, 885, 887, 888, 902, 903, 904, 933, 934, 960, 961, 974, 977, 989, 994, 996, 1000, 1005, 1007, 1016, 1019, 1020, 1023, 1031, 1034, 1035, 1036, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "store_cent": [446, 1051], "store_covari": [71, 550, 551, 1039, 1041], "store_cv_result": [262, 676, 678, 825, 1052], "store_cv_valu": [676, 678, 1042, 1045, 1052], "store_precis": [70, 111, 469, 470, 473, 474, 475, 476], "stori": [184, 268, 285, 370, 1003], "stork": 998, "stott": 1042, "stoyanov": [1042, 1043], "str": [48, 50, 53, 92, 94, 129, 131, 143, 163, 228, 247, 268, 280, 288, 298, 337, 350, 369, 370, 384, 415, 418, 419, 423, 428, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 449, 450, 452, 457, 464, 465, 466, 467, 468, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 528, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 576, 578, 583, 584, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 613, 614, 620, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 691, 692, 693, 695, 699, 700, 701, 702, 703, 705, 710, 712, 714, 716, 730, 732, 733, 735, 736, 741, 745, 774, 777, 781, 782, 783, 784, 785, 786, 787, 790, 792, 795, 796, 802, 803, 804, 805, 806, 807, 809, 810, 812, 814, 815, 817, 821, 825, 826, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 920, 921, 926, 928, 929, 932, 933, 934, 937, 940, 942, 944, 945, 947, 959, 960, 961, 963, 966, 987, 988, 991, 1049], "str_": [52, 277, 494, 501, 505, 511, 875], "strai": 1009, "straight": [126, 201, 208, 265, 343, 362], "straightforward": [309, 374, 406, 412, 1028], "straka": 1046, "strateg": 390, "strategi": [2, 31, 44, 53, 86, 88, 92, 95, 104, 144, 149, 150, 155, 162, 164, 180, 181, 182, 187, 196, 200, 203, 210, 218, 228, 239, 247, 249, 260, 262, 267, 269, 271, 272, 273, 275, 276, 277, 278, 280, 282, 287, 302, 305, 307, 309, 310, 314, 315, 317, 318, 321, 347, 352, 361, 377, 381, 388, 389, 401, 406, 411, 414, 415, 416, 419, 437, 438, 439, 445, 447, 452, 462, 472, 503, 505, 513, 515, 523, 534, 539, 552, 553, 565, 566, 568, 569, 590, 591, 593, 594, 596, 604, 630, 631, 633, 648, 650, 654, 656, 658, 664, 666, 668, 676, 678, 694, 698, 707, 716, 735, 758, 760, 798, 803, 805, 806, 807, 809, 817, 820, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 864, 865, 872, 877, 888, 902, 907, 909, 912, 915, 916, 917, 918, 974, 993, 994, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1012, 1014, 1018, 1019, 1020, 1025, 1030, 1037, 1038, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1052, 1053], "stratif": [804, 805, 811, 812, 819, 821, 822, 823, 974, 1043], "stratifi": [2, 45, 126, 142, 151, 161, 187, 225, 238, 247, 251, 262, 263, 268, 271, 277, 291, 296, 297, 317, 389, 406, 552, 560, 568, 569, 604, 662, 669, 671, 679, 802, 803, 806, 807, 809, 817, 818, 819, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 838, 841, 856, 864, 974, 1004, 1007, 1039, 1040, 1041, 1043, 1044, 1047], "stratifiedgroupkfold": [2, 263, 1047], "stratifiedkfold": [2, 164, 255, 263, 274, 278, 331, 411, 437, 568, 569, 596, 604, 662, 676, 803, 804, 806, 807, 808, 809, 811, 813, 817, 821, 823, 826, 827, 828, 829, 830, 831, 832, 834, 888, 1035, 1036, 1037, 1040, 1041, 1042, 1043, 1044, 1047], "stratifiedshufflesplit": [2, 263, 339, 411, 1034, 1035, 1040, 1041, 1047], "stream": [48, 407, 412, 415, 462, 591, 876, 877, 887, 996, 1042, 1045], "stream_reuters_docu": 48, "streamhandl": 1045, "streamlin": 1000, "street": [155, 165, 372], "strehl": 407, "strength": [52, 155, 176, 199, 210, 214, 269, 281, 317, 362, 410, 414, 446, 568, 569, 646, 651, 652, 655, 661, 662, 672, 675, 676, 677, 678, 679, 681, 683, 690, 786, 864, 865, 907, 908, 912, 913, 993, 1000, 1007, 1010, 1018, 1019], "stress": [693, 697, 1001, 1049], "stress_": 693, "stretch": [234, 257], "stretched_gaussian": 257, "strickland": 1040, "strict": [358, 373, 389, 403, 412, 504, 536, 590, 591, 593, 1000, 1034, 1043, 1046, 1052], "stricter": 180, "strictli": [65, 210, 228, 244, 308, 323, 351, 380, 389, 405, 410, 412, 414, 415, 509, 510, 536, 542, 545, 562, 563, 590, 593, 604, 645, 673, 674, 676, 678, 698, 703, 742, 769, 803, 806, 807, 813, 817, 830, 856, 883, 895, 899, 900, 902, 903, 907, 908, 912, 913, 949, 993, 995, 1000, 1004, 1014, 1018, 1035, 1045, 1050], "striebel": [1040, 1041], "strife": 1001, "strike": [145, 186, 214], "string": [2, 48, 104, 143, 177, 228, 239, 262, 272, 320, 325, 352, 362, 369, 370, 375, 376, 377, 381, 389, 408, 411, 414, 415, 416, 418, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 457, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 487, 489, 490, 497, 506, 528, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 583, 584, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 613, 614, 620, 623, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 691, 692, 693, 694, 695, 702, 712, 714, 722, 735, 765, 768, 774, 777, 781, 782, 783, 784, 795, 796, 800, 801, 803, 806, 807, 809, 817, 825, 826, 830, 835, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 924, 931, 933, 934, 941, 942, 943, 967, 987, 988, 993, 994, 1017, 1019, 1034, 1035, 1036, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053], "strip": [55, 228, 351, 362, 369, 370, 497], "strip_acc": [590, 591, 593], "strip_accents_unicod": 1044, "stripe": 311, "stripplot": 185, "strive": [374, 390, 1028], "strong": [33, 44, 53, 88, 169, 182, 184, 185, 191, 204, 208, 214, 215, 216, 243, 287, 315, 346, 405, 412, 414, 525, 652, 675, 997, 998, 1000, 1001, 1003, 1011, 1019, 1025], "stronger": [269, 646, 655, 661, 662, 675, 676, 677, 678, 679, 681, 690], "strongest": [56, 204], "strongli": [63, 65, 114, 117, 124, 144, 148, 185, 195, 225, 244, 274, 350, 375, 392, 393, 405, 414, 661, 739, 798, 1000, 1001, 1030, 1043, 1050], "stroudsburg": [904, 1017], "strubel": 1047, "struct": [373, 389, 1037], "structur": [0, 2, 43, 49, 53, 54, 55, 56, 59, 60, 72, 76, 77, 79, 80, 81, 86, 87, 88, 89, 90, 96, 114, 131, 151, 168, 182, 230, 231, 234, 239, 244, 259, 263, 274, 293, 313, 318, 321, 327, 339, 343, 353, 354, 355, 362, 370, 372, 375, 377, 380, 387, 389, 390, 393, 404, 407, 409, 410, 411, 412, 414, 415, 416, 417, 441, 442, 445, 446, 450, 451, 452, 453, 454, 457, 462, 463, 471, 472, 497, 504, 505, 509, 512, 514, 515, 522, 531, 536, 542, 545, 564, 613, 614, 615, 619, 620, 621, 692, 699, 712, 716, 833, 855, 860, 887, 899, 900, 903, 915, 916, 917, 918, 921, 950, 951, 974, 977, 1001, 1003, 1004, 1007, 1009, 1010, 1014, 1017, 1020, 1023, 1024, 1025, 1034, 1035, 1037, 1038, 1040, 1044], "struggl": [374, 390, 407], "stuck": [95, 695, 1001], "student": [0, 123, 268, 1001, 1024, 1028], "studi": [44, 65, 94, 147, 210, 228, 271, 274, 275, 282, 350, 370, 372, 411, 416, 699, 711, 761, 762, 832, 1002, 1004, 1018], "studio": [373, 1028], "study_135": 369, "study_14": 369, "study_34": 369, "study_98": 369, "study_99": 369, "stuff": 1028, "stump": [137, 414, 560, 1045], "stupp": [1040, 1041], "stupperich": 1046, "sturla": 1036, "style": [113, 147, 200, 218, 228, 272, 375, 382, 407, 415, 443, 447, 459, 703, 809, 826, 933, 934, 947, 1034, 1037, 1048, 1053], "st\u00e9fan": 376, "st\u00e9phan": 1044, "st\u00e9phane": [1043, 1044, 1048, 1049], "su": [724, 726, 727], "sub": [48, 73, 87, 89, 91, 94, 103, 130, 244, 246, 253, 319, 328, 329, 336, 339, 347, 370, 375, 377, 381, 389, 406, 408, 414, 415, 437, 443, 444, 447, 449, 465, 482, 483, 484, 534, 537, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 592, 599, 613, 614, 630, 638, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 693, 802, 804, 805, 810, 812, 821, 825, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 852, 854, 857, 858, 864, 865, 866, 867, 870, 872, 873, 874, 879, 886, 887, 902, 903, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 924, 961, 1000, 1004, 1018, 1044, 1048, 1050, 1051], "sub_sampl": 537, "subclass": [133, 377, 417, 575, 969, 1039, 1042, 1047, 1051], "subclust": [407, 442], "subcluster_centers_": [78, 442], "subcluster_labels_": 442, "subcompon": [121, 412], "subdirectori": 375, "subdivid": [370, 417], "subestim": 377, "subestimator__c": 377, "subestimator__class_weight": 377, "subestimator__du": 377, "subestimator__fit_intercept": 377, "subestimator__intercept_sc": 377, "subestimator__l1_ratio": 377, "subestimator__max_it": 377, "subestimator__multi_class": 377, "subestimator__n_job": 377, "subestimator__penalti": 377, "subestimator__random_st": 377, "subestimator__solv": 377, "subestimator__tol": 377, "subestimator__verbos": 377, "subestimator__warm_start": 377, "subexpress": 53, "subfold": [2, 373, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 504, 1047], "subgraph": 404, "subhash": 1048, "subhodeep": [1034, 1035, 1036], "subi": [1043, 1044, 1049], "subject": [16, 103, 152, 259, 271, 350, 370, 375, 377, 379, 387, 389, 390, 405, 409, 411, 412, 496, 661, 662, 688, 825, 870, 973, 995, 1000, 1019, 1022, 1043, 1044, 1047, 1049], "subject_body_extractor": 103, "subject_body_transform": 103, "subjectbodi": 103, "subjectbodyextractor": 103, "sublinear": [412, 592, 593], "sublinear_tf": [350, 412, 415, 592, 593], "submatric": 404, "submatrix": [404, 422, 451, 453], "submiss": 375, "submit": [372, 373, 374, 377, 378, 379, 380, 383, 389, 390, 393], "submitt": 374, "submodel": 411, "submodul": [379, 996, 1002, 1034], "subobject": [421, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 583, 584, 585, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 691, 692, 693, 694, 695, 800, 801, 802, 803, 806, 807, 817, 825, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918], "suboptim": [411, 703, 705, 785, 792, 1007, 1042, 1050], "subpackag": [375, 379, 1038, 1043], "subplot": [44, 45, 46, 48, 49, 50, 51, 53, 54, 55, 67, 68, 69, 71, 75, 79, 80, 84, 85, 87, 88, 89, 90, 91, 94, 96, 99, 100, 106, 108, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 126, 130, 131, 135, 137, 138, 140, 141, 142, 143, 144, 145, 148, 150, 152, 153, 155, 156, 157, 160, 171, 173, 178, 180, 181, 185, 186, 188, 190, 193, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 214, 218, 223, 224, 226, 228, 230, 231, 234, 235, 237, 238, 240, 242, 243, 245, 246, 247, 248, 253, 254, 255, 256, 258, 259, 262, 263, 264, 265, 268, 270, 271, 273, 274, 275, 277, 278, 279, 281, 282, 283, 287, 288, 290, 291, 292, 293, 296, 297, 299, 300, 301, 303, 304, 305, 306, 309, 310, 311, 312, 313, 314, 317, 321, 322, 331, 333, 336, 337, 338, 339, 343, 345, 346, 347, 348, 350, 351, 352, 354, 355, 371, 382], "subplot_kw": [230, 292], "subplot_spec": 382, "subplot_titl": 141, "subplots_adjust": [46, 47, 54, 55, 75, 78, 80, 84, 85, 88, 96, 98, 112, 114, 119, 123, 124, 130, 137, 138, 155, 185, 209, 210, 225, 228, 237, 245, 253, 255, 256, 259, 263, 279, 293, 301, 303, 306, 310, 319, 329, 336, 339], "subpopul": [227, 682, 1000], "subproblem": 1039, "subrahmanyam": [1034, 1037], "subramaniam": [1049, 1050, 1051], "subramaniyan": 1046, "subramanyam": 1041, "subrat": 1046, "subrat93": 1046, "subsampl": [130, 146, 149, 186, 227, 264, 315, 319, 458, 560, 561, 562, 563, 564, 635, 682, 704, 806, 807, 833, 872, 884, 896, 929, 939, 996, 1000, 1024, 1034, 1044, 1048, 1050, 1051, 1052], "subscrib": 1032, "subscript": [363, 1047], "subsect": [26, 363, 375], "subsequ": [47, 69, 92, 108, 124, 135, 162, 198, 212, 270, 273, 288, 290, 339, 358, 375, 377, 379, 381, 389, 403, 407, 408, 414, 417, 437, 497, 509, 554, 555, 560, 562, 563, 669, 671, 679, 806, 807, 835, 836, 839, 842, 843, 844, 845, 846, 864, 882, 886, 994, 1003, 1005, 1043, 1044, 1048, 1050, 1052, 1053], "subset": [2, 47, 58, 59, 64, 65, 69, 103, 104, 112, 113, 142, 143, 144, 145, 162, 165, 186, 188, 200, 211, 225, 226, 227, 228, 240, 242, 246, 247, 262, 266, 269, 271, 277, 278, 280, 285, 313, 314, 319, 328, 332, 350, 351, 352, 358, 370, 375, 383, 387, 389, 404, 405, 407, 408, 411, 414, 415, 417, 424, 437, 449, 464, 466, 467, 469, 488, 489, 493, 494, 498, 509, 550, 551, 552, 554, 556, 557, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 570, 604, 613, 632, 642, 643, 644, 645, 654, 658, 661, 669, 670, 671, 674, 677, 678, 679, 680, 681, 682, 700, 706, 707, 714, 716, 719, 721, 734, 737, 758, 760, 796, 799, 802, 805, 825, 831, 833, 835, 836, 837, 838, 842, 843, 844, 845, 846, 849, 854, 857, 864, 873, 902, 903, 907, 909, 912, 915, 917, 929, 972, 993, 1000, 1004, 1005, 1015, 1017, 1019, 1020, 1037, 1042, 1043, 1045, 1047, 1052, 1053], "subset_featur": 104, "subset_label": 228, "subsidi": 185, "subspac": [128, 410, 414, 452, 516, 556, 557, 694, 698, 951, 998, 1007, 1010, 1016, 1028], "substanti": [290, 294, 295, 309, 375, 853, 1010, 1038, 1041], "substitut": [398, 987, 1040], "subtl": [348, 358, 1003, 1024], "subtleti": 1030, "subtract": [174, 185, 247, 410, 412, 443, 447, 459, 535, 647, 648, 1041, 1051], "subtre": [558, 559, 560, 561, 565, 566, 915, 916, 917, 918, 1020], "subwindow": 1020, "succe": [128, 150, 196, 282], "succeed": 375, "success": [2, 84, 160, 182, 260, 272, 275, 276, 345, 358, 402, 407, 411, 412, 414, 516, 565, 581, 803, 806, 807, 824, 912, 1007, 1025, 1028, 1030, 1046], "successfulli": [44, 54, 312, 374, 379, 401, 407, 415, 1018], "successor": [450, 456, 1020, 1023], "suchak": 1047, "sudo": [373, 393], "suen": 1008, "suffer": [117, 187, 288, 308, 351, 362, 407, 414, 545, 766, 999, 1000, 1004, 1007, 1043], "suffic": [91, 92, 377], "suffici": [2, 65, 89, 155, 218, 283, 339, 362, 389, 407, 416, 533, 660, 685, 686, 819, 822, 823, 1005, 1007, 1024, 1043, 1049, 1050], "suffix": [393, 830, 1004, 1044], "suganthan": 372, "sugar": [165, 372], "suggest": [112, 124, 138, 142, 185, 188, 268, 339, 362, 374, 375, 382, 389, 411, 412, 414, 469, 474, 566, 648, 832, 998, 1000, 1001, 1009, 1012, 1019, 1038, 1045, 1048, 1051], "suh": 1042, "suha": 1052, "suit": [59, 121, 153, 185, 210, 211, 237, 258, 320, 321, 323, 326, 350, 363, 375, 377, 380, 381, 383, 393, 395, 401, 410, 412, 414, 450, 452, 504, 680, 844, 888, 944, 993, 996, 1001, 1004, 1006, 1007, 1018, 1023, 1024, 1028, 1041, 1048], "suitabl": [139, 147, 196, 197, 203, 214, 304, 352, 369, 370, 381, 384, 401, 407, 412, 415, 452, 462, 468, 487, 506, 509, 630, 638, 842, 843, 846, 881, 882, 905, 968, 972, 998, 1000, 1003, 1014, 1016, 1018, 1023, 1048, 1049], "sullivan": [1037, 1038, 1039], "sultan": 1048, "sum": [2, 31, 48, 56, 58, 64, 95, 113, 119, 124, 130, 146, 147, 161, 165, 177, 185, 194, 210, 214, 225, 228, 231, 233, 247, 262, 277, 288, 295, 298, 321, 325, 332, 343, 344, 346, 350, 351, 352, 357, 372, 381, 389, 404, 405, 407, 409, 410, 412, 413, 414, 415, 417, 430, 442, 443, 447, 449, 459, 464, 465, 482, 483, 484, 516, 521, 524, 532, 535, 537, 538, 542, 545, 546, 547, 550, 551, 553, 555, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 569, 570, 571, 592, 593, 614, 616, 626, 628, 638, 644, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 675, 676, 679, 680, 681, 682, 684, 687, 693, 697, 699, 702, 712, 713, 722, 729, 744, 759, 761, 762, 766, 791, 835, 836, 840, 841, 850, 854, 858, 865, 866, 886, 887, 907, 908, 910, 913, 915, 916, 917, 918, 953, 978, 984, 989, 1000, 1004, 1005, 1006, 1007, 1019, 1020, 1037, 1038, 1040, 1042, 1043, 1045, 1050, 1051], "sum_": [268, 277, 346, 404, 405, 407, 412, 413, 414, 539, 541, 548, 699, 758, 998, 1000, 1001, 1004, 1006, 1008, 1009, 1011, 1012, 1014, 1018, 1019, 1020], "sum_gradi": 414, "sum_h": 1009, "sum_hessian": 414, "sum_i": [320, 414, 649, 650, 655, 656, 663, 664, 665, 666, 684, 687, 995, 996, 1000, 1002, 1004, 1009], "sum_j": [649, 650, 655, 656, 663, 664, 665, 666, 684, 687, 1000, 1004, 1009], "sum_k": [414, 550, 1020], "sum_m": 414, "sum_n": [275, 710, 1004], "sum_n_compon": [464, 866], "sum_over_featur": [1034, 1049], "sum_weight": 984, "sumit": 1048, "summar": [210, 259, 275, 277, 352, 375, 377, 392, 414, 522, 661, 697, 709, 710, 1000, 1001, 1004, 1010, 1030], "summari": [53, 165, 321, 357, 358, 372, 387, 562, 563, 695, 716, 791, 920, 1002, 1005, 1023, 1053], "summaris": [239, 318], "summat": [1006, 1008], "summer": [0, 44, 53, 174, 1034], "sun": [44, 150, 186, 1042, 1047, 1048], "sundai": 44, "sundaramahalingam": 1051, "sung": 1045, "sunglok": 1000, "sunita": 786, "sunitha": 1046, "sunmi": 1045, "super": [58, 63, 65, 377, 415, 1042], "superflu": 412, "superimpos": 412, "superior": 414, "superposit": 196, "supersed": [374, 1039], "superset": [411, 824, 1004], "supervis": [2, 28, 33, 35, 39, 58, 63, 65, 68, 73, 83, 88, 92, 116, 117, 129, 140, 143, 150, 153, 171, 231, 242, 245, 255, 268, 297, 303, 310, 319, 331, 335, 336, 339, 343, 351, 352, 362, 370, 377, 388, 389, 405, 407, 410, 411, 412, 414, 415, 417, 437, 439, 464, 488, 504, 505, 554, 590, 592, 595, 596, 637, 679, 732, 804, 805, 808, 810, 811, 812, 813, 818, 819, 820, 821, 822, 823, 827, 828, 829, 830, 832, 833, 856, 866, 867, 871, 881, 888, 902, 903, 904, 912, 998, 1001, 1004, 1006, 1007, 1010, 1014, 1015, 1019, 1020, 1021, 1023, 1025, 1027, 1030, 1034, 1040, 1046], "supp": 383, "suppli": [150, 387, 407, 649, 933, 934, 1007, 1028, 1038, 1040, 1042, 1047], "support": [2, 40, 44, 46, 47, 48, 49, 50, 62, 67, 69, 81, 103, 104, 105, 134, 139, 154, 155, 161, 162, 174, 186, 211, 220, 221, 222, 228, 242, 243, 244, 250, 261, 266, 273, 275, 285, 288, 306, 308, 312, 321, 325, 328, 329, 332, 333, 335, 336, 339, 340, 341, 342, 343, 344, 346, 362, 363, 364, 369, 373, 375, 377, 379, 380, 381, 382, 384, 385, 388, 389, 390, 401, 407, 411, 412, 415, 416, 417, 437, 440, 450, 452, 453, 464, 466, 467, 469, 474, 487, 497, 513, 539, 541, 542, 545, 548, 550, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 583, 584, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 613, 614, 616, 617, 618, 620, 622, 623, 625, 626, 628, 630, 634, 635, 636, 646, 648, 660, 661, 662, 673, 674, 675, 677, 678, 679, 680, 681, 690, 693, 697, 702, 710, 716, 732, 733, 741, 746, 781, 782, 783, 786, 787, 790, 791, 803, 806, 807, 809, 817, 825, 830, 831, 839, 840, 845, 847, 848, 851, 853, 859, 867, 868, 872, 878, 880, 881, 883, 887, 895, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 920, 921, 923, 924, 926, 927, 929, 939, 946, 991, 993, 994, 996, 997, 998, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1014, 1015, 1018, 1023, 1024, 1025, 1026, 1028, 1030, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "support_": [243, 345, 469, 474, 595, 596, 604, 909, 910, 911, 912, 913, 1019], "support_fract": [49, 469, 474], "support_reweight": [469, 474], "support_vector": [337, 343], "support_vector_indic": 337, "support_vectors_": [47, 50, 340, 343, 344, 909, 910, 911, 912, 913, 1019], "suppos": [244, 271, 328, 362, 363, 375, 379, 381, 409, 414, 415, 416, 558, 562, 565, 661, 662, 669, 671, 677, 678, 679, 853, 907, 909, 912, 915, 917, 939, 1008, 1043, 1045, 1051], "suppress": [185, 362, 383, 695, 1007, 1041], "suptitl": [44, 45, 53, 55, 69, 70, 71, 75, 76, 84, 87, 91, 94, 101, 108, 121, 124, 131, 135, 143, 144, 152, 155, 178, 185, 186, 188, 205, 207, 209, 225, 226, 230, 231, 232, 246, 256, 262, 264, 281, 282, 306, 308, 310, 317, 319, 328, 329, 333, 345, 346, 355], "surac": 1044, "sure": [2, 64, 90, 204, 216, 244, 245, 262, 356, 358, 362, 363, 369, 373, 374, 375, 376, 377, 379, 380, 383, 387, 393, 405, 408, 415, 494, 524, 652, 933, 934, 944, 956, 989, 994, 1001, 1018, 1023, 1024, 1041, 1042, 1044, 1049, 1053], "suresh": 1048, "surf": 186, "surfac": [125, 127, 129, 134, 135, 136, 137, 139, 156, 171, 182, 219, 274, 335, 336, 353, 354, 356, 357, 414, 505, 554, 558, 565, 634, 767, 915, 921, 998, 1003, 1018, 1019, 1020, 1025], "surface_": 634, "surgan12": 1043, "surpass": [135, 343, 864, 865], "surplu": 411, "surpris": [87, 186, 373, 1000, 1023, 1036], "surprisingli": [228, 370, 415], "surrend": 58, "surrog": 1028, "surround": [245, 375, 853, 1010], "survei": [185, 410], "surviv": [104, 187, 993, 1023], "surya": [1047, 1048], "suscept": 401, "susik": 1038, "suspect": 44, "suspici": 370, "sustain": 0, "sutherland": [1036, 1038, 1039, 1041, 1042, 1043, 1044], "sutiono": 1045, "suzuki": [1045, 1046], "sv": 1019, "sv_ind": 243, "sv_ratio": 243, "svc": [2, 46, 63, 65, 67, 68, 69, 103, 107, 145, 156, 170, 182, 190, 202, 242, 245, 249, 261, 266, 268, 270, 273, 274, 275, 278, 279, 310, 312, 313, 317, 319, 331, 333, 334, 335, 336, 337, 339, 340, 341, 342, 344, 347, 348, 350, 362, 381, 389, 405, 408, 411, 414, 433, 434, 436, 437, 468, 516, 556, 700, 701, 703, 705, 803, 820, 834, 836, 867, 904, 905, 907, 909, 910, 913, 991, 993, 999, 1002, 1004, 1005, 1014, 1025, 1031, 1034, 1035, 1036, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1052, 1053], "svc__c": [310, 867], "svc_disp": [250, 317, 1031], "svc_isoton": 63, "svc_sigmoid": 63, "svcifittedsvc": 250, "svcsvc": [249, 266, 268, 319], "svd": [2, 71, 128, 153, 231, 351, 384, 403, 410, 419, 451, 453, 482, 483, 485, 522, 533, 534, 535, 536, 540, 541, 542, 545, 547, 550, 551, 667, 675, 676, 677, 688, 689, 690, 866, 951, 998, 1036, 1040, 1041, 1047, 1049, 1052], "svd__n_compon": 866, "svd_lapack_driv": 951, "svd_method": [58, 451, 453, 533, 1037], "svd_solver": [46, 103, 121, 128, 324, 325, 403, 412, 536, 542, 1040, 1052], "sven": [1048, 1049], "svg": [0, 395], "svm": [2, 43, 47, 49, 50, 51, 55, 63, 65, 67, 68, 69, 103, 105, 107, 121, 133, 143, 153, 156, 159, 164, 165, 171, 173, 177, 182, 191, 194, 204, 219, 220, 221, 222, 223, 237, 243, 245, 246, 249, 250, 261, 265, 266, 267, 268, 270, 271, 273, 274, 275, 276, 278, 279, 283, 294, 299, 300, 303, 305, 310, 311, 317, 319, 327, 331, 332, 334, 337, 345, 346, 350, 362, 370, 381, 389, 408, 411, 412, 414, 416, 433, 434, 436, 437, 495, 505, 513, 516, 542, 556, 557, 564, 568, 569, 579, 595, 596, 601, 602, 607, 634, 642, 646, 671, 679, 680, 681, 692, 700, 701, 703, 705, 716, 738, 745, 764, 803, 817, 823, 829, 830, 833, 835, 836, 853, 867, 868, 880, 882, 887, 903, 904, 907, 908, 909, 910, 911, 912, 913, 914, 991, 993, 996, 999, 1001, 1002, 1004, 1005, 1009, 1017, 1019, 1021, 1025, 1026, 1030, 1031, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1053], "svm1": 408, "svm2": 408, "svm__c": 107, "svm_weight": 161, "svm_weights_select": 161, "svmlight": [2, 368, 487, 509, 510, 1030, 1034, 1035, 1041, 1043], "svmlight_file_test": 510, "svmlight_file_train": 510, "svmsgd": 1018, "svr": [2, 47, 50, 182, 236, 317, 334, 362, 395, 433, 434, 436, 557, 568, 569, 595, 596, 646, 681, 803, 809, 908, 910, 912, 997, 1025, 1034, 1036, 1038, 1039, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1052], "svr_fit": 243, "svr_lin": 345, "svr_poli": 345, "svr_predict": 243, "svr_rbf": 345, "sw": 288, "sw_test": [62, 318], "sw_train": [62, 318], "swap": [2, 407, 412, 719, 739, 982, 983, 1034], "swapnil": 1048, "swart": 56, "sweep": 863, "swier": [1045, 1046], "swiss": [2, 101, 182, 229, 230, 235, 407, 531, 695, 696, 1025, 1048], "switch": [361, 681, 707, 720, 740, 758, 760, 798, 847, 848, 950, 951, 1004, 1007, 1030, 1034], "swpeas": 1047, "swu": 1038, "sy": [48, 52, 58, 218, 241, 288, 332, 352, 370, 387, 620], "syd": 1049, "sydnei": 0, "syhw": [1035, 1036], "sylvain": [0, 365, 1038, 1043, 1044, 1045, 1046, 1047, 1048, 1053], "sylvainlan": [1042, 1043, 1044, 1045, 1046], "symbol": [52, 352, 363, 377, 381, 409, 415, 500, 584, 590, 591, 593, 919, 921, 1023], "symbol_dict": 52, "symlink": 379, "symlognorm": [192, 196], "symmetr": [2, 80, 147, 178, 188, 212, 389, 405, 407, 452, 462, 463, 474, 520, 528, 530, 693, 697, 698, 707, 708, 718, 719, 720, 725, 727, 731, 739, 740, 758, 760, 766, 788, 798, 800, 801, 989, 993, 1000, 1004, 1007, 1050], "symmetri": [165, 372, 702, 880, 883, 895, 1002], "symmetric_arrai": 989, "symposium": [165, 372, 407, 460], "symptomat": 262, "sync": 377, "synchron": [375, 379, 415], "syndrom": 369, "synonym": [389, 849, 850, 851, 857, 858, 859], "synonymi": 412, "syntax": [363, 375, 380, 383, 408, 468, 866, 867, 905, 993, 1045, 1047], "synthet": [44, 54, 63, 65, 68, 71, 73, 78, 83, 142, 147, 153, 169, 174, 176, 186, 201, 203, 212, 227, 303, 310, 346, 358, 362, 368, 378, 390, 407, 409, 416, 661, 662, 907, 908, 914, 998, 1040], "synthetic_feature_weight": [661, 662], "syonekura": 1042, "system": [45, 126, 196, 268, 275, 325, 358, 362, 363, 364, 370, 372, 375, 376, 377, 378, 383, 387, 393, 401, 407, 412, 414, 418, 444, 471, 472, 478, 536, 540, 544, 551, 642, 648, 653, 654, 657, 658, 659, 685, 686, 729, 759, 772, 800, 856, 902, 903, 1000, 1004, 1007, 1016, 1023, 1024, 1028, 1034, 1042, 1043], "systemat": [44, 150, 268, 715, 731, 923, 925, 1004, 1049], "sysuresh": 1048, "szabo": [1036, 1037], "szepieniec": 1040, "szlam": [412, 950, 951], "szpak": [1041, 1044], "szyma\u0144ski": [1042, 1043], "s\u00e1nchez": 1046, "s\u00e3o": 1052, "s\u00e4ger": [1037, 1040], "s\u00e9bastien": [1028, 1040, 1042], "s\u00e9rgio": 1053, "s\u00f6nke": 1044, "s\u00f8ren": [1051, 1053], "s\u0142apek": 1045, "t": [2, 16, 48, 51, 52, 56, 64, 65, 71, 75, 76, 78, 79, 80, 86, 88, 92, 103, 105, 110, 111, 112, 114, 116, 119, 122, 123, 128, 130, 131, 135, 138, 139, 146, 147, 148, 149, 150, 154, 155, 165, 170, 172, 173, 174, 177, 178, 182, 185, 186, 187, 188, 192, 194, 196, 205, 208, 209, 210, 211, 228, 229, 231, 232, 233, 234, 244, 245, 254, 257, 259, 262, 267, 268, 281, 282, 287, 288, 301, 305, 317, 320, 321, 323, 328, 329, 331, 335, 336, 339, 340, 344, 350, 351, 352, 356, 357, 358, 362, 363, 369, 370, 372, 375, 377, 379, 381, 383, 388, 389, 393, 398, 401, 405, 406, 407, 408, 410, 411, 412, 414, 415, 416, 420, 424, 427, 430, 432, 437, 447, 448, 450, 456, 463, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 496, 497, 514, 515, 516, 520, 521, 526, 531, 533, 535, 542, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 568, 569, 570, 571, 592, 593, 596, 609, 610, 613, 614, 630, 631, 633, 634, 635, 636, 638, 642, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 695, 698, 699, 707, 713, 719, 720, 729, 739, 740, 758, 759, 760, 770, 791, 792, 797, 798, 802, 803, 806, 807, 817, 825, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 853, 854, 857, 858, 863, 864, 865, 873, 876, 877, 878, 880, 881, 887, 888, 900, 902, 903, 907, 908, 909, 910, 912, 913, 915, 916, 917, 918, 926, 951, 952, 967, 993, 996, 998, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1014, 1018, 1019, 1020, 1025, 1029, 1030, 1035, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "t0": [46, 48, 51, 55, 56, 75, 78, 80, 81, 84, 86, 92, 96, 98, 124, 196, 197, 225, 226, 227, 232, 235, 237, 241, 243, 269, 324, 350, 351, 352, 679, 680, 681], "t1": [80, 81, 96, 225, 232, 235, 237], "t15h": 1041, "t_": [669, 670, 671, 679, 680, 681, 864, 865, 1018], "t_0": 1018, "t_batch": 98, "t_i": 1006, "t_k": [414, 1004, 1020], "t_m": 1020, "t_mini_batch": [78, 98], "t_p": 275, "t_post": 268, "t_sne": [230, 1042], "t_stat": 268, "t_stat_uncorrect": 268, "t_t": 1020, "taa": 177, "taac": 177, "tab": [47, 49, 71, 87, 112, 135, 150, 152, 155, 169, 174, 176, 198, 200, 207, 262, 318, 324, 408, 1041], "tab10": [242, 258], "tab20b": 44, "taba": 1053, "tabea": [1049, 1050], "tabibian": 1040, "tabl": [92, 228, 268, 375, 376, 384, 407, 415, 584, 661, 683, 803, 817, 844, 968, 1000, 1004, 1005, 1010, 1023, 1035], "tabular": [44, 53, 186, 377, 414, 1012, 1023], "tacit": 389, "tacitli": 1036, "tackl": [148, 268, 363, 375, 407, 844, 1006, 1028], "tadej": [1035, 1036], "tae": 1046, "taehoon": [1041, 1042], "taemin": 1000, "tag": [2, 48, 83, 104, 237, 326, 330, 369, 374, 378, 379, 383, 387, 389, 403, 415, 424, 425, 426, 429, 430, 497, 835, 923, 924, 925, 927, 928, 956, 987, 992, 1024, 1027, 1039, 1043, 1044, 1045, 1048, 1049, 1050, 1051, 1053], "tags_orig": 377, "tahar": 1041, "tahiri": 1046, "taifi": 1040, "tail": [53, 147, 181, 185, 210, 212, 268, 308, 522, 525, 1000], "tail_strength": [325, 522, 525], "takanori": 1042, "take": [2, 45, 48, 53, 59, 67, 81, 87, 89, 91, 100, 108, 112, 119, 121, 135, 143, 169, 171, 174, 178, 185, 190, 214, 218, 219, 234, 244, 255, 256, 262, 263, 269, 273, 277, 278, 287, 288, 291, 294, 295, 296, 298, 299, 308, 321, 325, 326, 331, 335, 336, 339, 348, 351, 352, 355, 362, 363, 364, 369, 370, 373, 375, 377, 380, 381, 382, 383, 387, 389, 390, 398, 405, 406, 407, 408, 410, 411, 412, 414, 415, 416, 417, 419, 437, 443, 446, 447, 449, 450, 452, 457, 458, 459, 461, 463, 469, 520, 534, 539, 540, 541, 547, 548, 583, 594, 597, 598, 600, 601, 602, 612, 613, 614, 619, 623, 624, 627, 635, 646, 652, 674, 676, 677, 678, 679, 682, 694, 695, 702, 708, 710, 712, 722, 732, 733, 741, 746, 759, 774, 777, 781, 782, 783, 784, 786, 787, 790, 791, 803, 804, 808, 809, 817, 821, 831, 849, 850, 851, 853, 855, 856, 857, 858, 859, 871, 881, 902, 903, 907, 908, 909, 910, 911, 912, 913, 924, 937, 946, 973, 993, 996, 1000, 1001, 1003, 1004, 1005, 1007, 1009, 1010, 1011, 1014, 1019, 1020, 1028, 1031, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053], "takeawai": 287, "taken": [38, 44, 47, 68, 78, 87, 89, 149, 165, 174, 185, 241, 242, 256, 274, 285, 310, 370, 372, 374, 375, 379, 389, 407, 411, 415, 419, 440, 534, 562, 563, 585, 586, 649, 650, 653, 655, 656, 657, 661, 662, 663, 664, 665, 666, 680, 682, 684, 687, 698, 880, 881, 901, 904, 910, 911, 962, 1004, 1006, 1014, 1016, 1040, 1043, 1046, 1047], "takeshi": [1042, 1047, 1048, 1049], "takeuchi": 370, "takingitcasu": [1042, 1043], "talbot": 273, "talgatomarov": 1045, "talk": [58, 103, 269, 350, 351, 352, 370, 389, 401, 1028, 1030], "talli": 413, "tallott": 1042, "talwalkar": 993, "tamara": [370, 1051, 1053], "tamer": 1049, "tami": 92, "tamir": [1045, 1048], "tamirlan1": 1045, "tamper": 48, "tampermonkei": 383, "tan": [864, 865, 1008, 1041], "tandfonlin": 407, "tang": [372, 1044, 1045, 1046], "tangent": [230, 343, 692, 696, 1002, 1029, 1030], "tangibl": 1004, "tanh": [343, 780, 864, 865, 1002, 1019], "tanjina": 1051, "tann": [1042, 1047], "tao": [1050, 1051], "tar": [48, 379], "taranjeet": 1040, "tarashanski": 1051, "tarbal": [379, 1049], "tarcusx": 1042, "tarfil": 48, "target": [2, 44, 46, 53, 56, 58, 64, 67, 69, 70, 86, 102, 104, 106, 107, 117, 125, 127, 129, 136, 143, 144, 145, 147, 148, 150, 152, 154, 155, 156, 158, 160, 163, 165, 169, 171, 174, 175, 181, 182, 184, 185, 186, 187, 192, 196, 204, 207, 210, 212, 214, 215, 218, 219, 231, 238, 240, 241, 242, 243, 246, 247, 248, 249, 255, 261, 262, 264, 266, 269, 271, 273, 274, 277, 278, 282, 285, 287, 288, 291, 296, 299, 300, 304, 307, 308, 318, 319, 321, 323, 328, 329, 332, 333, 335, 336, 339, 343, 345, 350, 351, 355, 357, 358, 362, 364, 367, 368, 369, 370, 371, 372, 375, 377, 379, 380, 383, 384, 388, 392, 401, 407, 410, 411, 414, 417, 431, 437, 438, 439, 442, 445, 464, 465, 482, 483, 484, 485, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 501, 502, 503, 504, 505, 506, 509, 511, 521, 525, 532, 533, 535, 537, 538, 540, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 568, 569, 570, 571, 574, 584, 585, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 630, 631, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 687, 688, 689, 690, 700, 701, 703, 704, 705, 710, 711, 712, 715, 716, 721, 723, 724, 726, 727, 729, 730, 731, 732, 733, 738, 741, 742, 743, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 785, 786, 787, 788, 790, 791, 792, 793, 794, 797, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 854, 856, 857, 858, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 879, 880, 881, 882, 884, 885, 886, 887, 888, 891, 896, 899, 900, 902, 903, 904, 905, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 926, 927, 933, 965, 966, 967, 992, 995, 996, 997, 1000, 1001, 1004, 1008, 1011, 1012, 1018, 1019, 1020, 1024, 1025, 1027, 1028, 1030, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "target_class": 313, "target_column": [489, 490, 497], "target_encod": 315, "target_filenam": [502, 506], "target_gener": 175, "target_idx": 635, "target_mean_": [888, 1014], "target_nam": [46, 58, 67, 86, 125, 127, 129, 184, 219, 231, 255, 261, 269, 277, 278, 291, 314, 332, 350, 355, 368, 370, 488, 489, 491, 493, 494, 495, 497, 498, 501, 503, 504, 505, 506, 511, 716, 1004, 1020, 1044], "target_opset": 401, "target_tag": [377, 926], "target_test": [262, 510], "target_train": [262, 510], "target_typ": [314, 888, 937, 966, 1051], "target_type_": 888, "targetencod": [2, 314, 315, 389, 880, 881, 994, 1014, 1023, 1050, 1051], "targetencodertargetencod": 314, "targets_test": 242, "targets_train": 242, "targettag": [2, 926], "tari": 92, "tashai": [1042, 1043], "task": [2, 39, 44, 47, 124, 142, 148, 150, 164, 177, 182, 191, 196, 197, 199, 200, 209, 210, 226, 230, 247, 262, 265, 282, 287, 343, 352, 362, 364, 370, 372, 374, 375, 380, 381, 384, 387, 388, 389, 412, 414, 415, 416, 417, 448, 461, 494, 506, 516, 594, 597, 598, 600, 601, 602, 606, 607, 608, 611, 635, 636, 649, 650, 655, 656, 663, 664, 665, 666, 677, 684, 687, 730, 732, 733, 757, 785, 787, 790, 792, 804, 808, 821, 827, 969, 970, 1001, 1004, 1005, 1006, 1007, 1015, 1017, 1019, 1020, 1022, 1024, 1025, 1026, 1027, 1028, 1030, 1034, 1039, 1043, 1049], "tast": 1034, "tata": 1051, "tau": 1014, "tau_0": 537, "tavenard": 1046, "tax": 0, "taxonom": 372, "taylor": [414, 1042, 1044, 1045, 1048], "tb": 383, "tc": [165, 372, 390], "tcg": 177, "tch": [165, 372], "tcompl": 92, "tcpdump": 370, "tda": 1023, "teach": 375, "teacher": 103, "teal": [211, 220, 275], "team": [370, 378, 387, 389, 390, 1023, 1028, 1034], "teas": 185, "tech": [52, 372, 845], "technic": [177, 185, 211, 231, 321, 370, 372, 375, 377, 389, 414, 655, 667, 688, 689, 902, 993, 1000, 1001, 1007], "technion": [667, 688, 689, 1000], "techniqu": [11, 27, 52, 57, 103, 105, 123, 127, 131, 136, 145, 164, 165, 181, 182, 184, 207, 218, 232, 234, 273, 285, 292, 320, 329, 343, 354, 364, 372, 387, 389, 401, 405, 407, 411, 412, 413, 414, 415, 416, 447, 448, 449, 450, 535, 555, 680, 692, 693, 696, 697, 729, 759, 996, 1000, 1001, 1003, 1004, 1007, 1010, 1012, 1016, 1018, 1020, 1024, 1028, 1047], "technolog": 372, "technologi": [165, 372, 407, 1023, 1028], "technometr": [372, 409, 469, 474, 1010], "tediou": [155, 262], "teen": 1014, "teevan": [844, 1006], "teh": [863, 1009], "tejesh95": 1038, "telecom": 1028, "telenczuk": [165, 1043, 1046, 1047, 1049], "tell": [169, 185, 186, 244, 268, 326, 339, 344, 363, 370, 407, 415, 564, 581, 993, 998, 1004, 1011], "temp": [44, 186], "temp_fold": 969, "temperatur": [186, 415, 1011], "tempfil": [88, 290, 317, 408, 1007], "templat": [375, 379, 380, 389, 390, 558, 559, 564, 565, 566, 567, 1023], "templateclassifi": 377, "tempor": [53, 150, 196, 1023, 1024], "temporari": [88, 103, 105, 362, 403, 468, 690, 784, 905, 1007, 1037, 1038, 1041, 1047, 1048], "temporarili": [407, 1039], "temporarydirectori": [290, 317], "tempt": 185, "temptat": [358, 375], "ten": [55, 58, 135, 141, 150, 165, 231, 259, 370, 372, 414, 521, 912, 1043], "tenavi": 1048, "tend": [44, 52, 65, 73, 75, 79, 86, 89, 91, 163, 165, 185, 186, 200, 210, 215, 228, 247, 253, 256, 265, 269, 281, 287, 306, 343, 352, 362, 364, 375, 377, 389, 405, 407, 409, 412, 414, 416, 437, 448, 656, 853, 884, 896, 951, 1000, 1001, 1007, 1020], "tendenc": [150, 235, 356, 1000, 1001, 1003, 1006, 1009], "tenenbaum": [691, 1001], "tenenhau": 372, "tensor": [2, 190, 367, 403, 412, 539, 541, 548, 642, 643, 644, 1030, 1046, 1052, 1053], "tensorflow": [46, 387], "tensorsketch": 996, "tent": 381, "tenur": 1028, "teon": 1046, "terenc": [1046, 1047], "term": [2, 44, 54, 55, 63, 69, 92, 126, 138, 141, 144, 147, 174, 184, 196, 198, 199, 200, 210, 212, 214, 224, 227, 228, 247, 262, 266, 270, 288, 303, 320, 343, 346, 350, 352, 364, 375, 377, 387, 405, 407, 409, 411, 412, 414, 443, 447, 449, 452, 459, 462, 525, 536, 539, 541, 545, 548, 550, 590, 591, 592, 593, 606, 609, 610, 635, 636, 643, 645, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 671, 672, 673, 675, 676, 677, 678, 679, 681, 683, 690, 698, 733, 741, 786, 787, 790, 864, 865, 882, 886, 889, 907, 908, 909, 910, 911, 912, 913, 993, 995, 996, 998, 999, 1000, 1001, 1004, 1005, 1006, 1008, 1009, 1014, 1018, 1019, 1042, 1048, 1049, 1050], "term1": 415, "term2": 415, "term3": 415, "termin": [363, 380, 381, 383, 393, 407, 421, 448, 461, 554, 555, 559, 560, 561, 564, 566, 669, 670, 671, 679, 681, 864, 865, 916, 918, 1010, 1020], "terminalipythonapp": 381, "terminalpdb": 383, "termination_condition_": 904, "terminologi": [389, 1042], "terraza": 1046, "terri": 1038, "terrycojon": 1038, "tesson": 407, "test": [2, 44, 46, 48, 50, 51, 53, 62, 63, 64, 65, 68, 69, 70, 103, 104, 116, 126, 135, 138, 140, 141, 142, 146, 147, 148, 149, 150, 159, 161, 164, 169, 170, 182, 184, 185, 186, 187, 188, 190, 196, 200, 204, 206, 207, 210, 211, 212, 214, 215, 217, 218, 225, 226, 228, 234, 238, 243, 244, 246, 255, 260, 261, 262, 263, 266, 267, 268, 269, 270, 272, 273, 275, 276, 278, 279, 280, 282, 287, 291, 296, 297, 303, 305, 310, 313, 314, 315, 324, 326, 332, 339, 346, 352, 356, 358, 362, 363, 369, 370, 372, 378, 379, 380, 381, 387, 388, 389, 392, 393, 400, 402, 403, 405, 406, 408, 409, 412, 414, 415, 416, 417, 424, 426, 427, 430, 433, 434, 435, 436, 437, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 488, 489, 494, 498, 499, 503, 505, 525, 532, 538, 540, 544, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 568, 569, 570, 571, 576, 594, 596, 597, 598, 600, 601, 602, 604, 606, 607, 608, 610, 611, 613, 614, 630, 631, 633, 638, 639, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 715, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 854, 857, 858, 864, 865, 867, 892, 893, 895, 896, 897, 898, 902, 903, 905, 907, 908, 909, 910, 912, 913, 915, 916, 917, 918, 923, 924, 925, 926, 932, 942, 944, 945, 946, 999, 1000, 1003, 1004, 1007, 1008, 1012, 1014, 1018, 1019, 1020, 1023, 1024, 1025, 1027, 1028, 1030, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1053], "test_": [53, 155, 411], "test_0": 44, "test_4": 44, "test_accuraci": [255, 269, 282], "test_auc": 830, "test_ax": 126, "test_balanced_accuraci": 282, "test_best_it": 146, "test_check_estim": 946, "test_color": 146, "test_common": [375, 383], "test_dataset": 369, "test_devi": 149, "test_enable_hist_gradient_boost": 379, "test_fn": 1004, "test_fold": [411, 816], "test_fract": 1034, "test_idx": [53, 389], "test_import": 187, "test_index": [255, 331, 411, 804, 805, 808, 810, 811, 812, 813, 816, 818, 819, 820, 821, 822, 823, 824], "test_indx": 411, "test_lin": 146, "test_logist": [375, 383], "test_ms": 324, "test_neg_mean_absolute_error": [44, 212], "test_neg_mean_squared_error": [212, 830], "test_neg_root_mean_squared_error": 44, "test_negative_likelihood_ratio": 271, "test_positive_likelihood_ratio": 271, "test_prec_macro": 411, "test_precision_macro": 411, "test_r2": 830, "test_rec_macro": 411, "test_recall_macro": 411, "test_requiring_mpl_fixtur": 375, "test_result": [187, 944], "test_scor": [144, 146, 148, 150, 218, 267, 270, 281, 285, 314, 346, 354, 388, 411, 809, 826, 830, 831, 834], "test_scores_mean": 281, "test_scores_nb": 270, "test_scores_svm": 270, "test_set": 405, "test_siz": [44, 45, 46, 50, 53, 62, 63, 65, 68, 69, 104, 140, 145, 146, 148, 149, 150, 154, 184, 190, 196, 206, 207, 210, 217, 218, 225, 226, 262, 265, 266, 270, 275, 277, 281, 287, 296, 297, 303, 305, 306, 310, 312, 313, 319, 339, 346, 358, 380, 411, 701, 805, 820, 823, 824, 833, 835, 856, 994, 1006, 1007, 1034, 1035, 1040, 1041, 1046], "test_sklearn_compatible_estim": [317, 946], "test_sparsifi": 383, "test_stat": 48, "test_tim": [243, 350], "test_tp": 1004, "test_val": 376, "test_your_test_nam": 363, "tested_neg": 282, "tested_posit": 282, "testenv": 322, "testpypi": 379, "teunp": 1048, "texa": [52, 103], "text": [2, 43, 46, 47, 50, 51, 52, 55, 56, 58, 68, 69, 73, 76, 80, 87, 91, 92, 94, 95, 96, 98, 103, 112, 113, 116, 141, 145, 163, 188, 193, 205, 206, 237, 241, 248, 249, 253, 255, 260, 267, 268, 274, 275, 279, 293, 296, 298, 303, 310, 320, 327, 329, 345, 354, 362, 364, 367, 368, 369, 375, 380, 387, 389, 395, 405, 407, 408, 410, 411, 412, 414, 417, 447, 449, 464, 468, 487, 488, 489, 500, 504, 509, 522, 537, 545, 565, 590, 591, 592, 593, 618, 628, 655, 661, 669, 671, 677, 679, 700, 706, 708, 710, 716, 720, 732, 733, 740, 796, 798, 803, 817, 833, 842, 844, 846, 849, 854, 867, 868, 870, 871, 879, 903, 904, 905, 907, 919, 920, 921, 948, 993, 996, 1000, 1002, 1004, 1005, 1006, 1008, 1011, 1014, 1016, 1018, 1019, 1022, 1024, 1025, 1028, 1030, 1034, 1035, 1036, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "text1": 415, "text2": 415, "text2d": 234, "text3": 415, "text_": 700, "text_kw": [700, 1049], "text_preprocess": 464, "text_stat": 103, "text_stats_transform": 103, "textbook": [415, 592], "textcoord": [49, 190], "textrm": 1019, "texttt": 1004, "textual": [412, 421, 1020, 1043], "textur": [165, 372, 761, 762, 1002], "tf": [2, 55, 58, 241, 350, 351, 352, 370, 412, 522, 545, 590, 591, 592, 593, 846, 854, 879, 993, 1002, 1006, 1014, 1023], "tf_feature_nam": 55, "tf_vector": 55, "tfid": 592, "tfidf": [55, 103, 332, 415, 593], "tfidf_feature_nam": 55, "tfidf_vector": 55, "tfidftransform": [2, 332, 351, 352, 415, 489, 593, 1041, 1042, 1048, 1050, 1051, 1052], "tfidfvector": [2, 55, 58, 103, 269, 350, 370, 412, 415, 489, 590, 591, 592, 1034, 1036, 1042, 1043, 1044, 1047, 1048, 1052, 1053], "tfidfvectorizertfidfvector": 269, "tfifi": 1047, "tfrac": 417, "tgct": 177, "tgz": 46, "th": [135, 320, 357, 388, 407, 411, 414, 422, 441, 445, 446, 451, 453, 459, 463, 472, 551, 558, 559, 560, 561, 562, 563, 565, 566, 567, 595, 596, 635, 651, 652, 672, 674, 683, 699, 721, 783, 824, 888, 938, 994, 1000, 1004, 1008, 1011, 1018, 1019, 1049], "th0rwa": [1044, 1045], "thakur": [1037, 1038], "thaler": 1040, "than": [2, 26, 44, 45, 47, 51, 52, 54, 58, 65, 67, 68, 76, 80, 82, 87, 89, 105, 108, 112, 114, 117, 119, 121, 124, 126, 128, 135, 137, 138, 140, 141, 142, 143, 144, 147, 150, 163, 165, 169, 175, 180, 185, 186, 187, 190, 192, 196, 197, 200, 203, 210, 212, 216, 226, 227, 228, 234, 237, 243, 244, 245, 247, 254, 262, 265, 266, 268, 269, 270, 271, 274, 277, 282, 285, 287, 288, 294, 295, 306, 308, 312, 313, 314, 315, 319, 321, 323, 325, 329, 343, 350, 351, 352, 358, 362, 363, 364, 369, 370, 371, 373, 374, 375, 377, 380, 381, 383, 389, 390, 401, 403, 404, 405, 406, 407, 409, 410, 411, 412, 414, 415, 416, 417, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 452, 454, 457, 460, 463, 464, 467, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 494, 495, 497, 510, 515, 516, 524, 532, 535, 536, 537, 538, 539, 541, 542, 543, 545, 548, 549, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 574, 583, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 613, 614, 630, 631, 633, 637, 643, 645, 646, 647, 649, 650, 655, 656, 658, 661, 662, 663, 664, 665, 666, 669, 670, 671, 674, 675, 677, 679, 680, 681, 682, 685, 690, 695, 697, 699, 707, 708, 710, 715, 723, 724, 725, 726, 727, 730, 738, 739, 742, 743, 767, 782, 783, 784, 785, 786, 788, 792, 798, 800, 801, 803, 806, 807, 813, 817, 822, 824, 825, 828, 829, 830, 831, 832, 835, 837, 838, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 851, 853, 855, 856, 857, 858, 859, 861, 864, 865, 867, 868, 870, 880, 881, 882, 884, 885, 887, 890, 896, 897, 901, 904, 907, 908, 909, 912, 913, 915, 916, 917, 918, 919, 924, 939, 951, 953, 954, 960, 966, 972, 974, 977, 993, 994, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1014, 1018, 1019, 1020, 1023, 1024, 1027, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "thanh": 1052, "thank": [0, 44, 56, 63, 89, 117, 187, 190, 210, 277, 350, 351, 374, 383, 1023, 1028, 1034, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "tharak": 1051, "thebabush": [1051, 1052], "thedevpanda": 1049, "thei": [0, 8, 26, 31, 32, 44, 53, 64, 73, 84, 91, 114, 123, 133, 136, 142, 144, 146, 148, 150, 151, 161, 164, 165, 169, 170, 174, 185, 186, 196, 197, 200, 206, 210, 211, 228, 231, 234, 237, 243, 244, 247, 261, 265, 268, 269, 271, 277, 282, 285, 288, 290, 304, 308, 313, 319, 321, 343, 350, 351, 356, 358, 362, 363, 364, 368, 370, 371, 372, 373, 374, 375, 376, 377, 379, 383, 384, 387, 388, 389, 390, 398, 401, 404, 406, 407, 408, 409, 410, 412, 414, 416, 417, 419, 440, 442, 446, 453, 454, 467, 497, 509, 510, 534, 536, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 599, 613, 622, 632, 646, 649, 650, 655, 661, 662, 663, 664, 665, 673, 675, 679, 681, 684, 690, 765, 766, 768, 771, 777, 792, 803, 817, 836, 842, 843, 844, 845, 846, 854, 864, 867, 869, 875, 886, 887, 909, 912, 915, 916, 917, 918, 922, 993, 994, 996, 998, 1000, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1018, 1019, 1020, 1028, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1053], "theil": [2, 151, 182, 191, 213, 216, 308, 652, 660, 674, 681, 682, 1025], "theilsen": 216, "theilsenregressor": [2, 216, 227, 652, 674, 681, 1000, 1038, 1046, 1048, 1053], "theirs": [350, 375], "them": [16, 44, 45, 48, 69, 75, 76, 83, 87, 89, 90, 94, 99, 100, 103, 104, 117, 121, 123, 126, 136, 151, 160, 165, 169, 180, 181, 185, 186, 187, 190, 192, 196, 199, 206, 211, 212, 214, 228, 241, 244, 247, 248, 262, 266, 268, 269, 271, 277, 281, 285, 290, 308, 313, 315, 320, 326, 332, 339, 352, 357, 362, 364, 370, 375, 376, 377, 378, 379, 383, 387, 389, 390, 392, 398, 401, 405, 406, 407, 408, 411, 412, 414, 415, 417, 444, 447, 449, 450, 457, 464, 467, 494, 495, 509, 568, 569, 570, 571, 606, 609, 610, 619, 623, 624, 627, 635, 642, 667, 695, 771, 774, 777, 781, 782, 783, 784, 792, 803, 817, 824, 832, 867, 868, 871, 876, 877, 881, 885, 887, 888, 897, 898, 904, 915, 916, 944, 945, 946, 960, 969, 993, 994, 1000, 1003, 1004, 1005, 1007, 1008, 1009, 1014, 1019, 1020, 1022, 1023, 1027, 1028, 1034, 1035, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "themat": 389, "theme": [370, 375, 393, 400, 1034], "themrmax": [1040, 1041], "themselv": [65, 185, 308, 371, 377, 383, 389, 398, 404, 407, 414, 415, 417, 446, 618, 795, 1020, 1044], "theodor": 1039, "theofilo": 1041, "theoptip": [1044, 1045], "theorem": [33, 169, 346, 1006], "theoret": [38, 73, 91, 169, 262, 407, 414, 554, 555, 642, 707, 729, 759, 907, 993, 1000, 1001, 1003, 1004, 1006, 1016, 1018, 1019, 1028], "theori": [8, 144, 243, 258, 346, 372, 407, 411, 414, 693, 697, 729, 759, 899, 900, 951, 993, 1000, 1001, 1003, 1004, 1005, 1019, 1020], "theotheo": 1044, "thereaft": [185, 192], "therebi": [44, 185, 411, 414, 996, 1004, 1044], "therefor": [44, 49, 54, 59, 62, 65, 71, 73, 86, 87, 104, 105, 108, 112, 117, 126, 130, 135, 138, 140, 147, 150, 153, 155, 164, 184, 187, 203, 207, 210, 214, 226, 227, 253, 258, 259, 262, 269, 271, 281, 282, 285, 287, 291, 305, 308, 313, 328, 339, 346, 347, 350, 351, 357, 362, 369, 373, 377, 380, 387, 398, 401, 403, 407, 408, 409, 411, 412, 414, 415, 437, 536, 542, 550, 552, 554, 555, 560, 561, 565, 566, 606, 608, 661, 662, 668, 671, 674, 679, 681, 682, 704, 715, 738, 760, 800, 867, 868, 880, 884, 888, 896, 923, 994, 998, 1000, 1001, 1004, 1006, 1007, 1008, 1009, 1012, 1014, 1019, 1020, 1024, 1043, 1044, 1047, 1048, 1049, 1050, 1051], "therein": 671, "thereof": 389, "theriley106": 1042, "thesi": [0, 372, 407, 414], "theta": [170, 171, 173, 175, 177, 178, 245, 412, 417, 524, 537, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 695, 1006, 1020], "theta0": 170, "theta1": 170, "theta_": [845, 1006], "theta_c": [245, 524], "theta_d": 412, "theta_i": 1006, "theta_l": 417, "theta_opt": [613, 614], "thi": [0, 2, 7, 11, 31, 32, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 184, 185, 186, 187, 188, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 358, 362, 363, 364, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 387, 388, 389, 390, 392, 393, 395, 398, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 482, 483, 484, 485, 487, 489, 490, 494, 495, 497, 498, 499, 500, 502, 503, 504, 506, 509, 510, 516, 517, 518, 519, 520, 521, 522, 524, 525, 527, 528, 529, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 574, 575, 577, 579, 581, 582, 583, 584, 585, 586, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 702, 703, 704, 705, 706, 707, 709, 710, 712, 714, 715, 716, 717, 719, 720, 721, 723, 724, 725, 726, 727, 729, 730, 731, 732, 733, 735, 739, 740, 741, 742, 743, 744, 746, 751, 757, 758, 759, 760, 761, 762, 764, 765, 766, 768, 771, 772, 777, 781, 782, 783, 784, 785, 786, 787, 788, 790, 791, 792, 795, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 922, 923, 924, 926, 927, 928, 929, 933, 934, 939, 940, 942, 944, 945, 946, 951, 953, 956, 959, 960, 961, 962, 963, 964, 966, 969, 970, 973, 974, 977, 978, 987, 992, 993, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1027, 1028, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "thibault": 1043, "thibaut": 1048, "thibsej": 1043, "thick": [94, 298, 1007], "thierno": 1044, "thierri": [0, 1028, 1040, 1041, 1048], "thij": [1046, 1049, 1050], "thin": [232, 623], "thing": [49, 71, 231, 263, 350, 363, 364, 370, 374, 375, 377, 387, 390, 407, 409, 415, 560, 561, 1000, 1014, 1028, 1040], "think": [45, 73, 185, 186, 350, 351, 375, 377, 383, 413, 1003, 1024, 1028], "thinner": 101, "third": [71, 143, 148, 160, 165, 177, 228, 237, 259, 285, 293, 310, 323, 363, 370, 374, 377, 387, 390, 401, 415, 535, 590, 591, 592, 593, 805, 806, 807, 812, 849, 850, 851, 853, 855, 885, 897, 993, 1015, 1034, 1045, 1050, 1051, 1053], "thirion": [0, 397, 1034, 1040, 1041, 1047], "thirteen": 372, "thirti": 1022, "thiruvenkadam": 1048, "this_centroid": 78, "this_cov": 114, "this_cv": 263, "this_di": 52, "this_dx": 52, "this_i": [62, 216], "this_max_it": 225, "this_p": 64, "this_prec": 114, "this_scor": 342, "this_sw": 62, "this_x": [62, 208, 216], "thoma": [0, 128, 363, 365, 390, 396, 403, 903, 1000, 1014, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "thomas9292": 1046, "thomaz": 1045, "thomo": 92, "thompson": [1037, 1049, 1050], "thorben": 1046, "thorbenmaa": 1053, "thorough": 1028, "thoroughli": 1009, "thorsten": 1028, "those": [44, 47, 52, 56, 58, 89, 94, 104, 136, 147, 150, 163, 165, 184, 185, 186, 187, 188, 207, 210, 212, 214, 228, 235, 241, 244, 246, 247, 259, 261, 262, 268, 271, 274, 285, 304, 308, 313, 325, 336, 339, 350, 351, 352, 362, 363, 369, 375, 377, 379, 380, 381, 382, 387, 389, 390, 393, 404, 405, 406, 407, 411, 412, 414, 415, 417, 448, 450, 461, 464, 468, 495, 496, 497, 504, 558, 559, 565, 566, 570, 571, 583, 695, 700, 715, 721, 739, 803, 806, 807, 815, 817, 824, 849, 850, 851, 853, 855, 856, 857, 858, 859, 907, 908, 909, 912, 915, 916, 917, 918, 963, 993, 996, 1000, 1003, 1004, 1006, 1007, 1008, 1011, 1014, 1020, 1022, 1023, 1028, 1034, 1037, 1040, 1041, 1042, 1047, 1048, 1049, 1050, 1051, 1052], "though": [89, 141, 165, 190, 192, 247, 274, 293, 310, 312, 351, 352, 358, 362, 369, 372, 375, 379, 388, 389, 407, 412, 413, 414, 415, 416, 702, 810, 812, 907, 993, 994, 996, 1001, 1004, 1007, 1012, 1014, 1018, 1042], "thought": [230, 293, 389, 407, 446, 1001, 1005], "thoui": [0, 397, 1034], "thousand": [78, 141, 150, 241, 243, 312, 351, 370, 407, 414, 864, 865, 912, 1001, 1043, 1045], "thread": [288, 318, 321, 373, 375, 387, 389, 407, 414, 564, 839, 840, 969, 970, 1037, 1039, 1041, 1042, 1043, 1044, 1045, 1047, 1049, 1050, 1051], "threadpoolctl": [42, 363, 373, 393, 400], "threadsaf": 1047, "three": [44, 47, 64, 71, 76, 77, 81, 89, 92, 110, 127, 135, 140, 142, 144, 145, 146, 156, 157, 158, 162, 165, 167, 177, 185, 196, 203, 210, 212, 219, 221, 243, 244, 253, 256, 287, 314, 315, 318, 363, 368, 371, 372, 379, 393, 401, 404, 407, 411, 412, 413, 415, 451, 462, 499, 712, 953, 997, 999, 1000, 1001, 1004, 1007, 1014, 1018, 1019, 1022, 1034], "three_d_arrai": 924, "thresh": 1038, "threshold": [2, 51, 63, 78, 99, 119, 124, 130, 165, 182, 186, 188, 206, 238, 240, 260, 265, 266, 267, 272, 275, 287, 323, 324, 326, 327, 355, 357, 389, 402, 407, 412, 414, 416, 441, 442, 445, 446, 469, 497, 501, 509, 510, 532, 538, 543, 549, 550, 551, 552, 562, 564, 590, 593, 595, 599, 604, 605, 612, 647, 661, 670, 674, 679, 681, 695, 701, 703, 705, 706, 709, 710, 721, 723, 729, 730, 742, 743, 745, 759, 785, 787, 790, 791, 792, 797, 800, 801, 802, 803, 822, 825, 833, 842, 853, 854, 868, 870, 872, 874, 887, 890, 902, 903, 904, 905, 912, 919, 921, 977, 1000, 1004, 1007, 1008, 1010, 1014, 1017, 1019, 1020, 1025, 1030, 1034, 1038, 1039, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1050, 1051, 1052, 1053], "threshold_": [599, 1041], "threshold_classifi": [167, 326], "threshold_lambda": 647, "threshold_sign": 357, "thriller": [415, 878], "thrive": [0, 375], "throat": [51, 301, 370, 499], "through": [0, 2, 47, 53, 71, 140, 165, 177, 185, 214, 230, 242, 263, 268, 271, 293, 312, 313, 326, 337, 344, 352, 357, 372, 375, 377, 382, 384, 387, 389, 390, 393, 398, 406, 407, 410, 412, 414, 416, 417, 424, 425, 426, 429, 430, 446, 464, 467, 472, 536, 542, 558, 559, 562, 565, 566, 567, 583, 595, 596, 599, 650, 654, 656, 658, 661, 662, 664, 666, 668, 671, 679, 680, 691, 694, 723, 809, 826, 867, 868, 883, 895, 899, 900, 915, 916, 917, 918, 958, 961, 993, 994, 1001, 1004, 1006, 1007, 1008, 1010, 1012, 1014, 1018, 1019, 1020, 1028, 1034, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053], "throughout": [323, 358, 389, 630, 804, 864, 865, 1037, 1042], "throughput": [361, 1023, 1030, 1037], "throw": [2, 305, 384, 932, 1038, 1041, 1042, 1043, 1044, 1048], "thrown": [714, 1043, 1044], "thu": [44, 45, 62, 63, 64, 65, 76, 87, 89, 94, 110, 114, 124, 126, 138, 140, 141, 144, 150, 161, 169, 174, 175, 186, 196, 198, 200, 203, 210, 212, 228, 237, 243, 248, 255, 262, 266, 268, 273, 274, 275, 281, 282, 291, 315, 317, 320, 354, 358, 362, 363, 370, 377, 381, 387, 389, 398, 405, 406, 407, 411, 412, 414, 415, 417, 418, 437, 439, 463, 516, 528, 554, 555, 556, 557, 558, 559, 564, 565, 566, 567, 605, 608, 613, 625, 630, 635, 636, 646, 648, 661, 680, 708, 721, 728, 749, 791, 798, 803, 805, 810, 812, 817, 824, 838, 841, 876, 907, 995, 996, 997, 998, 999, 1000, 1001, 1004, 1005, 1010, 1011, 1014, 1016, 1017, 1018, 1019, 1024, 1028, 1034, 1036, 1040, 1042, 1043, 1044, 1046, 1050], "thuan": 1045, "thukarama": 1049, "thumb": [13, 141, 190, 362, 375, 376, 387, 407, 661, 662, 669, 670, 671, 679, 680, 681, 907, 1004], "thumbnail": 1034, "th\u00e9ophil": 1050, "ti": [103, 210, 255, 258, 266, 347, 362, 383, 405, 407, 601, 602, 638, 723, 729, 759, 800, 801, 909, 912, 915, 1003, 1004, 1019, 1035, 1037, 1038, 1042, 1044, 1048, 1049, 1050], "tiago": [1035, 1039], "tialo": [1051, 1052, 1053], "tian": [407, 442, 1039, 1040, 1041], "tianqi": 414, "tiao": [1039, 1040], "tib": [685, 686], "tibshirani": [138, 139, 149, 165, 198, 267, 372, 411, 414, 521, 560, 561, 631, 659, 724, 726, 727, 837, 854, 915, 916, 994, 998, 1000, 1005, 1011, 1020], "tic": [165, 186, 247, 279, 1006], "tic_bwd": 165, "tic_fwd": 165, "ticconi": 1040, "tick": [48, 79, 94, 172, 248, 279, 375, 635, 831], "tick_bottom": 308, "tick_label": [148, 188, 317], "tick_labels_dict": [148, 188, 317], "tick_labels_parameter_nam": [148, 188, 317], "tick_left": 308, "tick_param": [47, 55, 158, 253, 268, 312, 331], "tick_right": 47, "ticker": [230, 232, 235, 288], "ticket": [322, 375], "tidelift": 0, "tie": [182, 334, 387, 414, 513, 835, 909, 912, 1005, 1019, 1020, 1025, 1035, 1050], "tieleman": [863, 1009], "tien": 1039, "tiernei": [1042, 1043, 1044], "tight": [76, 130, 137, 143, 161, 199, 204, 205, 215, 219, 222, 227, 232, 235, 257, 288, 294, 295, 299, 300, 335, 339, 342, 344, 355, 584, 695, 1046], "tight_layout": [46, 48, 63, 65, 68, 76, 86, 89, 99, 106, 108, 117, 121, 122, 123, 131, 135, 137, 142, 143, 145, 148, 153, 155, 157, 171, 173, 178, 180, 184, 185, 187, 188, 192, 193, 196, 201, 208, 210, 218, 221, 225, 228, 230, 242, 247, 263, 264, 280, 287, 288, 290, 300, 309, 310, 311, 312, 313, 317, 321, 337, 351, 354, 355, 371], "tijanajovanov": 1046, "tikhonov": [176, 417, 675], "tild": [873, 1012, 1014], "tilen": 1044, "till": [407, 442, 791, 1004], "tim": [0, 396, 1034, 1039, 1040, 1043, 1044, 1045, 1047, 1049, 1050, 1051, 1052, 1053], "time": [0, 2, 38, 43, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 184, 185, 186, 187, 188, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 354, 355, 356, 357, 358, 362, 363, 364, 369, 370, 372, 373, 374, 375, 376, 377, 379, 380, 381, 383, 387, 389, 390, 398, 401, 403, 404, 405, 407, 409, 410, 412, 414, 415, 418, 437, 441, 443, 444, 445, 446, 447, 450, 452, 455, 457, 458, 459, 461, 462, 463, 464, 465, 467, 468, 472, 492, 497, 500, 502, 520, 524, 535, 537, 539, 541, 542, 548, 563, 568, 569, 570, 571, 592, 613, 622, 630, 631, 632, 633, 637, 642, 643, 646, 649, 653, 655, 657, 663, 665, 667, 669, 670, 675, 676, 677, 679, 680, 681, 688, 689, 693, 695, 697, 704, 745, 748, 749, 751, 793, 797, 800, 801, 803, 805, 806, 807, 808, 810, 812, 817, 818, 819, 822, 824, 828, 829, 830, 831, 832, 833, 835, 837, 842, 843, 844, 845, 846, 847, 848, 855, 857, 858, 859, 863, 864, 865, 866, 867, 868, 869, 871, 872, 874, 877, 880, 882, 886, 891, 899, 900, 904, 905, 909, 912, 913, 921, 944, 945, 946, 953, 969, 993, 994, 996, 997, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1014, 1016, 1017, 1018, 1019, 1020, 1023, 1028, 1034, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "time_dens": 324, "time_spars": 324, "time_step": [196, 865], "timeit": [225, 256, 381], "timeout": [497, 969, 1048], "timer": [256, 381], "times_init": 256, "timescal": 242, "timeseri": 44, "timeseriessplit": [2, 44, 53, 150, 196, 263, 411, 1040, 1041, 1046], "timo": 1046, "timofei": 1049, "timotheemathieu": 1047, "timothi": [1039, 1047], "timsaur": 1044, "tinertia": 92, "ting": [564, 1010, 1042, 1043], "tingshan": 1047, "tini": [1036, 1049, 1052], "tinoco": 1051, "tinta": 314, "tip": [358, 361, 375, 378, 381, 402, 415, 535, 542, 648, 695, 1000, 1026, 1027, 1029, 1030, 1037], "tiphain": 1045, "tirth": [1044, 1045], "titan": [104, 187, 251, 317, 321, 322, 1012], "titl": [0, 44, 45, 46, 47, 48, 49, 51, 53, 54, 55, 59, 60, 62, 63, 64, 65, 67, 69, 73, 74, 75, 77, 80, 81, 83, 85, 86, 88, 89, 90, 91, 92, 93, 95, 96, 97, 110, 111, 113, 114, 116, 117, 121, 122, 123, 124, 125, 127, 128, 129, 130, 136, 137, 138, 141, 143, 144, 147, 148, 150, 151, 154, 157, 158, 160, 161, 163, 164, 165, 169, 170, 171, 173, 174, 175, 176, 177, 185, 192, 193, 195, 196, 198, 199, 200, 203, 204, 207, 209, 210, 212, 214, 215, 216, 218, 219, 224, 227, 228, 230, 231, 232, 237, 241, 242, 243, 245, 246, 247, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 267, 268, 269, 271, 272, 273, 277, 278, 281, 283, 290, 291, 294, 295, 296, 297, 299, 300, 301, 308, 312, 313, 314, 315, 330, 333, 335, 336, 337, 338, 339, 342, 343, 347, 348, 350, 355, 356, 371, 374, 375, 379, 383, 408, 1004, 1027], "title_bow": 408, "titles_opt": 261, "titov": [1042, 1044, 1047, 1048], "titu": 1045, "tiwari": 1046, "tiziano": 1034, "tjoa": 1038, "tkammi": 1040, "tkdd": 564, "tliu68": 1047, "tm": [52, 1007], "tmp": 379, "tmpdir": [290, 317], "tn": [262, 325, 715, 721, 1004], "tn_c": 277, "tnr": 262, "tnwei": 1046, "to_british": 415, "to_fram": 108, "to_list": 188, "to_numpi": [174, 262], "to_onnx": 401, "to_replac": [44, 186], "toarrai": [47, 324, 332, 357, 408, 415, 567, 584, 590, 592, 849, 850, 851, 853, 855, 857, 858, 859, 860, 861, 880, 897, 898, 952, 974, 975, 977, 985, 986, 994, 1007, 1014, 1051], "toastedcornflak": [1040, 1041], "toastedyeast": [1048, 1049], "tobia": [1042, 1047, 1049], "tobychees": [1041, 1042], "toc": [165, 247], "toc_bwd": 165, "toc_fwd": 165, "toccac": 1044, "tocsc": 197, "tocsr": 56, "toctre": [375, 393, 400], "tod": [407, 418, 444], "todai": 174, "todens": [978, 979, 980, 981, 982, 983, 984], "todo": [81, 241, 379, 383, 407], "toeplitz": 111, "togeth": [44, 52, 85, 94, 104, 143, 155, 169, 175, 185, 194, 231, 234, 247, 264, 314, 321, 342, 355, 358, 377, 387, 388, 389, 407, 414, 415, 416, 422, 451, 453, 568, 569, 596, 692, 718, 803, 817, 867, 868, 881, 944, 1000, 1001, 1004, 1005, 1011, 1014, 1020, 1021, 1028, 1040, 1051], "toi": [49, 59, 72, 75, 76, 77, 78, 82, 83, 86, 87, 89, 90, 91, 101, 112, 117, 125, 138, 151, 156, 157, 182, 195, 201, 214, 224, 236, 247, 253, 294, 295, 304, 336, 345, 368, 381, 387, 407, 414, 415, 440, 441, 442, 444, 446, 448, 449, 450, 452, 458, 469, 513, 515, 523, 564, 642, 680, 729, 759, 801, 853, 860, 868, 887, 911, 1001, 1003, 1004, 1010, 1014, 1025, 1030], "tok": [352, 415], "token": [2, 58, 352, 362, 370, 379, 415, 537, 590, 591, 592, 593, 1034, 1042, 1046, 1052], "token_featur": 415, "token_freq": 352, "token_pattern": [352, 415, 590, 591, 593], "tokoroten": 1039, "tokyo": [875, 1015], "tol": [47, 50, 56, 106, 121, 145, 150, 165, 180, 193, 202, 204, 217, 218, 224, 226, 237, 248, 254, 256, 306, 320, 346, 350, 377, 381, 414, 419, 443, 447, 449, 452, 459, 462, 471, 472, 478, 482, 483, 484, 532, 533, 534, 536, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 550, 551, 560, 561, 562, 563, 604, 630, 641, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 675, 677, 679, 680, 681, 682, 683, 685, 686, 688, 689, 690, 691, 692, 694, 696, 698, 800, 801, 817, 856, 864, 865, 902, 903, 907, 908, 909, 910, 911, 912, 913, 989, 1000, 1018, 1019, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1051, 1052], "tola": 1044, "told": 415, "toledano": 1042, "toler": [81, 106, 150, 180, 202, 204, 226, 227, 343, 352, 370, 377, 384, 407, 419, 443, 447, 452, 459, 462, 471, 472, 478, 482, 483, 484, 532, 533, 534, 536, 537, 541, 542, 543, 544, 545, 546, 548, 549, 560, 561, 562, 563, 630, 649, 650, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 679, 681, 682, 684, 685, 686, 687, 691, 692, 693, 694, 696, 697, 698, 847, 848, 852, 856, 864, 865, 902, 903, 907, 908, 909, 910, 911, 912, 913, 989, 1000, 1004, 1018, 1019, 1046, 1047, 1048, 1049], "toleranbc": 1043, "tolist": [44, 127, 146, 180, 267, 319, 370, 446], "tom": [0, 397, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "tom1092": 1047, "toma": 1038, "tomasz": 1047, "tomato": 211, "tomatti": 1049, "tomdlt": 1040, "tomiock": [1049, 1050], "toml": 379, "tommaso": 1047, "tommi": [1041, 1042, 1043], "tomographi": [43, 56, 100, 182, 416, 655, 675, 1000, 1025], "tomohiro": 1047, "tomorrow": 406, "tom\u00e1": [1047, 1048], "tongyu": 1051, "toni": [46, 370, 564, 887, 1010, 1047, 1048], "tonk": 1041, "too": [44, 47, 52, 53, 56, 65, 80, 84, 89, 91, 96, 103, 107, 114, 125, 147, 150, 180, 185, 187, 196, 211, 214, 231, 241, 247, 254, 261, 262, 266, 275, 281, 305, 314, 339, 350, 356, 362, 372, 375, 381, 383, 387, 389, 405, 407, 409, 411, 414, 415, 416, 419, 437, 449, 539, 682, 695, 710, 842, 843, 844, 845, 846, 872, 885, 887, 999, 1001, 1003, 1004, 1006, 1007, 1011, 1035, 1038, 1041, 1042, 1043, 1044, 1046, 1052], "took": [0, 44, 78, 276, 326], "tool": [22, 30, 42, 49, 51, 53, 145, 185, 244, 262, 266, 271, 358, 368, 369, 370, 373, 375, 377, 378, 379, 380, 381, 382, 383, 388, 389, 390, 392, 393, 398, 401, 407, 408, 409, 487, 695, 704, 993, 999, 1000, 1004, 1010, 1014, 1019, 1021, 1023, 1024, 1028, 1041, 1044, 1047, 1048, 1049], "toolbox": [387, 1023, 1028], "toolchain": 373, "toolkit": [362, 1023, 1028], "toolset": 1028, "tooth": 122, "tootoonian": 1047, "top": [2, 46, 52, 54, 55, 56, 71, 73, 75, 77, 78, 79, 80, 85, 96, 98, 104, 123, 133, 140, 141, 143, 150, 155, 158, 185, 210, 212, 221, 225, 237, 247, 248, 253, 255, 256, 259, 265, 269, 277, 278, 293, 308, 310, 314, 318, 324, 328, 329, 339, 343, 350, 358, 375, 377, 381, 387, 404, 405, 407, 412, 413, 414, 487, 589, 590, 593, 601, 703, 705, 729, 759, 797, 919, 921, 993, 996, 1000, 1002, 1012, 1023, 1028, 1048, 1053], "top10": 370, "top5": 350, "top_featur": 55, "top_features_ind": 55, "top_indic": 350, "top_k_accuraci": 1004, "top_k_accuracy_scor": [2, 1004, 1046, 1048], "tophat": [293, 413, 847, 848, 852], "topic": [43, 46, 47, 48, 103, 182, 350, 351, 352, 370, 371, 411, 412, 415, 488, 498, 537, 539, 541, 548, 590, 593, 1000, 1005, 1023, 1024, 1025, 1039, 1041, 1053], "topic_d": 48, "topic_idx": 55, "topic_word_prior": [412, 537], "topic_word_prior_": 537, "topisan": 1044, "toplak": 1050, "topolog": [463, 1023], "topologi": [234, 235], "torch": [403, 1052], "torgo": 369, "toro": 314, "toronto": [535, 647, 863], "torr": [1043, 1052, 1053], "torrella": [1043, 1044, 1050], "tortois": 1000, "tosequ": 1052, "toshihiro": [1040, 1041, 1047], "toshniw": 1046, "tot": 52, "total": [2, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 184, 185, 186, 187, 188, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 355, 356, 357, 363, 369, 370, 372, 381, 389, 404, 407, 413, 415, 418, 430, 444, 465, 482, 483, 484, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 501, 502, 503, 505, 506, 511, 513, 515, 516, 520, 523, 524, 537, 545, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 569, 571, 585, 586, 592, 596, 598, 614, 638, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 664, 665, 666, 667, 668, 669, 670, 673, 674, 675, 676, 679, 680, 681, 682, 700, 707, 708, 716, 732, 733, 734, 737, 741, 742, 760, 772, 786, 787, 790, 797, 798, 799, 803, 817, 828, 829, 830, 840, 841, 842, 843, 850, 852, 858, 865, 882, 886, 908, 910, 913, 915, 916, 917, 918, 951, 993, 1000, 1001, 1004, 1005, 1006, 1007, 1014, 1018, 1019, 1020, 1025, 1035, 1040, 1042, 1050, 1051], "total_cel": 150, "total_fit_tim": 48, "total_sampl": [331, 537], "total_sz_mb": 48, "total_vect_tim": 48, "totalbsmtsf": 155, "totrmsabvgrd": 144, "tottim": 381, "tour": [0, 397, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "tournament": 993, "toward": [0, 64, 65, 97, 114, 142, 147, 154, 169, 187, 192, 214, 215, 235, 247, 281, 346, 375, 389, 407, 448, 452, 462, 679, 681, 698, 881, 1003, 1018, 1020, 1022, 1024], "towncrier": [379, 393, 400], "toyota": 52, "tp": [325, 407, 715, 721, 732, 733, 734, 785, 786, 787, 790, 919, 1004], "tp_c": 277, "tpng": 919, "tpot": 1023, "tpr": [51, 238, 247, 262, 265, 277, 278, 382, 705, 709, 792, 1004, 1031, 1034, 1050], "tpr_a": 277, "tpr_b": 277, "tpr_score": 262, "tprs_lower": 278, "tprs_upper": 278, "tr": [263, 372, 379, 407, 409, 469, 470, 471, 472, 473, 474, 475, 476], "trace": [383, 407, 420, 473, 475, 476, 479, 480, 481, 692, 696, 1001, 1045], "traceback": [375, 380, 383, 387, 468, 714, 1027, 1051], "traceord": 141, "tracer0tong": 1040, "trach": 1034, "track": [133, 139, 146, 326, 329, 375, 378, 379, 403, 535, 972, 1005, 1023, 1024, 1041, 1044, 1053], "tracker": [374, 378, 383, 387, 390, 393, 401, 1024], "tracking_select": 972, "tractabl": [44, 411, 542, 637, 1023, 1047], "trade": [38, 95, 110, 141, 150, 187, 203, 214, 267, 269, 270, 281, 339, 350, 389, 406, 407, 409, 554, 555, 560, 561, 637, 659, 695, 803, 806, 807, 817, 830, 1001, 1008, 1016, 1018, 1019, 1024], "tradeoff": [89, 138, 182, 242, 250, 260, 275, 276, 277, 278, 350, 362, 375, 383, 413, 516, 565, 701, 705, 730, 792, 833, 868, 887, 907, 1001, 1025, 1043, 1046], "tradit": [56, 89, 210, 225, 351, 364, 405, 414, 415, 635, 697, 1000, 1003, 1014, 1023, 1028], "tradition": 1020, "traffic": 1028, "trail": [377, 987], "train": [2, 44, 45, 46, 47, 48, 50, 51, 53, 62, 64, 65, 67, 68, 69, 70, 90, 92, 98, 99, 103, 104, 108, 116, 117, 119, 121, 124, 125, 126, 127, 129, 133, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 150, 152, 155, 156, 157, 162, 169, 170, 171, 174, 175, 176, 177, 178, 182, 184, 185, 186, 187, 188, 190, 196, 197, 198, 200, 202, 204, 206, 207, 210, 211, 212, 215, 217, 218, 219, 222, 224, 225, 228, 237, 240, 242, 246, 255, 257, 260, 261, 262, 263, 264, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 287, 288, 291, 294, 295, 296, 297, 299, 300, 301, 303, 304, 305, 308, 310, 312, 313, 317, 320, 324, 327, 328, 329, 332, 333, 335, 338, 345, 346, 352, 353, 356, 358, 362, 363, 364, 367, 370, 372, 377, 380, 387, 388, 389, 403, 405, 406, 407, 408, 409, 410, 412, 414, 415, 416, 417, 419, 437, 440, 441, 443, 444, 447, 449, 451, 452, 453, 454, 459, 465, 469, 470, 472, 473, 474, 475, 476, 482, 483, 484, 485, 487, 488, 489, 494, 497, 498, 499, 501, 505, 525, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 612, 613, 614, 630, 631, 633, 634, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 687, 690, 691, 692, 694, 695, 699, 706, 744, 791, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 867, 872, 873, 876, 877, 880, 881, 885, 886, 887, 888, 892, 893, 895, 896, 897, 898, 899, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 921, 977, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1014, 1018, 1019, 1020, 1023, 1024, 1025, 1026, 1028, 1030, 1031, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "train_0": 44, "train_4": 44, "train_accuraci": [255, 282], "train_auc": 830, "train_ax": 126, "train_balanced_accuraci": 282, "train_cover_std": 51, "train_dataset": [185, 369], "train_errors_with": 145, "train_errors_without": 145, "train_fract": 1034, "train_idx": [53, 185, 389], "train_import": 187, "train_index": [255, 331, 411, 804, 805, 808, 810, 811, 812, 813, 816, 818, 819, 820, 821, 822, 823, 824], "train_indx": 411, "train_pr": 145, "train_prec_macro": 411, "train_r2": 830, "train_rec_macro": 411, "train_result": 187, "train_sampl": [65, 225, 226], "train_scor": [218, 314, 346, 354, 809, 826, 830, 831, 834, 999], "train_score_": [148, 414, 560, 561, 562, 563], "train_set": 405, "train_siz": [45, 47, 50, 135, 154, 170, 190, 226, 243, 247, 270, 281, 319, 322, 346, 805, 809, 820, 823, 831, 833, 999, 1034, 1035, 1040, 1041], "train_size_ab": 831, "train_size_idx": 346, "train_sizes_ab": 831, "train_test_s": 243, "train_test_split": [2, 45, 46, 47, 50, 53, 62, 63, 65, 68, 69, 104, 108, 117, 126, 135, 140, 142, 145, 146, 147, 148, 149, 150, 151, 154, 161, 162, 167, 184, 185, 187, 188, 190, 196, 206, 207, 210, 217, 218, 225, 226, 228, 238, 247, 250, 251, 261, 262, 265, 266, 271, 275, 277, 281, 287, 291, 296, 297, 303, 305, 306, 310, 312, 313, 315, 317, 318, 319, 324, 325, 332, 354, 357, 358, 380, 388, 403, 408, 411, 414, 437, 438, 559, 561, 568, 569, 700, 701, 703, 705, 802, 803, 825, 835, 838, 856, 864, 865, 867, 917, 918, 993, 994, 1004, 1006, 1007, 1012, 1014, 1019, 1031, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1043, 1047, 1051, 1052], "train_tim": [225, 243, 350, 351], "trainabl": 377, "traine": 1028, "training_data": 169, "training_data_": 1044, "training_idx": 177, "training_indic": 176, "training_noisy_target": 169, "training_sample_indic": 169, "training_tim": [145, 350], "training_time_early_stop": 145, "training_time_ful": 145, "trajectori": 139, "tran": 111, "trans_data": 232, "transact": [97, 262, 325, 372, 407, 409, 418, 420, 444, 448, 475, 535, 539, 541, 548, 564, 647, 667, 688, 689, 728, 729, 759, 772, 1000, 1004], "transax": [80, 96, 234, 237, 255, 296, 310], "transcript": 375, "transcriptom": 695, "transduc": 329, "transduct": [389, 407, 902, 903, 1024], "transduction_": [328, 329, 330, 902, 903, 904], "transfer": [150, 398, 403, 1000, 1024], "transform": [2, 7, 21, 24, 36, 38, 44, 45, 46, 48, 50, 54, 63, 80, 81, 82, 85, 88, 91, 96, 102, 106, 107, 117, 123, 124, 126, 127, 129, 130, 134, 139, 141, 144, 154, 155, 162, 175, 181, 182, 185, 186, 187, 190, 203, 210, 211, 218, 224, 226, 228, 231, 234, 237, 239, 240, 242, 244, 245, 247, 251, 255, 264, 265, 266, 269, 277, 287, 288, 290, 296, 297, 298, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 322, 324, 325, 339, 342, 343, 350, 352, 356, 358, 369, 370, 371, 372, 375, 377, 380, 384, 389, 398, 401, 403, 405, 407, 409, 410, 411, 412, 414, 415, 416, 417, 423, 428, 431, 437, 441, 442, 443, 445, 447, 449, 452, 464, 465, 466, 467, 468, 482, 483, 484, 485, 488, 489, 497, 504, 509, 510, 515, 516, 525, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 548, 550, 551, 558, 560, 562, 565, 567, 568, 569, 570, 571, 583, 584, 585, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 612, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 638, 639, 641, 642, 643, 644, 645, 656, 661, 666, 676, 679, 687, 691, 692, 693, 694, 695, 697, 704, 705, 716, 756, 757, 788, 803, 806, 807, 817, 833, 836, 842, 851, 856, 859, 863, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 905, 907, 909, 912, 913, 926, 928, 942, 944, 993, 994, 996, 998, 1000, 1001, 1004, 1005, 1008, 1018, 1019, 1021, 1023, 1025, 1026, 1030, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "transform_algorithm": [124, 130, 532, 538, 543, 1050], "transform_alpha": [124, 130, 532, 538, 543, 1047], "transform_dur": 288, "transform_func": 269, "transform_input": [326, 867, 868, 1053], "transform_list": 866, "transform_max_it": [532, 538, 539, 543, 1044], "transform_method": 412, "transform_n_nonzero_coef": [124, 130, 532, 538, 543], "transform_n_nozero_coef": 130, "transform_output": [251, 262, 315, 468, 905, 1049, 1050], "transformed_grid": 153, "transformedtargetregressor": [2, 108, 185, 210, 387, 398, 408, 595, 596, 599, 1005, 1042, 1044, 1047, 1052, 1053], "transformedtargetregressortransformedtargetregressor": 185, "transformer_": [244, 465], "transformer_list": [107, 408, 866, 869, 994, 1045, 1046], "transformer_nam": [288, 464], "transformer_tag": 926, "transformer_weight": [103, 464, 467, 866, 1039, 1046], "transformermixin": [2, 244, 288, 377, 389, 465, 1042, 1049, 1050, 1051, 1053], "transformers_": [464, 467, 1051, 1052], "transformertag": [2, 926], "transfus": 238, "transit": [56, 346, 379, 401, 1045], "transitive_target": 56, "translat": [108, 417, 528, 617, 876, 877, 893, 1001, 1004, 1028], "transpar": [68, 310, 988, 1028], "transpos": [63, 268, 419, 539, 541, 548, 663, 664, 665, 666, 791, 951, 989, 996, 1004, 1016, 1034, 1048], "transposit": 951, "trapezoid": [2, 275, 709, 710, 1004], "travel": 0, "travers": [357, 1007, 1011, 1052, 1053], "travi": [1034, 1042], "treat": [44, 46, 104, 144, 155, 180, 185, 210, 277, 314, 319, 324, 331, 358, 375, 387, 389, 404, 414, 415, 442, 562, 563, 590, 591, 593, 609, 610, 635, 641, 648, 674, 677, 732, 733, 741, 757, 786, 787, 790, 791, 876, 877, 883, 884, 887, 888, 892, 895, 896, 898, 907, 908, 960, 994, 996, 1000, 1004, 1005, 1011, 1014, 1018, 1020, 1038, 1046, 1050, 1051], "treatment": [113, 184, 369, 406, 412, 469, 474, 1020], "tree": [2, 44, 47, 53, 64, 65, 68, 77, 80, 89, 96, 125, 127, 129, 134, 137, 138, 139, 141, 144, 145, 146, 147, 148, 151, 152, 154, 155, 156, 158, 165, 171, 177, 180, 186, 188, 218, 219, 231, 244, 246, 247, 248, 265, 272, 274, 285, 287, 288, 293, 301, 308, 309, 313, 318, 319, 321, 358, 362, 370, 372, 377, 381, 388, 389, 392, 405, 406, 407, 413, 418, 437, 441, 442, 443, 444, 445, 446, 448, 450, 457, 463, 497, 501, 505, 515, 516, 520, 545, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 634, 635, 636, 637, 661, 691, 695, 705, 706, 714, 745, 751, 791, 793, 809, 824, 830, 831, 833, 842, 847, 848, 849, 850, 851, 852, 853, 855, 857, 858, 859, 868, 871, 880, 915, 916, 917, 918, 919, 920, 921, 946, 994, 1001, 1004, 1005, 1010, 1011, 1023, 1024, 1025, 1026, 1030, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041], "tree_": [317, 354, 357, 852, 915, 916, 917, 918, 1051], "tree_copi": [847, 848], "tree_disp": 248, "tree_importance_sorted_idx": 188, "tree_optim": 285, "tree_preprocessor": [155, 210], "tree_stat": [847, 848], "treelit": 1023, "trein": 1037, "tremend": [314, 414], "trend": [152, 174, 186, 240, 304, 1028, 1041], "trent": [1028, 1040], "trevor": [165, 198, 322, 372, 631, 659, 724, 726, 727, 994, 1000, 1016, 1038, 1039, 1042, 1043, 1044, 1046], "trevorstephen": [1038, 1040], "tri": [100, 129, 230, 281, 297, 343, 363, 377, 380, 387, 390, 405, 449, 451, 453, 634, 635, 636, 673, 695, 701, 703, 705, 817, 1009, 1036, 1042, 1046, 1052], "triag": [0, 375, 378, 390], "trial": [44, 273, 447, 449, 460, 674, 800, 801, 1000, 1040], "triangl": [389, 412, 443, 447, 459, 702, 1002, 1007], "triangular": [407, 463, 614, 1001], "tribe": 370, "trick": [2, 169, 243, 298, 343, 352, 361, 364, 378, 387, 408, 584, 591, 646, 675, 996, 997, 1008, 1018, 1019, 1030, 1035, 1043, 1051], "tricki": [405, 1001], "trickiest": 375, "trigg": 567, "trigger": [104, 105, 375, 379, 389, 401, 408, 864, 865, 867, 868, 933, 934, 951, 1000, 1042, 1048, 1049], "triglycerid": [165, 372], "trim": [225, 407, 847, 848], "trimeta": 1045, "trinh": 1049, "tripl": 380, "triplet": 510, "tripramudya": 1050, "trishnendu": 1042, "tristan": 1000, "triu": 52, "trivial": [49, 212, 262, 354, 375, 407, 821, 909, 912, 1001, 1034], "troillard": [1050, 1051, 1053], "tropp": [536, 542], "troubl": [67, 415], "troubleshoot": 415, "troyanskaya": [631, 994], "true": [2, 44, 45, 46, 47, 48, 50, 51, 53, 55, 56, 64, 65, 67, 69, 71, 73, 80, 83, 84, 87, 88, 89, 91, 92, 94, 97, 103, 104, 105, 106, 108, 110, 111, 112, 113, 114, 116, 119, 121, 122, 123, 124, 126, 127, 131, 133, 135, 139, 141, 144, 146, 147, 149, 150, 151, 152, 155, 156, 158, 161, 164, 169, 173, 174, 175, 176, 177, 178, 180, 181, 184, 185, 186, 187, 188, 190, 196, 198, 199, 200, 202, 203, 204, 206, 207, 210, 212, 213, 214, 217, 218, 224, 225, 226, 228, 230, 233, 234, 237, 238, 241, 243, 244, 245, 246, 247, 250, 251, 253, 256, 258, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 290, 291, 293, 294, 297, 301, 303, 304, 305, 306, 309, 313, 314, 315, 317, 319, 321, 322, 323, 324, 325, 326, 329, 331, 332, 333, 342, 343, 345, 346, 347, 350, 351, 352, 354, 355, 357, 358, 362, 363, 368, 370, 371, 373, 375, 376, 377, 380, 381, 382, 384, 388, 389, 392, 398, 401, 403, 404, 405, 407, 408, 409, 411, 412, 414, 415, 416, 417, 419, 420, 421, 422, 424, 426, 427, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 459, 461, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 516, 520, 523, 524, 525, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 583, 584, 585, 587, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 705, 706, 708, 710, 711, 712, 714, 715, 716, 717, 718, 721, 722, 723, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 741, 742, 743, 744, 745, 746, 755, 757, 759, 764, 770, 772, 781, 785, 786, 787, 788, 789, 790, 791, 792, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 814, 815, 817, 821, 822, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 923, 924, 926, 927, 931, 932, 933, 934, 944, 945, 946, 951, 952, 964, 965, 966, 968, 969, 973, 974, 975, 976, 984, 989, 991, 992, 993, 994, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1014, 1016, 1017, 1018, 1019, 1020, 1023, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "true_": [198, 538, 639], "true_coef": [184, 196, 206, 281, 649, 650, 655, 663, 664, 665, 684, 685, 686], "true_cov": [469, 471, 472, 478], "true_den": 293, "true_fac": 246, "true_fun": 283, "true_h": 321, "true_k": 351, "true_label": [323, 328, 329], "true_nam": 46, "true_relev": [729, 759], "true_w": 321, "true_weight": 192, "trujillo": [1048, 1049], "truli": [271, 364, 715, 1004], "truncat": [2, 106, 153, 231, 384, 535, 536, 540, 541, 542, 545, 679, 681, 729, 759, 800, 856, 920, 951, 993, 1003, 1004, 1018, 1029, 1030, 1040, 1042], "truncate_mod": 77, "truncatedsvd": [2, 153, 231, 351, 412, 535, 536, 540, 541, 542, 695, 866, 869, 1036, 1041, 1045, 1046, 1048, 1052], "truong": 1040, "trust": [0, 52, 64, 104, 105, 113, 135, 140, 142, 151, 152, 155, 158, 162, 174, 185, 186, 187, 188, 194, 238, 239, 240, 244, 248, 249, 250, 251, 258, 262, 266, 268, 269, 275, 280, 282, 306, 314, 318, 319, 321, 322, 324, 330, 356, 357, 390, 401, 405, 1048], "trustworthi": [2, 321, 1042, 1043, 1048, 1049, 1050, 1051], "truth": [2, 28, 59, 69, 76, 83, 91, 92, 95, 110, 114, 117, 124, 128, 151, 177, 196, 205, 210, 211, 247, 259, 271, 351, 389, 407, 706, 707, 708, 711, 715, 716, 717, 718, 720, 721, 724, 726, 727, 729, 731, 732, 733, 737, 739, 740, 741, 742, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 786, 787, 788, 789, 790, 793, 794, 798, 799, 1004, 1042, 1048], "truthi": [2, 964], "try": [44, 46, 51, 52, 53, 55, 63, 64, 75, 87, 104, 105, 124, 135, 140, 141, 142, 143, 150, 151, 152, 155, 158, 162, 169, 174, 175, 181, 184, 185, 186, 187, 190, 192, 194, 200, 207, 238, 239, 240, 244, 248, 249, 250, 251, 254, 255, 258, 262, 266, 268, 269, 275, 280, 282, 285, 288, 301, 306, 314, 318, 319, 321, 322, 324, 326, 330, 341, 346, 350, 351, 356, 357, 370, 373, 374, 375, 380, 381, 383, 387, 389, 393, 395, 398, 401, 407, 410, 411, 414, 415, 488, 489, 490, 491, 493, 494, 495, 496, 498, 499, 504, 568, 579, 591, 661, 676, 678, 692, 696, 802, 803, 806, 807, 815, 817, 825, 828, 829, 830, 832, 885, 887, 890, 892, 893, 894, 895, 896, 897, 898, 907, 932, 987, 993, 1000, 1001, 1010, 1019, 1020, 1024, 1027, 1028, 1036, 1037, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1053], "trynexttri": 395, "tr\u00e9segni": [0, 1036], "ts_cv": [44, 53, 150], "tscv": [411, 824], "tseng": 407, "tsetogl": 1049, "tsilhouett": 92, "tslearn": 1023, "tsne": [2, 182, 230, 231, 232, 234, 235, 289, 290, 321, 389, 421, 431, 497, 691, 692, 693, 851, 855, 868, 977, 1001, 1007, 1025, 1037, 1039, 1040, 1041, 1042, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "tsne_param": 288, "tsoumaka": [723, 737, 743, 1004], "tspeng": [1049, 1050], "tsuga": 1047, "tsujii": 1018, "tsukada": 1046, "tsuruoka": 1018, "tsutomu": 1045, "tt": [156, 263, 465], "ttang131": 1044, "ttime": 92, "tttthomasssss": 1038, "tuai": 1053, "tube": [913, 1019], "tue": [44, 53, 150, 186, 1040], "tuft": 449, "tuhin": [1052, 1053], "tuk": [1052, 1053], "tulio": [1042, 1043], "tulken": 1044, "tulloch": [1037, 1038], "tumor": [165, 372, 406], "tune": [2, 44, 65, 80, 89, 104, 126, 135, 141, 150, 164, 165, 167, 169, 180, 182, 186, 200, 214, 215, 227, 234, 238, 247, 260, 261, 271, 272, 273, 275, 285, 290, 309, 326, 331, 339, 343, 346, 350, 358, 362, 363, 364, 388, 389, 402, 405, 407, 411, 414, 416, 417, 452, 462, 497, 552, 560, 561, 562, 596, 612, 616, 617, 618, 620, 622, 623, 625, 626, 628, 646, 661, 662, 693, 697, 703, 705, 721, 745, 787, 790, 802, 803, 819, 825, 830, 833, 863, 868, 887, 905, 912, 998, 999, 1000, 1001, 1003, 1004, 1007, 1008, 1010, 1018, 1019, 1023, 1025, 1030, 1034, 1048, 1050, 1052, 1053], "tuned_classifi": 325, "tuned_model": [262, 282], "tuned_model_coef": 282, "tuned_param": 47, "tuned_paramet": [110, 266], "tunedthresholdclassifiercv": [2, 262, 282, 406, 802, 1052], "tunedthresholdclassifiercvifittedtunedthresholdclassifiercv": 262, "tupl": [48, 83, 89, 130, 186, 228, 368, 369, 370, 389, 411, 419, 432, 451, 453, 464, 467, 482, 483, 484, 485, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 501, 502, 503, 505, 506, 509, 511, 512, 513, 514, 515, 523, 534, 562, 563, 568, 569, 570, 571, 584, 585, 586, 589, 590, 591, 593, 612, 630, 635, 636, 637, 714, 715, 722, 745, 784, 786, 800, 803, 817, 830, 847, 848, 866, 867, 877, 878, 882, 885, 893, 897, 909, 910, 911, 912, 913, 922, 934, 935, 937, 941, 942, 943, 944, 945, 969, 970, 987, 992, 1011, 1040, 1041, 1045, 1046, 1047, 1052], "tur": 1052, "turn": [2, 31, 44, 69, 110, 180, 181, 185, 196, 225, 226, 242, 268, 292, 325, 352, 362, 363, 364, 370, 387, 389, 390, 407, 408, 410, 412, 415, 416, 417, 583, 584, 591, 609, 610, 836, 840, 909, 912, 936, 994, 998, 1004, 1006, 1009, 1014, 1028, 1039, 1041, 1042, 1047], "turquois": [125, 129, 130, 149, 216, 227, 233, 255, 256, 275], "tushar": [1052, 1053], "tutori": [113, 182, 200, 212, 228, 268, 375, 376, 381, 383, 401, 407, 452, 462, 694, 1019, 1030, 1037], "tuveri": 1049, "tuzova": 1042, "tv": 92, "tw": [190, 369, 487, 509, 510, 661, 1019], "tweak": [2, 114, 244, 411, 969, 1003, 1045], "tweedi": [2, 182, 191, 210, 464, 497, 553, 651, 672, 683, 709, 727, 748, 750, 752, 753, 755, 833, 868, 871, 872, 880, 887, 1000, 1025, 1044, 1045, 1047], "tweedie_pow": 228, "tweedieregressor": [2, 44, 318, 321, 326, 651, 672, 1000, 1045, 1048, 1049, 1053], "tweet": 1028, "twelfth": 699, "twenti": [58, 241, 372, 404, 407], "twice": [65, 262, 280, 282, 350, 352, 377, 417, 622, 733, 735, 953, 1043, 1051], "twine": 379, "twinx": 331, "twister": 1045, "twitter": 379, "two": [2, 38, 44, 47, 49, 51, 55, 59, 62, 64, 67, 71, 73, 75, 76, 79, 89, 94, 98, 103, 104, 108, 112, 116, 117, 119, 121, 123, 124, 126, 127, 129, 134, 135, 136, 143, 144, 145, 147, 150, 151, 152, 153, 156, 162, 165, 169, 170, 171, 172, 175, 176, 180, 181, 182, 185, 186, 187, 192, 196, 198, 200, 201, 202, 203, 210, 211, 212, 218, 219, 222, 227, 228, 232, 234, 235, 237, 242, 244, 245, 247, 253, 254, 255, 257, 258, 259, 262, 263, 265, 269, 275, 285, 291, 293, 296, 297, 299, 301, 308, 310, 313, 317, 318, 320, 321, 325, 330, 335, 336, 339, 340, 341, 343, 347, 350, 351, 352, 355, 356, 358, 368, 369, 370, 371, 372, 373, 375, 377, 379, 381, 382, 383, 387, 389, 390, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 441, 442, 443, 444, 445, 447, 450, 451, 452, 453, 457, 459, 464, 469, 470, 471, 472, 473, 474, 475, 476, 488, 490, 491, 493, 494, 495, 497, 499, 501, 502, 503, 504, 505, 506, 508, 511, 515, 520, 523, 537, 539, 541, 545, 548, 550, 551, 554, 561, 571, 583, 586, 592, 593, 594, 597, 598, 600, 601, 602, 603, 604, 605, 608, 609, 610, 613, 614, 623, 624, 627, 631, 634, 635, 642, 646, 648, 673, 674, 676, 695, 702, 706, 707, 708, 715, 718, 719, 722, 724, 725, 726, 727, 734, 735, 738, 739, 741, 744, 746, 757, 758, 760, 766, 767, 774, 777, 780, 781, 782, 783, 784, 788, 789, 797, 798, 799, 800, 836, 847, 848, 849, 850, 851, 853, 854, 855, 857, 858, 859, 864, 865, 871, 872, 879, 880, 881, 882, 901, 902, 903, 907, 908, 915, 917, 918, 966, 982, 983, 989, 993, 994, 996, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1025, 1031, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "two_d_arrai": 924, "two_d_label": 927, "two_mean": 80, "two_point_correl": [847, 848], "twoclass_output": 137, "twosigmajab": 1042, "twx": 52, "tx": 410, "tx_k": [410, 998], "txn": 52, "txt": [350, 369, 375, 494, 504], "ty": 410, "ty_k": 410, "tyagi": 1048, "tygert": [536, 542, 951], "tyler": [1041, 1047, 1048, 1049], "type": [2, 47, 53, 87, 88, 99, 102, 103, 113, 119, 127, 130, 143, 144, 146, 174, 181, 182, 184, 185, 186, 190, 196, 210, 212, 239, 244, 249, 251, 252, 254, 255, 258, 259, 262, 263, 269, 274, 275, 277, 278, 279, 281, 282, 285, 298, 314, 324, 343, 350, 352, 357, 358, 363, 368, 369, 370, 372, 375, 378, 379, 380, 381, 388, 393, 395, 401, 404, 408, 415, 424, 425, 426, 429, 430, 431, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 497, 509, 510, 516, 568, 573, 583, 584, 590, 591, 593, 602, 606, 620, 630, 632, 633, 641, 659, 661, 675, 677, 682, 690, 692, 695, 696, 702, 704, 710, 717, 719, 732, 733, 736, 741, 786, 787, 790, 791, 800, 801, 803, 809, 817, 826, 831, 833, 834, 849, 850, 851, 853, 854, 855, 857, 858, 859, 860, 861, 867, 868, 869, 872, 874, 880, 881, 887, 888, 905, 909, 910, 911, 912, 913, 926, 928, 929, 931, 933, 934, 937, 941, 942, 966, 967, 990, 994, 996, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1014, 1016, 1020, 1025, 1027, 1028, 1034, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "type_check": 379, "type_filt": 942, "type_of_target": [2, 389, 874, 888, 1005, 1048, 1049, 1051, 1052], "type_of_target_": 888, "typed_ndarrai": 375, "typeerror": [244, 320, 380, 714, 937, 960, 987, 1041, 1042, 1045, 1047, 1051], "typic": [26, 63, 65, 125, 133, 145, 190, 196, 210, 214, 228, 243, 270, 271, 275, 277, 278, 294, 295, 319, 339, 351, 362, 368, 369, 370, 373, 377, 378, 384, 388, 389, 401, 403, 405, 407, 408, 411, 412, 414, 415, 417, 443, 447, 449, 497, 542, 552, 556, 557, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 632, 641, 643, 646, 657, 658, 659, 674, 685, 686, 715, 849, 857, 874, 881, 885, 888, 950, 951, 956, 960, 963, 988, 993, 997, 1000, 1001, 1003, 1004, 1005, 1006, 1010, 1012, 1028, 1043, 1047, 1050, 1051], "typo": [375, 390, 398, 1034], "tzu": 1038, "t\u00e9l\u00e9com": 0, "u": [44, 50, 51, 52, 53, 56, 71, 84, 86, 90, 121, 127, 128, 144, 145, 150, 169, 178, 184, 185, 186, 211, 214, 218, 228, 231, 234, 241, 244, 250, 251, 254, 255, 259, 262, 263, 268, 271, 275, 281, 282, 314, 343, 350, 357, 363, 370, 373, 375, 379, 381, 383, 387, 393, 398, 404, 407, 410, 412, 414, 415, 430, 463, 465, 482, 483, 484, 532, 538, 546, 547, 551, 553, 555, 557, 559, 561, 563, 566, 569, 571, 590, 591, 593, 614, 638, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 664, 665, 666, 667, 668, 670, 673, 675, 676, 681, 682, 684, 687, 692, 696, 707, 723, 743, 758, 840, 841, 850, 858, 865, 887, 901, 908, 910, 913, 916, 918, 951, 996, 998, 1003, 1004, 1011, 1014, 1028, 1031, 1044], "u2uwz2": [165, 372], "u_": [404, 482, 483, 484], "u_1": [404, 996], "u_2": [404, 996], "u_i": [407, 482, 483, 484, 758], "u_init": 544, "u_k": [410, 412], "uai": 1016, "ubuntu": [362, 373, 381, 383], "uchida": 1044, "uci": [48, 165, 262, 313, 369, 372, 501, 503, 505, 511], "ucl": 1017, "udi": 1034, "udit": 1048, "ufmay": 1046, "ufunc": [185, 1051], "ugli": [219, 296, 299, 335], "ugo": 1048, "ugurcaliskan": 1038, "ugurthemast": [1037, 1038], "uhmann": 1047, "uieda": 1047, "uint": 1045, "uint32": [370, 498], "uint8": [87, 124, 369, 498, 507, 508, 1046], "uk": [674, 1017], "ulloa": 1040, "ulrik": [407, 452, 462, 694], "ulterior": 53, "ultim": [89, 234, 376, 1004], "umar": [1042, 1043], "umass": [46, 58, 370], "umberto": [1046, 1053], "umbrella": [406, 1004], "umpi": 415, "un": [52, 375, 405, 415, 419, 534, 591, 798, 870, 879, 890, 894, 1043], "unabl": [52, 64, 104, 105, 140, 142, 151, 152, 155, 158, 162, 174, 184, 185, 186, 187, 194, 196, 210, 238, 239, 240, 244, 248, 249, 250, 251, 258, 262, 266, 268, 269, 275, 280, 282, 306, 314, 318, 319, 321, 322, 324, 330, 356, 357, 364, 887, 1014, 1043], "unadjust": [407, 1004, 1046], "unaffect": 1007, "unalt": 1004, "unambigu": [277, 1005, 1040], "unanim": 390, "unavail": [389, 661, 662, 964, 1041, 1047], "unbalanc": [2, 182, 271, 334, 337, 340, 411, 513, 634, 912, 938, 939, 993, 1018, 1025], "unbias": [110, 405, 409, 412, 437, 551, 659, 675, 677, 690, 1000], "unbound": [73, 1003, 1048, 1052], "uncalibr": [62, 63, 64, 437], "uncent": 194, "uncertain": [268, 329, 374], "uncertainti": [63, 150, 169, 176, 192, 270, 405, 407, 568, 569, 646, 867, 994, 1016], "uncertainty_index": [328, 329], "unchang": [175, 185, 228, 275, 326, 414, 431, 437, 442, 443, 444, 445, 446, 447, 449, 464, 465, 468, 482, 483, 484, 485, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 583, 584, 585, 591, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 613, 614, 630, 631, 632, 633, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 691, 692, 693, 695, 766, 802, 804, 805, 810, 812, 821, 825, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 854, 856, 857, 858, 859, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 902, 903, 905, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 992, 1007, 1042, 1048, 1050], "unclaim": 378, "unclear": [374, 375, 502], "unclust": 446, "uncommon": [409, 661, 907, 1019], "uncompress": [48, 509, 510], "unconstrain": [150, 152, 186, 318, 324, 370, 1018], "uncorrect": [268, 597, 600], "uncorrel": [2, 274, 371, 529, 535, 542, 1004], "uncorrupt": 45, "uncov": [131, 698], "undefin": [53, 271, 389, 715, 732, 741, 786, 972, 1004, 1042, 1046, 1050], "undefinedmetricwarn": [2, 306, 732, 733, 786, 787, 790, 1043], "under": [2, 44, 47, 51, 62, 63, 65, 77, 101, 110, 111, 128, 144, 147, 186, 199, 210, 237, 247, 268, 275, 277, 278, 309, 323, 369, 375, 377, 379, 381, 383, 389, 393, 401, 405, 407, 409, 411, 412, 415, 416, 446, 451, 453, 470, 471, 472, 473, 474, 475, 476, 492, 533, 540, 542, 544, 657, 658, 659, 705, 709, 710, 711, 718, 757, 791, 792, 800, 801, 852, 959, 1000, 1001, 1002, 1004, 1007, 1014, 1018, 1019, 1020, 1023, 1024, 1034, 1036, 1037, 1039, 1042, 1046], "underdetermin": 196, "underestim": [53, 147, 186, 210, 228, 268, 375], "underfit": [44, 71, 147, 169, 182, 187, 211, 214, 260, 281, 303, 314, 346, 414, 660, 803, 806, 807, 817, 829, 830, 867, 882, 999, 1000, 1025], "underflow": [1042, 1047], "undergo": 274, "undergrad": 1028, "underli": [65, 90, 112, 154, 165, 167, 185, 188, 211, 213, 214, 244, 262, 273, 292, 293, 343, 356, 363, 375, 387, 389, 392, 398, 403, 405, 407, 409, 411, 412, 413, 414, 416, 417, 437, 451, 452, 453, 462, 464, 465, 471, 472, 478, 525, 556, 557, 565, 566, 568, 569, 570, 571, 595, 596, 599, 604, 661, 662, 668, 671, 676, 678, 683, 694, 698, 802, 803, 806, 807, 817, 825, 828, 829, 830, 835, 836, 837, 838, 839, 840, 841, 850, 852, 904, 907, 915, 916, 917, 918, 968, 992, 1000, 1001, 1005, 1010, 1017, 1019, 1036, 1038, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1050, 1051, 1052, 1053], "underrepres": 375, "underscor": [238, 352, 377, 389, 987, 1034, 1044, 1047], "underset": [412, 1000, 1007, 1020], "understand": [44, 49, 53, 77, 135, 174, 182, 186, 244, 262, 263, 266, 282, 319, 320, 336, 343, 350, 353, 354, 358, 374, 375, 376, 381, 387, 392, 407, 414, 415, 505, 833, 864, 865, 915, 916, 917, 918, 921, 993, 994, 1001, 1003, 1020, 1022, 1023, 1025, 1028, 1034, 1048], "understood": [269, 375, 407, 960], "undertak": 387, "undesir": [91, 170, 417, 825], "undistinguish": 411, "undistort": 124, "undo": [269, 877, 1038], "undocu": 1041, "unequ": [91, 1042], "uneth": 184, "uneven": [86, 263, 407, 411], "unevenli": [91, 210, 263], "unexpect": [91, 244, 358, 375, 380, 383, 393, 401, 536, 699, 1004, 1019, 1036, 1042, 1043, 1046, 1048, 1050, 1052], "unexpectedli": [389, 1042], "unfair": 358, "unfinish": [374, 375], "unfit": [2, 90, 377, 408, 432, 464, 570, 571, 604, 614, 1042, 1044, 1051, 1053], "unfold": [126, 378, 1001], "unfortun": [147, 184, 185, 228, 383, 387, 414, 509, 510], "unhandl": 1043, "unhelp": 375, "unicod": [352, 415, 487, 504, 584, 590, 591, 593, 968, 1034, 1042, 1046], "unicodedata": [590, 591, 593], "unicodedecodeerror": [415, 590, 591, 593], "unifi": [285, 376, 384, 387, 388, 414, 640, 1023, 1024, 1034], "unifom": 291, "uniform": [2, 59, 68, 73, 87, 146, 147, 151, 161, 170, 175, 178, 192, 193, 224, 235, 237, 240, 276, 291, 294, 295, 300, 303, 309, 311, 312, 315, 321, 323, 338, 380, 401, 407, 438, 439, 552, 570, 571, 613, 614, 631, 642, 652, 653, 657, 671, 679, 680, 681, 702, 724, 726, 731, 748, 749, 751, 753, 754, 756, 788, 793, 794, 807, 815, 817, 842, 843, 846, 849, 850, 854, 857, 858, 872, 884, 886, 896, 938, 953, 993, 994, 1003, 1004, 1007, 1040, 1042, 1044, 1048, 1050, 1053], "uniform_averag": [430, 465, 482, 483, 484, 555, 557, 559, 561, 563, 566, 569, 571, 614, 638, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 664, 665, 666, 667, 668, 670, 673, 675, 676, 681, 682, 724, 726, 731, 748, 749, 751, 753, 754, 756, 788, 793, 794, 840, 841, 850, 858, 865, 908, 910, 913, 916, 918, 1004, 1043, 1053], "uniform_labelings_scor": 73, "uniformli": [73, 141, 147, 160, 237, 253, 317, 377, 517, 518, 519, 552, 645, 807, 815, 817, 886, 993, 994, 1004, 1007, 1014, 1038, 1043], "unigram": [269, 370, 415, 590, 591, 593, 1041], "unilev": 52, "unimod": [237, 474], "unimport": [416, 1012], "uninform": [63, 65, 315, 371, 380, 415, 993, 1000, 1042], "uniniti": 383, "uninstal": 373, "unintention": 1014, "unintuit": 91, "union": [103, 185, 408, 741, 757, 866, 1041], "union_not_memb": 185, "uniqu": [2, 44, 62, 67, 78, 82, 91, 92, 97, 101, 106, 142, 148, 149, 150, 185, 187, 196, 225, 228, 255, 277, 297, 314, 315, 323, 331, 350, 351, 352, 369, 377, 384, 389, 407, 408, 411, 414, 415, 440, 446, 450, 454, 456, 464, 467, 497, 550, 551, 552, 554, 555, 558, 559, 560, 561, 562, 563, 565, 566, 567, 613, 636, 637, 638, 669, 671, 679, 700, 712, 714, 757, 785, 803, 805, 817, 830, 835, 836, 839, 845, 854, 857, 859, 864, 866, 878, 880, 881, 888, 891, 907, 909, 915, 916, 917, 918, 938, 951, 966, 967, 1000, 1005, 1014, 1028, 1042, 1045, 1046, 1048, 1049, 1050, 1051, 1052], "unique_label": [2, 83, 89, 351, 377, 384], "unit": [2, 64, 103, 112, 185, 190, 210, 228, 293, 305, 308, 325, 351, 370, 375, 377, 381, 383, 384, 412, 415, 419, 464, 489, 490, 520, 525, 533, 534, 535, 542, 543, 591, 592, 593, 609, 610, 614, 661, 662, 679, 688, 702, 773, 854, 863, 864, 865, 871, 877, 879, 883, 885, 887, 893, 894, 895, 897, 898, 907, 908, 1000, 1002, 1003, 1004, 1009, 1014, 1020, 1038, 1042, 1048, 1049], "unit_eig_vec": 253, "unit_vari": [885, 897, 1046], "unitari": 951, "uniti": 31, "univ": [692, 696, 1001], "univ_select": 107, "univari": [2, 18, 49, 50, 72, 105, 107, 159, 160, 162, 182, 190, 195, 209, 225, 334, 367, 407, 408, 415, 445, 505, 526, 531, 594, 597, 598, 600, 601, 602, 604, 607, 608, 609, 610, 611, 630, 631, 632, 633, 648, 803, 808, 829, 833, 867, 868, 877, 882, 886, 887, 907, 912, 1000, 1019, 1021, 1025, 1026, 1030, 1034, 1040], "univers": [0, 177, 185, 350, 370, 372, 378, 407, 412, 415, 592, 791, 842, 846, 902, 1000, 1002, 1004, 1006], "unix": 415, "unknown": [53, 90, 185, 244, 268, 328, 330, 364, 370, 389, 401, 404, 415, 874, 880, 881, 966, 1003, 1014, 1038, 1042, 1046, 1047], "unknown_typ": 401, "unknown_v": 155, "unknown_valu": [144, 155, 187, 247, 314, 881, 1014, 1046, 1048, 1049], "unlabel": [39, 46, 245, 319, 328, 329, 330, 332, 333, 389, 407, 902, 903, 904, 1003, 1046], "unlabeled_indic": 329, "unlabeled_set": 328, "unless": [184, 244, 254, 259, 375, 378, 387, 389, 401, 405, 407, 410, 418, 437, 444, 446, 448, 450, 452, 457, 458, 461, 464, 467, 472, 489, 497, 509, 510, 532, 536, 537, 538, 540, 543, 544, 546, 547, 548, 549, 556, 557, 558, 559, 560, 561, 564, 565, 566, 567, 568, 569, 570, 571, 596, 604, 609, 610, 613, 614, 635, 637, 642, 649, 650, 654, 655, 656, 658, 660, 661, 662, 664, 666, 668, 669, 671, 679, 682, 691, 692, 693, 694, 695, 696, 697, 712, 717, 777, 781, 784, 803, 806, 807, 809, 817, 825, 826, 828, 829, 830, 831, 832, 834, 835, 836, 837, 839, 840, 849, 850, 853, 855, 857, 858, 860, 861, 864, 865, 866, 869, 888, 892, 893, 895, 896, 897, 898, 902, 903, 915, 916, 917, 918, 926, 929, 933, 934, 951, 1000, 1003, 1005, 1034, 1036, 1040, 1042, 1045, 1046, 1051, 1052], "unlik": [89, 90, 141, 185, 186, 230, 232, 258, 308, 337, 375, 377, 381, 387, 389, 398, 401, 409, 411, 412, 415, 446, 450, 536, 653, 654, 657, 658, 659, 685, 686, 788, 824, 847, 848, 887, 898, 910, 1000, 1003, 1004, 1011, 1019, 1034, 1040], "unlimit": [558, 559, 560, 561, 565, 566, 567, 915, 916, 917, 918], "unlucki": 358, "unmaintain": 1034, "unmarri": 185, "unmeaning": 1041, "unmix": [122, 419, 534], "unmixing_matrix": 534, "unmodifi": [377, 389], "unnecessari": [141, 253, 380, 427, 443, 649, 650, 655, 656, 663, 664, 665, 666, 684, 687, 708, 1007, 1014, 1028, 1037, 1039, 1044, 1045, 1047, 1050], "unnecessarili": [234, 1041, 1044], "unnorm": [389, 537, 1001, 1040, 1041], "unobserv": [150, 184, 185, 412], "unord": [407, 414, 1014], "unpack": 377, "unpen": [405, 651, 672, 683, 1000], "unpickl": [2, 389, 578, 847, 848, 1040, 1046, 1050], "unpleas": 1036, "unpract": 1003, "unprefix": 1040, "unprocess": [450, 590, 591, 593], "unprotect": 969, "unprun": [558, 559, 565, 566, 915, 916, 917, 918], "unquot": 228, "unrealist": 370, "unreason": [228, 411], "unreg": 344, "unregular": [880, 903, 1043], "unrel": [314, 363, 375, 380, 383, 415, 516], "unreli": [262, 408], "unrepresent": 922, "unrestrict": 494, "unrol": 234, "unrot": 131, "unsaf": 535, "unsampl": 996, "unscal": [308, 313, 1000, 1004, 1042, 1048], "unscaled_clf": 313, "unseen": [110, 145, 162, 200, 214, 218, 294, 343, 364, 367, 377, 388, 389, 407, 411, 853, 884, 896, 995, 1004, 1010, 1012, 1014, 1020, 1037, 1042, 1046], "unseen_featur": [415, 583], "unset": [363, 389, 1042], "unsetmetadatapassederror": [398, 1053], "unshad": 412, "unshifft": 680, "unshift": 911, "unsign": [87, 125, 370, 584, 968], "unsmooth": 413, "unsort": [1007, 1035, 1038, 1042], "unspecifi": [601, 602, 1001], "unstabl": [75, 100, 185, 403, 407, 409, 410, 692, 696, 950, 951, 1020, 1038, 1039, 1041, 1046, 1048, 1050, 1053], "unstack": [228, 271], "unstructur": [54, 72, 75, 76, 77, 82, 182, 234, 305, 407, 441, 445, 463, 504, 531, 860, 1016, 1025, 1028, 1038], "unsuccess": 51, "unsupervis": [2, 6, 28, 35, 46, 52, 73, 83, 105, 106, 117, 121, 140, 153, 237, 245, 294, 295, 338, 350, 351, 358, 367, 370, 377, 388, 389, 407, 410, 412, 413, 414, 415, 416, 431, 442, 445, 533, 535, 537, 538, 540, 543, 544, 550, 564, 567, 568, 570, 571, 584, 585, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 631, 633, 637, 638, 641, 642, 643, 644, 645, 680, 803, 806, 807, 809, 817, 826, 831, 834, 849, 850, 853, 855, 856, 857, 858, 863, 870, 871, 872, 873, 876, 877, 879, 880, 881, 882, 884, 885, 886, 887, 888, 899, 900, 904, 911, 1001, 1004, 1010, 1017, 1026, 1030, 1034, 1037, 1047, 1051], "unsupport": [398, 401, 494, 1042, 1047], "unsur": 908, "untangl": 126, "untar": 48, "unterthin": [1037, 1038, 1039], "until": [89, 165, 218, 280, 319, 321, 322, 380, 389, 390, 404, 407, 411, 416, 509, 510, 558, 559, 560, 561, 565, 566, 567, 595, 649, 650, 655, 656, 661, 662, 663, 664, 665, 666, 669, 670, 671, 674, 679, 680, 681, 697, 800, 801, 806, 807, 864, 865, 904, 907, 915, 916, 917, 918, 978, 993, 1000, 1001, 1009, 1017, 1020, 1037, 1041, 1042, 1048, 1053], "untransform": [343, 464, 467, 1015], "untru": 1004, "untrust": 401, "untun": [147, 325], "unus": [127, 186, 230, 232, 463, 581, 766, 774, 993, 1001, 1034, 1042, 1044, 1045, 1047, 1049], "unusu": [65, 404, 1010, 1014, 1042], "unveil": 1040, "unvendor": 1042, "unwant": [211, 350], "unweight": [181, 223, 463, 650, 656, 681, 710, 716, 732, 733, 741, 786, 787, 790, 791, 842, 843, 844, 845, 846, 994], "unwieldi": 878, "uoa": 900, "up": [2, 48, 51, 73, 80, 81, 82, 86, 89, 91, 96, 103, 112, 113, 119, 133, 140, 150, 181, 185, 186, 192, 196, 204, 211, 226, 227, 255, 262, 270, 273, 288, 301, 306, 309, 314, 321, 325, 326, 329, 336, 343, 346, 350, 352, 364, 369, 370, 375, 379, 381, 382, 383, 384, 387, 389, 390, 405, 407, 412, 414, 415, 443, 447, 448, 449, 450, 452, 456, 459, 460, 461, 509, 510, 537, 550, 551, 558, 559, 560, 561, 562, 563, 565, 566, 567, 613, 630, 635, 636, 642, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 663, 664, 665, 666, 667, 684, 685, 686, 687, 695, 708, 772, 800, 801, 805, 806, 807, 809, 831, 867, 868, 881, 882, 885, 897, 915, 916, 917, 918, 921, 951, 954, 955, 993, 996, 1000, 1001, 1004, 1007, 1014, 1018, 1019, 1024, 1027, 1028, 1034, 1035, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053], "upadhyai": [1040, 1041, 1042, 1043], "upcast": [1044, 1048], "upcom": [174, 373], "upcoming_chang": [375, 383], "updat": [48, 80, 96, 135, 141, 149, 242, 317, 326, 352, 374, 375, 378, 383, 389, 401, 407, 412, 414, 421, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 463, 465, 469, 470, 471, 472, 473, 474, 475, 476, 478, 482, 483, 484, 485, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 583, 584, 585, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 691, 692, 693, 694, 695, 800, 801, 802, 803, 804, 805, 806, 807, 810, 812, 817, 821, 825, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 922, 978, 1000, 1007, 1008, 1009, 1018, 1027, 1028, 1035, 1041, 1042, 1043, 1045, 1047, 1049, 1050, 1052, 1053], "update_environments_and_lock_fil": 375, "update_from": 295, "update_func": 295, "update_h": 548, "update_layout": [141, 269], "update_legend_marker_s": 295, "update_terminal_region": 1043, "upgrad": [317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 373, 393, 1024, 1034, 1039, 1042], "upload": [369, 373, 379, 387, 674], "upload_d": 369, "upon": [228, 235, 244, 301, 370, 375, 387, 389, 401, 562, 563, 630, 633, 674, 792, 800, 801, 847, 848, 993, 1000, 1020, 1048], "upper": [44, 47, 49, 62, 105, 108, 111, 112, 113, 123, 127, 137, 138, 139, 146, 147, 148, 149, 155, 157, 161, 173, 175, 178, 185, 205, 210, 216, 217, 220, 224, 227, 228, 241, 245, 246, 267, 268, 269, 282, 293, 294, 304, 313, 331, 338, 341, 343, 345, 407, 413, 463, 590, 591, 593, 597, 616, 617, 618, 620, 622, 623, 625, 626, 628, 635, 636, 638, 640, 653, 657, 680, 738, 791, 880, 881, 909, 910, 911, 937, 1003, 1004, 1007, 1014, 1018, 1019, 1020, 1042], "upperbound": 737, "uppercas": [389, 1047], "uppercase_initi": 415, "upperlimit": 707, "upright": 370, "upstream": [362, 375, 379, 383, 387, 1014, 1043], "upward": [450, 456], "ur": 1045, "urbanowicz": 1004, "urbanowicz2015": 1004, "urcrnrlat": [51, 301], "urcrnrlon": [51, 301], "uri": 56, "url": [52, 53, 56, 165, 326, 369, 372, 377, 379, 492], "urllib": [48, 56], "urlopen": 56, "urlretriev": 48, "urlu": 1052, "urvang": [1042, 1044], "us": [0, 2, 15, 16, 20, 26, 28, 31, 38, 43, 44, 47, 48, 49, 51, 53, 54, 55, 58, 59, 60, 62, 63, 64, 65, 67, 69, 71, 73, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 99, 100, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 117, 119, 120, 123, 125, 126, 127, 128, 129, 130, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 156, 157, 158, 161, 162, 163, 164, 166, 168, 169, 170, 175, 176, 177, 178, 180, 181, 182, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 211, 212, 214, 215, 216, 218, 219, 222, 225, 227, 228, 230, 231, 232, 233, 235, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 254, 255, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 285, 286, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 304, 305, 306, 307, 308, 310, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 325, 326, 328, 329, 332, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 346, 349, 352, 354, 356, 361, 362, 363, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 382, 384, 388, 389, 390, 392, 393, 394, 395, 398, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 413, 414, 417, 418, 419, 420, 421, 423, 425, 426, 427, 428, 429, 430, 431, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 489, 490, 494, 495, 497, 500, 504, 509, 510, 512, 515, 516, 517, 520, 521, 523, 524, 525, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 575, 577, 579, 580, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 616, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 724, 726, 727, 729, 730, 731, 732, 733, 735, 738, 739, 740, 741, 742, 744, 745, 746, 748, 749, 751, 753, 754, 756, 758, 759, 760, 761, 762, 766, 767, 769, 770, 771, 772, 774, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 920, 921, 922, 924, 926, 929, 932, 933, 934, 936, 939, 940, 944, 946, 948, 950, 951, 955, 956, 959, 960, 961, 963, 966, 970, 972, 974, 975, 977, 979, 980, 981, 987, 992, 993, 994, 996, 997, 999, 1002, 1003, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "usa": [267, 370, 904, 994, 1001, 1016, 1017], "usabl": [150, 369, 375, 389, 401, 415, 803, 1034, 1041, 1048, 1049], "usag": [42, 78, 87, 104, 107, 116, 125, 133, 162, 185, 186, 238, 242, 244, 261, 262, 297, 299, 305, 335, 352, 362, 370, 374, 375, 378, 382, 383, 385, 389, 390, 393, 401, 407, 411, 412, 417, 418, 440, 444, 446, 450, 454, 461, 464, 471, 489, 495, 497, 524, 535, 536, 542, 550, 562, 563, 593, 611, 643, 651, 661, 662, 663, 669, 670, 671, 672, 679, 680, 681, 682, 683, 693, 781, 784, 795, 796, 863, 864, 866, 907, 909, 912, 915, 916, 917, 918, 951, 993, 994, 996, 1003, 1004, 1005, 1007, 1019, 1026, 1027, 1030, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1052], "usd": 247, "use_encoded_valu": [144, 155, 187, 247, 314, 881, 1014, 1046], "use_group": 263, "use_idf": [412, 415, 592, 593], "usecas": [318, 321, 323, 407, 563], "useless": [55, 143, 271, 381, 416, 516, 529, 661, 715, 1000, 1014, 1043], "user": [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 53, 63, 65, 89, 102, 121, 141, 148, 178, 182, 185, 188, 198, 230, 244, 258, 265, 275, 277, 285, 288, 294, 295, 298, 314, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 358, 362, 363, 369, 373, 374, 375, 377, 379, 381, 382, 383, 387, 388, 389, 393, 395, 398, 401, 405, 407, 408, 409, 411, 412, 414, 415, 416, 418, 419, 420, 421, 424, 430, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 457, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 575, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 622, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 700, 701, 702, 703, 705, 706, 707, 708, 710, 711, 712, 713, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 730, 731, 732, 733, 734, 735, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 921, 947, 951, 990, 993, 994, 1000, 1001, 1003, 1004, 1005, 1007, 1014, 1018, 1023, 1024, 1028, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "user_guid": 44, "user_r": 408, "userguid": 1041, "usernam": 393, "userscript": 383, "userwarn": [80, 96, 238, 380, 715, 1014, 1040, 1042, 1047, 1052], "ushtanit": [1046, 1047], "usp": 45, "usr": 373, "usual": [44, 53, 76, 110, 111, 113, 146, 147, 149, 155, 184, 186, 197, 210, 211, 261, 262, 265, 268, 277, 278, 282, 309, 320, 339, 358, 362, 363, 373, 375, 377, 379, 383, 387, 388, 389, 393, 398, 404, 407, 408, 411, 412, 414, 415, 416, 450, 456, 539, 541, 543, 548, 560, 561, 609, 610, 633, 643, 661, 662, 669, 670, 671, 679, 680, 681, 695, 729, 761, 809, 831, 835, 907, 924, 951, 993, 994, 996, 999, 1000, 1001, 1003, 1004, 1005, 1008, 1009, 1010, 1011, 1014, 1018, 1019, 1020, 1049], "utc": 1004, "utf": [350, 352, 415, 487, 504, 584, 590, 591, 593], "util": [2, 4, 10, 17, 36, 39, 48, 50, 51, 89, 90, 95, 133, 135, 148, 155, 167, 188, 203, 210, 218, 226, 232, 240, 244, 246, 256, 274, 276, 288, 310, 317, 326, 331, 339, 343, 350, 363, 369, 370, 375, 376, 377, 378, 387, 388, 389, 403, 406, 407, 408, 411, 412, 415, 437, 443, 444, 447, 449, 453, 465, 468, 482, 483, 484, 534, 537, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 579, 592, 613, 614, 638, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 693, 802, 803, 804, 805, 810, 812, 821, 825, 827, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 852, 854, 857, 858, 864, 865, 867, 870, 872, 873, 874, 879, 886, 887, 902, 903, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 999, 1002, 1004, 1005, 1014, 1015, 1023, 1028, 1030, 1034, 1035, 1037, 1038, 1040, 1041], "utilis": 1040, "utkarsh": [1040, 1041, 1042, 1043], "utl": 416, "utstat": 647, "uttam": 1047, "uv": [121, 412, 1053], "uw": [165, 372, 1046], "uwha": [1047, 1048], "v": [0, 2, 31, 44, 49, 53, 54, 56, 58, 65, 67, 70, 71, 72, 73, 74, 75, 76, 77, 82, 83, 89, 92, 103, 105, 108, 109, 112, 114, 115, 116, 121, 123, 124, 128, 139, 141, 142, 147, 148, 149, 161, 169, 182, 183, 188, 191, 200, 201, 208, 209, 210, 211, 214, 215, 225, 234, 241, 254, 255, 258, 259, 260, 264, 285, 299, 315, 317, 336, 351, 358, 363, 367, 372, 375, 381, 383, 389, 403, 404, 405, 409, 410, 412, 415, 416, 430, 441, 445, 452, 462, 463, 464, 465, 470, 473, 474, 475, 476, 477, 482, 483, 484, 497, 513, 525, 531, 532, 538, 542, 546, 547, 551, 553, 555, 557, 559, 561, 563, 565, 566, 569, 571, 583, 591, 595, 596, 602, 608, 614, 633, 634, 637, 638, 642, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 673, 675, 676, 679, 681, 682, 691, 698, 702, 704, 707, 720, 739, 740, 742, 757, 758, 760, 791, 798, 803, 808, 815, 817, 829, 833, 835, 836, 837, 840, 841, 842, 850, 858, 860, 863, 865, 867, 868, 871, 874, 880, 881, 882, 887, 888, 891, 901, 907, 908, 909, 910, 912, 913, 916, 918, 922, 998, 999, 1000, 1001, 1004, 1005, 1006, 1009, 1012, 1014, 1018, 1019, 1021, 1025, 1030, 1034, 1037, 1038, 1039, 1042, 1044, 1045, 1048, 1049, 1052], "v0": [471, 472, 478, 513, 590, 591, 593, 803, 817, 866, 869, 1035, 1042, 1043, 1044], "v1": [262, 322, 369, 393, 800, 801, 1046, 1049, 1050, 1051, 1052], "v10": 262, "v11": 262, "v12": 262, "v13": 262, "v14": 262, "v15": 262, "v16": 262, "v17": 262, "v18": 262, "v19": 262, "v2": [262, 370, 498, 667, 688, 689, 1000], "v20": 262, "v21": 262, "v22": 262, "v23": 262, "v24": 262, "v25": 262, "v26": 262, "v27": 262, "v28": 262, "v3": 262, "v4": 262, "v5": [262, 1042], "v6": 262, "v7": 262, "v8": 262, "v9": 262, "v_": [404, 415], "v_1": 404, "v_2": 404, "v_i": 1009, "v_ih_j": 1009, "v_init": 544, "v_j": [407, 758, 1009], "v_k": [410, 412, 532, 538, 546, 547], "v_measur": [739, 798], "v_measure_scor": [2, 58, 73, 74, 83, 92, 323, 351, 407, 720, 739, 740, 760, 1004, 1043], "v_new": 863, "va": [48, 145, 163, 279, 296, 298, 345], "vac": 285, "vacaliuc": [1042, 1043], "vacat": 370, "vachan": 1045, "vadim": [1042, 1046, 1047], "vaerenbergh": [1049, 1050], "vaggi": [1036, 1037], "vaillant": 1046, "val": [106, 222, 268, 953], "val_errors_with": 145, "val_errors_without": 145, "val_pr": 145, "val_scor": 146, "vale": 1044, "valencia": [1048, 1050], "valentin": [1037, 1039, 1049, 1050], "valero": 52, "valgrind": 378, "valid": [2, 48, 53, 54, 64, 65, 88, 89, 90, 91, 104, 105, 107, 108, 110, 114, 128, 133, 139, 141, 143, 144, 145, 146, 147, 150, 159, 162, 163, 165, 177, 182, 185, 187, 191, 196, 197, 198, 205, 207, 210, 212, 218, 228, 244, 246, 250, 255, 258, 260, 265, 268, 269, 270, 272, 274, 275, 276, 277, 280, 281, 282, 283, 285, 292, 306, 309, 314, 317, 319, 324, 326, 331, 339, 346, 354, 356, 363, 370, 375, 378, 387, 388, 389, 401, 402, 405, 407, 408, 409, 412, 413, 414, 415, 416, 421, 423, 437, 441, 442, 443, 445, 446, 447, 449, 450, 457, 463, 464, 468, 471, 472, 473, 474, 475, 476, 478, 482, 483, 484, 485, 494, 502, 503, 505, 516, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 548, 550, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 573, 577, 579, 584, 585, 591, 595, 596, 599, 604, 612, 635, 637, 641, 642, 643, 644, 645, 646, 649, 650, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 691, 692, 695, 702, 704, 705, 709, 716, 731, 765, 768, 777, 781, 782, 783, 788, 795, 796, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 838, 841, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 868, 870, 871, 873, 879, 887, 899, 900, 902, 903, 905, 907, 909, 912, 914, 915, 916, 917, 918, 924, 926, 933, 934, 935, 936, 937, 944, 958, 960, 963, 987, 988, 989, 990, 991, 992, 994, 1003, 1004, 1005, 1007, 1008, 1012, 1014, 1016, 1018, 1019, 1020, 1024, 1025, 1028, 1030, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "valid_metr": [847, 848, 1007, 1050], "valid_scor": 999, "validate_data": [2, 326, 377, 1053], "validate_metadata": [244, 960], "validate_separ": 992, "validation_curv": [2, 323, 346, 398, 826, 999, 1004, 1041, 1042, 1043, 1046, 1050, 1053], "validation_fract": [145, 150, 218, 320, 414, 560, 561, 562, 563, 669, 670, 671, 679, 681, 864, 865, 1018, 1042, 1048], "validation_score_": [150, 562, 563], "validation_scores_": [864, 865, 1049], "validationcurvedisplai": [2, 281, 999, 1050], "validationerror": 1048, "vallei": 314, "vall\u00e9": 1041, "valu": [2, 21, 28, 44, 45, 47, 51, 52, 53, 54, 56, 59, 60, 64, 65, 69, 73, 76, 78, 80, 81, 87, 89, 94, 95, 96, 100, 104, 106, 108, 110, 112, 114, 121, 124, 127, 131, 133, 135, 137, 139, 140, 141, 142, 144, 147, 148, 151, 152, 154, 155, 160, 161, 163, 164, 167, 169, 172, 173, 175, 177, 184, 185, 186, 187, 188, 190, 192, 193, 195, 196, 197, 198, 200, 201, 202, 204, 207, 208, 210, 211, 212, 214, 216, 225, 228, 229, 232, 233, 237, 238, 239, 240, 241, 242, 243, 247, 250, 251, 253, 259, 261, 262, 264, 266, 268, 269, 271, 273, 274, 275, 277, 279, 280, 281, 282, 288, 291, 300, 301, 303, 304, 306, 308, 309, 310, 311, 312, 313, 314, 315, 319, 325, 331, 339, 343, 344, 346, 350, 351, 352, 354, 356, 358, 362, 363, 364, 367, 368, 369, 370, 372, 376, 377, 378, 380, 381, 382, 384, 387, 388, 389, 392, 393, 398, 404, 405, 407, 408, 409, 410, 411, 415, 416, 417, 418, 419, 420, 421, 430, 431, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 482, 483, 484, 485, 487, 490, 491, 494, 497, 498, 499, 502, 509, 510, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 528, 529, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 583, 584, 585, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 700, 701, 702, 703, 704, 705, 707, 708, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 738, 739, 740, 741, 742, 743, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 772, 774, 777, 781, 782, 783, 784, 785, 786, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 812, 814, 815, 817, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 895, 896, 897, 898, 899, 900, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 925, 928, 930, 931, 932, 933, 934, 937, 938, 939, 940, 942, 951, 953, 960, 963, 964, 965, 966, 967, 979, 980, 981, 993, 996, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1015, 1017, 1018, 1019, 1025, 1026, 1028, 1029, 1030, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "valuabl": [145, 262, 375, 994, 1028], "valuat": 414, "value_count": [44, 53, 186, 262, 282, 285], "value_kei": [387, 922], "value_typ": [417, 620], "valueerror": [2, 244, 245, 377, 381, 398, 468, 579, 605, 620, 638, 674, 717, 839, 857, 866, 872, 886, 932, 934, 936, 937, 988, 989, 990, 1014, 1036, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1051, 1052, 1053], "values_format": [700, 1044], "vamsi": 1049, "van": [0, 369, 397, 409, 469, 474, 535, 630, 695, 699, 994, 1001, 1004, 1010, 1028, 1035, 1036, 1037, 1038, 1041, 1042, 1043, 1045, 1046, 1047, 1049, 1050], "vandana": 1045, "vander": 193, "vandermond": [211, 1014], "vanderpla": [0, 397, 1022, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "vang": 1047, "vanilla": [210, 403, 406, 407, 447, 449, 460, 632], "vanilla_model": 262, "vanilla_model_coef": 282, "vanrel": 1040, "vanschoren": [369, 1046], "vapnik": [595, 596], "var": [116, 117, 138, 165, 193, 268, 372, 376, 416, 644, 648, 909, 910, 911, 912, 913, 1004, 1042], "var_": [535, 845, 887, 1047], "var_smooth": [845, 1042], "varanasi": [1034, 1037], "vardhan": 1038, "varepsilon": [407, 1018, 1019], "vari": [47, 53, 65, 68, 71, 80, 81, 89, 96, 99, 108, 119, 141, 142, 143, 153, 164, 171, 173, 182, 185, 186, 188, 199, 200, 202, 203, 205, 208, 217, 220, 223, 235, 242, 247, 258, 264, 268, 271, 282, 302, 308, 310, 311, 313, 323, 327, 333, 339, 342, 344, 347, 348, 358, 362, 364, 370, 389, 401, 441, 445, 446, 501, 509, 515, 516, 523, 560, 561, 565, 566, 649, 650, 653, 654, 655, 656, 657, 658, 663, 664, 665, 666, 684, 687, 706, 766, 822, 826, 831, 833, 834, 864, 868, 872, 887, 904, 912, 915, 916, 977, 996, 999, 1000, 1004, 1007, 1008, 1017, 1020, 1025, 1028, 1041, 1042, 1050], "variabl": [2, 44, 49, 51, 52, 53, 73, 103, 138, 142, 144, 147, 148, 150, 160, 165, 176, 177, 180, 181, 186, 187, 190, 196, 200, 210, 214, 215, 228, 232, 244, 247, 259, 262, 268, 271, 278, 285, 287, 313, 314, 315, 358, 362, 364, 370, 372, 373, 375, 377, 379, 380, 383, 389, 398, 403, 407, 408, 409, 410, 412, 414, 415, 416, 450, 482, 483, 484, 487, 500, 502, 509, 516, 533, 535, 537, 542, 545, 554, 560, 561, 606, 608, 609, 610, 643, 653, 654, 657, 658, 664, 685, 686, 698, 712, 750, 804, 805, 808, 810, 811, 812, 813, 818, 819, 820, 821, 822, 823, 827, 828, 829, 830, 832, 835, 839, 840, 870, 881, 884, 888, 896, 908, 923, 993, 994, 996, 1000, 1003, 1004, 1005, 1006, 1007, 1009, 1011, 1012, 1014, 1018, 1020, 1023, 1024, 1034, 1039, 1042, 1044, 1047, 1049, 1053], "varianc": [2, 38, 44, 45, 53, 65, 80, 89, 91, 96, 106, 110, 112, 116, 117, 121, 122, 123, 126, 127, 128, 129, 131, 134, 149, 150, 176, 182, 185, 191, 193, 195, 196, 200, 210, 212, 215, 228, 258, 262, 265, 268, 271, 277, 278, 282, 297, 303, 308, 313, 325, 351, 358, 367, 371, 384, 404, 405, 407, 409, 410, 411, 412, 413, 414, 419, 441, 445, 449, 463, 522, 525, 533, 534, 535, 542, 545, 550, 551, 556, 557, 559, 560, 561, 566, 605, 609, 610, 614, 628, 646, 647, 648, 655, 659, 660, 663, 665, 675, 676, 677, 678, 679, 690, 713, 731, 788, 800, 801, 845, 856, 871, 877, 883, 885, 887, 893, 895, 897, 898, 916, 918, 978, 979, 980, 984, 998, 999, 1000, 1002, 1007, 1008, 1009, 1012, 1016, 1018, 1019, 1020, 1021, 1025, 1026, 1030, 1034, 1042, 1044, 1045, 1046, 1047, 1048, 1049], "variance_weight": [731, 788, 1004], "variances_": 605, "variancethreshold": [2, 416, 872, 994, 1037, 1044, 1047, 1050], "variant": [2, 65, 79, 121, 179, 181, 182, 268, 320, 321, 351, 352, 381, 407, 410, 412, 415, 417, 449, 460, 490, 494, 495, 513, 516, 544, 560, 561, 566, 618, 622, 625, 626, 630, 633, 641, 642, 644, 648, 675, 707, 804, 808, 810, 811, 812, 821, 829, 850, 868, 904, 994, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1018, 1025, 1034, 1042], "variat": [2, 44, 47, 52, 73, 99, 119, 152, 165, 174, 175, 181, 182, 185, 215, 252, 254, 259, 265, 279, 287, 298, 318, 339, 372, 401, 411, 412, 443, 447, 459, 537, 646, 675, 677, 678, 800, 801, 821, 822, 824, 993, 1004, 1014, 1017, 1020, 1023, 1025, 1029, 1030, 1037, 1039, 1040], "variegatu": [51, 301, 370, 499], "variet": 314, "varieti": [26, 63, 180, 255, 314, 339, 383, 407, 409, 415, 646, 1007, 1020, 1023, 1028, 1036, 1049, 1050], "varimax": [131, 412, 533, 1046], "variou": [4, 42, 44, 52, 72, 73, 75, 89, 90, 92, 94, 95, 96, 113, 116, 124, 182, 185, 191, 218, 220, 229, 230, 231, 232, 241, 285, 288, 304, 312, 318, 328, 329, 350, 352, 357, 358, 362, 369, 370, 371, 372, 375, 377, 380, 388, 390, 405, 407, 409, 437, 441, 472, 503, 515, 516, 526, 558, 559, 560, 561, 562, 563, 565, 566, 568, 569, 570, 571, 596, 604, 650, 654, 656, 658, 661, 664, 666, 668, 669, 671, 676, 678, 679, 694, 695, 702, 803, 806, 807, 809, 817, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 867, 907, 908, 993, 994, 1001, 1004, 1007, 1011, 1014, 1018, 1020, 1023, 1025, 1027, 1028, 1034, 1037, 1038, 1051], "varma": [1043, 1053], "varoquaux": [0, 390, 396, 397, 1022, 1028, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "varun": [1040, 1041, 1042, 1048, 1049], "varunchaduvula": 1052, "vasani": 1045, "vasilei": [1028, 1041], "vasileva": 1048, "vasiloudi": 1039, "vassard": 1048, "vassilvitskii": [407, 447, 460], "vast": [262, 375], "vastli": 313, "vathsala": [1041, 1042, 1043, 1044], "vatsan": 1040, "vavrova": 1041, "vazelh": [1042, 1043, 1044], "vazirgianni": 407, "vb": 537, "vbgmm": [1034, 1038, 1040], "vc": 373, "vcvarsal": 373, "vd": 1052, "ve": [326, 351, 375, 415, 1028, 1041], "veal": 58, "vealei": 1053, "veb2009": 407, "veb2010": 407, "vec": [121, 415, 539, 541, 548], "veclib": [362, 387], "vect": [48, 103, 269, 332, 415], "vect__": 269, "vect__max_df": 269, "vect__min_df": 269, "vect__ngram_rang": 269, "vect__norm": 269, "vector": [2, 17, 40, 47, 48, 49, 50, 52, 55, 58, 59, 64, 67, 69, 72, 76, 105, 121, 123, 124, 161, 169, 177, 194, 214, 215, 222, 226, 242, 243, 250, 266, 268, 269, 273, 294, 306, 308, 325, 333, 335, 336, 339, 340, 341, 342, 343, 344, 346, 348, 351, 362, 364, 370, 380, 381, 384, 387, 389, 404, 405, 407, 409, 410, 411, 412, 414, 417, 418, 419, 437, 443, 444, 445, 447, 449, 450, 451, 453, 464, 465, 467, 468, 482, 483, 484, 485, 487, 489, 498, 510, 513, 522, 525, 532, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 550, 551, 552, 553, 568, 569, 570, 571, 583, 584, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 616, 617, 618, 620, 621, 622, 623, 625, 626, 628, 634, 641, 643, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 675, 676, 677, 678, 679, 680, 681, 689, 690, 691, 692, 694, 695, 696, 698, 702, 722, 738, 766, 771, 772, 773, 774, 776, 777, 778, 780, 781, 802, 803, 806, 807, 817, 825, 831, 834, 835, 836, 842, 843, 844, 845, 846, 849, 850, 851, 853, 854, 855, 857, 858, 859, 864, 865, 872, 874, 879, 887, 891, 894, 905, 907, 908, 909, 910, 911, 912, 913, 914, 933, 948, 950, 951, 966, 972, 993, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1014, 1018, 1020, 1025, 1026, 1030, 1031, 1034, 1035, 1036, 1037, 1038, 1040, 1042, 1043, 1045, 1047, 1052], "vectori": [389, 1044], "vectorizer2": 590, "vectorizer_param": 332, "vectorizermixin": 1044, "vectorizing_tim": 48, "vectors_test": 370, "ved": 1051, "vedaldi": [641, 996], "vedpawar2254": 1053, "veenhui": [1049, 1050, 1051, 1052, 1053], "veerkhar": 1049, "veerlosar": 1044, "veghit": 1050, "vehag": [210, 228], "vehbrand": [210, 228], "vehga": [210, 228], "vehicl": [210, 228], "vehpow": [210, 228], "vel": 372, "velislav": 1053, "velkov": 1036, "veloc": 375, "vembu": 405, "vempati": 996, "vendor": [244, 1039, 1042, 1043], "venezuela": [51, 301, 370, 499], "venkat": [0, 397], "venkatachalam": [1044, 1045, 1046, 1047, 1048, 1051, 1052], "venkatesh": 1044, "venna": 699, "venthur": 1042, "venu": [0, 389], "venv": [373, 393], "vera": [1048, 1049], "verbos": [50, 78, 84, 88, 98, 103, 105, 107, 155, 269, 305, 306, 308, 320, 332, 350, 373, 379, 389, 440, 443, 447, 449, 452, 454, 459, 462, 464, 467, 471, 472, 478, 532, 537, 538, 539, 540, 541, 544, 546, 547, 548, 549, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 595, 596, 630, 635, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 679, 680, 681, 682, 683, 684, 685, 686, 687, 690, 693, 695, 697, 768, 781, 800, 801, 803, 806, 807, 809, 817, 826, 828, 829, 830, 831, 832, 834, 836, 838, 841, 856, 863, 864, 865, 866, 867, 868, 869, 904, 907, 908, 909, 910, 911, 912, 913, 969, 1024, 1036, 1037, 1039, 1041, 1042, 1043, 1045, 1046, 1048, 1049, 1052, 1053], "verbose_feature_names_out": [144, 185, 186, 187, 251, 314, 320, 321, 322, 324, 408, 464, 467, 866, 1047, 1051, 1052, 1053], "verbose_interv": [800, 801], "veri": [44, 53, 63, 65, 75, 76, 78, 80, 84, 86, 94, 96, 112, 113, 114, 116, 119, 124, 147, 153, 174, 180, 185, 186, 187, 200, 210, 211, 212, 215, 218, 228, 234, 237, 243, 244, 247, 253, 262, 270, 271, 274, 275, 277, 278, 288, 305, 308, 320, 328, 331, 339, 343, 348, 350, 352, 358, 362, 370, 374, 375, 377, 380, 381, 383, 387, 388, 389, 401, 405, 406, 407, 409, 411, 412, 413, 414, 415, 416, 417, 442, 447, 452, 462, 471, 472, 478, 501, 505, 511, 542, 558, 559, 562, 563, 565, 566, 568, 569, 591, 592, 625, 653, 654, 657, 658, 659, 667, 685, 686, 688, 694, 695, 698, 708, 746, 749, 795, 800, 803, 805, 811, 813, 817, 820, 823, 847, 848, 872, 876, 877, 878, 887, 899, 900, 909, 912, 915, 916, 917, 918, 926, 951, 993, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1007, 1008, 1010, 1011, 1012, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1028, 1034, 1039, 1040, 1042, 1045, 1047, 1049, 1050, 1051], "verif": [370, 1004, 1028], "verifi": [87, 94, 133, 150, 185, 210, 375, 380, 401, 403, 492, 987, 1007], "verlag": 699, "vermeil": 1042, "veronda": 1035, "verrier": 1049, "versa": [185, 265, 350, 407, 417, 442, 609, 610, 836, 1038], "versatil": [417, 1019, 1028], "versicolor": [127, 277, 278, 505], "versicolour": [129, 372], "version": [2, 7, 44, 67, 81, 87, 89, 104, 121, 126, 135, 150, 171, 181, 186, 187, 190, 196, 208, 211, 218, 224, 226, 244, 247, 251, 287, 305, 313, 317, 318, 319, 320, 322, 323, 324, 325, 326, 339, 350, 362, 370, 374, 376, 377, 378, 379, 381, 383, 384, 387, 389, 390, 393, 394, 398, 400, 401, 407, 408, 410, 412, 414, 415, 417, 418, 419, 425, 427, 429, 430, 431, 432, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 505, 506, 509, 510, 511, 513, 515, 523, 524, 528, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 583, 584, 585, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 703, 704, 705, 707, 710, 711, 712, 714, 716, 717, 721, 724, 725, 726, 727, 728, 730, 731, 732, 733, 734, 737, 741, 742, 743, 744, 745, 746, 749, 756, 757, 760, 761, 762, 764, 769, 770, 772, 781, 785, 786, 787, 788, 790, 792, 793, 794, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 816, 817, 821, 822, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 893, 895, 896, 897, 899, 900, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 920, 921, 931, 933, 934, 944, 945, 946, 950, 951, 956, 959, 960, 961, 962, 963, 966, 969, 970, 973, 978, 984, 989, 990, 992, 993, 996, 998, 1001, 1004, 1006, 1008, 1010, 1012, 1017, 1018, 1020, 1023, 1024, 1027, 1032], "versionchang": 375, "versionwarn": 379, "versu": [68, 123, 134, 143, 153, 155, 171, 182, 185, 191, 219, 225, 237, 242, 243, 245, 256, 260, 263, 285, 294, 296, 303, 310, 327, 332, 335, 336, 338, 339, 343, 407, 411, 414, 417, 505, 535, 557, 613, 634, 642, 661, 662, 669, 671, 677, 678, 679, 680, 786, 803, 808, 829, 839, 868, 903, 904, 911, 912, 916, 993, 1000, 1004, 1005, 1010, 1017, 1018, 1019, 1025, 1042], "vert": [148, 187, 188, 317, 1018], "vertex": [56, 64, 407, 453, 1047], "vertic": [46, 56, 94, 146, 188, 200, 241, 242, 272, 287, 308, 311, 344, 345, 389, 404, 407, 412, 516, 700, 784], "verticalalign": [52, 64, 75, 76], "vese": 1046, "vesteghem": 1044, "veto": 390, "vettigli": 1043, "vga": 58, "vh": 951, "vi": [46, 48, 370, 702, 1042, 1045], "via": [0, 2, 44, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 358, 362, 363, 367, 372, 373, 376, 377, 379, 383, 387, 388, 389, 390, 393, 398, 404, 405, 407, 408, 410, 411, 412, 416, 417, 437, 502, 536, 540, 542, 544, 547, 560, 561, 568, 569, 599, 614, 619, 624, 627, 630, 641, 642, 643, 644, 659, 669, 671, 674, 676, 679, 690, 692, 695, 696, 712, 803, 817, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 839, 845, 853, 864, 866, 867, 868, 887, 888, 945, 993, 998, 1000, 1001, 1003, 1005, 1011, 1012, 1018, 1019, 1024, 1025, 1028, 1030, 1034, 1038, 1039, 1042, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "viacheslav": 1040, "viard": 1045, "vibrantabhi19": 1041, "vicdemand": 150, "vice": [185, 265, 350, 407, 417, 442, 609, 610, 836, 1038], "vicent": [1047, 1048, 1049], "vicpric": 150, "victoireloui": 1048, "victor": [407, 452, 462, 1041, 1044], "victoria": [150, 1053], "video": [322, 369, 378, 403, 504, 1005, 1028, 1030], "vie": 1040, "viega": 1004, "view": [44, 78, 81, 110, 123, 150, 186, 249, 362, 364, 375, 407, 415, 537, 648, 660, 847, 848, 922, 1000, 1001], "view_init": [186, 230, 232, 234], "viewabl": 375, "vighnesh": [1039, 1040, 1042], "vignesh": 1050, "vigni": 1051, "vijai": [1028, 1037], "vijalapuram": 1042, "vijeth": [1050, 1051], "vijitbenjaronk": [1041, 1042], "vika": [1046, 1048], "vikram": [1040, 1049, 1050], "vikrant": 1048, "viktor765": 1053, "vila": [1044, 1046], "vilhelm": [1041, 1042], "villalba": [1039, 1042, 1046], "villanova": [1046, 1047], "villaz\u00f3n": 1046, "villu": 1040, "vil\u00e9m": 1047, "vinayak": [1038, 1039, 1040, 1042, 1043, 1049, 1050], "vinc": 1053, "vincent": [0, 397, 1028, 1034, 1036, 1038, 1039, 1041, 1044, 1049, 1050, 1051], "vineet": 1052, "vineyard": 314, "vinh": [407, 707], "vinh10a": 407, "viniciu": [1046, 1047], "vinit": 1042, "vink": [1045, 1047], "vinod": 1042, "vin\u00edciu": 1042, "viola": [370, 1042], "violat": [63, 339, 387, 389, 638, 937, 1011, 1018, 1020], "violet": [128, 1050], "violeta": 1046, "vipin": 407, "viraj": 1042, "virchan": 1052, "virgil": [0, 365, 397, 1034, 1035, 1037, 1053], "virgilefritsch": 1034, "virginica": [127, 129, 277, 278, 372, 505, 1004], "viridi": [67, 74, 288, 700], "viridis_r": 269, "virshup": 1051, "virtanen": 1039, "virtual": [376, 393, 411, 1028], "virtualenv": [373, 375], "visag": 1028, "visconti": 1038, "vishaal": [1042, 1043], "vishal": 1049, "vishwakarma": 1048, "visibl": [53, 185, 186, 212, 348, 369, 375, 407, 863, 1009, 1039, 1049], "vision": [535, 761, 762, 996, 1000, 1002, 1020, 1023, 1028, 1035], "visit": [357, 375, 1011, 1027], "visual": [2, 28, 43, 44, 49, 53, 59, 63, 67, 69, 79, 81, 83, 86, 91, 94, 95, 112, 120, 121, 123, 125, 128, 130, 140, 141, 148, 150, 151, 153, 157, 158, 163, 177, 181, 182, 186, 188, 196, 202, 207, 210, 212, 228, 230, 231, 235, 236, 239, 242, 248, 249, 258, 260, 261, 264, 265, 269, 270, 273, 275, 277, 278, 293, 297, 298, 300, 302, 304, 308, 312, 313, 317, 319, 329, 343, 367, 371, 373, 381, 382, 389, 404, 409, 411, 412, 413, 414, 438, 441, 445, 446, 454, 471, 472, 497, 503, 505, 508, 511, 515, 523, 533, 535, 542, 565, 567, 634, 636, 648, 661, 692, 695, 700, 701, 703, 704, 705, 721, 730, 785, 792, 804, 805, 808, 809, 820, 821, 822, 823, 824, 826, 833, 864, 868, 872, 876, 877, 879, 883, 884, 885, 887, 907, 909, 910, 912, 913, 921, 947, 999, 1001, 1002, 1007, 1008, 1010, 1011, 1014, 1020, 1023, 1025, 1030, 1037, 1044, 1045, 1046, 1048], "visualis": [121, 124, 131, 245, 545, 679, 681, 804, 805, 808, 820, 821, 822, 823, 824, 1007, 1024], "visualize_group": 263, "vitor": 1049, "vitthal": 1053, "vivek": [1041, 1042, 1043, 1051], "viz": [278, 382], "vjacheslav": 1038, "vlad": [0, 121, 397, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043], "vladimir": [536, 951, 1000, 1044, 1048, 1051], "vlahava": [723, 743, 1004], "vlajic": [1045, 1046, 1052], "vlasio": [1028, 1041], "vlasovet": 1047, "vlb": 58, "vliet": 1046, "vline": [110, 123, 198, 200, 211, 268, 281, 309], "vlines_": 635, "vlo": 52, "vmax": [67, 85, 114, 121, 124, 131, 172, 175, 192, 196, 202, 226, 242, 257, 263, 305, 339], "vmin": [67, 76, 114, 121, 124, 131, 172, 175, 192, 196, 202, 226, 242, 257, 263, 305, 339], "vnherdeiro": 1044, "vo": [1040, 1048], "voc": 1004, "vocabulari": [119, 225, 350, 351, 377, 387, 415, 590, 591, 592, 593, 1006, 1034, 1036, 1039, 1042, 1045, 1047], "vocabulary_": [352, 415, 583, 590, 593, 1034], "void": 376, "vol": [65, 177, 196, 262, 274, 372, 407, 474, 560, 561, 631, 638, 648, 667, 688, 689, 800, 832, 844, 994, 1006, 1007], "volgen": [404, 722], "voltag": 58, "volum": [0, 100, 111, 165, 174, 370, 372, 407, 409, 473, 535, 772, 1000, 1019, 1028], "volume11": 407, "volume2": 679, "volume7": [669, 670], "volunt": 383, "voluntari": 350, "von": [407, 452, 462, 694, 1041, 1042], "voronoi": [81, 100, 407], "voss": 1042, "vote": [2, 14, 134, 136, 141, 154, 155, 156, 157, 182, 207, 287, 343, 389, 390, 502, 556, 557, 558, 561, 565, 566, 570, 571, 660, 835, 849, 850, 855, 857, 1005, 1007, 1025, 1026, 1030, 1034, 1037, 1039, 1044], "votingclassifi": [2, 64, 65, 134, 182, 219, 336, 398, 414, 505, 565, 571, 634, 661, 845, 849, 912, 915, 993, 994, 1025, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1051, 1052], "votingregressor": [2, 158, 398, 414, 570, 994, 1043, 1044, 1045, 1048, 1051, 1052], "votingregressorifittedvotingregressor": 158, "voxel": [81, 100, 587], "vp": 1028, "vq": 92, "vqean3": [1042, 1043], "vredevoogd": [1036, 1037], "vrigazov": 1049, "vrishank": [1041, 1042], "vs_buildtool": 373, "vstack": [52, 64, 91, 99, 172, 173, 195, 253, 257, 288, 301, 344, 634, 1005, 1042], "vstolbunov": 1039, "vt": 551, "vufg": 1042, "vukolov": [1042, 1043], "vulner": 401, "vuw": 531, "vvz2010": 996, "vx": 73, "vya": [1042, 1043, 1044], "vyom": [1049, 1050], "vz2010": 996, "v\u00e1zquez": 1037, "v\u0103n": 1049, "w": [2, 46, 52, 54, 67, 71, 76, 78, 92, 98, 130, 165, 180, 203, 209, 214, 227, 244, 245, 253, 254, 255, 258, 259, 279, 306, 320, 321, 343, 344, 346, 352, 358, 363, 370, 372, 381, 401, 407, 408, 412, 414, 415, 419, 424, 430, 437, 465, 469, 472, 474, 482, 483, 484, 524, 539, 541, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 568, 569, 570, 571, 590, 591, 593, 596, 613, 614, 638, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 696, 702, 728, 729, 759, 802, 803, 817, 825, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 849, 850, 853, 854, 857, 858, 864, 865, 900, 902, 903, 907, 908, 909, 910, 912, 913, 915, 916, 917, 918, 948, 953, 1000, 1004, 1008, 1009, 1014, 1016, 1018, 1019, 1044, 1048, 1049, 1050, 1051], "w0": 119, "w1": [119, 414, 660], "w1992": 414, "w2": 414, "w3": 414, "w_": [412, 649, 650, 655, 656, 663, 664, 665, 666, 684, 687, 1000, 1004, 1006, 1009], "w_0": 1000, "w_1": [414, 1000, 1008], "w_1x_1": 1008, "w_2": [414, 1000, 1008], "w_2x_2": 1008, "w_3": 1000, "w_4": 1000, "w_5": 1000, "w_i": [414, 995, 1004], "w_ij": 663, "w_init": [419, 534], "w_intercept": [907, 908], "w_j": [649, 655, 1004, 1018], "w_k": [407, 414, 1000], "w_l": 1000, "w_mx_m": 1008, "w_n": 414, "w_new": 412, "w_p": 1000, "w_pad": [121, 143, 355], "w_x_1": [907, 908], "w_x_n": [907, 908], "wa": [0, 44, 48, 54, 65, 76, 103, 104, 112, 117, 119, 152, 155, 165, 178, 185, 190, 214, 234, 244, 247, 259, 261, 262, 264, 266, 268, 274, 275, 282, 285, 305, 313, 317, 318, 322, 326, 330, 331, 350, 352, 357, 358, 362, 370, 372, 373, 375, 379, 380, 389, 393, 398, 401, 403, 404, 406, 407, 410, 411, 415, 419, 431, 440, 441, 442, 443, 445, 446, 447, 449, 450, 454, 457, 460, 464, 468, 469, 474, 482, 483, 484, 485, 516, 524, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 554, 555, 556, 557, 558, 559, 564, 565, 566, 567, 568, 569, 570, 571, 576, 583, 584, 585, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 630, 631, 632, 633, 638, 641, 642, 643, 644, 645, 661, 662, 667, 675, 677, 682, 688, 689, 691, 692, 695, 716, 732, 733, 781, 786, 787, 790, 800, 801, 803, 806, 807, 817, 830, 832, 844, 851, 854, 856, 859, 863, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 896, 899, 900, 904, 905, 931, 933, 934, 946, 970, 991, 992, 993, 994, 1003, 1004, 1007, 1010, 1014, 1017, 1020, 1023, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "wadawson": 1038, "wadsworth": [915, 916, 1020], "waelbenamara": 1045, "wagner": 1048, "wai": [0, 2, 38, 44, 56, 65, 84, 94, 104, 107, 140, 146, 151, 153, 165, 176, 185, 187, 188, 211, 214, 215, 225, 228, 239, 240, 243, 244, 247, 248, 263, 268, 275, 277, 308, 309, 320, 322, 323, 358, 362, 363, 364, 369, 371, 373, 374, 377, 378, 379, 383, 384, 389, 390, 393, 398, 401, 404, 405, 406, 407, 408, 410, 411, 412, 414, 415, 416, 417, 418, 422, 443, 444, 451, 452, 453, 459, 460, 462, 463, 469, 497, 556, 557, 564, 573, 591, 601, 602, 614, 635, 669, 670, 679, 680, 681, 702, 707, 709, 720, 739, 740, 757, 758, 760, 766, 777, 781, 791, 798, 828, 836, 853, 874, 880, 885, 891, 917, 918, 974, 977, 993, 994, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1009, 1010, 1011, 1012, 1014, 1016, 1018, 1019, 1020, 1023, 1024, 1027, 1028, 1034, 1036, 1042, 1047, 1048, 1052, 1053], "waijean": 1047, "wainwright": [724, 726, 727], "waist": 372, "wait": [56, 373, 375, 379, 389, 669, 670, 671, 679, 681, 1046], "waithera": 1044, "wal": 52, "waldo": 322, "wale": 150, "walk": [407, 413, 1037], "walker": 1038, "wall": 407, "wallach": [1038, 1039], "walli": 1042, "wallygauz": 1042, "walsh": [1046, 1048], "walt": [1037, 1038, 1042], "walter": 1040, "walton": 322, "wan": 1042, "wang": [412, 537, 682, 692, 696, 729, 759, 1000, 1001, 1004, 1037, 1039, 1040, 1041, 1042, 1046, 1049, 1050, 1052, 1053], "wangz10": 1039, "want": [0, 31, 44, 52, 59, 62, 63, 64, 89, 98, 104, 165, 167, 181, 185, 210, 211, 212, 244, 247, 259, 262, 268, 277, 283, 285, 291, 305, 322, 333, 336, 350, 358, 362, 363, 364, 373, 374, 375, 376, 377, 379, 380, 381, 387, 388, 389, 390, 393, 398, 401, 405, 406, 407, 408, 409, 414, 415, 416, 501, 504, 505, 511, 536, 550, 657, 658, 659, 661, 662, 669, 671, 677, 678, 679, 767, 802, 825, 853, 856, 872, 879, 900, 907, 993, 1000, 1003, 1004, 1005, 1008, 1010, 1014, 1015, 1019, 1023, 1034, 1048, 1052], "ward": [0, 2, 54, 60, 72, 75, 76, 77, 80, 81, 86, 87, 88, 90, 96, 182, 188, 234, 397, 415, 441, 445, 463, 531, 860, 1025, 1034, 1037, 1039], "ward__n_clust": 88, "ward_tre": [2, 88, 441, 445, 1034, 1038], "wardagglom": 1039, "wardagglomer": 1037, "wardclust": 1037, "wareh": 737, "warm": [378, 389, 532, 538, 544, 546, 547, 613, 656, 662, 669, 670, 671, 679, 680, 681, 1000, 1044, 1046, 1048], "warm_start": [139, 173, 204, 320, 377, 381, 389, 414, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 613, 649, 651, 652, 655, 661, 663, 665, 669, 670, 671, 672, 679, 680, 681, 683, 800, 801, 856, 864, 865, 1010, 1026, 1030, 1034, 1037, 1038, 1039, 1042, 1043, 1044, 1045, 1048, 1050], "warn": [2, 15, 80, 96, 105, 175, 210, 225, 244, 271, 288, 304, 305, 312, 322, 362, 363, 375, 378, 379, 380, 389, 401, 415, 497, 551, 554, 555, 558, 559, 560, 561, 565, 566, 567, 572, 573, 574, 575, 576, 577, 578, 580, 604, 639, 696, 715, 716, 732, 733, 741, 786, 787, 790, 857, 871, 872, 880, 910, 911, 912, 913, 915, 916, 917, 918, 933, 934, 940, 944, 951, 960, 973, 989, 990, 1004, 1014, 1034, 1036, 1037, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "warn_for": 786, "warn_on_dtyp": 1043, "warn_when_not_sort": 862, "warner": [52, 1049, 1050], "warshal": [691, 1001], "warshaw": 1040, "warut": [1041, 1042], "wase": [1051, 1052], "wasn": [103, 244, 1043], "waspa": 539, "wast": [141, 381, 411, 412, 993], "watanab": [1051, 1052], "watch": [53, 363], "watchtheblur": 1046, "water": 51, "waterburi": [1042, 1043], "waterland": 1037, "waterponei": [1040, 1041], "watson": [314, 408], "wattai": 1049, "wav": 369, "wave": [205, 375, 1003], "waveform": 76, "wavelet": [54, 130, 412], "wavfil": 369, "waweru": 1051, "wa\u00ebl": 1052, "wb": [56, 401], "wchathura": 1049, "wclf": 341, "wconnel": 1045, "wdbc": [165, 372], "wderos": 1045, "wdevazelh": 1042, "wdisp": 341, "we": [0, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 59, 62, 63, 64, 65, 67, 69, 71, 73, 76, 77, 78, 80, 82, 83, 84, 87, 89, 90, 91, 92, 96, 98, 99, 100, 103, 104, 105, 106, 108, 110, 112, 113, 114, 117, 119, 121, 122, 123, 124, 126, 127, 128, 129, 131, 135, 136, 138, 140, 141, 142, 143, 144, 145, 147, 148, 150, 151, 152, 153, 155, 157, 158, 160, 161, 162, 164, 165, 167, 169, 171, 174, 175, 176, 177, 178, 180, 181, 184, 185, 186, 187, 188, 190, 192, 193, 194, 196, 197, 198, 200, 202, 203, 204, 206, 207, 210, 211, 212, 213, 214, 216, 218, 219, 222, 223, 224, 225, 226, 228, 230, 231, 234, 235, 237, 238, 240, 241, 242, 244, 245, 247, 248, 250, 251, 253, 254, 255, 256, 258, 259, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 290, 291, 293, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 308, 309, 310, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 333, 335, 336, 337, 339, 340, 341, 342, 343, 344, 346, 348, 350, 351, 352, 354, 355, 356, 357, 358, 362, 363, 364, 369, 370, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 387, 388, 389, 390, 398, 401, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 450, 469, 470, 471, 472, 473, 474, 475, 476, 502, 524, 532, 533, 535, 538, 546, 547, 550, 562, 563, 564, 570, 571, 584, 585, 591, 614, 620, 630, 635, 636, 641, 643, 654, 658, 661, 662, 669, 671, 676, 677, 678, 679, 680, 695, 721, 723, 729, 749, 759, 767, 784, 802, 809, 825, 826, 828, 849, 850, 851, 853, 855, 856, 857, 858, 859, 870, 879, 880, 881, 887, 892, 893, 895, 896, 897, 898, 900, 903, 907, 911, 944, 945, 946, 956, 967, 969, 993, 994, 996, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1028, 1031, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1050, 1052, 1053], "wea": 405, "weak": [116, 145, 148, 214, 228, 274, 411, 555, 560, 561, 633, 1007, 1028, 1050], "weak_learn": 135, "weak_learners_info": 135, "weak_learners_misclassification_error": 135, "weaker": [108, 562, 563], "weakest": [354, 1020], "weaklearn": 554, "weakli": 100, "weather": [44, 53, 174, 186, 406, 1000, 1004], "web": [2, 165, 369, 370, 372, 375, 383, 401, 407, 415, 492, 522, 900, 951, 1004, 1014, 1034, 1053], "weber": 1041, "weblog": 407, "webpag": [56, 190, 375], "websit": [369, 370, 372, 375, 378, 390, 393, 1008, 1018, 1027, 1028, 1035, 1036, 1037], "wed": [44, 150, 186], "weed": 606, "week": [44, 53, 150, 324, 374, 375, 390, 497, 1028, 1048], "weekdai": [44, 186], "weekday_co": 44, "weekday_sin": 44, "weekend": [44, 150], "weezel": [1049, 1050], "wegelin": 410, "wehenkel": [414, 558, 559, 566, 567, 917, 918], "wei": [0, 397, 1018, 1034, 1035, 1038, 1039, 1040, 1041, 1043, 1047, 1050], "weibul": 312, "weidemann": 1048, "weigh": [411, 1041], "weight": [2, 46, 51, 54, 55, 58, 62, 69, 88, 103, 131, 147, 156, 157, 161, 162, 173, 174, 181, 182, 185, 191, 196, 200, 202, 210, 214, 215, 217, 220, 221, 222, 224, 225, 226, 228, 244, 249, 253, 257, 262, 266, 271, 275, 277, 291, 300, 301, 302, 303, 304, 306, 313, 315, 317, 320, 324, 325, 328, 329, 334, 339, 341, 343, 344, 346, 347, 350, 351, 352, 357, 358, 371, 372, 384, 387, 389, 406, 407, 409, 410, 412, 413, 416, 418, 424, 430, 437, 440, 443, 444, 446, 447, 449, 453, 459, 460, 463, 464, 465, 467, 469, 474, 482, 483, 484, 497, 516, 525, 539, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 588, 591, 592, 593, 595, 599, 604, 605, 613, 614, 631, 635, 636, 637, 638, 640, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 690, 692, 696, 700, 701, 703, 705, 706, 710, 711, 712, 715, 716, 719, 721, 723, 724, 725, 726, 727, 729, 730, 731, 732, 733, 737, 738, 739, 741, 742, 743, 744, 746, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 761, 762, 772, 785, 786, 787, 788, 790, 791, 792, 793, 794, 797, 798, 799, 800, 801, 802, 825, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 863, 864, 865, 866, 869, 872, 886, 887, 888, 902, 903, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 920, 921, 938, 939, 953, 978, 984, 994, 995, 1000, 1001, 1003, 1004, 1006, 1007, 1008, 1009, 1011, 1014, 1017, 1018, 1019, 1020, 1025, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "weight_concentration_": 800, "weight_concentration_prior": [253, 259, 800, 1003], "weight_concentration_prior_": 800, "weight_concentration_prior_typ": [253, 259, 800, 1003, 1040], "weight_vector": [1034, 1044], "weighted_acc": 398, "weighted_mod": [2, 384], "weighted_n_node_sampl": 357, "weightedmetaregressor": 244, "weights_": [253, 800, 801, 1048], "weights_handl": 223, "weights_init": 801, "weijiadu": 1048, "weinberg": 415, "weinsberg": 1034, "weinstein": 1035, "weisberg": 1000, "weiss": [0, 397, 407, 694, 1034], "weitzenfeld": 1028, "weka": 844, "welch": 1040, "welcom": [374, 375, 383, 390, 1024], "welind": 1034, "well": [0, 8, 44, 49, 52, 59, 62, 63, 65, 71, 75, 87, 91, 92, 96, 103, 110, 117, 127, 135, 136, 138, 141, 145, 147, 153, 155, 165, 174, 176, 184, 185, 186, 187, 190, 196, 198, 203, 208, 210, 211, 212, 214, 218, 230, 231, 232, 235, 237, 241, 244, 247, 255, 262, 268, 275, 277, 279, 285, 288, 291, 293, 294, 295, 315, 318, 319, 320, 321, 322, 323, 324, 325, 326, 343, 346, 350, 351, 352, 356, 358, 370, 372, 374, 375, 381, 383, 384, 387, 388, 389, 390, 401, 405, 407, 409, 411, 412, 414, 416, 418, 421, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 457, 459, 460, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 525, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 583, 584, 585, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 691, 692, 693, 694, 695, 703, 724, 725, 726, 727, 788, 791, 795, 798, 800, 801, 802, 803, 806, 807, 817, 825, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 899, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 949, 950, 993, 994, 996, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1014, 1017, 1018, 1020, 1021, 1023, 1024, 1028, 1034, 1035, 1038, 1040, 1041, 1042, 1045, 1052], "wellcom": 0, "wen": 1049, "wenbo": [1044, 1046], "wendi": 1044, "wendling": 1041, "weng": 1019, "wenhao": [1042, 1043], "wenhua": 1040, "wenjian": 1040, "wenliwyan": 1045, "went": [379, 1004], "were": [0, 44, 69, 103, 104, 107, 112, 113, 141, 144, 147, 150, 162, 165, 174, 181, 210, 211, 214, 238, 247, 275, 277, 279, 305, 306, 313, 318, 319, 321, 322, 323, 324, 325, 326, 331, 343, 350, 352, 357, 358, 369, 370, 372, 375, 376, 377, 379, 383, 387, 389, 398, 404, 408, 414, 415, 464, 467, 468, 497, 562, 563, 604, 806, 807, 822, 831, 854, 904, 905, 993, 996, 1004, 1005, 1020, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053], "weren": [350, 881, 1043], "werman": 1046, "werneck": 1042, "werner": [1041, 1046], "werror": 383, "wersd\u00f6rfer": 1036, "weslei": [592, 733], "westermann": [0, 365, 386, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "western": 415, "weston": [45, 412, 536, 595, 596, 903], "westov": 1042, "wetter": 186, "weyb": 1052, "wfc": 52, "wget": 383, "wh": [412, 539, 541, 548], "wh_i": 412, "what": [0, 2, 44, 49, 52, 53, 76, 86, 87, 117, 122, 126, 143, 184, 185, 200, 216, 218, 226, 239, 244, 251, 305, 322, 350, 352, 354, 358, 363, 370, 373, 375, 376, 377, 379, 381, 383, 388, 389, 390, 392, 406, 407, 413, 414, 415, 504, 537, 590, 591, 593, 649, 655, 699, 892, 893, 895, 896, 897, 898, 915, 916, 917, 918, 944, 1003, 1004, 1005, 1007, 1020, 1024, 1034, 1041, 1052], "whatnot": 350, "whats_new": [375, 379, 383], "wheel": [326, 373, 375, 379, 393, 395, 1044, 1046, 1048, 1053], "wheeler": [1045, 1046], "wheelhouse_upload": 379, "when": [0, 2, 44, 49, 50, 51, 53, 59, 62, 63, 64, 65, 71, 75, 76, 79, 90, 94, 101, 103, 104, 105, 110, 112, 113, 117, 121, 124, 125, 126, 128, 138, 141, 143, 144, 145, 147, 150, 151, 155, 156, 157, 162, 167, 169, 180, 184, 185, 186, 187, 188, 192, 193, 196, 200, 202, 203, 204, 210, 212, 214, 215, 226, 237, 238, 239, 243, 244, 251, 254, 256, 264, 267, 268, 269, 270, 271, 275, 277, 278, 281, 282, 285, 288, 290, 291, 294, 295, 296, 308, 310, 312, 313, 314, 315, 317, 318, 319, 320, 321, 324, 325, 326, 330, 331, 333, 339, 342, 343, 346, 350, 351, 352, 354, 357, 358, 362, 363, 364, 369, 370, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 387, 388, 389, 393, 398, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 423, 430, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 457, 459, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 482, 483, 484, 485, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 509, 510, 511, 513, 516, 525, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 574, 576, 577, 578, 580, 583, 584, 585, 586, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 608, 611, 612, 613, 614, 615, 616, 617, 618, 619, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 701, 703, 704, 705, 707, 708, 710, 711, 715, 716, 719, 730, 731, 732, 733, 735, 737, 738, 741, 749, 751, 754, 757, 758, 760, 764, 766, 770, 771, 772, 774, 777, 781, 784, 785, 786, 787, 788, 790, 791, 792, 794, 795, 796, 798, 800, 801, 802, 803, 804, 806, 807, 808, 809, 817, 821, 822, 824, 825, 826, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 893, 894, 899, 900, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 921, 928, 929, 932, 933, 934, 940, 944, 949, 950, 951, 952, 954, 955, 956, 961, 964, 966, 972, 992, 993, 994, 996, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1016, 1017, 1018, 1019, 1020, 1024, 1027, 1028, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "whenev": [176, 184, 262, 358, 369, 383, 389, 393, 405, 482, 483, 484, 497, 631, 633, 995, 1003, 1044, 1053], "where": [48, 51, 52, 54, 56, 58, 59, 62, 63, 64, 69, 87, 89, 91, 112, 117, 119, 121, 124, 130, 131, 135, 137, 139, 141, 144, 145, 147, 150, 152, 162, 163, 165, 169, 175, 178, 181, 185, 192, 196, 203, 211, 214, 219, 220, 221, 223, 227, 228, 230, 232, 233, 237, 238, 241, 244, 245, 247, 249, 259, 262, 264, 265, 268, 270, 274, 275, 277, 279, 280, 282, 285, 287, 306, 308, 310, 311, 312, 313, 314, 315, 317, 319, 320, 325, 329, 330, 337, 343, 346, 347, 348, 350, 354, 355, 358, 362, 363, 364, 369, 371, 372, 374, 375, 377, 379, 381, 382, 383, 387, 388, 389, 390, 393, 398, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 430, 437, 444, 447, 448, 452, 461, 463, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 487, 497, 527, 532, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 550, 551, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 584, 585, 586, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 608, 611, 613, 614, 616, 618, 622, 625, 626, 628, 630, 631, 632, 633, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 687, 691, 694, 695, 696, 699, 710, 714, 715, 719, 728, 732, 733, 734, 742, 744, 758, 766, 771, 772, 773, 776, 784, 785, 786, 787, 790, 791, 795, 797, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 830, 831, 832, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 850, 854, 855, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 870, 877, 880, 882, 883, 886, 887, 893, 895, 901, 902, 903, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 924, 941, 942, 943, 944, 946, 951, 956, 960, 963, 988, 993, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1014, 1015, 1016, 1018, 1019, 1020, 1024, 1034, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "wherea": [53, 71, 87, 101, 112, 151, 224, 247, 269, 270, 271, 277, 291, 313, 343, 346, 347, 364, 390, 411, 414, 444, 446, 566, 661, 662, 805, 821, 835, 996, 1003, 1005, 1007, 1014, 1020, 1047, 1052], "wherein": 389, "whether": [2, 48, 50, 53, 104, 133, 151, 172, 177, 185, 186, 210, 214, 228, 231, 238, 244, 262, 266, 308, 357, 358, 363, 370, 373, 374, 375, 377, 379, 380, 381, 389, 398, 406, 407, 408, 409, 411, 412, 414, 416, 419, 440, 442, 451, 453, 454, 459, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 478, 482, 483, 484, 485, 487, 488, 491, 493, 497, 498, 504, 509, 510, 515, 523, 528, 532, 533, 537, 538, 539, 540, 541, 543, 546, 547, 549, 553, 556, 557, 558, 559, 562, 563, 564, 565, 566, 567, 576, 583, 590, 591, 592, 593, 599, 604, 608, 609, 610, 611, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 632, 634, 635, 636, 638, 639, 640, 641, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 693, 697, 698, 700, 701, 703, 705, 707, 714, 715, 745, 764, 770, 777, 781, 785, 792, 803, 804, 806, 807, 808, 809, 817, 821, 822, 825, 826, 827, 830, 831, 833, 836, 838, 841, 842, 843, 844, 846, 849, 850, 851, 853, 855, 857, 858, 859, 860, 861, 864, 865, 871, 888, 894, 907, 908, 909, 910, 911, 912, 913, 919, 921, 923, 924, 925, 926, 927, 931, 933, 934, 935, 937, 944, 945, 946, 950, 951, 959, 960, 976, 987, 991, 992, 993, 994, 999, 1000, 1004, 1009, 1010, 1016, 1018, 1019, 1028, 1041, 1042, 1043, 1051, 1053], "whi": [185, 187], "which": [0, 2, 44, 47, 50, 52, 53, 54, 55, 56, 58, 59, 60, 63, 64, 65, 71, 73, 75, 76, 79, 80, 81, 83, 87, 89, 90, 91, 92, 99, 101, 103, 104, 105, 108, 110, 112, 113, 117, 119, 123, 125, 126, 127, 131, 135, 138, 139, 140, 141, 144, 146, 147, 150, 151, 153, 154, 155, 156, 157, 158, 160, 162, 164, 165, 167, 169, 170, 174, 175, 176, 180, 181, 184, 185, 186, 188, 190, 192, 193, 196, 200, 203, 204, 210, 211, 212, 214, 216, 218, 224, 226, 227, 228, 230, 231, 232, 234, 237, 238, 241, 242, 243, 244, 245, 247, 248, 253, 254, 258, 259, 261, 262, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 282, 283, 285, 287, 288, 293, 294, 295, 304, 308, 310, 311, 312, 313, 314, 315, 317, 319, 320, 321, 322, 323, 324, 325, 326, 328, 330, 331, 332, 339, 343, 346, 348, 350, 351, 352, 354, 356, 357, 358, 362, 363, 364, 367, 369, 370, 372, 373, 375, 376, 377, 379, 380, 381, 382, 383, 384, 387, 388, 389, 390, 392, 393, 395, 398, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 424, 430, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 459, 460, 462, 463, 464, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 487, 524, 532, 533, 534, 535, 538, 539, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 574, 575, 576, 581, 584, 585, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 609, 610, 612, 613, 614, 615, 616, 617, 618, 620, 622, 625, 630, 631, 632, 633, 635, 636, 637, 643, 645, 646, 647, 650, 651, 652, 654, 655, 656, 657, 658, 659, 661, 662, 664, 666, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 680, 681, 683, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 710, 712, 719, 720, 722, 723, 726, 728, 729, 737, 738, 739, 740, 745, 746, 759, 761, 781, 782, 783, 784, 785, 786, 792, 800, 801, 802, 803, 804, 806, 807, 808, 809, 811, 813, 817, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 857, 858, 859, 860, 861, 864, 867, 868, 871, 874, 878, 880, 881, 882, 885, 886, 887, 888, 889, 891, 899, 900, 902, 903, 904, 907, 909, 912, 913, 915, 916, 917, 918, 919, 923, 925, 928, 929, 933, 934, 942, 944, 945, 946, 950, 951, 953, 956, 959, 960, 961, 963, 972, 975, 978, 984, 987, 992, 993, 994, 995, 996, 997, 998, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1016, 1017, 1018, 1019, 1020, 1022, 1023, 1024, 1028, 1030, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "whichev": [407, 414, 446, 545, 562, 563, 636, 653, 657, 659, 667, 685, 686, 700], "whidou": 1047, "while": [0, 2, 26, 44, 47, 48, 50, 52, 56, 59, 62, 65, 71, 73, 75, 79, 80, 89, 96, 100, 103, 106, 108, 119, 125, 126, 135, 138, 141, 142, 145, 150, 152, 155, 165, 170, 175, 177, 178, 180, 184, 185, 186, 187, 190, 192, 194, 196, 199, 200, 203, 205, 210, 212, 214, 226, 237, 240, 241, 244, 245, 254, 255, 259, 261, 262, 263, 267, 268, 269, 271, 275, 276, 277, 278, 279, 281, 290, 308, 309, 310, 313, 314, 315, 317, 320, 323, 324, 326, 336, 339, 350, 352, 357, 358, 363, 367, 368, 369, 370, 371, 374, 375, 377, 379, 380, 381, 383, 384, 387, 389, 390, 401, 405, 406, 407, 410, 411, 412, 414, 415, 416, 417, 418, 419, 444, 464, 467, 468, 483, 485, 497, 522, 533, 553, 558, 559, 560, 561, 565, 566, 567, 568, 569, 570, 571, 577, 584, 590, 591, 592, 593, 596, 599, 604, 608, 637, 646, 649, 650, 652, 659, 660, 661, 662, 679, 680, 681, 682, 711, 733, 757, 777, 781, 791, 797, 800, 803, 804, 805, 808, 809, 810, 811, 812, 813, 817, 818, 819, 821, 826, 828, 829, 830, 831, 832, 834, 842, 853, 855, 857, 858, 859, 866, 867, 868, 869, 870, 883, 895, 900, 905, 907, 908, 915, 916, 917, 918, 929, 955, 993, 994, 996, 997, 998, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1010, 1011, 1014, 1016, 1019, 1020, 1023, 1024, 1034, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1053], "whilst": [139, 232], "whisker": 50, "white": [2, 92, 94, 121, 174, 185, 224, 230, 294, 306, 310, 333, 338, 412, 415, 628, 1020, 1034, 1037, 1040, 1044, 1048], "whitekernel": [2, 169, 174, 175, 417, 614, 615, 617, 1045], "whiten": [46, 121, 122, 123, 292, 412, 419, 534, 535, 542, 885, 887, 1014, 1038, 1040, 1048, 1049, 1052], "whiten_solv": [419, 534, 1049, 1052], "whitening_": 534, "whitespac": 415, "whl": 379, "who": [0, 103, 185, 326, 363, 370, 375, 382, 390, 393, 849, 850, 851, 853, 855, 857, 858, 859, 1023, 1036, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "whole": [50, 84, 107, 150, 158, 181, 211, 247, 265, 272, 300, 339, 343, 354, 362, 375, 387, 388, 408, 410, 414, 417, 449, 483, 539, 556, 557, 558, 559, 564, 565, 566, 567, 571, 688, 689, 803, 806, 807, 817, 831, 842, 843, 844, 845, 846, 993, 1004, 1014, 1042, 1044], "whose": [2, 89, 111, 112, 113, 165, 174, 210, 238, 337, 370, 384, 389, 405, 407, 409, 414, 416, 417, 420, 437, 438, 439, 448, 461, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 516, 535, 539, 541, 542, 545, 548, 550, 573, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 643, 674, 698, 721, 803, 810, 817, 832, 853, 872, 899, 900, 950, 982, 983, 998, 1005, 1009, 1010, 1011, 1019, 1037, 1042, 1043, 1045, 1048], "why": [65, 73, 86, 121, 135, 141, 150, 185, 187, 190, 200, 262, 265, 268, 285, 350, 351, 375, 377, 383, 389, 407, 409, 412, 418, 444, 447, 451, 944, 946, 1004, 1006, 1019, 1037], "wi": 1004, "wick": 1046, "wide": [65, 94, 95, 127, 138, 241, 309, 387, 407, 412, 415, 993, 1000, 1023, 1028, 1034, 1036, 1050], "widehat": 172, "wider": [53, 212, 415, 920, 1000, 1053], "widetild": 1020, "width": [48, 50, 53, 87, 112, 123, 124, 127, 129, 130, 131, 138, 143, 144, 147, 157, 161, 171, 177, 251, 253, 267, 291, 308, 310, 311, 314, 319, 322, 336, 372, 408, 438, 439, 452, 464, 494, 495, 507, 522, 588, 872, 920, 1014, 1018, 1020, 1042], "wiesel": [409, 420, 475], "wignal": [1037, 1038, 1044, 1045], "wijewardena": [0, 1037, 1038, 1039], "wiki": [56, 62, 381, 383, 597, 639, 671, 674, 698, 708, 849, 850, 855, 856, 857, 858, 885, 901, 915, 916, 1000, 1004, 1020], "wikic": 996, "wikipedia": [38, 43, 62, 182, 383, 407, 597, 609, 610, 639, 659, 671, 674, 685, 686, 698, 707, 708, 710, 712, 715, 719, 721, 729, 732, 733, 734, 737, 738, 741, 746, 759, 786, 788, 789, 791, 792, 795, 796, 849, 850, 855, 856, 857, 858, 885, 901, 915, 916, 951, 996, 1000, 1004, 1007, 1016, 1020, 1025, 1034, 1041], "wikipedia_principal_eigenvector": [56, 1025], "wikipediadet2017": 1004, "wikipediamcc2021": 1004, "wil": 1046, "wild": [2, 46, 368, 494, 495, 509, 510, 1030, 1034], "wilderness_area": 247, "wildli": [293, 1003], "wilei": [372, 994], "wilhelm": [1038, 1040, 1044], "wilk": 405, "wilksch": 1049, "willamett": 314, "willard": 1046, "willdarnel": 1044, "willduan": 1041, "william": [165, 370, 372, 417, 613, 614, 617, 622, 625, 642, 996, 1004, 1008, 1041, 1042, 1043, 1044, 1049, 1050], "williamson": 1044, "willing": [184, 265, 406], "willocx": 1044, "willpeppo": 1046, "wilson": [112, 372, 1034, 1037], "wiman": 1034, "wimld": [1048, 1053], "win": [53, 262], "winata": [1044, 1046], "wind": [186, 1005], "windber": 1045, "windiana42": 1050, "window": [58, 332, 370, 375, 377, 378, 383, 415, 1034, 1037, 1041, 1045, 1047, 1048, 1052], "windowsapp": 393, "windowserror": 1050, "windspe": [44, 186], "wine": [2, 49, 250, 313, 314, 368, 511, 1030], "wine_review": 314, "wineri": 314, "winn": 1004, "winter": [44, 53], "winterman": 1035, "wip": [383, 393], "wipf": [648, 1000], "wire": [381, 535, 542], "wiryadi": [1046, 1052, 1053], "wisc": [165, 372, 902], "wisconsin": [2, 165, 188, 368, 501, 1012, 1030, 1039], "wise": [2, 47, 64, 177, 211, 237, 278, 308, 351, 362, 389, 405, 407, 411, 412, 416, 458, 532, 535, 538, 542, 546, 547, 550, 551, 554, 556, 557, 560, 561, 594, 597, 598, 600, 601, 602, 608, 643, 655, 703, 757, 835, 854, 884, 897, 898, 901, 976, 978, 979, 980, 981, 984, 996, 998, 1000, 1004, 1005, 1018, 1034, 1039, 1042, 1043, 1044], "wish": [369, 375, 377, 382, 384, 393, 407, 951, 1041], "wishart": 800, "wissen": 450, "with_cent": [885, 897], "with_error": 704, "with_mean": [380, 887, 898, 1014, 1042, 1047], "with_scal": [885, 897], "with_std": [887, 898, 1014, 1042], "withheld": 411, "within": [2, 42, 44, 59, 94, 140, 142, 145, 150, 154, 162, 164, 165, 211, 212, 222, 228, 244, 248, 266, 267, 271, 308, 309, 319, 337, 340, 343, 346, 352, 358, 362, 370, 375, 384, 387, 389, 390, 398, 403, 404, 405, 407, 408, 411, 413, 414, 418, 444, 448, 461, 463, 464, 466, 469, 474, 516, 550, 568, 569, 570, 571, 595, 596, 635, 695, 699, 702, 713, 728, 784, 800, 801, 804, 808, 809, 821, 822, 831, 832, 847, 848, 849, 850, 854, 855, 857, 858, 859, 866, 867, 868, 880, 888, 892, 893, 895, 896, 897, 898, 909, 910, 911, 912, 913, 915, 916, 917, 918, 993, 998, 1000, 1001, 1007, 1010, 1014, 1017, 1019, 1020, 1024, 1028, 1036, 1037, 1041, 1042, 1047, 1048, 1050, 1051, 1052, 1053], "within_class_std_dev_": 854, "without": [2, 44, 45, 53, 54, 62, 72, 78, 80, 82, 86, 89, 90, 96, 101, 108, 126, 141, 145, 146, 149, 150, 152, 155, 161, 165, 167, 176, 182, 184, 185, 186, 196, 200, 218, 237, 241, 244, 245, 247, 248, 250, 261, 262, 269, 273, 275, 285, 288, 289, 290, 291, 297, 298, 299, 300, 308, 309, 313, 315, 317, 326, 343, 346, 351, 364, 370, 371, 373, 375, 376, 377, 379, 380, 381, 384, 387, 388, 389, 398, 401, 407, 408, 412, 414, 415, 416, 417, 432, 439, 441, 446, 458, 469, 474, 492, 497, 505, 516, 533, 535, 556, 557, 564, 581, 582, 614, 630, 634, 637, 642, 662, 695, 703, 784, 806, 807, 808, 815, 817, 832, 833, 849, 856, 860, 866, 867, 870, 873, 876, 877, 879, 883, 884, 885, 887, 892, 907, 929, 972, 993, 994, 996, 998, 1000, 1001, 1004, 1007, 1010, 1014, 1018, 1019, 1020, 1023, 1024, 1025, 1031, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1048, 1049, 1050, 1051, 1052, 1053], "withstrok": 76, "witten": 411, "wittenau": 1039, "wk": 708, "wl": 373, "wminkowski": [1046, 1048], "wmt": 52, "wnl": 415, "wo": 415, "wojdyla": [1049, 1050], "wolberg": [165, 372], "wolf": [2, 50, 55, 66, 71, 109, 110, 113, 114, 182, 241, 297, 473, 475, 479, 480, 513, 550, 998, 1025, 1041], "wolframalpha": 1044, "wolodzko": 1047, "wolosonovich": 1042, "wolpert": [414, 568, 569], "wolsza": [1052, 1053], "wompner": 1042, "won": [155, 305, 351, 379, 383, 407, 468, 497, 630, 631, 633, 690, 707, 720, 739, 740, 758, 760, 798, 1003, 1014, 1039, 1040, 1045], "wonder": [350, 373], "wonpil": 1000, "wood": 1043, "woolam": 1034, "word": [48, 55, 58, 103, 169, 199, 241, 245, 339, 351, 352, 362, 370, 371, 375, 377, 380, 389, 404, 406, 407, 409, 410, 411, 412, 453, 512, 524, 535, 537, 542, 590, 591, 593, 699, 836, 846, 904, 998, 1002, 1006, 1009, 1014, 1017, 1018, 1028, 1034, 1042], "word_col": 58, "word_scor": 58, "word_token": 415, "wordnetlemmat": 415, "work": [0, 3, 44, 49, 53, 56, 69, 80, 86, 101, 110, 138, 144, 158, 165, 175, 176, 184, 185, 186, 200, 214, 227, 244, 266, 285, 294, 295, 314, 318, 320, 321, 323, 326, 341, 343, 351, 352, 358, 363, 364, 369, 370, 373, 375, 376, 377, 378, 379, 380, 381, 383, 388, 389, 390, 401, 403, 404, 405, 407, 408, 409, 412, 414, 415, 416, 419, 420, 421, 422, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 457, 460, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 482, 483, 484, 485, 505, 509, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 583, 584, 585, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 691, 692, 693, 694, 695, 698, 711, 777, 781, 782, 783, 784, 791, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 951, 955, 993, 994, 996, 998, 999, 1000, 1001, 1003, 1004, 1006, 1007, 1010, 1011, 1014, 1017, 1018, 1023, 1024, 1028, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "workabl": 380, "workaround": [314, 375, 803, 817], "workclass": [324, 497], "worker": [363, 389, 415, 969, 970, 1049], "workflow": [375, 378, 379, 388, 411, 1027, 1030], "working_memori": [362, 363, 468, 784, 905, 1042], "workingdai": [44, 186], "workload": 1023, "workshop": [0, 407, 415, 842, 1006, 1022], "workstat": 383, "world": [0, 89, 103, 107, 185, 214, 234, 247, 262, 350, 362, 368, 372, 407, 412, 415, 968, 994, 1004, 1006, 1022, 1024, 1028, 1030, 1034], "worldwid": 1028, "wornbb": 1045, "worri": [88, 1001], "wors": [44, 117, 135, 170, 186, 216, 268, 276, 287, 313, 358, 405, 407, 417, 430, 465, 482, 483, 484, 553, 555, 557, 559, 561, 563, 566, 569, 571, 613, 614, 638, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 664, 665, 666, 667, 668, 670, 672, 673, 675, 676, 681, 682, 683, 708, 724, 725, 726, 727, 731, 788, 840, 841, 850, 858, 865, 908, 910, 913, 916, 918, 1004, 1014, 1043], "worse_prob": 268, "worsen": 145, "worst": [165, 210, 314, 372, 407, 444, 447, 711, 732, 733, 786, 787, 790, 795, 796, 832, 1004, 1028, 1034, 1047], "worth": [89, 143, 186, 210, 375, 1028], "worthwhil": [105, 389], "would": [0, 26, 44, 46, 49, 53, 64, 65, 69, 87, 89, 92, 103, 110, 112, 113, 117, 119, 126, 135, 147, 165, 169, 174, 175, 185, 186, 187, 188, 190, 196, 201, 203, 210, 211, 212, 225, 228, 237, 244, 247, 255, 262, 264, 268, 269, 274, 276, 278, 282, 285, 288, 294, 300, 305, 308, 309, 313, 314, 320, 323, 331, 339, 343, 346, 347, 350, 352, 357, 358, 362, 370, 371, 375, 376, 377, 381, 383, 384, 387, 388, 389, 390, 398, 401, 404, 405, 407, 408, 409, 410, 411, 412, 414, 415, 416, 430, 446, 465, 468, 482, 483, 484, 489, 528, 533, 535, 537, 542, 545, 553, 555, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 569, 571, 585, 586, 589, 591, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 614, 638, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 675, 676, 677, 678, 679, 681, 682, 703, 705, 711, 715, 716, 723, 759, 781, 785, 788, 792, 803, 805, 817, 832, 840, 841, 850, 858, 865, 892, 893, 895, 896, 897, 898, 899, 900, 905, 907, 908, 910, 913, 915, 916, 917, 918, 960, 963, 993, 994, 997, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1014, 1019, 1023, 1024, 1028, 1031, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "wp": [415, 660, 674], "wpd": 350, "wprd": 415, "wrap": [2, 121, 140, 147, 167, 262, 288, 325, 369, 377, 389, 401, 406, 431, 437, 509, 612, 660, 661, 662, 679, 833, 891, 945, 994, 1004, 1007, 1019, 1023, 1034, 1039, 1042, 1044, 1045, 1047, 1049], "wraparound": 376, "wrapper": [2, 65, 288, 381, 384, 411, 417, 545, 623, 671, 674, 745, 907, 1000, 1020, 1023, 1038, 1046, 1053], "wrath": 408, "write": [48, 56, 148, 181, 188, 244, 317, 350, 362, 363, 369, 373, 374, 375, 379, 380, 381, 383, 384, 387, 389, 401, 403, 408, 412, 415, 1015, 1024, 1035, 1047, 1051], "writeabl": [933, 934, 1052], "writer": 350, "written": [42, 45, 47, 66, 85, 87, 124, 163, 182, 217, 261, 292, 320, 328, 329, 363, 372, 375, 376, 377, 381, 383, 387, 389, 408, 413, 487, 503, 509, 700, 716, 833, 912, 919, 998, 1000, 1004, 1008, 1009, 1018, 1025, 1043], "wrong": [94, 210, 262, 294, 350, 358, 372, 375, 377, 415, 505, 729, 759, 796, 1004, 1010, 1019, 1037, 1039, 1041, 1042, 1043, 1044, 1047, 1051, 1052], "wrongli": [210, 339, 1052], "wrote": [155, 370], "ws2001": 996, "wspace": [54, 55, 75, 80, 96, 112, 121, 137, 210, 228, 237, 253, 255, 256, 259, 293, 301, 329, 336], "wstate": 1047, "wtv": 381, "wtw": 381, "wu": [1019, 1038, 1046], "wurp": [1048, 1049], "wuthrich": [210, 228], "ww": 412, "www": [46, 104, 190, 210, 226, 228, 282, 287, 305, 369, 370, 375, 407, 411, 442, 449, 487, 509, 510, 532, 535, 538, 542, 647, 661, 667, 674, 688, 689, 856, 863, 915, 916, 1000, 1017], "www4": [165, 372], "wyseguy7": 1040, "w\u00fcthrich": 405, "x": [2, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 58, 62, 63, 64, 65, 67, 68, 70, 71, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 107, 108, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 125, 126, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 167, 170, 171, 172, 173, 174, 175, 176, 177, 178, 184, 185, 186, 187, 188, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 228, 230, 231, 232, 235, 237, 238, 240, 241, 242, 243, 244, 245, 247, 248, 250, 251, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 285, 287, 288, 290, 291, 293, 294, 295, 296, 297, 298, 299, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 358, 362, 368, 369, 370, 371, 375, 376, 377, 379, 380, 381, 382, 383, 384, 387, 388, 389, 398, 401, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 494, 495, 496, 499, 501, 502, 503, 506, 507, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 583, 584, 585, 587, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 709, 713, 714, 728, 735, 738, 745, 761, 762, 763, 764, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 791, 795, 796, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 924, 926, 928, 929, 930, 931, 932, 933, 934, 937, 948, 950, 951, 952, 953, 963, 964, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 992, 993, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1014, 1016, 1017, 1018, 1019, 1020, 1024, 1031, 1034, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053], "x0": [52, 219, 233, 251, 308, 336, 389, 428, 464, 568, 569, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 630, 631, 632, 633, 870, 871, 872, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888], "x00": 415, "x006": 1035, "x00a": 415, "x00b": 415, "x00c": 415, "x00d": 415, "x00e": 415, "x00f": 415, "x00g": 415, "x00h": 415, "x00i": 415, "x00l": 415, "x00n": 415, "x00o": 415, "x00r": 415, "x00t": 415, "x00u": 415, "x00z": 415, "x0_cat": [321, 1014], "x0_infrequent_sklearn": [321, 1014], "x0_label": 308, "x0_rabbit": [321, 1014], "x0_str_femal": 880, "x0_str_male": 880, "x0l": 1038, "x1": [52, 116, 137, 146, 172, 222, 233, 308, 336, 377, 389, 428, 464, 510, 568, 569, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 630, 631, 632, 633, 702, 870, 871, 872, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888], "x110": 1049, "x1_int_1": 880, "x1_int_2": 880, "x1_int_3": 880, "x1_label": 308, "x2": [116, 137, 146, 172, 222, 251, 377, 408, 590, 632, 702], "x27": [104, 105, 140, 155, 158, 162, 185, 186, 187, 238, 239, 248, 249, 251, 258, 262, 266, 268, 269, 275, 280, 282, 306, 314, 318, 319, 321, 330], "x2_tr": 632, "x3": [146, 251, 408], "x64": 373, "x8": 87, "x86": 373, "x86_64": [378, 393], "x9ft": 415, "x_": [160, 170, 259, 268, 317, 377, 407, 410, 412, 630, 638, 767, 862, 902, 903, 1000, 1006, 1011, 1040], "x_0": [211, 660], "x_1": [121, 160, 172, 211, 410, 412, 414, 417, 616, 628, 660, 880, 907, 908, 1000, 1006, 1008, 1014, 1018], "x_1d": 321, "x_1x_2": 1014, "x_1x_2x_3": 1014, "x_1x_3": 1014, "x_2": [160, 172, 412, 414, 415, 417, 616, 628, 1000, 1008, 1014], "x_20": 332, "x_2d": 339, "x_2x_3": 1014, "x_3": [160, 1014], "x_6": 880, "x_7": 880, "x_a": 312, "x_adult": 324, "x_aniso": [80, 91, 96], "x_axi": [123, 218, 272], "x_b": 312, "x_bimod": 312, "x_bin": 309, "x_bound": [417, 620], "x_c": [482, 483, 485, 1011], "x_calib": 437, "x_california": 181, "x_cardiotocographi": 247, "x_center": 194, "x_check": 934, "x_chisq": 312, "x_cluster": 859, "x_convert": 933, "x_copi": 1045, "x_cu": 403, "x_d": [417, 617], "x_dens": [324, 545], "x_df": 152, "x_diabet": 181, "x_different_covari": 71, "x_digit": [106, 304, 408], "x_dist_graph": 851, "x_embed": [297, 298, 695, 699, 856, 1007], "x_error": 216, "x_errors_larg": 216, "x_featur": [107, 643, 644, 645, 996], "x_filter": 91, "x_fit": 691, "x_fit_": [536, 646], "x_forestcov": 247, "x_full": [180, 181, 308], "x_full_train": 140, "x_gaussian": 312, "x_hashed_lsa": 351, "x_hat": [532, 538, 546, 547], "x_hetero": 128, "x_homo": 128, "x_i": [53, 112, 139, 160, 185, 211, 320, 346, 407, 412, 413, 414, 417, 617, 618, 622, 625, 626, 628, 842, 843, 846, 995, 996, 1000, 1006, 1007, 1008, 1014, 1018, 1019, 1020], "x_idx_sort": 1046, "x_imput": 633, "x_indic": 161, "x_inform": 315, "x_inlier": 295, "x_inv": [590, 593], "x_ipca": 125, "x_iri": 273, "x_isotropic_covari": 71, "x_j": [407, 417, 617, 618, 622, 625, 626, 628, 995, 996, 1000, 1007, 1019, 1020], "x_k": [410, 412, 998, 1007], "x_label": 181, "x_leav": [558, 559, 560, 561, 565, 566, 567, 915, 916, 917, 918], "x_left_lower_corn": [51, 301, 370, 499], "x_legend": 48, "x_list": 311, "x_loadings_": [482, 483, 484], "x_lognorm": [312, 1014], "x_lsa": 351, "x_m": 1008, "x_max": [68, 86, 92, 137, 143, 153, 171, 242, 303, 310, 333, 343, 344], "x_max_": 638, "x_mean": 419, "x_mean_": 1046, "x_min": [68, 86, 92, 137, 143, 147, 153, 171, 200, 242, 303, 310, 333, 343, 344], "x_min_": 638, "x_miss": [150, 180, 181], "x_miss_california": 181, "x_miss_diabet": 181, "x_n": [121, 412, 907, 908, 1006, 1008, 1018], "x_near_unique_categori": 315, "x_new": [90, 408, 412, 416, 431, 442, 443, 445, 447, 449, 532, 533, 534, 535, 536, 537, 538, 540, 542, 543, 544, 545, 550, 568, 570, 571, 584, 585, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 631, 633, 638, 641, 642, 643, 644, 645, 691, 692, 693, 694, 695, 856, 863, 870, 871, 872, 873, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 899, 900, 1016], "x_new_again": 1016, "x_new_invers": 1016, "x_norm_squar": [766, 1039, 1051], "x_normal": 1014, "x_np": 403, "x_offset": 194, "x_offset_": [647, 648, 1046], "x_origin": [535, 540, 542, 544, 545, 633, 899, 900], "x_out": [322, 871, 880, 881], "x_outlier": [195, 224, 294, 295, 338], "x_p": [407, 446, 1000], "x_pca": 125, "x_plot": [192, 211, 216, 243, 271, 293, 313], "x_plot_ext": 211, "x_plot_scal": 313, "x_po": 287, "x_q": 407, "x_r": [129, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605], "x_r2": 129, "x_rand": 274, "x_random": 200, "x_reconstruct": [321, 482, 483, 484, 585], "x_reconstructed_kernel_pca": [45, 126], "x_reconstructed_pca": [45, 126], "x_red": 86, "x_reduc": [85, 127, 153, 445], "x_restor": 85, "x_right": 71, "x_rope": 268, "x_rotations_": [410, 482, 483, 484], "x_scale": [194, 877, 893, 1014], "x_scale_": [647, 648, 1046], "x_scaler": 50, "x_score": [295, 482, 483, 484, 485], "x_scores_": [484, 1046], "x_select": 358, "x_shared_covari": 71, "x_shuffl": 315, "x_size": 113, "x_sp": 197, "x_spars": [324, 535, 974, 977], "x_sparse_embed": 567, "x_squared_norm": [256, 460], "x_src": 293, "x_std": [877, 893, 1014], "x_std_": 1046, "x_t": [464, 630, 866], "x_test": [45, 46, 47, 48, 50, 53, 62, 63, 64, 65, 68, 69, 103, 104, 108, 110, 116, 117, 126, 135, 138, 140, 142, 146, 147, 148, 149, 150, 151, 154, 161, 162, 167, 174, 177, 184, 185, 186, 187, 188, 190, 193, 196, 201, 206, 207, 208, 216, 217, 218, 224, 225, 226, 228, 238, 240, 246, 250, 251, 255, 261, 262, 265, 266, 271, 275, 277, 281, 283, 287, 291, 294, 296, 297, 300, 303, 305, 306, 310, 312, 313, 315, 317, 318, 319, 324, 325, 331, 332, 338, 350, 354, 356, 357, 358, 362, 369, 377, 380, 388, 401, 408, 411, 414, 438, 470, 471, 472, 473, 474, 475, 476, 510, 559, 560, 561, 568, 569, 700, 701, 703, 705, 802, 825, 833, 835, 838, 856, 864, 865, 867, 881, 917, 918, 994, 1004, 1006, 1007, 1008, 1010, 1014, 1018, 1019, 1020, 1031, 1034], "x_test_df": 251, "x_test_kernel_pca": 126, "x_test_maxab": 1014, "x_test_minmax": 1014, "x_test_miss": 150, "x_test_no_cf_encod": 315, "x_test_noisi": 45, "x_test_np": 251, "x_test_pca": [46, 126], "x_test_r": 116, "x_test_scal": 251, "x_test_sel": 188, "x_test_select": 358, "x_test_text": 48, "x_test_tran": 1014, "x_test_transform": [358, 411], "x_text": 48, "x_tfidf": 351, "x_thresholds_": [240, 638, 1046], "x_torch": 403, "x_tr": [870, 876, 879, 880, 881, 885, 887, 890, 892, 893, 897, 898], "x_train": [45, 46, 47, 48, 50, 53, 62, 63, 64, 65, 68, 69, 103, 104, 108, 110, 116, 117, 126, 135, 138, 142, 145, 146, 147, 148, 149, 150, 151, 154, 161, 162, 167, 175, 176, 177, 178, 184, 185, 186, 187, 188, 190, 193, 196, 206, 207, 208, 211, 217, 218, 224, 225, 226, 228, 238, 246, 250, 251, 255, 257, 261, 262, 265, 266, 271, 275, 277, 281, 287, 291, 294, 296, 297, 300, 303, 305, 306, 310, 312, 313, 315, 317, 318, 319, 324, 325, 331, 332, 338, 350, 354, 357, 358, 362, 369, 377, 380, 388, 408, 411, 414, 437, 438, 510, 559, 560, 561, 568, 569, 700, 701, 703, 705, 802, 825, 833, 835, 838, 856, 864, 865, 867, 881, 917, 918, 994, 1004, 1006, 1007, 1008, 1010, 1012, 1014, 1018, 1019, 1031], "x_train_": 614, "x_train_ensembl": 140, "x_train_linear": 140, "x_train_maxab": 1014, "x_train_minmax": 1014, "x_train_miss": 150, "x_train_no_cf_encod": 315, "x_train_noisi": 45, "x_train_pca": 46, "x_train_preprocess": 185, "x_train_r": 116, "x_train_sel": 188, "x_train_select": 358, "x_train_std_transform": 313, "x_train_text": 48, "x_train_tran": 1014, "x_train_transform": [313, 358, 411], "x_train_valid": 64, "x_tran": [312, 323, 403, 442, 464, 883, 888, 895, 928, 1014], "x_trans_bc": 312, "x_trans_qt": 312, "x_trans_yj": 312, "x_transform": [125, 153, 244, 485, 532, 533, 534, 535, 536, 538, 540, 544, 567, 641, 642, 691, 692, 693, 694], "x_transformed_fit_": 536, "x_true": 233, "x_uniform": 312, "x_val": [145, 326, 1012], "x_valid": 64, "x_valu": 331, "x_vari": 91, "x_weibul": 312, "x_weights_": [410, 482, 483, 484, 485], "x_wrong": 71, "xa": 583, "xanchor": 269, "xarg": 1034, "xavier": [864, 865, 1042, 1043, 1044, 1046, 1047, 1052], "xaxi": [127, 141, 230, 232, 235, 288, 293, 350], "xaxis2": 141, "xb": [116, 886], "xbar_": 550, "xbc": 415, "xc3": 415, "xcjason": 1044, "xcode": 373, "xd": 527, "xdang": 682, "xerox": 52, "xerr": [180, 181, 351], "xethan": 1046, "xfail": [383, 944, 945, 946, 1053], "xfc": 415, "xfcche": 415, "xfea": 415, "xff": 415, "xgamma": 688, "xgboost": [150, 152, 414, 1023], "xgrid": [51, 301], "xhan": 1043, "xhy": 1041, "xi": [2, 80, 99, 372, 407, 410, 415, 450, 456, 510, 1018, 1045], "xi_i": 1018, "xi_k": 410, "xiang": 1052, "xiangyin": 1047, "xiao": [0, 386, 396, 1042, 1044, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "xiaojin": 902, "xiaoyu": 1046, "xiaoyuchai": 1047, "xin": [682, 1000, 1042], "xinfan": [1034, 1035, 1038], "xing": [1042, 1043], "xinv": 872, "xinyu": 407, "xinyuliu12": 1043, "xiong": [1042, 1043, 1048], "xj": 405, "xk": [99, 551], "xlabel": [44, 48, 49, 53, 62, 63, 64, 65, 70, 73, 77, 95, 110, 111, 113, 114, 116, 117, 123, 127, 128, 136, 137, 139, 144, 146, 147, 148, 149, 150, 154, 158, 160, 161, 164, 169, 170, 171, 172, 174, 175, 176, 185, 192, 195, 196, 198, 199, 200, 201, 203, 204, 205, 207, 210, 212, 213, 215, 217, 219, 220, 224, 228, 241, 243, 245, 247, 263, 267, 268, 272, 273, 277, 278, 281, 283, 290, 291, 294, 295, 314, 315, 336, 338, 339, 342, 350, 355, 356, 634], "xlim": [52, 64, 80, 92, 96, 106, 110, 111, 112, 123, 137, 138, 139, 154, 170, 171, 185, 192, 201, 203, 209, 216, 219, 224, 237, 245, 254, 259, 263, 277, 283, 294, 295, 338, 343, 344, 347, 356], "xm": [52, 233], "xmax": [51, 110, 201, 203, 219, 220, 301], "xmin": [51, 110, 201, 203, 219, 220, 301], "xn": 510, "xom": 52, "xor": [168, 170, 171, 172, 182, 220, 221, 223, 257, 311, 344, 348, 613, 617, 625, 1000, 1020, 1025, 1041], "xp": [410, 882], "xpreprocessor": 373, "xrang": 1040, "xred": [445, 1050], "xrot": 54, "xrx": 52, "xs_sp": 197, "xsat": 1044, "xscale": [170, 175, 243], "xt": [158, 288, 389, 445, 539, 541, 630, 632, 803, 806, 807, 817, 851, 859, 867, 872, 877, 884, 896, 931, 1050, 1052], "xtick": [44, 46, 48, 51, 67, 71, 76, 80, 81, 84, 85, 86, 92, 93, 96, 114, 116, 124, 144, 146, 150, 171, 172, 173, 177, 201, 223, 237, 245, 254, 255, 256, 259, 267, 268, 283, 292, 301, 306, 314, 328, 339, 342, 344, 700], "xtick_period": 186, "xtick_start": 186, "xticklabel": [44, 50, 144, 150, 186, 314], "xticks_label": 146, "xticks_po": 146, "xticks_rot": [46, 700], "xtrain": 301, "xu": [407, 410, 418, 444, 1018, 1047, 1048, 1051, 1052, 1053], "xue": [0, 1038, 1039, 1040, 1042, 1043, 1046], "xuefeng": [1051, 1052, 1053], "xueqin": [682, 1000], "xun": [1044, 1046], "xuniu": 1049, "xval": 181, "xw": [209, 320, 649, 650, 652, 655, 656, 657, 658, 659, 663, 664, 665, 666, 675, 684, 685, 686, 687, 1000], "xx": [78, 92, 112, 143, 147, 153, 171, 172, 173, 186, 203, 217, 220, 221, 222, 223, 224, 235, 237, 245, 257, 294, 303, 310, 311, 333, 338, 339, 343, 344, 347, 348], "xx0": [137, 634], "xx1": [137, 634], "xx_coarser": 143, "xxx": 389, "xy": [49, 64, 83, 275, 301, 344, 393, 649, 650, 653, 654, 655, 656, 657, 658, 663, 664, 665, 666, 667, 684, 685, 686, 687, 689], "xycoord": [49, 64], "xyguo": [1040, 1042], "xytext": [49, 64, 190], "xyz": 374, "y": [2, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 62, 63, 64, 65, 67, 68, 70, 71, 75, 76, 78, 79, 80, 86, 88, 90, 91, 94, 95, 96, 99, 100, 104, 105, 107, 108, 113, 116, 117, 119, 123, 125, 126, 129, 130, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 167, 170, 171, 172, 173, 174, 175, 176, 177, 178, 184, 185, 186, 187, 188, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 225, 226, 228, 230, 231, 232, 235, 238, 240, 241, 242, 243, 244, 245, 247, 248, 250, 251, 253, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 285, 287, 288, 290, 291, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 308, 309, 310, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 354, 355, 356, 357, 358, 367, 368, 369, 370, 371, 373, 375, 377, 379, 380, 382, 383, 384, 388, 389, 398, 401, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 487, 499, 501, 503, 506, 509, 510, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 525, 527, 529, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 583, 584, 585, 587, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 700, 701, 702, 703, 704, 705, 709, 714, 729, 735, 738, 744, 745, 759, 761, 762, 763, 764, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 788, 791, 792, 795, 796, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 891, 899, 900, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 920, 926, 927, 933, 938, 939, 963, 965, 966, 967, 974, 977, 990, 992, 993, 994, 995, 996, 998, 999, 1000, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1014, 1018, 1019, 1020, 1024, 1030, 1031, 1034, 1035, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "y0": [52, 233], "y1": [52, 137, 233, 510, 719, 1005, 1006], "y1_label": 47, "y2": [137, 719, 1005], "y2_label": 47, "y3": 1005, "y_": [240, 254, 258, 259, 300, 377, 410, 412, 640, 651, 672, 683, 732, 733, 741, 767, 786, 787, 790, 1000, 1004, 1040], "y_1": [136, 356, 410, 1004, 1008, 1018], "y_2": [136, 356, 1008], "y_20": 332, "y_2d": 339, "y_3": 356, "y_30": 333, "y_50": 333, "y_adult": 324, "y_all": [669, 671, 679, 835, 836, 864], "y_ard": 192, "y_ard_std": 192, "y_axi": [123, 218], "y_bia": 138, "y_brr": 192, "y_brr_std": 192, "y_c": [482, 483, 485], "y_calib": 437, "y_california": 181, "y_coclust": 58, "y_convert": 933, "y_cov": 614, "y_cu": 403, "y_decis": [324, 838], "y_dens": 1005, "y_diabet": 181, "y_different_covari": 71, "y_digit": [106, 304, 408], "y_error": [138, 216], "y_errors_larg": 216, "y_filter": 91, "y_full": [180, 181, 308], "y_full_train": 140, "y_grid_pr": 153, "y_hat": 465, "y_high": 147, "y_i": [139, 320, 346, 405, 414, 995, 996, 1000, 1004, 1008, 1018, 1019, 1020], "y_indic": 878, "y_iri": 273, "y_isotropic_covari": 71, "y_j": [996, 1004, 1006, 1014, 1019], "y_k": [410, 1014], "y_kmean": 58, "y_kr": 243, "y_l": 1004, "y_label": 228, "y_left_lower_corn": [51, 301, 370, 499], "y_limit": 144, "y_loadings_": [482, 483, 484], "y_loc": 350, "y_log_prob": 838, "y_log_proba": [854, 867], "y_low": 147, "y_lower": [94, 147], "y_mask": 332, "y_max": [68, 92, 137, 143, 153, 171, 228, 242, 303, 310, 333, 343, 344, 638, 640], "y_mean": [174, 175, 178, 614, 647, 648], "y_mean_": 1046, "y_med": 147, "y_min": [68, 92, 137, 143, 153, 171, 242, 303, 310, 333, 343, 344, 638, 640], "y_miss": [180, 181], "y_miss_california": 181, "y_miss_diabet": 181, "y_multirf": 154, "y_n": [1004, 1008, 1018], "y_new": 90, "y_nois": 138, "y_noisi": 209, "y_norm_squar": 766, "y_normal": 212, "y_np": 403, "y_numer": [933, 992], "y_observ": 325, "y_onehot_test": 277, "y_org": 938, "y_outlier": 195, "y_pareto": 212, "y_plot": [192, 211, 216, 271], "y_plot_ext": 211, "y_po": 352, "y_pred": [44, 46, 47, 53, 63, 67, 69, 71, 80, 91, 96, 103, 108, 135, 147, 148, 150, 155, 162, 185, 207, 210, 212, 217, 220, 225, 227, 228, 237, 238, 247, 262, 264, 266, 271, 295, 299, 306, 313, 325, 331, 332, 358, 375, 382, 389, 414, 430, 439, 465, 482, 483, 484, 550, 553, 555, 557, 558, 559, 561, 563, 565, 566, 568, 569, 571, 614, 634, 638, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 681, 682, 683, 700, 701, 703, 704, 705, 706, 711, 715, 716, 721, 724, 725, 726, 727, 731, 732, 733, 737, 739, 741, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 786, 787, 788, 790, 791, 793, 794, 799, 803, 806, 807, 817, 828, 838, 840, 841, 850, 854, 858, 865, 867, 907, 908, 909, 910, 911, 912, 913, 916, 918, 1004, 1006, 1040, 1041, 1043, 1045, 1049, 1050, 1051], "y_pred_ard": 196, "y_pred_bin": 210, "y_pred_chain": 287, "y_pred_empti": [732, 733], "y_pred_enet": 196, "y_pred_ensembl": 287, "y_pred_lasso": 196, "y_pred_lr": 212, "y_pred_nnl": 206, "y_pred_ol": 206, "y_pred_outli": [224, 294, 338], "y_pred_outliers_sgd": 224, "y_pred_ovr": 287, "y_pred_product": 228, "y_pred_qr": 212, "y_pred_ridg": 108, "y_pred_ridge_with_trans_target": 108, "y_pred_scal": 313, "y_pred_seg": 210, "y_pred_test": [224, 294, 338], "y_pred_test_sgd": 224, "y_pred_tot": 228, "y_pred_train": [224, 338], "y_pred_train_sgd": 224, "y_pred_with_": 184, "y_pred_without_": 184, "y_predict": [138, 377, 1034], "y_prob": [63, 65, 172, 438, 439, 712, 838, 864, 1004, 1048, 1052], "y_proba": [146, 149, 313, 389, 712, 854, 867, 1052], "y_proba_sc": 313, "y_rand": 333, "y_reconstruct": [482, 483, 484], "y_rf": 154, "y_right": 71, "y_rotations_": [410, 482, 483, 484], "y_sampl": [178, 614], "y_scaler": 50, "y_score": [238, 275, 277, 389, 482, 483, 484, 550, 710, 723, 729, 730, 742, 743, 759, 785, 791, 792, 797, 803, 806, 807, 817, 854, 867, 1004, 1040, 1048, 1050, 1052], "y_scores_": [484, 1046], "y_shared_covari": 71, "y_spars": 1005, "y_std": [175, 178, 553, 614, 647, 648, 1047], "y_std_": 1046, "y_svr": 243, "y_test": [45, 46, 47, 48, 50, 53, 62, 63, 64, 65, 68, 69, 103, 104, 108, 116, 117, 126, 135, 138, 140, 142, 146, 147, 148, 149, 150, 151, 154, 161, 162, 167, 177, 184, 185, 186, 187, 188, 190, 196, 206, 207, 210, 216, 217, 218, 225, 226, 228, 238, 246, 250, 251, 255, 261, 262, 265, 266, 271, 275, 277, 281, 287, 291, 296, 297, 303, 305, 306, 310, 313, 315, 317, 318, 319, 324, 325, 331, 332, 350, 354, 357, 358, 369, 380, 388, 408, 411, 414, 438, 510, 559, 560, 561, 568, 569, 700, 701, 703, 705, 802, 825, 833, 835, 838, 856, 864, 865, 867, 917, 918, 1004, 1006, 1007, 1014, 1019, 1031, 1034], "y_test_pr": 255, "y_test_predict": 246, "y_test_r": 116, "y_test_tru": 331, "y_thresholds_": [240, 638, 1046], "y_torch": 403, "y_train": [45, 46, 47, 48, 50, 53, 62, 63, 64, 65, 68, 69, 103, 104, 108, 116, 117, 126, 135, 138, 142, 145, 146, 147, 148, 149, 150, 151, 154, 161, 162, 167, 175, 176, 177, 178, 184, 185, 186, 187, 188, 190, 193, 196, 206, 207, 208, 211, 217, 218, 225, 226, 238, 246, 250, 251, 255, 261, 262, 265, 266, 271, 275, 277, 281, 287, 291, 296, 297, 303, 305, 306, 310, 313, 315, 317, 318, 319, 324, 325, 328, 329, 331, 332, 333, 350, 354, 357, 358, 362, 369, 377, 380, 388, 408, 411, 414, 437, 438, 510, 559, 560, 561, 568, 569, 700, 701, 703, 705, 802, 825, 833, 835, 838, 856, 864, 865, 867, 917, 918, 994, 1004, 1006, 1007, 1012, 1014, 1019, 1031], "y_train_": 614, "y_train_ensembl": 140, "y_train_linear": 140, "y_train_noisi": 176, "y_train_pr": 255, "y_train_r": 116, "y_train_valid": 64, "y_tran": 108, "y_transform": 485, "y_true": [44, 53, 58, 69, 93, 108, 135, 155, 172, 210, 220, 228, 247, 256, 262, 331, 375, 430, 438, 439, 465, 482, 483, 484, 553, 555, 557, 558, 559, 561, 563, 565, 566, 569, 571, 614, 638, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 664, 665, 666, 667, 668, 670, 673, 675, 676, 681, 682, 700, 701, 703, 704, 705, 706, 710, 711, 712, 715, 716, 721, 723, 724, 725, 726, 727, 729, 730, 731, 732, 733, 737, 738, 739, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 785, 786, 787, 788, 790, 791, 792, 793, 794, 797, 799, 802, 840, 841, 850, 858, 865, 908, 910, 913, 916, 918, 1004, 1035, 1040, 1041, 1042, 1043, 1045, 1046, 1048, 1049, 1051], "y_true_bin": 210, "y_true_categor": [712, 1004], "y_true_empti": 732, "y_true_mean": 212, "y_true_seg": 210, "y_type_": 874, "y_uniqu": 62, "y_upper": [94, 147], "y_val": [145, 326, 1012], "y_valid": 64, "y_var": 138, "y_vari": 91, "y_weights_": [410, 482, 483, 484, 485], "y_wrong": 71, "yacin": 1042, "yadav": 1048, "yagi": 1046, "yahoo": 52, "yair": [407, 694], "yakov": 1046, "yalburgi": [1041, 1042], "yaman": 1049, "yamanishi": 370, "yamin": 1034, "yaml": [379, 383], "yan": [1038, 1046], "yanchor": 269, "yang": [370, 407, 412, 535, 642, 1040, 1041, 1044, 1046, 1047, 1048, 1050, 1051], "yangarbit": 1041, "yanhong": 1049, "yanlend": 1040, "yann": [1034, 1036], "yanni": 407, "yannick": [1034, 1036], "yao": [0, 372, 386, 396, 1040, 1041, 1042, 1043, 1050, 1051, 1052, 1053], "yap": 1041, "yar": 1048, "yareyaredesuyo": [1052, 1053], "yaroslav": [0, 397, 1034, 1035, 1036, 1037, 1040, 1041, 1042, 1043, 1050, 1051, 1052, 1053], "yarowski": [319, 904, 1017], "yashika": 1046, "yasmeen": 1047, "yat2016": 407, "yate": [592, 733], "yates2011": 592, "yau": [1037, 1038, 1039, 1040, 1041], "yaxi": [47, 50, 94, 127, 141, 230, 232, 235, 253, 288, 293, 350], "ye": [350, 383, 389, 401, 661, 662, 874, 891, 1000], "year": [0, 44, 158, 165, 174, 184, 185, 186, 210, 211, 228, 325, 372, 374, 379, 387, 411, 415, 805, 810, 812, 886, 1000, 1004, 1024, 1028], "yearli": [44, 390], "yearremodadd": 155, "yeast": [287, 838], "yee": [1041, 1042], "yegelwel": 1046, "yeh": 1047, "yelit": 1040, "yellow": [71, 119, 339, 356, 1005], "yellowbrick": 1023, "yellowgreen": [211, 213, 220, 356], "yen": [1040, 1041], "yenchen": [0, 1040], "yenchenlin": 1040, "yenugula": 1052, "yeo": [308, 312, 883, 895, 1014, 1042, 1048, 1050], "yep": 378, "yerr": [106, 111, 113, 142, 144, 164, 290, 314, 331], "yesy": 395, "yesyesclassificationclassificationnumb": 395, "yesyesdo": 395, "yesyesfew": 395, "yesyesllelledimensionalityreductiondimension": 395, "yesyespredict": 395, "yesyessgdclassifiersgd": 395, "yesyessgdregressorsgd": 395, "yesyestextdatatext": 395, "yet": [49, 91, 196, 228, 258, 269, 326, 352, 364, 370, 374, 377, 379, 387, 392, 393, 398, 411, 412, 414, 415, 417, 448, 452, 461, 462, 554, 555, 579, 781, 987, 993, 1000, 1004, 1010, 1018, 1024, 1043, 1051], "yeung": 1040, "ygrid": [51, 301], "yhoo": 52, "yi": [510, 1006, 1038, 1042, 1043, 1046], "yichuan": [1040, 1041], "yield": [2, 48, 49, 63, 89, 110, 111, 112, 113, 147, 196, 206, 210, 225, 228, 273, 287, 303, 308, 336, 341, 350, 351, 358, 362, 364, 369, 380, 389, 404, 407, 409, 411, 412, 414, 415, 416, 437, 449, 468, 472, 509, 510, 538, 539, 540, 542, 547, 554, 555, 560, 561, 562, 563, 568, 569, 596, 604, 650, 654, 655, 656, 658, 664, 666, 668, 676, 678, 689, 729, 784, 791, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 830, 831, 832, 834, 838, 841, 899, 900, 944, 945, 952, 954, 955, 961, 996, 998, 1000, 1001, 1004, 1019, 1020, 1039, 1040, 1042, 1045, 1047], "yifan": 1008, "yime": 1042, "ying": [407, 452, 462, 1048], "yinglr": 1044, "yisheng": 1051, "yiyangq": 1048, "yj": [116, 312], "ylabel": [44, 48, 49, 53, 62, 63, 64, 65, 70, 73, 95, 110, 111, 113, 114, 116, 117, 123, 127, 128, 136, 137, 139, 146, 147, 148, 149, 150, 154, 158, 160, 161, 164, 169, 170, 171, 172, 174, 175, 176, 185, 192, 195, 196, 198, 199, 200, 201, 203, 204, 205, 207, 210, 212, 213, 215, 217, 219, 220, 228, 241, 243, 245, 263, 267, 268, 271, 272, 273, 277, 278, 281, 283, 291, 315, 336, 339, 342, 350, 355, 356, 634], "ylim": [52, 62, 64, 70, 73, 80, 92, 96, 110, 111, 112, 123, 137, 138, 144, 147, 154, 157, 170, 171, 185, 200, 201, 203, 204, 205, 216, 219, 220, 224, 237, 245, 254, 259, 263, 267, 271, 277, 283, 294, 295, 338, 343, 344, 347, 350, 356], "ylorbr_r": 112, "ym": [52, 233], "ymax": [48, 50, 51, 110, 200, 203, 204, 211, 219, 268, 301], "ymazari": 1042, "ymean": 193, "ymin": [51, 110, 200, 203, 204, 211, 219, 268, 301], "yml": [375, 383], "yn": [510, 1005, 1006], "yoav": 1040, "yoch": 1047, "yogendrasingh": 1049, "yojana": 1049, "yokasr": 1044, "yoni": 1037, "yoon": 1045, "yoram": [285, 738], "york": [267, 791, 800, 854, 994, 1004, 1016], "yoshihiro": 1044, "yoshiki": [1037, 1040], "yoshizawa": 1042, "yoshua": [864, 865, 1017], "yosshi999": 1048, "yosuk": [1046, 1047], "yotam": 1050, "you": [0, 31, 55, 59, 62, 104, 127, 143, 146, 148, 162, 165, 167, 181, 186, 188, 198, 211, 214, 239, 244, 251, 256, 263, 268, 269, 275, 277, 294, 317, 318, 321, 322, 323, 324, 326, 329, 332, 343, 350, 356, 358, 362, 363, 364, 369, 370, 373, 374, 375, 376, 377, 379, 380, 381, 383, 384, 388, 389, 393, 394, 395, 398, 401, 403, 405, 406, 407, 408, 409, 411, 414, 415, 416, 418, 419, 424, 437, 443, 444, 446, 447, 449, 454, 464, 465, 467, 469, 482, 483, 484, 501, 504, 505, 510, 511, 533, 534, 537, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 581, 582, 590, 591, 592, 593, 606, 609, 610, 612, 613, 614, 630, 638, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 690, 693, 702, 703, 788, 801, 802, 804, 805, 806, 807, 808, 810, 812, 818, 819, 821, 822, 823, 825, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 857, 858, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 879, 880, 881, 886, 887, 892, 893, 895, 896, 897, 898, 900, 902, 903, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 926, 944, 951, 969, 993, 994, 999, 1000, 1004, 1005, 1008, 1010, 1011, 1014, 1015, 1018, 1019, 1020, 1022, 1023, 1027, 1028, 1034, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "youden": 1004, "younger": 228, "your": [16, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 184, 185, 186, 187, 188, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 358, 362, 363, 364, 369, 373, 374, 375, 376, 378, 379, 381, 383, 384, 387, 388, 389, 393, 394, 395, 401, 403, 406, 407, 408, 409, 414, 415, 418, 419, 444, 446, 504, 534, 606, 649, 690, 944, 1001, 1004, 1008, 1014, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1027, 1028, 1035, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "yourlogin": 375, "yourself": [104, 374, 375, 376, 377, 380, 383, 1008], "ypred": 1041, "yrsold": 155, "yscale": [170, 175, 210, 243, 350], "ystd": 193, "yt": 878, "ython": 0, "ytick": [46, 51, 67, 71, 76, 80, 81, 84, 85, 86, 92, 93, 96, 114, 116, 124, 148, 161, 171, 172, 173, 177, 201, 223, 237, 245, 254, 255, 256, 259, 263, 283, 292, 301, 306, 328, 339, 344, 350], "yticklabel": [263, 350], "ytrain": 301, "ytrue": 1041, "yu": [196, 407, 452, 462, 661, 1000, 1008, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "yuan": [1048, 1049, 1050, 1051, 1052, 1053], "yuchen": [1050, 1051], "yucheng": 1039, "yue": [1046, 1052], "yufeng": 1042, "yuichi": 1041, "yuki": 1048, "yule": [450, 457, 781, 782, 783], "yulia": 1044, "yum": 373, "yun": [1049, 1050], "yung": [1037, 1040], "yunqian": 1000, "yurchak": [0, 397, 415, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "yuri": [1037, 1039], "yusuf": [1049, 1050], "yusuk": 1047, "yusukenagasaka": 1047, "yutaro": 1046, "yuusuk": 1051, "yuval": [404, 451], "yv": 410, "yve": 1047, "yy": [78, 92, 112, 143, 153, 171, 173, 186, 203, 217, 221, 222, 223, 224, 235, 237, 245, 294, 303, 310, 311, 333, 338, 339, 343, 344, 347, 348], "yy_": 217, "yy_coars": 143, "yy_down": 344, "yy_up": 344, "yzhenman": 1047, "z": [51, 92, 143, 171, 173, 186, 220, 222, 223, 230, 232, 237, 242, 257, 294, 301, 303, 310, 313, 333, 339, 344, 348, 372, 379, 404, 412, 414, 554, 555, 587, 642, 667, 674, 688, 689, 692, 696, 702, 727, 788, 887, 1000, 1001, 1008, 1009, 1049], "z_": 412, "z_1": 1000, "z_2": 1000, "z_3": 1000, "z_4": 1000, "z_5": 1000, "z_i": [139, 1008], "z_l": 1008, "z_points_coars": 143, "zablit": 1049, "zac": 1039, "zacchari": 1046, "zach": [1042, 1043, 1048], "zachari": 1053, "zachariah": 1042, "zadrozni": [65, 405, 437, 679], "zaffalon": 268, "zahlii": 1047, "zain": [0, 396, 1048, 1049, 1050, 1051, 1053], "zalkow": 1039, "zambelli": 1037, "zamrii": 1044, "zanouda": 1041, "zaxi": [127, 230], "zayd": 1043, "zaytsev": 1037, "zdzieblo": 1051, "zebra": 715, "zedan": 1050, "zeel": 1048, "zeeshan": [1049, 1050], "zempleni": 1048, "zen": 938, "zenin": 1040, "zentrum": 1004, "zero": [2, 26, 50, 51, 54, 65, 71, 73, 76, 77, 86, 88, 111, 113, 114, 121, 124, 126, 137, 138, 146, 148, 149, 154, 162, 165, 181, 192, 196, 197, 199, 202, 204, 205, 209, 210, 211, 214, 215, 216, 220, 225, 228, 241, 244, 245, 247, 253, 257, 259, 265, 268, 273, 277, 278, 281, 293, 308, 318, 319, 343, 346, 351, 352, 354, 357, 362, 363, 370, 377, 381, 389, 405, 407, 409, 412, 414, 415, 416, 417, 420, 446, 452, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 487, 498, 509, 510, 524, 527, 528, 532, 533, 536, 538, 539, 540, 541, 543, 544, 548, 549, 553, 558, 559, 560, 561, 562, 563, 565, 566, 567, 583, 587, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 609, 610, 614, 639, 642, 646, 647, 648, 653, 661, 662, 667, 668, 669, 670, 671, 674, 679, 680, 681, 688, 689, 706, 710, 712, 715, 716, 718, 719, 723, 728, 730, 732, 733, 737, 741, 742, 743, 749, 785, 786, 787, 788, 790, 792, 799, 800, 818, 819, 822, 823, 836, 847, 848, 849, 850, 851, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 870, 877, 879, 880, 882, 883, 884, 886, 887, 893, 894, 895, 896, 900, 907, 915, 916, 917, 918, 949, 978, 989, 994, 1000, 1002, 1003, 1006, 1007, 1008, 1014, 1015, 1016, 1018, 1019, 1020, 1034, 1036, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "zero_bas": [487, 509, 510], "zero_class": 245, "zero_divis": [306, 716, 732, 733, 741, 786, 787, 790, 1004, 1044, 1046, 1050], "zero_impute_scor": 181, "zero_on": [375, 1035], "zero_one_loss": [2, 375, 403, 706, 737, 1004, 1035, 1036, 1037, 1051, 1052], "zero_one_scor": 1035, "zerodivisionerror": [1041, 1044, 1050], "zeros_lik": [83, 212, 277], "zeta": 1019, "zeta_i": 1019, "zev": [1040, 1041, 1042, 1043], "zeyusun": 1047, "zha": [692, 696, 1001], "zhai_pro": 1039, "zhan": 1049, "zhang": [407, 442, 667, 682, 688, 689, 692, 696, 761, 762, 1000, 1001, 1002, 1006, 1018, 1038, 1039, 1041, 1042, 1043, 1044, 1046, 1050, 1051, 1052], "zhang02c": 679, "zhang96": [407, 442], "zhao": [1044, 1046, 1047, 1048, 1049], "zhaowei": 1046, "zhaoweiwang": 1047, "zhauniarovich": 1039, "zhdanovich": 1042, "zhechev": 1049, "zhehao": [1047, 1048, 1049, 1050, 1052], "zhenfish": 1048, "zheng": [1040, 1041, 1046], "zhenq": 1042, "zhi": [564, 1010], "zhiqe": 1042, "zhou": [564, 642, 903, 1010, 1042, 1050, 1051], "zht2007": 198, "zhu": [135, 414, 520, 554, 661, 902], "zhuyi": [1042, 1043], "zhuzhunashvili": [407, 462], "ziad": [1052, 1053], "zibulevski": [667, 688, 689], "zichen": 1039, "zielinska": 1045, "zihna": [1047, 1053], "ziji": [1042, 1043], "zijlstra": 1037, "zike": 1040, "zimek": 446, "zimmer": [1038, 1048], "zinkov": [1034, 1035, 1036, 1038, 1039], "zip": [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 184, 185, 186, 187, 188, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 373, 414, 831, 1014], "zisserman": [641, 996, 1004], "zito": [1034, 1047], "ziv": 1040, "zivori": 1040, "zj": [1042, 1043], "zlabel": 127, "zoj613": 1046, "zolisa": 1046, "zoom": [44, 140, 308, 395], "zoom_in_percentile_rang": 308, "zorder": [52, 92, 123, 152, 170, 178, 201, 208, 231, 233, 240, 243, 253, 318, 324, 344], "zou": [135, 198, 414, 520, 554, 659, 1000, 1018], "zou_et_al_criterion_resc": 198, "zoubin": 902, "zoubir": 113, "zouhar": 1047, "zsh": 363, "zuckerberg": 0, "zwinck": 1036, "zxcvbniu": 1041, "zy": 1053, "zz": 112, "zzrh2009": 414, "z\u00e9": 1042, "\u00e4yr\u00e4m\u00f6": 1000, "\u00f3scar": [1038, 1039, 1040, 1041], "\u00f6zer": 1047, "\u0142ukasz": 1049, "\u015fahin": 1048, "\u0161t\u011bp\u00e1n": [1052, 1053], "\u675c\u4e16\u6a4b": [0, 397], "\u8d75\u4e30": 1048}, "titles": ["About us", "Recently Deprecated", "API Reference", "sklearn", "sklearn.base", "sklearn.calibration", "sklearn.cluster", "sklearn.compose", "sklearn.covariance", "sklearn.cross_decomposition", "sklearn.datasets", "sklearn.decomposition", "sklearn.discriminant_analysis", "sklearn.dummy", "sklearn.ensemble", "sklearn.exceptions", "sklearn.experimental", "sklearn.feature_extraction", "sklearn.feature_selection", "sklearn.frozen", "sklearn.gaussian_process", "sklearn.impute", "sklearn.inspection", "sklearn.isotonic", "sklearn.kernel_approximation", "sklearn.kernel_ridge", "sklearn.linear_model", "sklearn.manifold", "sklearn.metrics", "sklearn.mixture", "sklearn.model_selection", "sklearn.multiclass", "sklearn.multioutput", "sklearn.naive_bayes", "sklearn.neighbors", "sklearn.neural_network", "sklearn.pipeline", "sklearn.preprocessing", "sklearn.random_projection", "sklearn.semi_supervised", "sklearn.svm", "sklearn.tree", "sklearn.utils", "Examples based on real world datasets", "Time-related feature engineering", "Image denoising using kernel PCA", "Faces recognition example using eigenfaces and SVMs", "Model Complexity Influence", "Out-of-core classification of text documents", "Outlier detection on a real data set", "Prediction Latency", "Species distribution modeling", "Visualizing the stock market structure", "Lagged features for time series forecasting", "Compressive sensing: tomography reconstruction with L1 prior (Lasso)", "Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation", "Wikipedia principal eigenvector", "Biclustering", "Biclustering documents with the Spectral Co-clustering algorithm", "A demo of the Spectral Biclustering algorithm", "A demo of the Spectral Co-Clustering algorithm", "Calibration", "Probability calibration of classifiers", "Probability Calibration curves", "Probability Calibration for 3-class classification", "Comparison of Calibration of Classifiers", "Classification", "Plot classification probability", "Classifier comparison", "Recognizing hand-written digits", "Normal, Ledoit-Wolf and OAS Linear Discriminant Analysis for classification", "Linear and Quadratic Discriminant Analysis with covariance ellipsoid", "Clustering", "Adjustment for chance in clustering performance evaluation", "Demo of affinity propagation clustering algorithm", "Agglomerative clustering with and without structure", "Agglomerative clustering with different metrics", "Plot Hierarchical Clustering Dendrogram", "Compare BIRCH and MiniBatchKMeans", "Bisecting K-Means and Regular K-Means Performance Comparison", "Comparing different clustering algorithms on toy datasets", "Segmenting the picture of greek coins in regions", "A demo of structured Ward hierarchical clustering on an image of coins", "Demo of DBSCAN clustering algorithm", "Online learning of a dictionary of parts of faces", "Feature agglomeration", "Various Agglomerative Clustering on a 2D embedding of digits", "Vector Quantization Example", "Feature agglomeration vs. univariate selection", "Demo of HDBSCAN clustering algorithm", "Inductive Clustering", "Demonstration of k-means assumptions", "A demo of K-Means clustering on the handwritten digits data", "An example of K-Means++ initialization", "Selecting the number of clusters with silhouette analysis on KMeans clustering", "Empirical evaluation of the impact of k-means initialization", "Comparing different hierarchical linkage methods on toy datasets", "A demo of the mean-shift clustering algorithm", "Comparison of the K-Means and MiniBatchKMeans clustering algorithms", "Demo of OPTICS clustering algorithm", "Spectral clustering for image segmentation", "Hierarchical clustering: structured vs unstructured ward", "Pipelines and composite estimators", "Column Transformer with Heterogeneous Data Sources", "Column Transformer with Mixed Types", "Selecting dimensionality reduction with Pipeline and GridSearchCV", "Pipelining: chaining a PCA and a logistic regression", "Concatenating multiple feature extraction methods", "Effect of transforming the targets in regression model", "Covariance estimation", "Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood", "Ledoit-Wolf vs OAS estimation", "Robust covariance estimation and Mahalanobis distances relevance", "Robust vs Empirical covariance estimate", "Sparse inverse covariance estimation", "Cross decomposition", "Compare cross decomposition methods", "Principal Component Regression vs Partial Least Squares Regression", "Dataset examples", "Plot randomly generated multilabel dataset", "Decomposition", "Faces dataset decompositions", "Blind source separation using FastICA", "FastICA on 2D point clouds", "Image denoising using dictionary learning", "Incremental PCA", "Kernel PCA", "Principal Component Analysis (PCA) on Iris Dataset", "Model selection with Probabilistic PCA and Factor Analysis (FA)", "Comparison of LDA and PCA 2D projection of Iris dataset", "Sparse coding with a precomputed dictionary", "Factor Analysis (with rotation) to visualize patterns", "Developing Estimators", "<code class=\"docutils literal notranslate\"><span class=\"pre\">__sklearn_is_fitted__</span></code> as Developer API", "Ensemble methods", "Multi-class AdaBoosted Decision Trees", "Decision Tree Regression with AdaBoost", "Two-class AdaBoost", "Single estimator versus bagging: bias-variance decomposition", "OOB Errors for Random Forests", "Feature transformations with ensembles of trees", "Comparing Random Forests and Histogram Gradient Boosting models", "Feature importances with a forest of trees", "Plot the decision surfaces of ensembles of trees on the iris dataset", "Categorical Feature Support in Gradient Boosting", "Early stopping in Gradient Boosting", "Gradient Boosting Out-of-Bag estimates", "Prediction Intervals for Gradient Boosting Regression", "Gradient Boosting regression", "Gradient Boosting regularization", "Features in Histogram Gradient Boosting Trees", "IsolationForest example", "Monotonic Constraints", "Hashing feature transformation using Totally Random Trees", "Comparing random forests and the multi-output meta estimator", "Combine predictors using stacking", "Plot the decision boundaries of a VotingClassifier", "Plot class probabilities calculated by the VotingClassifier", "Plot individual and voting regression predictions", "Feature Selection", "Comparison of F-test and mutual information", "Univariate Feature Selection", "Pipeline ANOVA SVM", "Recursive feature elimination", "Recursive feature elimination with cross-validation", "Model-based and sequential feature selection", "Frozen Estimators", "Examples of Using <code class=\"docutils literal notranslate\"><span class=\"pre\">FrozenEstimator</span></code>", "Gaussian Process for Machine Learning", "Comparison of kernel ridge and Gaussian process regression", "Probabilistic predictions with Gaussian process classification (GPC)", "Gaussian process classification (GPC) on iris dataset", "Iso-probability lines for Gaussian Processes classification (GPC)", "Illustration of Gaussian process classification (GPC) on the XOR dataset", "Forecasting of CO2 level on Mona Loa dataset using Gaussian process regression (GPR)", "Ability of Gaussian process regression (GPR) to estimate data noise-level", "Gaussian Processes regression: basic introductory example", "Gaussian processes on discrete data structures", "Illustration of prior and posterior Gaussian process for different kernels", "Missing Value Imputation", "Imputing missing values with variants of IterativeImputer", "Imputing missing values before building an estimator", "Examples", "Inspection", "Failure of Machine Learning to infer causal effects", "Common pitfalls in the interpretation of coefficients of linear models", "Partial Dependence and Individual Conditional Expectation Plots", "Permutation Importance vs Random Forest Feature Importance (MDI)", "Permutation Importance with Multicollinear or Correlated Features", "Kernel Approximation", "Scalable learning with polynomial kernel approximation", "Generalized Linear Models", "Comparing Linear Bayesian Regressors", "Curve Fitting with Bayesian Ridge Regression", "Fitting an Elastic Net with a precomputed Gram Matrix and Weighted Samples", "HuberRegressor vs Ridge on dataset with strong outliers", "L1-based models for Sparse Signals", "Lasso on dense and sparse data", "Lasso model selection via information criteria", "Lasso, Lasso-LARS, and Elastic Net paths", "Lasso model selection: AIC-BIC / cross-validation", "Logistic function", "L1 Penalty and Sparsity in Logistic Regression", "Decision Boundaries of Multinomial and One-vs-Rest Logistic Regression", "Regularization path of L1- Logistic Regression", "Joint feature selection with multi-task Lasso", "Non-negative least squares", "Ordinary Least Squares Example", "Ordinary Least Squares and Ridge Regression Variance", "Orthogonal Matching Pursuit", "Poisson regression and non-normal loss", "Polynomial and Spline interpolation", "Quantile regression", "Robust linear model estimation using RANSAC", "Ridge coefficients as a function of the L2 Regularization", "Plot Ridge coefficients as a function of the regularization", "Robust linear estimator fitting", "Comparing various online solvers", "Early stopping of Stochastic Gradient Descent", "Plot multi-class SGD on the iris dataset", "SGD: convex loss functions", "SGD: Penalties", "SGD: Maximum margin separating hyperplane", "SGD: Weighted samples", "One-Class SVM versus One-Class SVM using Stochastic Gradient Descent", "Multiclass sparse logistic regression on 20newgroups", "MNIST classification using multinomial logistic + L1", "Theil-Sen Regression", "Tweedie regression on insurance claims", "Manifold learning", "Comparison of Manifold Learning methods", "Manifold learning on handwritten digits: Locally Linear Embedding, Isomap\u2026", "Manifold Learning methods on a severed sphere", "Multi-dimensional scaling", "Swiss Roll And Swiss-Hole Reduction", "t-SNE: The effect of various perplexity values on the shape", "Miscellaneous", "Comparing anomaly detection algorithms for outlier detection on toy datasets", "Visualizations with Display Objects", "Displaying estimators and complex pipelines", "Isotonic Regression", "The Johnson-Lindenstrauss bound for embedding with random projections", "Explicit feature map approximation for RBF kernels", "Comparison of kernel ridge regression and SVR", "Metadata Routing", "Multilabel classification", "Face completion with a multi-output estimators", "Evaluation of outlier detection estimators", "Advanced Plotting With Partial Dependence", "Displaying Pipelines", "ROC Curve with Visualization API", "Introducing the <code class=\"docutils literal notranslate\"><span class=\"pre\">set_output</span></code> API", "Gaussian Mixture Models", "Concentration Prior Type Analysis of Variation Bayesian Gaussian Mixture", "Gaussian Mixture Model Ellipsoids", "GMM covariances", "GMM Initialization Methods", "Density Estimation for a Gaussian mixture", "Gaussian Mixture Model Selection", "Gaussian Mixture Model Sine Curve", "Model Selection", "Confusion matrix", "Post-tuning the decision threshold for cost-sensitive learning", "Visualizing cross-validation behavior in scikit-learn", "Plotting Cross-Validated Predictions", "Detection error tradeoff (DET) curve", "Custom refit strategy of a grid search with cross-validation", "Balance model complexity and cross-validated score", "Statistical comparison of models using grid search", "Sample pipeline for text feature extraction and evaluation", "Plotting Learning Curves and Checking Models\u2019 Scalability", "Class Likelihood Ratios to measure classification performance", "Demonstration of multi-metric evaluation on cross_val_score and GridSearchCV", "Nested versus non-nested cross-validation", "Test with permutations the significance of a classification score", "Precision-Recall", "Comparing randomized search and grid search for hyperparameter estimation", "Multiclass Receiver Operating Characteristic (ROC)", "Receiver Operating Characteristic (ROC) with cross validation", "Comparison between grid search and successive halving", "Successive Halving Iterations", "Effect of model regularization on training and test error", "Post-hoc tuning the cut-off point of decision function", "Underfitting vs. Overfitting", "Multiclass methods", "Overview of multiclass training meta-estimators", "Multioutput methods", "Multilabel classification using a classifier chain", "Approximate nearest neighbors in TSNE", "Nearest Neighbors", "Caching nearest neighbors", "Nearest Neighbors Classification", "Kernel Density Estimation", "Simple 1D Kernel Density Estimation", "Novelty detection with Local Outlier Factor (LOF)", "Outlier detection with Local Outlier Factor (LOF)", "Comparing Nearest Neighbors with and without Neighborhood Components Analysis", "Dimensionality Reduction with Neighborhood Components Analysis", "Neighborhood Components Analysis Illustration", "Nearest Centroid Classification", "Nearest Neighbors regression", "Kernel Density Estimate of Species Distributions", "Neural Networks", "Varying regularization in Multi-layer Perceptron", "Compare Stochastic learning strategies for MLPClassifier", "Visualization of MLP weights on MNIST", "Restricted Boltzmann Machine features for digit classification", "Preprocessing", "Compare the effect of different scalers on data with outliers", "Using KBinsDiscretizer to discretize continuous features", "Feature discretization", "Demonstrating the different strategies of KBinsDiscretizer", "Map data to a normal distribution", "Importance of Feature Scaling", "Comparing Target Encoder with Other Encoders", "Target Encoder\u2019s Internal Cross fitting", "Release Highlights", "Release Highlights for scikit-learn 0.22", "Release Highlights for scikit-learn 0.23", "Release Highlights for scikit-learn 0.24", "Release Highlights for scikit-learn 1.0", "Release Highlights for scikit-learn 1.1", "Release Highlights for scikit-learn 1.2", "Release Highlights for scikit-learn 1.3", "Release Highlights for scikit-learn 1.4", "Release Highlights for scikit-learn 1.5", "Release Highlights for scikit-learn 1.6", "Semi Supervised Classification", "Label Propagation digits: Demonstrating performance", "Label Propagation digits active learning", "Label Propagation learning a complex structure", "Effect of varying threshold for self-training", "Semi-supervised Classification on a Text Dataset", "Decision boundary of semi-supervised classifiers versus SVM on the Iris dataset", "Support Vector Machines", "SVM with custom kernel", "Plot different SVM classifiers in the iris dataset", "Plot the support vectors in LinearSVC", "One-class SVM with non-linear kernel (RBF)", "RBF SVM parameters", "SVM: Maximum margin separating hyperplane", "SVM: Separating hyperplane for unbalanced classes", "SVM-Anova: SVM with univariate feature selection", "Plot classification boundaries with different SVM Kernels", "SVM Margins Example", "Support Vector Regression (SVR) using linear and non-linear kernels", "Scaling the regularization parameter for SVCs", "SVM Tie Breaking Example", "SVM: Weighted samples", "Working with text documents", "Classification of text documents using sparse features", "Clustering text documents using k-means", "FeatureHasher and DictVectorizer Comparison", "Decision Trees", "Post pruning decision trees with cost complexity pruning", "Plot the decision surface of decision trees trained on the iris dataset", "Decision Tree Regression", "Understanding the decision tree structure", "<span class=\"section-number\">10. </span>Common pitfalls and recommended practices", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">8. </span>Computing with scikit-learn", "<span class=\"section-number\">8.2. </span>Computational Performance", "<span class=\"section-number\">8.3. </span>Parallelism, resource management, and configuration", "<span class=\"section-number\">8.1. </span>Strategies to scale computationally: bigger data", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">6. </span>Dataset transformations", "<span class=\"section-number\">7. </span>Dataset loading utilities", "<span class=\"section-number\">7.4. </span>Loading other datasets", "<span class=\"section-number\">7.2. </span>Real world datasets", "<span class=\"section-number\">7.3. </span>Generated datasets", "<span class=\"section-number\">7.1. </span>Toy datasets", "Installing the development version of scikit-learn", "Bug triaging and issue curation", "Contributing", "Cython Best Practices, Conventions and Knowledge", "Developing scikit-learn estimators", "Developer\u2019s Guide", "Maintainer Information", "Crafting a minimal reproducer for scikit-learn", "How to optimize for speed", "Developing with the Plotting API", "Developers\u2019 Tips and Tricks", "Utilities for Developers", "<span class=\"section-number\">11. </span>Dispatching", "&lt;no title&gt;", "Frequently Asked Questions", "Getting Started", "Glossary of Common Terms and API Elements", "Scikit-learn governance and decision-making", "Index", "<span class=\"section-number\">4. </span>Inspection", "Installing scikit-learn", "&lt;no title&gt;", "<span class=\"section-number\">12. </span>Choosing the right estimator", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">1. </span>Metadata Routing", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">9. </span>Model persistence", "<span class=\"section-number\">3. </span>Model selection and evaluation", "<span class=\"section-number\">11.1. </span>Array API support (experimental)", "<span class=\"section-number\">2.4. </span>Biclustering", "<span class=\"section-number\">1.16. </span>Probability calibration", "<span class=\"section-number\">3.3. </span>Tuning the decision threshold for class prediction", "<span class=\"section-number\">2.3. </span>Clustering", "<span class=\"section-number\">6.1. </span>Pipelines and composite estimators", "<span class=\"section-number\">2.6. </span>Covariance estimation", "<span class=\"section-number\">1.8. </span>Cross decomposition", "<span class=\"section-number\">3.1. </span>Cross-validation: evaluating estimator performance", "<span class=\"section-number\">2.5. </span>Decomposing signals in components (matrix factorization problems)", "<span class=\"section-number\">2.8. </span>Density Estimation", "<span class=\"section-number\">1.11. </span>Ensembles: Gradient boosting, random forests, bagging, voting, stacking", "<span class=\"section-number\">6.2. </span>Feature extraction", "<span class=\"section-number\">1.13. </span>Feature selection", "<span class=\"section-number\">1.7. </span>Gaussian Processes", "dbscan", "fastica", "oas", "BaseEstimator", "BiclusterMixin", "ClassNamePrefixFeaturesOutMixin", "ClassifierMixin", "ClusterMixin", "DensityMixin", "MetaEstimatorMixin", "OneToOneFeatureMixin", "OutlierMixin", "RegressorMixin", "TransformerMixin", "clone", "is_classifier", "is_clusterer", "is_outlier_detector", "is_regressor", "CalibratedClassifierCV", "CalibrationDisplay", "calibration_curve", "AffinityPropagation", "AgglomerativeClustering", "Birch", "BisectingKMeans", "DBSCAN", "FeatureAgglomeration", "HDBSCAN", "KMeans", "MeanShift", "MiniBatchKMeans", "OPTICS", "SpectralBiclustering", "SpectralClustering", "SpectralCoclustering", "affinity_propagation", "cluster_optics_dbscan", "cluster_optics_xi", "compute_optics_graph", "estimate_bandwidth", "k_means", "kmeans_plusplus", "mean_shift", "spectral_clustering", "ward_tree", "ColumnTransformer", "TransformedTargetRegressor", "make_column_selector", "make_column_transformer", "config_context", "EllipticEnvelope", "EmpiricalCovariance", "GraphicalLasso", "GraphicalLassoCV", "LedoitWolf", "MinCovDet", "OAS", "ShrunkCovariance", "empirical_covariance", "graphical_lasso", "ledoit_wolf", "ledoit_wolf_shrinkage", "shrunk_covariance", "CCA", "PLSCanonical", "PLSRegression", "PLSSVD", "clear_data_home", "dump_svmlight_file", "fetch_20newsgroups", "fetch_20newsgroups_vectorized", "fetch_california_housing", "fetch_covtype", "fetch_file", "fetch_kddcup99", "fetch_lfw_pairs", "fetch_lfw_people", "fetch_olivetti_faces", "fetch_openml", "fetch_rcv1", "fetch_species_distributions", "get_data_home", "load_breast_cancer", "load_diabetes", "load_digits", "load_files", "load_iris", "load_linnerud", "load_sample_image", "load_sample_images", "load_svmlight_file", "load_svmlight_files", "load_wine", "make_biclusters", "make_blobs", "make_checkerboard", "make_circles", "make_classification", "make_friedman1", "make_friedman2", "make_friedman3", "make_gaussian_quantiles", "make_hastie_10_2", "make_low_rank_matrix", "make_moons", "make_multilabel_classification", "make_regression", "make_s_curve", "make_sparse_coded_signal", "make_sparse_spd_matrix", "make_sparse_uncorrelated", "make_spd_matrix", "make_swiss_roll", "DictionaryLearning", "FactorAnalysis", "FastICA", "IncrementalPCA", "KernelPCA", "LatentDirichletAllocation", "MiniBatchDictionaryLearning", "MiniBatchNMF", "MiniBatchSparsePCA", "NMF", "PCA", "SparseCoder", "SparsePCA", "TruncatedSVD", "dict_learning", "dict_learning_online", "non_negative_factorization", "sparse_encode", "LinearDiscriminantAnalysis", "QuadraticDiscriminantAnalysis", "DummyClassifier", "DummyRegressor", "AdaBoostClassifier", "AdaBoostRegressor", "BaggingClassifier", "BaggingRegressor", "ExtraTreesClassifier", "ExtraTreesRegressor", "GradientBoostingClassifier", "GradientBoostingRegressor", "HistGradientBoostingClassifier", "HistGradientBoostingRegressor", "IsolationForest", "RandomForestClassifier", "RandomForestRegressor", "RandomTreesEmbedding", "StackingClassifier", "StackingRegressor", "VotingClassifier", "VotingRegressor", "ConvergenceWarning", "DataConversionWarning", "DataDimensionalityWarning", "EfficiencyWarning", "EstimatorCheckFailedWarning", "FitFailedWarning", "InconsistentVersionWarning", "NotFittedError", "UndefinedMetricWarning", "enable_halving_search_cv", "enable_iterative_imputer", "DictVectorizer", "FeatureHasher", "PatchExtractor", "extract_patches_2d", "grid_to_graph", "img_to_graph", "reconstruct_from_patches_2d", "CountVectorizer", "HashingVectorizer", "TfidfTransformer", "TfidfVectorizer", "GenericUnivariateSelect", "RFE", "RFECV", "SelectFdr", "SelectFpr", "SelectFromModel", "SelectFwe", "SelectKBest", "SelectPercentile", "SelectorMixin", "SequentialFeatureSelector", "VarianceThreshold", "chi2", "f_classif", "f_regression", "mutual_info_classif", "mutual_info_regression", "r_regression", "FrozenEstimator", "GaussianProcessClassifier", "GaussianProcessRegressor", "CompoundKernel", "ConstantKernel", "DotProduct", "ExpSineSquared", "Exponentiation", "Hyperparameter", "Kernel", "Matern", "PairwiseKernel", "Product", "RBF", "RationalQuadratic", "Sum", "WhiteKernel", "get_config", "IterativeImputer", "KNNImputer", "MissingIndicator", "SimpleImputer", "DecisionBoundaryDisplay", "PartialDependenceDisplay", "partial_dependence", "permutation_importance", "IsotonicRegression", "check_increasing", "isotonic_regression", "AdditiveChi2Sampler", "Nystroem", "PolynomialCountSketch", "RBFSampler", "SkewedChi2Sampler", "KernelRidge", "ARDRegression", "BayesianRidge", "ElasticNet", "ElasticNetCV", "GammaRegressor", "HuberRegressor", "Lars", "LarsCV", "Lasso", "LassoCV", "LassoLars", "LassoLarsCV", "LassoLarsIC", "LinearRegression", "LogisticRegression", "LogisticRegressionCV", "MultiTaskElasticNet", "MultiTaskElasticNetCV", "MultiTaskLasso", "MultiTaskLassoCV", "OrthogonalMatchingPursuit", "OrthogonalMatchingPursuitCV", "PassiveAggressiveClassifier", "PassiveAggressiveRegressor", "Perceptron", "PoissonRegressor", "QuantileRegressor", "RANSACRegressor", "Ridge", "RidgeCV", "RidgeClassifier", "RidgeClassifierCV", "SGDClassifier", "SGDOneClassSVM", "SGDRegressor", "TheilSenRegressor", "TweedieRegressor", "enet_path", "lars_path", "lars_path_gram", "lasso_path", "orthogonal_mp", "orthogonal_mp_gram", "ridge_regression", "Isomap", "LocallyLinearEmbedding", "MDS", "SpectralEmbedding", "TSNE", "locally_linear_embedding", "smacof", "spectral_embedding", "trustworthiness", "ConfusionMatrixDisplay", "DetCurveDisplay", "DistanceMetric", "PrecisionRecallDisplay", "PredictionErrorDisplay", "RocCurveDisplay", "accuracy_score", "adjusted_mutual_info_score", "adjusted_rand_score", "auc", "average_precision_score", "balanced_accuracy_score", "brier_score_loss", "calinski_harabasz_score", "check_scoring", "class_likelihood_ratios", "classification_report", "contingency_matrix", "pair_confusion_matrix", "cohen_kappa_score", "completeness_score", "confusion_matrix", "consensus_score", "coverage_error", "d2_absolute_error_score", "d2_log_loss_score", "d2_pinball_score", "d2_tweedie_score", "davies_bouldin_score", "dcg_score", "det_curve", "explained_variance_score", "f1_score", "fbeta_score", "fowlkes_mallows_score", "get_scorer", "get_scorer_names", "hamming_loss", "hinge_loss", "homogeneity_completeness_v_measure", "homogeneity_score", "jaccard_score", "label_ranking_average_precision_score", "label_ranking_loss", "log_loss", "make_scorer", "matthews_corrcoef", "max_error", "mean_absolute_error", "mean_absolute_percentage_error", "mean_gamma_deviance", "mean_pinball_loss", "mean_poisson_deviance", "mean_squared_error", "mean_squared_log_error", "mean_tweedie_deviance", "median_absolute_error", "multilabel_confusion_matrix", "mutual_info_score", "ndcg_score", "normalized_mutual_info_score", "additive_chi2_kernel", "chi2_kernel", "cosine_distances", "cosine_similarity", "distance_metrics", "euclidean_distances", "haversine_distances", "kernel_metrics", "laplacian_kernel", "linear_kernel", "manhattan_distances", "nan_euclidean_distances", "paired_cosine_distances", "paired_distances", "paired_euclidean_distances", "paired_manhattan_distances", "pairwise_kernels", "polynomial_kernel", "rbf_kernel", "sigmoid_kernel", "pairwise_distances", "pairwise_distances_argmin", "pairwise_distances_argmin_min", "pairwise_distances_chunked", "precision_recall_curve", "precision_recall_fscore_support", "precision_score", "r2_score", "rand_score", "recall_score", "roc_auc_score", "roc_curve", "root_mean_squared_error", "root_mean_squared_log_error", "silhouette_samples", "silhouette_score", "top_k_accuracy_score", "v_measure_score", "zero_one_loss", "BayesianGaussianMixture", "GaussianMixture", "FixedThresholdClassifier", "GridSearchCV", "GroupKFold", "GroupShuffleSplit", "HalvingGridSearchCV", "HalvingRandomSearchCV", "KFold", "LearningCurveDisplay", "LeaveOneGroupOut", "LeaveOneOut", "LeavePGroupsOut", "LeavePOut", "ParameterGrid", "ParameterSampler", "PredefinedSplit", "RandomizedSearchCV", "RepeatedKFold", "RepeatedStratifiedKFold", "ShuffleSplit", "StratifiedGroupKFold", "StratifiedKFold", "StratifiedShuffleSplit", "TimeSeriesSplit", "TunedThresholdClassifierCV", "ValidationCurveDisplay", "check_cv", "cross_val_predict", "cross_val_score", "cross_validate", "learning_curve", "permutation_test_score", "train_test_split", "validation_curve", "OneVsOneClassifier", "OneVsRestClassifier", "OutputCodeClassifier", "ClassifierChain", "MultiOutputClassifier", "MultiOutputRegressor", "RegressorChain", "BernoulliNB", "CategoricalNB", "ComplementNB", "GaussianNB", "MultinomialNB", "BallTree", "KDTree", "KNeighborsClassifier", "KNeighborsRegressor", "KNeighborsTransformer", "KernelDensity", "LocalOutlierFactor", "NearestCentroid", "NearestNeighbors", "NeighborhoodComponentsAnalysis", "RadiusNeighborsClassifier", "RadiusNeighborsRegressor", "RadiusNeighborsTransformer", "kneighbors_graph", "radius_neighbors_graph", "sort_graph_by_row_values", "BernoulliRBM", "MLPClassifier", "MLPRegressor", "FeatureUnion", "Pipeline", "make_pipeline", "make_union", "Binarizer", "FunctionTransformer", "KBinsDiscretizer", "KernelCenterer", "LabelBinarizer", "LabelEncoder", "MaxAbsScaler", "MinMaxScaler", "MultiLabelBinarizer", "Normalizer", "OneHotEncoder", "OrdinalEncoder", "PolynomialFeatures", "PowerTransformer", "QuantileTransformer", "RobustScaler", "SplineTransformer", "StandardScaler", "TargetEncoder", "add_dummy_feature", "binarize", "label_binarize", "maxabs_scale", "minmax_scale", "normalize", "power_transform", "quantile_transform", "robust_scale", "scale", "GaussianRandomProjection", "SparseRandomProjection", "johnson_lindenstrauss_min_dim", "LabelPropagation", "LabelSpreading", "SelfTrainingClassifier", "set_config", "show_versions", "LinearSVC", "LinearSVR", "NuSVC", "NuSVR", "OneClassSVM", "SVC", "SVR", "l1_min_c", "DecisionTreeClassifier", "DecisionTreeRegressor", "ExtraTreeClassifier", "ExtraTreeRegressor", "export_graphviz", "export_text", "plot_tree", "Bunch", "ClassifierTags", "InputTags", "RegressorTags", "Tags", "TargetTags", "TransformerTags", "_safe_indexing", "min_pos", "as_float_array", "assert_all_finite", "check_X_y", "check_array", "check_consistent_length", "check_random_state", "check_scalar", "compute_class_weight", "compute_sample_weight", "deprecated", "all_displays", "all_estimators", "all_functions", "check_estimator", "estimator_checks_generator", "parametrize_with_checks", "estimator_html_repr", "density", "fast_logdet", "randomized_range_finder", "randomized_svd", "safe_sparse_dot", "weighted_mode", "gen_batches", "gen_even_slices", "get_tags", "single_source_shortest_path_length", "indexable", "MetadataRequest", "MetadataRouter", "MethodMapping", "get_routing_for_object", "process_routing", "available_if", "is_multilabel", "type_of_target", "unique_labels", "murmurhash3_32", "Parallel", "delayed", "parallel_backend", "sample_without_replacement", "register_parallel_backend", "resample", "safe_mask", "safe_sqr", "shuffle", "incr_mean_variance_axis", "inplace_column_scale", "inplace_csr_column_scale", "inplace_row_scale", "inplace_swap_column", "inplace_swap_row", "mean_variance_axis", "inplace_csr_row_normalize_l1", "inplace_csr_row_normalize_l2", "check_is_fitted", "check_memory", "check_symmetric", "column_or_1d", "has_fit_parameter", "validate_data", "<span class=\"section-number\">3.2. </span>Tuning the hyper-parameters of an estimator", "<span class=\"section-number\">6.4. </span>Imputation of missing values", "<span class=\"section-number\">1.15. </span>Isotonic regression", "<span class=\"section-number\">6.7. </span>Kernel Approximation", "<span class=\"section-number\">1.3. </span>Kernel ridge regression", "<span class=\"section-number\">1.2. </span>Linear and Quadratic Discriminant Analysis", "<span class=\"section-number\">3.5. </span>Validation curves: plotting scores to evaluate models", "<span class=\"section-number\">1.1. </span>Linear Models", "<span class=\"section-number\">2.2. </span>Manifold learning", "<span class=\"section-number\">6.8. </span>Pairwise metrics, Affinities and Kernels", "<span class=\"section-number\">2.1. </span>Gaussian mixture models", "<span class=\"section-number\">3.4. </span>Metrics and scoring: quantifying the quality of predictions", "<span class=\"section-number\">1.12. </span>Multiclass and multioutput algorithms", "<span class=\"section-number\">1.9. </span>Naive Bayes", "<span class=\"section-number\">1.6. </span>Nearest Neighbors", "<span class=\"section-number\">1.17. </span>Neural network models (supervised)", "<span class=\"section-number\">2.9. </span>Neural network models (unsupervised)", "<span class=\"section-number\">2.7. </span>Novelty and Outlier Detection", "<span class=\"section-number\">4.1. </span>Partial Dependence and Individual Conditional Expectation plots", "<span class=\"section-number\">4.2. </span>Permutation feature importance", "&lt;no title&gt;", "<span class=\"section-number\">6.3. </span>Preprocessing data", "<span class=\"section-number\">6.9. </span>Transforming the prediction target (<code class=\"docutils literal notranslate\"><span class=\"pre\">y</span></code>)", "<span class=\"section-number\">6.6. </span>Random Projection", "<span class=\"section-number\">1.14. </span>Semi-supervised learning", "<span class=\"section-number\">1.5. </span>Stochastic Gradient Descent", "<span class=\"section-number\">1.4. </span>Support Vector Machines", "<span class=\"section-number\">1.10. </span>Decision Trees", "<span class=\"section-number\">6.5. </span>Unsupervised dimensionality reduction", "<span class=\"section-number\">13. </span>External Resources, Videos and Talks", "Related Projects", "Roadmap", "Computation times", "<span class=\"section-number\">1. </span>Supervised learning", "Support", "Testimonials", "<span class=\"section-number\">2. </span>Unsupervised learning", "User Guide", "<span class=\"section-number\">5. </span>Visualizations", "Release History", "&lt;no title&gt;", "Older Versions", "Version 0.13", "Version 0.14", "Version 0.15", "Version 0.16", "Version 0.17", "Version 0.18", "Version 0.19", "Version 0.20", "Version 0.21", "Version 0.22", "Version 0.23", "Version 0.24", "Version 1.0", "Version 1.1", "Version 1.2", "Version 1.3", "Version 1.4", "Version 1.5", "Version 1.6"], "titleterms": {"": [187, 313, 315, 378, 387, 414, 1004], "0": [181, 317, 318, 319, 320, 1020, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "1": [186, 320, 321, 322, 323, 324, 325, 326, 387, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "10": [101, 1034], "11": 1034, "12": 1034, "13": [326, 1035, 1053], "14": 1036, "15": 1037, "16": 1038, "17": 1039, "18": 1040, "19": 1041, "1d": [293, 356], "2": [322, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "20": [103, 350, 370, 1042], "2018": 1024, "20newgroup": 225, "21": 1043, "22": [317, 1044], "23": [318, 1045], "24": [319, 1046], "2d": [52, 86, 123, 129, 186], "3": [64, 323, 326, 1042, 1043, 1048, 1050, 1053], "3d": 186, "4": [324, 1034, 1042, 1051], "5": [325, 1020, 1034, 1052], "6": [326, 1034, 1053], "7": 1034, "8": 1034, "9": 1034, "99": 370, "A": [53, 59, 60, 82, 92, 97, 210, 320, 374, 381, 411], "And": [234, 390], "In": 275, "NOT": 380, "One": [203, 224, 277, 320, 338, 411, 1010, 1018], "The": [0, 117, 184, 185, 210, 235, 241, 262, 266, 275, 282, 285, 370, 379, 383, 411, 415, 1003, 1004, 1016], "Will": 387, "With": 248, "__sklearn_is_fitted__": 133, "_safe_index": 929, "abil": 175, "ablat": 247, "about": [0, 185, 387], "absolut": 1004, "access": 408, "accuraci": [187, 242, 350, 354, 1004], "accuracy_scor": 706, "across": 358, "action": 375, "activ": [0, 329], "ad": 407, "adaboost": [135, 136, 137, 414], "adaboostclassifi": [135, 554], "adaboostregressor": 555, "adapt": 1004, "add": [324, 387], "add_dummy_featur": 889, "addit": [414, 996], "additive_chi2_kernel": 761, "additivechi2sampl": 641, "address": 262, "adjac": 56, "adjust": 73, "adjusted_mutual_info_scor": 707, "adjusted_rand_scor": 708, "advanc": 248, "advantag": 407, "affin": [52, 74, 407, 1002], "affinity_propag": 454, "affinitypropag": 440, "agglom": [75, 76, 86], "agglomer": [85, 88, 1021], "agglomerativeclust": 441, "aggress": [993, 1000], "aic": [200, 1000], "algebra": [362, 384], "algorithm": [58, 59, 60, 74, 80, 83, 89, 97, 98, 99, 230, 237, 381, 387, 998, 1000, 1005, 1007, 1008, 1012, 1020], "alias": 383, "align": 1001, "all": [268, 277, 321, 393, 1049, 1050, 1051], "all_displai": 941, "all_estim": 942, "all_funct": 943, "alloc": [55, 412], "almost": 326, "alpha": 354, "alpin": 393, "alreadi": 56, "altern": 993, "am": [144, 247], "amount": 280, "an": [82, 93, 133, 181, 194, 200, 298, 317, 321, 326, 383, 387, 415, 993, 1010], "anaconda": 393, "analysi": [44, 65, 70, 71, 94, 121, 127, 128, 131, 135, 147, 186, 196, 253, 270, 271, 278, 296, 297, 298, 350, 410, 412, 998, 1007, 1021], "analyz": [53, 993], "angl": [200, 1000], "ani": [326, 387], "anomali": 237, "anova": [162, 342], "api": [2, 42, 133, 250, 251, 317, 320, 322, 326, 363, 377, 382, 389, 398, 403, 1004, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1044, 1051, 1052, 1053], "applic": 415, "approach": [110, 200, 268], "approxim": [182, 189, 190, 242, 288, 319, 409, 996], "ar": [101, 262, 320, 387], "arch": 393, "architectur": 1024, "ard": [196, 1000], "ardregress": 647, "arff": 369, "argument": [320, 1045, 1047], "arm64": 383, "arrai": [42, 322, 325, 326, 357, 384, 403, 1051, 1052, 1053], "artifact": 401, "artwork": 0, "as_float_arrai": 931, "ask": 387, "assert": 377, "assert_all_finit": 932, "assign": 407, "assumpt": 91, "atom": [50, 362], "attent": 387, "attribut": [377, 389, 403, 993], "auc": [317, 709], "author": [379, 1034], "autom": 375, "automat": [196, 388, 1000], "auxiliari": 42, "avail": [321, 1031], "available_if": 964, "averag": [275, 277, 407, 414, 1004], "average_precision_scor": 710, "avoid": [358, 408], "aweb": 1028, "ax": 382, "b": 116, "backend": 383, "backward": 375, "bag": [138, 146, 350, 414, 415, 993], "baggingclassifi": 556, "baggingregressor": 557, "balanc": [267, 1004], "balanced_accuracy_scor": 711, "ball": 1007, "balltre": [847, 1007], "base": [4, 42, 43, 44, 116, 142, 165, 182, 196, 243, 317, 318, 320, 322, 323, 324, 375, 377, 407, 411, 414, 416, 1000, 1012, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "baseestim": [377, 421], "baselin": [190, 210], "basi": [45, 178, 417, 996, 1000], "basic": [176, 228, 388, 409, 417], "batch": [407, 412], "bay": [62, 63, 1006], "bayesian": [26, 192, 193, 253, 268, 1000, 1003], "bayesiangaussianmixtur": 800, "bayesianridg": 648, "befor": 181, "behavior": 263, "behind": 0, "being": 185, "benchmark": [47, 50, 92, 350], "bernoulli": [1006, 1009], "bernoullinb": 842, "bernoullirbm": 863, "best": [258, 376, 387], "bestofmedia": 1028, "beta": 412, "betawork": 1028, "between": [98, 279, 1000], "bia": 138, "bic": [200, 258, 1000], "biclust": [28, 57, 58, 59, 182, 371, 404], "biclustermixin": 422, "bigger": 364, "bike": [44, 53, 186], "bin": 1014, "binar": [870, 890, 1014, 1015], "binari": [275, 287, 325, 1000, 1004], "birch": [78, 407, 442], "birchbox": 1028, "bisect": [79, 407], "bisectingkmean": [321, 443], "blind": 122, "bnp": 1028, "boil": 380, "boltzmann": [306, 1009], "book": 1028, "boost": [44, 141, 144, 145, 146, 147, 148, 149, 150, 186, 210, 317, 318, 320, 322, 323, 414], "bouldin": 407, "bound": 241, "boundari": [151, 156, 203, 291, 333, 343], "branch": 383, "break": 347, "breast": [188, 372], "brier": 1004, "brier_score_loss": 712, "brute": [993, 1007], "bug": [374, 375, 1027, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "build": [174, 181, 373, 375, 383, 408, 1052, 1053], "bulk": [50, 362], "bunch": [387, 922], "busi": 262, "c": 381, "c4": 1020, "c5": 1020, "cach": [105, 290, 408], "calcul": [145, 157], "calibr": [5, 61, 62, 63, 64, 65, 147, 167, 182, 210, 405, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "calibratedclassifiercv": 437, "calibration_curv": 439, "calibrationdisplai": 438, "california": 370, "calinski": 407, "calinski_harabasz_scor": 713, "call": [358, 374], "callabl": 1004, "callgrind": 381, "can": 387, "cancer": [188, 372], "candid": [280, 993], "canon": [116, 410], "card": 262, "cardif": 1028, "cardiotocographi": 247, "cart": 1020, "case": [346, 1000, 1004], "categor": [144, 314, 319, 324, 387, 414, 1006, 1014], "categori": [44, 321, 323, 1014], "categoricalnb": 843, "caus": 393, "causal": [184, 185], "cautiou": 185, "cca": [116, 482], "center": [121, 1014], "central": 56, "centroid": [299, 1007], "chain": [106, 249, 287, 388, 408], "chanc": 73, "chang": [244, 375, 390, 1028, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "changelog": [1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "characterist": [277, 278, 1004], "check": [185, 270, 317, 383, 403, 1042, 1043, 1044], "check_arrai": 934, "check_consistent_length": 935, "check_cv": 827, "check_estim": 944, "check_increas": 639, "check_is_fit": [377, 987], "check_memori": 988, "check_random_st": 936, "check_scalar": 937, "check_scor": 714, "check_symmetr": 989, "check_x_i": 933, "checker": 42, "checklist": 375, "chi": [996, 1002], "chi2": 606, "chi2_kernel": 762, "choic": 412, "choleski": 326, "choos": [47, 395], "ci": [375, 383], "circl": 100, "cite": 0, "claim": [210, 228], "class": [42, 64, 73, 135, 137, 157, 219, 224, 271, 275, 277, 320, 338, 341, 389, 406, 411, 414, 415, 1004, 1007, 1010, 1018, 1019, 1034, 1035], "class_likelihood_ratio": 715, "classic": 26, "classif": [28, 48, 64, 66, 67, 69, 70, 103, 170, 171, 172, 173, 177, 182, 226, 245, 271, 274, 275, 278, 287, 291, 299, 306, 317, 327, 332, 343, 350, 371, 417, 1000, 1004, 1005, 1007, 1008, 1018, 1019, 1020], "classifi": [26, 42, 62, 63, 65, 68, 133, 158, 167, 203, 249, 265, 282, 287, 291, 317, 325, 333, 336, 339, 350, 357, 405, 414, 998, 1007], "classification_report": 716, "classifierchain": [838, 1005], "classifiermixin": 424, "classifiertag": 923, "classnameprefixfeaturesoutmixin": 423, "clear": 1044, "clear_data_hom": 486, "clone": [377, 432], "close": [374, 383], "cloud": 123, "cloudpickl": 401, "cluster": [6, 28, 52, 58, 60, 72, 73, 74, 75, 76, 77, 80, 82, 83, 86, 89, 90, 92, 94, 97, 98, 99, 100, 101, 121, 182, 321, 323, 351, 371, 404, 407, 412, 1004, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "cluster_optics_dbscan": 455, "cluster_optics_xi": 456, "clustermixin": 425, "co": [58, 60, 404], "co2": 174, "code": [0, 47, 121, 130, 375, 377, 380, 381, 383, 412, 1038, 1039, 1040, 1041, 1042], "coeffici": [165, 185, 192, 214, 215, 281, 407, 1004], "cohen": 1004, "cohen_kappa_scor": 719, "coin": [81, 82], "column": [103, 104, 249], "column_or_1d": 990, "columntransform": [325, 408, 464], "com": 1028, "combin": [155, 238], "comment": 380, "commit": 375, "committe": 390, "common": [185, 358, 389, 403, 415], "commun": [0, 375], "compact": 239, "compar": [64, 78, 80, 96, 110, 116, 141, 154, 161, 190, 192, 197, 212, 217, 237, 243, 268, 276, 296, 304, 308, 314, 387], "comparison": [65, 68, 71, 79, 98, 112, 129, 144, 145, 160, 169, 230, 231, 243, 268, 279, 281, 285, 352, 1000], "compat": [42, 317, 375, 403], "compil": [373, 381], "complement": 1006, "complementnb": 844, "complet": [246, 326, 407], "completeness_scor": 720, "complex": [47, 239, 249, 267, 270, 330, 354, 362, 1000, 1007, 1008, 1018, 1019, 1020], "compon": [117, 121, 127, 296, 297, 298, 412, 1007, 1021], "compos": [7, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "composit": [102, 182, 408, 993], "compoundkernel": 615, "compress": [54, 87, 362], "comput": [42, 56, 74, 82, 83, 97, 98, 101, 110, 141, 204, 215, 361, 362, 408, 411, 1011, 1025], "computation": 364, "compute_class_weight": 938, "compute_optics_graph": 457, "compute_sample_weight": 939, "concaten": 107, "concentr": 253, "concept": [389, 1000], "conclud": [44, 234], "conclus": [47, 53, 169, 196, 200, 207, 285, 291, 315, 343], "conda": 373, "condit": [186, 319, 1011], "confid": 147, "config_context": 468, "configur": [362, 363], "conflict": 375, "confus": [261, 407, 1004], "confusion_matrix": 721, "confusionmatrixdisplai": [238, 700], "connect": [407, 415], "consensu": 1000, "consensus_scor": 722, "consider": 262, "constant": [210, 262, 994], "constantkernel": 616, "constraint": [150, 152, 322, 324, 407, 414], "construct": 243, "consum": 244, "content": 387, "conting": 407, "contingency_matrix": 717, "continu": [309, 375], "contribut": [375, 387], "contributor": [0, 374, 375, 390, 1038, 1039, 1040, 1041, 1042], "control": [358, 414, 1008], "convent": 376, "converg": 135, "convergencewarn": 572, "convex": 220, "cookbook": 178, "coordin": 200, "core": [0, 48, 364, 374, 381, 387, 390, 1006], "corpu": 415, "correl": [185, 188, 410, 1004, 1012], "cosin": 1002, "cosine_dist": 763, "cosine_similar": 764, "cost": [262, 354, 1020], "countvector": 590, "covari": [8, 71, 109, 110, 112, 113, 114, 182, 255, 409, 998, 1042, 1046, 1047, 1048, 1050, 1051, 1053], "coverag": [375, 383, 1004], "coverage_error": 723, "covertyp": [247, 370], "cpython": [326, 1053], "craft": 380, "crash": 387, "creat": [103, 128, 135, 214, 238, 275, 315, 342, 343, 356, 387, 1004], "credit": 262, "criteria": [198, 387, 1000, 1020], "criterion": [200, 319, 993, 1018], "cross": [44, 115, 116, 164, 182, 200, 262, 263, 264, 266, 267, 271, 273, 278, 315, 342, 358, 406, 410, 411, 993, 1000], "cross_decomposit": [9, 1044, 1046, 1048, 1050, 1052, 1053], "cross_val_predict": 828, "cross_val_scor": [272, 829], "cross_valid": [411, 830], "cubic": 193, "cumul": 1004, "curat": 374, "curv": [63, 65, 193, 243, 250, 259, 265, 270, 275, 277, 405, 999], "custom": [133, 266, 325, 335, 415, 1004, 1014, 1019], "cut": [262, 282], "cv": [263, 358], "cv_results_": 993, "cython": [376, 381, 383], "d": [411, 1007], "d2_absolute_error_scor": 724, "d2_log_loss_scor": 725, "d2_pinball_scor": 726, "d2_tweedie_scor": 727, "data": [44, 47, 49, 52, 56, 59, 62, 64, 71, 74, 82, 83, 84, 89, 91, 92, 97, 98, 100, 101, 103, 108, 110, 112, 114, 116, 117, 122, 123, 126, 128, 136, 142, 145, 148, 150, 151, 155, 161, 164, 165, 175, 177, 181, 184, 187, 188, 190, 193, 197, 204, 205, 207, 214, 238, 243, 250, 258, 263, 265, 269, 274, 275, 277, 278, 281, 291, 295, 300, 306, 308, 312, 313, 314, 324, 326, 328, 339, 342, 345, 346, 351, 352, 358, 362, 364, 380, 387, 389, 407, 408, 411, 416, 1014, 1018, 1028], "dataconversionwarn": 573, "datadimensionalitywarn": 574, "datafram": [317, 324, 387, 1051], "dataiku": 1028, "datarobot": 1028, "dataset": [10, 43, 44, 45, 48, 53, 62, 63, 69, 80, 92, 96, 103, 116, 118, 119, 121, 127, 129, 135, 141, 143, 144, 155, 169, 171, 173, 174, 176, 178, 182, 184, 185, 186, 192, 195, 196, 200, 203, 210, 212, 219, 228, 230, 231, 237, 242, 247, 248, 262, 266, 274, 275, 282, 285, 287, 315, 326, 332, 333, 336, 343, 350, 355, 356, 367, 368, 369, 370, 371, 372, 380, 387, 417, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "davi": 407, "davies_bouldin_scor": 728, "dbscan": [83, 407, 418, 444], "dbscan_clust": 89, "dcg_score": 729, "deal": [42, 387], "debian": 393, "debug": 383, "debugg": 381, "decis": [135, 136, 143, 151, 156, 167, 182, 203, 242, 262, 282, 291, 323, 325, 333, 343, 353, 354, 355, 356, 357, 387, 390, 406, 1020], "decisionboundarydisplai": 634, "decisiontre": 136, "decisiontreeclassifi": 915, "decisiontreeregressor": [319, 916], "decod": 415, "decompos": 412, "decomposit": [11, 115, 116, 120, 121, 138, 182, 371, 410, 412, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "decreas": [142, 187], "deep": 387, "default": [244, 295, 375], "defin": [73, 82, 92, 101, 230, 263, 265, 266, 352, 1004], "definit": [228, 281, 306, 1011, 1044], "deflat": 116, "delai": 970, "demand": [44, 53], "demo": [59, 60, 74, 82, 83, 89, 92, 97, 99], "demonstr": [91, 272, 311, 328], "dendrogram": 77, "denois": [45, 124], "dens": 197, "densiti": [257, 292, 293, 301, 323, 413, 948, 1019], "densitymixin": 426, "depend": [186, 244, 248, 373, 1011, 1034, 1047, 1048], "deploi": 387, "deploy": 393, "deprec": [1, 244, 375, 940, 1044], "descent": [200, 218, 224, 1000, 1018], "descript": 184, "design": 174, "det": [265, 1004], "det_curv": 730, "detail": [996, 1018, 1019], "detcurvedisplai": 701, "detect": [49, 237, 247, 265, 294, 295, 1004, 1010, 1019], "determin": [113, 196, 409, 1000, 1004], "develop": [132, 133, 182, 244, 326, 373, 376, 377, 378, 382, 383, 384, 993, 1030, 1050], "devianc": [148, 1004], "devic": 403, "diabet": [248, 282, 372], "diagnost": 372, "dict": 415, "dict_learn": 546, "dict_learning_onlin": 547, "dictionari": [84, 121, 124, 130, 412], "dictionarylearn": 532, "dictvector": [352, 583], "did": 387, "diff": 383, "differ": [76, 80, 96, 110, 178, 186, 308, 311, 314, 336, 343, 377, 387, 398, 407, 1000], "digit": [69, 86, 92, 231, 306, 328, 329, 372], "dimension": [105, 230, 233, 249, 297, 313, 351, 998, 1001, 1007, 1021], "direct": 227, "dirichlet": [55, 412, 1003], "discount": 1004, "discov": 42, "discret": [151, 177, 309, 310, 1014], "discrimin": [70, 71, 998], "discriminant_analysi": [12, 1042, 1043, 1046, 1048, 1049, 1050, 1053], "discuss": 374, "disk": 56, "dispatch": 385, "displai": [124, 215, 238, 239, 249, 322, 323, 324, 383, 1031, 1050], "distanc": [28, 112, 325], "distance_metr": 765, "distancemetr": 702, "distort": 124, "distribut": [51, 228, 230, 301, 312, 370, 393, 1001, 1014], "diverg": 412, "divid": 321, "do": [380, 387], "document": [0, 48, 58, 182, 319, 320, 349, 350, 351, 375, 1023, 1024, 1027, 1034, 1037, 1038, 1041, 1042], "doe": 387, "domain": 1023, "donat": 0, "dot": [178, 417], "dotproduct": 617, "down": 380, "download": [56, 155, 181, 326, 369], "drawback": 407, "drop": [144, 1053], "dtype": 324, "dummi": [13, 1004, 1042, 1043, 1044, 1047, 1048, 1052], "dummyclassifi": 552, "dummyregressor": 553, "dump_svmlight_fil": 487, "dure": 358, "d\u00b2": 1004, "each": [275, 280, 350], "earli": [145, 150, 218], "earlier": 1034, "eas": 376, "effect": [108, 150, 184, 235, 281, 308, 313, 331, 354], "effici": [322, 324, 384], "efficiencywarn": 575, "eigenfac": [46, 121], "eigenmap": 1001, "eigenvector": 56, "elast": [194, 199, 1000], "elasticnet": [196, 318, 649], "elasticnetcv": 650, "element": 389, "elimin": [163, 164, 416, 993], "ellipsoid": [71, 254], "ellipt": 1010, "ellipticenvelop": 469, "embed": [52, 86, 230, 231, 241, 298, 414, 1001], "emeritu": 0, "empir": [95, 113, 241, 409], "empirical_covari": 477, "empiricalcovari": 470, "enable_halving_search_cv": 581, "enable_iterative_imput": 582, "encod": [87, 144, 314, 315, 323, 1014, 1015], "enet_path": 684, "enforc": [1045, 1047], "engin": [44, 53, 187, 1023, 1028], "enhanc": [322, 390, 1023, 1037, 1038, 1039, 1040, 1041], "enrich": 324, "ensembl": [14, 134, 140, 143, 182, 414, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "enthought": 393, "entir": 387, "entri": 1017, "envelop": 1010, "environ": [363, 383, 401], "equival": 268, "error": [135, 139, 145, 147, 192, 214, 265, 281, 383, 393, 1000, 1004], "establish": [98, 190], "estim": [42, 102, 109, 110, 111, 112, 113, 114, 132, 133, 138, 144, 146, 154, 166, 175, 181, 182, 192, 213, 216, 239, 244, 246, 247, 257, 276, 285, 292, 293, 301, 317, 318, 319, 322, 324, 326, 358, 377, 387, 388, 389, 395, 403, 408, 409, 411, 413, 414, 993, 994, 998, 1000, 1004, 1019, 1023, 1035, 1042, 1043, 1044], "estimate_bandwidth": 458, "estimator_checks_gener": 945, "estimator_html_repr": 947, "estimatorcheckfailedwarn": 576, "euclidean_dist": 766, "evalu": [53, 73, 92, 95, 113, 207, 210, 247, 262, 269, 272, 281, 306, 314, 351, 388, 402, 404, 407, 411, 414, 993, 999, 1004], "evernot": 1028, "exact": 412, "exampl": [43, 46, 49, 87, 93, 108, 118, 133, 151, 167, 176, 182, 207, 214, 344, 347, 364, 380, 398, 403, 406, 415, 417, 421, 424, 427, 430, 431, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 460, 462, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 479, 482, 483, 484, 488, 489, 490, 491, 492, 493, 495, 496, 497, 499, 500, 501, 502, 503, 505, 511, 512, 513, 514, 515, 516, 520, 521, 522, 523, 524, 525, 526, 527, 528, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 583, 584, 586, 589, 590, 591, 592, 593, 595, 596, 599, 601, 602, 604, 606, 607, 608, 609, 610, 612, 613, 614, 616, 617, 618, 620, 621, 622, 625, 626, 628, 630, 631, 633, 634, 635, 636, 637, 638, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 655, 656, 658, 659, 660, 661, 662, 665, 667, 668, 669, 671, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 684, 685, 687, 691, 692, 693, 694, 695, 696, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 712, 715, 716, 720, 721, 722, 730, 732, 735, 737, 738, 740, 741, 744, 745, 748, 749, 751, 752, 753, 755, 756, 758, 760, 764, 781, 782, 785, 787, 788, 789, 790, 791, 792, 793, 795, 796, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 842, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 860, 863, 864, 865, 866, 867, 868, 871, 872, 874, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 891, 893, 896, 900, 901, 903, 904, 905, 907, 910, 911, 912, 913, 914, 915, 916, 921, 922, 926, 934, 936, 944, 946, 948, 955, 960, 961, 962, 963, 964, 977, 987, 992, 1034], "except": [15, 384, 1046, 1050], "execut": [358, 387], "exhaust": 993, "exist": 375, "exp": [178, 417], "expans": 192, "expect": [186, 319, 1011], "experi": [0, 73, 374], "experiment": [16, 322, 379, 403, 1050], "explain": 1004, "explained_variance_scor": 731, "explicit": 242, "explor": 44, "exponenti": 619, "export": [41, 387], "export_graphviz": 919, "export_text": 920, "expsinesquar": 618, "extend": 1000, "extens": [381, 393], "extern": [369, 1022, 1034, 1043], "extra": 326, "extract": [55, 107, 124, 228, 269, 351, 362, 364, 415], "extract_patches_2d": 586, "extrapol": 174, "extratreeclassifi": 917, "extratreeregressor": 918, "extratreesclassifi": 558, "extratreesregressor": 559, "extrem": [380, 414], "f": [160, 1004], "f1": 275, "f1_score": 732, "f_classif": 607, "f_regress": 608, "fa": [121, 128], "face": [46, 84, 121, 246, 370, 1028], "factor": [55, 121, 128, 131, 294, 295, 412, 1010], "factoranalysi": 533, "fail": 380, "failur": [184, 993], "fast_logdet": 949, "faster": [322, 414], "fastica": [121, 122, 123, 419, 534], "fbeta_scor": 733, "featur": [44, 53, 85, 88, 107, 126, 127, 140, 142, 144, 148, 150, 152, 153, 159, 161, 163, 164, 165, 182, 187, 188, 190, 192, 205, 228, 242, 248, 269, 306, 309, 310, 313, 314, 317, 319, 320, 342, 350, 351, 362, 364, 375, 379, 398, 408, 414, 415, 416, 994, 1012, 1014, 1021, 1037, 1038, 1039, 1040, 1041], "feature_extract": [17, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "feature_select": [18, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "featureagglomer": [407, 445], "featurehash": [352, 584], "featureunion": [408, 866], "fedora": 393, "fetch_20newsgroup": 488, "fetch_20newsgroups_vector": 489, "fetch_california_h": 490, "fetch_covtyp": 491, "fetch_fil": 492, "fetch_kddcup99": 493, "fetch_lfw_pair": 494, "fetch_lfw_peopl": 495, "fetch_olivetti_fac": 496, "fetch_openml": [322, 497], "fetch_rcv1": 498, "fetch_species_distribut": 499, "file": [56, 375, 383, 393, 415], "final": [91, 169], "find": 1007, "first": [49, 73], "fit": [30, 59, 64, 91, 122, 128, 142, 147, 148, 167, 174, 192, 193, 194, 205, 212, 216, 275, 287, 295, 300, 315, 345, 356, 358, 377, 388, 398, 403, 414, 1006, 1010], "fitfailedwarn": 577, "fix": [73, 1034, 1037, 1038, 1039, 1040, 1041, 1047], "fixedthresholdclassifi": [325, 802], "flag": 383, "flexibl": [320, 994], "float64": 403, "fold": [383, 411], "footprint": 87, "forc": [993, 1007], "forecast": [53, 174], "forest": [139, 141, 142, 154, 187, 188, 247, 250, 324, 370, 414, 1010], "forg": 373, "format": [369, 380, 387, 1005], "formul": [404, 414, 998, 1007, 1018, 1019, 1020], "four": 100, "fowlk": 407, "fowlkes_mallows_scor": 734, "framework": 1023, "free": [176, 326, 1053], "freebsd": 373, "freez": [326, 387], "french": 210, "frequenc": 228, "frequent": 387, "frequentist": 268, "frobeniu": 412, "from": [17, 52, 124, 165, 187, 314, 317, 326, 363, 369, 373, 387, 415, 1004, 1044], "frozen": [19, 166, 182, 1053], "frozenestim": [167, 326, 612], "fruit": 374, "fulli": 184, "function": [42, 50, 71, 178, 201, 214, 215, 220, 231, 263, 282, 319, 342, 352, 384, 411, 414, 417, 996, 1000, 1004, 1019, 1051], "functiontransform": 871, "fund": 0, "futur": 387, "futurewarn": 1044, "gain": [262, 1004], "galleri": [421, 424, 427, 430, 431, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 460, 462, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 479, 482, 483, 484, 488, 489, 490, 491, 492, 493, 495, 496, 497, 499, 500, 501, 502, 503, 505, 511, 512, 513, 514, 515, 516, 520, 521, 522, 523, 524, 525, 526, 527, 528, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 583, 584, 586, 589, 590, 591, 592, 593, 595, 596, 599, 601, 602, 604, 606, 607, 608, 609, 610, 612, 613, 614, 616, 617, 618, 620, 621, 622, 625, 626, 628, 630, 631, 633, 634, 635, 636, 637, 638, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 655, 656, 658, 659, 660, 661, 662, 665, 667, 668, 669, 671, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 684, 685, 687, 691, 692, 693, 694, 695, 696, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 712, 715, 716, 720, 721, 722, 730, 732, 735, 737, 738, 740, 741, 744, 745, 748, 749, 751, 752, 753, 755, 756, 758, 760, 764, 781, 782, 785, 787, 788, 789, 790, 791, 792, 793, 795, 796, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 842, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 860, 863, 864, 865, 866, 867, 868, 871, 872, 874, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 891, 893, 896, 900, 901, 903, 904, 905, 907, 910, 911, 912, 913, 914, 915, 916, 921, 922, 926, 934, 936, 944, 946, 948, 955, 960, 961, 962, 963, 964, 977, 987, 992], "gamma": [228, 323, 1004], "gammaregressor": 651, "gaussian": [62, 63, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 182, 252, 253, 254, 257, 258, 259, 308, 417, 1003, 1006, 1014, 1016], "gaussian_process": [20, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "gaussianmixtur": 801, "gaussiannb": 845, "gaussianprocessclassifi": 613, "gaussianprocessregressor": 614, "gaussianrandomproject": 899, "gdb": 381, "gen_batch": 954, "gen_even_slic": 955, "gener": [10, 26, 53, 59, 62, 71, 74, 82, 83, 89, 91, 97, 98, 100, 101, 110, 112, 114, 119, 122, 123, 124, 142, 151, 161, 164, 169, 175, 176, 178, 182, 191, 192, 193, 196, 203, 205, 210, 212, 243, 258, 265, 281, 295, 300, 306, 318, 328, 345, 346, 358, 371, 375, 389, 412, 414, 1000, 1014, 1024], "genericunivariateselect": 594, "german": 262, "get": [358, 383, 387, 388], "get_config": 629, "get_data_hom": 500, "get_feature_names_out": 321, "get_param": 377, "get_routing_for_object": 962, "get_scor": 735, "get_scorer_nam": 736, "get_tag": 956, "git": 375, "github": 375, "gitter": 1027, "glm": 26, "glossari": 389, "gmm": [255, 256], "goal": 1024, "good": [375, 380], "govern": [0, 390], "gpc": [170, 171, 172, 173, 417], "gperftool": 381, "gpr": [174, 175, 417], "gprof": 381, "gpu": 387, "gradient": [44, 141, 144, 145, 146, 147, 148, 149, 150, 186, 210, 218, 224, 317, 318, 320, 322, 323, 414, 1000, 1018], "gradientboostingclassifi": [414, 560], "gradientboostingregressor": [414, 561], "gram": 194, "graph": [42, 52, 317, 384, 387, 407, 415], "graphic": [387, 1009], "graphical_lasso": 478, "graphicallasso": 471, "graphicallassocv": 472, "greek": 81, "grid": [249, 266, 268, 276, 279, 993], "grid_to_graph": 587, "gridsearchcv": [105, 272, 803], "ground": [73, 192], "group": [321, 323, 411, 1028], "groupkfold": 804, "groupshufflesplit": 805, "grow": 73, "guid": [378, 1030], "guidelin": [375, 377], "halv": [279, 280, 319, 993], "halvinggridsearchcv": 806, "halvingrandomsearchcv": 807, "ham": 1004, "hamming_loss": 737, "hand": 69, "handl": [42, 188, 994], "handwritten": [92, 231, 372], "harabasz": 407, "hard": 414, "has_fit_paramet": 991, "hash": [153, 384, 415], "hashingvector": [351, 591], "haversine_dist": 767, "hdbscan": [89, 323, 407, 446], "help": [374, 387], "helper": [50, 178, 231, 384], "here": 357, "hessian": 1001, "heterogen": [103, 408], "hierarch": [77, 82, 96, 101, 323, 407], "hierarchi": 407, "higher": 363, "highlight": [182, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 1034, 1037, 1038, 1041, 1042], "hing": 1004, "hinge_loss": 738, "histgradientboost": [319, 324], "histgradientboostingclassifi": [414, 562], "histgradientboostingregressor": [321, 563], "histogram": [141, 150, 318, 320, 322, 413, 414], "histori": [0, 1032], "hmm": 387, "hoc": 282, "hole": 234, "home": 268, "homebrew": 373, "homogen": 407, "homogeneity_completeness_v_measur": 739, "homogeneity_scor": 740, "hot": 144, "hour": 53, "hourli": 184, "hous": [144, 247, 370], "how": [358, 375, 381, 387], "howaboutw": 1028, "html": [239, 377], "huber": 1000, "huberregressor": [195, 652], "hug": 1028, "hyper": [30, 147, 266, 319, 993], "hyperparamet": [89, 174, 175, 269, 276, 285, 620], "hyperplan": [203, 222, 340, 341], "i": [325, 357, 380, 387, 411, 1004, 1028], "ic": [186, 1011], "ica": [122, 412], "id3": 1020, "idf": 415, "illustr": [105, 173, 178, 298, 417], "imag": [17, 45, 82, 84, 87, 100, 124, 369, 387, 415], "img_to_graph": 588, "impact": [44, 95, 281, 1049, 1050, 1051, 1052, 1053], "implement": [133, 197, 387, 1007, 1018, 1019], "import": [142, 148, 165, 187, 188, 242, 285, 313, 317, 406, 414, 1012], "improv": [318, 319, 320, 321, 322, 324, 325, 326, 374, 375, 1037, 1038], "impur": [142, 187, 354, 1012], "imput": [21, 179, 180, 181, 182, 317, 325, 994, 1014, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "includ": 387, "inclus": 387, "incom": 184, "inconsist": 358, "inconsistentversionwarn": 578, "incr_mean_variance_axi": 978, "increment": [125, 364, 412], "incrementalpca": 535, "independ": [121, 412], "index": [407, 958], "indic": 263, "individu": [158, 186, 319, 1011], "induct": 90, "infer": 184, "influenc": [47, 50, 362], "infonea": 1028, "inform": [160, 181, 198, 200, 379, 407, 993, 1000], "infrastructur": 0, "infrequ": [321, 323, 1014], "initi": [93, 95, 256], "inplace_column_scal": 979, "inplace_csr_column_scal": 980, "inplace_csr_row_normalize_l1": 985, "inplace_csr_row_normalize_l2": 986, "inplace_row_scal": 981, "inplace_swap_column": 982, "inplace_swap_row": 983, "input": [42, 362, 377, 403, 407, 1014], "inputtag": 924, "inria": 1028, "inspect": [22, 182, 183, 392, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "instal": [373, 393], "instanc": [358, 364], "instanti": 377, "instead": 262, "instruct": 373, "insur": 228, "integr": 375, "intel": 393, "interact": [44, 186, 322, 414], "interfac": [28, 398], "intern": [315, 406], "internet": 52, "interoper": 1023, "interpol": 211, "interpret": [174, 185, 214, 247, 287, 412, 414], "interv": 147, "introduc": 251, "introduct": 1001, "introductori": 176, "invari": [89, 271], "invers": [114, 409, 1016], "io": 401, "iri": [127, 129, 143, 171, 219, 333, 336, 355, 372, 417], "is_classifi": 433, "is_cluster": 434, "is_multilabel": 965, "is_outlier_detector": 435, "is_regressor": 436, "iso": [172, 275], "isol": 1010, "isolationforest": [151, 564], "isomap": [230, 231, 691, 1001], "isoton": [23, 240, 405, 995, 1042, 1043, 1044, 1046, 1048, 1049], "isotonic_regress": 640, "isotonicregress": 638, "issu": [374, 375, 383], "iter": [181, 280, 411], "iterativeimput": [180, 630, 994], "j": 1028, "jaccard": 1004, "jaccard_scor": 741, "job": 387, "joblib": [363, 381, 401], "johnson": [241, 1016], "johnson_lindenstrauss_min_dim": 901, "joint": 205, "k": [79, 91, 92, 93, 95, 98, 101, 116, 291, 313, 351, 407, 411, 1004, 1007, 1014], "k_mean": 459, "kappa": 1004, "kbinsdiscret": [309, 311, 872], "kcachegrind": 381, "kddcup": 370, "kddcup99": 247, "kdtree": [848, 1007], "keep": 994, "kei": 401, "kernel": [20, 44, 45, 126, 169, 174, 175, 177, 178, 182, 189, 190, 242, 243, 292, 293, 301, 319, 335, 338, 343, 345, 412, 413, 417, 621, 996, 997, 1002, 1014, 1019], "kernel_approxim": [24, 1044, 1046, 1047, 1048, 1049, 1050], "kernel_metr": 768, "kernel_ridg": [25, 1051], "kernelcenter": 873, "kerneldens": 852, "kernelpca": [126, 536], "kernelridg": 646, "keyword": [320, 1045, 1047], "kfold": 808, "kmean": [94, 98, 318, 447], "kmeans_plusplu": 460, "kneighbors_graph": 860, "kneighborsclassifi": 849, "kneighborsregressor": 850, "kneighborstransform": 851, "knn": [181, 317], "knnimput": 631, "knowledg": 376, "known": [1042, 1043], "kpca": 412, "l": 193, "l1": [54, 196, 202, 204, 226, 346, 416], "l1_min_c": 914, "l2": [214, 346], "label": [42, 73, 275, 328, 329, 330, 370, 371, 407, 411, 414, 1004, 1015, 1017], "label_binar": 891, "label_ranking_average_precision_scor": 742, "label_ranking_loss": 743, "labelbinar": [874, 1015], "labelencod": 875, "labelpropag": 902, "labelspread": 903, "lag": 53, "laplacian": 1002, "laplacian_kernel": 769, "lar": [199, 653, 1000], "larg": 415, "lars_path": 685, "lars_path_gram": 686, "larscv": 654, "lasso": [54, 196, 197, 198, 199, 200, 205, 318, 655, 1000], "lasso_path": 687, "lassocv": 656, "lassolar": 657, "lassolars": 659, "lassolarscv": 658, "latenc": [50, 362], "latent": [55, 116, 412], "latentdirichletalloc": 537, "latest": 393, "layer": [186, 303, 1008], "lda": [71, 129, 412, 998], "leakag": 358, "learn": [0, 42, 45, 52, 84, 121, 124, 168, 182, 184, 185, 186, 190, 229, 230, 231, 232, 243, 244, 262, 263, 270, 298, 304, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 361, 362, 364, 371, 373, 375, 376, 377, 379, 380, 387, 390, 393, 412, 414, 999, 1001, 1009, 1017, 1023, 1024, 1026, 1028, 1029], "learner": [135, 414], "learning_curv": 831, "learningcurvedisplai": 809, "least": [117, 147, 200, 206, 207, 208, 1000], "leav": [354, 411, 1000], "leaveonegroupout": 810, "leaveoneout": 811, "leavepgroupsout": 812, "leavepout": 813, "ledoit": [70, 111, 409], "ledoit_wolf": 479, "ledoit_wolf_shrinkag": 480, "ledoitwolf": [110, 473], "lemma": 1016, "length": [151, 393], "lesson": [184, 185], "level": [174, 175, 363, 407, 414], "liabil": 210, "librari": [326, 362, 363], "libsvm": 369, "likelihood": [110, 192, 193, 271, 1004, 1009], "limit": [144, 169, 362, 393, 401, 415], "lindenstrauss": [241, 1016], "line": 172, "linear": [26, 44, 63, 70, 71, 147, 169, 182, 185, 191, 192, 207, 210, 213, 216, 230, 231, 242, 318, 338, 343, 345, 362, 384, 387, 998, 1000, 1001, 1002, 1014], "linear_kernel": 770, "linear_model": [26, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "lineardiscriminantanalysi": [322, 550], "linearregress": [212, 660], "linearsvc": [337, 907], "linearsvr": 908, "link": [362, 1004], "linkag": [96, 407], "linnerrud": 372, "linux": [373, 387, 393], "list": [73, 379, 1027], "loa": 174, "load": [45, 47, 56, 84, 92, 127, 141, 144, 148, 165, 187, 204, 207, 228, 231, 238, 242, 250, 269, 277, 278, 287, 291, 313, 314, 339, 342, 350, 351, 352, 368, 369, 380, 387, 415], "load_breast_canc": 501, "load_diabet": 502, "load_digit": 503, "load_fil": 504, "load_iri": 505, "load_linnerud": 506, "load_sample_imag": [507, 508], "load_svmlight_fil": [509, 510], "load_win": 511, "loader": 10, "local": [230, 231, 294, 295, 1001, 1010], "locally_linear_embed": 696, "locallylinearembed": 692, "localoutlierfactor": 853, "lock": [375, 383], "lof": [294, 295], "log": [192, 193, 1004], "log_loss": 744, "logarithm": 1004, "logist": [106, 201, 202, 203, 204, 225, 226, 1000], "logisticregress": [287, 326, 661], "logisticregressioncv": 662, "loo": 411, "look": [53, 243, 345], "loss": [150, 210, 220, 318, 321, 323, 414, 1004, 1051], "lot": 387, "love": 1028, "low": [407, 414, 416], "lower": 363, "lpo": 411, "lsa": 351, "mac": 393, "machin": [168, 182, 184, 185, 186, 306, 334, 383, 1009, 1019], "machinali": 1028, "maco": 373, "macport": 393, "macro": 277, "mahalanobi": 112, "mail": 1027, "main": [48, 210], "maintain": [0, 375, 379, 401], "major": [414, 1042, 1043], "make": [155, 158, 181, 375, 390], "make_biclust": 512, "make_blob": [380, 513], "make_checkerboard": 514, "make_circl": 515, "make_classif": [380, 516], "make_column_selector": 466, "make_column_transform": 467, "make_friedman1": 517, "make_friedman2": 518, "make_friedman3": 519, "make_gaussian_quantil": 520, "make_hastie_10_2": 521, "make_low_rank_matrix": 522, "make_moon": 523, "make_multilabel_classif": 524, "make_pipelin": 868, "make_regress": [380, 525], "make_s_curv": 526, "make_scor": [745, 1004], "make_sparse_coded_sign": 527, "make_sparse_spd_matrix": 528, "make_sparse_uncorrel": 529, "make_spd_matrix": 530, "make_swiss_rol": 531, "make_union": 869, "mallow": 407, "manag": [363, 393], "manhattan_dist": 771, "mani": [263, 322, 363, 387, 1051, 1052, 1053], "manifold": [27, 182, 229, 230, 231, 232, 371, 1001, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053], "manual": [262, 406], "map": [242, 312, 1014], "mar": 1028, "margin": [192, 193, 222, 340, 344], "mark": 994, "markdown": 380, "marker": 375, "market": 52, "match": [209, 1000], "matern": 622, "mathemat": [42, 404, 414, 996, 998, 1007, 1011, 1018, 1019, 1020], "matric": [42, 384, 1014], "matrix": [55, 56, 177, 194, 261, 407, 412, 1004], "matter": 185, "matthew": 1004, "matthews_corrcoef": 746, "mat\u00e9rn": [178, 417], "max": [110, 1004], "max_error": 747, "maxabs_scal": 892, "maxabsscal": [308, 876], "maximum": [222, 340, 1009], "md": [693, 1001], "mdi": 187, "mean": [79, 91, 92, 93, 95, 97, 98, 142, 181, 187, 214, 351, 407, 1004, 1014], "mean_absolute_error": 748, "mean_absolute_percentage_error": 749, "mean_gamma_devi": 750, "mean_pinball_loss": 751, "mean_poisson_devi": 752, "mean_shift": 461, "mean_squared_error": 753, "mean_squared_log_error": 754, "mean_tweedie_devi": 755, "mean_variance_axi": 984, "meanshift": [97, 448], "measur": [155, 271, 407, 1004], "media": 1027, "median": [1000, 1004], "median_absolute_error": 756, "member": 374, "memori": [87, 324, 362, 381, 383], "merg": 379, "meson": [383, 1052], "messag": [268, 375], "meta": [42, 154, 244, 285, 319, 403, 414], "metadata": [42, 244, 323, 324, 326, 350, 389, 398, 1051, 1052, 1053], "metadatarequest": 959, "metadatarout": 960, "metaestimatormixin": 427, "method": [96, 107, 116, 134, 169, 182, 230, 232, 256, 284, 286, 389, 401, 407, 996, 1010, 1011], "methodmap": 961, "metric": [28, 73, 76, 147, 262, 272, 403, 407, 411, 993, 1002, 1004, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "micro": [275, 277], "min_cluster_s": 89, "min_po": 930, "min_sampl": 89, "mincovdet": 474, "mini": [407, 412], "minibatchdictionarylearn": 538, "minibatchkmean": [78, 98, 121, 449], "minibatchnmf": [321, 539], "minibatchsparsepca": [121, 412, 540], "minim": [380, 1020, 1047, 1048], "minimum": [113, 409], "minmax_scal": 893, "minmaxscal": [308, 877], "misc": 1034, "miscellan": [26, 182, 236, 1042, 1043, 1044, 1045, 1046, 1047, 1050], "mislead": 1012, "miss": [150, 179, 180, 181, 182, 317, 323, 324, 326, 414, 994, 1014, 1020], "missingind": 632, "mix": 104, "mixin": 377, "mixtur": [29, 182, 252, 253, 254, 257, 258, 259, 1003, 1042, 1043, 1047, 1048, 1050, 1052], "mlp": 305, "mlpclassifi": [304, 864], "mlpregressor": 865, "mnist": [226, 305], "mode": [116, 362], "model": [26, 28, 30, 44, 47, 51, 53, 91, 108, 116, 122, 128, 141, 142, 144, 145, 148, 151, 164, 165, 169, 174, 182, 185, 186, 187, 190, 191, 192, 196, 198, 200, 205, 207, 210, 213, 228, 238, 243, 247, 248, 252, 254, 258, 259, 260, 262, 267, 268, 270, 275, 281, 287, 295, 300, 306, 313, 318, 320, 324, 343, 345, 350, 356, 362, 387, 388, 390, 401, 402, 411, 993, 999, 1000, 1003, 1004, 1006, 1008, 1009, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "model_select": [30, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "modifi": 1001, "modul": [1034, 1042, 1043, 1049, 1050, 1051, 1052, 1053], "mona": 174, "monitor": 375, "monoton": [150, 152, 324, 414], "more": [320, 387, 1008], "morgan": 1028, "most": 328, "motor": 210, "mp": 403, "multi": [26, 89, 135, 154, 186, 205, 219, 233, 246, 272, 275, 303, 356, 381, 1000, 1001, 1004, 1008, 1019, 1020], "multiclass": [31, 42, 182, 225, 277, 284, 285, 317, 326, 384, 405, 1004, 1005, 1043, 1046, 1047, 1048], "multicollinear": 188, "multidimension": 230, "multilabel": [28, 119, 245, 287, 371, 384, 1004, 1005], "multilabel_confusion_matrix": 757, "multilabelbinar": [878, 1015], "multinomi": [203, 226, 1000, 1006], "multinomialnb": 846, "multioutput": [32, 182, 286, 1005, 1042, 1043, 1044, 1045, 1046, 1049, 1050, 1051, 1052], "multioutputclassifi": [839, 1005], "multioutputregressor": [840, 1005], "multipl": [107, 249, 272, 358, 382, 411, 993, 994, 1004, 1042, 1043], "multitaskelasticnet": 663, "multitaskelasticnetcv": 664, "multitasklasso": 665, "multitasklassocv": 666, "multivari": [116, 994], "murmurhash3_32": 968, "mutual": [160, 407], "mutual_info_classif": 609, "mutual_info_regress": 610, "mutual_info_scor": 758, "my": 387, "n_featur": 50, "n_job": 387, "naiv": [44, 53, 62, 63, 1006], "naive_bay": [33, 1042, 1044, 1045, 1046, 1047, 1049, 1050], "name": [152, 320, 387, 408, 1004], "nan": 994, "nan_euclidean_dist": 772, "nativ": [144, 314, 317, 319, 324, 387], "ndcg_score": 759, "nearest": [101, 182, 288, 289, 290, 291, 296, 299, 300, 317, 994, 1007], "nearestcentroid": 854, "nearestneighbor": 855, "necessari": 380, "need": 387, "neg": [55, 121, 165, 206, 412, 1000], "neighbor": [34, 101, 182, 230, 288, 289, 290, 291, 296, 300, 313, 317, 994, 1001, 1007, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "neighborhood": [296, 297, 298, 1007], "neighborhoodcomponentsanalysi": 856, "nest": [273, 408], "net": [194, 199, 1000], "netbsd": 393, "network": [182, 186, 302, 1008, 1009], "neural": [182, 186, 302, 1008, 1009], "neural_network": [35, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1053], "new": [317, 319, 320, 322, 323, 375, 387, 1022, 1034, 1035, 1037, 1038, 1039, 1040, 1041], "newsgroup": [103, 350, 370], "newton": 326, "next": [53, 388], "nightli": 373, "nmf": [121, 321, 412, 541], "nnmf": 412, "nois": [175, 176, 193], "noisi": [124, 176, 214], "non": [44, 55, 121, 147, 206, 210, 214, 230, 273, 325, 338, 345, 412, 1000, 1014], "non_negative_factor": 548, "none": 358, "norm": 412, "normal": [70, 190, 210, 308, 312, 879, 894, 1004, 1014], "normalized_mutual_info_scor": 760, "note": [364, 403, 406, 411], "notfittederror": 579, "novelti": [294, 1010, 1019], "now": [317, 320, 1044], "number": [73, 94, 144, 150, 164, 280, 362, 377, 994], "numer": [185, 325, 363, 377], "numpi": [363, 380], "nusvc": 909, "nusvr": 910, "nystroem": [642, 996], "oa": [70, 110, 111, 420, 475], "object": [42, 238, 263, 377, 387, 993, 1004, 1031], "observ": 184, "obtain": [387, 411], "off": [262, 282, 1000], "offici": 1053, "okcupid": 1028, "older": 1034, "olivetti": 370, "omp": 1000, "one": [117, 144, 248, 1000, 1004], "oneclasssvm": 911, "onehotencod": [321, 880], "onetoonefeaturemixin": 428, "onevsoneclassifi": [835, 1005], "onevsrestclassifi": [287, 836, 1005], "onli": [227, 1045, 1047], "onlin": [84, 217, 320, 321, 1018], "onnx": 401, "oob": 139, "openml": [45, 314, 317, 369], "openmp": [363, 376], "oper": [42, 277, 278, 374, 384, 417, 1004], "optic": [99, 372, 407, 450], "optim": [30, 42, 381, 993], "optimis": 175, "option": 406, "oracl": 409, "ordin": 144, "ordinalencod": [323, 881], "ordinari": [207, 208, 1000], "org": [369, 379, 1028], "origin": [87, 126, 274, 298, 308], "orthogon": [209, 1000], "orthogonal_mp": 688, "orthogonal_mp_gram": 689, "orthogonalmatchingpursuit": 667, "orthogonalmatchingpursuitcv": 668, "osx": [387, 393], "other": [314, 326, 369, 387, 414, 1023, 1034], "otto": 1028, "our": [92, 263, 266, 282, 375], "out": [48, 146, 364, 383, 411, 993, 1000, 1006], "outdat": 383, "outlier": [26, 49, 195, 227, 237, 247, 294, 295, 308, 1000, 1010, 1014], "outliermixin": 429, "outlin": 1012, "output": [154, 246, 308, 322, 324, 356, 1020], "outputcodeclassifi": [837, 1005], "over": 249, "overfit": 283, "overhead": 362, "oversubscript": 363, "overview": [285, 382, 401, 407, 1004, 1010], "ovo": 277, "ovr": 277, "own": [377, 387], "p": [411, 1028], "packag": [242, 1023, 1046], "pair": [127, 407], "pair_confusion_matrix": 718, "paired_cosine_dist": 773, "paired_dist": 774, "paired_euclidean_dist": 775, "paired_manhattan_dist": 776, "pairwis": [28, 44, 268, 325, 1002], "pairwise_dist": 781, "pairwise_distances_argmin": 782, "pairwise_distances_argmin_min": 783, "pairwise_distances_chunk": 784, "pairwise_kernel": 777, "pairwisekernel": 623, "panda": [322, 380], "parallel": [42, 363, 381, 407, 414, 969, 993], "parallel_backend": 971, "paramet": [30, 42, 47, 110, 147, 266, 281, 319, 339, 346, 375, 388, 389, 408, 414, 993, 1000, 1004, 1019], "parametergrid": 814, "parametersampl": 815, "parametr": 1009, "parametrize_with_check": 946, "pariba": 1028, "paristech": 1028, "pariti": 98, "parser": [322, 369], "part": [84, 416], "parti": [210, 244, 326, 393], "partial": [117, 184, 186, 248, 1011], "partial_depend": 636, "partialdependencedisplai": 635, "partit": 190, "passiv": 1000, "passiveaggressiveclassifi": 669, "passiveaggressiveregressor": 670, "past": 0, "patch": [124, 415], "patchextractor": 585, "path": [151, 199, 204, 215, 357, 393], "pattern": 131, "pca": [45, 92, 106, 121, 122, 125, 126, 127, 128, 129, 313, 324, 325, 412, 542, 1021], "pdp": 186, "peerindex": 1028, "penalti": [202, 221, 346], "peopl": [0, 387, 1034, 1035, 1036, 1037], "per": 351, "percentag": 1004, "percentil": 342, "perceptron": [186, 303, 671, 1000, 1008], "perform": [73, 79, 271, 313, 319, 321, 325, 328, 351, 362, 375, 376, 407, 411], "period": [44, 211], "permiss": 387, "permut": [142, 187, 188, 274, 317, 411, 1012], "permutation_import": 637, "permutation_test_scor": 832, "perplex": 235, "persist": 401, "phimeca": 1028, "pickl": 401, "pictur": 81, "pinbal": 1004, "pipelin": [36, 102, 103, 105, 106, 155, 162, 182, 185, 239, 244, 249, 269, 314, 326, 342, 387, 388, 408, 416, 867, 1021, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053], "pitfal": [185, 358], "pl": 116, "plai": 342, "plan": 387, "plant": 372, "platform": [373, 383, 393], "plot": [22, 28, 41, 47, 48, 50, 59, 62, 67, 71, 74, 77, 82, 83, 84, 91, 97, 98, 100, 101, 110, 114, 116, 119, 122, 123, 127, 136, 141, 143, 148, 151, 155, 156, 157, 158, 164, 181, 186, 192, 193, 196, 204, 205, 207, 214, 215, 219, 231, 238, 242, 247, 248, 250, 258, 264, 265, 270, 272, 275, 277, 287, 295, 306, 314, 317, 319, 320, 328, 336, 337, 342, 343, 350, 355, 356, 382, 999, 1011, 1031], "plot_tre": 921, "pls1": 116, "pls2": 116, "plscanon": [410, 483], "plsregress": [410, 484], "plssvd": [410, 485], "point": [123, 262, 282, 298, 401], "poisson": [210, 228, 318, 319, 1004], "poissonregressor": 672, "polar": [53, 324], "polici": 375, "polynomi": [44, 190, 192, 193, 211, 343, 996, 1000, 1002, 1014], "polynomial_kernel": 778, "polynomialcountsketch": [319, 643], "polynomialfeatur": 882, "posit": [121, 320], "possibl": [91, 380], "post": [30, 262, 271, 282, 354, 406], "post1": 1044, "posterior": 178, "power": [117, 210], "power_transform": 895, "powertransform": [308, 883], "pr": 374, "practic": [268, 358, 376, 380, 1001, 1008, 1018, 1019, 1020], "pre": [167, 271, 358, 388], "precis": [275, 1004], "precision_recall_curv": 785, "precision_recall_fscore_support": 786, "precision_scor": 787, "precisionrecalldisplai": [238, 703], "precomput": [130, 194, 317, 412], "predefin": [411, 1004], "predefinedsplit": 816, "predict": [44, 50, 53, 62, 117, 136, 147, 158, 170, 184, 193, 210, 243, 262, 264, 275, 328, 356, 362, 387, 388, 406, 411, 417, 1004, 1015], "predictionerrordisplai": 704, "predictor": 155, "premium": 228, "prepar": [121, 136, 145, 150, 190, 207, 230, 277, 278, 313, 339], "preprocess": [37, 148, 155, 182, 185, 186, 247, 249, 307, 352, 358, 387, 1014, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "preprocessor": 186, "preserv": 383, "preval": 271, "princip": [56, 117, 127, 412, 1021], "prior": [54, 178, 253], "privat": 1051, "probabilist": [128, 170, 412, 417], "probabl": [62, 63, 64, 67, 157, 172, 405, 414, 1019], "problem": [185, 262, 412, 1019, 1020], "process": [168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 182, 185, 358, 390, 417, 1003], "process_rout": 963, "processor": 388, "product": [178, 228, 383, 387, 401, 417, 624], "profil": 381, "project": [0, 117, 126, 129, 241, 377, 387, 1016, 1021, 1023], "pronounc": 387, "propag": [52, 74, 328, 329, 330, 407, 1017], "proper": [53, 174], "properti": 389, "propos": 390, "provid": 380, "prune": [317, 354, 1020], "public": 1044, "publica": 1028, "pull": [375, 379, 383, 387], "pure": 228, "purpos": [214, 352, 1024], "pursuit": [209, 1000], "pypi": [387, 1053], "pytest": 383, "python": [242, 363, 381, 1022, 1023], "pytorch": 403, "qda": [71, 998], "quadrat": [71, 178, 417, 998], "quadraticdiscriminantanalysi": 551, "qualit": [44, 53], "qualiti": [351, 1004], "quantifi": [351, 1004], "quantil": [53, 147, 150, 212, 320, 321, 1000], "quantile_transform": 896, "quantileregressor": [212, 673], "quantiletransform": [308, 884], "quantiz": 87, "question": [387, 1027], "r2_score": 788, "r_regress": 611, "radial": [178, 417, 996], "radius_neighbors_graph": 861, "radiusneighborsclassifi": 857, "radiusneighborsregressor": 858, "radiusneighborstransform": 859, "rand": 407, "rand_scor": 789, "random": [42, 56, 121, 139, 141, 153, 154, 187, 188, 241, 250, 274, 276, 324, 356, 358, 377, 384, 411, 412, 414, 993, 1000, 1016, 1021], "random_project": [38, 1048], "random_st": 387, "randomforestclassifi": 565, "randomforestregressor": 566, "randomized_range_find": 950, "randomized_svd": 951, "randomizedsearchcv": 817, "randomli": 119, "randomst": 358, "randomtreesembed": 567, "rang": 1014, "rangespan": 1028, "rank": [28, 210, 1004], "ransac": [213, 1000], "ransacregressor": 674, "rate": 414, "ratio": [271, 1004], "ration": [178, 417], "rationalquadrat": 626, "rbf": [242, 338, 339, 343, 417, 625, 1002, 1019], "rbf_kernel": 779, "rbfsampler": 644, "rcv1": 370, "reachabl": 407, "read": 375, "real": [43, 49, 108, 182, 370], "recal": [275, 1004], "recall_scor": 790, "receiv": [277, 278, 1004], "recent": 1, "recogn": 69, "recognit": [46, 370, 372], "recommend": [358, 1023], "reconstruct": [45, 54, 124], "reconstruct_from_patches_2d": 589, "recov": 192, "recurs": [163, 164, 416], "redirect": 56, "reduc": [92, 362], "reduct": [105, 230, 234, 249, 297, 313, 351, 998, 1007, 1021], "refer": [2, 51, 63, 65, 113, 124, 138, 190, 196, 285, 301, 379, 417, 994], "refit": [262, 266], "regard": [262, 406], "region": [81, 268], "register_parallel_backend": 973, "regress": [26, 28, 44, 53, 106, 108, 116, 117, 136, 147, 148, 158, 169, 174, 175, 176, 177, 192, 193, 200, 202, 203, 204, 207, 208, 210, 212, 225, 227, 228, 240, 243, 300, 345, 356, 371, 408, 417, 995, 997, 1000, 1004, 1005, 1007, 1008, 1018, 1019, 1020], "regressor": [26, 50, 136, 147, 192, 214, 315, 317, 320, 414], "regressorchain": [841, 1005], "regressormixin": 430, "regressortag": 925, "regular": [79, 110, 149, 185, 204, 214, 215, 281, 303, 346, 1000, 1008], "reinforc": 387, "relat": [44, 48, 1012, 1023, 1041], "releas": [182, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 379, 393, 1032], "relev": [112, 196, 1000], "remark": [44, 91, 234, 241], "remot": 383, "remov": [387, 416, 1014, 1034], "repeat": [358, 408, 411], "repeatedkfold": 818, "repeatedstratifiedkfold": 819, "replac": 181, "repli": 383, "replic": 401, "report": [375, 380, 1004], "repositori": 369, "represent": [127, 186, 239, 318, 362, 377, 415], "reproduc": [358, 380], "request": [375, 379, 383, 387], "resampl": 974, "rescal": 313, "reshap": 362, "resolv": 375, "resourc": [280, 363, 375, 1022, 1027], "respect": 271, "respons": [116, 390], "rest": [203, 277], "restart": 381, "restrict": [306, 1009], "result": [47, 48, 59, 65, 74, 82, 83, 84, 91, 92, 97, 98, 101, 110, 112, 114, 122, 123, 136, 141, 155, 158, 181, 190, 196, 207, 215, 243, 247, 272, 287, 295, 314, 345, 351, 356, 358, 993], "retriev": [52, 317], "return": 403, "reuter": 48, "review": [374, 375, 383], "rfe": 595, "rfecv": 596, "rich": [239, 318], "ridg": [169, 193, 195, 208, 214, 215, 243, 315, 675, 997, 1000], "ridge_regress": 690, "ridgeclassifi": 677, "ridgeclassifiercv": 678, "ridgecv": 676, "right": 395, "roadmap": 1024, "robust": [26, 89, 112, 113, 192, 213, 216, 358, 409, 993, 1000], "robust_scal": 897, "robustscal": [308, 885], "roc": [250, 265, 277, 278, 317, 1004], "roc_auc_scor": 791, "roc_curv": 792, "roccurvedisplai": [238, 705], "role": 390, "roll": [234, 377], "root_mean_squared_error": 793, "root_mean_squared_log_error": 794, "rotat": 131, "rout": [42, 244, 323, 324, 326, 389, 398, 1051, 1052, 1053], "routin": [48, 363, 384], "rule": 1004, "run": [47, 92, 272], "runtim": [324, 373], "r\u00b2": 1004, "sa": 247, "safe_mask": 975, "safe_sparse_dot": 952, "safe_sqr": 976, "sampl": [10, 42, 59, 74, 89, 97, 110, 122, 123, 161, 194, 223, 243, 269, 281, 300, 318, 345, 348, 369, 384, 389, 414, 1000], "sample_without_replac": 972, "saniti": 383, "save": 387, "scalabl": [190, 270, 318], "scale": [89, 185, 230, 233, 313, 346, 364, 898, 1001, 1010, 1014, 1021], "scaler": 308, "scatter": 116, "scenario": 1000, "scientif": 1022, "scikit": [0, 42, 244, 263, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 361, 362, 373, 376, 377, 379, 380, 387, 390, 393, 1023, 1024, 1028], "scipi": [363, 1051], "score": [56, 116, 141, 164, 181, 192, 258, 267, 274, 275, 342, 398, 407, 411, 999, 1004, 1019], "scorer": 1004, "script": 380, "search": [249, 266, 268, 276, 279, 285, 388, 993], "second": [49, 73], "secur": [401, 1052], "segment": [81, 100], "select": [26, 28, 88, 94, 105, 128, 159, 161, 164, 165, 182, 198, 200, 205, 258, 260, 342, 387, 398, 402, 411, 416, 993, 1000, 1040], "selectfdr": 597, "selectfpr": 598, "selectfrommodel": [416, 599], "selectfw": 600, "selectkbest": 601, "selectormixin": 603, "selectpercentil": 602, "self": [319, 331, 1017], "selftrainingclassifi": 904, "semant": 412, "semi": [182, 327, 328, 332, 333, 1017], "semi_supervis": [39, 1044, 1045, 1046, 1050, 1053], "sen": [227, 1000], "sens": 54, "sensit": 262, "separ": [122, 222, 340, 341], "sequenc": [177, 387], "sequenti": [165, 416], "sequentialfeatureselector": [319, 604], "seri": [53, 205, 411], "serv": 401, "set": [49, 108, 110, 155, 167, 181, 214, 262, 275, 325, 339, 354, 387, 406, 411, 1000], "set_config": 905, "set_output": [251, 322, 324, 377], "set_param": 377, "setuptool": 1053, "sever": [228, 232], "sgd": [219, 220, 221, 222, 223, 1000, 1018], "sgdclassifi": 679, "sgdoneclasssvm": 680, "sgdregressor": 681, "shape": 235, "share": [44, 53, 186], "shift": [97, 407], "should": [387, 1004], "show": 277, "show_vers": 906, "shrinkag": [110, 409, 414, 998], "shrunk": 409, "shrunk_covari": 481, "shrunkcovari": 476, "shrunken": 1007, "shuffl": [411, 977], "shufflesplit": 820, "sigmoid": [343, 405, 1002], "sigmoid_kernel": 780, "signal": [196, 412], "signific": 274, "silhouett": [94, 407], "silhouette_sampl": 795, "silhouette_scor": 796, "similar": [177, 1002, 1004], "simpl": [133, 169, 244, 293, 381], "simpleimput": [325, 633], "simul": 184, "sine": [178, 259, 417], "singl": [138, 155, 228, 238, 371, 407, 994], "single_source_shortest_path_length": 957, "singular": [56, 412], "sinusoid": 193, "size": 414, "sketch": 996, "skew": 996, "skewedchi2sampl": 645, "sklearn": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "sklearn_assume_finit": 363, "sklearn_build_enable_debug_symbol": 363, "sklearn_enable_debug_cython_direct": 363, "sklearn_pairwise_dist_chunk_s": 363, "sklearn_run_float32_test": 363, "sklearn_se": 363, "sklearn_skip_network_test": 363, "sklearn_tests_global_random_se": 363, "sklearn_warnings_as_error": 363, "sklearn_working_memori": 363, "skop": 401, "slep": 390, "smacof": 697, "small": 380, "sne": [235, 1001], "so": 387, "social": 1027, "soft": 414, "solido": 1028, "solut": 91, "solver": [217, 326, 412, 1000], "some": 342, "someth": 380, "sometim": 387, "sort_graph_by_row_valu": 862, "sourc": [103, 122, 373], "space": [52, 126, 408, 993, 1001], "spars": [42, 114, 121, 130, 185, 196, 197, 225, 317, 324, 350, 351, 384, 409, 412, 416, 1014, 1016, 1018, 1051], "sparse_encod": 549, "sparsecod": 543, "sparsefunc": 1043, "sparsepca": [412, 544], "sparserandomproject": 900, "sparsiti": [202, 415], "spawn": 363, "speci": [51, 301, 370], "special": 352, "specif": [277, 373, 993, 1023], "specifi": [152, 387, 993], "spectral": [58, 59, 60, 100, 230, 404, 407, 1001], "spectral_clust": 462, "spectral_embed": 698, "spectralbiclust": [59, 451], "spectralclust": 452, "spectralcoclust": 453, "spectralembed": 694, "speed": [50, 381], "sphere": 232, "sphinx": 375, "spline": [44, 211, 320, 1014], "splinetransform": 886, "split": [144, 319, 358, 411], "splitter": [30, 358], "sponsor": 0, "spotifi": 1028, "sprint": 0, "squar": [117, 147, 178, 206, 207, 208, 214, 417, 996, 1000, 1002, 1004], "stabil": 318, "stabl": 320, "stack": [155, 317, 414], "stackingclassifi": 568, "stackingregressor": 569, "stall": 375, "standard": [383, 1014], "standardscal": [308, 887], "start": 388, "statement": 1024, "statist": [268, 1023], "statlog": 262, "statu": 398, "std": 192, "step": [44, 249, 379, 388, 408], "stochast": [218, 224, 230, 304, 1000, 1001, 1009, 1018], "stock": 52, "stop": [145, 150, 218, 415, 1018], "strategi": [87, 266, 285, 304, 311, 323, 325, 364, 407], "stratif": 411, "stratifi": 411, "stratifiedgroupkfold": [411, 821], "stratifiedkfold": 822, "stratifiedshufflesplit": 823, "stream": 364, "string": [387, 1004], "strip": 350, "strong": 195, "strongli": 1012, "structur": [52, 75, 82, 101, 177, 330, 357], "studi": 247, "submit": 375, "subsampl": 414, "subscript": 325, "subtleti": 358, "success": [279, 280, 319, 993], "sum": 627, "summar": 401, "summari": [63, 145, 200, 351, 352, 401, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041], "supervis": [182, 327, 328, 332, 333, 1008, 1017, 1026], "support": [0, 63, 144, 150, 182, 205, 314, 317, 318, 319, 320, 322, 323, 324, 326, 334, 337, 345, 387, 393, 398, 403, 405, 414, 1019, 1020, 1027, 1051, 1052, 1053], "surfac": [143, 242, 355], "svc": [250, 343, 346, 912, 1019], "svd": [56, 121, 412], "svm": [40, 46, 161, 162, 190, 224, 242, 320, 333, 335, 336, 338, 339, 340, 341, 342, 343, 344, 347, 348, 1000, 1010, 1018, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052], "svmlight": 369, "svr": [243, 345, 913, 1019], "swiss": 234, "switch": 363, "symmetr": 116, "synthet": [62, 108, 192, 196, 265, 315, 380], "system": 373, "t": [230, 235, 1001], "tabl": 387, "tag": [373, 375, 377, 926], "take": 268, "takeawai": 210, "talk": 1022, "tangent": 1001, "target": [42, 108, 176, 228, 314, 315, 356, 387, 389, 408, 1005, 1014, 1015], "targetencod": [323, 888], "targettag": 927, "task": [26, 205, 356, 1000, 1023], "team": [0, 374], "technic": 390, "techniqu": 231, "templat": 377, "tensor": 996, "term": [351, 389, 415], "test": [45, 110, 160, 271, 274, 281, 350, 354, 373, 375, 377, 383, 384, 411], "text": [17, 48, 182, 239, 269, 332, 349, 350, 351, 352, 370, 415], "tf": 415, "tfidftransform": 592, "tfidfvector": [351, 352, 593], "than": [326, 387], "theil": [227, 1000], "theilsenregressor": 682, "them": [124, 374], "theoret": 241, "thi": [214, 1024], "third": [210, 244, 326, 393], "thread": [326, 363, 1053], "threshold": [167, 262, 282, 325, 331, 406], "throughput": [50, 362], "tie": 347, "time": [44, 53, 141, 205, 242, 243, 350, 411, 1025], "timeseriessplit": 824, "tip": [362, 376, 383, 993, 1001, 1008, 1018, 1019, 1020], "togeth": [248, 277], "toi": [80, 96, 237, 372], "toler": 165, "tomographi": 54, "too": 363, "tool": [384, 387, 403], "top": [351, 1004], "top_k_accuracy_scor": 797, "topic": 55, "total": [153, 354, 414], "tough": 374, "track": [383, 408], "tracker": [375, 1027], "trade": 1000, "tradeoff": [265, 1004], "train": [135, 136, 145, 148, 151, 158, 164, 203, 214, 238, 243, 247, 248, 250, 258, 281, 285, 306, 314, 315, 319, 331, 339, 343, 350, 354, 355, 357, 401, 411, 1007, 1017], "train_test_split": 833, "transform": [103, 104, 105, 108, 116, 140, 153, 249, 319, 320, 321, 326, 367, 387, 388, 408, 1007, 1014, 1015, 1016], "transformedtargetregressor": 465, "transformermixin": 431, "transformertag": 928, "translat": 1023, "tree": [41, 135, 136, 140, 142, 143, 150, 153, 182, 187, 210, 317, 322, 323, 324, 326, 353, 354, 355, 356, 357, 387, 414, 416, 1007, 1012, 1020, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "triag": 374, "trick": [362, 381, 383, 415], "trigonometr": 44, "troubleshoot": 393, "true": [192, 193], "truncat": 412, "truncatedsvd": 545, "trustworthi": 699, "truth": [73, 192], "tsne": [288, 695], "tune": [30, 147, 262, 266, 269, 282, 319, 325, 406, 993], "tunedthresholdclassifiercv": [325, 825], "tutori": 1022, "tweedi": [228, 1004], "tweedieregressor": [228, 683], "two": [100, 137, 197, 248, 268], "type": [104, 253, 376, 377, 387, 389, 403, 407], "type_of_target": 966, "typic": 374, "t\u00e9l\u00e9com": 1028, "u": 0, "ubuntu": 393, "uci": 285, "unbalanc": [341, 1019], "uncertain": 328, "uncertainti": 53, "unclaim": 375, "undefinedmetricwarn": 580, "under": [177, 387, 1030, 1050], "underfit": 283, "understand": 357, "unfold": 383, "uniform": [308, 1014], "unique_label": 967, "univari": [88, 116, 161, 342, 416, 994], "univers": 377, "unlabel": 1017, "unless": 380, "unstructur": 101, "unsupervis": [1007, 1009, 1021, 1029], "unweight": 398, "up": 1010, "updat": [379, 1044], "us": [45, 46, 52, 56, 121, 122, 124, 152, 153, 155, 165, 167, 174, 213, 224, 226, 268, 272, 277, 287, 309, 345, 350, 351, 357, 358, 364, 376, 380, 381, 383, 387, 411, 412, 415, 416, 998, 1000, 1001, 1004, 1008, 1018, 1019, 1020, 1028, 1044], "usabl": 387, "usag": [381, 387, 398, 403, 405, 408, 414, 415, 1000], "user": [1027, 1030], "util": [42, 368, 380, 384, 1031, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "v": [88, 101, 110, 111, 113, 117, 126, 164, 186, 187, 195, 203, 228, 271, 277, 283, 354, 407, 414, 994], "v_measure_scor": 798, "valgrind": [381, 383], "valid": [30, 42, 44, 164, 200, 241, 262, 263, 264, 266, 267, 271, 273, 278, 342, 358, 362, 377, 384, 406, 411, 993, 999, 1000], "validate_data": 992, "validation_curv": 834, "validationcurvedisplai": [323, 826], "valu": [150, 165, 179, 180, 181, 182, 235, 244, 317, 323, 324, 326, 357, 375, 403, 412, 414, 994, 1012, 1014, 1020], "vanilla": [262, 282], "vari": [73, 303, 331, 407], "variabl": [26, 116, 184, 185, 363, 387], "varianc": [138, 208, 416, 1004, 1014], "variancethreshold": 605, "variant": 180, "variat": [253, 1003], "variou": [50, 86, 217, 235, 387], "vector": [56, 63, 87, 182, 334, 337, 345, 350, 352, 415, 1019], "version": [321, 369, 373, 375, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "versu": [138, 224, 273, 333, 362], "via": [45, 53, 87, 198, 200, 228, 414, 996, 1004], "video": [375, 1022], "visual": [5, 30, 52, 92, 131, 145, 203, 238, 243, 250, 263, 305, 318, 339, 407, 408, 1004, 1031], "vote": [158, 414], "votingclassifi": [156, 157, 570], "votingregressor": 571, "wage": [184, 185], "wai": [186, 375, 387], "ward": [82, 101, 407], "ward_tre": 463, "warm": 381, "warm_start": 1008, "warn": 384, "we": 101, "weak": [135, 414], "web": 326, "websit": [379, 1044], "weight": [42, 135, 192, 194, 223, 305, 318, 348, 398, 414, 415], "weighted_mod": 953, "what": [357, 387], "when": 262, "which": [1000, 1004], "whitekernel": 628, "who": 1028, "why": [387, 414], "wikipedia": 56, "wild": 370, "window": [373, 393], "wine": 372, "winpython": 393, "wisconsin": 372, "within": 105, "without": [75, 296, 350], "wolf": [70, 111, 409], "word": [350, 415], "work": [42, 182, 349, 362, 374, 387], "workflow": [374, 401], "world": [43, 108, 182, 370], "wrap": 287, "written": 69, "wrong": [185, 387], "x": [227, 326], "x86_64": 383, "xor": [173, 343, 417], "y": [227, 387, 1015, 1017], "yeast": 285, "yep": 381, "yhat": 1028, "you": 387, "your": [377, 380], "zero": 1004, "zero_one_loss": 799, "zopa": 1028}})